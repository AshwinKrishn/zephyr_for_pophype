
zephyr.elf:     file format elf64-x86-64


Disassembly of section .locore:

0000000000001000 <__start>:
 */
.section .locore,"ax"
.code32
.globl __start
__start:
	jmp __start32
    1000:	eb 08                	jmp    100a <__start32>
	nop
    1002:	90                   	nop
	nop
    1003:	90                   	nop
	nop
    1004:	90                   	nop
	nop
    1005:	90                   	nop
	nop
    1006:	90                   	nop
	nop
    1007:	90                   	nop
	nop
    1008:	90                   	nop
	nop
    1009:	90                   	nop

000000000000100a <__start32>:
	 * kernel execution begins here in 32-bit mode, with flat-mode
	 * descriptors in all segment registers, interrupts disabled.
	 */

	/* See note above, re: OUTRAGEOUS HACK */
	movl $__start, %ebp
    100a:	bd 00 10 00 00       	mov    $0x1000,%ebp
	movb $0x90, 0(%ebp)
    100f:	c6 45 00 90          	movb   $0x90,0x0(%rbp)
	movb $0x90, 1(%ebp)
    1013:	c6 45 01 90          	movb   $0x90,0x1(%rbp)
	movb $0x90, 2(%ebp)
    1017:	c6 45 02 90          	movb   $0x90,0x2(%rbp)
	movb $0x90, 3(%ebp)
    101b:	c6 45 03 90          	movb   $0x90,0x3(%rbp)
	movb $0x90, 4(%ebp)
    101f:	c6 45 04 90          	movb   $0x90,0x4(%rbp)
	movb $0x90, 5(%ebp)
    1023:	c6 45 05 90          	movb   $0x90,0x5(%rbp)
	movb $0x90, 6(%ebp)
    1027:	c6 45 06 90          	movb   $0x90,0x6(%rbp)
	movb $0x90, 7(%ebp)
    102b:	c6 45 07 90          	movb   $0x90,0x7(%rbp)
	wbinvd
    102f:	0f 09                	wbinvd 

	lgdt gdt48
    1031:	0f 01 15 c0 60 00 00 	lgdt   0x60c0(%rip)        # 70f8 <_lodata_end+0xf8>
	lidt idt48
    1038:	0f 01 1d 00 30 00 00 	lidt   0x3000(%rip)        # 403f <_lodata_start+0x3f>
	 * "Disable" legacy i8259 interrupt controllers. Note that we
	 * can't actually disable them, but we mask all their interrupt
	 * sources which is effectively the same thing (almost).
	 */

	movb $0xff, %al
    103f:	b0 ff                	mov    $0xff,%al
	outb %al, $0x21
    1041:	e6 21                	out    %al,$0x21
	outb %al, $0xA1
    1043:	e6 a1                	out    %al,$0xa1
#endif

#ifdef CONFIG_MULTIBOOT
	jmp 1f
    1045:	eb 0d                	jmp    1054 <__start32+0x4a>
    1047:	90                   	nop
    1048:	02 b0 ad 1b 02 00    	add    0x21bad(%rax),%dh
    104e:	00 00                	add    %al,(%rax)
    1050:	fc                   	cld    
    1051:	4f 52                	rex.WRXB push %r10
    1053:	e4 bd                	in     $0xbd,%al
	/*
	 * N.B.: if multiboot info struct is present, "common.S"
	 * has left a pointer to it in EBX.
	 */

	movl $x86_cpuboot, %ebp		/* BSP is always logical CPU id 0 */
    1055:	20 75 14             	and    %dh,0x14(%rbp)
    1058:	00                   	.byte 0x0
	movl %ebx, __x86_cpuboot_t_arg_OFFSET(%ebp)	/* multiboot info */
    1059:	89 5d 28             	mov    %ebx,0x28(%rbp)

000000000000105c <go64>:


go64:	/* Install page tables and transition to long mode */
	install_pagetables_32
    105c:	0f 20 e0             	mov    %cr4,%rax
    105f:	0d 20 02 00 00       	or     $0x220,%eax
    1064:	0f 22 e0             	mov    %rax,%cr4
    1067:	0f 06                	clts   
    1069:	b8 00 60 15 00       	mov    $0x156000,%eax
    106e:	0f 22 d8             	mov    %rax,%cr3
    1071:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
    1076:	0f 32                	rdmsr  
    1078:	0d 01 09 00 00       	or     $0x901,%eax
    107d:	0f 30                	wrmsr  
    107f:	0f 20 c0             	mov    %cr0,%rax
    1082:	0d 00 00 01 80       	or     $0x80010000,%eax
    1087:	0f 22 c0             	mov    %rax,%cr0
	jmpl $X86_KERNEL_CS, $enter_code64
    108a:	ea                   	(bad)  
    108b:	91                   	xchg   %eax,%ecx
    108c:	10 00                	adc    %al,(%rax)
    108e:	00 18                	add    %bl,(%rax)
	...

0000000000001091 <enter_code64>:
	 * Here we reload the segment registers,
	 * and configure per-CPU stuff: GS, task register, stack.
	 */
	.code64
enter_code64:
	movl $X86_KERNEL_DS, %eax
    1091:	b8 20 00 00 00       	mov    $0x20,%eax
	movw %ax, %ds
    1096:	8e d8                	mov    %eax,%ds
	movw %ax, %es
    1098:	8e c0                	mov    %eax,%es
	movw %ax, %ss
    109a:	8e d0                	mov    %eax,%ss
	movw %ax, %fs
    109c:	8e e0                	mov    %eax,%fs
	 * zero, GS_BASE is also being set to zero. This would interfere
	 * with the actual use of GS_BASE for usespace. To avoid accidentally
	 * clearing GS_BASE, simply set GS to 0 at boot, so any subsequent
	 * clearing of GS will not clear GS_BASE.
	 */
	mov $0, %eax
    109e:	b8 00 00 00 00       	mov    $0x0,%eax
	movw %ax, %gs
    10a3:	8e e8                	mov    %eax,%gs

	movw __x86_cpuboot_t_tr_OFFSET(%rbp), %ax
    10a5:	66 8b 45 04          	mov    0x4(%rbp),%ax
	ltr %ax
    10a9:	0f 00 d8             	ltr    %ax

	/* Set up MSRs for GS / KERNEL_GS base */
	movq __x86_cpuboot_t_gs_base_OFFSET(%rbp), %rax
    10ac:	48 8b 45 08          	mov    0x8(%rbp),%rax
	movq %rax, %rdx
    10b0:	48 89 c2             	mov    %rax,%rdx
	shrq $32, %rdx
    10b3:	48 c1 ea 20          	shr    $0x20,%rdx
	/* X86_KERNEL_GS_BASE and X86_GS_BASE are swapped by the 'swapgs'
	 * instruction.
	 */
	movl $X86_KERNEL_GS_BASE, %ecx
    10b7:	b9 02 01 00 c0       	mov    $0xc0000102,%ecx
	wrmsr
    10bc:	0f 30                	wrmsr  
	/* X86_GS_BASE shadows base fields of %gs, effectively setting %gs */
	movl $X86_GS_BASE, %ecx
    10be:	b9 01 01 00 c0       	mov    $0xc0000101,%ecx
	wrmsr
    10c3:	0f 30                	wrmsr  

	movq __x86_cpuboot_t_sp_OFFSET(%rbp), %rsp
    10c5:	48 8b 65 10          	mov    0x10(%rbp),%rsp
	movq %rsp, %gs:__x86_tss64_t_ist1_OFFSET
    10c9:	65 48 89 24 25 24 00 	mov    %rsp,%gs:0x24
    10d0:	00 00 

	/* finally, complete environment for the C runtime and go. */
	cld	/* GCC presumes a clear direction flag */
    10d2:	fc                   	cld    
	shr $3, %rcx /* moving 8 bytes a time, so fewer repeats */
	rep stosq
#endif

	/* Enter C domain now that we have a stack set up, never to return */
	movq %rbp, %rdi
    10d3:	48 89 ef             	mov    %rbp,%rdi
	call z_x86_cpu_init
    10d6:	e8 dd b8 10 00       	callq  10c9b8 <z_x86_cpu_init>

00000000000010db <__start64>:
	 * 32 bit startup does.
	 */
.globl __start64
__start64:
	/* Zero the TSC */
	xorq %rax, %rax
    10db:	48 31 c0             	xor    %rax,%rax
	xorq %rdx, %rdx
    10de:	48 31 d2             	xor    %rdx,%rdx
	movq $X86_TIME_STAMP_COUNTER_MSR, %rcx
    10e1:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
	wrmsr
    10e8:	0f 30                	wrmsr  

	lidt idt80
    10ea:	0f 01 1c 25 06 30 00 	lidt   0x3006
    10f1:	00 
	lgdt gdt80
    10f2:	0f 01 14 25 c6 60 00 	lgdt   0x60c6
    10f9:	00 

	install_pagetables_64
    10fa:	0f 20 e0             	mov    %cr4,%rax
    10fd:	48 0d 20 02 00 00    	or     $0x220,%rax
    1103:	0f 22 e0             	mov    %rax,%cr4
    1106:	0f 06                	clts   
    1108:	48 c7 c0 00 60 15 00 	mov    $0x156000,%rax
    110f:	0f 22 d8             	mov    %rax,%cr3
    1112:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
    1117:	0f 32                	rdmsr  
    1119:	0d 01 09 00 00       	or     $0x901,%eax
    111e:	0f 30                	wrmsr  
    1120:	0f 20 c0             	mov    %cr0,%rax
    1123:	0d 00 00 01 80       	or     $0x80010000,%eax
    1128:	0f 22 c0             	mov    %rax,%cr0

	/* Disable 8259 PIT.  Almost certainly not needed on modern
	 * UEFI platforms taking this code path, but...
	 */
	movb $0xff, %al
    112b:	b0 ff                	mov    $0xff,%al
	outb %al, $0x21
    112d:	e6 21                	out    %al,$0x21
	outb %al, $0xA1
    112f:	e6 a1                	out    %al,$0xa1

	/* Far call into the Zephyr code segment */
	movq $x86_cpuboot, %rbp
    1131:	48 c7 c5 20 75 14 00 	mov    $0x147520,%rbp
	mov jmpdesc, %rax
    1138:	48 8b 04 25 42 11 00 	mov    0x1142,%rax
    113f:	00 
	jmp *%rax
    1140:	ff e0                	jmpq   *%rax

0000000000001142 <jmpdesc>:
    1142:	91                   	xchg   %eax,%ecx
    1143:	10 00                	adc    %al,(%rax)
    1145:	00 00                	add    %al,(%rax)
    1147:	00 00                	add    %al,(%rax)
    1149:	00 18                	add    %bl,(%rax)
	...

000000000000114c <x86_sse_init>:
 * not NULL, then the resulting FP state is saved to thread->arch.sse.
 */

.global x86_sse_init
x86_sse_init:
	fninit
    114c:	db e3                	fninit 
	ldmxcsr mxcsr
    114e:	0f ae 14 25 63 11 00 	ldmxcsr 0x1163
    1155:	00 
	testq %rdi, %rdi
    1156:	48 85 ff             	test   %rdi,%rdi
	jz 1f
    1159:	74 07                	je     1162 <x86_sse_init+0x16>
	fxsave _thread_offset_to_sse(%rdi)
    115b:	0f ae 87 20 01 00 00 	fxsave 0x120(%rdi)
1:	retq
    1162:	c3                   	retq   

0000000000001163 <mxcsr>:
    1163:	80 1f 00             	sbbb   $0x0,(%rdi)
	...

0000000000001167 <z_x86_switch>:
z_x86_switch:
	/* RSI contains the switch_handle field to which we are
	 * notionally supposed to store.  Offset it to get back to the
	 * thread handle instead.
	 */
	subq $___thread_t_switch_handle_OFFSET, %rsi
    1167:	48 81 ee b8 00 00 00 	sub    $0xb8,%rsi

	andb $~X86_THREAD_FLAG_ALL, _thread_offset_to_flags(%rsi)
    116e:	80 a6 d0 00 00 00 fe 	andb   $0xfe,0xd0(%rsi)

	popq %rax
    1175:	58                   	pop    %rax
	movq %rax, _thread_offset_to_rip(%rsi)
    1176:	48 89 86 80 00 00 00 	mov    %rax,0x80(%rsi)
	pushfq
    117d:	9c                   	pushfq 
	popq %rax
    117e:	58                   	pop    %rax
	movq %rax, _thread_offset_to_rflags(%rsi)
    117f:	48 89 86 88 00 00 00 	mov    %rax,0x88(%rsi)
	movq %rsp, _thread_offset_to_rsp(%rsi)
    1186:	48 89 66 48          	mov    %rsp,0x48(%rsi)
	movq %rbx, _thread_offset_to_rbx(%rsi)
    118a:	48 89 5e 50          	mov    %rbx,0x50(%rsi)
	movq %rbp, _thread_offset_to_rbp(%rsi)
    118e:	48 89 6e 58          	mov    %rbp,0x58(%rsi)
	movq %r12, _thread_offset_to_r12(%rsi)
    1192:	4c 89 66 60          	mov    %r12,0x60(%rsi)
	movq %r13, _thread_offset_to_r13(%rsi)
    1196:	4c 89 6e 68          	mov    %r13,0x68(%rsi)
	movq %r14, _thread_offset_to_r14(%rsi)
    119a:	4c 89 76 70          	mov    %r14,0x70(%rsi)
	movq %r15, _thread_offset_to_r15(%rsi)
    119e:	4c 89 7e 78          	mov    %r15,0x78(%rsi)
	/* Store the handle (i.e. our thread struct address) into the
	 * switch handle field, this is a synchronization signal that
	 * must occur after the last data from the old context is
	 * saved.
	 */
	movq %rsi, ___thread_t_switch_handle_OFFSET(%rsi)
    11a2:	48 89 b6 b8 00 00 00 	mov    %rsi,0xb8(%rsi)

	movq %gs:__x86_tss64_t_ist1_OFFSET, %rsp
    11a9:	65 48 8b 24 25 24 00 	mov    %gs:0x24,%rsp
    11b0:	00 00 

00000000000011b2 <__resume>:

#ifdef CONFIG_USERSPACE
	/* Set up exception return stack frame */
	pushq _thread_offset_to_ss(%rdi)	/* SS */
#else
	pushq $X86_KERNEL_DS			/* SS */
    11b2:	6a 20                	pushq  $0x20
#endif /* CONFIG_USERSPACE */
	pushq _thread_offset_to_rsp(%rdi)	/* RSP */
    11b4:	ff 77 48             	pushq  0x48(%rdi)
	pushq _thread_offset_to_rflags(%rdi)	/* RFLAGS */
    11b7:	ff b7 88 00 00 00    	pushq  0x88(%rdi)
#ifdef CONFIG_USERSPACE
	pushq _thread_offset_to_cs(%rdi)	/* CS */
#else
	pushq $X86_KERNEL_CS			/* CS */
    11bd:	6a 18                	pushq  $0x18
#endif
	pushq _thread_offset_to_rip(%rdi)	/* RIP */
    11bf:	ff b7 80 00 00 00    	pushq  0x80(%rdi)
	movq _thread_offset_to_tls(%rdi), %rdx
	shrq $32, %rdx
	wrmsr
#endif

	movq _thread_offset_to_rbx(%rdi), %rbx
    11c5:	48 8b 5f 50          	mov    0x50(%rdi),%rbx
	movq _thread_offset_to_rbp(%rdi), %rbp
    11c9:	48 8b 6f 58          	mov    0x58(%rdi),%rbp
	movq _thread_offset_to_r12(%rdi), %r12
    11cd:	4c 8b 67 60          	mov    0x60(%rdi),%r12
	movq _thread_offset_to_r13(%rdi), %r13
    11d1:	4c 8b 6f 68          	mov    0x68(%rdi),%r13
	movq _thread_offset_to_r14(%rdi), %r14
    11d5:	4c 8b 77 70          	mov    0x70(%rdi),%r14
	movq _thread_offset_to_r15(%rdi), %r15
    11d9:	4c 8b 7f 78          	mov    0x78(%rdi),%r15
	 */
	movq _thread_offset_to_psp(%rdi), %rax
	movq %rax, %gs:__x86_tss64_t_psp_OFFSET
#endif

	testb $X86_THREAD_FLAG_ALL, _thread_offset_to_flags(%rdi)
    11dd:	f6 87 d0 00 00 00 01 	testb  $0x1,0xd0(%rdi)
	jz 1f
    11e4:	74 46                	je     122c <__resume+0x7a>

	fxrstor _thread_offset_to_sse(%rdi)
    11e6:	0f ae 8f 20 01 00 00 	fxrstor 0x120(%rdi)
	movq _thread_offset_to_rax(%rdi), %rax
    11ed:	48 8b 87 d8 00 00 00 	mov    0xd8(%rdi),%rax
	movq _thread_offset_to_rcx(%rdi), %rcx
    11f4:	48 8b 8f e0 00 00 00 	mov    0xe0(%rdi),%rcx
	movq _thread_offset_to_rdx(%rdi), %rdx
    11fb:	48 8b 97 e8 00 00 00 	mov    0xe8(%rdi),%rdx
	movq _thread_offset_to_rsi(%rdi), %rsi
    1202:	48 8b b7 f0 00 00 00 	mov    0xf0(%rdi),%rsi
	movq _thread_offset_to_r8(%rdi), %r8
    1209:	4c 8b 87 00 01 00 00 	mov    0x100(%rdi),%r8
	movq _thread_offset_to_r9(%rdi), %r9
    1210:	4c 8b 8f 08 01 00 00 	mov    0x108(%rdi),%r9
	movq _thread_offset_to_r10(%rdi), %r10
    1217:	4c 8b 97 10 01 00 00 	mov    0x110(%rdi),%r10
	movq _thread_offset_to_r11(%rdi), %r11
    121e:	4c 8b 9f 18 01 00 00 	mov    0x118(%rdi),%r11
	movq _thread_offset_to_rdi(%rdi), %rdi  /* do last :-) */
    1225:	48 8b bf f8 00 00 00 	mov    0xf8(%rdi),%rdi
1:
#ifdef CONFIG_X86_BOUNDS_CHECK_BYPASS_MITIGATION
	/* swapgs variant of Spectre V1. Disable speculation past this point */
	lfence
#endif /* CONFIG_X86_BOUNDS_CHECK_BYPASS_MITIGATION */
	iretq
    122c:	48 cf                	iretq  

000000000000122e <except>:
except: /*
	 * finish struct NANO_ESF on stack. 'vector' .. 'ss' are
	 * already there from hardware trap and EXCEPT_*() stub.
	 */

	pushq %r11
    122e:	41 53                	push   %r11

	/* In addition to r11, push the rest of the caller-saved regs */
	/* Positioning of this fxsave is important, RSP must be 16-byte
	 * aligned
	 */
	subq $X86_FXSAVE_SIZE, %rsp
    1230:	48 81 ec 00 02 00 00 	sub    $0x200,%rsp
	fxsave (%rsp)
    1237:	0f ae 04 24          	fxsave (%rsp)
	pushq %r10
    123b:	41 52                	push   %r10
	pushq %r9
    123d:	41 51                	push   %r9
	pushq %r8
    123f:	41 50                	push   %r8
	pushq %rdi
    1241:	57                   	push   %rdi
	pushq %rsi
    1242:	56                   	push   %rsi
	pushq %rdx
    1243:	52                   	push   %rdx
	pushq %rcx
    1244:	51                   	push   %rcx
	pushq %rax
    1245:	50                   	push   %rax
	pushq %rbp
    1246:	55                   	push   %rbp
	pushq %r14
	pushq %r13
	pushq %r12
	pushq %rbx
#endif /* CONFIG_EXCEPTION_DEBUG */
	movq %rsp, %rdi
    1247:	48 89 e7             	mov    %rsp,%rdi

	call z_x86_exception
    124a:	e8 36 b9 10 00       	callq  10cb85 <z_x86_exception>
	popq %r12
	popq %r13
	popq %r14
	popq %r15
#endif /* CONFIG_EXCEPTION_DEBUG */
	popq %rbp
    124f:	5d                   	pop    %rbp
	popq %rax
    1250:	58                   	pop    %rax
	popq %rcx
    1251:	59                   	pop    %rcx
	popq %rdx
    1252:	5a                   	pop    %rdx
	popq %rsi
    1253:	5e                   	pop    %rsi
	popq %rdi
    1254:	5f                   	pop    %rdi
	popq %r8
    1255:	41 58                	pop    %r8
	popq %r9
    1257:	41 59                	pop    %r9
	popq %r10
    1259:	41 5a                	pop    %r10
	fxrstor (%rsp)
    125b:	0f ae 0c 24          	fxrstor (%rsp)
	addq $X86_FXSAVE_SIZE, %rsp
    125f:	48 81 c4 00 02 00 00 	add    $0x200,%rsp
	popq %r11
    1266:	41 5b                	pop    %r11

	/* Drop the vector/err code pushed by the HW or EXCEPT_*() stub */
	add $16, %rsp
    1268:	48 83 c4 10          	add    $0x10,%rsp
	swapgs
#endif /* CONFIG_X86_KPTI */
1:
#endif /* CONFIG_USERSPACE */

	iretq
    126c:	48 cf                	iretq  

000000000000126e <vector_0>:
/* Vector reserved for handling a kernel oops; treat as an exception
 * and not an interrupt
 */
EXCEPT(Z_X86_OOPS_VECTOR, 7);
#else
EXCEPT      ( 0); EXCEPT      ( 1); EXCEPT      ( 2); EXCEPT      ( 3)
    126e:	6a 00                	pushq  $0x0
    1270:	6a 00                	pushq  $0x0
    1272:	eb ba                	jmp    122e <except>

0000000000001274 <vector_1>:
    1274:	6a 00                	pushq  $0x0
    1276:	6a 01                	pushq  $0x1
    1278:	eb b4                	jmp    122e <except>

000000000000127a <vector_2>:
    127a:	6a 00                	pushq  $0x0
    127c:	6a 02                	pushq  $0x2
    127e:	eb ae                	jmp    122e <except>

0000000000001280 <vector_3>:
    1280:	6a 00                	pushq  $0x0
    1282:	6a 03                	pushq  $0x3
    1284:	eb a8                	jmp    122e <except>

0000000000001286 <vector_4>:
EXCEPT      ( 4); EXCEPT      ( 5); EXCEPT      ( 6); EXCEPT      ( 7)
    1286:	6a 00                	pushq  $0x0
    1288:	6a 04                	pushq  $0x4
    128a:	eb a2                	jmp    122e <except>

000000000000128c <vector_5>:
    128c:	6a 00                	pushq  $0x0
    128e:	6a 05                	pushq  $0x5
    1290:	eb 9c                	jmp    122e <except>

0000000000001292 <vector_6>:
    1292:	6a 00                	pushq  $0x0
    1294:	6a 06                	pushq  $0x6
    1296:	eb 96                	jmp    122e <except>

0000000000001298 <vector_7>:
    1298:	6a 00                	pushq  $0x0
    129a:	6a 07                	pushq  $0x7
    129c:	eb 90                	jmp    122e <except>

000000000000129e <vector_8>:
EXCEPT_CODE ( 8); EXCEPT      ( 9); EXCEPT_CODE (10); EXCEPT_CODE (11)
    129e:	6a 08                	pushq  $0x8
    12a0:	eb 8c                	jmp    122e <except>

00000000000012a2 <vector_9>:
    12a2:	6a 00                	pushq  $0x0
    12a4:	6a 09                	pushq  $0x9
    12a6:	eb 86                	jmp    122e <except>

00000000000012a8 <vector_10>:
    12a8:	6a 0a                	pushq  $0xa
    12aa:	eb 82                	jmp    122e <except>

00000000000012ac <vector_11>:
    12ac:	6a 0b                	pushq  $0xb
    12ae:	e9 7b ff ff ff       	jmpq   122e <except>

00000000000012b3 <vector_12>:
EXCEPT_CODE (12); EXCEPT_CODE (13); EXCEPT_CODE (14); EXCEPT      (15)
    12b3:	6a 0c                	pushq  $0xc
    12b5:	e9 74 ff ff ff       	jmpq   122e <except>

00000000000012ba <vector_13>:
    12ba:	6a 0d                	pushq  $0xd
    12bc:	e9 6d ff ff ff       	jmpq   122e <except>

00000000000012c1 <vector_14>:
    12c1:	6a 0e                	pushq  $0xe
    12c3:	e9 66 ff ff ff       	jmpq   122e <except>

00000000000012c8 <vector_15>:
    12c8:	6a 00                	pushq  $0x0
    12ca:	6a 0f                	pushq  $0xf
    12cc:	e9 5d ff ff ff       	jmpq   122e <except>

00000000000012d1 <vector_16>:
EXCEPT      (16); EXCEPT_CODE (17); EXCEPT      (18); EXCEPT      (19)
    12d1:	6a 00                	pushq  $0x0
    12d3:	6a 10                	pushq  $0x10
    12d5:	e9 54 ff ff ff       	jmpq   122e <except>

00000000000012da <vector_17>:
    12da:	6a 11                	pushq  $0x11
    12dc:	e9 4d ff ff ff       	jmpq   122e <except>

00000000000012e1 <vector_18>:
    12e1:	6a 00                	pushq  $0x0
    12e3:	6a 12                	pushq  $0x12
    12e5:	e9 44 ff ff ff       	jmpq   122e <except>

00000000000012ea <vector_19>:
    12ea:	6a 00                	pushq  $0x0
    12ec:	6a 13                	pushq  $0x13
    12ee:	e9 3b ff ff ff       	jmpq   122e <except>

00000000000012f3 <vector_20>:
EXCEPT      (20); EXCEPT      (21); EXCEPT      (22); EXCEPT      (23)
    12f3:	6a 00                	pushq  $0x0
    12f5:	6a 14                	pushq  $0x14
    12f7:	e9 32 ff ff ff       	jmpq   122e <except>

00000000000012fc <vector_21>:
    12fc:	6a 00                	pushq  $0x0
    12fe:	6a 15                	pushq  $0x15
    1300:	e9 29 ff ff ff       	jmpq   122e <except>

0000000000001305 <vector_22>:
    1305:	6a 00                	pushq  $0x0
    1307:	6a 16                	pushq  $0x16
    1309:	e9 20 ff ff ff       	jmpq   122e <except>

000000000000130e <vector_23>:
    130e:	6a 00                	pushq  $0x0
    1310:	6a 17                	pushq  $0x17
    1312:	e9 17 ff ff ff       	jmpq   122e <except>

0000000000001317 <vector_24>:
EXCEPT      (24); EXCEPT      (25); EXCEPT      (26); EXCEPT      (27)
    1317:	6a 00                	pushq  $0x0
    1319:	6a 18                	pushq  $0x18
    131b:	e9 0e ff ff ff       	jmpq   122e <except>

0000000000001320 <vector_25>:
    1320:	6a 00                	pushq  $0x0
    1322:	6a 19                	pushq  $0x19
    1324:	e9 05 ff ff ff       	jmpq   122e <except>

0000000000001329 <vector_26>:
    1329:	6a 00                	pushq  $0x0
    132b:	6a 1a                	pushq  $0x1a
    132d:	e9 fc fe ff ff       	jmpq   122e <except>

0000000000001332 <vector_27>:
    1332:	6a 00                	pushq  $0x0
    1334:	6a 1b                	pushq  $0x1b
    1336:	e9 f3 fe ff ff       	jmpq   122e <except>

000000000000133b <vector_28>:
EXCEPT      (28); EXCEPT      (29); EXCEPT      (30); EXCEPT      (31)
    133b:	6a 00                	pushq  $0x0
    133d:	6a 1c                	pushq  $0x1c
    133f:	e9 ea fe ff ff       	jmpq   122e <except>

0000000000001344 <vector_29>:
    1344:	6a 00                	pushq  $0x0
    1346:	6a 1d                	pushq  $0x1d
    1348:	e9 e1 fe ff ff       	jmpq   122e <except>

000000000000134d <vector_30>:
    134d:	6a 00                	pushq  $0x0
    134f:	6a 1e                	pushq  $0x1e
    1351:	e9 d8 fe ff ff       	jmpq   122e <except>

0000000000001356 <vector_31>:
    1356:	6a 00                	pushq  $0x0
    1358:	6a 1f                	pushq  $0x1f
    135a:	e9 cf fe ff ff       	jmpq   122e <except>

000000000000135f <vector_Z_X86_OOPS_VECTOR>:

/* Vector reserved for handling a kernel oops; treat as an exception
 * and not an interrupt
 */
EXCEPT(Z_X86_OOPS_VECTOR);
    135f:	6a 00                	pushq  $0x0
    1361:	6a 20                	pushq  $0x20
    1363:	e9 c6 fe ff ff       	jmpq   122e <except>

0000000000001368 <irq>:

.globl x86_irq_funcs	/* see irq_manage.c .. */
.globl x86_irq_args	/* .. for these definitions */

irq:
	pushq %rsi
    1368:	56                   	push   %rsi
	pushq (%rsi)	/* Stashed RSI value */
	movq $0, (%rsi) /* Cover our tracks, stashed RSI might be sensitive */
#endif /* CONFIG_X86_KPTI */
#endif /* CONFIG_USERSPACE */

	movq %gs:__x86_tss64_t_cpu_OFFSET, %rsi
    1369:	65 48 8b 34 25 68 00 	mov    %gs:0x68,%rsi
    1370:	00 00 
	 * Bump the IRQ nesting count and move to the next IRQ stack.
	 * That's sufficient to safely re-enable interrupts, so if we
	 * haven't reached the maximum nesting depth yet, do it.
	 */

	incl ___cpu_t_nested_OFFSET(%rsi)
    1372:	ff 06                	incl   (%rsi)
	subq $CONFIG_ISR_SUBSTACK_SIZE, %gs:__x86_tss64_t_ist1_OFFSET
    1374:	65 48 81 2c 25 24 00 	subq   $0x1000,%gs:0x24
    137b:	00 00 00 10 00 00 
	cmpl $CONFIG_ISR_DEPTH, ___cpu_t_nested_OFFSET(%rsi)
    1381:	83 3e 04             	cmpl   $0x4,(%rsi)
	jz 1f
    1384:	74 01                	je     1387 <irq+0x1f>
	sti
    1386:	fb                   	sti    
1:	cmpl $1, ___cpu_t_nested_OFFSET(%rsi)
    1387:	83 3e 01             	cmpl   $0x1,(%rsi)
	je irq_enter_unnested
    138a:	74 25                	je     13b1 <irq_enter_unnested>

000000000000138c <irq_enter_nested>:
	 * note that the final value of RSP must be 16-byte aligned here,
	 * both to satisfy FXSAVE/FXRSTOR but also to honor the C ABI.
	 */

irq_enter_nested: /* Nested IRQ: dump register state to stack. */
	pushq %rcx
    138c:	51                   	push   %rcx
	movq 16(%rsp), %rcx /* RCX = vector */
    138d:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
	movq %rax, 16(%rsp) /* looks like we pushed RAX, not the vector */
    1392:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
	pushq %rdx
    1397:	52                   	push   %rdx
	pushq %rdi
    1398:	57                   	push   %rdi
	pushq %r8
    1399:	41 50                	push   %r8
	pushq %r9
    139b:	41 51                	push   %r9
	pushq %r10
    139d:	41 52                	push   %r10
	pushq %r11
    139f:	41 53                	push   %r11
	subq $X86_FXSAVE_SIZE, %rsp
    13a1:	48 81 ec 00 02 00 00 	sub    $0x200,%rsp
	fxsave (%rsp)
    13a8:	0f ae 04 24          	fxsave (%rsp)
	jmp irq_dispatch
    13ac:	e9 82 00 00 00       	jmpq   1433 <irq_dispatch>

00000000000013b1 <irq_enter_unnested>:

irq_enter_unnested: /* Not nested: dump state to thread struct for __resume */
	movq ___cpu_t_current_OFFSET(%rsi), %rsi
    13b1:	48 8b 76 10          	mov    0x10(%rsi),%rsi
	orb $X86_THREAD_FLAG_ALL, _thread_offset_to_flags(%rsi)
    13b5:	80 8e d0 00 00 00 01 	orb    $0x1,0xd0(%rsi)
	fxsave _thread_offset_to_sse(%rsi)
    13bc:	0f ae 86 20 01 00 00 	fxsave 0x120(%rsi)
	movq %rbx, _thread_offset_to_rbx(%rsi)
    13c3:	48 89 5e 50          	mov    %rbx,0x50(%rsi)
	movq %rbp, _thread_offset_to_rbp(%rsi)
    13c7:	48 89 6e 58          	mov    %rbp,0x58(%rsi)
	movq %r12, _thread_offset_to_r12(%rsi)
    13cb:	4c 89 66 60          	mov    %r12,0x60(%rsi)
	movq %r13, _thread_offset_to_r13(%rsi)
    13cf:	4c 89 6e 68          	mov    %r13,0x68(%rsi)
	movq %r14, _thread_offset_to_r14(%rsi)
    13d3:	4c 89 76 70          	mov    %r14,0x70(%rsi)
	movq %r15, _thread_offset_to_r15(%rsi)
    13d7:	4c 89 7e 78          	mov    %r15,0x78(%rsi)
	movq %rax, _thread_offset_to_rax(%rsi)
    13db:	48 89 86 d8 00 00 00 	mov    %rax,0xd8(%rsi)
	movq %rcx, _thread_offset_to_rcx(%rsi)
    13e2:	48 89 8e e0 00 00 00 	mov    %rcx,0xe0(%rsi)
	movq %rdx, _thread_offset_to_rdx(%rsi)
    13e9:	48 89 96 e8 00 00 00 	mov    %rdx,0xe8(%rsi)
	movq %rdi, _thread_offset_to_rdi(%rsi)
    13f0:	48 89 be f8 00 00 00 	mov    %rdi,0xf8(%rsi)
	movq %r8, _thread_offset_to_r8(%rsi)
    13f7:	4c 89 86 00 01 00 00 	mov    %r8,0x100(%rsi)
	movq %r9, _thread_offset_to_r9(%rsi)
    13fe:	4c 89 8e 08 01 00 00 	mov    %r9,0x108(%rsi)
	movq %r10, _thread_offset_to_r10(%rsi)
    1405:	4c 89 96 10 01 00 00 	mov    %r10,0x110(%rsi)
	movq %r11, _thread_offset_to_r11(%rsi)
    140c:	4c 89 9e 18 01 00 00 	mov    %r11,0x118(%rsi)
	popq %rax /* RSI */
    1413:	58                   	pop    %rax
	movq %rax, _thread_offset_to_rsi(%rsi)
    1414:	48 89 86 f0 00 00 00 	mov    %rax,0xf0(%rsi)
	popq %rcx /* vector number */
    141b:	59                   	pop    %rcx
	popq %rax /* RIP */
    141c:	58                   	pop    %rax
	movq %rax, _thread_offset_to_rip(%rsi)
    141d:	48 89 86 80 00 00 00 	mov    %rax,0x80(%rsi)
	popq %rax /* CS */
    1424:	58                   	pop    %rax
#ifdef CONFIG_USERSPACE
	movq %rax, _thread_offset_to_cs(%rsi)
#endif
	popq %rax /* RFLAGS */
    1425:	58                   	pop    %rax
	movq %rax, _thread_offset_to_rflags(%rsi)
    1426:	48 89 86 88 00 00 00 	mov    %rax,0x88(%rsi)
	popq %rax /* RSP */
    142d:	58                   	pop    %rax
	movq %rax, _thread_offset_to_rsp(%rsi)
    142e:	48 89 46 48          	mov    %rax,0x48(%rsi)
	popq %rax /* SS */
    1432:	58                   	pop    %rax

0000000000001433 <irq_dispatch>:
#ifdef CONFIG_SCHED_THREAD_USAGE
	pushq %rcx
	call z_sched_usage_stop
	popq %rcx
#endif
	movq x86_irq_funcs(,%rcx,8), %rax
    1433:	48 8b 04 cd 40 ba 11 	mov    0x11ba40(,%rcx,8),%rax
    143a:	00 
	movq x86_irq_args(,%rcx,8), %rdi
    143b:	48 8b 3c cd 40 b3 11 	mov    0x11b340(,%rcx,8),%rdi
    1442:	00 
	call *%rax
    1443:	ff d0                	callq  *%rax

	xorq %rax, %rax
    1445:	48 31 c0             	xor    %rax,%rax
#ifdef CONFIG_X2APIC
	xorl %edx, %edx
	movl $(X86_X2APIC_BASE_MSR + (LOAPIC_EOI >> 4)), %ecx
	wrmsr
#else /* xAPIC */
	movq z_loapic_regs, %rdx
    1448:	48 8b 14 25 c8 03 12 	mov    0x1203c8,%rdx
    144f:	00 
	movl %eax, LOAPIC_EOI(%rdx)
    1450:	89 82 b0 00 00 00    	mov    %eax,0xb0(%rdx)
#endif /* CONFIG_X2APIC */

	movq %gs:__x86_tss64_t_cpu_OFFSET, %rsi
    1456:	65 48 8b 34 25 68 00 	mov    %gs:0x68,%rsi
    145d:	00 00 

	cli
    145f:	fa                   	cli    
	addq $CONFIG_ISR_SUBSTACK_SIZE, %gs:__x86_tss64_t_ist1_OFFSET
    1460:	65 48 81 04 25 24 00 	addq   $0x1000,%gs:0x24
    1467:	00 00 00 10 00 00 
	decl ___cpu_t_nested_OFFSET(%rsi)
    146d:	ff 0e                	decl   (%rsi)
	jnz irq_exit_nested
    146f:	75 11                	jne    1482 <irq_exit_nested>

	/* not nested; ask the scheduler who's up next and resume it */

	movq ___cpu_t_current_OFFSET(%rsi), %rdi
    1471:	48 8b 7e 10          	mov    0x10(%rsi),%rdi
	call z_get_next_switch_handle
    1475:	e8 c4 cf 10 00       	callq  10e43e <z_get_next_switch_handle>
	movq %rax, %rdi
    147a:	48 89 c7             	mov    %rax,%rdi
	jmp __resume
    147d:	e9 30 fd ff ff       	jmpq   11b2 <__resume>

0000000000001482 <irq_exit_nested>:

irq_exit_nested:
	fxrstor (%rsp)
    1482:	0f ae 0c 24          	fxrstor (%rsp)
	addq $X86_FXSAVE_SIZE, %rsp
    1486:	48 81 c4 00 02 00 00 	add    $0x200,%rsp
	popq %r11
    148d:	41 5b                	pop    %r11
	popq %r10
    148f:	41 5a                	pop    %r10
	popq %r9
    1491:	41 59                	pop    %r9
	popq %r8
    1493:	41 58                	pop    %r8
	popq %rdi
    1495:	5f                   	pop    %rdi
	popq %rdx
    1496:	5a                   	pop    %rdx
	popq %rcx
    1497:	59                   	pop    %rcx
	popq %rsi
    1498:	5e                   	pop    %rsi
	popq %rax
    1499:	58                   	pop    %rax
	iretq
    149a:	48 cf                	iretq  

000000000000149c <vector_33>:

#define IRQ(nr) vector_ ## nr: pushq $(nr - IV_IRQS); jmp irq

IRQ( 33); IRQ( 34); IRQ( 35); IRQ( 36); IRQ( 37); IRQ( 38); IRQ( 39)
    149c:	6a 01                	pushq  $0x1
    149e:	e9 c5 fe ff ff       	jmpq   1368 <irq>

00000000000014a3 <vector_34>:
    14a3:	6a 02                	pushq  $0x2
    14a5:	e9 be fe ff ff       	jmpq   1368 <irq>

00000000000014aa <vector_35>:
    14aa:	6a 03                	pushq  $0x3
    14ac:	e9 b7 fe ff ff       	jmpq   1368 <irq>

00000000000014b1 <vector_36>:
    14b1:	6a 04                	pushq  $0x4
    14b3:	e9 b0 fe ff ff       	jmpq   1368 <irq>

00000000000014b8 <vector_37>:
    14b8:	6a 05                	pushq  $0x5
    14ba:	e9 a9 fe ff ff       	jmpq   1368 <irq>

00000000000014bf <vector_38>:
    14bf:	6a 06                	pushq  $0x6
    14c1:	e9 a2 fe ff ff       	jmpq   1368 <irq>

00000000000014c6 <vector_39>:
    14c6:	6a 07                	pushq  $0x7
    14c8:	e9 9b fe ff ff       	jmpq   1368 <irq>

00000000000014cd <vector_40>:
IRQ( 40); IRQ( 41); IRQ( 42); IRQ( 43); IRQ( 44); IRQ( 45); IRQ( 46); IRQ( 47)
    14cd:	6a 08                	pushq  $0x8
    14cf:	e9 94 fe ff ff       	jmpq   1368 <irq>

00000000000014d4 <vector_41>:
    14d4:	6a 09                	pushq  $0x9
    14d6:	e9 8d fe ff ff       	jmpq   1368 <irq>

00000000000014db <vector_42>:
    14db:	6a 0a                	pushq  $0xa
    14dd:	e9 86 fe ff ff       	jmpq   1368 <irq>

00000000000014e2 <vector_43>:
    14e2:	6a 0b                	pushq  $0xb
    14e4:	e9 7f fe ff ff       	jmpq   1368 <irq>

00000000000014e9 <vector_44>:
    14e9:	6a 0c                	pushq  $0xc
    14eb:	e9 78 fe ff ff       	jmpq   1368 <irq>

00000000000014f0 <vector_45>:
    14f0:	6a 0d                	pushq  $0xd
    14f2:	e9 71 fe ff ff       	jmpq   1368 <irq>

00000000000014f7 <vector_46>:
    14f7:	6a 0e                	pushq  $0xe
    14f9:	e9 6a fe ff ff       	jmpq   1368 <irq>

00000000000014fe <vector_47>:
    14fe:	6a 0f                	pushq  $0xf
    1500:	e9 63 fe ff ff       	jmpq   1368 <irq>

0000000000001505 <vector_48>:
IRQ( 48); IRQ( 49); IRQ( 50); IRQ( 51); IRQ( 52); IRQ( 53); IRQ( 54); IRQ( 55)
    1505:	6a 10                	pushq  $0x10
    1507:	e9 5c fe ff ff       	jmpq   1368 <irq>

000000000000150c <vector_49>:
    150c:	6a 11                	pushq  $0x11
    150e:	e9 55 fe ff ff       	jmpq   1368 <irq>

0000000000001513 <vector_50>:
    1513:	6a 12                	pushq  $0x12
    1515:	e9 4e fe ff ff       	jmpq   1368 <irq>

000000000000151a <vector_51>:
    151a:	6a 13                	pushq  $0x13
    151c:	e9 47 fe ff ff       	jmpq   1368 <irq>

0000000000001521 <vector_52>:
    1521:	6a 14                	pushq  $0x14
    1523:	e9 40 fe ff ff       	jmpq   1368 <irq>

0000000000001528 <vector_53>:
    1528:	6a 15                	pushq  $0x15
    152a:	e9 39 fe ff ff       	jmpq   1368 <irq>

000000000000152f <vector_54>:
    152f:	6a 16                	pushq  $0x16
    1531:	e9 32 fe ff ff       	jmpq   1368 <irq>

0000000000001536 <vector_55>:
    1536:	6a 17                	pushq  $0x17
    1538:	e9 2b fe ff ff       	jmpq   1368 <irq>

000000000000153d <vector_56>:
IRQ( 56); IRQ( 57); IRQ( 58); IRQ( 59); IRQ( 60); IRQ( 61); IRQ( 62); IRQ( 63)
    153d:	6a 18                	pushq  $0x18
    153f:	e9 24 fe ff ff       	jmpq   1368 <irq>

0000000000001544 <vector_57>:
    1544:	6a 19                	pushq  $0x19
    1546:	e9 1d fe ff ff       	jmpq   1368 <irq>

000000000000154b <vector_58>:
    154b:	6a 1a                	pushq  $0x1a
    154d:	e9 16 fe ff ff       	jmpq   1368 <irq>

0000000000001552 <vector_59>:
    1552:	6a 1b                	pushq  $0x1b
    1554:	e9 0f fe ff ff       	jmpq   1368 <irq>

0000000000001559 <vector_60>:
    1559:	6a 1c                	pushq  $0x1c
    155b:	e9 08 fe ff ff       	jmpq   1368 <irq>

0000000000001560 <vector_61>:
    1560:	6a 1d                	pushq  $0x1d
    1562:	e9 01 fe ff ff       	jmpq   1368 <irq>

0000000000001567 <vector_62>:
    1567:	6a 1e                	pushq  $0x1e
    1569:	e9 fa fd ff ff       	jmpq   1368 <irq>

000000000000156e <vector_63>:
    156e:	6a 1f                	pushq  $0x1f
    1570:	e9 f3 fd ff ff       	jmpq   1368 <irq>

0000000000001575 <vector_64>:
IRQ( 64); IRQ( 65); IRQ( 66); IRQ( 67); IRQ( 68); IRQ( 69); IRQ( 70); IRQ( 71)
    1575:	6a 20                	pushq  $0x20
    1577:	e9 ec fd ff ff       	jmpq   1368 <irq>

000000000000157c <vector_65>:
    157c:	6a 21                	pushq  $0x21
    157e:	e9 e5 fd ff ff       	jmpq   1368 <irq>

0000000000001583 <vector_66>:
    1583:	6a 22                	pushq  $0x22
    1585:	e9 de fd ff ff       	jmpq   1368 <irq>

000000000000158a <vector_67>:
    158a:	6a 23                	pushq  $0x23
    158c:	e9 d7 fd ff ff       	jmpq   1368 <irq>

0000000000001591 <vector_68>:
    1591:	6a 24                	pushq  $0x24
    1593:	e9 d0 fd ff ff       	jmpq   1368 <irq>

0000000000001598 <vector_69>:
    1598:	6a 25                	pushq  $0x25
    159a:	e9 c9 fd ff ff       	jmpq   1368 <irq>

000000000000159f <vector_70>:
    159f:	6a 26                	pushq  $0x26
    15a1:	e9 c2 fd ff ff       	jmpq   1368 <irq>

00000000000015a6 <vector_71>:
    15a6:	6a 27                	pushq  $0x27
    15a8:	e9 bb fd ff ff       	jmpq   1368 <irq>

00000000000015ad <vector_72>:
IRQ( 72); IRQ( 73); IRQ( 74); IRQ( 75); IRQ( 76); IRQ( 77); IRQ( 78); IRQ( 79)
    15ad:	6a 28                	pushq  $0x28
    15af:	e9 b4 fd ff ff       	jmpq   1368 <irq>

00000000000015b4 <vector_73>:
    15b4:	6a 29                	pushq  $0x29
    15b6:	e9 ad fd ff ff       	jmpq   1368 <irq>

00000000000015bb <vector_74>:
    15bb:	6a 2a                	pushq  $0x2a
    15bd:	e9 a6 fd ff ff       	jmpq   1368 <irq>

00000000000015c2 <vector_75>:
    15c2:	6a 2b                	pushq  $0x2b
    15c4:	e9 9f fd ff ff       	jmpq   1368 <irq>

00000000000015c9 <vector_76>:
    15c9:	6a 2c                	pushq  $0x2c
    15cb:	e9 98 fd ff ff       	jmpq   1368 <irq>

00000000000015d0 <vector_77>:
    15d0:	6a 2d                	pushq  $0x2d
    15d2:	e9 91 fd ff ff       	jmpq   1368 <irq>

00000000000015d7 <vector_78>:
    15d7:	6a 2e                	pushq  $0x2e
    15d9:	e9 8a fd ff ff       	jmpq   1368 <irq>

00000000000015de <vector_79>:
    15de:	6a 2f                	pushq  $0x2f
    15e0:	e9 83 fd ff ff       	jmpq   1368 <irq>

00000000000015e5 <vector_80>:
IRQ( 80); IRQ( 81); IRQ( 82); IRQ( 83); IRQ( 84); IRQ( 85); IRQ( 86); IRQ( 87)
    15e5:	6a 30                	pushq  $0x30
    15e7:	e9 7c fd ff ff       	jmpq   1368 <irq>

00000000000015ec <vector_81>:
    15ec:	6a 31                	pushq  $0x31
    15ee:	e9 75 fd ff ff       	jmpq   1368 <irq>

00000000000015f3 <vector_82>:
    15f3:	6a 32                	pushq  $0x32
    15f5:	e9 6e fd ff ff       	jmpq   1368 <irq>

00000000000015fa <vector_83>:
    15fa:	6a 33                	pushq  $0x33
    15fc:	e9 67 fd ff ff       	jmpq   1368 <irq>

0000000000001601 <vector_84>:
    1601:	6a 34                	pushq  $0x34
    1603:	e9 60 fd ff ff       	jmpq   1368 <irq>

0000000000001608 <vector_85>:
    1608:	6a 35                	pushq  $0x35
    160a:	e9 59 fd ff ff       	jmpq   1368 <irq>

000000000000160f <vector_86>:
    160f:	6a 36                	pushq  $0x36
    1611:	e9 52 fd ff ff       	jmpq   1368 <irq>

0000000000001616 <vector_87>:
    1616:	6a 37                	pushq  $0x37
    1618:	e9 4b fd ff ff       	jmpq   1368 <irq>

000000000000161d <vector_88>:
IRQ( 88); IRQ( 89); IRQ( 90); IRQ( 91); IRQ( 92); IRQ( 93); IRQ( 94); IRQ( 95)
    161d:	6a 38                	pushq  $0x38
    161f:	e9 44 fd ff ff       	jmpq   1368 <irq>

0000000000001624 <vector_89>:
    1624:	6a 39                	pushq  $0x39
    1626:	e9 3d fd ff ff       	jmpq   1368 <irq>

000000000000162b <vector_90>:
    162b:	6a 3a                	pushq  $0x3a
    162d:	e9 36 fd ff ff       	jmpq   1368 <irq>

0000000000001632 <vector_91>:
    1632:	6a 3b                	pushq  $0x3b
    1634:	e9 2f fd ff ff       	jmpq   1368 <irq>

0000000000001639 <vector_92>:
    1639:	6a 3c                	pushq  $0x3c
    163b:	e9 28 fd ff ff       	jmpq   1368 <irq>

0000000000001640 <vector_93>:
    1640:	6a 3d                	pushq  $0x3d
    1642:	e9 21 fd ff ff       	jmpq   1368 <irq>

0000000000001647 <vector_94>:
    1647:	6a 3e                	pushq  $0x3e
    1649:	e9 1a fd ff ff       	jmpq   1368 <irq>

000000000000164e <vector_95>:
    164e:	6a 3f                	pushq  $0x3f
    1650:	e9 13 fd ff ff       	jmpq   1368 <irq>

0000000000001655 <vector_96>:
IRQ( 96); IRQ( 97); IRQ( 98); IRQ( 99); IRQ(100); IRQ(101); IRQ(102); IRQ(103)
    1655:	6a 40                	pushq  $0x40
    1657:	e9 0c fd ff ff       	jmpq   1368 <irq>

000000000000165c <vector_97>:
    165c:	6a 41                	pushq  $0x41
    165e:	e9 05 fd ff ff       	jmpq   1368 <irq>

0000000000001663 <vector_98>:
    1663:	6a 42                	pushq  $0x42
    1665:	e9 fe fc ff ff       	jmpq   1368 <irq>

000000000000166a <vector_99>:
    166a:	6a 43                	pushq  $0x43
    166c:	e9 f7 fc ff ff       	jmpq   1368 <irq>

0000000000001671 <vector_100>:
    1671:	6a 44                	pushq  $0x44
    1673:	e9 f0 fc ff ff       	jmpq   1368 <irq>

0000000000001678 <vector_101>:
    1678:	6a 45                	pushq  $0x45
    167a:	e9 e9 fc ff ff       	jmpq   1368 <irq>

000000000000167f <vector_102>:
    167f:	6a 46                	pushq  $0x46
    1681:	e9 e2 fc ff ff       	jmpq   1368 <irq>

0000000000001686 <vector_103>:
    1686:	6a 47                	pushq  $0x47
    1688:	e9 db fc ff ff       	jmpq   1368 <irq>

000000000000168d <vector_104>:
IRQ(104); IRQ(105); IRQ(106); IRQ(107); IRQ(108); IRQ(109); IRQ(110); IRQ(111)
    168d:	6a 48                	pushq  $0x48
    168f:	e9 d4 fc ff ff       	jmpq   1368 <irq>

0000000000001694 <vector_105>:
    1694:	6a 49                	pushq  $0x49
    1696:	e9 cd fc ff ff       	jmpq   1368 <irq>

000000000000169b <vector_106>:
    169b:	6a 4a                	pushq  $0x4a
    169d:	e9 c6 fc ff ff       	jmpq   1368 <irq>

00000000000016a2 <vector_107>:
    16a2:	6a 4b                	pushq  $0x4b
    16a4:	e9 bf fc ff ff       	jmpq   1368 <irq>

00000000000016a9 <vector_108>:
    16a9:	6a 4c                	pushq  $0x4c
    16ab:	e9 b8 fc ff ff       	jmpq   1368 <irq>

00000000000016b0 <vector_109>:
    16b0:	6a 4d                	pushq  $0x4d
    16b2:	e9 b1 fc ff ff       	jmpq   1368 <irq>

00000000000016b7 <vector_110>:
    16b7:	6a 4e                	pushq  $0x4e
    16b9:	e9 aa fc ff ff       	jmpq   1368 <irq>

00000000000016be <vector_111>:
    16be:	6a 4f                	pushq  $0x4f
    16c0:	e9 a3 fc ff ff       	jmpq   1368 <irq>

00000000000016c5 <vector_112>:
IRQ(112); IRQ(113); IRQ(114); IRQ(115); IRQ(116); IRQ(117); IRQ(118); IRQ(119)
    16c5:	6a 50                	pushq  $0x50
    16c7:	e9 9c fc ff ff       	jmpq   1368 <irq>

00000000000016cc <vector_113>:
    16cc:	6a 51                	pushq  $0x51
    16ce:	e9 95 fc ff ff       	jmpq   1368 <irq>

00000000000016d3 <vector_114>:
    16d3:	6a 52                	pushq  $0x52
    16d5:	e9 8e fc ff ff       	jmpq   1368 <irq>

00000000000016da <vector_115>:
    16da:	6a 53                	pushq  $0x53
    16dc:	e9 87 fc ff ff       	jmpq   1368 <irq>

00000000000016e1 <vector_116>:
    16e1:	6a 54                	pushq  $0x54
    16e3:	e9 80 fc ff ff       	jmpq   1368 <irq>

00000000000016e8 <vector_117>:
    16e8:	6a 55                	pushq  $0x55
    16ea:	e9 79 fc ff ff       	jmpq   1368 <irq>

00000000000016ef <vector_118>:
    16ef:	6a 56                	pushq  $0x56
    16f1:	e9 72 fc ff ff       	jmpq   1368 <irq>

00000000000016f6 <vector_119>:
    16f6:	6a 57                	pushq  $0x57
    16f8:	e9 6b fc ff ff       	jmpq   1368 <irq>

00000000000016fd <vector_120>:
IRQ(120); IRQ(121); IRQ(122); IRQ(123); IRQ(124); IRQ(125); IRQ(126); IRQ(127)
    16fd:	6a 58                	pushq  $0x58
    16ff:	e9 64 fc ff ff       	jmpq   1368 <irq>

0000000000001704 <vector_121>:
    1704:	6a 59                	pushq  $0x59
    1706:	e9 5d fc ff ff       	jmpq   1368 <irq>

000000000000170b <vector_122>:
    170b:	6a 5a                	pushq  $0x5a
    170d:	e9 56 fc ff ff       	jmpq   1368 <irq>

0000000000001712 <vector_123>:
    1712:	6a 5b                	pushq  $0x5b
    1714:	e9 4f fc ff ff       	jmpq   1368 <irq>

0000000000001719 <vector_124>:
    1719:	6a 5c                	pushq  $0x5c
    171b:	e9 48 fc ff ff       	jmpq   1368 <irq>

0000000000001720 <vector_125>:
    1720:	6a 5d                	pushq  $0x5d
    1722:	e9 41 fc ff ff       	jmpq   1368 <irq>

0000000000001727 <vector_126>:
    1727:	6a 5e                	pushq  $0x5e
    1729:	e9 3a fc ff ff       	jmpq   1368 <irq>

000000000000172e <vector_127>:
    172e:	6a 5f                	pushq  $0x5f
    1730:	e9 33 fc ff ff       	jmpq   1368 <irq>

0000000000001735 <vector_128>:
IRQ(128); IRQ(129); IRQ(130); IRQ(131); IRQ(132); IRQ(133); IRQ(134); IRQ(135)
    1735:	6a 60                	pushq  $0x60
    1737:	e9 2c fc ff ff       	jmpq   1368 <irq>

000000000000173c <vector_129>:
    173c:	6a 61                	pushq  $0x61
    173e:	e9 25 fc ff ff       	jmpq   1368 <irq>

0000000000001743 <vector_130>:
    1743:	6a 62                	pushq  $0x62
    1745:	e9 1e fc ff ff       	jmpq   1368 <irq>

000000000000174a <vector_131>:
    174a:	6a 63                	pushq  $0x63
    174c:	e9 17 fc ff ff       	jmpq   1368 <irq>

0000000000001751 <vector_132>:
    1751:	6a 64                	pushq  $0x64
    1753:	e9 10 fc ff ff       	jmpq   1368 <irq>

0000000000001758 <vector_133>:
    1758:	6a 65                	pushq  $0x65
    175a:	e9 09 fc ff ff       	jmpq   1368 <irq>

000000000000175f <vector_134>:
    175f:	6a 66                	pushq  $0x66
    1761:	e9 02 fc ff ff       	jmpq   1368 <irq>

0000000000001766 <vector_135>:
    1766:	6a 67                	pushq  $0x67
    1768:	e9 fb fb ff ff       	jmpq   1368 <irq>

000000000000176d <vector_136>:
IRQ(136); IRQ(137); IRQ(138); IRQ(139); IRQ(140); IRQ(141); IRQ(142); IRQ(143)
    176d:	6a 68                	pushq  $0x68
    176f:	e9 f4 fb ff ff       	jmpq   1368 <irq>

0000000000001774 <vector_137>:
    1774:	6a 69                	pushq  $0x69
    1776:	e9 ed fb ff ff       	jmpq   1368 <irq>

000000000000177b <vector_138>:
    177b:	6a 6a                	pushq  $0x6a
    177d:	e9 e6 fb ff ff       	jmpq   1368 <irq>

0000000000001782 <vector_139>:
    1782:	6a 6b                	pushq  $0x6b
    1784:	e9 df fb ff ff       	jmpq   1368 <irq>

0000000000001789 <vector_140>:
    1789:	6a 6c                	pushq  $0x6c
    178b:	e9 d8 fb ff ff       	jmpq   1368 <irq>

0000000000001790 <vector_141>:
    1790:	6a 6d                	pushq  $0x6d
    1792:	e9 d1 fb ff ff       	jmpq   1368 <irq>

0000000000001797 <vector_142>:
    1797:	6a 6e                	pushq  $0x6e
    1799:	e9 ca fb ff ff       	jmpq   1368 <irq>

000000000000179e <vector_143>:
    179e:	6a 6f                	pushq  $0x6f
    17a0:	e9 c3 fb ff ff       	jmpq   1368 <irq>

00000000000017a5 <vector_144>:
IRQ(144); IRQ(145); IRQ(146); IRQ(147); IRQ(148); IRQ(149); IRQ(150); IRQ(151)
    17a5:	6a 70                	pushq  $0x70
    17a7:	e9 bc fb ff ff       	jmpq   1368 <irq>

00000000000017ac <vector_145>:
    17ac:	6a 71                	pushq  $0x71
    17ae:	e9 b5 fb ff ff       	jmpq   1368 <irq>

00000000000017b3 <vector_146>:
    17b3:	6a 72                	pushq  $0x72
    17b5:	e9 ae fb ff ff       	jmpq   1368 <irq>

00000000000017ba <vector_147>:
    17ba:	6a 73                	pushq  $0x73
    17bc:	e9 a7 fb ff ff       	jmpq   1368 <irq>

00000000000017c1 <vector_148>:
    17c1:	6a 74                	pushq  $0x74
    17c3:	e9 a0 fb ff ff       	jmpq   1368 <irq>

00000000000017c8 <vector_149>:
    17c8:	6a 75                	pushq  $0x75
    17ca:	e9 99 fb ff ff       	jmpq   1368 <irq>

00000000000017cf <vector_150>:
    17cf:	6a 76                	pushq  $0x76
    17d1:	e9 92 fb ff ff       	jmpq   1368 <irq>

00000000000017d6 <vector_151>:
    17d6:	6a 77                	pushq  $0x77
    17d8:	e9 8b fb ff ff       	jmpq   1368 <irq>

00000000000017dd <vector_152>:
IRQ(152); IRQ(153); IRQ(154); IRQ(155); IRQ(156); IRQ(157); IRQ(158); IRQ(159)
    17dd:	6a 78                	pushq  $0x78
    17df:	e9 84 fb ff ff       	jmpq   1368 <irq>

00000000000017e4 <vector_153>:
    17e4:	6a 79                	pushq  $0x79
    17e6:	e9 7d fb ff ff       	jmpq   1368 <irq>

00000000000017eb <vector_154>:
    17eb:	6a 7a                	pushq  $0x7a
    17ed:	e9 76 fb ff ff       	jmpq   1368 <irq>

00000000000017f2 <vector_155>:
    17f2:	6a 7b                	pushq  $0x7b
    17f4:	e9 6f fb ff ff       	jmpq   1368 <irq>

00000000000017f9 <vector_156>:
    17f9:	6a 7c                	pushq  $0x7c
    17fb:	e9 68 fb ff ff       	jmpq   1368 <irq>

0000000000001800 <vector_157>:
    1800:	6a 7d                	pushq  $0x7d
    1802:	e9 61 fb ff ff       	jmpq   1368 <irq>

0000000000001807 <vector_158>:
    1807:	6a 7e                	pushq  $0x7e
    1809:	e9 5a fb ff ff       	jmpq   1368 <irq>

000000000000180e <vector_159>:
    180e:	6a 7f                	pushq  $0x7f
    1810:	e9 53 fb ff ff       	jmpq   1368 <irq>

0000000000001815 <vector_160>:
IRQ(160); IRQ(161); IRQ(162); IRQ(163); IRQ(164); IRQ(165); IRQ(166); IRQ(167)
    1815:	68 80 00 00 00       	pushq  $0x80
    181a:	e9 49 fb ff ff       	jmpq   1368 <irq>

000000000000181f <vector_161>:
    181f:	68 81 00 00 00       	pushq  $0x81
    1824:	e9 3f fb ff ff       	jmpq   1368 <irq>

0000000000001829 <vector_162>:
    1829:	68 82 00 00 00       	pushq  $0x82
    182e:	e9 35 fb ff ff       	jmpq   1368 <irq>

0000000000001833 <vector_163>:
    1833:	68 83 00 00 00       	pushq  $0x83
    1838:	e9 2b fb ff ff       	jmpq   1368 <irq>

000000000000183d <vector_164>:
    183d:	68 84 00 00 00       	pushq  $0x84
    1842:	e9 21 fb ff ff       	jmpq   1368 <irq>

0000000000001847 <vector_165>:
    1847:	68 85 00 00 00       	pushq  $0x85
    184c:	e9 17 fb ff ff       	jmpq   1368 <irq>

0000000000001851 <vector_166>:
    1851:	68 86 00 00 00       	pushq  $0x86
    1856:	e9 0d fb ff ff       	jmpq   1368 <irq>

000000000000185b <vector_167>:
    185b:	68 87 00 00 00       	pushq  $0x87
    1860:	e9 03 fb ff ff       	jmpq   1368 <irq>

0000000000001865 <vector_168>:
IRQ(168); IRQ(169); IRQ(170); IRQ(171); IRQ(172); IRQ(173); IRQ(174); IRQ(175)
    1865:	68 88 00 00 00       	pushq  $0x88
    186a:	e9 f9 fa ff ff       	jmpq   1368 <irq>

000000000000186f <vector_169>:
    186f:	68 89 00 00 00       	pushq  $0x89
    1874:	e9 ef fa ff ff       	jmpq   1368 <irq>

0000000000001879 <vector_170>:
    1879:	68 8a 00 00 00       	pushq  $0x8a
    187e:	e9 e5 fa ff ff       	jmpq   1368 <irq>

0000000000001883 <vector_171>:
    1883:	68 8b 00 00 00       	pushq  $0x8b
    1888:	e9 db fa ff ff       	jmpq   1368 <irq>

000000000000188d <vector_172>:
    188d:	68 8c 00 00 00       	pushq  $0x8c
    1892:	e9 d1 fa ff ff       	jmpq   1368 <irq>

0000000000001897 <vector_173>:
    1897:	68 8d 00 00 00       	pushq  $0x8d
    189c:	e9 c7 fa ff ff       	jmpq   1368 <irq>

00000000000018a1 <vector_174>:
    18a1:	68 8e 00 00 00       	pushq  $0x8e
    18a6:	e9 bd fa ff ff       	jmpq   1368 <irq>

00000000000018ab <vector_175>:
    18ab:	68 8f 00 00 00       	pushq  $0x8f
    18b0:	e9 b3 fa ff ff       	jmpq   1368 <irq>

00000000000018b5 <vector_176>:
IRQ(176); IRQ(177); IRQ(178); IRQ(179); IRQ(180); IRQ(181); IRQ(182); IRQ(183)
    18b5:	68 90 00 00 00       	pushq  $0x90
    18ba:	e9 a9 fa ff ff       	jmpq   1368 <irq>

00000000000018bf <vector_177>:
    18bf:	68 91 00 00 00       	pushq  $0x91
    18c4:	e9 9f fa ff ff       	jmpq   1368 <irq>

00000000000018c9 <vector_178>:
    18c9:	68 92 00 00 00       	pushq  $0x92
    18ce:	e9 95 fa ff ff       	jmpq   1368 <irq>

00000000000018d3 <vector_179>:
    18d3:	68 93 00 00 00       	pushq  $0x93
    18d8:	e9 8b fa ff ff       	jmpq   1368 <irq>

00000000000018dd <vector_180>:
    18dd:	68 94 00 00 00       	pushq  $0x94
    18e2:	e9 81 fa ff ff       	jmpq   1368 <irq>

00000000000018e7 <vector_181>:
    18e7:	68 95 00 00 00       	pushq  $0x95
    18ec:	e9 77 fa ff ff       	jmpq   1368 <irq>

00000000000018f1 <vector_182>:
    18f1:	68 96 00 00 00       	pushq  $0x96
    18f6:	e9 6d fa ff ff       	jmpq   1368 <irq>

00000000000018fb <vector_183>:
    18fb:	68 97 00 00 00       	pushq  $0x97
    1900:	e9 63 fa ff ff       	jmpq   1368 <irq>

0000000000001905 <vector_184>:
IRQ(184); IRQ(185); IRQ(186); IRQ(187); IRQ(188); IRQ(189); IRQ(190); IRQ(191)
    1905:	68 98 00 00 00       	pushq  $0x98
    190a:	e9 59 fa ff ff       	jmpq   1368 <irq>

000000000000190f <vector_185>:
    190f:	68 99 00 00 00       	pushq  $0x99
    1914:	e9 4f fa ff ff       	jmpq   1368 <irq>

0000000000001919 <vector_186>:
    1919:	68 9a 00 00 00       	pushq  $0x9a
    191e:	e9 45 fa ff ff       	jmpq   1368 <irq>

0000000000001923 <vector_187>:
    1923:	68 9b 00 00 00       	pushq  $0x9b
    1928:	e9 3b fa ff ff       	jmpq   1368 <irq>

000000000000192d <vector_188>:
    192d:	68 9c 00 00 00       	pushq  $0x9c
    1932:	e9 31 fa ff ff       	jmpq   1368 <irq>

0000000000001937 <vector_189>:
    1937:	68 9d 00 00 00       	pushq  $0x9d
    193c:	e9 27 fa ff ff       	jmpq   1368 <irq>

0000000000001941 <vector_190>:
    1941:	68 9e 00 00 00       	pushq  $0x9e
    1946:	e9 1d fa ff ff       	jmpq   1368 <irq>

000000000000194b <vector_191>:
    194b:	68 9f 00 00 00       	pushq  $0x9f
    1950:	e9 13 fa ff ff       	jmpq   1368 <irq>

0000000000001955 <vector_192>:
IRQ(192); IRQ(193); IRQ(194); IRQ(195); IRQ(196); IRQ(197); IRQ(198); IRQ(199)
    1955:	68 a0 00 00 00       	pushq  $0xa0
    195a:	e9 09 fa ff ff       	jmpq   1368 <irq>

000000000000195f <vector_193>:
    195f:	68 a1 00 00 00       	pushq  $0xa1
    1964:	e9 ff f9 ff ff       	jmpq   1368 <irq>

0000000000001969 <vector_194>:
    1969:	68 a2 00 00 00       	pushq  $0xa2
    196e:	e9 f5 f9 ff ff       	jmpq   1368 <irq>

0000000000001973 <vector_195>:
    1973:	68 a3 00 00 00       	pushq  $0xa3
    1978:	e9 eb f9 ff ff       	jmpq   1368 <irq>

000000000000197d <vector_196>:
    197d:	68 a4 00 00 00       	pushq  $0xa4
    1982:	e9 e1 f9 ff ff       	jmpq   1368 <irq>

0000000000001987 <vector_197>:
    1987:	68 a5 00 00 00       	pushq  $0xa5
    198c:	e9 d7 f9 ff ff       	jmpq   1368 <irq>

0000000000001991 <vector_198>:
    1991:	68 a6 00 00 00       	pushq  $0xa6
    1996:	e9 cd f9 ff ff       	jmpq   1368 <irq>

000000000000199b <vector_199>:
    199b:	68 a7 00 00 00       	pushq  $0xa7
    19a0:	e9 c3 f9 ff ff       	jmpq   1368 <irq>

00000000000019a5 <vector_200>:
IRQ(200); IRQ(201); IRQ(202); IRQ(203); IRQ(204); IRQ(205); IRQ(206); IRQ(207)
    19a5:	68 a8 00 00 00       	pushq  $0xa8
    19aa:	e9 b9 f9 ff ff       	jmpq   1368 <irq>

00000000000019af <vector_201>:
    19af:	68 a9 00 00 00       	pushq  $0xa9
    19b4:	e9 af f9 ff ff       	jmpq   1368 <irq>

00000000000019b9 <vector_202>:
    19b9:	68 aa 00 00 00       	pushq  $0xaa
    19be:	e9 a5 f9 ff ff       	jmpq   1368 <irq>

00000000000019c3 <vector_203>:
    19c3:	68 ab 00 00 00       	pushq  $0xab
    19c8:	e9 9b f9 ff ff       	jmpq   1368 <irq>

00000000000019cd <vector_204>:
    19cd:	68 ac 00 00 00       	pushq  $0xac
    19d2:	e9 91 f9 ff ff       	jmpq   1368 <irq>

00000000000019d7 <vector_205>:
    19d7:	68 ad 00 00 00       	pushq  $0xad
    19dc:	e9 87 f9 ff ff       	jmpq   1368 <irq>

00000000000019e1 <vector_206>:
    19e1:	68 ae 00 00 00       	pushq  $0xae
    19e6:	e9 7d f9 ff ff       	jmpq   1368 <irq>

00000000000019eb <vector_207>:
    19eb:	68 af 00 00 00       	pushq  $0xaf
    19f0:	e9 73 f9 ff ff       	jmpq   1368 <irq>

00000000000019f5 <vector_208>:
IRQ(208); IRQ(209); IRQ(210); IRQ(211); IRQ(212); IRQ(213); IRQ(214); IRQ(215)
    19f5:	68 b0 00 00 00       	pushq  $0xb0
    19fa:	e9 69 f9 ff ff       	jmpq   1368 <irq>

00000000000019ff <vector_209>:
    19ff:	68 b1 00 00 00       	pushq  $0xb1
    1a04:	e9 5f f9 ff ff       	jmpq   1368 <irq>

0000000000001a09 <vector_210>:
    1a09:	68 b2 00 00 00       	pushq  $0xb2
    1a0e:	e9 55 f9 ff ff       	jmpq   1368 <irq>

0000000000001a13 <vector_211>:
    1a13:	68 b3 00 00 00       	pushq  $0xb3
    1a18:	e9 4b f9 ff ff       	jmpq   1368 <irq>

0000000000001a1d <vector_212>:
    1a1d:	68 b4 00 00 00       	pushq  $0xb4
    1a22:	e9 41 f9 ff ff       	jmpq   1368 <irq>

0000000000001a27 <vector_213>:
    1a27:	68 b5 00 00 00       	pushq  $0xb5
    1a2c:	e9 37 f9 ff ff       	jmpq   1368 <irq>

0000000000001a31 <vector_214>:
    1a31:	68 b6 00 00 00       	pushq  $0xb6
    1a36:	e9 2d f9 ff ff       	jmpq   1368 <irq>

0000000000001a3b <vector_215>:
    1a3b:	68 b7 00 00 00       	pushq  $0xb7
    1a40:	e9 23 f9 ff ff       	jmpq   1368 <irq>

0000000000001a45 <vector_216>:
IRQ(216); IRQ(217); IRQ(218); IRQ(219); IRQ(220); IRQ(221); IRQ(222); IRQ(223)
    1a45:	68 b8 00 00 00       	pushq  $0xb8
    1a4a:	e9 19 f9 ff ff       	jmpq   1368 <irq>

0000000000001a4f <vector_217>:
    1a4f:	68 b9 00 00 00       	pushq  $0xb9
    1a54:	e9 0f f9 ff ff       	jmpq   1368 <irq>

0000000000001a59 <vector_218>:
    1a59:	68 ba 00 00 00       	pushq  $0xba
    1a5e:	e9 05 f9 ff ff       	jmpq   1368 <irq>

0000000000001a63 <vector_219>:
    1a63:	68 bb 00 00 00       	pushq  $0xbb
    1a68:	e9 fb f8 ff ff       	jmpq   1368 <irq>

0000000000001a6d <vector_220>:
    1a6d:	68 bc 00 00 00       	pushq  $0xbc
    1a72:	e9 f1 f8 ff ff       	jmpq   1368 <irq>

0000000000001a77 <vector_221>:
    1a77:	68 bd 00 00 00       	pushq  $0xbd
    1a7c:	e9 e7 f8 ff ff       	jmpq   1368 <irq>

0000000000001a81 <vector_222>:
    1a81:	68 be 00 00 00       	pushq  $0xbe
    1a86:	e9 dd f8 ff ff       	jmpq   1368 <irq>

0000000000001a8b <vector_223>:
    1a8b:	68 bf 00 00 00       	pushq  $0xbf
    1a90:	e9 d3 f8 ff ff       	jmpq   1368 <irq>

0000000000001a95 <vector_224>:
IRQ(224); IRQ(225); IRQ(226); IRQ(227); IRQ(228); IRQ(229); IRQ(230); IRQ(231)
    1a95:	68 c0 00 00 00       	pushq  $0xc0
    1a9a:	e9 c9 f8 ff ff       	jmpq   1368 <irq>

0000000000001a9f <vector_225>:
    1a9f:	68 c1 00 00 00       	pushq  $0xc1
    1aa4:	e9 bf f8 ff ff       	jmpq   1368 <irq>

0000000000001aa9 <vector_226>:
    1aa9:	68 c2 00 00 00       	pushq  $0xc2
    1aae:	e9 b5 f8 ff ff       	jmpq   1368 <irq>

0000000000001ab3 <vector_227>:
    1ab3:	68 c3 00 00 00       	pushq  $0xc3
    1ab8:	e9 ab f8 ff ff       	jmpq   1368 <irq>

0000000000001abd <vector_228>:
    1abd:	68 c4 00 00 00       	pushq  $0xc4
    1ac2:	e9 a1 f8 ff ff       	jmpq   1368 <irq>

0000000000001ac7 <vector_229>:
    1ac7:	68 c5 00 00 00       	pushq  $0xc5
    1acc:	e9 97 f8 ff ff       	jmpq   1368 <irq>

0000000000001ad1 <vector_230>:
    1ad1:	68 c6 00 00 00       	pushq  $0xc6
    1ad6:	e9 8d f8 ff ff       	jmpq   1368 <irq>

0000000000001adb <vector_231>:
    1adb:	68 c7 00 00 00       	pushq  $0xc7
    1ae0:	e9 83 f8 ff ff       	jmpq   1368 <irq>

0000000000001ae5 <vector_232>:
IRQ(232); IRQ(233); IRQ(234); IRQ(235); IRQ(236); IRQ(237); IRQ(238); IRQ(239)
    1ae5:	68 c8 00 00 00       	pushq  $0xc8
    1aea:	e9 79 f8 ff ff       	jmpq   1368 <irq>

0000000000001aef <vector_233>:
    1aef:	68 c9 00 00 00       	pushq  $0xc9
    1af4:	e9 6f f8 ff ff       	jmpq   1368 <irq>

0000000000001af9 <vector_234>:
    1af9:	68 ca 00 00 00       	pushq  $0xca
    1afe:	e9 65 f8 ff ff       	jmpq   1368 <irq>

0000000000001b03 <vector_235>:
    1b03:	68 cb 00 00 00       	pushq  $0xcb
    1b08:	e9 5b f8 ff ff       	jmpq   1368 <irq>

0000000000001b0d <vector_236>:
    1b0d:	68 cc 00 00 00       	pushq  $0xcc
    1b12:	e9 51 f8 ff ff       	jmpq   1368 <irq>

0000000000001b17 <vector_237>:
    1b17:	68 cd 00 00 00       	pushq  $0xcd
    1b1c:	e9 47 f8 ff ff       	jmpq   1368 <irq>

0000000000001b21 <vector_238>:
    1b21:	68 ce 00 00 00       	pushq  $0xce
    1b26:	e9 3d f8 ff ff       	jmpq   1368 <irq>

0000000000001b2b <vector_239>:
    1b2b:	68 cf 00 00 00       	pushq  $0xcf
    1b30:	e9 33 f8 ff ff       	jmpq   1368 <irq>

0000000000001b35 <vector_240>:
IRQ(240); IRQ(241); IRQ(242); IRQ(243); IRQ(244); IRQ(245); IRQ(246); IRQ(247)
    1b35:	68 d0 00 00 00       	pushq  $0xd0
    1b3a:	e9 29 f8 ff ff       	jmpq   1368 <irq>

0000000000001b3f <vector_241>:
    1b3f:	68 d1 00 00 00       	pushq  $0xd1
    1b44:	e9 1f f8 ff ff       	jmpq   1368 <irq>

0000000000001b49 <vector_242>:
    1b49:	68 d2 00 00 00       	pushq  $0xd2
    1b4e:	e9 15 f8 ff ff       	jmpq   1368 <irq>

0000000000001b53 <vector_243>:
    1b53:	68 d3 00 00 00       	pushq  $0xd3
    1b58:	e9 0b f8 ff ff       	jmpq   1368 <irq>

0000000000001b5d <vector_244>:
    1b5d:	68 d4 00 00 00       	pushq  $0xd4
    1b62:	e9 01 f8 ff ff       	jmpq   1368 <irq>

0000000000001b67 <vector_245>:
    1b67:	68 d5 00 00 00       	pushq  $0xd5
    1b6c:	e9 f7 f7 ff ff       	jmpq   1368 <irq>

0000000000001b71 <vector_246>:
    1b71:	68 d6 00 00 00       	pushq  $0xd6
    1b76:	e9 ed f7 ff ff       	jmpq   1368 <irq>

0000000000001b7b <vector_247>:
    1b7b:	68 d7 00 00 00       	pushq  $0xd7
    1b80:	e9 e3 f7 ff ff       	jmpq   1368 <irq>

0000000000001b85 <vector_248>:
IRQ(248); IRQ(249); IRQ(250); IRQ(251); IRQ(252); IRQ(253); IRQ(254); IRQ(255)
    1b85:	68 d8 00 00 00       	pushq  $0xd8
    1b8a:	e9 d9 f7 ff ff       	jmpq   1368 <irq>

0000000000001b8f <vector_249>:
    1b8f:	68 d9 00 00 00       	pushq  $0xd9
    1b94:	e9 cf f7 ff ff       	jmpq   1368 <irq>

0000000000001b99 <vector_250>:
    1b99:	68 da 00 00 00       	pushq  $0xda
    1b9e:	e9 c5 f7 ff ff       	jmpq   1368 <irq>

0000000000001ba3 <vector_251>:
    1ba3:	68 db 00 00 00       	pushq  $0xdb
    1ba8:	e9 bb f7 ff ff       	jmpq   1368 <irq>

0000000000001bad <vector_252>:
    1bad:	68 dc 00 00 00       	pushq  $0xdc
    1bb2:	e9 b1 f7 ff ff       	jmpq   1368 <irq>

0000000000001bb7 <vector_253>:
    1bb7:	68 dd 00 00 00       	pushq  $0xdd
    1bbc:	e9 a7 f7 ff ff       	jmpq   1368 <irq>

0000000000001bc1 <vector_254>:
    1bc1:	68 de 00 00 00       	pushq  $0xde
    1bc6:	e9 9d f7 ff ff       	jmpq   1368 <irq>

0000000000001bcb <vector_255>:
    1bcb:	68 df 00 00 00       	pushq  $0xdf
    1bd0:	e9 93 f7 ff ff       	jmpq   1368 <irq>
    1bd5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1bdc:	00 00 00 
    1bdf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1be6:	00 00 00 
    1be9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1bf0:	00 00 00 
    1bf3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1bfa:	00 00 00 
    1bfd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1c04:	00 00 00 
    1c07:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1c0e:	00 00 00 
    1c11:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1c18:	00 00 00 
    1c1b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1c22:	00 00 00 
    1c25:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1c2c:	00 00 00 
    1c2f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1c36:	00 00 00 
    1c39:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1c40:	00 00 00 
    1c43:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1c4a:	00 00 00 
    1c4d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1c54:	00 00 00 
    1c57:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1c5e:	00 00 00 
    1c61:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1c68:	00 00 00 
    1c6b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1c72:	00 00 00 
    1c75:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1c7c:	00 00 00 
    1c7f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1c86:	00 00 00 
    1c89:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1c90:	00 00 00 
    1c93:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1c9a:	00 00 00 
    1c9d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1ca4:	00 00 00 
    1ca7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1cae:	00 00 00 
    1cb1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1cb8:	00 00 00 
    1cbb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1cc2:	00 00 00 
    1cc5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1ccc:	00 00 00 
    1ccf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1cd6:	00 00 00 
    1cd9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1ce0:	00 00 00 
    1ce3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1cea:	00 00 00 
    1ced:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1cf4:	00 00 00 
    1cf7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1cfe:	00 00 00 
    1d01:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1d08:	00 00 00 
    1d0b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1d12:	00 00 00 
    1d15:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1d1c:	00 00 00 
    1d1f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1d26:	00 00 00 
    1d29:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1d30:	00 00 00 
    1d33:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1d3a:	00 00 00 
    1d3d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1d44:	00 00 00 
    1d47:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1d4e:	00 00 00 
    1d51:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1d58:	00 00 00 
    1d5b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1d62:	00 00 00 
    1d65:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1d6c:	00 00 00 
    1d6f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1d76:	00 00 00 
    1d79:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1d80:	00 00 00 
    1d83:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1d8a:	00 00 00 
    1d8d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1d94:	00 00 00 
    1d97:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1d9e:	00 00 00 
    1da1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1da8:	00 00 00 
    1dab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1db2:	00 00 00 
    1db5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1dbc:	00 00 00 
    1dbf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1dc6:	00 00 00 
    1dc9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1dd0:	00 00 00 
    1dd3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1dda:	00 00 00 
    1ddd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1de4:	00 00 00 
    1de7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1dee:	00 00 00 
    1df1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1df8:	00 00 00 
    1dfb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1e02:	00 00 00 
    1e05:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1e0c:	00 00 00 
    1e0f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1e16:	00 00 00 
    1e19:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1e20:	00 00 00 
    1e23:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1e2a:	00 00 00 
    1e2d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1e34:	00 00 00 
    1e37:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1e3e:	00 00 00 
    1e41:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1e48:	00 00 00 
    1e4b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1e52:	00 00 00 
    1e55:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1e5c:	00 00 00 
    1e5f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1e66:	00 00 00 
    1e69:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1e70:	00 00 00 
    1e73:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1e7a:	00 00 00 
    1e7d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1e84:	00 00 00 
    1e87:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1e8e:	00 00 00 
    1e91:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1e98:	00 00 00 
    1e9b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1ea2:	00 00 00 
    1ea5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1eac:	00 00 00 
    1eaf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1eb6:	00 00 00 
    1eb9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1ec0:	00 00 00 
    1ec3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1eca:	00 00 00 
    1ecd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1ed4:	00 00 00 
    1ed7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1ede:	00 00 00 
    1ee1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1ee8:	00 00 00 
    1eeb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1ef2:	00 00 00 
    1ef5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1efc:	00 00 00 
    1eff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1f06:	00 00 00 
    1f09:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1f10:	00 00 00 
    1f13:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1f1a:	00 00 00 
    1f1d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1f24:	00 00 00 
    1f27:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1f2e:	00 00 00 
    1f31:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1f38:	00 00 00 
    1f3b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1f42:	00 00 00 
    1f45:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1f4c:	00 00 00 
    1f4f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1f56:	00 00 00 
    1f59:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1f60:	00 00 00 
    1f63:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1f6a:	00 00 00 
    1f6d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1f74:	00 00 00 
    1f77:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1f7e:	00 00 00 
    1f81:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1f88:	00 00 00 
    1f8b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1f92:	00 00 00 
    1f95:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1f9c:	00 00 00 
    1f9f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1fa6:	00 00 00 
    1fa9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1fb0:	00 00 00 
    1fb3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1fba:	00 00 00 
    1fbd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1fc4:	00 00 00 
    1fc7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1fce:	00 00 00 
    1fd1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1fd8:	00 00 00 
    1fdb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1fe2:	00 00 00 
    1fe5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1fec:	00 00 00 
    1fef:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1ff6:	00 00 00 
    1ff9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000002000 <_locore_end>:
    2000:	6e                   	outsb  %ds:(%rsi),(%dx)
    2001:	12 18                	adc    (%rax),%bl
    2003:	00 07                	add    %al,(%rdi)
    2005:	8f 00                	popq   (%rax)
	...
    200f:	00 74 12 18          	add    %dh,0x18(%rdx,%rdx,1)
    2013:	00 07                	add    %al,(%rdi)
    2015:	8f 00                	popq   (%rax)
	...
    201f:	00 7a 12             	add    %bh,0x12(%rdx)
    2022:	18 00                	sbb    %al,(%rax)
    2024:	06                   	(bad)  
    2025:	8f 00                	popq   (%rax)
	...
    202f:	00 80 12 18 00 07    	add    %al,0x7001812(%rax)
    2035:	8f 00                	popq   (%rax)
	...
    203f:	00 86 12 18 00 07    	add    %al,0x7001812(%rsi)
    2045:	8f 00                	popq   (%rax)
	...
    204f:	00 8c 12 18 00 07 8f 	add    %cl,-0x70f8ffe8(%rdx,%rdx,1)
	...
    205e:	00 00                	add    %al,(%rax)
    2060:	92                   	xchg   %eax,%edx
    2061:	12 18                	adc    (%rax),%bl
    2063:	00 07                	add    %al,(%rdi)
    2065:	8f 00                	popq   (%rax)
	...
    206f:	00 98 12 18 00 07    	add    %bl,0x7001812(%rax)
    2075:	8f 00                	popq   (%rax)
	...
    207f:	00 9e 12 18 00 07    	add    %bl,0x7001812(%rsi)
    2085:	8f 00                	popq   (%rax)
	...
    208f:	00 a2 12 18 00 07    	add    %ah,0x7001812(%rdx)
    2095:	8f 00                	popq   (%rax)
	...
    209f:	00 a8 12 18 00 07    	add    %ch,0x7001812(%rax)
    20a5:	8f 00                	popq   (%rax)
	...
    20af:	00 ac 12 18 00 07 8f 	add    %ch,-0x70f8ffe8(%rdx,%rdx,1)
	...
    20be:	00 00                	add    %al,(%rax)
    20c0:	b3 12                	mov    $0x12,%bl
    20c2:	18 00                	sbb    %al,(%rax)
    20c4:	07                   	(bad)  
    20c5:	8f 00                	popq   (%rax)
	...
    20cf:	00 ba 12 18 00 07    	add    %bh,0x7001812(%rdx)
    20d5:	8f 00                	popq   (%rax)
	...
    20df:	00 c1                	add    %al,%cl
    20e1:	12 18                	adc    (%rax),%bl
    20e3:	00 07                	add    %al,(%rdi)
    20e5:	8f 00                	popq   (%rax)
	...
    20ef:	00 c8                	add    %cl,%al
    20f1:	12 18                	adc    (%rax),%bl
    20f3:	00 07                	add    %al,(%rdi)
    20f5:	8f 00                	popq   (%rax)
	...
    20ff:	00 d1                	add    %dl,%cl
    2101:	12 18                	adc    (%rax),%bl
    2103:	00 07                	add    %al,(%rdi)
    2105:	8f 00                	popq   (%rax)
	...
    210f:	00 da                	add    %bl,%dl
    2111:	12 18                	adc    (%rax),%bl
    2113:	00 07                	add    %al,(%rdi)
    2115:	8f 00                	popq   (%rax)
	...
    211f:	00 e1                	add    %ah,%cl
    2121:	12 18                	adc    (%rax),%bl
    2123:	00 07                	add    %al,(%rdi)
    2125:	8f 00                	popq   (%rax)
	...
    212f:	00 ea                	add    %ch,%dl
    2131:	12 18                	adc    (%rax),%bl
    2133:	00 07                	add    %al,(%rdi)
    2135:	8f 00                	popq   (%rax)
	...
    213f:	00 f3                	add    %dh,%bl
    2141:	12 18                	adc    (%rax),%bl
    2143:	00 07                	add    %al,(%rdi)
    2145:	8f 00                	popq   (%rax)
	...
    214f:	00 fc                	add    %bh,%ah
    2151:	12 18                	adc    (%rax),%bl
    2153:	00 07                	add    %al,(%rdi)
    2155:	8f 00                	popq   (%rax)
	...
    215f:	00 05 13 18 00 07    	add    %al,0x7001813(%rip)        # 7003978 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x582c138>
    2165:	8f 00                	popq   (%rax)
	...
    216f:	00 0e                	add    %cl,(%rsi)
    2171:	13 18                	adc    (%rax),%ebx
    2173:	00 07                	add    %al,(%rdi)
    2175:	8f 00                	popq   (%rax)
	...
    217f:	00 17                	add    %dl,(%rdi)
    2181:	13 18                	adc    (%rax),%ebx
    2183:	00 07                	add    %al,(%rdi)
    2185:	8f 00                	popq   (%rax)
	...
    218f:	00 20                	add    %ah,(%rax)
    2191:	13 18                	adc    (%rax),%ebx
    2193:	00 07                	add    %al,(%rdi)
    2195:	8f 00                	popq   (%rax)
	...
    219f:	00 29                	add    %ch,(%rcx)
    21a1:	13 18                	adc    (%rax),%ebx
    21a3:	00 07                	add    %al,(%rdi)
    21a5:	8f 00                	popq   (%rax)
	...
    21af:	00 32                	add    %dh,(%rdx)
    21b1:	13 18                	adc    (%rax),%ebx
    21b3:	00 07                	add    %al,(%rdi)
    21b5:	8f 00                	popq   (%rax)
	...
    21bf:	00 3b                	add    %bh,(%rbx)
    21c1:	13 18                	adc    (%rax),%ebx
    21c3:	00 07                	add    %al,(%rdi)
    21c5:	8f 00                	popq   (%rax)
	...
    21cf:	00 44 13 18          	add    %al,0x18(%rbx,%rdx,1)
    21d3:	00 07                	add    %al,(%rdi)
    21d5:	8f 00                	popq   (%rax)
	...
    21df:	00 4d 13             	add    %cl,0x13(%rbp)
    21e2:	18 00                	sbb    %al,(%rax)
    21e4:	07                   	(bad)  
    21e5:	8f 00                	popq   (%rax)
	...
    21ef:	00 56 13             	add    %dl,0x13(%rsi)
    21f2:	18 00                	sbb    %al,(%rax)
    21f4:	07                   	(bad)  
    21f5:	8f 00                	popq   (%rax)
	...
    21ff:	00 5f 13             	add    %bl,0x13(%rdi)
    2202:	18 00                	sbb    %al,(%rax)
    2204:	07                   	(bad)  
    2205:	ee                   	out    %al,(%dx)
	...
    220e:	00 00                	add    %al,(%rax)
    2210:	9c                   	pushfq 
    2211:	14 18                	adc    $0x18,%al
    2213:	00 01                	add    %al,(%rcx)
    2215:	8e 00                	mov    (%rax),%es
	...
    221f:	00 a3 14 18 00 01    	add    %ah,0x1001814(%rbx)
    2225:	8e 00                	mov    (%rax),%es
	...
    222f:	00 aa 14 18 00 01    	add    %ch,0x1001814(%rdx)
    2235:	8e 00                	mov    (%rax),%es
	...
    223f:	00 b1 14 18 00 01    	add    %dh,0x1001814(%rcx)
    2245:	8e 00                	mov    (%rax),%es
	...
    224f:	00 b8 14 18 00 01    	add    %bh,0x1001814(%rax)
    2255:	8e 00                	mov    (%rax),%es
	...
    225f:	00 bf 14 18 00 01    	add    %bh,0x1001814(%rdi)
    2265:	8e 00                	mov    (%rax),%es
	...
    226f:	00 c6                	add    %al,%dh
    2271:	14 18                	adc    $0x18,%al
    2273:	00 01                	add    %al,(%rcx)
    2275:	8e 00                	mov    (%rax),%es
	...
    227f:	00 cd                	add    %cl,%ch
    2281:	14 18                	adc    $0x18,%al
    2283:	00 01                	add    %al,(%rcx)
    2285:	8e 00                	mov    (%rax),%es
	...
    228f:	00 d4                	add    %dl,%ah
    2291:	14 18                	adc    $0x18,%al
    2293:	00 01                	add    %al,(%rcx)
    2295:	8e 00                	mov    (%rax),%es
	...
    229f:	00 db                	add    %bl,%bl
    22a1:	14 18                	adc    $0x18,%al
    22a3:	00 01                	add    %al,(%rcx)
    22a5:	8e 00                	mov    (%rax),%es
	...
    22af:	00 e2                	add    %ah,%dl
    22b1:	14 18                	adc    $0x18,%al
    22b3:	00 01                	add    %al,(%rcx)
    22b5:	8e 00                	mov    (%rax),%es
	...
    22bf:	00 e9                	add    %ch,%cl
    22c1:	14 18                	adc    $0x18,%al
    22c3:	00 01                	add    %al,(%rcx)
    22c5:	8e 00                	mov    (%rax),%es
	...
    22cf:	00 f0                	add    %dh,%al
    22d1:	14 18                	adc    $0x18,%al
    22d3:	00 01                	add    %al,(%rcx)
    22d5:	8e 00                	mov    (%rax),%es
	...
    22df:	00 f7                	add    %dh,%bh
    22e1:	14 18                	adc    $0x18,%al
    22e3:	00 01                	add    %al,(%rcx)
    22e5:	8e 00                	mov    (%rax),%es
	...
    22ef:	00 fe                	add    %bh,%dh
    22f1:	14 18                	adc    $0x18,%al
    22f3:	00 01                	add    %al,(%rcx)
    22f5:	8e 00                	mov    (%rax),%es
	...
    22ff:	00 05 15 18 00 01    	add    %al,0x1001815(%rip)        # 1003b1a <CONFIG_KERNEL_VM_SIZE+0x803b1a>
    2305:	8e 00                	mov    (%rax),%es
	...
    230f:	00 0c 15 18 00 01 8e 	add    %cl,-0x71feffe8(,%rdx,1)
	...
    231e:	00 00                	add    %al,(%rax)
    2320:	13 15 18 00 01 8e    	adc    -0x71feffe8(%rip),%edx        # ffffffff8e01233e <CONFIG_LOAPIC_BASE_ADDRESS+0xfffffffe8f21233e>
	...
    232e:	00 00                	add    %al,(%rax)
    2330:	1a 15 18 00 01 8e    	sbb    -0x71feffe8(%rip),%dl        # ffffffff8e01234e <CONFIG_LOAPIC_BASE_ADDRESS+0xfffffffe8f21234e>
	...
    233e:	00 00                	add    %al,(%rax)
    2340:	21 15 18 00 01 8e    	and    %edx,-0x71feffe8(%rip)        # ffffffff8e01235e <CONFIG_LOAPIC_BASE_ADDRESS+0xfffffffe8f21235e>
	...
    234e:	00 00                	add    %al,(%rax)
    2350:	28 15 18 00 01 8e    	sub    %dl,-0x71feffe8(%rip)        # ffffffff8e01236e <CONFIG_LOAPIC_BASE_ADDRESS+0xfffffffe8f21236e>
	...
    235e:	00 00                	add    %al,(%rax)
    2360:	2f                   	(bad)  
    2361:	15 18 00 01 8e       	adc    $0x8e010018,%eax
	...
    236e:	00 00                	add    %al,(%rax)
    2370:	36 15 18 00 01 8e    	ss adc $0x8e010018,%eax
	...
    237e:	00 00                	add    %al,(%rax)
    2380:	3d 15 18 00 01       	cmp    $0x1001815,%eax
    2385:	8e 00                	mov    (%rax),%es
	...
    238f:	00 44 15 18          	add    %al,0x18(%rbp,%rdx,1)
    2393:	00 01                	add    %al,(%rcx)
    2395:	8e 00                	mov    (%rax),%es
	...
    239f:	00 4b 15             	add    %cl,0x15(%rbx)
    23a2:	18 00                	sbb    %al,(%rax)
    23a4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    23aa:	00 00                	add    %al,(%rax)
    23ac:	00 00                	add    %al,(%rax)
    23ae:	00 00                	add    %al,(%rax)
    23b0:	52                   	push   %rdx
    23b1:	15 18 00 01 8e       	adc    $0x8e010018,%eax
	...
    23be:	00 00                	add    %al,(%rax)
    23c0:	59                   	pop    %rcx
    23c1:	15 18 00 01 8e       	adc    $0x8e010018,%eax
	...
    23ce:	00 00                	add    %al,(%rax)
    23d0:	60                   	(bad)  
    23d1:	15 18 00 01 8e       	adc    $0x8e010018,%eax
	...
    23de:	00 00                	add    %al,(%rax)
    23e0:	67 15 18 00 01 8e    	addr32 adc $0x8e010018,%eax
	...
    23ee:	00 00                	add    %al,(%rax)
    23f0:	6e                   	outsb  %ds:(%rsi),(%dx)
    23f1:	15 18 00 01 8e       	adc    $0x8e010018,%eax
	...
    23fe:	00 00                	add    %al,(%rax)
    2400:	75 15                	jne    2417 <_locore_end+0x417>
    2402:	18 00                	sbb    %al,(%rax)
    2404:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    240a:	00 00                	add    %al,(%rax)
    240c:	00 00                	add    %al,(%rax)
    240e:	00 00                	add    %al,(%rax)
    2410:	7c 15                	jl     2427 <_locore_end+0x427>
    2412:	18 00                	sbb    %al,(%rax)
    2414:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    241a:	00 00                	add    %al,(%rax)
    241c:	00 00                	add    %al,(%rax)
    241e:	00 00                	add    %al,(%rax)
    2420:	83 15 18 00 01 8e 00 	adcl   $0x0,-0x71feffe8(%rip)        # ffffffff8e01243f <CONFIG_LOAPIC_BASE_ADDRESS+0xfffffffe8f21243f>
	...
    242f:	00 8a 15 18 00 01    	add    %cl,0x1001815(%rdx)
    2435:	8e 00                	mov    (%rax),%es
	...
    243f:	00 91 15 18 00 01    	add    %dl,0x1001815(%rcx)
    2445:	8e 00                	mov    (%rax),%es
	...
    244f:	00 98 15 18 00 01    	add    %bl,0x1001815(%rax)
    2455:	8e 00                	mov    (%rax),%es
	...
    245f:	00 9f 15 18 00 01    	add    %bl,0x1001815(%rdi)
    2465:	8e 00                	mov    (%rax),%es
	...
    246f:	00 a6 15 18 00 01    	add    %ah,0x1001815(%rsi)
    2475:	8e 00                	mov    (%rax),%es
	...
    247f:	00 ad 15 18 00 01    	add    %ch,0x1001815(%rbp)
    2485:	8e 00                	mov    (%rax),%es
	...
    248f:	00 b4 15 18 00 01 8e 	add    %dh,-0x71feffe8(%rbp,%rdx,1)
	...
    249e:	00 00                	add    %al,(%rax)
    24a0:	bb 15 18 00 01       	mov    $0x1001815,%ebx
    24a5:	8e 00                	mov    (%rax),%es
	...
    24af:	00 c2                	add    %al,%dl
    24b1:	15 18 00 01 8e       	adc    $0x8e010018,%eax
	...
    24be:	00 00                	add    %al,(%rax)
    24c0:	c9                   	leaveq 
    24c1:	15 18 00 01 8e       	adc    $0x8e010018,%eax
	...
    24ce:	00 00                	add    %al,(%rax)
    24d0:	d0 15 18 00 01 8e    	rclb   -0x71feffe8(%rip)        # ffffffff8e0124ee <CONFIG_LOAPIC_BASE_ADDRESS+0xfffffffe8f2124ee>
	...
    24de:	00 00                	add    %al,(%rax)
    24e0:	d7                   	xlat   %ds:(%rbx)
    24e1:	15 18 00 01 8e       	adc    $0x8e010018,%eax
	...
    24ee:	00 00                	add    %al,(%rax)
    24f0:	de 15 18 00 01 8e    	ficoms -0x71feffe8(%rip)        # ffffffff8e01250e <CONFIG_LOAPIC_BASE_ADDRESS+0xfffffffe8f21250e>
	...
    24fe:	00 00                	add    %al,(%rax)
    2500:	e5 15                	in     $0x15,%eax
    2502:	18 00                	sbb    %al,(%rax)
    2504:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    250a:	00 00                	add    %al,(%rax)
    250c:	00 00                	add    %al,(%rax)
    250e:	00 00                	add    %al,(%rax)
    2510:	ec                   	in     (%dx),%al
    2511:	15 18 00 01 8e       	adc    $0x8e010018,%eax
	...
    251e:	00 00                	add    %al,(%rax)
    2520:	f3 15 18 00 01 8e    	repz adc $0x8e010018,%eax
	...
    252e:	00 00                	add    %al,(%rax)
    2530:	fa                   	cli    
    2531:	15 18 00 01 8e       	adc    $0x8e010018,%eax
	...
    253e:	00 00                	add    %al,(%rax)
    2540:	01 16                	add    %edx,(%rsi)
    2542:	18 00                	sbb    %al,(%rax)
    2544:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    254a:	00 00                	add    %al,(%rax)
    254c:	00 00                	add    %al,(%rax)
    254e:	00 00                	add    %al,(%rax)
    2550:	08 16                	or     %dl,(%rsi)
    2552:	18 00                	sbb    %al,(%rax)
    2554:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    255a:	00 00                	add    %al,(%rax)
    255c:	00 00                	add    %al,(%rax)
    255e:	00 00                	add    %al,(%rax)
    2560:	0f 16 18             	movhps (%rax),%xmm3
    2563:	00 01                	add    %al,(%rcx)
    2565:	8e 00                	mov    (%rax),%es
	...
    256f:	00 16                	add    %dl,(%rsi)
    2571:	16                   	(bad)  
    2572:	18 00                	sbb    %al,(%rax)
    2574:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    257a:	00 00                	add    %al,(%rax)
    257c:	00 00                	add    %al,(%rax)
    257e:	00 00                	add    %al,(%rax)
    2580:	1d 16 18 00 01       	sbb    $0x1001816,%eax
    2585:	8e 00                	mov    (%rax),%es
	...
    258f:	00 24 16             	add    %ah,(%rsi,%rdx,1)
    2592:	18 00                	sbb    %al,(%rax)
    2594:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    259a:	00 00                	add    %al,(%rax)
    259c:	00 00                	add    %al,(%rax)
    259e:	00 00                	add    %al,(%rax)
    25a0:	2b 16                	sub    (%rsi),%edx
    25a2:	18 00                	sbb    %al,(%rax)
    25a4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    25aa:	00 00                	add    %al,(%rax)
    25ac:	00 00                	add    %al,(%rax)
    25ae:	00 00                	add    %al,(%rax)
    25b0:	32 16                	xor    (%rsi),%dl
    25b2:	18 00                	sbb    %al,(%rax)
    25b4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    25ba:	00 00                	add    %al,(%rax)
    25bc:	00 00                	add    %al,(%rax)
    25be:	00 00                	add    %al,(%rax)
    25c0:	39 16                	cmp    %edx,(%rsi)
    25c2:	18 00                	sbb    %al,(%rax)
    25c4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    25ca:	00 00                	add    %al,(%rax)
    25cc:	00 00                	add    %al,(%rax)
    25ce:	00 00                	add    %al,(%rax)
    25d0:	40 16                	rex (bad) 
    25d2:	18 00                	sbb    %al,(%rax)
    25d4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    25da:	00 00                	add    %al,(%rax)
    25dc:	00 00                	add    %al,(%rax)
    25de:	00 00                	add    %al,(%rax)
    25e0:	47 16                	rex.RXB (bad) 
    25e2:	18 00                	sbb    %al,(%rax)
    25e4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    25ea:	00 00                	add    %al,(%rax)
    25ec:	00 00                	add    %al,(%rax)
    25ee:	00 00                	add    %al,(%rax)
    25f0:	4e 16                	rex.WRX (bad) 
    25f2:	18 00                	sbb    %al,(%rax)
    25f4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    25fa:	00 00                	add    %al,(%rax)
    25fc:	00 00                	add    %al,(%rax)
    25fe:	00 00                	add    %al,(%rax)
    2600:	55                   	push   %rbp
    2601:	16                   	(bad)  
    2602:	18 00                	sbb    %al,(%rax)
    2604:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    260a:	00 00                	add    %al,(%rax)
    260c:	00 00                	add    %al,(%rax)
    260e:	00 00                	add    %al,(%rax)
    2610:	5c                   	pop    %rsp
    2611:	16                   	(bad)  
    2612:	18 00                	sbb    %al,(%rax)
    2614:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    261a:	00 00                	add    %al,(%rax)
    261c:	00 00                	add    %al,(%rax)
    261e:	00 00                	add    %al,(%rax)
    2620:	63 16                	movsxd (%rsi),%edx
    2622:	18 00                	sbb    %al,(%rax)
    2624:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    262a:	00 00                	add    %al,(%rax)
    262c:	00 00                	add    %al,(%rax)
    262e:	00 00                	add    %al,(%rax)
    2630:	6a 16                	pushq  $0x16
    2632:	18 00                	sbb    %al,(%rax)
    2634:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    263a:	00 00                	add    %al,(%rax)
    263c:	00 00                	add    %al,(%rax)
    263e:	00 00                	add    %al,(%rax)
    2640:	71 16                	jno    2658 <_locore_end+0x658>
    2642:	18 00                	sbb    %al,(%rax)
    2644:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    264a:	00 00                	add    %al,(%rax)
    264c:	00 00                	add    %al,(%rax)
    264e:	00 00                	add    %al,(%rax)
    2650:	78 16                	js     2668 <_locore_end+0x668>
    2652:	18 00                	sbb    %al,(%rax)
    2654:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    265a:	00 00                	add    %al,(%rax)
    265c:	00 00                	add    %al,(%rax)
    265e:	00 00                	add    %al,(%rax)
    2660:	7f 16                	jg     2678 <_locore_end+0x678>
    2662:	18 00                	sbb    %al,(%rax)
    2664:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    266a:	00 00                	add    %al,(%rax)
    266c:	00 00                	add    %al,(%rax)
    266e:	00 00                	add    %al,(%rax)
    2670:	86 16                	xchg   %dl,(%rsi)
    2672:	18 00                	sbb    %al,(%rax)
    2674:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    267a:	00 00                	add    %al,(%rax)
    267c:	00 00                	add    %al,(%rax)
    267e:	00 00                	add    %al,(%rax)
    2680:	8d 16                	lea    (%rsi),%edx
    2682:	18 00                	sbb    %al,(%rax)
    2684:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    268a:	00 00                	add    %al,(%rax)
    268c:	00 00                	add    %al,(%rax)
    268e:	00 00                	add    %al,(%rax)
    2690:	94                   	xchg   %eax,%esp
    2691:	16                   	(bad)  
    2692:	18 00                	sbb    %al,(%rax)
    2694:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    269a:	00 00                	add    %al,(%rax)
    269c:	00 00                	add    %al,(%rax)
    269e:	00 00                	add    %al,(%rax)
    26a0:	9b                   	fwait
    26a1:	16                   	(bad)  
    26a2:	18 00                	sbb    %al,(%rax)
    26a4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    26aa:	00 00                	add    %al,(%rax)
    26ac:	00 00                	add    %al,(%rax)
    26ae:	00 00                	add    %al,(%rax)
    26b0:	a2 16 18 00 01 8e 00 	movabs %al,0x8e01001816
    26b7:	00 00 
    26b9:	00 00                	add    %al,(%rax)
    26bb:	00 00                	add    %al,(%rax)
    26bd:	00 00                	add    %al,(%rax)
    26bf:	00 a9 16 18 00 01    	add    %ch,0x1001816(%rcx)
    26c5:	8e 00                	mov    (%rax),%es
	...
    26cf:	00 b0 16 18 00 01    	add    %dh,0x1001816(%rax)
    26d5:	8e 00                	mov    (%rax),%es
	...
    26df:	00 b7 16 18 00 01    	add    %dh,0x1001816(%rdi)
    26e5:	8e 00                	mov    (%rax),%es
	...
    26ef:	00 be 16 18 00 01    	add    %bh,0x1001816(%rsi)
    26f5:	8e 00                	mov    (%rax),%es
	...
    26ff:	00 c5                	add    %al,%ch
    2701:	16                   	(bad)  
    2702:	18 00                	sbb    %al,(%rax)
    2704:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    270a:	00 00                	add    %al,(%rax)
    270c:	00 00                	add    %al,(%rax)
    270e:	00 00                	add    %al,(%rax)
    2710:	cc                   	int3   
    2711:	16                   	(bad)  
    2712:	18 00                	sbb    %al,(%rax)
    2714:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    271a:	00 00                	add    %al,(%rax)
    271c:	00 00                	add    %al,(%rax)
    271e:	00 00                	add    %al,(%rax)
    2720:	d3 16                	rcll   %cl,(%rsi)
    2722:	18 00                	sbb    %al,(%rax)
    2724:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    272a:	00 00                	add    %al,(%rax)
    272c:	00 00                	add    %al,(%rax)
    272e:	00 00                	add    %al,(%rax)
    2730:	da 16                	ficoml (%rsi)
    2732:	18 00                	sbb    %al,(%rax)
    2734:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    273a:	00 00                	add    %al,(%rax)
    273c:	00 00                	add    %al,(%rax)
    273e:	00 00                	add    %al,(%rax)
    2740:	e1 16                	loope  2758 <_locore_end+0x758>
    2742:	18 00                	sbb    %al,(%rax)
    2744:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    274a:	00 00                	add    %al,(%rax)
    274c:	00 00                	add    %al,(%rax)
    274e:	00 00                	add    %al,(%rax)
    2750:	e8 16 18 00 01       	callq  1003f6b <CONFIG_KERNEL_VM_SIZE+0x803f6b>
    2755:	8e 00                	mov    (%rax),%es
	...
    275f:	00 ef                	add    %ch,%bh
    2761:	16                   	(bad)  
    2762:	18 00                	sbb    %al,(%rax)
    2764:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    276a:	00 00                	add    %al,(%rax)
    276c:	00 00                	add    %al,(%rax)
    276e:	00 00                	add    %al,(%rax)
    2770:	f6 16                	notb   (%rsi)
    2772:	18 00                	sbb    %al,(%rax)
    2774:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    277a:	00 00                	add    %al,(%rax)
    277c:	00 00                	add    %al,(%rax)
    277e:	00 00                	add    %al,(%rax)
    2780:	fd                   	std    
    2781:	16                   	(bad)  
    2782:	18 00                	sbb    %al,(%rax)
    2784:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    278a:	00 00                	add    %al,(%rax)
    278c:	00 00                	add    %al,(%rax)
    278e:	00 00                	add    %al,(%rax)
    2790:	04 17                	add    $0x17,%al
    2792:	18 00                	sbb    %al,(%rax)
    2794:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    279a:	00 00                	add    %al,(%rax)
    279c:	00 00                	add    %al,(%rax)
    279e:	00 00                	add    %al,(%rax)
    27a0:	0b 17                	or     (%rdi),%edx
    27a2:	18 00                	sbb    %al,(%rax)
    27a4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    27aa:	00 00                	add    %al,(%rax)
    27ac:	00 00                	add    %al,(%rax)
    27ae:	00 00                	add    %al,(%rax)
    27b0:	12 17                	adc    (%rdi),%dl
    27b2:	18 00                	sbb    %al,(%rax)
    27b4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    27ba:	00 00                	add    %al,(%rax)
    27bc:	00 00                	add    %al,(%rax)
    27be:	00 00                	add    %al,(%rax)
    27c0:	19 17                	sbb    %edx,(%rdi)
    27c2:	18 00                	sbb    %al,(%rax)
    27c4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    27ca:	00 00                	add    %al,(%rax)
    27cc:	00 00                	add    %al,(%rax)
    27ce:	00 00                	add    %al,(%rax)
    27d0:	20 17                	and    %dl,(%rdi)
    27d2:	18 00                	sbb    %al,(%rax)
    27d4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    27da:	00 00                	add    %al,(%rax)
    27dc:	00 00                	add    %al,(%rax)
    27de:	00 00                	add    %al,(%rax)
    27e0:	27                   	(bad)  
    27e1:	17                   	(bad)  
    27e2:	18 00                	sbb    %al,(%rax)
    27e4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    27ea:	00 00                	add    %al,(%rax)
    27ec:	00 00                	add    %al,(%rax)
    27ee:	00 00                	add    %al,(%rax)
    27f0:	2e 17                	cs (bad) 
    27f2:	18 00                	sbb    %al,(%rax)
    27f4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    27fa:	00 00                	add    %al,(%rax)
    27fc:	00 00                	add    %al,(%rax)
    27fe:	00 00                	add    %al,(%rax)
    2800:	35 17 18 00 01       	xor    $0x1001817,%eax
    2805:	8e 00                	mov    (%rax),%es
	...
    280f:	00 3c 17             	add    %bh,(%rdi,%rdx,1)
    2812:	18 00                	sbb    %al,(%rax)
    2814:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    281a:	00 00                	add    %al,(%rax)
    281c:	00 00                	add    %al,(%rax)
    281e:	00 00                	add    %al,(%rax)
    2820:	43 17                	rex.XB (bad) 
    2822:	18 00                	sbb    %al,(%rax)
    2824:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    282a:	00 00                	add    %al,(%rax)
    282c:	00 00                	add    %al,(%rax)
    282e:	00 00                	add    %al,(%rax)
    2830:	4a 17                	rex.WX (bad) 
    2832:	18 00                	sbb    %al,(%rax)
    2834:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    283a:	00 00                	add    %al,(%rax)
    283c:	00 00                	add    %al,(%rax)
    283e:	00 00                	add    %al,(%rax)
    2840:	51                   	push   %rcx
    2841:	17                   	(bad)  
    2842:	18 00                	sbb    %al,(%rax)
    2844:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    284a:	00 00                	add    %al,(%rax)
    284c:	00 00                	add    %al,(%rax)
    284e:	00 00                	add    %al,(%rax)
    2850:	58                   	pop    %rax
    2851:	17                   	(bad)  
    2852:	18 00                	sbb    %al,(%rax)
    2854:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    285a:	00 00                	add    %al,(%rax)
    285c:	00 00                	add    %al,(%rax)
    285e:	00 00                	add    %al,(%rax)
    2860:	5f                   	pop    %rdi
    2861:	17                   	(bad)  
    2862:	18 00                	sbb    %al,(%rax)
    2864:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    286a:	00 00                	add    %al,(%rax)
    286c:	00 00                	add    %al,(%rax)
    286e:	00 00                	add    %al,(%rax)
    2870:	66 17                	data16 (bad) 
    2872:	18 00                	sbb    %al,(%rax)
    2874:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    287a:	00 00                	add    %al,(%rax)
    287c:	00 00                	add    %al,(%rax)
    287e:	00 00                	add    %al,(%rax)
    2880:	6d                   	insl   (%dx),%es:(%rdi)
    2881:	17                   	(bad)  
    2882:	18 00                	sbb    %al,(%rax)
    2884:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    288a:	00 00                	add    %al,(%rax)
    288c:	00 00                	add    %al,(%rax)
    288e:	00 00                	add    %al,(%rax)
    2890:	74 17                	je     28a9 <_locore_end+0x8a9>
    2892:	18 00                	sbb    %al,(%rax)
    2894:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    289a:	00 00                	add    %al,(%rax)
    289c:	00 00                	add    %al,(%rax)
    289e:	00 00                	add    %al,(%rax)
    28a0:	7b 17                	jnp    28b9 <_locore_end+0x8b9>
    28a2:	18 00                	sbb    %al,(%rax)
    28a4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    28aa:	00 00                	add    %al,(%rax)
    28ac:	00 00                	add    %al,(%rax)
    28ae:	00 00                	add    %al,(%rax)
    28b0:	82                   	(bad)  
    28b1:	17                   	(bad)  
    28b2:	18 00                	sbb    %al,(%rax)
    28b4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    28ba:	00 00                	add    %al,(%rax)
    28bc:	00 00                	add    %al,(%rax)
    28be:	00 00                	add    %al,(%rax)
    28c0:	89 17                	mov    %edx,(%rdi)
    28c2:	18 00                	sbb    %al,(%rax)
    28c4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    28ca:	00 00                	add    %al,(%rax)
    28cc:	00 00                	add    %al,(%rax)
    28ce:	00 00                	add    %al,(%rax)
    28d0:	90                   	nop
    28d1:	17                   	(bad)  
    28d2:	18 00                	sbb    %al,(%rax)
    28d4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    28da:	00 00                	add    %al,(%rax)
    28dc:	00 00                	add    %al,(%rax)
    28de:	00 00                	add    %al,(%rax)
    28e0:	97                   	xchg   %eax,%edi
    28e1:	17                   	(bad)  
    28e2:	18 00                	sbb    %al,(%rax)
    28e4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    28ea:	00 00                	add    %al,(%rax)
    28ec:	00 00                	add    %al,(%rax)
    28ee:	00 00                	add    %al,(%rax)
    28f0:	9e                   	sahf   
    28f1:	17                   	(bad)  
    28f2:	18 00                	sbb    %al,(%rax)
    28f4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    28fa:	00 00                	add    %al,(%rax)
    28fc:	00 00                	add    %al,(%rax)
    28fe:	00 00                	add    %al,(%rax)
    2900:	a5                   	movsl  %ds:(%rsi),%es:(%rdi)
    2901:	17                   	(bad)  
    2902:	18 00                	sbb    %al,(%rax)
    2904:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    290a:	00 00                	add    %al,(%rax)
    290c:	00 00                	add    %al,(%rax)
    290e:	00 00                	add    %al,(%rax)
    2910:	ac                   	lods   %ds:(%rsi),%al
    2911:	17                   	(bad)  
    2912:	18 00                	sbb    %al,(%rax)
    2914:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    291a:	00 00                	add    %al,(%rax)
    291c:	00 00                	add    %al,(%rax)
    291e:	00 00                	add    %al,(%rax)
    2920:	b3 17                	mov    $0x17,%bl
    2922:	18 00                	sbb    %al,(%rax)
    2924:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    292a:	00 00                	add    %al,(%rax)
    292c:	00 00                	add    %al,(%rax)
    292e:	00 00                	add    %al,(%rax)
    2930:	ba 17 18 00 01       	mov    $0x1001817,%edx
    2935:	8e 00                	mov    (%rax),%es
	...
    293f:	00 c1                	add    %al,%cl
    2941:	17                   	(bad)  
    2942:	18 00                	sbb    %al,(%rax)
    2944:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    294a:	00 00                	add    %al,(%rax)
    294c:	00 00                	add    %al,(%rax)
    294e:	00 00                	add    %al,(%rax)
    2950:	c8 17 18 00          	enterq $0x1817,$0x0
    2954:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    295a:	00 00                	add    %al,(%rax)
    295c:	00 00                	add    %al,(%rax)
    295e:	00 00                	add    %al,(%rax)
    2960:	cf                   	iret   
    2961:	17                   	(bad)  
    2962:	18 00                	sbb    %al,(%rax)
    2964:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    296a:	00 00                	add    %al,(%rax)
    296c:	00 00                	add    %al,(%rax)
    296e:	00 00                	add    %al,(%rax)
    2970:	d6                   	(bad)  
    2971:	17                   	(bad)  
    2972:	18 00                	sbb    %al,(%rax)
    2974:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    297a:	00 00                	add    %al,(%rax)
    297c:	00 00                	add    %al,(%rax)
    297e:	00 00                	add    %al,(%rax)
    2980:	dd 17                	fstl   (%rdi)
    2982:	18 00                	sbb    %al,(%rax)
    2984:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    298a:	00 00                	add    %al,(%rax)
    298c:	00 00                	add    %al,(%rax)
    298e:	00 00                	add    %al,(%rax)
    2990:	e4 17                	in     $0x17,%al
    2992:	18 00                	sbb    %al,(%rax)
    2994:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    299a:	00 00                	add    %al,(%rax)
    299c:	00 00                	add    %al,(%rax)
    299e:	00 00                	add    %al,(%rax)
    29a0:	eb 17                	jmp    29b9 <_locore_end+0x9b9>
    29a2:	18 00                	sbb    %al,(%rax)
    29a4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    29aa:	00 00                	add    %al,(%rax)
    29ac:	00 00                	add    %al,(%rax)
    29ae:	00 00                	add    %al,(%rax)
    29b0:	f2 17                	repnz (bad) 
    29b2:	18 00                	sbb    %al,(%rax)
    29b4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    29ba:	00 00                	add    %al,(%rax)
    29bc:	00 00                	add    %al,(%rax)
    29be:	00 00                	add    %al,(%rax)
    29c0:	f9                   	stc    
    29c1:	17                   	(bad)  
    29c2:	18 00                	sbb    %al,(%rax)
    29c4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    29ca:	00 00                	add    %al,(%rax)
    29cc:	00 00                	add    %al,(%rax)
    29ce:	00 00                	add    %al,(%rax)
    29d0:	00 18                	add    %bl,(%rax)
    29d2:	18 00                	sbb    %al,(%rax)
    29d4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    29da:	00 00                	add    %al,(%rax)
    29dc:	00 00                	add    %al,(%rax)
    29de:	00 00                	add    %al,(%rax)
    29e0:	07                   	(bad)  
    29e1:	18 18                	sbb    %bl,(%rax)
    29e3:	00 01                	add    %al,(%rcx)
    29e5:	8e 00                	mov    (%rax),%es
	...
    29ef:	00 0e                	add    %cl,(%rsi)
    29f1:	18 18                	sbb    %bl,(%rax)
    29f3:	00 01                	add    %al,(%rcx)
    29f5:	8e 00                	mov    (%rax),%es
	...
    29ff:	00 15 18 18 00 01    	add    %dl,0x1001818(%rip)        # 100421d <CONFIG_KERNEL_VM_SIZE+0x80421d>
    2a05:	8e 00                	mov    (%rax),%es
	...
    2a0f:	00 1f                	add    %bl,(%rdi)
    2a11:	18 18                	sbb    %bl,(%rax)
    2a13:	00 01                	add    %al,(%rcx)
    2a15:	8e 00                	mov    (%rax),%es
	...
    2a1f:	00 29                	add    %ch,(%rcx)
    2a21:	18 18                	sbb    %bl,(%rax)
    2a23:	00 01                	add    %al,(%rcx)
    2a25:	8e 00                	mov    (%rax),%es
	...
    2a2f:	00 33                	add    %dh,(%rbx)
    2a31:	18 18                	sbb    %bl,(%rax)
    2a33:	00 01                	add    %al,(%rcx)
    2a35:	8e 00                	mov    (%rax),%es
	...
    2a3f:	00 3d 18 18 00 01    	add    %bh,0x1001818(%rip)        # 100425d <CONFIG_KERNEL_VM_SIZE+0x80425d>
    2a45:	8e 00                	mov    (%rax),%es
	...
    2a4f:	00 47 18             	add    %al,0x18(%rdi)
    2a52:	18 00                	sbb    %al,(%rax)
    2a54:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2a5a:	00 00                	add    %al,(%rax)
    2a5c:	00 00                	add    %al,(%rax)
    2a5e:	00 00                	add    %al,(%rax)
    2a60:	51                   	push   %rcx
    2a61:	18 18                	sbb    %bl,(%rax)
    2a63:	00 01                	add    %al,(%rcx)
    2a65:	8e 00                	mov    (%rax),%es
	...
    2a6f:	00 5b 18             	add    %bl,0x18(%rbx)
    2a72:	18 00                	sbb    %al,(%rax)
    2a74:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2a7a:	00 00                	add    %al,(%rax)
    2a7c:	00 00                	add    %al,(%rax)
    2a7e:	00 00                	add    %al,(%rax)
    2a80:	65 18 18             	sbb    %bl,%gs:(%rax)
    2a83:	00 01                	add    %al,(%rcx)
    2a85:	8e 00                	mov    (%rax),%es
	...
    2a8f:	00 6f 18             	add    %ch,0x18(%rdi)
    2a92:	18 00                	sbb    %al,(%rax)
    2a94:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2a9a:	00 00                	add    %al,(%rax)
    2a9c:	00 00                	add    %al,(%rax)
    2a9e:	00 00                	add    %al,(%rax)
    2aa0:	79 18                	jns    2aba <_locore_end+0xaba>
    2aa2:	18 00                	sbb    %al,(%rax)
    2aa4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2aaa:	00 00                	add    %al,(%rax)
    2aac:	00 00                	add    %al,(%rax)
    2aae:	00 00                	add    %al,(%rax)
    2ab0:	83 18 18             	sbbl   $0x18,(%rax)
    2ab3:	00 01                	add    %al,(%rcx)
    2ab5:	8e 00                	mov    (%rax),%es
	...
    2abf:	00 8d 18 18 00 01    	add    %cl,0x1001818(%rbp)
    2ac5:	8e 00                	mov    (%rax),%es
	...
    2acf:	00 97 18 18 00 01    	add    %dl,0x1001818(%rdi)
    2ad5:	8e 00                	mov    (%rax),%es
	...
    2adf:	00 a1 18 18 00 01    	add    %ah,0x1001818(%rcx)
    2ae5:	8e 00                	mov    (%rax),%es
	...
    2aef:	00 ab 18 18 00 01    	add    %ch,0x1001818(%rbx)
    2af5:	8e 00                	mov    (%rax),%es
	...
    2aff:	00 b5 18 18 00 01    	add    %dh,0x1001818(%rbp)
    2b05:	8e 00                	mov    (%rax),%es
	...
    2b0f:	00 bf 18 18 00 01    	add    %bh,0x1001818(%rdi)
    2b15:	8e 00                	mov    (%rax),%es
	...
    2b1f:	00 c9                	add    %cl,%cl
    2b21:	18 18                	sbb    %bl,(%rax)
    2b23:	00 01                	add    %al,(%rcx)
    2b25:	8e 00                	mov    (%rax),%es
	...
    2b2f:	00 d3                	add    %dl,%bl
    2b31:	18 18                	sbb    %bl,(%rax)
    2b33:	00 01                	add    %al,(%rcx)
    2b35:	8e 00                	mov    (%rax),%es
	...
    2b3f:	00 dd                	add    %bl,%ch
    2b41:	18 18                	sbb    %bl,(%rax)
    2b43:	00 01                	add    %al,(%rcx)
    2b45:	8e 00                	mov    (%rax),%es
	...
    2b4f:	00 e7                	add    %ah,%bh
    2b51:	18 18                	sbb    %bl,(%rax)
    2b53:	00 01                	add    %al,(%rcx)
    2b55:	8e 00                	mov    (%rax),%es
	...
    2b5f:	00 f1                	add    %dh,%cl
    2b61:	18 18                	sbb    %bl,(%rax)
    2b63:	00 01                	add    %al,(%rcx)
    2b65:	8e 00                	mov    (%rax),%es
	...
    2b6f:	00 fb                	add    %bh,%bl
    2b71:	18 18                	sbb    %bl,(%rax)
    2b73:	00 01                	add    %al,(%rcx)
    2b75:	8e 00                	mov    (%rax),%es
	...
    2b7f:	00 05 19 18 00 01    	add    %al,0x1001819(%rip)        # 100439e <CONFIG_KERNEL_VM_SIZE+0x80439e>
    2b85:	8e 00                	mov    (%rax),%es
	...
    2b8f:	00 0f                	add    %cl,(%rdi)
    2b91:	19 18                	sbb    %ebx,(%rax)
    2b93:	00 01                	add    %al,(%rcx)
    2b95:	8e 00                	mov    (%rax),%es
	...
    2b9f:	00 19                	add    %bl,(%rcx)
    2ba1:	19 18                	sbb    %ebx,(%rax)
    2ba3:	00 01                	add    %al,(%rcx)
    2ba5:	8e 00                	mov    (%rax),%es
	...
    2baf:	00 23                	add    %ah,(%rbx)
    2bb1:	19 18                	sbb    %ebx,(%rax)
    2bb3:	00 01                	add    %al,(%rcx)
    2bb5:	8e 00                	mov    (%rax),%es
	...
    2bbf:	00 2d 19 18 00 01    	add    %ch,0x1001819(%rip)        # 10043de <CONFIG_KERNEL_VM_SIZE+0x8043de>
    2bc5:	8e 00                	mov    (%rax),%es
	...
    2bcf:	00 37                	add    %dh,(%rdi)
    2bd1:	19 18                	sbb    %ebx,(%rax)
    2bd3:	00 01                	add    %al,(%rcx)
    2bd5:	8e 00                	mov    (%rax),%es
	...
    2bdf:	00 41 19             	add    %al,0x19(%rcx)
    2be2:	18 00                	sbb    %al,(%rax)
    2be4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2bea:	00 00                	add    %al,(%rax)
    2bec:	00 00                	add    %al,(%rax)
    2bee:	00 00                	add    %al,(%rax)
    2bf0:	4b 19 18             	rex.WXB sbb %rbx,(%r8)
    2bf3:	00 01                	add    %al,(%rcx)
    2bf5:	8e 00                	mov    (%rax),%es
	...
    2bff:	00 55 19             	add    %dl,0x19(%rbp)
    2c02:	18 00                	sbb    %al,(%rax)
    2c04:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2c0a:	00 00                	add    %al,(%rax)
    2c0c:	00 00                	add    %al,(%rax)
    2c0e:	00 00                	add    %al,(%rax)
    2c10:	5f                   	pop    %rdi
    2c11:	19 18                	sbb    %ebx,(%rax)
    2c13:	00 01                	add    %al,(%rcx)
    2c15:	8e 00                	mov    (%rax),%es
	...
    2c1f:	00 69 19             	add    %ch,0x19(%rcx)
    2c22:	18 00                	sbb    %al,(%rax)
    2c24:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2c2a:	00 00                	add    %al,(%rax)
    2c2c:	00 00                	add    %al,(%rax)
    2c2e:	00 00                	add    %al,(%rax)
    2c30:	73 19                	jae    2c4b <_locore_end+0xc4b>
    2c32:	18 00                	sbb    %al,(%rax)
    2c34:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2c3a:	00 00                	add    %al,(%rax)
    2c3c:	00 00                	add    %al,(%rax)
    2c3e:	00 00                	add    %al,(%rax)
    2c40:	7d 19                	jge    2c5b <_locore_end+0xc5b>
    2c42:	18 00                	sbb    %al,(%rax)
    2c44:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2c4a:	00 00                	add    %al,(%rax)
    2c4c:	00 00                	add    %al,(%rax)
    2c4e:	00 00                	add    %al,(%rax)
    2c50:	87 19                	xchg   %ebx,(%rcx)
    2c52:	18 00                	sbb    %al,(%rax)
    2c54:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2c5a:	00 00                	add    %al,(%rax)
    2c5c:	00 00                	add    %al,(%rax)
    2c5e:	00 00                	add    %al,(%rax)
    2c60:	91                   	xchg   %eax,%ecx
    2c61:	19 18                	sbb    %ebx,(%rax)
    2c63:	00 01                	add    %al,(%rcx)
    2c65:	8e 00                	mov    (%rax),%es
	...
    2c6f:	00 9b 19 18 00 01    	add    %bl,0x1001819(%rbx)
    2c75:	8e 00                	mov    (%rax),%es
	...
    2c7f:	00 a5 19 18 00 01    	add    %ah,0x1001819(%rbp)
    2c85:	8e 00                	mov    (%rax),%es
	...
    2c8f:	00 af 19 18 00 01    	add    %ch,0x1001819(%rdi)
    2c95:	8e 00                	mov    (%rax),%es
	...
    2c9f:	00 b9 19 18 00 01    	add    %bh,0x1001819(%rcx)
    2ca5:	8e 00                	mov    (%rax),%es
	...
    2caf:	00 c3                	add    %al,%bl
    2cb1:	19 18                	sbb    %ebx,(%rax)
    2cb3:	00 01                	add    %al,(%rcx)
    2cb5:	8e 00                	mov    (%rax),%es
	...
    2cbf:	00 cd                	add    %cl,%ch
    2cc1:	19 18                	sbb    %ebx,(%rax)
    2cc3:	00 01                	add    %al,(%rcx)
    2cc5:	8e 00                	mov    (%rax),%es
	...
    2ccf:	00 d7                	add    %dl,%bh
    2cd1:	19 18                	sbb    %ebx,(%rax)
    2cd3:	00 01                	add    %al,(%rcx)
    2cd5:	8e 00                	mov    (%rax),%es
	...
    2cdf:	00 e1                	add    %ah,%cl
    2ce1:	19 18                	sbb    %ebx,(%rax)
    2ce3:	00 01                	add    %al,(%rcx)
    2ce5:	8e 00                	mov    (%rax),%es
	...
    2cef:	00 eb                	add    %ch,%bl
    2cf1:	19 18                	sbb    %ebx,(%rax)
    2cf3:	00 01                	add    %al,(%rcx)
    2cf5:	8e 00                	mov    (%rax),%es
	...
    2cff:	00 f5                	add    %dh,%ch
    2d01:	19 18                	sbb    %ebx,(%rax)
    2d03:	00 01                	add    %al,(%rcx)
    2d05:	8e 00                	mov    (%rax),%es
	...
    2d0f:	00 ff                	add    %bh,%bh
    2d11:	19 18                	sbb    %ebx,(%rax)
    2d13:	00 01                	add    %al,(%rcx)
    2d15:	8e 00                	mov    (%rax),%es
	...
    2d1f:	00 09                	add    %cl,(%rcx)
    2d21:	1a 18                	sbb    (%rax),%bl
    2d23:	00 01                	add    %al,(%rcx)
    2d25:	8e 00                	mov    (%rax),%es
	...
    2d2f:	00 13                	add    %dl,(%rbx)
    2d31:	1a 18                	sbb    (%rax),%bl
    2d33:	00 01                	add    %al,(%rcx)
    2d35:	8e 00                	mov    (%rax),%es
	...
    2d3f:	00 1d 1a 18 00 01    	add    %bl,0x100181a(%rip)        # 100455f <CONFIG_KERNEL_VM_SIZE+0x80455f>
    2d45:	8e 00                	mov    (%rax),%es
	...
    2d4f:	00 27                	add    %ah,(%rdi)
    2d51:	1a 18                	sbb    (%rax),%bl
    2d53:	00 01                	add    %al,(%rcx)
    2d55:	8e 00                	mov    (%rax),%es
	...
    2d5f:	00 31                	add    %dh,(%rcx)
    2d61:	1a 18                	sbb    (%rax),%bl
    2d63:	00 01                	add    %al,(%rcx)
    2d65:	8e 00                	mov    (%rax),%es
	...
    2d6f:	00 3b                	add    %bh,(%rbx)
    2d71:	1a 18                	sbb    (%rax),%bl
    2d73:	00 01                	add    %al,(%rcx)
    2d75:	8e 00                	mov    (%rax),%es
	...
    2d7f:	00 45 1a             	add    %al,0x1a(%rbp)
    2d82:	18 00                	sbb    %al,(%rax)
    2d84:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2d8a:	00 00                	add    %al,(%rax)
    2d8c:	00 00                	add    %al,(%rax)
    2d8e:	00 00                	add    %al,(%rax)
    2d90:	4f 1a 18             	rex.WRXB sbb (%r8),%r11b
    2d93:	00 01                	add    %al,(%rcx)
    2d95:	8e 00                	mov    (%rax),%es
	...
    2d9f:	00 59 1a             	add    %bl,0x1a(%rcx)
    2da2:	18 00                	sbb    %al,(%rax)
    2da4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2daa:	00 00                	add    %al,(%rax)
    2dac:	00 00                	add    %al,(%rax)
    2dae:	00 00                	add    %al,(%rax)
    2db0:	63 1a                	movsxd (%rdx),%ebx
    2db2:	18 00                	sbb    %al,(%rax)
    2db4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2dba:	00 00                	add    %al,(%rax)
    2dbc:	00 00                	add    %al,(%rax)
    2dbe:	00 00                	add    %al,(%rax)
    2dc0:	6d                   	insl   (%dx),%es:(%rdi)
    2dc1:	1a 18                	sbb    (%rax),%bl
    2dc3:	00 01                	add    %al,(%rcx)
    2dc5:	8e 00                	mov    (%rax),%es
	...
    2dcf:	00 77 1a             	add    %dh,0x1a(%rdi)
    2dd2:	18 00                	sbb    %al,(%rax)
    2dd4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2dda:	00 00                	add    %al,(%rax)
    2ddc:	00 00                	add    %al,(%rax)
    2dde:	00 00                	add    %al,(%rax)
    2de0:	81 1a 18 00 01 8e    	sbbl   $0x8e010018,(%rdx)
	...
    2dee:	00 00                	add    %al,(%rax)
    2df0:	8b 1a                	mov    (%rdx),%ebx
    2df2:	18 00                	sbb    %al,(%rax)
    2df4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2dfa:	00 00                	add    %al,(%rax)
    2dfc:	00 00                	add    %al,(%rax)
    2dfe:	00 00                	add    %al,(%rax)
    2e00:	95                   	xchg   %eax,%ebp
    2e01:	1a 18                	sbb    (%rax),%bl
    2e03:	00 01                	add    %al,(%rcx)
    2e05:	8e 00                	mov    (%rax),%es
	...
    2e0f:	00 9f 1a 18 00 01    	add    %bl,0x100181a(%rdi)
    2e15:	8e 00                	mov    (%rax),%es
	...
    2e1f:	00 a9 1a 18 00 01    	add    %ch,0x100181a(%rcx)
    2e25:	8e 00                	mov    (%rax),%es
	...
    2e2f:	00 b3 1a 18 00 01    	add    %dh,0x100181a(%rbx)
    2e35:	8e 00                	mov    (%rax),%es
	...
    2e3f:	00 bd 1a 18 00 01    	add    %bh,0x100181a(%rbp)
    2e45:	8e 00                	mov    (%rax),%es
	...
    2e4f:	00 c7                	add    %al,%bh
    2e51:	1a 18                	sbb    (%rax),%bl
    2e53:	00 01                	add    %al,(%rcx)
    2e55:	8e 00                	mov    (%rax),%es
	...
    2e5f:	00 d1                	add    %dl,%cl
    2e61:	1a 18                	sbb    (%rax),%bl
    2e63:	00 01                	add    %al,(%rcx)
    2e65:	8e 00                	mov    (%rax),%es
	...
    2e6f:	00 db                	add    %bl,%bl
    2e71:	1a 18                	sbb    (%rax),%bl
    2e73:	00 01                	add    %al,(%rcx)
    2e75:	8e 00                	mov    (%rax),%es
	...
    2e7f:	00 e5                	add    %ah,%ch
    2e81:	1a 18                	sbb    (%rax),%bl
    2e83:	00 01                	add    %al,(%rcx)
    2e85:	8e 00                	mov    (%rax),%es
	...
    2e8f:	00 ef                	add    %ch,%bh
    2e91:	1a 18                	sbb    (%rax),%bl
    2e93:	00 01                	add    %al,(%rcx)
    2e95:	8e 00                	mov    (%rax),%es
	...
    2e9f:	00 f9                	add    %bh,%cl
    2ea1:	1a 18                	sbb    (%rax),%bl
    2ea3:	00 01                	add    %al,(%rcx)
    2ea5:	8e 00                	mov    (%rax),%es
	...
    2eaf:	00 03                	add    %al,(%rbx)
    2eb1:	1b 18                	sbb    (%rax),%ebx
    2eb3:	00 01                	add    %al,(%rcx)
    2eb5:	8e 00                	mov    (%rax),%es
	...
    2ebf:	00 0d 1b 18 00 01    	add    %cl,0x100181b(%rip)        # 10046e0 <CONFIG_KERNEL_VM_SIZE+0x8046e0>
    2ec5:	8e 00                	mov    (%rax),%es
	...
    2ecf:	00 17                	add    %dl,(%rdi)
    2ed1:	1b 18                	sbb    (%rax),%ebx
    2ed3:	00 01                	add    %al,(%rcx)
    2ed5:	8e 00                	mov    (%rax),%es
	...
    2edf:	00 21                	add    %ah,(%rcx)
    2ee1:	1b 18                	sbb    (%rax),%ebx
    2ee3:	00 01                	add    %al,(%rcx)
    2ee5:	8e 00                	mov    (%rax),%es
	...
    2eef:	00 2b                	add    %ch,(%rbx)
    2ef1:	1b 18                	sbb    (%rax),%ebx
    2ef3:	00 01                	add    %al,(%rcx)
    2ef5:	8e 00                	mov    (%rax),%es
	...
    2eff:	00 35 1b 18 00 01    	add    %dh,0x100181b(%rip)        # 1004720 <CONFIG_KERNEL_VM_SIZE+0x804720>
    2f05:	8e 00                	mov    (%rax),%es
	...
    2f0f:	00 3f                	add    %bh,(%rdi)
    2f11:	1b 18                	sbb    (%rax),%ebx
    2f13:	00 01                	add    %al,(%rcx)
    2f15:	8e 00                	mov    (%rax),%es
	...
    2f1f:	00 49 1b             	add    %cl,0x1b(%rcx)
    2f22:	18 00                	sbb    %al,(%rax)
    2f24:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2f2a:	00 00                	add    %al,(%rax)
    2f2c:	00 00                	add    %al,(%rax)
    2f2e:	00 00                	add    %al,(%rax)
    2f30:	53                   	push   %rbx
    2f31:	1b 18                	sbb    (%rax),%ebx
    2f33:	00 01                	add    %al,(%rcx)
    2f35:	8e 00                	mov    (%rax),%es
	...
    2f3f:	00 5d 1b             	add    %bl,0x1b(%rbp)
    2f42:	18 00                	sbb    %al,(%rax)
    2f44:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2f4a:	00 00                	add    %al,(%rax)
    2f4c:	00 00                	add    %al,(%rax)
    2f4e:	00 00                	add    %al,(%rax)
    2f50:	67 1b 18             	sbb    (%eax),%ebx
    2f53:	00 01                	add    %al,(%rcx)
    2f55:	8e 00                	mov    (%rax),%es
	...
    2f5f:	00 71 1b             	add    %dh,0x1b(%rcx)
    2f62:	18 00                	sbb    %al,(%rax)
    2f64:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2f6a:	00 00                	add    %al,(%rax)
    2f6c:	00 00                	add    %al,(%rax)
    2f6e:	00 00                	add    %al,(%rax)
    2f70:	7b 1b                	jnp    2f8d <_locore_end+0xf8d>
    2f72:	18 00                	sbb    %al,(%rax)
    2f74:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2f7a:	00 00                	add    %al,(%rax)
    2f7c:	00 00                	add    %al,(%rax)
    2f7e:	00 00                	add    %al,(%rax)
    2f80:	85 1b                	test   %ebx,(%rbx)
    2f82:	18 00                	sbb    %al,(%rax)
    2f84:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2f8a:	00 00                	add    %al,(%rax)
    2f8c:	00 00                	add    %al,(%rax)
    2f8e:	00 00                	add    %al,(%rax)
    2f90:	8f                   	(bad)  
    2f91:	1b 18                	sbb    (%rax),%ebx
    2f93:	00 01                	add    %al,(%rcx)
    2f95:	8e 00                	mov    (%rax),%es
	...
    2f9f:	00 99 1b 18 00 01    	add    %bl,0x100181b(%rcx)
    2fa5:	8e 00                	mov    (%rax),%es
	...
    2faf:	00 a3 1b 18 00 01    	add    %ah,0x100181b(%rbx)
    2fb5:	8e 00                	mov    (%rax),%es
	...
    2fbf:	00 ad 1b 18 00 01    	add    %ch,0x100181b(%rbp)
    2fc5:	8e 00                	mov    (%rax),%es
	...
    2fcf:	00 b7 1b 18 00 01    	add    %dh,0x100181b(%rdi)
    2fd5:	8e 00                	mov    (%rax),%es
	...
    2fdf:	00 c1                	add    %al,%cl
    2fe1:	1b 18                	sbb    (%rax),%ebx
    2fe3:	00 01                	add    %al,(%rcx)
    2fe5:	8e 00                	mov    (%rax),%es
	...
    2fef:	00 cb                	add    %cl,%bl
    2ff1:	1b 18                	sbb    (%rax),%ebx
    2ff3:	00 01                	add    %al,(%rcx)
    2ff5:	8e 00                	mov    (%rax),%es
	...

0000000000003000 <idt48>:
    3000:	ff 0f                	decl   (%rdi)
    3002:	00 20                	add    %ah,(%rax)
	...

0000000000003006 <idt80>:
    3006:	ff 0f                	decl   (%rdi)
    3008:	00 20                	add    %ah,(%rax)
    300a:	00 00                	add    %al,(%rax)
    300c:	00 00                	add    %al,(%rax)
    300e:	00 00                	add    %al,(%rax)
    3010:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3017:	00 00 00 
    301a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3021:	00 00 00 
    3024:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    302b:	00 00 00 
    302e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3035:	00 00 00 
    3038:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    303f:	00 00 00 
    3042:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3049:	00 00 00 
    304c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3053:	00 00 00 
    3056:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    305d:	00 00 00 
    3060:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3067:	00 00 00 
    306a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3071:	00 00 00 
    3074:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    307b:	00 00 00 
    307e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3085:	00 00 00 
    3088:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    308f:	00 00 00 
    3092:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3099:	00 00 00 
    309c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    30a3:	00 00 00 
    30a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    30ad:	00 00 00 
    30b0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    30b7:	00 00 00 
    30ba:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    30c1:	00 00 00 
    30c4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    30cb:	00 00 00 
    30ce:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    30d5:	00 00 00 
    30d8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    30df:	00 00 00 
    30e2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    30e9:	00 00 00 
    30ec:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    30f3:	00 00 00 
    30f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    30fd:	00 00 00 
    3100:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3107:	00 00 00 
    310a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3111:	00 00 00 
    3114:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    311b:	00 00 00 
    311e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3125:	00 00 00 
    3128:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    312f:	00 00 00 
    3132:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3139:	00 00 00 
    313c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3143:	00 00 00 
    3146:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    314d:	00 00 00 
    3150:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3157:	00 00 00 
    315a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3161:	00 00 00 
    3164:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    316b:	00 00 00 
    316e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3175:	00 00 00 
    3178:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    317f:	00 00 00 
    3182:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3189:	00 00 00 
    318c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3193:	00 00 00 
    3196:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    319d:	00 00 00 
    31a0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    31a7:	00 00 00 
    31aa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    31b1:	00 00 00 
    31b4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    31bb:	00 00 00 
    31be:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    31c5:	00 00 00 
    31c8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    31cf:	00 00 00 
    31d2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    31d9:	00 00 00 
    31dc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    31e3:	00 00 00 
    31e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    31ed:	00 00 00 
    31f0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    31f7:	00 00 00 
    31fa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3201:	00 00 00 
    3204:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    320b:	00 00 00 
    320e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3215:	00 00 00 
    3218:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    321f:	00 00 00 
    3222:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3229:	00 00 00 
    322c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3233:	00 00 00 
    3236:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    323d:	00 00 00 
    3240:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3247:	00 00 00 
    324a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3251:	00 00 00 
    3254:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    325b:	00 00 00 
    325e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3265:	00 00 00 
    3268:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    326f:	00 00 00 
    3272:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3279:	00 00 00 
    327c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3283:	00 00 00 
    3286:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    328d:	00 00 00 
    3290:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3297:	00 00 00 
    329a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    32a1:	00 00 00 
    32a4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    32ab:	00 00 00 
    32ae:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    32b5:	00 00 00 
    32b8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    32bf:	00 00 00 
    32c2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    32c9:	00 00 00 
    32cc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    32d3:	00 00 00 
    32d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    32dd:	00 00 00 
    32e0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    32e7:	00 00 00 
    32ea:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    32f1:	00 00 00 
    32f4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    32fb:	00 00 00 
    32fe:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3305:	00 00 00 
    3308:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    330f:	00 00 00 
    3312:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3319:	00 00 00 
    331c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3323:	00 00 00 
    3326:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    332d:	00 00 00 
    3330:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3337:	00 00 00 
    333a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3341:	00 00 00 
    3344:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    334b:	00 00 00 
    334e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3355:	00 00 00 
    3358:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    335f:	00 00 00 
    3362:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3369:	00 00 00 
    336c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3373:	00 00 00 
    3376:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    337d:	00 00 00 
    3380:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3387:	00 00 00 
    338a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3391:	00 00 00 
    3394:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    339b:	00 00 00 
    339e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    33a5:	00 00 00 
    33a8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    33af:	00 00 00 
    33b2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    33b9:	00 00 00 
    33bc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    33c3:	00 00 00 
    33c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    33cd:	00 00 00 
    33d0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    33d7:	00 00 00 
    33da:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    33e1:	00 00 00 
    33e4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    33eb:	00 00 00 
    33ee:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    33f5:	00 00 00 
    33f8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    33ff:	00 00 00 
    3402:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3409:	00 00 00 
    340c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3413:	00 00 00 
    3416:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    341d:	00 00 00 
    3420:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3427:	00 00 00 
    342a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3431:	00 00 00 
    3434:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    343b:	00 00 00 
    343e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3445:	00 00 00 
    3448:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    344f:	00 00 00 
    3452:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3459:	00 00 00 
    345c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3463:	00 00 00 
    3466:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    346d:	00 00 00 
    3470:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3477:	00 00 00 
    347a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3481:	00 00 00 
    3484:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    348b:	00 00 00 
    348e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3495:	00 00 00 
    3498:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    349f:	00 00 00 
    34a2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    34a9:	00 00 00 
    34ac:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    34b3:	00 00 00 
    34b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    34bd:	00 00 00 
    34c0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    34c7:	00 00 00 
    34ca:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    34d1:	00 00 00 
    34d4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    34db:	00 00 00 
    34de:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    34e5:	00 00 00 
    34e8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    34ef:	00 00 00 
    34f2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    34f9:	00 00 00 
    34fc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3503:	00 00 00 
    3506:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    350d:	00 00 00 
    3510:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3517:	00 00 00 
    351a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3521:	00 00 00 
    3524:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    352b:	00 00 00 
    352e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3535:	00 00 00 
    3538:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    353f:	00 00 00 
    3542:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3549:	00 00 00 
    354c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3553:	00 00 00 
    3556:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    355d:	00 00 00 
    3560:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3567:	00 00 00 
    356a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3571:	00 00 00 
    3574:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    357b:	00 00 00 
    357e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3585:	00 00 00 
    3588:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    358f:	00 00 00 
    3592:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3599:	00 00 00 
    359c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    35a3:	00 00 00 
    35a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    35ad:	00 00 00 
    35b0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    35b7:	00 00 00 
    35ba:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    35c1:	00 00 00 
    35c4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    35cb:	00 00 00 
    35ce:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    35d5:	00 00 00 
    35d8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    35df:	00 00 00 
    35e2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    35e9:	00 00 00 
    35ec:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    35f3:	00 00 00 
    35f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    35fd:	00 00 00 
    3600:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3607:	00 00 00 
    360a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3611:	00 00 00 
    3614:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    361b:	00 00 00 
    361e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3625:	00 00 00 
    3628:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    362f:	00 00 00 
    3632:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3639:	00 00 00 
    363c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3643:	00 00 00 
    3646:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    364d:	00 00 00 
    3650:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3657:	00 00 00 
    365a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3661:	00 00 00 
    3664:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    366b:	00 00 00 
    366e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3675:	00 00 00 
    3678:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    367f:	00 00 00 
    3682:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3689:	00 00 00 
    368c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3693:	00 00 00 
    3696:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    369d:	00 00 00 
    36a0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    36a7:	00 00 00 
    36aa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    36b1:	00 00 00 
    36b4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    36bb:	00 00 00 
    36be:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    36c5:	00 00 00 
    36c8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    36cf:	00 00 00 
    36d2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    36d9:	00 00 00 
    36dc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    36e3:	00 00 00 
    36e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    36ed:	00 00 00 
    36f0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    36f7:	00 00 00 
    36fa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3701:	00 00 00 
    3704:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    370b:	00 00 00 
    370e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3715:	00 00 00 
    3718:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    371f:	00 00 00 
    3722:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3729:	00 00 00 
    372c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3733:	00 00 00 
    3736:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    373d:	00 00 00 
    3740:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3747:	00 00 00 
    374a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3751:	00 00 00 
    3754:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    375b:	00 00 00 
    375e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3765:	00 00 00 
    3768:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    376f:	00 00 00 
    3772:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3779:	00 00 00 
    377c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3783:	00 00 00 
    3786:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    378d:	00 00 00 
    3790:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3797:	00 00 00 
    379a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    37a1:	00 00 00 
    37a4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    37ab:	00 00 00 
    37ae:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    37b5:	00 00 00 
    37b8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    37bf:	00 00 00 
    37c2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    37c9:	00 00 00 
    37cc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    37d3:	00 00 00 
    37d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    37dd:	00 00 00 
    37e0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    37e7:	00 00 00 
    37ea:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    37f1:	00 00 00 
    37f4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    37fb:	00 00 00 
    37fe:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3805:	00 00 00 
    3808:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    380f:	00 00 00 
    3812:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3819:	00 00 00 
    381c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3823:	00 00 00 
    3826:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    382d:	00 00 00 
    3830:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3837:	00 00 00 
    383a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3841:	00 00 00 
    3844:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    384b:	00 00 00 
    384e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3855:	00 00 00 
    3858:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    385f:	00 00 00 
    3862:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3869:	00 00 00 
    386c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3873:	00 00 00 
    3876:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    387d:	00 00 00 
    3880:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3887:	00 00 00 
    388a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3891:	00 00 00 
    3894:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    389b:	00 00 00 
    389e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    38a5:	00 00 00 
    38a8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    38af:	00 00 00 
    38b2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    38b9:	00 00 00 
    38bc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    38c3:	00 00 00 
    38c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    38cd:	00 00 00 
    38d0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    38d7:	00 00 00 
    38da:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    38e1:	00 00 00 
    38e4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    38eb:	00 00 00 
    38ee:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    38f5:	00 00 00 
    38f8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    38ff:	00 00 00 
    3902:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3909:	00 00 00 
    390c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3913:	00 00 00 
    3916:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    391d:	00 00 00 
    3920:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3927:	00 00 00 
    392a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3931:	00 00 00 
    3934:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    393b:	00 00 00 
    393e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3945:	00 00 00 
    3948:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    394f:	00 00 00 
    3952:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3959:	00 00 00 
    395c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3963:	00 00 00 
    3966:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    396d:	00 00 00 
    3970:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3977:	00 00 00 
    397a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3981:	00 00 00 
    3984:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    398b:	00 00 00 
    398e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3995:	00 00 00 
    3998:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    399f:	00 00 00 
    39a2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    39a9:	00 00 00 
    39ac:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    39b3:	00 00 00 
    39b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    39bd:	00 00 00 
    39c0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    39c7:	00 00 00 
    39ca:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    39d1:	00 00 00 
    39d4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    39db:	00 00 00 
    39de:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    39e5:	00 00 00 
    39e8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    39ef:	00 00 00 
    39f2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    39f9:	00 00 00 
    39fc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3a03:	00 00 00 
    3a06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3a0d:	00 00 00 
    3a10:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3a17:	00 00 00 
    3a1a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3a21:	00 00 00 
    3a24:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3a2b:	00 00 00 
    3a2e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3a35:	00 00 00 
    3a38:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3a3f:	00 00 00 
    3a42:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3a49:	00 00 00 
    3a4c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3a53:	00 00 00 
    3a56:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3a5d:	00 00 00 
    3a60:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3a67:	00 00 00 
    3a6a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3a71:	00 00 00 
    3a74:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3a7b:	00 00 00 
    3a7e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3a85:	00 00 00 
    3a88:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3a8f:	00 00 00 
    3a92:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3a99:	00 00 00 
    3a9c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3aa3:	00 00 00 
    3aa6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3aad:	00 00 00 
    3ab0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3ab7:	00 00 00 
    3aba:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3ac1:	00 00 00 
    3ac4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3acb:	00 00 00 
    3ace:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3ad5:	00 00 00 
    3ad8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3adf:	00 00 00 
    3ae2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3ae9:	00 00 00 
    3aec:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3af3:	00 00 00 
    3af6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3afd:	00 00 00 
    3b00:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3b07:	00 00 00 
    3b0a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3b11:	00 00 00 
    3b14:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3b1b:	00 00 00 
    3b1e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3b25:	00 00 00 
    3b28:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3b2f:	00 00 00 
    3b32:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3b39:	00 00 00 
    3b3c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3b43:	00 00 00 
    3b46:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3b4d:	00 00 00 
    3b50:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3b57:	00 00 00 
    3b5a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3b61:	00 00 00 
    3b64:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3b6b:	00 00 00 
    3b6e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3b75:	00 00 00 
    3b78:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3b7f:	00 00 00 
    3b82:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3b89:	00 00 00 
    3b8c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3b93:	00 00 00 
    3b96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3b9d:	00 00 00 
    3ba0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3ba7:	00 00 00 
    3baa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3bb1:	00 00 00 
    3bb4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3bbb:	00 00 00 
    3bbe:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3bc5:	00 00 00 
    3bc8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3bcf:	00 00 00 
    3bd2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3bd9:	00 00 00 
    3bdc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3be3:	00 00 00 
    3be6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3bed:	00 00 00 
    3bf0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3bf7:	00 00 00 
    3bfa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3c01:	00 00 00 
    3c04:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3c0b:	00 00 00 
    3c0e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3c15:	00 00 00 
    3c18:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3c1f:	00 00 00 
    3c22:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3c29:	00 00 00 
    3c2c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3c33:	00 00 00 
    3c36:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3c3d:	00 00 00 
    3c40:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3c47:	00 00 00 
    3c4a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3c51:	00 00 00 
    3c54:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3c5b:	00 00 00 
    3c5e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3c65:	00 00 00 
    3c68:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3c6f:	00 00 00 
    3c72:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3c79:	00 00 00 
    3c7c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3c83:	00 00 00 
    3c86:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3c8d:	00 00 00 
    3c90:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3c97:	00 00 00 
    3c9a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3ca1:	00 00 00 
    3ca4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3cab:	00 00 00 
    3cae:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3cb5:	00 00 00 
    3cb8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3cbf:	00 00 00 
    3cc2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3cc9:	00 00 00 
    3ccc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3cd3:	00 00 00 
    3cd6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3cdd:	00 00 00 
    3ce0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3ce7:	00 00 00 
    3cea:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3cf1:	00 00 00 
    3cf4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3cfb:	00 00 00 
    3cfe:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3d05:	00 00 00 
    3d08:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3d0f:	00 00 00 
    3d12:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3d19:	00 00 00 
    3d1c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3d23:	00 00 00 
    3d26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3d2d:	00 00 00 
    3d30:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3d37:	00 00 00 
    3d3a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3d41:	00 00 00 
    3d44:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3d4b:	00 00 00 
    3d4e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3d55:	00 00 00 
    3d58:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3d5f:	00 00 00 
    3d62:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3d69:	00 00 00 
    3d6c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3d73:	00 00 00 
    3d76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3d7d:	00 00 00 
    3d80:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3d87:	00 00 00 
    3d8a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3d91:	00 00 00 
    3d94:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3d9b:	00 00 00 
    3d9e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3da5:	00 00 00 
    3da8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3daf:	00 00 00 
    3db2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3db9:	00 00 00 
    3dbc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3dc3:	00 00 00 
    3dc6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3dcd:	00 00 00 
    3dd0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3dd7:	00 00 00 
    3dda:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3de1:	00 00 00 
    3de4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3deb:	00 00 00 
    3dee:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3df5:	00 00 00 
    3df8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3dff:	00 00 00 
    3e02:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3e09:	00 00 00 
    3e0c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3e13:	00 00 00 
    3e16:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3e1d:	00 00 00 
    3e20:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3e27:	00 00 00 
    3e2a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3e31:	00 00 00 
    3e34:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3e3b:	00 00 00 
    3e3e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3e45:	00 00 00 
    3e48:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3e4f:	00 00 00 
    3e52:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3e59:	00 00 00 
    3e5c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3e63:	00 00 00 
    3e66:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3e6d:	00 00 00 
    3e70:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3e77:	00 00 00 
    3e7a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3e81:	00 00 00 
    3e84:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3e8b:	00 00 00 
    3e8e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3e95:	00 00 00 
    3e98:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3e9f:	00 00 00 
    3ea2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3ea9:	00 00 00 
    3eac:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3eb3:	00 00 00 
    3eb6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3ebd:	00 00 00 
    3ec0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3ec7:	00 00 00 
    3eca:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3ed1:	00 00 00 
    3ed4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3edb:	00 00 00 
    3ede:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3ee5:	00 00 00 
    3ee8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3eef:	00 00 00 
    3ef2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3ef9:	00 00 00 
    3efc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3f03:	00 00 00 
    3f06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3f0d:	00 00 00 
    3f10:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3f17:	00 00 00 
    3f1a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3f21:	00 00 00 
    3f24:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3f2b:	00 00 00 
    3f2e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3f35:	00 00 00 
    3f38:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3f3f:	00 00 00 
    3f42:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3f49:	00 00 00 
    3f4c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3f53:	00 00 00 
    3f56:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3f5d:	00 00 00 
    3f60:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3f67:	00 00 00 
    3f6a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3f71:	00 00 00 
    3f74:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3f7b:	00 00 00 
    3f7e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3f85:	00 00 00 
    3f88:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3f8f:	00 00 00 
    3f92:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3f99:	00 00 00 
    3f9c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3fa3:	00 00 00 
    3fa6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3fad:	00 00 00 
    3fb0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3fb7:	00 00 00 
    3fba:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3fc1:	00 00 00 
    3fc4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3fcb:	00 00 00 
    3fce:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3fd5:	00 00 00 
    3fd8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3fdf:	00 00 00 
    3fe2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3fe9:	00 00 00 
    3fec:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3ff3:	00 00 00 
    3ff6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3ffd:	00 00 00 

0000000000004000 <_lodata_start>:
    4000:	aa                   	stos   %al,%es:(%rdi)
    4001:	aa                   	stos   %al,%es:(%rdi)
    4002:	aa                   	stos   %al,%es:(%rdi)
    4003:	aa                   	stos   %al,%es:(%rdi)
    4004:	aa                   	stos   %al,%es:(%rdi)
    4005:	aa                   	stos   %al,%es:(%rdi)
    4006:	aa                   	stos   %al,%es:(%rdi)
    4007:	aa                   	stos   %al,%es:(%rdi)
    4008:	aa                   	stos   %al,%es:(%rdi)
    4009:	aa                   	stos   %al,%es:(%rdi)
    400a:	aa                   	stos   %al,%es:(%rdi)
    400b:	aa                   	stos   %al,%es:(%rdi)
    400c:	aa                   	stos   %al,%es:(%rdi)
    400d:	aa                   	stos   %al,%es:(%rdi)
    400e:	aa                   	stos   %al,%es:(%rdi)
    400f:	aa                   	stos   %al,%es:(%rdi)
    4010:	aa                   	stos   %al,%es:(%rdi)
    4011:	aa                   	stos   %al,%es:(%rdi)
    4012:	aa                   	stos   %al,%es:(%rdi)
    4013:	aa                   	stos   %al,%es:(%rdi)
    4014:	aa                   	stos   %al,%es:(%rdi)
    4015:	aa                   	stos   %al,%es:(%rdi)
    4016:	aa                   	stos   %al,%es:(%rdi)
    4017:	aa                   	stos   %al,%es:(%rdi)
    4018:	aa                   	stos   %al,%es:(%rdi)
    4019:	aa                   	stos   %al,%es:(%rdi)
    401a:	aa                   	stos   %al,%es:(%rdi)
    401b:	aa                   	stos   %al,%es:(%rdi)
    401c:	aa                   	stos   %al,%es:(%rdi)
    401d:	aa                   	stos   %al,%es:(%rdi)
    401e:	aa                   	stos   %al,%es:(%rdi)
    401f:	aa                   	stos   %al,%es:(%rdi)
    4020:	aa                   	stos   %al,%es:(%rdi)
    4021:	aa                   	stos   %al,%es:(%rdi)
    4022:	aa                   	stos   %al,%es:(%rdi)
    4023:	aa                   	stos   %al,%es:(%rdi)
    4024:	aa                   	stos   %al,%es:(%rdi)
    4025:	aa                   	stos   %al,%es:(%rdi)
    4026:	aa                   	stos   %al,%es:(%rdi)
    4027:	aa                   	stos   %al,%es:(%rdi)
    4028:	aa                   	stos   %al,%es:(%rdi)
    4029:	aa                   	stos   %al,%es:(%rdi)
    402a:	aa                   	stos   %al,%es:(%rdi)
    402b:	aa                   	stos   %al,%es:(%rdi)
    402c:	aa                   	stos   %al,%es:(%rdi)
    402d:	aa                   	stos   %al,%es:(%rdi)
    402e:	aa                   	stos   %al,%es:(%rdi)
    402f:	aa                   	stos   %al,%es:(%rdi)
    4030:	aa                   	stos   %al,%es:(%rdi)
    4031:	aa                   	stos   %al,%es:(%rdi)
    4032:	aa                   	stos   %al,%es:(%rdi)
    4033:	aa                   	stos   %al,%es:(%rdi)
    4034:	aa                   	stos   %al,%es:(%rdi)
    4035:	aa                   	stos   %al,%es:(%rdi)
    4036:	aa                   	stos   %al,%es:(%rdi)
    4037:	aa                   	stos   %al,%es:(%rdi)
    4038:	aa                   	stos   %al,%es:(%rdi)
    4039:	aa                   	stos   %al,%es:(%rdi)
    403a:	aa                   	stos   %al,%es:(%rdi)
    403b:	aa                   	stos   %al,%es:(%rdi)
    403c:	aa                   	stos   %al,%es:(%rdi)
    403d:	aa                   	stos   %al,%es:(%rdi)
    403e:	aa                   	stos   %al,%es:(%rdi)
    403f:	aa                   	stos   %al,%es:(%rdi)
    4040:	aa                   	stos   %al,%es:(%rdi)
    4041:	aa                   	stos   %al,%es:(%rdi)
    4042:	aa                   	stos   %al,%es:(%rdi)
    4043:	aa                   	stos   %al,%es:(%rdi)
    4044:	aa                   	stos   %al,%es:(%rdi)
    4045:	aa                   	stos   %al,%es:(%rdi)
    4046:	aa                   	stos   %al,%es:(%rdi)
    4047:	aa                   	stos   %al,%es:(%rdi)
    4048:	aa                   	stos   %al,%es:(%rdi)
    4049:	aa                   	stos   %al,%es:(%rdi)
    404a:	aa                   	stos   %al,%es:(%rdi)
    404b:	aa                   	stos   %al,%es:(%rdi)
    404c:	aa                   	stos   %al,%es:(%rdi)
    404d:	aa                   	stos   %al,%es:(%rdi)
    404e:	aa                   	stos   %al,%es:(%rdi)
    404f:	aa                   	stos   %al,%es:(%rdi)
    4050:	aa                   	stos   %al,%es:(%rdi)
    4051:	aa                   	stos   %al,%es:(%rdi)
    4052:	aa                   	stos   %al,%es:(%rdi)
    4053:	aa                   	stos   %al,%es:(%rdi)
    4054:	aa                   	stos   %al,%es:(%rdi)
    4055:	aa                   	stos   %al,%es:(%rdi)
    4056:	aa                   	stos   %al,%es:(%rdi)
    4057:	aa                   	stos   %al,%es:(%rdi)
    4058:	aa                   	stos   %al,%es:(%rdi)
    4059:	aa                   	stos   %al,%es:(%rdi)
    405a:	aa                   	stos   %al,%es:(%rdi)
    405b:	aa                   	stos   %al,%es:(%rdi)
    405c:	aa                   	stos   %al,%es:(%rdi)
    405d:	aa                   	stos   %al,%es:(%rdi)
    405e:	aa                   	stos   %al,%es:(%rdi)
    405f:	aa                   	stos   %al,%es:(%rdi)
    4060:	aa                   	stos   %al,%es:(%rdi)
    4061:	aa                   	stos   %al,%es:(%rdi)
    4062:	aa                   	stos   %al,%es:(%rdi)
    4063:	aa                   	stos   %al,%es:(%rdi)
    4064:	aa                   	stos   %al,%es:(%rdi)
    4065:	aa                   	stos   %al,%es:(%rdi)
    4066:	aa                   	stos   %al,%es:(%rdi)
    4067:	aa                   	stos   %al,%es:(%rdi)
    4068:	aa                   	stos   %al,%es:(%rdi)
    4069:	aa                   	stos   %al,%es:(%rdi)
    406a:	aa                   	stos   %al,%es:(%rdi)
    406b:	aa                   	stos   %al,%es:(%rdi)
    406c:	aa                   	stos   %al,%es:(%rdi)
    406d:	aa                   	stos   %al,%es:(%rdi)
    406e:	aa                   	stos   %al,%es:(%rdi)
    406f:	aa                   	stos   %al,%es:(%rdi)
    4070:	aa                   	stos   %al,%es:(%rdi)
    4071:	aa                   	stos   %al,%es:(%rdi)
    4072:	aa                   	stos   %al,%es:(%rdi)
    4073:	aa                   	stos   %al,%es:(%rdi)
    4074:	aa                   	stos   %al,%es:(%rdi)
    4075:	aa                   	stos   %al,%es:(%rdi)
    4076:	aa                   	stos   %al,%es:(%rdi)
    4077:	aa                   	stos   %al,%es:(%rdi)
    4078:	aa                   	stos   %al,%es:(%rdi)
    4079:	aa                   	stos   %al,%es:(%rdi)
    407a:	aa                   	stos   %al,%es:(%rdi)
    407b:	aa                   	stos   %al,%es:(%rdi)
    407c:	aa                   	stos   %al,%es:(%rdi)
    407d:	aa                   	stos   %al,%es:(%rdi)
    407e:	aa                   	stos   %al,%es:(%rdi)
    407f:	aa                   	stos   %al,%es:(%rdi)
    4080:	aa                   	stos   %al,%es:(%rdi)
    4081:	aa                   	stos   %al,%es:(%rdi)
    4082:	aa                   	stos   %al,%es:(%rdi)
    4083:	aa                   	stos   %al,%es:(%rdi)
    4084:	aa                   	stos   %al,%es:(%rdi)
    4085:	aa                   	stos   %al,%es:(%rdi)
    4086:	aa                   	stos   %al,%es:(%rdi)
    4087:	aa                   	stos   %al,%es:(%rdi)
    4088:	aa                   	stos   %al,%es:(%rdi)
    4089:	aa                   	stos   %al,%es:(%rdi)
    408a:	aa                   	stos   %al,%es:(%rdi)
    408b:	aa                   	stos   %al,%es:(%rdi)
    408c:	aa                   	stos   %al,%es:(%rdi)
    408d:	aa                   	stos   %al,%es:(%rdi)
    408e:	aa                   	stos   %al,%es:(%rdi)
    408f:	aa                   	stos   %al,%es:(%rdi)
    4090:	aa                   	stos   %al,%es:(%rdi)
    4091:	aa                   	stos   %al,%es:(%rdi)
    4092:	aa                   	stos   %al,%es:(%rdi)
    4093:	aa                   	stos   %al,%es:(%rdi)
    4094:	aa                   	stos   %al,%es:(%rdi)
    4095:	aa                   	stos   %al,%es:(%rdi)
    4096:	aa                   	stos   %al,%es:(%rdi)
    4097:	aa                   	stos   %al,%es:(%rdi)
    4098:	aa                   	stos   %al,%es:(%rdi)
    4099:	aa                   	stos   %al,%es:(%rdi)
    409a:	aa                   	stos   %al,%es:(%rdi)
    409b:	aa                   	stos   %al,%es:(%rdi)
    409c:	aa                   	stos   %al,%es:(%rdi)
    409d:	aa                   	stos   %al,%es:(%rdi)
    409e:	aa                   	stos   %al,%es:(%rdi)
    409f:	aa                   	stos   %al,%es:(%rdi)
    40a0:	aa                   	stos   %al,%es:(%rdi)
    40a1:	aa                   	stos   %al,%es:(%rdi)
    40a2:	aa                   	stos   %al,%es:(%rdi)
    40a3:	aa                   	stos   %al,%es:(%rdi)
    40a4:	aa                   	stos   %al,%es:(%rdi)
    40a5:	aa                   	stos   %al,%es:(%rdi)
    40a6:	aa                   	stos   %al,%es:(%rdi)
    40a7:	aa                   	stos   %al,%es:(%rdi)
    40a8:	aa                   	stos   %al,%es:(%rdi)
    40a9:	aa                   	stos   %al,%es:(%rdi)
    40aa:	aa                   	stos   %al,%es:(%rdi)
    40ab:	aa                   	stos   %al,%es:(%rdi)
    40ac:	aa                   	stos   %al,%es:(%rdi)
    40ad:	aa                   	stos   %al,%es:(%rdi)
    40ae:	aa                   	stos   %al,%es:(%rdi)
    40af:	aa                   	stos   %al,%es:(%rdi)
    40b0:	aa                   	stos   %al,%es:(%rdi)
    40b1:	aa                   	stos   %al,%es:(%rdi)
    40b2:	aa                   	stos   %al,%es:(%rdi)
    40b3:	aa                   	stos   %al,%es:(%rdi)
    40b4:	aa                   	stos   %al,%es:(%rdi)
    40b5:	aa                   	stos   %al,%es:(%rdi)
    40b6:	aa                   	stos   %al,%es:(%rdi)
    40b7:	aa                   	stos   %al,%es:(%rdi)
    40b8:	aa                   	stos   %al,%es:(%rdi)
    40b9:	aa                   	stos   %al,%es:(%rdi)
    40ba:	aa                   	stos   %al,%es:(%rdi)
    40bb:	aa                   	stos   %al,%es:(%rdi)
    40bc:	aa                   	stos   %al,%es:(%rdi)
    40bd:	aa                   	stos   %al,%es:(%rdi)
    40be:	aa                   	stos   %al,%es:(%rdi)
    40bf:	aa                   	stos   %al,%es:(%rdi)
    40c0:	aa                   	stos   %al,%es:(%rdi)
    40c1:	aa                   	stos   %al,%es:(%rdi)
    40c2:	aa                   	stos   %al,%es:(%rdi)
    40c3:	aa                   	stos   %al,%es:(%rdi)
    40c4:	aa                   	stos   %al,%es:(%rdi)
    40c5:	aa                   	stos   %al,%es:(%rdi)
    40c6:	aa                   	stos   %al,%es:(%rdi)
    40c7:	aa                   	stos   %al,%es:(%rdi)
    40c8:	aa                   	stos   %al,%es:(%rdi)
    40c9:	aa                   	stos   %al,%es:(%rdi)
    40ca:	aa                   	stos   %al,%es:(%rdi)
    40cb:	aa                   	stos   %al,%es:(%rdi)
    40cc:	aa                   	stos   %al,%es:(%rdi)
    40cd:	aa                   	stos   %al,%es:(%rdi)
    40ce:	aa                   	stos   %al,%es:(%rdi)
    40cf:	aa                   	stos   %al,%es:(%rdi)
    40d0:	aa                   	stos   %al,%es:(%rdi)
    40d1:	aa                   	stos   %al,%es:(%rdi)
    40d2:	aa                   	stos   %al,%es:(%rdi)
    40d3:	aa                   	stos   %al,%es:(%rdi)
    40d4:	aa                   	stos   %al,%es:(%rdi)
    40d5:	aa                   	stos   %al,%es:(%rdi)
    40d6:	aa                   	stos   %al,%es:(%rdi)
    40d7:	aa                   	stos   %al,%es:(%rdi)
    40d8:	aa                   	stos   %al,%es:(%rdi)
    40d9:	aa                   	stos   %al,%es:(%rdi)
    40da:	aa                   	stos   %al,%es:(%rdi)
    40db:	aa                   	stos   %al,%es:(%rdi)
    40dc:	aa                   	stos   %al,%es:(%rdi)
    40dd:	aa                   	stos   %al,%es:(%rdi)
    40de:	aa                   	stos   %al,%es:(%rdi)
    40df:	aa                   	stos   %al,%es:(%rdi)
    40e0:	aa                   	stos   %al,%es:(%rdi)
    40e1:	aa                   	stos   %al,%es:(%rdi)
    40e2:	aa                   	stos   %al,%es:(%rdi)
    40e3:	aa                   	stos   %al,%es:(%rdi)
    40e4:	aa                   	stos   %al,%es:(%rdi)
    40e5:	aa                   	stos   %al,%es:(%rdi)
    40e6:	aa                   	stos   %al,%es:(%rdi)
    40e7:	aa                   	stos   %al,%es:(%rdi)
    40e8:	aa                   	stos   %al,%es:(%rdi)
    40e9:	aa                   	stos   %al,%es:(%rdi)
    40ea:	aa                   	stos   %al,%es:(%rdi)
    40eb:	aa                   	stos   %al,%es:(%rdi)
    40ec:	aa                   	stos   %al,%es:(%rdi)
    40ed:	aa                   	stos   %al,%es:(%rdi)
    40ee:	aa                   	stos   %al,%es:(%rdi)
    40ef:	aa                   	stos   %al,%es:(%rdi)
    40f0:	aa                   	stos   %al,%es:(%rdi)
    40f1:	aa                   	stos   %al,%es:(%rdi)
    40f2:	aa                   	stos   %al,%es:(%rdi)
    40f3:	aa                   	stos   %al,%es:(%rdi)
    40f4:	aa                   	stos   %al,%es:(%rdi)
    40f5:	aa                   	stos   %al,%es:(%rdi)
    40f6:	aa                   	stos   %al,%es:(%rdi)
    40f7:	aa                   	stos   %al,%es:(%rdi)
    40f8:	aa                   	stos   %al,%es:(%rdi)
    40f9:	aa                   	stos   %al,%es:(%rdi)
    40fa:	aa                   	stos   %al,%es:(%rdi)
    40fb:	aa                   	stos   %al,%es:(%rdi)
    40fc:	aa                   	stos   %al,%es:(%rdi)
    40fd:	aa                   	stos   %al,%es:(%rdi)
    40fe:	aa                   	stos   %al,%es:(%rdi)
    40ff:	aa                   	stos   %al,%es:(%rdi)
    4100:	aa                   	stos   %al,%es:(%rdi)
    4101:	aa                   	stos   %al,%es:(%rdi)
    4102:	aa                   	stos   %al,%es:(%rdi)
    4103:	aa                   	stos   %al,%es:(%rdi)
    4104:	aa                   	stos   %al,%es:(%rdi)
    4105:	aa                   	stos   %al,%es:(%rdi)
    4106:	aa                   	stos   %al,%es:(%rdi)
    4107:	aa                   	stos   %al,%es:(%rdi)
    4108:	aa                   	stos   %al,%es:(%rdi)
    4109:	aa                   	stos   %al,%es:(%rdi)
    410a:	aa                   	stos   %al,%es:(%rdi)
    410b:	aa                   	stos   %al,%es:(%rdi)
    410c:	aa                   	stos   %al,%es:(%rdi)
    410d:	aa                   	stos   %al,%es:(%rdi)
    410e:	aa                   	stos   %al,%es:(%rdi)
    410f:	aa                   	stos   %al,%es:(%rdi)
    4110:	aa                   	stos   %al,%es:(%rdi)
    4111:	aa                   	stos   %al,%es:(%rdi)
    4112:	aa                   	stos   %al,%es:(%rdi)
    4113:	aa                   	stos   %al,%es:(%rdi)
    4114:	aa                   	stos   %al,%es:(%rdi)
    4115:	aa                   	stos   %al,%es:(%rdi)
    4116:	aa                   	stos   %al,%es:(%rdi)
    4117:	aa                   	stos   %al,%es:(%rdi)
    4118:	aa                   	stos   %al,%es:(%rdi)
    4119:	aa                   	stos   %al,%es:(%rdi)
    411a:	aa                   	stos   %al,%es:(%rdi)
    411b:	aa                   	stos   %al,%es:(%rdi)
    411c:	aa                   	stos   %al,%es:(%rdi)
    411d:	aa                   	stos   %al,%es:(%rdi)
    411e:	aa                   	stos   %al,%es:(%rdi)
    411f:	aa                   	stos   %al,%es:(%rdi)
    4120:	aa                   	stos   %al,%es:(%rdi)
    4121:	aa                   	stos   %al,%es:(%rdi)
    4122:	aa                   	stos   %al,%es:(%rdi)
    4123:	aa                   	stos   %al,%es:(%rdi)
    4124:	aa                   	stos   %al,%es:(%rdi)
    4125:	aa                   	stos   %al,%es:(%rdi)
    4126:	aa                   	stos   %al,%es:(%rdi)
    4127:	aa                   	stos   %al,%es:(%rdi)
    4128:	aa                   	stos   %al,%es:(%rdi)
    4129:	aa                   	stos   %al,%es:(%rdi)
    412a:	aa                   	stos   %al,%es:(%rdi)
    412b:	aa                   	stos   %al,%es:(%rdi)
    412c:	aa                   	stos   %al,%es:(%rdi)
    412d:	aa                   	stos   %al,%es:(%rdi)
    412e:	aa                   	stos   %al,%es:(%rdi)
    412f:	aa                   	stos   %al,%es:(%rdi)
    4130:	aa                   	stos   %al,%es:(%rdi)
    4131:	aa                   	stos   %al,%es:(%rdi)
    4132:	aa                   	stos   %al,%es:(%rdi)
    4133:	aa                   	stos   %al,%es:(%rdi)
    4134:	aa                   	stos   %al,%es:(%rdi)
    4135:	aa                   	stos   %al,%es:(%rdi)
    4136:	aa                   	stos   %al,%es:(%rdi)
    4137:	aa                   	stos   %al,%es:(%rdi)
    4138:	aa                   	stos   %al,%es:(%rdi)
    4139:	aa                   	stos   %al,%es:(%rdi)
    413a:	aa                   	stos   %al,%es:(%rdi)
    413b:	aa                   	stos   %al,%es:(%rdi)
    413c:	aa                   	stos   %al,%es:(%rdi)
    413d:	aa                   	stos   %al,%es:(%rdi)
    413e:	aa                   	stos   %al,%es:(%rdi)
    413f:	aa                   	stos   %al,%es:(%rdi)
    4140:	aa                   	stos   %al,%es:(%rdi)
    4141:	aa                   	stos   %al,%es:(%rdi)
    4142:	aa                   	stos   %al,%es:(%rdi)
    4143:	aa                   	stos   %al,%es:(%rdi)
    4144:	aa                   	stos   %al,%es:(%rdi)
    4145:	aa                   	stos   %al,%es:(%rdi)
    4146:	aa                   	stos   %al,%es:(%rdi)
    4147:	aa                   	stos   %al,%es:(%rdi)
    4148:	aa                   	stos   %al,%es:(%rdi)
    4149:	aa                   	stos   %al,%es:(%rdi)
    414a:	aa                   	stos   %al,%es:(%rdi)
    414b:	aa                   	stos   %al,%es:(%rdi)
    414c:	aa                   	stos   %al,%es:(%rdi)
    414d:	aa                   	stos   %al,%es:(%rdi)
    414e:	aa                   	stos   %al,%es:(%rdi)
    414f:	aa                   	stos   %al,%es:(%rdi)
    4150:	aa                   	stos   %al,%es:(%rdi)
    4151:	aa                   	stos   %al,%es:(%rdi)
    4152:	aa                   	stos   %al,%es:(%rdi)
    4153:	aa                   	stos   %al,%es:(%rdi)
    4154:	aa                   	stos   %al,%es:(%rdi)
    4155:	aa                   	stos   %al,%es:(%rdi)
    4156:	aa                   	stos   %al,%es:(%rdi)
    4157:	aa                   	stos   %al,%es:(%rdi)
    4158:	aa                   	stos   %al,%es:(%rdi)
    4159:	aa                   	stos   %al,%es:(%rdi)
    415a:	aa                   	stos   %al,%es:(%rdi)
    415b:	aa                   	stos   %al,%es:(%rdi)
    415c:	aa                   	stos   %al,%es:(%rdi)
    415d:	aa                   	stos   %al,%es:(%rdi)
    415e:	aa                   	stos   %al,%es:(%rdi)
    415f:	aa                   	stos   %al,%es:(%rdi)
    4160:	aa                   	stos   %al,%es:(%rdi)
    4161:	aa                   	stos   %al,%es:(%rdi)
    4162:	aa                   	stos   %al,%es:(%rdi)
    4163:	aa                   	stos   %al,%es:(%rdi)
    4164:	aa                   	stos   %al,%es:(%rdi)
    4165:	aa                   	stos   %al,%es:(%rdi)
    4166:	aa                   	stos   %al,%es:(%rdi)
    4167:	aa                   	stos   %al,%es:(%rdi)
    4168:	aa                   	stos   %al,%es:(%rdi)
    4169:	aa                   	stos   %al,%es:(%rdi)
    416a:	aa                   	stos   %al,%es:(%rdi)
    416b:	aa                   	stos   %al,%es:(%rdi)
    416c:	aa                   	stos   %al,%es:(%rdi)
    416d:	aa                   	stos   %al,%es:(%rdi)
    416e:	aa                   	stos   %al,%es:(%rdi)
    416f:	aa                   	stos   %al,%es:(%rdi)
    4170:	aa                   	stos   %al,%es:(%rdi)
    4171:	aa                   	stos   %al,%es:(%rdi)
    4172:	aa                   	stos   %al,%es:(%rdi)
    4173:	aa                   	stos   %al,%es:(%rdi)
    4174:	aa                   	stos   %al,%es:(%rdi)
    4175:	aa                   	stos   %al,%es:(%rdi)
    4176:	aa                   	stos   %al,%es:(%rdi)
    4177:	aa                   	stos   %al,%es:(%rdi)
    4178:	aa                   	stos   %al,%es:(%rdi)
    4179:	aa                   	stos   %al,%es:(%rdi)
    417a:	aa                   	stos   %al,%es:(%rdi)
    417b:	aa                   	stos   %al,%es:(%rdi)
    417c:	aa                   	stos   %al,%es:(%rdi)
    417d:	aa                   	stos   %al,%es:(%rdi)
    417e:	aa                   	stos   %al,%es:(%rdi)
    417f:	aa                   	stos   %al,%es:(%rdi)
    4180:	aa                   	stos   %al,%es:(%rdi)
    4181:	aa                   	stos   %al,%es:(%rdi)
    4182:	aa                   	stos   %al,%es:(%rdi)
    4183:	aa                   	stos   %al,%es:(%rdi)
    4184:	aa                   	stos   %al,%es:(%rdi)
    4185:	aa                   	stos   %al,%es:(%rdi)
    4186:	aa                   	stos   %al,%es:(%rdi)
    4187:	aa                   	stos   %al,%es:(%rdi)
    4188:	aa                   	stos   %al,%es:(%rdi)
    4189:	aa                   	stos   %al,%es:(%rdi)
    418a:	aa                   	stos   %al,%es:(%rdi)
    418b:	aa                   	stos   %al,%es:(%rdi)
    418c:	aa                   	stos   %al,%es:(%rdi)
    418d:	aa                   	stos   %al,%es:(%rdi)
    418e:	aa                   	stos   %al,%es:(%rdi)
    418f:	aa                   	stos   %al,%es:(%rdi)
    4190:	aa                   	stos   %al,%es:(%rdi)
    4191:	aa                   	stos   %al,%es:(%rdi)
    4192:	aa                   	stos   %al,%es:(%rdi)
    4193:	aa                   	stos   %al,%es:(%rdi)
    4194:	aa                   	stos   %al,%es:(%rdi)
    4195:	aa                   	stos   %al,%es:(%rdi)
    4196:	aa                   	stos   %al,%es:(%rdi)
    4197:	aa                   	stos   %al,%es:(%rdi)
    4198:	aa                   	stos   %al,%es:(%rdi)
    4199:	aa                   	stos   %al,%es:(%rdi)
    419a:	aa                   	stos   %al,%es:(%rdi)
    419b:	aa                   	stos   %al,%es:(%rdi)
    419c:	aa                   	stos   %al,%es:(%rdi)
    419d:	aa                   	stos   %al,%es:(%rdi)
    419e:	aa                   	stos   %al,%es:(%rdi)
    419f:	aa                   	stos   %al,%es:(%rdi)
    41a0:	aa                   	stos   %al,%es:(%rdi)
    41a1:	aa                   	stos   %al,%es:(%rdi)
    41a2:	aa                   	stos   %al,%es:(%rdi)
    41a3:	aa                   	stos   %al,%es:(%rdi)
    41a4:	aa                   	stos   %al,%es:(%rdi)
    41a5:	aa                   	stos   %al,%es:(%rdi)
    41a6:	aa                   	stos   %al,%es:(%rdi)
    41a7:	aa                   	stos   %al,%es:(%rdi)
    41a8:	aa                   	stos   %al,%es:(%rdi)
    41a9:	aa                   	stos   %al,%es:(%rdi)
    41aa:	aa                   	stos   %al,%es:(%rdi)
    41ab:	aa                   	stos   %al,%es:(%rdi)
    41ac:	aa                   	stos   %al,%es:(%rdi)
    41ad:	aa                   	stos   %al,%es:(%rdi)
    41ae:	aa                   	stos   %al,%es:(%rdi)
    41af:	aa                   	stos   %al,%es:(%rdi)
    41b0:	aa                   	stos   %al,%es:(%rdi)
    41b1:	aa                   	stos   %al,%es:(%rdi)
    41b2:	aa                   	stos   %al,%es:(%rdi)
    41b3:	aa                   	stos   %al,%es:(%rdi)
    41b4:	aa                   	stos   %al,%es:(%rdi)
    41b5:	aa                   	stos   %al,%es:(%rdi)
    41b6:	aa                   	stos   %al,%es:(%rdi)
    41b7:	aa                   	stos   %al,%es:(%rdi)
    41b8:	aa                   	stos   %al,%es:(%rdi)
    41b9:	aa                   	stos   %al,%es:(%rdi)
    41ba:	aa                   	stos   %al,%es:(%rdi)
    41bb:	aa                   	stos   %al,%es:(%rdi)
    41bc:	aa                   	stos   %al,%es:(%rdi)
    41bd:	aa                   	stos   %al,%es:(%rdi)
    41be:	aa                   	stos   %al,%es:(%rdi)
    41bf:	aa                   	stos   %al,%es:(%rdi)
    41c0:	aa                   	stos   %al,%es:(%rdi)
    41c1:	aa                   	stos   %al,%es:(%rdi)
    41c2:	aa                   	stos   %al,%es:(%rdi)
    41c3:	aa                   	stos   %al,%es:(%rdi)
    41c4:	aa                   	stos   %al,%es:(%rdi)
    41c5:	aa                   	stos   %al,%es:(%rdi)
    41c6:	aa                   	stos   %al,%es:(%rdi)
    41c7:	aa                   	stos   %al,%es:(%rdi)
    41c8:	aa                   	stos   %al,%es:(%rdi)
    41c9:	aa                   	stos   %al,%es:(%rdi)
    41ca:	aa                   	stos   %al,%es:(%rdi)
    41cb:	aa                   	stos   %al,%es:(%rdi)
    41cc:	aa                   	stos   %al,%es:(%rdi)
    41cd:	aa                   	stos   %al,%es:(%rdi)
    41ce:	aa                   	stos   %al,%es:(%rdi)
    41cf:	aa                   	stos   %al,%es:(%rdi)
    41d0:	aa                   	stos   %al,%es:(%rdi)
    41d1:	aa                   	stos   %al,%es:(%rdi)
    41d2:	aa                   	stos   %al,%es:(%rdi)
    41d3:	aa                   	stos   %al,%es:(%rdi)
    41d4:	aa                   	stos   %al,%es:(%rdi)
    41d5:	aa                   	stos   %al,%es:(%rdi)
    41d6:	aa                   	stos   %al,%es:(%rdi)
    41d7:	aa                   	stos   %al,%es:(%rdi)
    41d8:	aa                   	stos   %al,%es:(%rdi)
    41d9:	aa                   	stos   %al,%es:(%rdi)
    41da:	aa                   	stos   %al,%es:(%rdi)
    41db:	aa                   	stos   %al,%es:(%rdi)
    41dc:	aa                   	stos   %al,%es:(%rdi)
    41dd:	aa                   	stos   %al,%es:(%rdi)
    41de:	aa                   	stos   %al,%es:(%rdi)
    41df:	aa                   	stos   %al,%es:(%rdi)
    41e0:	aa                   	stos   %al,%es:(%rdi)
    41e1:	aa                   	stos   %al,%es:(%rdi)
    41e2:	aa                   	stos   %al,%es:(%rdi)
    41e3:	aa                   	stos   %al,%es:(%rdi)
    41e4:	aa                   	stos   %al,%es:(%rdi)
    41e5:	aa                   	stos   %al,%es:(%rdi)
    41e6:	aa                   	stos   %al,%es:(%rdi)
    41e7:	aa                   	stos   %al,%es:(%rdi)
    41e8:	aa                   	stos   %al,%es:(%rdi)
    41e9:	aa                   	stos   %al,%es:(%rdi)
    41ea:	aa                   	stos   %al,%es:(%rdi)
    41eb:	aa                   	stos   %al,%es:(%rdi)
    41ec:	aa                   	stos   %al,%es:(%rdi)
    41ed:	aa                   	stos   %al,%es:(%rdi)
    41ee:	aa                   	stos   %al,%es:(%rdi)
    41ef:	aa                   	stos   %al,%es:(%rdi)
    41f0:	aa                   	stos   %al,%es:(%rdi)
    41f1:	aa                   	stos   %al,%es:(%rdi)
    41f2:	aa                   	stos   %al,%es:(%rdi)
    41f3:	aa                   	stos   %al,%es:(%rdi)
    41f4:	aa                   	stos   %al,%es:(%rdi)
    41f5:	aa                   	stos   %al,%es:(%rdi)
    41f6:	aa                   	stos   %al,%es:(%rdi)
    41f7:	aa                   	stos   %al,%es:(%rdi)
    41f8:	aa                   	stos   %al,%es:(%rdi)
    41f9:	aa                   	stos   %al,%es:(%rdi)
    41fa:	aa                   	stos   %al,%es:(%rdi)
    41fb:	aa                   	stos   %al,%es:(%rdi)
    41fc:	aa                   	stos   %al,%es:(%rdi)
    41fd:	aa                   	stos   %al,%es:(%rdi)
    41fe:	aa                   	stos   %al,%es:(%rdi)
    41ff:	aa                   	stos   %al,%es:(%rdi)
    4200:	aa                   	stos   %al,%es:(%rdi)
    4201:	aa                   	stos   %al,%es:(%rdi)
    4202:	aa                   	stos   %al,%es:(%rdi)
    4203:	aa                   	stos   %al,%es:(%rdi)
    4204:	aa                   	stos   %al,%es:(%rdi)
    4205:	aa                   	stos   %al,%es:(%rdi)
    4206:	aa                   	stos   %al,%es:(%rdi)
    4207:	aa                   	stos   %al,%es:(%rdi)
    4208:	aa                   	stos   %al,%es:(%rdi)
    4209:	aa                   	stos   %al,%es:(%rdi)
    420a:	aa                   	stos   %al,%es:(%rdi)
    420b:	aa                   	stos   %al,%es:(%rdi)
    420c:	aa                   	stos   %al,%es:(%rdi)
    420d:	aa                   	stos   %al,%es:(%rdi)
    420e:	aa                   	stos   %al,%es:(%rdi)
    420f:	aa                   	stos   %al,%es:(%rdi)
    4210:	aa                   	stos   %al,%es:(%rdi)
    4211:	aa                   	stos   %al,%es:(%rdi)
    4212:	aa                   	stos   %al,%es:(%rdi)
    4213:	aa                   	stos   %al,%es:(%rdi)
    4214:	aa                   	stos   %al,%es:(%rdi)
    4215:	aa                   	stos   %al,%es:(%rdi)
    4216:	aa                   	stos   %al,%es:(%rdi)
    4217:	aa                   	stos   %al,%es:(%rdi)
    4218:	aa                   	stos   %al,%es:(%rdi)
    4219:	aa                   	stos   %al,%es:(%rdi)
    421a:	aa                   	stos   %al,%es:(%rdi)
    421b:	aa                   	stos   %al,%es:(%rdi)
    421c:	aa                   	stos   %al,%es:(%rdi)
    421d:	aa                   	stos   %al,%es:(%rdi)
    421e:	aa                   	stos   %al,%es:(%rdi)
    421f:	aa                   	stos   %al,%es:(%rdi)
    4220:	aa                   	stos   %al,%es:(%rdi)
    4221:	aa                   	stos   %al,%es:(%rdi)
    4222:	aa                   	stos   %al,%es:(%rdi)
    4223:	aa                   	stos   %al,%es:(%rdi)
    4224:	aa                   	stos   %al,%es:(%rdi)
    4225:	aa                   	stos   %al,%es:(%rdi)
    4226:	aa                   	stos   %al,%es:(%rdi)
    4227:	aa                   	stos   %al,%es:(%rdi)
    4228:	aa                   	stos   %al,%es:(%rdi)
    4229:	aa                   	stos   %al,%es:(%rdi)
    422a:	aa                   	stos   %al,%es:(%rdi)
    422b:	aa                   	stos   %al,%es:(%rdi)
    422c:	aa                   	stos   %al,%es:(%rdi)
    422d:	aa                   	stos   %al,%es:(%rdi)
    422e:	aa                   	stos   %al,%es:(%rdi)
    422f:	aa                   	stos   %al,%es:(%rdi)
    4230:	aa                   	stos   %al,%es:(%rdi)
    4231:	aa                   	stos   %al,%es:(%rdi)
    4232:	aa                   	stos   %al,%es:(%rdi)
    4233:	aa                   	stos   %al,%es:(%rdi)
    4234:	aa                   	stos   %al,%es:(%rdi)
    4235:	aa                   	stos   %al,%es:(%rdi)
    4236:	aa                   	stos   %al,%es:(%rdi)
    4237:	aa                   	stos   %al,%es:(%rdi)
    4238:	aa                   	stos   %al,%es:(%rdi)
    4239:	aa                   	stos   %al,%es:(%rdi)
    423a:	aa                   	stos   %al,%es:(%rdi)
    423b:	aa                   	stos   %al,%es:(%rdi)
    423c:	aa                   	stos   %al,%es:(%rdi)
    423d:	aa                   	stos   %al,%es:(%rdi)
    423e:	aa                   	stos   %al,%es:(%rdi)
    423f:	aa                   	stos   %al,%es:(%rdi)
    4240:	aa                   	stos   %al,%es:(%rdi)
    4241:	aa                   	stos   %al,%es:(%rdi)
    4242:	aa                   	stos   %al,%es:(%rdi)
    4243:	aa                   	stos   %al,%es:(%rdi)
    4244:	aa                   	stos   %al,%es:(%rdi)
    4245:	aa                   	stos   %al,%es:(%rdi)
    4246:	aa                   	stos   %al,%es:(%rdi)
    4247:	aa                   	stos   %al,%es:(%rdi)
    4248:	aa                   	stos   %al,%es:(%rdi)
    4249:	aa                   	stos   %al,%es:(%rdi)
    424a:	aa                   	stos   %al,%es:(%rdi)
    424b:	aa                   	stos   %al,%es:(%rdi)
    424c:	aa                   	stos   %al,%es:(%rdi)
    424d:	aa                   	stos   %al,%es:(%rdi)
    424e:	aa                   	stos   %al,%es:(%rdi)
    424f:	aa                   	stos   %al,%es:(%rdi)
    4250:	aa                   	stos   %al,%es:(%rdi)
    4251:	aa                   	stos   %al,%es:(%rdi)
    4252:	aa                   	stos   %al,%es:(%rdi)
    4253:	aa                   	stos   %al,%es:(%rdi)
    4254:	aa                   	stos   %al,%es:(%rdi)
    4255:	aa                   	stos   %al,%es:(%rdi)
    4256:	aa                   	stos   %al,%es:(%rdi)
    4257:	aa                   	stos   %al,%es:(%rdi)
    4258:	aa                   	stos   %al,%es:(%rdi)
    4259:	aa                   	stos   %al,%es:(%rdi)
    425a:	aa                   	stos   %al,%es:(%rdi)
    425b:	aa                   	stos   %al,%es:(%rdi)
    425c:	aa                   	stos   %al,%es:(%rdi)
    425d:	aa                   	stos   %al,%es:(%rdi)
    425e:	aa                   	stos   %al,%es:(%rdi)
    425f:	aa                   	stos   %al,%es:(%rdi)
    4260:	aa                   	stos   %al,%es:(%rdi)
    4261:	aa                   	stos   %al,%es:(%rdi)
    4262:	aa                   	stos   %al,%es:(%rdi)
    4263:	aa                   	stos   %al,%es:(%rdi)
    4264:	aa                   	stos   %al,%es:(%rdi)
    4265:	aa                   	stos   %al,%es:(%rdi)
    4266:	aa                   	stos   %al,%es:(%rdi)
    4267:	aa                   	stos   %al,%es:(%rdi)
    4268:	aa                   	stos   %al,%es:(%rdi)
    4269:	aa                   	stos   %al,%es:(%rdi)
    426a:	aa                   	stos   %al,%es:(%rdi)
    426b:	aa                   	stos   %al,%es:(%rdi)
    426c:	aa                   	stos   %al,%es:(%rdi)
    426d:	aa                   	stos   %al,%es:(%rdi)
    426e:	aa                   	stos   %al,%es:(%rdi)
    426f:	aa                   	stos   %al,%es:(%rdi)
    4270:	aa                   	stos   %al,%es:(%rdi)
    4271:	aa                   	stos   %al,%es:(%rdi)
    4272:	aa                   	stos   %al,%es:(%rdi)
    4273:	aa                   	stos   %al,%es:(%rdi)
    4274:	aa                   	stos   %al,%es:(%rdi)
    4275:	aa                   	stos   %al,%es:(%rdi)
    4276:	aa                   	stos   %al,%es:(%rdi)
    4277:	aa                   	stos   %al,%es:(%rdi)
    4278:	aa                   	stos   %al,%es:(%rdi)
    4279:	aa                   	stos   %al,%es:(%rdi)
    427a:	aa                   	stos   %al,%es:(%rdi)
    427b:	aa                   	stos   %al,%es:(%rdi)
    427c:	aa                   	stos   %al,%es:(%rdi)
    427d:	aa                   	stos   %al,%es:(%rdi)
    427e:	aa                   	stos   %al,%es:(%rdi)
    427f:	aa                   	stos   %al,%es:(%rdi)
    4280:	aa                   	stos   %al,%es:(%rdi)
    4281:	aa                   	stos   %al,%es:(%rdi)
    4282:	aa                   	stos   %al,%es:(%rdi)
    4283:	aa                   	stos   %al,%es:(%rdi)
    4284:	aa                   	stos   %al,%es:(%rdi)
    4285:	aa                   	stos   %al,%es:(%rdi)
    4286:	aa                   	stos   %al,%es:(%rdi)
    4287:	aa                   	stos   %al,%es:(%rdi)
    4288:	aa                   	stos   %al,%es:(%rdi)
    4289:	aa                   	stos   %al,%es:(%rdi)
    428a:	aa                   	stos   %al,%es:(%rdi)
    428b:	aa                   	stos   %al,%es:(%rdi)
    428c:	aa                   	stos   %al,%es:(%rdi)
    428d:	aa                   	stos   %al,%es:(%rdi)
    428e:	aa                   	stos   %al,%es:(%rdi)
    428f:	aa                   	stos   %al,%es:(%rdi)
    4290:	aa                   	stos   %al,%es:(%rdi)
    4291:	aa                   	stos   %al,%es:(%rdi)
    4292:	aa                   	stos   %al,%es:(%rdi)
    4293:	aa                   	stos   %al,%es:(%rdi)
    4294:	aa                   	stos   %al,%es:(%rdi)
    4295:	aa                   	stos   %al,%es:(%rdi)
    4296:	aa                   	stos   %al,%es:(%rdi)
    4297:	aa                   	stos   %al,%es:(%rdi)
    4298:	aa                   	stos   %al,%es:(%rdi)
    4299:	aa                   	stos   %al,%es:(%rdi)
    429a:	aa                   	stos   %al,%es:(%rdi)
    429b:	aa                   	stos   %al,%es:(%rdi)
    429c:	aa                   	stos   %al,%es:(%rdi)
    429d:	aa                   	stos   %al,%es:(%rdi)
    429e:	aa                   	stos   %al,%es:(%rdi)
    429f:	aa                   	stos   %al,%es:(%rdi)
    42a0:	aa                   	stos   %al,%es:(%rdi)
    42a1:	aa                   	stos   %al,%es:(%rdi)
    42a2:	aa                   	stos   %al,%es:(%rdi)
    42a3:	aa                   	stos   %al,%es:(%rdi)
    42a4:	aa                   	stos   %al,%es:(%rdi)
    42a5:	aa                   	stos   %al,%es:(%rdi)
    42a6:	aa                   	stos   %al,%es:(%rdi)
    42a7:	aa                   	stos   %al,%es:(%rdi)
    42a8:	aa                   	stos   %al,%es:(%rdi)
    42a9:	aa                   	stos   %al,%es:(%rdi)
    42aa:	aa                   	stos   %al,%es:(%rdi)
    42ab:	aa                   	stos   %al,%es:(%rdi)
    42ac:	aa                   	stos   %al,%es:(%rdi)
    42ad:	aa                   	stos   %al,%es:(%rdi)
    42ae:	aa                   	stos   %al,%es:(%rdi)
    42af:	aa                   	stos   %al,%es:(%rdi)
    42b0:	aa                   	stos   %al,%es:(%rdi)
    42b1:	aa                   	stos   %al,%es:(%rdi)
    42b2:	aa                   	stos   %al,%es:(%rdi)
    42b3:	aa                   	stos   %al,%es:(%rdi)
    42b4:	aa                   	stos   %al,%es:(%rdi)
    42b5:	aa                   	stos   %al,%es:(%rdi)
    42b6:	aa                   	stos   %al,%es:(%rdi)
    42b7:	aa                   	stos   %al,%es:(%rdi)
    42b8:	aa                   	stos   %al,%es:(%rdi)
    42b9:	aa                   	stos   %al,%es:(%rdi)
    42ba:	aa                   	stos   %al,%es:(%rdi)
    42bb:	aa                   	stos   %al,%es:(%rdi)
    42bc:	aa                   	stos   %al,%es:(%rdi)
    42bd:	aa                   	stos   %al,%es:(%rdi)
    42be:	aa                   	stos   %al,%es:(%rdi)
    42bf:	aa                   	stos   %al,%es:(%rdi)
    42c0:	aa                   	stos   %al,%es:(%rdi)
    42c1:	aa                   	stos   %al,%es:(%rdi)
    42c2:	aa                   	stos   %al,%es:(%rdi)
    42c3:	aa                   	stos   %al,%es:(%rdi)
    42c4:	aa                   	stos   %al,%es:(%rdi)
    42c5:	aa                   	stos   %al,%es:(%rdi)
    42c6:	aa                   	stos   %al,%es:(%rdi)
    42c7:	aa                   	stos   %al,%es:(%rdi)
    42c8:	aa                   	stos   %al,%es:(%rdi)
    42c9:	aa                   	stos   %al,%es:(%rdi)
    42ca:	aa                   	stos   %al,%es:(%rdi)
    42cb:	aa                   	stos   %al,%es:(%rdi)
    42cc:	aa                   	stos   %al,%es:(%rdi)
    42cd:	aa                   	stos   %al,%es:(%rdi)
    42ce:	aa                   	stos   %al,%es:(%rdi)
    42cf:	aa                   	stos   %al,%es:(%rdi)
    42d0:	aa                   	stos   %al,%es:(%rdi)
    42d1:	aa                   	stos   %al,%es:(%rdi)
    42d2:	aa                   	stos   %al,%es:(%rdi)
    42d3:	aa                   	stos   %al,%es:(%rdi)
    42d4:	aa                   	stos   %al,%es:(%rdi)
    42d5:	aa                   	stos   %al,%es:(%rdi)
    42d6:	aa                   	stos   %al,%es:(%rdi)
    42d7:	aa                   	stos   %al,%es:(%rdi)
    42d8:	aa                   	stos   %al,%es:(%rdi)
    42d9:	aa                   	stos   %al,%es:(%rdi)
    42da:	aa                   	stos   %al,%es:(%rdi)
    42db:	aa                   	stos   %al,%es:(%rdi)
    42dc:	aa                   	stos   %al,%es:(%rdi)
    42dd:	aa                   	stos   %al,%es:(%rdi)
    42de:	aa                   	stos   %al,%es:(%rdi)
    42df:	aa                   	stos   %al,%es:(%rdi)
    42e0:	aa                   	stos   %al,%es:(%rdi)
    42e1:	aa                   	stos   %al,%es:(%rdi)
    42e2:	aa                   	stos   %al,%es:(%rdi)
    42e3:	aa                   	stos   %al,%es:(%rdi)
    42e4:	aa                   	stos   %al,%es:(%rdi)
    42e5:	aa                   	stos   %al,%es:(%rdi)
    42e6:	aa                   	stos   %al,%es:(%rdi)
    42e7:	aa                   	stos   %al,%es:(%rdi)
    42e8:	aa                   	stos   %al,%es:(%rdi)
    42e9:	aa                   	stos   %al,%es:(%rdi)
    42ea:	aa                   	stos   %al,%es:(%rdi)
    42eb:	aa                   	stos   %al,%es:(%rdi)
    42ec:	aa                   	stos   %al,%es:(%rdi)
    42ed:	aa                   	stos   %al,%es:(%rdi)
    42ee:	aa                   	stos   %al,%es:(%rdi)
    42ef:	aa                   	stos   %al,%es:(%rdi)
    42f0:	aa                   	stos   %al,%es:(%rdi)
    42f1:	aa                   	stos   %al,%es:(%rdi)
    42f2:	aa                   	stos   %al,%es:(%rdi)
    42f3:	aa                   	stos   %al,%es:(%rdi)
    42f4:	aa                   	stos   %al,%es:(%rdi)
    42f5:	aa                   	stos   %al,%es:(%rdi)
    42f6:	aa                   	stos   %al,%es:(%rdi)
    42f7:	aa                   	stos   %al,%es:(%rdi)
    42f8:	aa                   	stos   %al,%es:(%rdi)
    42f9:	aa                   	stos   %al,%es:(%rdi)
    42fa:	aa                   	stos   %al,%es:(%rdi)
    42fb:	aa                   	stos   %al,%es:(%rdi)
    42fc:	aa                   	stos   %al,%es:(%rdi)
    42fd:	aa                   	stos   %al,%es:(%rdi)
    42fe:	aa                   	stos   %al,%es:(%rdi)
    42ff:	aa                   	stos   %al,%es:(%rdi)
    4300:	aa                   	stos   %al,%es:(%rdi)
    4301:	aa                   	stos   %al,%es:(%rdi)
    4302:	aa                   	stos   %al,%es:(%rdi)
    4303:	aa                   	stos   %al,%es:(%rdi)
    4304:	aa                   	stos   %al,%es:(%rdi)
    4305:	aa                   	stos   %al,%es:(%rdi)
    4306:	aa                   	stos   %al,%es:(%rdi)
    4307:	aa                   	stos   %al,%es:(%rdi)
    4308:	aa                   	stos   %al,%es:(%rdi)
    4309:	aa                   	stos   %al,%es:(%rdi)
    430a:	aa                   	stos   %al,%es:(%rdi)
    430b:	aa                   	stos   %al,%es:(%rdi)
    430c:	aa                   	stos   %al,%es:(%rdi)
    430d:	aa                   	stos   %al,%es:(%rdi)
    430e:	aa                   	stos   %al,%es:(%rdi)
    430f:	aa                   	stos   %al,%es:(%rdi)
    4310:	aa                   	stos   %al,%es:(%rdi)
    4311:	aa                   	stos   %al,%es:(%rdi)
    4312:	aa                   	stos   %al,%es:(%rdi)
    4313:	aa                   	stos   %al,%es:(%rdi)
    4314:	aa                   	stos   %al,%es:(%rdi)
    4315:	aa                   	stos   %al,%es:(%rdi)
    4316:	aa                   	stos   %al,%es:(%rdi)
    4317:	aa                   	stos   %al,%es:(%rdi)
    4318:	aa                   	stos   %al,%es:(%rdi)
    4319:	aa                   	stos   %al,%es:(%rdi)
    431a:	aa                   	stos   %al,%es:(%rdi)
    431b:	aa                   	stos   %al,%es:(%rdi)
    431c:	aa                   	stos   %al,%es:(%rdi)
    431d:	aa                   	stos   %al,%es:(%rdi)
    431e:	aa                   	stos   %al,%es:(%rdi)
    431f:	aa                   	stos   %al,%es:(%rdi)
    4320:	aa                   	stos   %al,%es:(%rdi)
    4321:	aa                   	stos   %al,%es:(%rdi)
    4322:	aa                   	stos   %al,%es:(%rdi)
    4323:	aa                   	stos   %al,%es:(%rdi)
    4324:	aa                   	stos   %al,%es:(%rdi)
    4325:	aa                   	stos   %al,%es:(%rdi)
    4326:	aa                   	stos   %al,%es:(%rdi)
    4327:	aa                   	stos   %al,%es:(%rdi)
    4328:	aa                   	stos   %al,%es:(%rdi)
    4329:	aa                   	stos   %al,%es:(%rdi)
    432a:	aa                   	stos   %al,%es:(%rdi)
    432b:	aa                   	stos   %al,%es:(%rdi)
    432c:	aa                   	stos   %al,%es:(%rdi)
    432d:	aa                   	stos   %al,%es:(%rdi)
    432e:	aa                   	stos   %al,%es:(%rdi)
    432f:	aa                   	stos   %al,%es:(%rdi)
    4330:	aa                   	stos   %al,%es:(%rdi)
    4331:	aa                   	stos   %al,%es:(%rdi)
    4332:	aa                   	stos   %al,%es:(%rdi)
    4333:	aa                   	stos   %al,%es:(%rdi)
    4334:	aa                   	stos   %al,%es:(%rdi)
    4335:	aa                   	stos   %al,%es:(%rdi)
    4336:	aa                   	stos   %al,%es:(%rdi)
    4337:	aa                   	stos   %al,%es:(%rdi)
    4338:	aa                   	stos   %al,%es:(%rdi)
    4339:	aa                   	stos   %al,%es:(%rdi)
    433a:	aa                   	stos   %al,%es:(%rdi)
    433b:	aa                   	stos   %al,%es:(%rdi)
    433c:	aa                   	stos   %al,%es:(%rdi)
    433d:	aa                   	stos   %al,%es:(%rdi)
    433e:	aa                   	stos   %al,%es:(%rdi)
    433f:	aa                   	stos   %al,%es:(%rdi)
    4340:	aa                   	stos   %al,%es:(%rdi)
    4341:	aa                   	stos   %al,%es:(%rdi)
    4342:	aa                   	stos   %al,%es:(%rdi)
    4343:	aa                   	stos   %al,%es:(%rdi)
    4344:	aa                   	stos   %al,%es:(%rdi)
    4345:	aa                   	stos   %al,%es:(%rdi)
    4346:	aa                   	stos   %al,%es:(%rdi)
    4347:	aa                   	stos   %al,%es:(%rdi)
    4348:	aa                   	stos   %al,%es:(%rdi)
    4349:	aa                   	stos   %al,%es:(%rdi)
    434a:	aa                   	stos   %al,%es:(%rdi)
    434b:	aa                   	stos   %al,%es:(%rdi)
    434c:	aa                   	stos   %al,%es:(%rdi)
    434d:	aa                   	stos   %al,%es:(%rdi)
    434e:	aa                   	stos   %al,%es:(%rdi)
    434f:	aa                   	stos   %al,%es:(%rdi)
    4350:	aa                   	stos   %al,%es:(%rdi)
    4351:	aa                   	stos   %al,%es:(%rdi)
    4352:	aa                   	stos   %al,%es:(%rdi)
    4353:	aa                   	stos   %al,%es:(%rdi)
    4354:	aa                   	stos   %al,%es:(%rdi)
    4355:	aa                   	stos   %al,%es:(%rdi)
    4356:	aa                   	stos   %al,%es:(%rdi)
    4357:	aa                   	stos   %al,%es:(%rdi)
    4358:	aa                   	stos   %al,%es:(%rdi)
    4359:	aa                   	stos   %al,%es:(%rdi)
    435a:	aa                   	stos   %al,%es:(%rdi)
    435b:	aa                   	stos   %al,%es:(%rdi)
    435c:	aa                   	stos   %al,%es:(%rdi)
    435d:	aa                   	stos   %al,%es:(%rdi)
    435e:	aa                   	stos   %al,%es:(%rdi)
    435f:	aa                   	stos   %al,%es:(%rdi)
    4360:	aa                   	stos   %al,%es:(%rdi)
    4361:	aa                   	stos   %al,%es:(%rdi)
    4362:	aa                   	stos   %al,%es:(%rdi)
    4363:	aa                   	stos   %al,%es:(%rdi)
    4364:	aa                   	stos   %al,%es:(%rdi)
    4365:	aa                   	stos   %al,%es:(%rdi)
    4366:	aa                   	stos   %al,%es:(%rdi)
    4367:	aa                   	stos   %al,%es:(%rdi)
    4368:	aa                   	stos   %al,%es:(%rdi)
    4369:	aa                   	stos   %al,%es:(%rdi)
    436a:	aa                   	stos   %al,%es:(%rdi)
    436b:	aa                   	stos   %al,%es:(%rdi)
    436c:	aa                   	stos   %al,%es:(%rdi)
    436d:	aa                   	stos   %al,%es:(%rdi)
    436e:	aa                   	stos   %al,%es:(%rdi)
    436f:	aa                   	stos   %al,%es:(%rdi)
    4370:	aa                   	stos   %al,%es:(%rdi)
    4371:	aa                   	stos   %al,%es:(%rdi)
    4372:	aa                   	stos   %al,%es:(%rdi)
    4373:	aa                   	stos   %al,%es:(%rdi)
    4374:	aa                   	stos   %al,%es:(%rdi)
    4375:	aa                   	stos   %al,%es:(%rdi)
    4376:	aa                   	stos   %al,%es:(%rdi)
    4377:	aa                   	stos   %al,%es:(%rdi)
    4378:	aa                   	stos   %al,%es:(%rdi)
    4379:	aa                   	stos   %al,%es:(%rdi)
    437a:	aa                   	stos   %al,%es:(%rdi)
    437b:	aa                   	stos   %al,%es:(%rdi)
    437c:	aa                   	stos   %al,%es:(%rdi)
    437d:	aa                   	stos   %al,%es:(%rdi)
    437e:	aa                   	stos   %al,%es:(%rdi)
    437f:	aa                   	stos   %al,%es:(%rdi)
    4380:	aa                   	stos   %al,%es:(%rdi)
    4381:	aa                   	stos   %al,%es:(%rdi)
    4382:	aa                   	stos   %al,%es:(%rdi)
    4383:	aa                   	stos   %al,%es:(%rdi)
    4384:	aa                   	stos   %al,%es:(%rdi)
    4385:	aa                   	stos   %al,%es:(%rdi)
    4386:	aa                   	stos   %al,%es:(%rdi)
    4387:	aa                   	stos   %al,%es:(%rdi)
    4388:	aa                   	stos   %al,%es:(%rdi)
    4389:	aa                   	stos   %al,%es:(%rdi)
    438a:	aa                   	stos   %al,%es:(%rdi)
    438b:	aa                   	stos   %al,%es:(%rdi)
    438c:	aa                   	stos   %al,%es:(%rdi)
    438d:	aa                   	stos   %al,%es:(%rdi)
    438e:	aa                   	stos   %al,%es:(%rdi)
    438f:	aa                   	stos   %al,%es:(%rdi)
    4390:	aa                   	stos   %al,%es:(%rdi)
    4391:	aa                   	stos   %al,%es:(%rdi)
    4392:	aa                   	stos   %al,%es:(%rdi)
    4393:	aa                   	stos   %al,%es:(%rdi)
    4394:	aa                   	stos   %al,%es:(%rdi)
    4395:	aa                   	stos   %al,%es:(%rdi)
    4396:	aa                   	stos   %al,%es:(%rdi)
    4397:	aa                   	stos   %al,%es:(%rdi)
    4398:	aa                   	stos   %al,%es:(%rdi)
    4399:	aa                   	stos   %al,%es:(%rdi)
    439a:	aa                   	stos   %al,%es:(%rdi)
    439b:	aa                   	stos   %al,%es:(%rdi)
    439c:	aa                   	stos   %al,%es:(%rdi)
    439d:	aa                   	stos   %al,%es:(%rdi)
    439e:	aa                   	stos   %al,%es:(%rdi)
    439f:	aa                   	stos   %al,%es:(%rdi)
    43a0:	aa                   	stos   %al,%es:(%rdi)
    43a1:	aa                   	stos   %al,%es:(%rdi)
    43a2:	aa                   	stos   %al,%es:(%rdi)
    43a3:	aa                   	stos   %al,%es:(%rdi)
    43a4:	aa                   	stos   %al,%es:(%rdi)
    43a5:	aa                   	stos   %al,%es:(%rdi)
    43a6:	aa                   	stos   %al,%es:(%rdi)
    43a7:	aa                   	stos   %al,%es:(%rdi)
    43a8:	aa                   	stos   %al,%es:(%rdi)
    43a9:	aa                   	stos   %al,%es:(%rdi)
    43aa:	aa                   	stos   %al,%es:(%rdi)
    43ab:	aa                   	stos   %al,%es:(%rdi)
    43ac:	aa                   	stos   %al,%es:(%rdi)
    43ad:	aa                   	stos   %al,%es:(%rdi)
    43ae:	aa                   	stos   %al,%es:(%rdi)
    43af:	aa                   	stos   %al,%es:(%rdi)
    43b0:	aa                   	stos   %al,%es:(%rdi)
    43b1:	aa                   	stos   %al,%es:(%rdi)
    43b2:	aa                   	stos   %al,%es:(%rdi)
    43b3:	aa                   	stos   %al,%es:(%rdi)
    43b4:	aa                   	stos   %al,%es:(%rdi)
    43b5:	aa                   	stos   %al,%es:(%rdi)
    43b6:	aa                   	stos   %al,%es:(%rdi)
    43b7:	aa                   	stos   %al,%es:(%rdi)
    43b8:	aa                   	stos   %al,%es:(%rdi)
    43b9:	aa                   	stos   %al,%es:(%rdi)
    43ba:	aa                   	stos   %al,%es:(%rdi)
    43bb:	aa                   	stos   %al,%es:(%rdi)
    43bc:	aa                   	stos   %al,%es:(%rdi)
    43bd:	aa                   	stos   %al,%es:(%rdi)
    43be:	aa                   	stos   %al,%es:(%rdi)
    43bf:	aa                   	stos   %al,%es:(%rdi)
    43c0:	aa                   	stos   %al,%es:(%rdi)
    43c1:	aa                   	stos   %al,%es:(%rdi)
    43c2:	aa                   	stos   %al,%es:(%rdi)
    43c3:	aa                   	stos   %al,%es:(%rdi)
    43c4:	aa                   	stos   %al,%es:(%rdi)
    43c5:	aa                   	stos   %al,%es:(%rdi)
    43c6:	aa                   	stos   %al,%es:(%rdi)
    43c7:	aa                   	stos   %al,%es:(%rdi)
    43c8:	aa                   	stos   %al,%es:(%rdi)
    43c9:	aa                   	stos   %al,%es:(%rdi)
    43ca:	aa                   	stos   %al,%es:(%rdi)
    43cb:	aa                   	stos   %al,%es:(%rdi)
    43cc:	aa                   	stos   %al,%es:(%rdi)
    43cd:	aa                   	stos   %al,%es:(%rdi)
    43ce:	aa                   	stos   %al,%es:(%rdi)
    43cf:	aa                   	stos   %al,%es:(%rdi)
    43d0:	aa                   	stos   %al,%es:(%rdi)
    43d1:	aa                   	stos   %al,%es:(%rdi)
    43d2:	aa                   	stos   %al,%es:(%rdi)
    43d3:	aa                   	stos   %al,%es:(%rdi)
    43d4:	aa                   	stos   %al,%es:(%rdi)
    43d5:	aa                   	stos   %al,%es:(%rdi)
    43d6:	aa                   	stos   %al,%es:(%rdi)
    43d7:	aa                   	stos   %al,%es:(%rdi)
    43d8:	aa                   	stos   %al,%es:(%rdi)
    43d9:	aa                   	stos   %al,%es:(%rdi)
    43da:	aa                   	stos   %al,%es:(%rdi)
    43db:	aa                   	stos   %al,%es:(%rdi)
    43dc:	aa                   	stos   %al,%es:(%rdi)
    43dd:	aa                   	stos   %al,%es:(%rdi)
    43de:	aa                   	stos   %al,%es:(%rdi)
    43df:	aa                   	stos   %al,%es:(%rdi)
    43e0:	aa                   	stos   %al,%es:(%rdi)
    43e1:	aa                   	stos   %al,%es:(%rdi)
    43e2:	aa                   	stos   %al,%es:(%rdi)
    43e3:	aa                   	stos   %al,%es:(%rdi)
    43e4:	aa                   	stos   %al,%es:(%rdi)
    43e5:	aa                   	stos   %al,%es:(%rdi)
    43e6:	aa                   	stos   %al,%es:(%rdi)
    43e7:	aa                   	stos   %al,%es:(%rdi)
    43e8:	aa                   	stos   %al,%es:(%rdi)
    43e9:	aa                   	stos   %al,%es:(%rdi)
    43ea:	aa                   	stos   %al,%es:(%rdi)
    43eb:	aa                   	stos   %al,%es:(%rdi)
    43ec:	aa                   	stos   %al,%es:(%rdi)
    43ed:	aa                   	stos   %al,%es:(%rdi)
    43ee:	aa                   	stos   %al,%es:(%rdi)
    43ef:	aa                   	stos   %al,%es:(%rdi)
    43f0:	aa                   	stos   %al,%es:(%rdi)
    43f1:	aa                   	stos   %al,%es:(%rdi)
    43f2:	aa                   	stos   %al,%es:(%rdi)
    43f3:	aa                   	stos   %al,%es:(%rdi)
    43f4:	aa                   	stos   %al,%es:(%rdi)
    43f5:	aa                   	stos   %al,%es:(%rdi)
    43f6:	aa                   	stos   %al,%es:(%rdi)
    43f7:	aa                   	stos   %al,%es:(%rdi)
    43f8:	aa                   	stos   %al,%es:(%rdi)
    43f9:	aa                   	stos   %al,%es:(%rdi)
    43fa:	aa                   	stos   %al,%es:(%rdi)
    43fb:	aa                   	stos   %al,%es:(%rdi)
    43fc:	aa                   	stos   %al,%es:(%rdi)
    43fd:	aa                   	stos   %al,%es:(%rdi)
    43fe:	aa                   	stos   %al,%es:(%rdi)
    43ff:	aa                   	stos   %al,%es:(%rdi)
    4400:	aa                   	stos   %al,%es:(%rdi)
    4401:	aa                   	stos   %al,%es:(%rdi)
    4402:	aa                   	stos   %al,%es:(%rdi)
    4403:	aa                   	stos   %al,%es:(%rdi)
    4404:	aa                   	stos   %al,%es:(%rdi)
    4405:	aa                   	stos   %al,%es:(%rdi)
    4406:	aa                   	stos   %al,%es:(%rdi)
    4407:	aa                   	stos   %al,%es:(%rdi)
    4408:	aa                   	stos   %al,%es:(%rdi)
    4409:	aa                   	stos   %al,%es:(%rdi)
    440a:	aa                   	stos   %al,%es:(%rdi)
    440b:	aa                   	stos   %al,%es:(%rdi)
    440c:	aa                   	stos   %al,%es:(%rdi)
    440d:	aa                   	stos   %al,%es:(%rdi)
    440e:	aa                   	stos   %al,%es:(%rdi)
    440f:	aa                   	stos   %al,%es:(%rdi)
    4410:	aa                   	stos   %al,%es:(%rdi)
    4411:	aa                   	stos   %al,%es:(%rdi)
    4412:	aa                   	stos   %al,%es:(%rdi)
    4413:	aa                   	stos   %al,%es:(%rdi)
    4414:	aa                   	stos   %al,%es:(%rdi)
    4415:	aa                   	stos   %al,%es:(%rdi)
    4416:	aa                   	stos   %al,%es:(%rdi)
    4417:	aa                   	stos   %al,%es:(%rdi)
    4418:	aa                   	stos   %al,%es:(%rdi)
    4419:	aa                   	stos   %al,%es:(%rdi)
    441a:	aa                   	stos   %al,%es:(%rdi)
    441b:	aa                   	stos   %al,%es:(%rdi)
    441c:	aa                   	stos   %al,%es:(%rdi)
    441d:	aa                   	stos   %al,%es:(%rdi)
    441e:	aa                   	stos   %al,%es:(%rdi)
    441f:	aa                   	stos   %al,%es:(%rdi)
    4420:	aa                   	stos   %al,%es:(%rdi)
    4421:	aa                   	stos   %al,%es:(%rdi)
    4422:	aa                   	stos   %al,%es:(%rdi)
    4423:	aa                   	stos   %al,%es:(%rdi)
    4424:	aa                   	stos   %al,%es:(%rdi)
    4425:	aa                   	stos   %al,%es:(%rdi)
    4426:	aa                   	stos   %al,%es:(%rdi)
    4427:	aa                   	stos   %al,%es:(%rdi)
    4428:	aa                   	stos   %al,%es:(%rdi)
    4429:	aa                   	stos   %al,%es:(%rdi)
    442a:	aa                   	stos   %al,%es:(%rdi)
    442b:	aa                   	stos   %al,%es:(%rdi)
    442c:	aa                   	stos   %al,%es:(%rdi)
    442d:	aa                   	stos   %al,%es:(%rdi)
    442e:	aa                   	stos   %al,%es:(%rdi)
    442f:	aa                   	stos   %al,%es:(%rdi)
    4430:	aa                   	stos   %al,%es:(%rdi)
    4431:	aa                   	stos   %al,%es:(%rdi)
    4432:	aa                   	stos   %al,%es:(%rdi)
    4433:	aa                   	stos   %al,%es:(%rdi)
    4434:	aa                   	stos   %al,%es:(%rdi)
    4435:	aa                   	stos   %al,%es:(%rdi)
    4436:	aa                   	stos   %al,%es:(%rdi)
    4437:	aa                   	stos   %al,%es:(%rdi)
    4438:	aa                   	stos   %al,%es:(%rdi)
    4439:	aa                   	stos   %al,%es:(%rdi)
    443a:	aa                   	stos   %al,%es:(%rdi)
    443b:	aa                   	stos   %al,%es:(%rdi)
    443c:	aa                   	stos   %al,%es:(%rdi)
    443d:	aa                   	stos   %al,%es:(%rdi)
    443e:	aa                   	stos   %al,%es:(%rdi)
    443f:	aa                   	stos   %al,%es:(%rdi)
    4440:	aa                   	stos   %al,%es:(%rdi)
    4441:	aa                   	stos   %al,%es:(%rdi)
    4442:	aa                   	stos   %al,%es:(%rdi)
    4443:	aa                   	stos   %al,%es:(%rdi)
    4444:	aa                   	stos   %al,%es:(%rdi)
    4445:	aa                   	stos   %al,%es:(%rdi)
    4446:	aa                   	stos   %al,%es:(%rdi)
    4447:	aa                   	stos   %al,%es:(%rdi)
    4448:	aa                   	stos   %al,%es:(%rdi)
    4449:	aa                   	stos   %al,%es:(%rdi)
    444a:	aa                   	stos   %al,%es:(%rdi)
    444b:	aa                   	stos   %al,%es:(%rdi)
    444c:	aa                   	stos   %al,%es:(%rdi)
    444d:	aa                   	stos   %al,%es:(%rdi)
    444e:	aa                   	stos   %al,%es:(%rdi)
    444f:	aa                   	stos   %al,%es:(%rdi)
    4450:	aa                   	stos   %al,%es:(%rdi)
    4451:	aa                   	stos   %al,%es:(%rdi)
    4452:	aa                   	stos   %al,%es:(%rdi)
    4453:	aa                   	stos   %al,%es:(%rdi)
    4454:	aa                   	stos   %al,%es:(%rdi)
    4455:	aa                   	stos   %al,%es:(%rdi)
    4456:	aa                   	stos   %al,%es:(%rdi)
    4457:	aa                   	stos   %al,%es:(%rdi)
    4458:	aa                   	stos   %al,%es:(%rdi)
    4459:	aa                   	stos   %al,%es:(%rdi)
    445a:	aa                   	stos   %al,%es:(%rdi)
    445b:	aa                   	stos   %al,%es:(%rdi)
    445c:	aa                   	stos   %al,%es:(%rdi)
    445d:	aa                   	stos   %al,%es:(%rdi)
    445e:	aa                   	stos   %al,%es:(%rdi)
    445f:	aa                   	stos   %al,%es:(%rdi)
    4460:	aa                   	stos   %al,%es:(%rdi)
    4461:	aa                   	stos   %al,%es:(%rdi)
    4462:	aa                   	stos   %al,%es:(%rdi)
    4463:	aa                   	stos   %al,%es:(%rdi)
    4464:	aa                   	stos   %al,%es:(%rdi)
    4465:	aa                   	stos   %al,%es:(%rdi)
    4466:	aa                   	stos   %al,%es:(%rdi)
    4467:	aa                   	stos   %al,%es:(%rdi)
    4468:	aa                   	stos   %al,%es:(%rdi)
    4469:	aa                   	stos   %al,%es:(%rdi)
    446a:	aa                   	stos   %al,%es:(%rdi)
    446b:	aa                   	stos   %al,%es:(%rdi)
    446c:	aa                   	stos   %al,%es:(%rdi)
    446d:	aa                   	stos   %al,%es:(%rdi)
    446e:	aa                   	stos   %al,%es:(%rdi)
    446f:	aa                   	stos   %al,%es:(%rdi)
    4470:	aa                   	stos   %al,%es:(%rdi)
    4471:	aa                   	stos   %al,%es:(%rdi)
    4472:	aa                   	stos   %al,%es:(%rdi)
    4473:	aa                   	stos   %al,%es:(%rdi)
    4474:	aa                   	stos   %al,%es:(%rdi)
    4475:	aa                   	stos   %al,%es:(%rdi)
    4476:	aa                   	stos   %al,%es:(%rdi)
    4477:	aa                   	stos   %al,%es:(%rdi)
    4478:	aa                   	stos   %al,%es:(%rdi)
    4479:	aa                   	stos   %al,%es:(%rdi)
    447a:	aa                   	stos   %al,%es:(%rdi)
    447b:	aa                   	stos   %al,%es:(%rdi)
    447c:	aa                   	stos   %al,%es:(%rdi)
    447d:	aa                   	stos   %al,%es:(%rdi)
    447e:	aa                   	stos   %al,%es:(%rdi)
    447f:	aa                   	stos   %al,%es:(%rdi)
    4480:	aa                   	stos   %al,%es:(%rdi)
    4481:	aa                   	stos   %al,%es:(%rdi)
    4482:	aa                   	stos   %al,%es:(%rdi)
    4483:	aa                   	stos   %al,%es:(%rdi)
    4484:	aa                   	stos   %al,%es:(%rdi)
    4485:	aa                   	stos   %al,%es:(%rdi)
    4486:	aa                   	stos   %al,%es:(%rdi)
    4487:	aa                   	stos   %al,%es:(%rdi)
    4488:	aa                   	stos   %al,%es:(%rdi)
    4489:	aa                   	stos   %al,%es:(%rdi)
    448a:	aa                   	stos   %al,%es:(%rdi)
    448b:	aa                   	stos   %al,%es:(%rdi)
    448c:	aa                   	stos   %al,%es:(%rdi)
    448d:	aa                   	stos   %al,%es:(%rdi)
    448e:	aa                   	stos   %al,%es:(%rdi)
    448f:	aa                   	stos   %al,%es:(%rdi)
    4490:	aa                   	stos   %al,%es:(%rdi)
    4491:	aa                   	stos   %al,%es:(%rdi)
    4492:	aa                   	stos   %al,%es:(%rdi)
    4493:	aa                   	stos   %al,%es:(%rdi)
    4494:	aa                   	stos   %al,%es:(%rdi)
    4495:	aa                   	stos   %al,%es:(%rdi)
    4496:	aa                   	stos   %al,%es:(%rdi)
    4497:	aa                   	stos   %al,%es:(%rdi)
    4498:	aa                   	stos   %al,%es:(%rdi)
    4499:	aa                   	stos   %al,%es:(%rdi)
    449a:	aa                   	stos   %al,%es:(%rdi)
    449b:	aa                   	stos   %al,%es:(%rdi)
    449c:	aa                   	stos   %al,%es:(%rdi)
    449d:	aa                   	stos   %al,%es:(%rdi)
    449e:	aa                   	stos   %al,%es:(%rdi)
    449f:	aa                   	stos   %al,%es:(%rdi)
    44a0:	aa                   	stos   %al,%es:(%rdi)
    44a1:	aa                   	stos   %al,%es:(%rdi)
    44a2:	aa                   	stos   %al,%es:(%rdi)
    44a3:	aa                   	stos   %al,%es:(%rdi)
    44a4:	aa                   	stos   %al,%es:(%rdi)
    44a5:	aa                   	stos   %al,%es:(%rdi)
    44a6:	aa                   	stos   %al,%es:(%rdi)
    44a7:	aa                   	stos   %al,%es:(%rdi)
    44a8:	aa                   	stos   %al,%es:(%rdi)
    44a9:	aa                   	stos   %al,%es:(%rdi)
    44aa:	aa                   	stos   %al,%es:(%rdi)
    44ab:	aa                   	stos   %al,%es:(%rdi)
    44ac:	aa                   	stos   %al,%es:(%rdi)
    44ad:	aa                   	stos   %al,%es:(%rdi)
    44ae:	aa                   	stos   %al,%es:(%rdi)
    44af:	aa                   	stos   %al,%es:(%rdi)
    44b0:	aa                   	stos   %al,%es:(%rdi)
    44b1:	aa                   	stos   %al,%es:(%rdi)
    44b2:	aa                   	stos   %al,%es:(%rdi)
    44b3:	aa                   	stos   %al,%es:(%rdi)
    44b4:	aa                   	stos   %al,%es:(%rdi)
    44b5:	aa                   	stos   %al,%es:(%rdi)
    44b6:	aa                   	stos   %al,%es:(%rdi)
    44b7:	aa                   	stos   %al,%es:(%rdi)
    44b8:	aa                   	stos   %al,%es:(%rdi)
    44b9:	aa                   	stos   %al,%es:(%rdi)
    44ba:	aa                   	stos   %al,%es:(%rdi)
    44bb:	aa                   	stos   %al,%es:(%rdi)
    44bc:	aa                   	stos   %al,%es:(%rdi)
    44bd:	aa                   	stos   %al,%es:(%rdi)
    44be:	aa                   	stos   %al,%es:(%rdi)
    44bf:	aa                   	stos   %al,%es:(%rdi)
    44c0:	aa                   	stos   %al,%es:(%rdi)
    44c1:	aa                   	stos   %al,%es:(%rdi)
    44c2:	aa                   	stos   %al,%es:(%rdi)
    44c3:	aa                   	stos   %al,%es:(%rdi)
    44c4:	aa                   	stos   %al,%es:(%rdi)
    44c5:	aa                   	stos   %al,%es:(%rdi)
    44c6:	aa                   	stos   %al,%es:(%rdi)
    44c7:	aa                   	stos   %al,%es:(%rdi)
    44c8:	aa                   	stos   %al,%es:(%rdi)
    44c9:	aa                   	stos   %al,%es:(%rdi)
    44ca:	aa                   	stos   %al,%es:(%rdi)
    44cb:	aa                   	stos   %al,%es:(%rdi)
    44cc:	aa                   	stos   %al,%es:(%rdi)
    44cd:	aa                   	stos   %al,%es:(%rdi)
    44ce:	aa                   	stos   %al,%es:(%rdi)
    44cf:	aa                   	stos   %al,%es:(%rdi)
    44d0:	aa                   	stos   %al,%es:(%rdi)
    44d1:	aa                   	stos   %al,%es:(%rdi)
    44d2:	aa                   	stos   %al,%es:(%rdi)
    44d3:	aa                   	stos   %al,%es:(%rdi)
    44d4:	aa                   	stos   %al,%es:(%rdi)
    44d5:	aa                   	stos   %al,%es:(%rdi)
    44d6:	aa                   	stos   %al,%es:(%rdi)
    44d7:	aa                   	stos   %al,%es:(%rdi)
    44d8:	aa                   	stos   %al,%es:(%rdi)
    44d9:	aa                   	stos   %al,%es:(%rdi)
    44da:	aa                   	stos   %al,%es:(%rdi)
    44db:	aa                   	stos   %al,%es:(%rdi)
    44dc:	aa                   	stos   %al,%es:(%rdi)
    44dd:	aa                   	stos   %al,%es:(%rdi)
    44de:	aa                   	stos   %al,%es:(%rdi)
    44df:	aa                   	stos   %al,%es:(%rdi)
    44e0:	aa                   	stos   %al,%es:(%rdi)
    44e1:	aa                   	stos   %al,%es:(%rdi)
    44e2:	aa                   	stos   %al,%es:(%rdi)
    44e3:	aa                   	stos   %al,%es:(%rdi)
    44e4:	aa                   	stos   %al,%es:(%rdi)
    44e5:	aa                   	stos   %al,%es:(%rdi)
    44e6:	aa                   	stos   %al,%es:(%rdi)
    44e7:	aa                   	stos   %al,%es:(%rdi)
    44e8:	aa                   	stos   %al,%es:(%rdi)
    44e9:	aa                   	stos   %al,%es:(%rdi)
    44ea:	aa                   	stos   %al,%es:(%rdi)
    44eb:	aa                   	stos   %al,%es:(%rdi)
    44ec:	aa                   	stos   %al,%es:(%rdi)
    44ed:	aa                   	stos   %al,%es:(%rdi)
    44ee:	aa                   	stos   %al,%es:(%rdi)
    44ef:	aa                   	stos   %al,%es:(%rdi)
    44f0:	aa                   	stos   %al,%es:(%rdi)
    44f1:	aa                   	stos   %al,%es:(%rdi)
    44f2:	aa                   	stos   %al,%es:(%rdi)
    44f3:	aa                   	stos   %al,%es:(%rdi)
    44f4:	aa                   	stos   %al,%es:(%rdi)
    44f5:	aa                   	stos   %al,%es:(%rdi)
    44f6:	aa                   	stos   %al,%es:(%rdi)
    44f7:	aa                   	stos   %al,%es:(%rdi)
    44f8:	aa                   	stos   %al,%es:(%rdi)
    44f9:	aa                   	stos   %al,%es:(%rdi)
    44fa:	aa                   	stos   %al,%es:(%rdi)
    44fb:	aa                   	stos   %al,%es:(%rdi)
    44fc:	aa                   	stos   %al,%es:(%rdi)
    44fd:	aa                   	stos   %al,%es:(%rdi)
    44fe:	aa                   	stos   %al,%es:(%rdi)
    44ff:	aa                   	stos   %al,%es:(%rdi)
    4500:	aa                   	stos   %al,%es:(%rdi)
    4501:	aa                   	stos   %al,%es:(%rdi)
    4502:	aa                   	stos   %al,%es:(%rdi)
    4503:	aa                   	stos   %al,%es:(%rdi)
    4504:	aa                   	stos   %al,%es:(%rdi)
    4505:	aa                   	stos   %al,%es:(%rdi)
    4506:	aa                   	stos   %al,%es:(%rdi)
    4507:	aa                   	stos   %al,%es:(%rdi)
    4508:	aa                   	stos   %al,%es:(%rdi)
    4509:	aa                   	stos   %al,%es:(%rdi)
    450a:	aa                   	stos   %al,%es:(%rdi)
    450b:	aa                   	stos   %al,%es:(%rdi)
    450c:	aa                   	stos   %al,%es:(%rdi)
    450d:	aa                   	stos   %al,%es:(%rdi)
    450e:	aa                   	stos   %al,%es:(%rdi)
    450f:	aa                   	stos   %al,%es:(%rdi)
    4510:	aa                   	stos   %al,%es:(%rdi)
    4511:	aa                   	stos   %al,%es:(%rdi)
    4512:	aa                   	stos   %al,%es:(%rdi)
    4513:	aa                   	stos   %al,%es:(%rdi)
    4514:	aa                   	stos   %al,%es:(%rdi)
    4515:	aa                   	stos   %al,%es:(%rdi)
    4516:	aa                   	stos   %al,%es:(%rdi)
    4517:	aa                   	stos   %al,%es:(%rdi)
    4518:	aa                   	stos   %al,%es:(%rdi)
    4519:	aa                   	stos   %al,%es:(%rdi)
    451a:	aa                   	stos   %al,%es:(%rdi)
    451b:	aa                   	stos   %al,%es:(%rdi)
    451c:	aa                   	stos   %al,%es:(%rdi)
    451d:	aa                   	stos   %al,%es:(%rdi)
    451e:	aa                   	stos   %al,%es:(%rdi)
    451f:	aa                   	stos   %al,%es:(%rdi)
    4520:	aa                   	stos   %al,%es:(%rdi)
    4521:	aa                   	stos   %al,%es:(%rdi)
    4522:	aa                   	stos   %al,%es:(%rdi)
    4523:	aa                   	stos   %al,%es:(%rdi)
    4524:	aa                   	stos   %al,%es:(%rdi)
    4525:	aa                   	stos   %al,%es:(%rdi)
    4526:	aa                   	stos   %al,%es:(%rdi)
    4527:	aa                   	stos   %al,%es:(%rdi)
    4528:	aa                   	stos   %al,%es:(%rdi)
    4529:	aa                   	stos   %al,%es:(%rdi)
    452a:	aa                   	stos   %al,%es:(%rdi)
    452b:	aa                   	stos   %al,%es:(%rdi)
    452c:	aa                   	stos   %al,%es:(%rdi)
    452d:	aa                   	stos   %al,%es:(%rdi)
    452e:	aa                   	stos   %al,%es:(%rdi)
    452f:	aa                   	stos   %al,%es:(%rdi)
    4530:	aa                   	stos   %al,%es:(%rdi)
    4531:	aa                   	stos   %al,%es:(%rdi)
    4532:	aa                   	stos   %al,%es:(%rdi)
    4533:	aa                   	stos   %al,%es:(%rdi)
    4534:	aa                   	stos   %al,%es:(%rdi)
    4535:	aa                   	stos   %al,%es:(%rdi)
    4536:	aa                   	stos   %al,%es:(%rdi)
    4537:	aa                   	stos   %al,%es:(%rdi)
    4538:	aa                   	stos   %al,%es:(%rdi)
    4539:	aa                   	stos   %al,%es:(%rdi)
    453a:	aa                   	stos   %al,%es:(%rdi)
    453b:	aa                   	stos   %al,%es:(%rdi)
    453c:	aa                   	stos   %al,%es:(%rdi)
    453d:	aa                   	stos   %al,%es:(%rdi)
    453e:	aa                   	stos   %al,%es:(%rdi)
    453f:	aa                   	stos   %al,%es:(%rdi)
    4540:	aa                   	stos   %al,%es:(%rdi)
    4541:	aa                   	stos   %al,%es:(%rdi)
    4542:	aa                   	stos   %al,%es:(%rdi)
    4543:	aa                   	stos   %al,%es:(%rdi)
    4544:	aa                   	stos   %al,%es:(%rdi)
    4545:	aa                   	stos   %al,%es:(%rdi)
    4546:	aa                   	stos   %al,%es:(%rdi)
    4547:	aa                   	stos   %al,%es:(%rdi)
    4548:	aa                   	stos   %al,%es:(%rdi)
    4549:	aa                   	stos   %al,%es:(%rdi)
    454a:	aa                   	stos   %al,%es:(%rdi)
    454b:	aa                   	stos   %al,%es:(%rdi)
    454c:	aa                   	stos   %al,%es:(%rdi)
    454d:	aa                   	stos   %al,%es:(%rdi)
    454e:	aa                   	stos   %al,%es:(%rdi)
    454f:	aa                   	stos   %al,%es:(%rdi)
    4550:	aa                   	stos   %al,%es:(%rdi)
    4551:	aa                   	stos   %al,%es:(%rdi)
    4552:	aa                   	stos   %al,%es:(%rdi)
    4553:	aa                   	stos   %al,%es:(%rdi)
    4554:	aa                   	stos   %al,%es:(%rdi)
    4555:	aa                   	stos   %al,%es:(%rdi)
    4556:	aa                   	stos   %al,%es:(%rdi)
    4557:	aa                   	stos   %al,%es:(%rdi)
    4558:	aa                   	stos   %al,%es:(%rdi)
    4559:	aa                   	stos   %al,%es:(%rdi)
    455a:	aa                   	stos   %al,%es:(%rdi)
    455b:	aa                   	stos   %al,%es:(%rdi)
    455c:	aa                   	stos   %al,%es:(%rdi)
    455d:	aa                   	stos   %al,%es:(%rdi)
    455e:	aa                   	stos   %al,%es:(%rdi)
    455f:	aa                   	stos   %al,%es:(%rdi)
    4560:	aa                   	stos   %al,%es:(%rdi)
    4561:	aa                   	stos   %al,%es:(%rdi)
    4562:	aa                   	stos   %al,%es:(%rdi)
    4563:	aa                   	stos   %al,%es:(%rdi)
    4564:	aa                   	stos   %al,%es:(%rdi)
    4565:	aa                   	stos   %al,%es:(%rdi)
    4566:	aa                   	stos   %al,%es:(%rdi)
    4567:	aa                   	stos   %al,%es:(%rdi)
    4568:	aa                   	stos   %al,%es:(%rdi)
    4569:	aa                   	stos   %al,%es:(%rdi)
    456a:	aa                   	stos   %al,%es:(%rdi)
    456b:	aa                   	stos   %al,%es:(%rdi)
    456c:	aa                   	stos   %al,%es:(%rdi)
    456d:	aa                   	stos   %al,%es:(%rdi)
    456e:	aa                   	stos   %al,%es:(%rdi)
    456f:	aa                   	stos   %al,%es:(%rdi)
    4570:	aa                   	stos   %al,%es:(%rdi)
    4571:	aa                   	stos   %al,%es:(%rdi)
    4572:	aa                   	stos   %al,%es:(%rdi)
    4573:	aa                   	stos   %al,%es:(%rdi)
    4574:	aa                   	stos   %al,%es:(%rdi)
    4575:	aa                   	stos   %al,%es:(%rdi)
    4576:	aa                   	stos   %al,%es:(%rdi)
    4577:	aa                   	stos   %al,%es:(%rdi)
    4578:	aa                   	stos   %al,%es:(%rdi)
    4579:	aa                   	stos   %al,%es:(%rdi)
    457a:	aa                   	stos   %al,%es:(%rdi)
    457b:	aa                   	stos   %al,%es:(%rdi)
    457c:	aa                   	stos   %al,%es:(%rdi)
    457d:	aa                   	stos   %al,%es:(%rdi)
    457e:	aa                   	stos   %al,%es:(%rdi)
    457f:	aa                   	stos   %al,%es:(%rdi)
    4580:	aa                   	stos   %al,%es:(%rdi)
    4581:	aa                   	stos   %al,%es:(%rdi)
    4582:	aa                   	stos   %al,%es:(%rdi)
    4583:	aa                   	stos   %al,%es:(%rdi)
    4584:	aa                   	stos   %al,%es:(%rdi)
    4585:	aa                   	stos   %al,%es:(%rdi)
    4586:	aa                   	stos   %al,%es:(%rdi)
    4587:	aa                   	stos   %al,%es:(%rdi)
    4588:	aa                   	stos   %al,%es:(%rdi)
    4589:	aa                   	stos   %al,%es:(%rdi)
    458a:	aa                   	stos   %al,%es:(%rdi)
    458b:	aa                   	stos   %al,%es:(%rdi)
    458c:	aa                   	stos   %al,%es:(%rdi)
    458d:	aa                   	stos   %al,%es:(%rdi)
    458e:	aa                   	stos   %al,%es:(%rdi)
    458f:	aa                   	stos   %al,%es:(%rdi)
    4590:	aa                   	stos   %al,%es:(%rdi)
    4591:	aa                   	stos   %al,%es:(%rdi)
    4592:	aa                   	stos   %al,%es:(%rdi)
    4593:	aa                   	stos   %al,%es:(%rdi)
    4594:	aa                   	stos   %al,%es:(%rdi)
    4595:	aa                   	stos   %al,%es:(%rdi)
    4596:	aa                   	stos   %al,%es:(%rdi)
    4597:	aa                   	stos   %al,%es:(%rdi)
    4598:	aa                   	stos   %al,%es:(%rdi)
    4599:	aa                   	stos   %al,%es:(%rdi)
    459a:	aa                   	stos   %al,%es:(%rdi)
    459b:	aa                   	stos   %al,%es:(%rdi)
    459c:	aa                   	stos   %al,%es:(%rdi)
    459d:	aa                   	stos   %al,%es:(%rdi)
    459e:	aa                   	stos   %al,%es:(%rdi)
    459f:	aa                   	stos   %al,%es:(%rdi)
    45a0:	aa                   	stos   %al,%es:(%rdi)
    45a1:	aa                   	stos   %al,%es:(%rdi)
    45a2:	aa                   	stos   %al,%es:(%rdi)
    45a3:	aa                   	stos   %al,%es:(%rdi)
    45a4:	aa                   	stos   %al,%es:(%rdi)
    45a5:	aa                   	stos   %al,%es:(%rdi)
    45a6:	aa                   	stos   %al,%es:(%rdi)
    45a7:	aa                   	stos   %al,%es:(%rdi)
    45a8:	aa                   	stos   %al,%es:(%rdi)
    45a9:	aa                   	stos   %al,%es:(%rdi)
    45aa:	aa                   	stos   %al,%es:(%rdi)
    45ab:	aa                   	stos   %al,%es:(%rdi)
    45ac:	aa                   	stos   %al,%es:(%rdi)
    45ad:	aa                   	stos   %al,%es:(%rdi)
    45ae:	aa                   	stos   %al,%es:(%rdi)
    45af:	aa                   	stos   %al,%es:(%rdi)
    45b0:	aa                   	stos   %al,%es:(%rdi)
    45b1:	aa                   	stos   %al,%es:(%rdi)
    45b2:	aa                   	stos   %al,%es:(%rdi)
    45b3:	aa                   	stos   %al,%es:(%rdi)
    45b4:	aa                   	stos   %al,%es:(%rdi)
    45b5:	aa                   	stos   %al,%es:(%rdi)
    45b6:	aa                   	stos   %al,%es:(%rdi)
    45b7:	aa                   	stos   %al,%es:(%rdi)
    45b8:	aa                   	stos   %al,%es:(%rdi)
    45b9:	aa                   	stos   %al,%es:(%rdi)
    45ba:	aa                   	stos   %al,%es:(%rdi)
    45bb:	aa                   	stos   %al,%es:(%rdi)
    45bc:	aa                   	stos   %al,%es:(%rdi)
    45bd:	aa                   	stos   %al,%es:(%rdi)
    45be:	aa                   	stos   %al,%es:(%rdi)
    45bf:	aa                   	stos   %al,%es:(%rdi)
    45c0:	aa                   	stos   %al,%es:(%rdi)
    45c1:	aa                   	stos   %al,%es:(%rdi)
    45c2:	aa                   	stos   %al,%es:(%rdi)
    45c3:	aa                   	stos   %al,%es:(%rdi)
    45c4:	aa                   	stos   %al,%es:(%rdi)
    45c5:	aa                   	stos   %al,%es:(%rdi)
    45c6:	aa                   	stos   %al,%es:(%rdi)
    45c7:	aa                   	stos   %al,%es:(%rdi)
    45c8:	aa                   	stos   %al,%es:(%rdi)
    45c9:	aa                   	stos   %al,%es:(%rdi)
    45ca:	aa                   	stos   %al,%es:(%rdi)
    45cb:	aa                   	stos   %al,%es:(%rdi)
    45cc:	aa                   	stos   %al,%es:(%rdi)
    45cd:	aa                   	stos   %al,%es:(%rdi)
    45ce:	aa                   	stos   %al,%es:(%rdi)
    45cf:	aa                   	stos   %al,%es:(%rdi)
    45d0:	aa                   	stos   %al,%es:(%rdi)
    45d1:	aa                   	stos   %al,%es:(%rdi)
    45d2:	aa                   	stos   %al,%es:(%rdi)
    45d3:	aa                   	stos   %al,%es:(%rdi)
    45d4:	aa                   	stos   %al,%es:(%rdi)
    45d5:	aa                   	stos   %al,%es:(%rdi)
    45d6:	aa                   	stos   %al,%es:(%rdi)
    45d7:	aa                   	stos   %al,%es:(%rdi)
    45d8:	aa                   	stos   %al,%es:(%rdi)
    45d9:	aa                   	stos   %al,%es:(%rdi)
    45da:	aa                   	stos   %al,%es:(%rdi)
    45db:	aa                   	stos   %al,%es:(%rdi)
    45dc:	aa                   	stos   %al,%es:(%rdi)
    45dd:	aa                   	stos   %al,%es:(%rdi)
    45de:	aa                   	stos   %al,%es:(%rdi)
    45df:	aa                   	stos   %al,%es:(%rdi)
    45e0:	aa                   	stos   %al,%es:(%rdi)
    45e1:	aa                   	stos   %al,%es:(%rdi)
    45e2:	aa                   	stos   %al,%es:(%rdi)
    45e3:	aa                   	stos   %al,%es:(%rdi)
    45e4:	aa                   	stos   %al,%es:(%rdi)
    45e5:	aa                   	stos   %al,%es:(%rdi)
    45e6:	aa                   	stos   %al,%es:(%rdi)
    45e7:	aa                   	stos   %al,%es:(%rdi)
    45e8:	aa                   	stos   %al,%es:(%rdi)
    45e9:	aa                   	stos   %al,%es:(%rdi)
    45ea:	aa                   	stos   %al,%es:(%rdi)
    45eb:	aa                   	stos   %al,%es:(%rdi)
    45ec:	aa                   	stos   %al,%es:(%rdi)
    45ed:	aa                   	stos   %al,%es:(%rdi)
    45ee:	aa                   	stos   %al,%es:(%rdi)
    45ef:	aa                   	stos   %al,%es:(%rdi)
    45f0:	aa                   	stos   %al,%es:(%rdi)
    45f1:	aa                   	stos   %al,%es:(%rdi)
    45f2:	aa                   	stos   %al,%es:(%rdi)
    45f3:	aa                   	stos   %al,%es:(%rdi)
    45f4:	aa                   	stos   %al,%es:(%rdi)
    45f5:	aa                   	stos   %al,%es:(%rdi)
    45f6:	aa                   	stos   %al,%es:(%rdi)
    45f7:	aa                   	stos   %al,%es:(%rdi)
    45f8:	aa                   	stos   %al,%es:(%rdi)
    45f9:	aa                   	stos   %al,%es:(%rdi)
    45fa:	aa                   	stos   %al,%es:(%rdi)
    45fb:	aa                   	stos   %al,%es:(%rdi)
    45fc:	aa                   	stos   %al,%es:(%rdi)
    45fd:	aa                   	stos   %al,%es:(%rdi)
    45fe:	aa                   	stos   %al,%es:(%rdi)
    45ff:	aa                   	stos   %al,%es:(%rdi)
    4600:	aa                   	stos   %al,%es:(%rdi)
    4601:	aa                   	stos   %al,%es:(%rdi)
    4602:	aa                   	stos   %al,%es:(%rdi)
    4603:	aa                   	stos   %al,%es:(%rdi)
    4604:	aa                   	stos   %al,%es:(%rdi)
    4605:	aa                   	stos   %al,%es:(%rdi)
    4606:	aa                   	stos   %al,%es:(%rdi)
    4607:	aa                   	stos   %al,%es:(%rdi)
    4608:	aa                   	stos   %al,%es:(%rdi)
    4609:	aa                   	stos   %al,%es:(%rdi)
    460a:	aa                   	stos   %al,%es:(%rdi)
    460b:	aa                   	stos   %al,%es:(%rdi)
    460c:	aa                   	stos   %al,%es:(%rdi)
    460d:	aa                   	stos   %al,%es:(%rdi)
    460e:	aa                   	stos   %al,%es:(%rdi)
    460f:	aa                   	stos   %al,%es:(%rdi)
    4610:	aa                   	stos   %al,%es:(%rdi)
    4611:	aa                   	stos   %al,%es:(%rdi)
    4612:	aa                   	stos   %al,%es:(%rdi)
    4613:	aa                   	stos   %al,%es:(%rdi)
    4614:	aa                   	stos   %al,%es:(%rdi)
    4615:	aa                   	stos   %al,%es:(%rdi)
    4616:	aa                   	stos   %al,%es:(%rdi)
    4617:	aa                   	stos   %al,%es:(%rdi)
    4618:	aa                   	stos   %al,%es:(%rdi)
    4619:	aa                   	stos   %al,%es:(%rdi)
    461a:	aa                   	stos   %al,%es:(%rdi)
    461b:	aa                   	stos   %al,%es:(%rdi)
    461c:	aa                   	stos   %al,%es:(%rdi)
    461d:	aa                   	stos   %al,%es:(%rdi)
    461e:	aa                   	stos   %al,%es:(%rdi)
    461f:	aa                   	stos   %al,%es:(%rdi)
    4620:	aa                   	stos   %al,%es:(%rdi)
    4621:	aa                   	stos   %al,%es:(%rdi)
    4622:	aa                   	stos   %al,%es:(%rdi)
    4623:	aa                   	stos   %al,%es:(%rdi)
    4624:	aa                   	stos   %al,%es:(%rdi)
    4625:	aa                   	stos   %al,%es:(%rdi)
    4626:	aa                   	stos   %al,%es:(%rdi)
    4627:	aa                   	stos   %al,%es:(%rdi)
    4628:	aa                   	stos   %al,%es:(%rdi)
    4629:	aa                   	stos   %al,%es:(%rdi)
    462a:	aa                   	stos   %al,%es:(%rdi)
    462b:	aa                   	stos   %al,%es:(%rdi)
    462c:	aa                   	stos   %al,%es:(%rdi)
    462d:	aa                   	stos   %al,%es:(%rdi)
    462e:	aa                   	stos   %al,%es:(%rdi)
    462f:	aa                   	stos   %al,%es:(%rdi)
    4630:	aa                   	stos   %al,%es:(%rdi)
    4631:	aa                   	stos   %al,%es:(%rdi)
    4632:	aa                   	stos   %al,%es:(%rdi)
    4633:	aa                   	stos   %al,%es:(%rdi)
    4634:	aa                   	stos   %al,%es:(%rdi)
    4635:	aa                   	stos   %al,%es:(%rdi)
    4636:	aa                   	stos   %al,%es:(%rdi)
    4637:	aa                   	stos   %al,%es:(%rdi)
    4638:	aa                   	stos   %al,%es:(%rdi)
    4639:	aa                   	stos   %al,%es:(%rdi)
    463a:	aa                   	stos   %al,%es:(%rdi)
    463b:	aa                   	stos   %al,%es:(%rdi)
    463c:	aa                   	stos   %al,%es:(%rdi)
    463d:	aa                   	stos   %al,%es:(%rdi)
    463e:	aa                   	stos   %al,%es:(%rdi)
    463f:	aa                   	stos   %al,%es:(%rdi)
    4640:	aa                   	stos   %al,%es:(%rdi)
    4641:	aa                   	stos   %al,%es:(%rdi)
    4642:	aa                   	stos   %al,%es:(%rdi)
    4643:	aa                   	stos   %al,%es:(%rdi)
    4644:	aa                   	stos   %al,%es:(%rdi)
    4645:	aa                   	stos   %al,%es:(%rdi)
    4646:	aa                   	stos   %al,%es:(%rdi)
    4647:	aa                   	stos   %al,%es:(%rdi)
    4648:	aa                   	stos   %al,%es:(%rdi)
    4649:	aa                   	stos   %al,%es:(%rdi)
    464a:	aa                   	stos   %al,%es:(%rdi)
    464b:	aa                   	stos   %al,%es:(%rdi)
    464c:	aa                   	stos   %al,%es:(%rdi)
    464d:	aa                   	stos   %al,%es:(%rdi)
    464e:	aa                   	stos   %al,%es:(%rdi)
    464f:	aa                   	stos   %al,%es:(%rdi)
    4650:	aa                   	stos   %al,%es:(%rdi)
    4651:	aa                   	stos   %al,%es:(%rdi)
    4652:	aa                   	stos   %al,%es:(%rdi)
    4653:	aa                   	stos   %al,%es:(%rdi)
    4654:	aa                   	stos   %al,%es:(%rdi)
    4655:	aa                   	stos   %al,%es:(%rdi)
    4656:	aa                   	stos   %al,%es:(%rdi)
    4657:	aa                   	stos   %al,%es:(%rdi)
    4658:	aa                   	stos   %al,%es:(%rdi)
    4659:	aa                   	stos   %al,%es:(%rdi)
    465a:	aa                   	stos   %al,%es:(%rdi)
    465b:	aa                   	stos   %al,%es:(%rdi)
    465c:	aa                   	stos   %al,%es:(%rdi)
    465d:	aa                   	stos   %al,%es:(%rdi)
    465e:	aa                   	stos   %al,%es:(%rdi)
    465f:	aa                   	stos   %al,%es:(%rdi)
    4660:	aa                   	stos   %al,%es:(%rdi)
    4661:	aa                   	stos   %al,%es:(%rdi)
    4662:	aa                   	stos   %al,%es:(%rdi)
    4663:	aa                   	stos   %al,%es:(%rdi)
    4664:	aa                   	stos   %al,%es:(%rdi)
    4665:	aa                   	stos   %al,%es:(%rdi)
    4666:	aa                   	stos   %al,%es:(%rdi)
    4667:	aa                   	stos   %al,%es:(%rdi)
    4668:	aa                   	stos   %al,%es:(%rdi)
    4669:	aa                   	stos   %al,%es:(%rdi)
    466a:	aa                   	stos   %al,%es:(%rdi)
    466b:	aa                   	stos   %al,%es:(%rdi)
    466c:	aa                   	stos   %al,%es:(%rdi)
    466d:	aa                   	stos   %al,%es:(%rdi)
    466e:	aa                   	stos   %al,%es:(%rdi)
    466f:	aa                   	stos   %al,%es:(%rdi)
    4670:	aa                   	stos   %al,%es:(%rdi)
    4671:	aa                   	stos   %al,%es:(%rdi)
    4672:	aa                   	stos   %al,%es:(%rdi)
    4673:	aa                   	stos   %al,%es:(%rdi)
    4674:	aa                   	stos   %al,%es:(%rdi)
    4675:	aa                   	stos   %al,%es:(%rdi)
    4676:	aa                   	stos   %al,%es:(%rdi)
    4677:	aa                   	stos   %al,%es:(%rdi)
    4678:	aa                   	stos   %al,%es:(%rdi)
    4679:	aa                   	stos   %al,%es:(%rdi)
    467a:	aa                   	stos   %al,%es:(%rdi)
    467b:	aa                   	stos   %al,%es:(%rdi)
    467c:	aa                   	stos   %al,%es:(%rdi)
    467d:	aa                   	stos   %al,%es:(%rdi)
    467e:	aa                   	stos   %al,%es:(%rdi)
    467f:	aa                   	stos   %al,%es:(%rdi)
    4680:	aa                   	stos   %al,%es:(%rdi)
    4681:	aa                   	stos   %al,%es:(%rdi)
    4682:	aa                   	stos   %al,%es:(%rdi)
    4683:	aa                   	stos   %al,%es:(%rdi)
    4684:	aa                   	stos   %al,%es:(%rdi)
    4685:	aa                   	stos   %al,%es:(%rdi)
    4686:	aa                   	stos   %al,%es:(%rdi)
    4687:	aa                   	stos   %al,%es:(%rdi)
    4688:	aa                   	stos   %al,%es:(%rdi)
    4689:	aa                   	stos   %al,%es:(%rdi)
    468a:	aa                   	stos   %al,%es:(%rdi)
    468b:	aa                   	stos   %al,%es:(%rdi)
    468c:	aa                   	stos   %al,%es:(%rdi)
    468d:	aa                   	stos   %al,%es:(%rdi)
    468e:	aa                   	stos   %al,%es:(%rdi)
    468f:	aa                   	stos   %al,%es:(%rdi)
    4690:	aa                   	stos   %al,%es:(%rdi)
    4691:	aa                   	stos   %al,%es:(%rdi)
    4692:	aa                   	stos   %al,%es:(%rdi)
    4693:	aa                   	stos   %al,%es:(%rdi)
    4694:	aa                   	stos   %al,%es:(%rdi)
    4695:	aa                   	stos   %al,%es:(%rdi)
    4696:	aa                   	stos   %al,%es:(%rdi)
    4697:	aa                   	stos   %al,%es:(%rdi)
    4698:	aa                   	stos   %al,%es:(%rdi)
    4699:	aa                   	stos   %al,%es:(%rdi)
    469a:	aa                   	stos   %al,%es:(%rdi)
    469b:	aa                   	stos   %al,%es:(%rdi)
    469c:	aa                   	stos   %al,%es:(%rdi)
    469d:	aa                   	stos   %al,%es:(%rdi)
    469e:	aa                   	stos   %al,%es:(%rdi)
    469f:	aa                   	stos   %al,%es:(%rdi)
    46a0:	aa                   	stos   %al,%es:(%rdi)
    46a1:	aa                   	stos   %al,%es:(%rdi)
    46a2:	aa                   	stos   %al,%es:(%rdi)
    46a3:	aa                   	stos   %al,%es:(%rdi)
    46a4:	aa                   	stos   %al,%es:(%rdi)
    46a5:	aa                   	stos   %al,%es:(%rdi)
    46a6:	aa                   	stos   %al,%es:(%rdi)
    46a7:	aa                   	stos   %al,%es:(%rdi)
    46a8:	aa                   	stos   %al,%es:(%rdi)
    46a9:	aa                   	stos   %al,%es:(%rdi)
    46aa:	aa                   	stos   %al,%es:(%rdi)
    46ab:	aa                   	stos   %al,%es:(%rdi)
    46ac:	aa                   	stos   %al,%es:(%rdi)
    46ad:	aa                   	stos   %al,%es:(%rdi)
    46ae:	aa                   	stos   %al,%es:(%rdi)
    46af:	aa                   	stos   %al,%es:(%rdi)
    46b0:	aa                   	stos   %al,%es:(%rdi)
    46b1:	aa                   	stos   %al,%es:(%rdi)
    46b2:	aa                   	stos   %al,%es:(%rdi)
    46b3:	aa                   	stos   %al,%es:(%rdi)
    46b4:	aa                   	stos   %al,%es:(%rdi)
    46b5:	aa                   	stos   %al,%es:(%rdi)
    46b6:	aa                   	stos   %al,%es:(%rdi)
    46b7:	aa                   	stos   %al,%es:(%rdi)
    46b8:	aa                   	stos   %al,%es:(%rdi)
    46b9:	aa                   	stos   %al,%es:(%rdi)
    46ba:	aa                   	stos   %al,%es:(%rdi)
    46bb:	aa                   	stos   %al,%es:(%rdi)
    46bc:	aa                   	stos   %al,%es:(%rdi)
    46bd:	aa                   	stos   %al,%es:(%rdi)
    46be:	aa                   	stos   %al,%es:(%rdi)
    46bf:	aa                   	stos   %al,%es:(%rdi)
    46c0:	aa                   	stos   %al,%es:(%rdi)
    46c1:	aa                   	stos   %al,%es:(%rdi)
    46c2:	aa                   	stos   %al,%es:(%rdi)
    46c3:	aa                   	stos   %al,%es:(%rdi)
    46c4:	aa                   	stos   %al,%es:(%rdi)
    46c5:	aa                   	stos   %al,%es:(%rdi)
    46c6:	aa                   	stos   %al,%es:(%rdi)
    46c7:	aa                   	stos   %al,%es:(%rdi)
    46c8:	aa                   	stos   %al,%es:(%rdi)
    46c9:	aa                   	stos   %al,%es:(%rdi)
    46ca:	aa                   	stos   %al,%es:(%rdi)
    46cb:	aa                   	stos   %al,%es:(%rdi)
    46cc:	aa                   	stos   %al,%es:(%rdi)
    46cd:	aa                   	stos   %al,%es:(%rdi)
    46ce:	aa                   	stos   %al,%es:(%rdi)
    46cf:	aa                   	stos   %al,%es:(%rdi)
    46d0:	aa                   	stos   %al,%es:(%rdi)
    46d1:	aa                   	stos   %al,%es:(%rdi)
    46d2:	aa                   	stos   %al,%es:(%rdi)
    46d3:	aa                   	stos   %al,%es:(%rdi)
    46d4:	aa                   	stos   %al,%es:(%rdi)
    46d5:	aa                   	stos   %al,%es:(%rdi)
    46d6:	aa                   	stos   %al,%es:(%rdi)
    46d7:	aa                   	stos   %al,%es:(%rdi)
    46d8:	aa                   	stos   %al,%es:(%rdi)
    46d9:	aa                   	stos   %al,%es:(%rdi)
    46da:	aa                   	stos   %al,%es:(%rdi)
    46db:	aa                   	stos   %al,%es:(%rdi)
    46dc:	aa                   	stos   %al,%es:(%rdi)
    46dd:	aa                   	stos   %al,%es:(%rdi)
    46de:	aa                   	stos   %al,%es:(%rdi)
    46df:	aa                   	stos   %al,%es:(%rdi)
    46e0:	aa                   	stos   %al,%es:(%rdi)
    46e1:	aa                   	stos   %al,%es:(%rdi)
    46e2:	aa                   	stos   %al,%es:(%rdi)
    46e3:	aa                   	stos   %al,%es:(%rdi)
    46e4:	aa                   	stos   %al,%es:(%rdi)
    46e5:	aa                   	stos   %al,%es:(%rdi)
    46e6:	aa                   	stos   %al,%es:(%rdi)
    46e7:	aa                   	stos   %al,%es:(%rdi)
    46e8:	aa                   	stos   %al,%es:(%rdi)
    46e9:	aa                   	stos   %al,%es:(%rdi)
    46ea:	aa                   	stos   %al,%es:(%rdi)
    46eb:	aa                   	stos   %al,%es:(%rdi)
    46ec:	aa                   	stos   %al,%es:(%rdi)
    46ed:	aa                   	stos   %al,%es:(%rdi)
    46ee:	aa                   	stos   %al,%es:(%rdi)
    46ef:	aa                   	stos   %al,%es:(%rdi)
    46f0:	aa                   	stos   %al,%es:(%rdi)
    46f1:	aa                   	stos   %al,%es:(%rdi)
    46f2:	aa                   	stos   %al,%es:(%rdi)
    46f3:	aa                   	stos   %al,%es:(%rdi)
    46f4:	aa                   	stos   %al,%es:(%rdi)
    46f5:	aa                   	stos   %al,%es:(%rdi)
    46f6:	aa                   	stos   %al,%es:(%rdi)
    46f7:	aa                   	stos   %al,%es:(%rdi)
    46f8:	aa                   	stos   %al,%es:(%rdi)
    46f9:	aa                   	stos   %al,%es:(%rdi)
    46fa:	aa                   	stos   %al,%es:(%rdi)
    46fb:	aa                   	stos   %al,%es:(%rdi)
    46fc:	aa                   	stos   %al,%es:(%rdi)
    46fd:	aa                   	stos   %al,%es:(%rdi)
    46fe:	aa                   	stos   %al,%es:(%rdi)
    46ff:	aa                   	stos   %al,%es:(%rdi)
    4700:	aa                   	stos   %al,%es:(%rdi)
    4701:	aa                   	stos   %al,%es:(%rdi)
    4702:	aa                   	stos   %al,%es:(%rdi)
    4703:	aa                   	stos   %al,%es:(%rdi)
    4704:	aa                   	stos   %al,%es:(%rdi)
    4705:	aa                   	stos   %al,%es:(%rdi)
    4706:	aa                   	stos   %al,%es:(%rdi)
    4707:	aa                   	stos   %al,%es:(%rdi)
    4708:	aa                   	stos   %al,%es:(%rdi)
    4709:	aa                   	stos   %al,%es:(%rdi)
    470a:	aa                   	stos   %al,%es:(%rdi)
    470b:	aa                   	stos   %al,%es:(%rdi)
    470c:	aa                   	stos   %al,%es:(%rdi)
    470d:	aa                   	stos   %al,%es:(%rdi)
    470e:	aa                   	stos   %al,%es:(%rdi)
    470f:	aa                   	stos   %al,%es:(%rdi)
    4710:	aa                   	stos   %al,%es:(%rdi)
    4711:	aa                   	stos   %al,%es:(%rdi)
    4712:	aa                   	stos   %al,%es:(%rdi)
    4713:	aa                   	stos   %al,%es:(%rdi)
    4714:	aa                   	stos   %al,%es:(%rdi)
    4715:	aa                   	stos   %al,%es:(%rdi)
    4716:	aa                   	stos   %al,%es:(%rdi)
    4717:	aa                   	stos   %al,%es:(%rdi)
    4718:	aa                   	stos   %al,%es:(%rdi)
    4719:	aa                   	stos   %al,%es:(%rdi)
    471a:	aa                   	stos   %al,%es:(%rdi)
    471b:	aa                   	stos   %al,%es:(%rdi)
    471c:	aa                   	stos   %al,%es:(%rdi)
    471d:	aa                   	stos   %al,%es:(%rdi)
    471e:	aa                   	stos   %al,%es:(%rdi)
    471f:	aa                   	stos   %al,%es:(%rdi)
    4720:	aa                   	stos   %al,%es:(%rdi)
    4721:	aa                   	stos   %al,%es:(%rdi)
    4722:	aa                   	stos   %al,%es:(%rdi)
    4723:	aa                   	stos   %al,%es:(%rdi)
    4724:	aa                   	stos   %al,%es:(%rdi)
    4725:	aa                   	stos   %al,%es:(%rdi)
    4726:	aa                   	stos   %al,%es:(%rdi)
    4727:	aa                   	stos   %al,%es:(%rdi)
    4728:	aa                   	stos   %al,%es:(%rdi)
    4729:	aa                   	stos   %al,%es:(%rdi)
    472a:	aa                   	stos   %al,%es:(%rdi)
    472b:	aa                   	stos   %al,%es:(%rdi)
    472c:	aa                   	stos   %al,%es:(%rdi)
    472d:	aa                   	stos   %al,%es:(%rdi)
    472e:	aa                   	stos   %al,%es:(%rdi)
    472f:	aa                   	stos   %al,%es:(%rdi)
    4730:	aa                   	stos   %al,%es:(%rdi)
    4731:	aa                   	stos   %al,%es:(%rdi)
    4732:	aa                   	stos   %al,%es:(%rdi)
    4733:	aa                   	stos   %al,%es:(%rdi)
    4734:	aa                   	stos   %al,%es:(%rdi)
    4735:	aa                   	stos   %al,%es:(%rdi)
    4736:	aa                   	stos   %al,%es:(%rdi)
    4737:	aa                   	stos   %al,%es:(%rdi)
    4738:	aa                   	stos   %al,%es:(%rdi)
    4739:	aa                   	stos   %al,%es:(%rdi)
    473a:	aa                   	stos   %al,%es:(%rdi)
    473b:	aa                   	stos   %al,%es:(%rdi)
    473c:	aa                   	stos   %al,%es:(%rdi)
    473d:	aa                   	stos   %al,%es:(%rdi)
    473e:	aa                   	stos   %al,%es:(%rdi)
    473f:	aa                   	stos   %al,%es:(%rdi)
    4740:	aa                   	stos   %al,%es:(%rdi)
    4741:	aa                   	stos   %al,%es:(%rdi)
    4742:	aa                   	stos   %al,%es:(%rdi)
    4743:	aa                   	stos   %al,%es:(%rdi)
    4744:	aa                   	stos   %al,%es:(%rdi)
    4745:	aa                   	stos   %al,%es:(%rdi)
    4746:	aa                   	stos   %al,%es:(%rdi)
    4747:	aa                   	stos   %al,%es:(%rdi)
    4748:	aa                   	stos   %al,%es:(%rdi)
    4749:	aa                   	stos   %al,%es:(%rdi)
    474a:	aa                   	stos   %al,%es:(%rdi)
    474b:	aa                   	stos   %al,%es:(%rdi)
    474c:	aa                   	stos   %al,%es:(%rdi)
    474d:	aa                   	stos   %al,%es:(%rdi)
    474e:	aa                   	stos   %al,%es:(%rdi)
    474f:	aa                   	stos   %al,%es:(%rdi)
    4750:	aa                   	stos   %al,%es:(%rdi)
    4751:	aa                   	stos   %al,%es:(%rdi)
    4752:	aa                   	stos   %al,%es:(%rdi)
    4753:	aa                   	stos   %al,%es:(%rdi)
    4754:	aa                   	stos   %al,%es:(%rdi)
    4755:	aa                   	stos   %al,%es:(%rdi)
    4756:	aa                   	stos   %al,%es:(%rdi)
    4757:	aa                   	stos   %al,%es:(%rdi)
    4758:	aa                   	stos   %al,%es:(%rdi)
    4759:	aa                   	stos   %al,%es:(%rdi)
    475a:	aa                   	stos   %al,%es:(%rdi)
    475b:	aa                   	stos   %al,%es:(%rdi)
    475c:	aa                   	stos   %al,%es:(%rdi)
    475d:	aa                   	stos   %al,%es:(%rdi)
    475e:	aa                   	stos   %al,%es:(%rdi)
    475f:	aa                   	stos   %al,%es:(%rdi)
    4760:	aa                   	stos   %al,%es:(%rdi)
    4761:	aa                   	stos   %al,%es:(%rdi)
    4762:	aa                   	stos   %al,%es:(%rdi)
    4763:	aa                   	stos   %al,%es:(%rdi)
    4764:	aa                   	stos   %al,%es:(%rdi)
    4765:	aa                   	stos   %al,%es:(%rdi)
    4766:	aa                   	stos   %al,%es:(%rdi)
    4767:	aa                   	stos   %al,%es:(%rdi)
    4768:	aa                   	stos   %al,%es:(%rdi)
    4769:	aa                   	stos   %al,%es:(%rdi)
    476a:	aa                   	stos   %al,%es:(%rdi)
    476b:	aa                   	stos   %al,%es:(%rdi)
    476c:	aa                   	stos   %al,%es:(%rdi)
    476d:	aa                   	stos   %al,%es:(%rdi)
    476e:	aa                   	stos   %al,%es:(%rdi)
    476f:	aa                   	stos   %al,%es:(%rdi)
    4770:	aa                   	stos   %al,%es:(%rdi)
    4771:	aa                   	stos   %al,%es:(%rdi)
    4772:	aa                   	stos   %al,%es:(%rdi)
    4773:	aa                   	stos   %al,%es:(%rdi)
    4774:	aa                   	stos   %al,%es:(%rdi)
    4775:	aa                   	stos   %al,%es:(%rdi)
    4776:	aa                   	stos   %al,%es:(%rdi)
    4777:	aa                   	stos   %al,%es:(%rdi)
    4778:	aa                   	stos   %al,%es:(%rdi)
    4779:	aa                   	stos   %al,%es:(%rdi)
    477a:	aa                   	stos   %al,%es:(%rdi)
    477b:	aa                   	stos   %al,%es:(%rdi)
    477c:	aa                   	stos   %al,%es:(%rdi)
    477d:	aa                   	stos   %al,%es:(%rdi)
    477e:	aa                   	stos   %al,%es:(%rdi)
    477f:	aa                   	stos   %al,%es:(%rdi)
    4780:	aa                   	stos   %al,%es:(%rdi)
    4781:	aa                   	stos   %al,%es:(%rdi)
    4782:	aa                   	stos   %al,%es:(%rdi)
    4783:	aa                   	stos   %al,%es:(%rdi)
    4784:	aa                   	stos   %al,%es:(%rdi)
    4785:	aa                   	stos   %al,%es:(%rdi)
    4786:	aa                   	stos   %al,%es:(%rdi)
    4787:	aa                   	stos   %al,%es:(%rdi)
    4788:	aa                   	stos   %al,%es:(%rdi)
    4789:	aa                   	stos   %al,%es:(%rdi)
    478a:	aa                   	stos   %al,%es:(%rdi)
    478b:	aa                   	stos   %al,%es:(%rdi)
    478c:	aa                   	stos   %al,%es:(%rdi)
    478d:	aa                   	stos   %al,%es:(%rdi)
    478e:	aa                   	stos   %al,%es:(%rdi)
    478f:	aa                   	stos   %al,%es:(%rdi)
    4790:	aa                   	stos   %al,%es:(%rdi)
    4791:	aa                   	stos   %al,%es:(%rdi)
    4792:	aa                   	stos   %al,%es:(%rdi)
    4793:	aa                   	stos   %al,%es:(%rdi)
    4794:	aa                   	stos   %al,%es:(%rdi)
    4795:	aa                   	stos   %al,%es:(%rdi)
    4796:	aa                   	stos   %al,%es:(%rdi)
    4797:	aa                   	stos   %al,%es:(%rdi)
    4798:	aa                   	stos   %al,%es:(%rdi)
    4799:	aa                   	stos   %al,%es:(%rdi)
    479a:	aa                   	stos   %al,%es:(%rdi)
    479b:	aa                   	stos   %al,%es:(%rdi)
    479c:	aa                   	stos   %al,%es:(%rdi)
    479d:	aa                   	stos   %al,%es:(%rdi)
    479e:	aa                   	stos   %al,%es:(%rdi)
    479f:	aa                   	stos   %al,%es:(%rdi)
    47a0:	aa                   	stos   %al,%es:(%rdi)
    47a1:	aa                   	stos   %al,%es:(%rdi)
    47a2:	aa                   	stos   %al,%es:(%rdi)
    47a3:	aa                   	stos   %al,%es:(%rdi)
    47a4:	aa                   	stos   %al,%es:(%rdi)
    47a5:	aa                   	stos   %al,%es:(%rdi)
    47a6:	aa                   	stos   %al,%es:(%rdi)
    47a7:	aa                   	stos   %al,%es:(%rdi)
    47a8:	aa                   	stos   %al,%es:(%rdi)
    47a9:	aa                   	stos   %al,%es:(%rdi)
    47aa:	aa                   	stos   %al,%es:(%rdi)
    47ab:	aa                   	stos   %al,%es:(%rdi)
    47ac:	aa                   	stos   %al,%es:(%rdi)
    47ad:	aa                   	stos   %al,%es:(%rdi)
    47ae:	aa                   	stos   %al,%es:(%rdi)
    47af:	aa                   	stos   %al,%es:(%rdi)
    47b0:	aa                   	stos   %al,%es:(%rdi)
    47b1:	aa                   	stos   %al,%es:(%rdi)
    47b2:	aa                   	stos   %al,%es:(%rdi)
    47b3:	aa                   	stos   %al,%es:(%rdi)
    47b4:	aa                   	stos   %al,%es:(%rdi)
    47b5:	aa                   	stos   %al,%es:(%rdi)
    47b6:	aa                   	stos   %al,%es:(%rdi)
    47b7:	aa                   	stos   %al,%es:(%rdi)
    47b8:	aa                   	stos   %al,%es:(%rdi)
    47b9:	aa                   	stos   %al,%es:(%rdi)
    47ba:	aa                   	stos   %al,%es:(%rdi)
    47bb:	aa                   	stos   %al,%es:(%rdi)
    47bc:	aa                   	stos   %al,%es:(%rdi)
    47bd:	aa                   	stos   %al,%es:(%rdi)
    47be:	aa                   	stos   %al,%es:(%rdi)
    47bf:	aa                   	stos   %al,%es:(%rdi)
    47c0:	aa                   	stos   %al,%es:(%rdi)
    47c1:	aa                   	stos   %al,%es:(%rdi)
    47c2:	aa                   	stos   %al,%es:(%rdi)
    47c3:	aa                   	stos   %al,%es:(%rdi)
    47c4:	aa                   	stos   %al,%es:(%rdi)
    47c5:	aa                   	stos   %al,%es:(%rdi)
    47c6:	aa                   	stos   %al,%es:(%rdi)
    47c7:	aa                   	stos   %al,%es:(%rdi)
    47c8:	aa                   	stos   %al,%es:(%rdi)
    47c9:	aa                   	stos   %al,%es:(%rdi)
    47ca:	aa                   	stos   %al,%es:(%rdi)
    47cb:	aa                   	stos   %al,%es:(%rdi)
    47cc:	aa                   	stos   %al,%es:(%rdi)
    47cd:	aa                   	stos   %al,%es:(%rdi)
    47ce:	aa                   	stos   %al,%es:(%rdi)
    47cf:	aa                   	stos   %al,%es:(%rdi)
    47d0:	aa                   	stos   %al,%es:(%rdi)
    47d1:	aa                   	stos   %al,%es:(%rdi)
    47d2:	aa                   	stos   %al,%es:(%rdi)
    47d3:	aa                   	stos   %al,%es:(%rdi)
    47d4:	aa                   	stos   %al,%es:(%rdi)
    47d5:	aa                   	stos   %al,%es:(%rdi)
    47d6:	aa                   	stos   %al,%es:(%rdi)
    47d7:	aa                   	stos   %al,%es:(%rdi)
    47d8:	aa                   	stos   %al,%es:(%rdi)
    47d9:	aa                   	stos   %al,%es:(%rdi)
    47da:	aa                   	stos   %al,%es:(%rdi)
    47db:	aa                   	stos   %al,%es:(%rdi)
    47dc:	aa                   	stos   %al,%es:(%rdi)
    47dd:	aa                   	stos   %al,%es:(%rdi)
    47de:	aa                   	stos   %al,%es:(%rdi)
    47df:	aa                   	stos   %al,%es:(%rdi)
    47e0:	aa                   	stos   %al,%es:(%rdi)
    47e1:	aa                   	stos   %al,%es:(%rdi)
    47e2:	aa                   	stos   %al,%es:(%rdi)
    47e3:	aa                   	stos   %al,%es:(%rdi)
    47e4:	aa                   	stos   %al,%es:(%rdi)
    47e5:	aa                   	stos   %al,%es:(%rdi)
    47e6:	aa                   	stos   %al,%es:(%rdi)
    47e7:	aa                   	stos   %al,%es:(%rdi)
    47e8:	aa                   	stos   %al,%es:(%rdi)
    47e9:	aa                   	stos   %al,%es:(%rdi)
    47ea:	aa                   	stos   %al,%es:(%rdi)
    47eb:	aa                   	stos   %al,%es:(%rdi)
    47ec:	aa                   	stos   %al,%es:(%rdi)
    47ed:	aa                   	stos   %al,%es:(%rdi)
    47ee:	aa                   	stos   %al,%es:(%rdi)
    47ef:	aa                   	stos   %al,%es:(%rdi)
    47f0:	aa                   	stos   %al,%es:(%rdi)
    47f1:	aa                   	stos   %al,%es:(%rdi)
    47f2:	aa                   	stos   %al,%es:(%rdi)
    47f3:	aa                   	stos   %al,%es:(%rdi)
    47f4:	aa                   	stos   %al,%es:(%rdi)
    47f5:	aa                   	stos   %al,%es:(%rdi)
    47f6:	aa                   	stos   %al,%es:(%rdi)
    47f7:	aa                   	stos   %al,%es:(%rdi)
    47f8:	aa                   	stos   %al,%es:(%rdi)
    47f9:	aa                   	stos   %al,%es:(%rdi)
    47fa:	aa                   	stos   %al,%es:(%rdi)
    47fb:	aa                   	stos   %al,%es:(%rdi)
    47fc:	aa                   	stos   %al,%es:(%rdi)
    47fd:	aa                   	stos   %al,%es:(%rdi)
    47fe:	aa                   	stos   %al,%es:(%rdi)
    47ff:	aa                   	stos   %al,%es:(%rdi)
    4800:	aa                   	stos   %al,%es:(%rdi)
    4801:	aa                   	stos   %al,%es:(%rdi)
    4802:	aa                   	stos   %al,%es:(%rdi)
    4803:	aa                   	stos   %al,%es:(%rdi)
    4804:	aa                   	stos   %al,%es:(%rdi)
    4805:	aa                   	stos   %al,%es:(%rdi)
    4806:	aa                   	stos   %al,%es:(%rdi)
    4807:	aa                   	stos   %al,%es:(%rdi)
    4808:	aa                   	stos   %al,%es:(%rdi)
    4809:	aa                   	stos   %al,%es:(%rdi)
    480a:	aa                   	stos   %al,%es:(%rdi)
    480b:	aa                   	stos   %al,%es:(%rdi)
    480c:	aa                   	stos   %al,%es:(%rdi)
    480d:	aa                   	stos   %al,%es:(%rdi)
    480e:	aa                   	stos   %al,%es:(%rdi)
    480f:	aa                   	stos   %al,%es:(%rdi)
    4810:	aa                   	stos   %al,%es:(%rdi)
    4811:	aa                   	stos   %al,%es:(%rdi)
    4812:	aa                   	stos   %al,%es:(%rdi)
    4813:	aa                   	stos   %al,%es:(%rdi)
    4814:	aa                   	stos   %al,%es:(%rdi)
    4815:	aa                   	stos   %al,%es:(%rdi)
    4816:	aa                   	stos   %al,%es:(%rdi)
    4817:	aa                   	stos   %al,%es:(%rdi)
    4818:	aa                   	stos   %al,%es:(%rdi)
    4819:	aa                   	stos   %al,%es:(%rdi)
    481a:	aa                   	stos   %al,%es:(%rdi)
    481b:	aa                   	stos   %al,%es:(%rdi)
    481c:	aa                   	stos   %al,%es:(%rdi)
    481d:	aa                   	stos   %al,%es:(%rdi)
    481e:	aa                   	stos   %al,%es:(%rdi)
    481f:	aa                   	stos   %al,%es:(%rdi)
    4820:	aa                   	stos   %al,%es:(%rdi)
    4821:	aa                   	stos   %al,%es:(%rdi)
    4822:	aa                   	stos   %al,%es:(%rdi)
    4823:	aa                   	stos   %al,%es:(%rdi)
    4824:	aa                   	stos   %al,%es:(%rdi)
    4825:	aa                   	stos   %al,%es:(%rdi)
    4826:	aa                   	stos   %al,%es:(%rdi)
    4827:	aa                   	stos   %al,%es:(%rdi)
    4828:	aa                   	stos   %al,%es:(%rdi)
    4829:	aa                   	stos   %al,%es:(%rdi)
    482a:	aa                   	stos   %al,%es:(%rdi)
    482b:	aa                   	stos   %al,%es:(%rdi)
    482c:	aa                   	stos   %al,%es:(%rdi)
    482d:	aa                   	stos   %al,%es:(%rdi)
    482e:	aa                   	stos   %al,%es:(%rdi)
    482f:	aa                   	stos   %al,%es:(%rdi)
    4830:	aa                   	stos   %al,%es:(%rdi)
    4831:	aa                   	stos   %al,%es:(%rdi)
    4832:	aa                   	stos   %al,%es:(%rdi)
    4833:	aa                   	stos   %al,%es:(%rdi)
    4834:	aa                   	stos   %al,%es:(%rdi)
    4835:	aa                   	stos   %al,%es:(%rdi)
    4836:	aa                   	stos   %al,%es:(%rdi)
    4837:	aa                   	stos   %al,%es:(%rdi)
    4838:	aa                   	stos   %al,%es:(%rdi)
    4839:	aa                   	stos   %al,%es:(%rdi)
    483a:	aa                   	stos   %al,%es:(%rdi)
    483b:	aa                   	stos   %al,%es:(%rdi)
    483c:	aa                   	stos   %al,%es:(%rdi)
    483d:	aa                   	stos   %al,%es:(%rdi)
    483e:	aa                   	stos   %al,%es:(%rdi)
    483f:	aa                   	stos   %al,%es:(%rdi)
    4840:	aa                   	stos   %al,%es:(%rdi)
    4841:	aa                   	stos   %al,%es:(%rdi)
    4842:	aa                   	stos   %al,%es:(%rdi)
    4843:	aa                   	stos   %al,%es:(%rdi)
    4844:	aa                   	stos   %al,%es:(%rdi)
    4845:	aa                   	stos   %al,%es:(%rdi)
    4846:	aa                   	stos   %al,%es:(%rdi)
    4847:	aa                   	stos   %al,%es:(%rdi)
    4848:	aa                   	stos   %al,%es:(%rdi)
    4849:	aa                   	stos   %al,%es:(%rdi)
    484a:	aa                   	stos   %al,%es:(%rdi)
    484b:	aa                   	stos   %al,%es:(%rdi)
    484c:	aa                   	stos   %al,%es:(%rdi)
    484d:	aa                   	stos   %al,%es:(%rdi)
    484e:	aa                   	stos   %al,%es:(%rdi)
    484f:	aa                   	stos   %al,%es:(%rdi)
    4850:	aa                   	stos   %al,%es:(%rdi)
    4851:	aa                   	stos   %al,%es:(%rdi)
    4852:	aa                   	stos   %al,%es:(%rdi)
    4853:	aa                   	stos   %al,%es:(%rdi)
    4854:	aa                   	stos   %al,%es:(%rdi)
    4855:	aa                   	stos   %al,%es:(%rdi)
    4856:	aa                   	stos   %al,%es:(%rdi)
    4857:	aa                   	stos   %al,%es:(%rdi)
    4858:	aa                   	stos   %al,%es:(%rdi)
    4859:	aa                   	stos   %al,%es:(%rdi)
    485a:	aa                   	stos   %al,%es:(%rdi)
    485b:	aa                   	stos   %al,%es:(%rdi)
    485c:	aa                   	stos   %al,%es:(%rdi)
    485d:	aa                   	stos   %al,%es:(%rdi)
    485e:	aa                   	stos   %al,%es:(%rdi)
    485f:	aa                   	stos   %al,%es:(%rdi)
    4860:	aa                   	stos   %al,%es:(%rdi)
    4861:	aa                   	stos   %al,%es:(%rdi)
    4862:	aa                   	stos   %al,%es:(%rdi)
    4863:	aa                   	stos   %al,%es:(%rdi)
    4864:	aa                   	stos   %al,%es:(%rdi)
    4865:	aa                   	stos   %al,%es:(%rdi)
    4866:	aa                   	stos   %al,%es:(%rdi)
    4867:	aa                   	stos   %al,%es:(%rdi)
    4868:	aa                   	stos   %al,%es:(%rdi)
    4869:	aa                   	stos   %al,%es:(%rdi)
    486a:	aa                   	stos   %al,%es:(%rdi)
    486b:	aa                   	stos   %al,%es:(%rdi)
    486c:	aa                   	stos   %al,%es:(%rdi)
    486d:	aa                   	stos   %al,%es:(%rdi)
    486e:	aa                   	stos   %al,%es:(%rdi)
    486f:	aa                   	stos   %al,%es:(%rdi)
    4870:	aa                   	stos   %al,%es:(%rdi)
    4871:	aa                   	stos   %al,%es:(%rdi)
    4872:	aa                   	stos   %al,%es:(%rdi)
    4873:	aa                   	stos   %al,%es:(%rdi)
    4874:	aa                   	stos   %al,%es:(%rdi)
    4875:	aa                   	stos   %al,%es:(%rdi)
    4876:	aa                   	stos   %al,%es:(%rdi)
    4877:	aa                   	stos   %al,%es:(%rdi)
    4878:	aa                   	stos   %al,%es:(%rdi)
    4879:	aa                   	stos   %al,%es:(%rdi)
    487a:	aa                   	stos   %al,%es:(%rdi)
    487b:	aa                   	stos   %al,%es:(%rdi)
    487c:	aa                   	stos   %al,%es:(%rdi)
    487d:	aa                   	stos   %al,%es:(%rdi)
    487e:	aa                   	stos   %al,%es:(%rdi)
    487f:	aa                   	stos   %al,%es:(%rdi)
    4880:	aa                   	stos   %al,%es:(%rdi)
    4881:	aa                   	stos   %al,%es:(%rdi)
    4882:	aa                   	stos   %al,%es:(%rdi)
    4883:	aa                   	stos   %al,%es:(%rdi)
    4884:	aa                   	stos   %al,%es:(%rdi)
    4885:	aa                   	stos   %al,%es:(%rdi)
    4886:	aa                   	stos   %al,%es:(%rdi)
    4887:	aa                   	stos   %al,%es:(%rdi)
    4888:	aa                   	stos   %al,%es:(%rdi)
    4889:	aa                   	stos   %al,%es:(%rdi)
    488a:	aa                   	stos   %al,%es:(%rdi)
    488b:	aa                   	stos   %al,%es:(%rdi)
    488c:	aa                   	stos   %al,%es:(%rdi)
    488d:	aa                   	stos   %al,%es:(%rdi)
    488e:	aa                   	stos   %al,%es:(%rdi)
    488f:	aa                   	stos   %al,%es:(%rdi)
    4890:	aa                   	stos   %al,%es:(%rdi)
    4891:	aa                   	stos   %al,%es:(%rdi)
    4892:	aa                   	stos   %al,%es:(%rdi)
    4893:	aa                   	stos   %al,%es:(%rdi)
    4894:	aa                   	stos   %al,%es:(%rdi)
    4895:	aa                   	stos   %al,%es:(%rdi)
    4896:	aa                   	stos   %al,%es:(%rdi)
    4897:	aa                   	stos   %al,%es:(%rdi)
    4898:	aa                   	stos   %al,%es:(%rdi)
    4899:	aa                   	stos   %al,%es:(%rdi)
    489a:	aa                   	stos   %al,%es:(%rdi)
    489b:	aa                   	stos   %al,%es:(%rdi)
    489c:	aa                   	stos   %al,%es:(%rdi)
    489d:	aa                   	stos   %al,%es:(%rdi)
    489e:	aa                   	stos   %al,%es:(%rdi)
    489f:	aa                   	stos   %al,%es:(%rdi)
    48a0:	aa                   	stos   %al,%es:(%rdi)
    48a1:	aa                   	stos   %al,%es:(%rdi)
    48a2:	aa                   	stos   %al,%es:(%rdi)
    48a3:	aa                   	stos   %al,%es:(%rdi)
    48a4:	aa                   	stos   %al,%es:(%rdi)
    48a5:	aa                   	stos   %al,%es:(%rdi)
    48a6:	aa                   	stos   %al,%es:(%rdi)
    48a7:	aa                   	stos   %al,%es:(%rdi)
    48a8:	aa                   	stos   %al,%es:(%rdi)
    48a9:	aa                   	stos   %al,%es:(%rdi)
    48aa:	aa                   	stos   %al,%es:(%rdi)
    48ab:	aa                   	stos   %al,%es:(%rdi)
    48ac:	aa                   	stos   %al,%es:(%rdi)
    48ad:	aa                   	stos   %al,%es:(%rdi)
    48ae:	aa                   	stos   %al,%es:(%rdi)
    48af:	aa                   	stos   %al,%es:(%rdi)
    48b0:	aa                   	stos   %al,%es:(%rdi)
    48b1:	aa                   	stos   %al,%es:(%rdi)
    48b2:	aa                   	stos   %al,%es:(%rdi)
    48b3:	aa                   	stos   %al,%es:(%rdi)
    48b4:	aa                   	stos   %al,%es:(%rdi)
    48b5:	aa                   	stos   %al,%es:(%rdi)
    48b6:	aa                   	stos   %al,%es:(%rdi)
    48b7:	aa                   	stos   %al,%es:(%rdi)
    48b8:	aa                   	stos   %al,%es:(%rdi)
    48b9:	aa                   	stos   %al,%es:(%rdi)
    48ba:	aa                   	stos   %al,%es:(%rdi)
    48bb:	aa                   	stos   %al,%es:(%rdi)
    48bc:	aa                   	stos   %al,%es:(%rdi)
    48bd:	aa                   	stos   %al,%es:(%rdi)
    48be:	aa                   	stos   %al,%es:(%rdi)
    48bf:	aa                   	stos   %al,%es:(%rdi)
    48c0:	aa                   	stos   %al,%es:(%rdi)
    48c1:	aa                   	stos   %al,%es:(%rdi)
    48c2:	aa                   	stos   %al,%es:(%rdi)
    48c3:	aa                   	stos   %al,%es:(%rdi)
    48c4:	aa                   	stos   %al,%es:(%rdi)
    48c5:	aa                   	stos   %al,%es:(%rdi)
    48c6:	aa                   	stos   %al,%es:(%rdi)
    48c7:	aa                   	stos   %al,%es:(%rdi)
    48c8:	aa                   	stos   %al,%es:(%rdi)
    48c9:	aa                   	stos   %al,%es:(%rdi)
    48ca:	aa                   	stos   %al,%es:(%rdi)
    48cb:	aa                   	stos   %al,%es:(%rdi)
    48cc:	aa                   	stos   %al,%es:(%rdi)
    48cd:	aa                   	stos   %al,%es:(%rdi)
    48ce:	aa                   	stos   %al,%es:(%rdi)
    48cf:	aa                   	stos   %al,%es:(%rdi)
    48d0:	aa                   	stos   %al,%es:(%rdi)
    48d1:	aa                   	stos   %al,%es:(%rdi)
    48d2:	aa                   	stos   %al,%es:(%rdi)
    48d3:	aa                   	stos   %al,%es:(%rdi)
    48d4:	aa                   	stos   %al,%es:(%rdi)
    48d5:	aa                   	stos   %al,%es:(%rdi)
    48d6:	aa                   	stos   %al,%es:(%rdi)
    48d7:	aa                   	stos   %al,%es:(%rdi)
    48d8:	aa                   	stos   %al,%es:(%rdi)
    48d9:	aa                   	stos   %al,%es:(%rdi)
    48da:	aa                   	stos   %al,%es:(%rdi)
    48db:	aa                   	stos   %al,%es:(%rdi)
    48dc:	aa                   	stos   %al,%es:(%rdi)
    48dd:	aa                   	stos   %al,%es:(%rdi)
    48de:	aa                   	stos   %al,%es:(%rdi)
    48df:	aa                   	stos   %al,%es:(%rdi)
    48e0:	aa                   	stos   %al,%es:(%rdi)
    48e1:	aa                   	stos   %al,%es:(%rdi)
    48e2:	aa                   	stos   %al,%es:(%rdi)
    48e3:	aa                   	stos   %al,%es:(%rdi)
    48e4:	aa                   	stos   %al,%es:(%rdi)
    48e5:	aa                   	stos   %al,%es:(%rdi)
    48e6:	aa                   	stos   %al,%es:(%rdi)
    48e7:	aa                   	stos   %al,%es:(%rdi)
    48e8:	aa                   	stos   %al,%es:(%rdi)
    48e9:	aa                   	stos   %al,%es:(%rdi)
    48ea:	aa                   	stos   %al,%es:(%rdi)
    48eb:	aa                   	stos   %al,%es:(%rdi)
    48ec:	aa                   	stos   %al,%es:(%rdi)
    48ed:	aa                   	stos   %al,%es:(%rdi)
    48ee:	aa                   	stos   %al,%es:(%rdi)
    48ef:	aa                   	stos   %al,%es:(%rdi)
    48f0:	aa                   	stos   %al,%es:(%rdi)
    48f1:	aa                   	stos   %al,%es:(%rdi)
    48f2:	aa                   	stos   %al,%es:(%rdi)
    48f3:	aa                   	stos   %al,%es:(%rdi)
    48f4:	aa                   	stos   %al,%es:(%rdi)
    48f5:	aa                   	stos   %al,%es:(%rdi)
    48f6:	aa                   	stos   %al,%es:(%rdi)
    48f7:	aa                   	stos   %al,%es:(%rdi)
    48f8:	aa                   	stos   %al,%es:(%rdi)
    48f9:	aa                   	stos   %al,%es:(%rdi)
    48fa:	aa                   	stos   %al,%es:(%rdi)
    48fb:	aa                   	stos   %al,%es:(%rdi)
    48fc:	aa                   	stos   %al,%es:(%rdi)
    48fd:	aa                   	stos   %al,%es:(%rdi)
    48fe:	aa                   	stos   %al,%es:(%rdi)
    48ff:	aa                   	stos   %al,%es:(%rdi)
    4900:	aa                   	stos   %al,%es:(%rdi)
    4901:	aa                   	stos   %al,%es:(%rdi)
    4902:	aa                   	stos   %al,%es:(%rdi)
    4903:	aa                   	stos   %al,%es:(%rdi)
    4904:	aa                   	stos   %al,%es:(%rdi)
    4905:	aa                   	stos   %al,%es:(%rdi)
    4906:	aa                   	stos   %al,%es:(%rdi)
    4907:	aa                   	stos   %al,%es:(%rdi)
    4908:	aa                   	stos   %al,%es:(%rdi)
    4909:	aa                   	stos   %al,%es:(%rdi)
    490a:	aa                   	stos   %al,%es:(%rdi)
    490b:	aa                   	stos   %al,%es:(%rdi)
    490c:	aa                   	stos   %al,%es:(%rdi)
    490d:	aa                   	stos   %al,%es:(%rdi)
    490e:	aa                   	stos   %al,%es:(%rdi)
    490f:	aa                   	stos   %al,%es:(%rdi)
    4910:	aa                   	stos   %al,%es:(%rdi)
    4911:	aa                   	stos   %al,%es:(%rdi)
    4912:	aa                   	stos   %al,%es:(%rdi)
    4913:	aa                   	stos   %al,%es:(%rdi)
    4914:	aa                   	stos   %al,%es:(%rdi)
    4915:	aa                   	stos   %al,%es:(%rdi)
    4916:	aa                   	stos   %al,%es:(%rdi)
    4917:	aa                   	stos   %al,%es:(%rdi)
    4918:	aa                   	stos   %al,%es:(%rdi)
    4919:	aa                   	stos   %al,%es:(%rdi)
    491a:	aa                   	stos   %al,%es:(%rdi)
    491b:	aa                   	stos   %al,%es:(%rdi)
    491c:	aa                   	stos   %al,%es:(%rdi)
    491d:	aa                   	stos   %al,%es:(%rdi)
    491e:	aa                   	stos   %al,%es:(%rdi)
    491f:	aa                   	stos   %al,%es:(%rdi)
    4920:	aa                   	stos   %al,%es:(%rdi)
    4921:	aa                   	stos   %al,%es:(%rdi)
    4922:	aa                   	stos   %al,%es:(%rdi)
    4923:	aa                   	stos   %al,%es:(%rdi)
    4924:	aa                   	stos   %al,%es:(%rdi)
    4925:	aa                   	stos   %al,%es:(%rdi)
    4926:	aa                   	stos   %al,%es:(%rdi)
    4927:	aa                   	stos   %al,%es:(%rdi)
    4928:	aa                   	stos   %al,%es:(%rdi)
    4929:	aa                   	stos   %al,%es:(%rdi)
    492a:	aa                   	stos   %al,%es:(%rdi)
    492b:	aa                   	stos   %al,%es:(%rdi)
    492c:	aa                   	stos   %al,%es:(%rdi)
    492d:	aa                   	stos   %al,%es:(%rdi)
    492e:	aa                   	stos   %al,%es:(%rdi)
    492f:	aa                   	stos   %al,%es:(%rdi)
    4930:	aa                   	stos   %al,%es:(%rdi)
    4931:	aa                   	stos   %al,%es:(%rdi)
    4932:	aa                   	stos   %al,%es:(%rdi)
    4933:	aa                   	stos   %al,%es:(%rdi)
    4934:	aa                   	stos   %al,%es:(%rdi)
    4935:	aa                   	stos   %al,%es:(%rdi)
    4936:	aa                   	stos   %al,%es:(%rdi)
    4937:	aa                   	stos   %al,%es:(%rdi)
    4938:	aa                   	stos   %al,%es:(%rdi)
    4939:	aa                   	stos   %al,%es:(%rdi)
    493a:	aa                   	stos   %al,%es:(%rdi)
    493b:	aa                   	stos   %al,%es:(%rdi)
    493c:	aa                   	stos   %al,%es:(%rdi)
    493d:	aa                   	stos   %al,%es:(%rdi)
    493e:	aa                   	stos   %al,%es:(%rdi)
    493f:	aa                   	stos   %al,%es:(%rdi)
    4940:	aa                   	stos   %al,%es:(%rdi)
    4941:	aa                   	stos   %al,%es:(%rdi)
    4942:	aa                   	stos   %al,%es:(%rdi)
    4943:	aa                   	stos   %al,%es:(%rdi)
    4944:	aa                   	stos   %al,%es:(%rdi)
    4945:	aa                   	stos   %al,%es:(%rdi)
    4946:	aa                   	stos   %al,%es:(%rdi)
    4947:	aa                   	stos   %al,%es:(%rdi)
    4948:	aa                   	stos   %al,%es:(%rdi)
    4949:	aa                   	stos   %al,%es:(%rdi)
    494a:	aa                   	stos   %al,%es:(%rdi)
    494b:	aa                   	stos   %al,%es:(%rdi)
    494c:	aa                   	stos   %al,%es:(%rdi)
    494d:	aa                   	stos   %al,%es:(%rdi)
    494e:	aa                   	stos   %al,%es:(%rdi)
    494f:	aa                   	stos   %al,%es:(%rdi)
    4950:	aa                   	stos   %al,%es:(%rdi)
    4951:	aa                   	stos   %al,%es:(%rdi)
    4952:	aa                   	stos   %al,%es:(%rdi)
    4953:	aa                   	stos   %al,%es:(%rdi)
    4954:	aa                   	stos   %al,%es:(%rdi)
    4955:	aa                   	stos   %al,%es:(%rdi)
    4956:	aa                   	stos   %al,%es:(%rdi)
    4957:	aa                   	stos   %al,%es:(%rdi)
    4958:	aa                   	stos   %al,%es:(%rdi)
    4959:	aa                   	stos   %al,%es:(%rdi)
    495a:	aa                   	stos   %al,%es:(%rdi)
    495b:	aa                   	stos   %al,%es:(%rdi)
    495c:	aa                   	stos   %al,%es:(%rdi)
    495d:	aa                   	stos   %al,%es:(%rdi)
    495e:	aa                   	stos   %al,%es:(%rdi)
    495f:	aa                   	stos   %al,%es:(%rdi)
    4960:	aa                   	stos   %al,%es:(%rdi)
    4961:	aa                   	stos   %al,%es:(%rdi)
    4962:	aa                   	stos   %al,%es:(%rdi)
    4963:	aa                   	stos   %al,%es:(%rdi)
    4964:	aa                   	stos   %al,%es:(%rdi)
    4965:	aa                   	stos   %al,%es:(%rdi)
    4966:	aa                   	stos   %al,%es:(%rdi)
    4967:	aa                   	stos   %al,%es:(%rdi)
    4968:	aa                   	stos   %al,%es:(%rdi)
    4969:	aa                   	stos   %al,%es:(%rdi)
    496a:	aa                   	stos   %al,%es:(%rdi)
    496b:	aa                   	stos   %al,%es:(%rdi)
    496c:	aa                   	stos   %al,%es:(%rdi)
    496d:	aa                   	stos   %al,%es:(%rdi)
    496e:	aa                   	stos   %al,%es:(%rdi)
    496f:	aa                   	stos   %al,%es:(%rdi)
    4970:	aa                   	stos   %al,%es:(%rdi)
    4971:	aa                   	stos   %al,%es:(%rdi)
    4972:	aa                   	stos   %al,%es:(%rdi)
    4973:	aa                   	stos   %al,%es:(%rdi)
    4974:	aa                   	stos   %al,%es:(%rdi)
    4975:	aa                   	stos   %al,%es:(%rdi)
    4976:	aa                   	stos   %al,%es:(%rdi)
    4977:	aa                   	stos   %al,%es:(%rdi)
    4978:	aa                   	stos   %al,%es:(%rdi)
    4979:	aa                   	stos   %al,%es:(%rdi)
    497a:	aa                   	stos   %al,%es:(%rdi)
    497b:	aa                   	stos   %al,%es:(%rdi)
    497c:	aa                   	stos   %al,%es:(%rdi)
    497d:	aa                   	stos   %al,%es:(%rdi)
    497e:	aa                   	stos   %al,%es:(%rdi)
    497f:	aa                   	stos   %al,%es:(%rdi)
    4980:	aa                   	stos   %al,%es:(%rdi)
    4981:	aa                   	stos   %al,%es:(%rdi)
    4982:	aa                   	stos   %al,%es:(%rdi)
    4983:	aa                   	stos   %al,%es:(%rdi)
    4984:	aa                   	stos   %al,%es:(%rdi)
    4985:	aa                   	stos   %al,%es:(%rdi)
    4986:	aa                   	stos   %al,%es:(%rdi)
    4987:	aa                   	stos   %al,%es:(%rdi)
    4988:	aa                   	stos   %al,%es:(%rdi)
    4989:	aa                   	stos   %al,%es:(%rdi)
    498a:	aa                   	stos   %al,%es:(%rdi)
    498b:	aa                   	stos   %al,%es:(%rdi)
    498c:	aa                   	stos   %al,%es:(%rdi)
    498d:	aa                   	stos   %al,%es:(%rdi)
    498e:	aa                   	stos   %al,%es:(%rdi)
    498f:	aa                   	stos   %al,%es:(%rdi)
    4990:	aa                   	stos   %al,%es:(%rdi)
    4991:	aa                   	stos   %al,%es:(%rdi)
    4992:	aa                   	stos   %al,%es:(%rdi)
    4993:	aa                   	stos   %al,%es:(%rdi)
    4994:	aa                   	stos   %al,%es:(%rdi)
    4995:	aa                   	stos   %al,%es:(%rdi)
    4996:	aa                   	stos   %al,%es:(%rdi)
    4997:	aa                   	stos   %al,%es:(%rdi)
    4998:	aa                   	stos   %al,%es:(%rdi)
    4999:	aa                   	stos   %al,%es:(%rdi)
    499a:	aa                   	stos   %al,%es:(%rdi)
    499b:	aa                   	stos   %al,%es:(%rdi)
    499c:	aa                   	stos   %al,%es:(%rdi)
    499d:	aa                   	stos   %al,%es:(%rdi)
    499e:	aa                   	stos   %al,%es:(%rdi)
    499f:	aa                   	stos   %al,%es:(%rdi)
    49a0:	aa                   	stos   %al,%es:(%rdi)
    49a1:	aa                   	stos   %al,%es:(%rdi)
    49a2:	aa                   	stos   %al,%es:(%rdi)
    49a3:	aa                   	stos   %al,%es:(%rdi)
    49a4:	aa                   	stos   %al,%es:(%rdi)
    49a5:	aa                   	stos   %al,%es:(%rdi)
    49a6:	aa                   	stos   %al,%es:(%rdi)
    49a7:	aa                   	stos   %al,%es:(%rdi)
    49a8:	aa                   	stos   %al,%es:(%rdi)
    49a9:	aa                   	stos   %al,%es:(%rdi)
    49aa:	aa                   	stos   %al,%es:(%rdi)
    49ab:	aa                   	stos   %al,%es:(%rdi)
    49ac:	aa                   	stos   %al,%es:(%rdi)
    49ad:	aa                   	stos   %al,%es:(%rdi)
    49ae:	aa                   	stos   %al,%es:(%rdi)
    49af:	aa                   	stos   %al,%es:(%rdi)
    49b0:	aa                   	stos   %al,%es:(%rdi)
    49b1:	aa                   	stos   %al,%es:(%rdi)
    49b2:	aa                   	stos   %al,%es:(%rdi)
    49b3:	aa                   	stos   %al,%es:(%rdi)
    49b4:	aa                   	stos   %al,%es:(%rdi)
    49b5:	aa                   	stos   %al,%es:(%rdi)
    49b6:	aa                   	stos   %al,%es:(%rdi)
    49b7:	aa                   	stos   %al,%es:(%rdi)
    49b8:	aa                   	stos   %al,%es:(%rdi)
    49b9:	aa                   	stos   %al,%es:(%rdi)
    49ba:	aa                   	stos   %al,%es:(%rdi)
    49bb:	aa                   	stos   %al,%es:(%rdi)
    49bc:	aa                   	stos   %al,%es:(%rdi)
    49bd:	aa                   	stos   %al,%es:(%rdi)
    49be:	aa                   	stos   %al,%es:(%rdi)
    49bf:	aa                   	stos   %al,%es:(%rdi)
    49c0:	aa                   	stos   %al,%es:(%rdi)
    49c1:	aa                   	stos   %al,%es:(%rdi)
    49c2:	aa                   	stos   %al,%es:(%rdi)
    49c3:	aa                   	stos   %al,%es:(%rdi)
    49c4:	aa                   	stos   %al,%es:(%rdi)
    49c5:	aa                   	stos   %al,%es:(%rdi)
    49c6:	aa                   	stos   %al,%es:(%rdi)
    49c7:	aa                   	stos   %al,%es:(%rdi)
    49c8:	aa                   	stos   %al,%es:(%rdi)
    49c9:	aa                   	stos   %al,%es:(%rdi)
    49ca:	aa                   	stos   %al,%es:(%rdi)
    49cb:	aa                   	stos   %al,%es:(%rdi)
    49cc:	aa                   	stos   %al,%es:(%rdi)
    49cd:	aa                   	stos   %al,%es:(%rdi)
    49ce:	aa                   	stos   %al,%es:(%rdi)
    49cf:	aa                   	stos   %al,%es:(%rdi)
    49d0:	aa                   	stos   %al,%es:(%rdi)
    49d1:	aa                   	stos   %al,%es:(%rdi)
    49d2:	aa                   	stos   %al,%es:(%rdi)
    49d3:	aa                   	stos   %al,%es:(%rdi)
    49d4:	aa                   	stos   %al,%es:(%rdi)
    49d5:	aa                   	stos   %al,%es:(%rdi)
    49d6:	aa                   	stos   %al,%es:(%rdi)
    49d7:	aa                   	stos   %al,%es:(%rdi)
    49d8:	aa                   	stos   %al,%es:(%rdi)
    49d9:	aa                   	stos   %al,%es:(%rdi)
    49da:	aa                   	stos   %al,%es:(%rdi)
    49db:	aa                   	stos   %al,%es:(%rdi)
    49dc:	aa                   	stos   %al,%es:(%rdi)
    49dd:	aa                   	stos   %al,%es:(%rdi)
    49de:	aa                   	stos   %al,%es:(%rdi)
    49df:	aa                   	stos   %al,%es:(%rdi)
    49e0:	aa                   	stos   %al,%es:(%rdi)
    49e1:	aa                   	stos   %al,%es:(%rdi)
    49e2:	aa                   	stos   %al,%es:(%rdi)
    49e3:	aa                   	stos   %al,%es:(%rdi)
    49e4:	aa                   	stos   %al,%es:(%rdi)
    49e5:	aa                   	stos   %al,%es:(%rdi)
    49e6:	aa                   	stos   %al,%es:(%rdi)
    49e7:	aa                   	stos   %al,%es:(%rdi)
    49e8:	aa                   	stos   %al,%es:(%rdi)
    49e9:	aa                   	stos   %al,%es:(%rdi)
    49ea:	aa                   	stos   %al,%es:(%rdi)
    49eb:	aa                   	stos   %al,%es:(%rdi)
    49ec:	aa                   	stos   %al,%es:(%rdi)
    49ed:	aa                   	stos   %al,%es:(%rdi)
    49ee:	aa                   	stos   %al,%es:(%rdi)
    49ef:	aa                   	stos   %al,%es:(%rdi)
    49f0:	aa                   	stos   %al,%es:(%rdi)
    49f1:	aa                   	stos   %al,%es:(%rdi)
    49f2:	aa                   	stos   %al,%es:(%rdi)
    49f3:	aa                   	stos   %al,%es:(%rdi)
    49f4:	aa                   	stos   %al,%es:(%rdi)
    49f5:	aa                   	stos   %al,%es:(%rdi)
    49f6:	aa                   	stos   %al,%es:(%rdi)
    49f7:	aa                   	stos   %al,%es:(%rdi)
    49f8:	aa                   	stos   %al,%es:(%rdi)
    49f9:	aa                   	stos   %al,%es:(%rdi)
    49fa:	aa                   	stos   %al,%es:(%rdi)
    49fb:	aa                   	stos   %al,%es:(%rdi)
    49fc:	aa                   	stos   %al,%es:(%rdi)
    49fd:	aa                   	stos   %al,%es:(%rdi)
    49fe:	aa                   	stos   %al,%es:(%rdi)
    49ff:	aa                   	stos   %al,%es:(%rdi)
    4a00:	aa                   	stos   %al,%es:(%rdi)
    4a01:	aa                   	stos   %al,%es:(%rdi)
    4a02:	aa                   	stos   %al,%es:(%rdi)
    4a03:	aa                   	stos   %al,%es:(%rdi)
    4a04:	aa                   	stos   %al,%es:(%rdi)
    4a05:	aa                   	stos   %al,%es:(%rdi)
    4a06:	aa                   	stos   %al,%es:(%rdi)
    4a07:	aa                   	stos   %al,%es:(%rdi)
    4a08:	aa                   	stos   %al,%es:(%rdi)
    4a09:	aa                   	stos   %al,%es:(%rdi)
    4a0a:	aa                   	stos   %al,%es:(%rdi)
    4a0b:	aa                   	stos   %al,%es:(%rdi)
    4a0c:	aa                   	stos   %al,%es:(%rdi)
    4a0d:	aa                   	stos   %al,%es:(%rdi)
    4a0e:	aa                   	stos   %al,%es:(%rdi)
    4a0f:	aa                   	stos   %al,%es:(%rdi)
    4a10:	aa                   	stos   %al,%es:(%rdi)
    4a11:	aa                   	stos   %al,%es:(%rdi)
    4a12:	aa                   	stos   %al,%es:(%rdi)
    4a13:	aa                   	stos   %al,%es:(%rdi)
    4a14:	aa                   	stos   %al,%es:(%rdi)
    4a15:	aa                   	stos   %al,%es:(%rdi)
    4a16:	aa                   	stos   %al,%es:(%rdi)
    4a17:	aa                   	stos   %al,%es:(%rdi)
    4a18:	aa                   	stos   %al,%es:(%rdi)
    4a19:	aa                   	stos   %al,%es:(%rdi)
    4a1a:	aa                   	stos   %al,%es:(%rdi)
    4a1b:	aa                   	stos   %al,%es:(%rdi)
    4a1c:	aa                   	stos   %al,%es:(%rdi)
    4a1d:	aa                   	stos   %al,%es:(%rdi)
    4a1e:	aa                   	stos   %al,%es:(%rdi)
    4a1f:	aa                   	stos   %al,%es:(%rdi)
    4a20:	aa                   	stos   %al,%es:(%rdi)
    4a21:	aa                   	stos   %al,%es:(%rdi)
    4a22:	aa                   	stos   %al,%es:(%rdi)
    4a23:	aa                   	stos   %al,%es:(%rdi)
    4a24:	aa                   	stos   %al,%es:(%rdi)
    4a25:	aa                   	stos   %al,%es:(%rdi)
    4a26:	aa                   	stos   %al,%es:(%rdi)
    4a27:	aa                   	stos   %al,%es:(%rdi)
    4a28:	aa                   	stos   %al,%es:(%rdi)
    4a29:	aa                   	stos   %al,%es:(%rdi)
    4a2a:	aa                   	stos   %al,%es:(%rdi)
    4a2b:	aa                   	stos   %al,%es:(%rdi)
    4a2c:	aa                   	stos   %al,%es:(%rdi)
    4a2d:	aa                   	stos   %al,%es:(%rdi)
    4a2e:	aa                   	stos   %al,%es:(%rdi)
    4a2f:	aa                   	stos   %al,%es:(%rdi)
    4a30:	aa                   	stos   %al,%es:(%rdi)
    4a31:	aa                   	stos   %al,%es:(%rdi)
    4a32:	aa                   	stos   %al,%es:(%rdi)
    4a33:	aa                   	stos   %al,%es:(%rdi)
    4a34:	aa                   	stos   %al,%es:(%rdi)
    4a35:	aa                   	stos   %al,%es:(%rdi)
    4a36:	aa                   	stos   %al,%es:(%rdi)
    4a37:	aa                   	stos   %al,%es:(%rdi)
    4a38:	aa                   	stos   %al,%es:(%rdi)
    4a39:	aa                   	stos   %al,%es:(%rdi)
    4a3a:	aa                   	stos   %al,%es:(%rdi)
    4a3b:	aa                   	stos   %al,%es:(%rdi)
    4a3c:	aa                   	stos   %al,%es:(%rdi)
    4a3d:	aa                   	stos   %al,%es:(%rdi)
    4a3e:	aa                   	stos   %al,%es:(%rdi)
    4a3f:	aa                   	stos   %al,%es:(%rdi)
    4a40:	aa                   	stos   %al,%es:(%rdi)
    4a41:	aa                   	stos   %al,%es:(%rdi)
    4a42:	aa                   	stos   %al,%es:(%rdi)
    4a43:	aa                   	stos   %al,%es:(%rdi)
    4a44:	aa                   	stos   %al,%es:(%rdi)
    4a45:	aa                   	stos   %al,%es:(%rdi)
    4a46:	aa                   	stos   %al,%es:(%rdi)
    4a47:	aa                   	stos   %al,%es:(%rdi)
    4a48:	aa                   	stos   %al,%es:(%rdi)
    4a49:	aa                   	stos   %al,%es:(%rdi)
    4a4a:	aa                   	stos   %al,%es:(%rdi)
    4a4b:	aa                   	stos   %al,%es:(%rdi)
    4a4c:	aa                   	stos   %al,%es:(%rdi)
    4a4d:	aa                   	stos   %al,%es:(%rdi)
    4a4e:	aa                   	stos   %al,%es:(%rdi)
    4a4f:	aa                   	stos   %al,%es:(%rdi)
    4a50:	aa                   	stos   %al,%es:(%rdi)
    4a51:	aa                   	stos   %al,%es:(%rdi)
    4a52:	aa                   	stos   %al,%es:(%rdi)
    4a53:	aa                   	stos   %al,%es:(%rdi)
    4a54:	aa                   	stos   %al,%es:(%rdi)
    4a55:	aa                   	stos   %al,%es:(%rdi)
    4a56:	aa                   	stos   %al,%es:(%rdi)
    4a57:	aa                   	stos   %al,%es:(%rdi)
    4a58:	aa                   	stos   %al,%es:(%rdi)
    4a59:	aa                   	stos   %al,%es:(%rdi)
    4a5a:	aa                   	stos   %al,%es:(%rdi)
    4a5b:	aa                   	stos   %al,%es:(%rdi)
    4a5c:	aa                   	stos   %al,%es:(%rdi)
    4a5d:	aa                   	stos   %al,%es:(%rdi)
    4a5e:	aa                   	stos   %al,%es:(%rdi)
    4a5f:	aa                   	stos   %al,%es:(%rdi)
    4a60:	aa                   	stos   %al,%es:(%rdi)
    4a61:	aa                   	stos   %al,%es:(%rdi)
    4a62:	aa                   	stos   %al,%es:(%rdi)
    4a63:	aa                   	stos   %al,%es:(%rdi)
    4a64:	aa                   	stos   %al,%es:(%rdi)
    4a65:	aa                   	stos   %al,%es:(%rdi)
    4a66:	aa                   	stos   %al,%es:(%rdi)
    4a67:	aa                   	stos   %al,%es:(%rdi)
    4a68:	aa                   	stos   %al,%es:(%rdi)
    4a69:	aa                   	stos   %al,%es:(%rdi)
    4a6a:	aa                   	stos   %al,%es:(%rdi)
    4a6b:	aa                   	stos   %al,%es:(%rdi)
    4a6c:	aa                   	stos   %al,%es:(%rdi)
    4a6d:	aa                   	stos   %al,%es:(%rdi)
    4a6e:	aa                   	stos   %al,%es:(%rdi)
    4a6f:	aa                   	stos   %al,%es:(%rdi)
    4a70:	aa                   	stos   %al,%es:(%rdi)
    4a71:	aa                   	stos   %al,%es:(%rdi)
    4a72:	aa                   	stos   %al,%es:(%rdi)
    4a73:	aa                   	stos   %al,%es:(%rdi)
    4a74:	aa                   	stos   %al,%es:(%rdi)
    4a75:	aa                   	stos   %al,%es:(%rdi)
    4a76:	aa                   	stos   %al,%es:(%rdi)
    4a77:	aa                   	stos   %al,%es:(%rdi)
    4a78:	aa                   	stos   %al,%es:(%rdi)
    4a79:	aa                   	stos   %al,%es:(%rdi)
    4a7a:	aa                   	stos   %al,%es:(%rdi)
    4a7b:	aa                   	stos   %al,%es:(%rdi)
    4a7c:	aa                   	stos   %al,%es:(%rdi)
    4a7d:	aa                   	stos   %al,%es:(%rdi)
    4a7e:	aa                   	stos   %al,%es:(%rdi)
    4a7f:	aa                   	stos   %al,%es:(%rdi)
    4a80:	aa                   	stos   %al,%es:(%rdi)
    4a81:	aa                   	stos   %al,%es:(%rdi)
    4a82:	aa                   	stos   %al,%es:(%rdi)
    4a83:	aa                   	stos   %al,%es:(%rdi)
    4a84:	aa                   	stos   %al,%es:(%rdi)
    4a85:	aa                   	stos   %al,%es:(%rdi)
    4a86:	aa                   	stos   %al,%es:(%rdi)
    4a87:	aa                   	stos   %al,%es:(%rdi)
    4a88:	aa                   	stos   %al,%es:(%rdi)
    4a89:	aa                   	stos   %al,%es:(%rdi)
    4a8a:	aa                   	stos   %al,%es:(%rdi)
    4a8b:	aa                   	stos   %al,%es:(%rdi)
    4a8c:	aa                   	stos   %al,%es:(%rdi)
    4a8d:	aa                   	stos   %al,%es:(%rdi)
    4a8e:	aa                   	stos   %al,%es:(%rdi)
    4a8f:	aa                   	stos   %al,%es:(%rdi)
    4a90:	aa                   	stos   %al,%es:(%rdi)
    4a91:	aa                   	stos   %al,%es:(%rdi)
    4a92:	aa                   	stos   %al,%es:(%rdi)
    4a93:	aa                   	stos   %al,%es:(%rdi)
    4a94:	aa                   	stos   %al,%es:(%rdi)
    4a95:	aa                   	stos   %al,%es:(%rdi)
    4a96:	aa                   	stos   %al,%es:(%rdi)
    4a97:	aa                   	stos   %al,%es:(%rdi)
    4a98:	aa                   	stos   %al,%es:(%rdi)
    4a99:	aa                   	stos   %al,%es:(%rdi)
    4a9a:	aa                   	stos   %al,%es:(%rdi)
    4a9b:	aa                   	stos   %al,%es:(%rdi)
    4a9c:	aa                   	stos   %al,%es:(%rdi)
    4a9d:	aa                   	stos   %al,%es:(%rdi)
    4a9e:	aa                   	stos   %al,%es:(%rdi)
    4a9f:	aa                   	stos   %al,%es:(%rdi)
    4aa0:	aa                   	stos   %al,%es:(%rdi)
    4aa1:	aa                   	stos   %al,%es:(%rdi)
    4aa2:	aa                   	stos   %al,%es:(%rdi)
    4aa3:	aa                   	stos   %al,%es:(%rdi)
    4aa4:	aa                   	stos   %al,%es:(%rdi)
    4aa5:	aa                   	stos   %al,%es:(%rdi)
    4aa6:	aa                   	stos   %al,%es:(%rdi)
    4aa7:	aa                   	stos   %al,%es:(%rdi)
    4aa8:	aa                   	stos   %al,%es:(%rdi)
    4aa9:	aa                   	stos   %al,%es:(%rdi)
    4aaa:	aa                   	stos   %al,%es:(%rdi)
    4aab:	aa                   	stos   %al,%es:(%rdi)
    4aac:	aa                   	stos   %al,%es:(%rdi)
    4aad:	aa                   	stos   %al,%es:(%rdi)
    4aae:	aa                   	stos   %al,%es:(%rdi)
    4aaf:	aa                   	stos   %al,%es:(%rdi)
    4ab0:	aa                   	stos   %al,%es:(%rdi)
    4ab1:	aa                   	stos   %al,%es:(%rdi)
    4ab2:	aa                   	stos   %al,%es:(%rdi)
    4ab3:	aa                   	stos   %al,%es:(%rdi)
    4ab4:	aa                   	stos   %al,%es:(%rdi)
    4ab5:	aa                   	stos   %al,%es:(%rdi)
    4ab6:	aa                   	stos   %al,%es:(%rdi)
    4ab7:	aa                   	stos   %al,%es:(%rdi)
    4ab8:	aa                   	stos   %al,%es:(%rdi)
    4ab9:	aa                   	stos   %al,%es:(%rdi)
    4aba:	aa                   	stos   %al,%es:(%rdi)
    4abb:	aa                   	stos   %al,%es:(%rdi)
    4abc:	aa                   	stos   %al,%es:(%rdi)
    4abd:	aa                   	stos   %al,%es:(%rdi)
    4abe:	aa                   	stos   %al,%es:(%rdi)
    4abf:	aa                   	stos   %al,%es:(%rdi)
    4ac0:	aa                   	stos   %al,%es:(%rdi)
    4ac1:	aa                   	stos   %al,%es:(%rdi)
    4ac2:	aa                   	stos   %al,%es:(%rdi)
    4ac3:	aa                   	stos   %al,%es:(%rdi)
    4ac4:	aa                   	stos   %al,%es:(%rdi)
    4ac5:	aa                   	stos   %al,%es:(%rdi)
    4ac6:	aa                   	stos   %al,%es:(%rdi)
    4ac7:	aa                   	stos   %al,%es:(%rdi)
    4ac8:	aa                   	stos   %al,%es:(%rdi)
    4ac9:	aa                   	stos   %al,%es:(%rdi)
    4aca:	aa                   	stos   %al,%es:(%rdi)
    4acb:	aa                   	stos   %al,%es:(%rdi)
    4acc:	aa                   	stos   %al,%es:(%rdi)
    4acd:	aa                   	stos   %al,%es:(%rdi)
    4ace:	aa                   	stos   %al,%es:(%rdi)
    4acf:	aa                   	stos   %al,%es:(%rdi)
    4ad0:	aa                   	stos   %al,%es:(%rdi)
    4ad1:	aa                   	stos   %al,%es:(%rdi)
    4ad2:	aa                   	stos   %al,%es:(%rdi)
    4ad3:	aa                   	stos   %al,%es:(%rdi)
    4ad4:	aa                   	stos   %al,%es:(%rdi)
    4ad5:	aa                   	stos   %al,%es:(%rdi)
    4ad6:	aa                   	stos   %al,%es:(%rdi)
    4ad7:	aa                   	stos   %al,%es:(%rdi)
    4ad8:	aa                   	stos   %al,%es:(%rdi)
    4ad9:	aa                   	stos   %al,%es:(%rdi)
    4ada:	aa                   	stos   %al,%es:(%rdi)
    4adb:	aa                   	stos   %al,%es:(%rdi)
    4adc:	aa                   	stos   %al,%es:(%rdi)
    4add:	aa                   	stos   %al,%es:(%rdi)
    4ade:	aa                   	stos   %al,%es:(%rdi)
    4adf:	aa                   	stos   %al,%es:(%rdi)
    4ae0:	aa                   	stos   %al,%es:(%rdi)
    4ae1:	aa                   	stos   %al,%es:(%rdi)
    4ae2:	aa                   	stos   %al,%es:(%rdi)
    4ae3:	aa                   	stos   %al,%es:(%rdi)
    4ae4:	aa                   	stos   %al,%es:(%rdi)
    4ae5:	aa                   	stos   %al,%es:(%rdi)
    4ae6:	aa                   	stos   %al,%es:(%rdi)
    4ae7:	aa                   	stos   %al,%es:(%rdi)
    4ae8:	aa                   	stos   %al,%es:(%rdi)
    4ae9:	aa                   	stos   %al,%es:(%rdi)
    4aea:	aa                   	stos   %al,%es:(%rdi)
    4aeb:	aa                   	stos   %al,%es:(%rdi)
    4aec:	aa                   	stos   %al,%es:(%rdi)
    4aed:	aa                   	stos   %al,%es:(%rdi)
    4aee:	aa                   	stos   %al,%es:(%rdi)
    4aef:	aa                   	stos   %al,%es:(%rdi)
    4af0:	aa                   	stos   %al,%es:(%rdi)
    4af1:	aa                   	stos   %al,%es:(%rdi)
    4af2:	aa                   	stos   %al,%es:(%rdi)
    4af3:	aa                   	stos   %al,%es:(%rdi)
    4af4:	aa                   	stos   %al,%es:(%rdi)
    4af5:	aa                   	stos   %al,%es:(%rdi)
    4af6:	aa                   	stos   %al,%es:(%rdi)
    4af7:	aa                   	stos   %al,%es:(%rdi)
    4af8:	aa                   	stos   %al,%es:(%rdi)
    4af9:	aa                   	stos   %al,%es:(%rdi)
    4afa:	aa                   	stos   %al,%es:(%rdi)
    4afb:	aa                   	stos   %al,%es:(%rdi)
    4afc:	aa                   	stos   %al,%es:(%rdi)
    4afd:	aa                   	stos   %al,%es:(%rdi)
    4afe:	aa                   	stos   %al,%es:(%rdi)
    4aff:	aa                   	stos   %al,%es:(%rdi)
    4b00:	aa                   	stos   %al,%es:(%rdi)
    4b01:	aa                   	stos   %al,%es:(%rdi)
    4b02:	aa                   	stos   %al,%es:(%rdi)
    4b03:	aa                   	stos   %al,%es:(%rdi)
    4b04:	aa                   	stos   %al,%es:(%rdi)
    4b05:	aa                   	stos   %al,%es:(%rdi)
    4b06:	aa                   	stos   %al,%es:(%rdi)
    4b07:	aa                   	stos   %al,%es:(%rdi)
    4b08:	aa                   	stos   %al,%es:(%rdi)
    4b09:	aa                   	stos   %al,%es:(%rdi)
    4b0a:	aa                   	stos   %al,%es:(%rdi)
    4b0b:	aa                   	stos   %al,%es:(%rdi)
    4b0c:	aa                   	stos   %al,%es:(%rdi)
    4b0d:	aa                   	stos   %al,%es:(%rdi)
    4b0e:	aa                   	stos   %al,%es:(%rdi)
    4b0f:	aa                   	stos   %al,%es:(%rdi)
    4b10:	aa                   	stos   %al,%es:(%rdi)
    4b11:	aa                   	stos   %al,%es:(%rdi)
    4b12:	aa                   	stos   %al,%es:(%rdi)
    4b13:	aa                   	stos   %al,%es:(%rdi)
    4b14:	aa                   	stos   %al,%es:(%rdi)
    4b15:	aa                   	stos   %al,%es:(%rdi)
    4b16:	aa                   	stos   %al,%es:(%rdi)
    4b17:	aa                   	stos   %al,%es:(%rdi)
    4b18:	aa                   	stos   %al,%es:(%rdi)
    4b19:	aa                   	stos   %al,%es:(%rdi)
    4b1a:	aa                   	stos   %al,%es:(%rdi)
    4b1b:	aa                   	stos   %al,%es:(%rdi)
    4b1c:	aa                   	stos   %al,%es:(%rdi)
    4b1d:	aa                   	stos   %al,%es:(%rdi)
    4b1e:	aa                   	stos   %al,%es:(%rdi)
    4b1f:	aa                   	stos   %al,%es:(%rdi)
    4b20:	aa                   	stos   %al,%es:(%rdi)
    4b21:	aa                   	stos   %al,%es:(%rdi)
    4b22:	aa                   	stos   %al,%es:(%rdi)
    4b23:	aa                   	stos   %al,%es:(%rdi)
    4b24:	aa                   	stos   %al,%es:(%rdi)
    4b25:	aa                   	stos   %al,%es:(%rdi)
    4b26:	aa                   	stos   %al,%es:(%rdi)
    4b27:	aa                   	stos   %al,%es:(%rdi)
    4b28:	aa                   	stos   %al,%es:(%rdi)
    4b29:	aa                   	stos   %al,%es:(%rdi)
    4b2a:	aa                   	stos   %al,%es:(%rdi)
    4b2b:	aa                   	stos   %al,%es:(%rdi)
    4b2c:	aa                   	stos   %al,%es:(%rdi)
    4b2d:	aa                   	stos   %al,%es:(%rdi)
    4b2e:	aa                   	stos   %al,%es:(%rdi)
    4b2f:	aa                   	stos   %al,%es:(%rdi)
    4b30:	aa                   	stos   %al,%es:(%rdi)
    4b31:	aa                   	stos   %al,%es:(%rdi)
    4b32:	aa                   	stos   %al,%es:(%rdi)
    4b33:	aa                   	stos   %al,%es:(%rdi)
    4b34:	aa                   	stos   %al,%es:(%rdi)
    4b35:	aa                   	stos   %al,%es:(%rdi)
    4b36:	aa                   	stos   %al,%es:(%rdi)
    4b37:	aa                   	stos   %al,%es:(%rdi)
    4b38:	aa                   	stos   %al,%es:(%rdi)
    4b39:	aa                   	stos   %al,%es:(%rdi)
    4b3a:	aa                   	stos   %al,%es:(%rdi)
    4b3b:	aa                   	stos   %al,%es:(%rdi)
    4b3c:	aa                   	stos   %al,%es:(%rdi)
    4b3d:	aa                   	stos   %al,%es:(%rdi)
    4b3e:	aa                   	stos   %al,%es:(%rdi)
    4b3f:	aa                   	stos   %al,%es:(%rdi)
    4b40:	aa                   	stos   %al,%es:(%rdi)
    4b41:	aa                   	stos   %al,%es:(%rdi)
    4b42:	aa                   	stos   %al,%es:(%rdi)
    4b43:	aa                   	stos   %al,%es:(%rdi)
    4b44:	aa                   	stos   %al,%es:(%rdi)
    4b45:	aa                   	stos   %al,%es:(%rdi)
    4b46:	aa                   	stos   %al,%es:(%rdi)
    4b47:	aa                   	stos   %al,%es:(%rdi)
    4b48:	aa                   	stos   %al,%es:(%rdi)
    4b49:	aa                   	stos   %al,%es:(%rdi)
    4b4a:	aa                   	stos   %al,%es:(%rdi)
    4b4b:	aa                   	stos   %al,%es:(%rdi)
    4b4c:	aa                   	stos   %al,%es:(%rdi)
    4b4d:	aa                   	stos   %al,%es:(%rdi)
    4b4e:	aa                   	stos   %al,%es:(%rdi)
    4b4f:	aa                   	stos   %al,%es:(%rdi)
    4b50:	aa                   	stos   %al,%es:(%rdi)
    4b51:	aa                   	stos   %al,%es:(%rdi)
    4b52:	aa                   	stos   %al,%es:(%rdi)
    4b53:	aa                   	stos   %al,%es:(%rdi)
    4b54:	aa                   	stos   %al,%es:(%rdi)
    4b55:	aa                   	stos   %al,%es:(%rdi)
    4b56:	aa                   	stos   %al,%es:(%rdi)
    4b57:	aa                   	stos   %al,%es:(%rdi)
    4b58:	aa                   	stos   %al,%es:(%rdi)
    4b59:	aa                   	stos   %al,%es:(%rdi)
    4b5a:	aa                   	stos   %al,%es:(%rdi)
    4b5b:	aa                   	stos   %al,%es:(%rdi)
    4b5c:	aa                   	stos   %al,%es:(%rdi)
    4b5d:	aa                   	stos   %al,%es:(%rdi)
    4b5e:	aa                   	stos   %al,%es:(%rdi)
    4b5f:	aa                   	stos   %al,%es:(%rdi)
    4b60:	aa                   	stos   %al,%es:(%rdi)
    4b61:	aa                   	stos   %al,%es:(%rdi)
    4b62:	aa                   	stos   %al,%es:(%rdi)
    4b63:	aa                   	stos   %al,%es:(%rdi)
    4b64:	aa                   	stos   %al,%es:(%rdi)
    4b65:	aa                   	stos   %al,%es:(%rdi)
    4b66:	aa                   	stos   %al,%es:(%rdi)
    4b67:	aa                   	stos   %al,%es:(%rdi)
    4b68:	aa                   	stos   %al,%es:(%rdi)
    4b69:	aa                   	stos   %al,%es:(%rdi)
    4b6a:	aa                   	stos   %al,%es:(%rdi)
    4b6b:	aa                   	stos   %al,%es:(%rdi)
    4b6c:	aa                   	stos   %al,%es:(%rdi)
    4b6d:	aa                   	stos   %al,%es:(%rdi)
    4b6e:	aa                   	stos   %al,%es:(%rdi)
    4b6f:	aa                   	stos   %al,%es:(%rdi)
    4b70:	aa                   	stos   %al,%es:(%rdi)
    4b71:	aa                   	stos   %al,%es:(%rdi)
    4b72:	aa                   	stos   %al,%es:(%rdi)
    4b73:	aa                   	stos   %al,%es:(%rdi)
    4b74:	aa                   	stos   %al,%es:(%rdi)
    4b75:	aa                   	stos   %al,%es:(%rdi)
    4b76:	aa                   	stos   %al,%es:(%rdi)
    4b77:	aa                   	stos   %al,%es:(%rdi)
    4b78:	aa                   	stos   %al,%es:(%rdi)
    4b79:	aa                   	stos   %al,%es:(%rdi)
    4b7a:	aa                   	stos   %al,%es:(%rdi)
    4b7b:	aa                   	stos   %al,%es:(%rdi)
    4b7c:	aa                   	stos   %al,%es:(%rdi)
    4b7d:	aa                   	stos   %al,%es:(%rdi)
    4b7e:	aa                   	stos   %al,%es:(%rdi)
    4b7f:	aa                   	stos   %al,%es:(%rdi)
    4b80:	aa                   	stos   %al,%es:(%rdi)
    4b81:	aa                   	stos   %al,%es:(%rdi)
    4b82:	aa                   	stos   %al,%es:(%rdi)
    4b83:	aa                   	stos   %al,%es:(%rdi)
    4b84:	aa                   	stos   %al,%es:(%rdi)
    4b85:	aa                   	stos   %al,%es:(%rdi)
    4b86:	aa                   	stos   %al,%es:(%rdi)
    4b87:	aa                   	stos   %al,%es:(%rdi)
    4b88:	aa                   	stos   %al,%es:(%rdi)
    4b89:	aa                   	stos   %al,%es:(%rdi)
    4b8a:	aa                   	stos   %al,%es:(%rdi)
    4b8b:	aa                   	stos   %al,%es:(%rdi)
    4b8c:	aa                   	stos   %al,%es:(%rdi)
    4b8d:	aa                   	stos   %al,%es:(%rdi)
    4b8e:	aa                   	stos   %al,%es:(%rdi)
    4b8f:	aa                   	stos   %al,%es:(%rdi)
    4b90:	aa                   	stos   %al,%es:(%rdi)
    4b91:	aa                   	stos   %al,%es:(%rdi)
    4b92:	aa                   	stos   %al,%es:(%rdi)
    4b93:	aa                   	stos   %al,%es:(%rdi)
    4b94:	aa                   	stos   %al,%es:(%rdi)
    4b95:	aa                   	stos   %al,%es:(%rdi)
    4b96:	aa                   	stos   %al,%es:(%rdi)
    4b97:	aa                   	stos   %al,%es:(%rdi)
    4b98:	aa                   	stos   %al,%es:(%rdi)
    4b99:	aa                   	stos   %al,%es:(%rdi)
    4b9a:	aa                   	stos   %al,%es:(%rdi)
    4b9b:	aa                   	stos   %al,%es:(%rdi)
    4b9c:	aa                   	stos   %al,%es:(%rdi)
    4b9d:	aa                   	stos   %al,%es:(%rdi)
    4b9e:	aa                   	stos   %al,%es:(%rdi)
    4b9f:	aa                   	stos   %al,%es:(%rdi)
    4ba0:	aa                   	stos   %al,%es:(%rdi)
    4ba1:	aa                   	stos   %al,%es:(%rdi)
    4ba2:	aa                   	stos   %al,%es:(%rdi)
    4ba3:	aa                   	stos   %al,%es:(%rdi)
    4ba4:	aa                   	stos   %al,%es:(%rdi)
    4ba5:	aa                   	stos   %al,%es:(%rdi)
    4ba6:	aa                   	stos   %al,%es:(%rdi)
    4ba7:	aa                   	stos   %al,%es:(%rdi)
    4ba8:	aa                   	stos   %al,%es:(%rdi)
    4ba9:	aa                   	stos   %al,%es:(%rdi)
    4baa:	aa                   	stos   %al,%es:(%rdi)
    4bab:	aa                   	stos   %al,%es:(%rdi)
    4bac:	aa                   	stos   %al,%es:(%rdi)
    4bad:	aa                   	stos   %al,%es:(%rdi)
    4bae:	aa                   	stos   %al,%es:(%rdi)
    4baf:	aa                   	stos   %al,%es:(%rdi)
    4bb0:	aa                   	stos   %al,%es:(%rdi)
    4bb1:	aa                   	stos   %al,%es:(%rdi)
    4bb2:	aa                   	stos   %al,%es:(%rdi)
    4bb3:	aa                   	stos   %al,%es:(%rdi)
    4bb4:	aa                   	stos   %al,%es:(%rdi)
    4bb5:	aa                   	stos   %al,%es:(%rdi)
    4bb6:	aa                   	stos   %al,%es:(%rdi)
    4bb7:	aa                   	stos   %al,%es:(%rdi)
    4bb8:	aa                   	stos   %al,%es:(%rdi)
    4bb9:	aa                   	stos   %al,%es:(%rdi)
    4bba:	aa                   	stos   %al,%es:(%rdi)
    4bbb:	aa                   	stos   %al,%es:(%rdi)
    4bbc:	aa                   	stos   %al,%es:(%rdi)
    4bbd:	aa                   	stos   %al,%es:(%rdi)
    4bbe:	aa                   	stos   %al,%es:(%rdi)
    4bbf:	aa                   	stos   %al,%es:(%rdi)
    4bc0:	aa                   	stos   %al,%es:(%rdi)
    4bc1:	aa                   	stos   %al,%es:(%rdi)
    4bc2:	aa                   	stos   %al,%es:(%rdi)
    4bc3:	aa                   	stos   %al,%es:(%rdi)
    4bc4:	aa                   	stos   %al,%es:(%rdi)
    4bc5:	aa                   	stos   %al,%es:(%rdi)
    4bc6:	aa                   	stos   %al,%es:(%rdi)
    4bc7:	aa                   	stos   %al,%es:(%rdi)
    4bc8:	aa                   	stos   %al,%es:(%rdi)
    4bc9:	aa                   	stos   %al,%es:(%rdi)
    4bca:	aa                   	stos   %al,%es:(%rdi)
    4bcb:	aa                   	stos   %al,%es:(%rdi)
    4bcc:	aa                   	stos   %al,%es:(%rdi)
    4bcd:	aa                   	stos   %al,%es:(%rdi)
    4bce:	aa                   	stos   %al,%es:(%rdi)
    4bcf:	aa                   	stos   %al,%es:(%rdi)
    4bd0:	aa                   	stos   %al,%es:(%rdi)
    4bd1:	aa                   	stos   %al,%es:(%rdi)
    4bd2:	aa                   	stos   %al,%es:(%rdi)
    4bd3:	aa                   	stos   %al,%es:(%rdi)
    4bd4:	aa                   	stos   %al,%es:(%rdi)
    4bd5:	aa                   	stos   %al,%es:(%rdi)
    4bd6:	aa                   	stos   %al,%es:(%rdi)
    4bd7:	aa                   	stos   %al,%es:(%rdi)
    4bd8:	aa                   	stos   %al,%es:(%rdi)
    4bd9:	aa                   	stos   %al,%es:(%rdi)
    4bda:	aa                   	stos   %al,%es:(%rdi)
    4bdb:	aa                   	stos   %al,%es:(%rdi)
    4bdc:	aa                   	stos   %al,%es:(%rdi)
    4bdd:	aa                   	stos   %al,%es:(%rdi)
    4bde:	aa                   	stos   %al,%es:(%rdi)
    4bdf:	aa                   	stos   %al,%es:(%rdi)
    4be0:	aa                   	stos   %al,%es:(%rdi)
    4be1:	aa                   	stos   %al,%es:(%rdi)
    4be2:	aa                   	stos   %al,%es:(%rdi)
    4be3:	aa                   	stos   %al,%es:(%rdi)
    4be4:	aa                   	stos   %al,%es:(%rdi)
    4be5:	aa                   	stos   %al,%es:(%rdi)
    4be6:	aa                   	stos   %al,%es:(%rdi)
    4be7:	aa                   	stos   %al,%es:(%rdi)
    4be8:	aa                   	stos   %al,%es:(%rdi)
    4be9:	aa                   	stos   %al,%es:(%rdi)
    4bea:	aa                   	stos   %al,%es:(%rdi)
    4beb:	aa                   	stos   %al,%es:(%rdi)
    4bec:	aa                   	stos   %al,%es:(%rdi)
    4bed:	aa                   	stos   %al,%es:(%rdi)
    4bee:	aa                   	stos   %al,%es:(%rdi)
    4bef:	aa                   	stos   %al,%es:(%rdi)
    4bf0:	aa                   	stos   %al,%es:(%rdi)
    4bf1:	aa                   	stos   %al,%es:(%rdi)
    4bf2:	aa                   	stos   %al,%es:(%rdi)
    4bf3:	aa                   	stos   %al,%es:(%rdi)
    4bf4:	aa                   	stos   %al,%es:(%rdi)
    4bf5:	aa                   	stos   %al,%es:(%rdi)
    4bf6:	aa                   	stos   %al,%es:(%rdi)
    4bf7:	aa                   	stos   %al,%es:(%rdi)
    4bf8:	aa                   	stos   %al,%es:(%rdi)
    4bf9:	aa                   	stos   %al,%es:(%rdi)
    4bfa:	aa                   	stos   %al,%es:(%rdi)
    4bfb:	aa                   	stos   %al,%es:(%rdi)
    4bfc:	aa                   	stos   %al,%es:(%rdi)
    4bfd:	aa                   	stos   %al,%es:(%rdi)
    4bfe:	aa                   	stos   %al,%es:(%rdi)
    4bff:	aa                   	stos   %al,%es:(%rdi)
    4c00:	aa                   	stos   %al,%es:(%rdi)
    4c01:	aa                   	stos   %al,%es:(%rdi)
    4c02:	aa                   	stos   %al,%es:(%rdi)
    4c03:	aa                   	stos   %al,%es:(%rdi)
    4c04:	aa                   	stos   %al,%es:(%rdi)
    4c05:	aa                   	stos   %al,%es:(%rdi)
    4c06:	aa                   	stos   %al,%es:(%rdi)
    4c07:	aa                   	stos   %al,%es:(%rdi)
    4c08:	aa                   	stos   %al,%es:(%rdi)
    4c09:	aa                   	stos   %al,%es:(%rdi)
    4c0a:	aa                   	stos   %al,%es:(%rdi)
    4c0b:	aa                   	stos   %al,%es:(%rdi)
    4c0c:	aa                   	stos   %al,%es:(%rdi)
    4c0d:	aa                   	stos   %al,%es:(%rdi)
    4c0e:	aa                   	stos   %al,%es:(%rdi)
    4c0f:	aa                   	stos   %al,%es:(%rdi)
    4c10:	aa                   	stos   %al,%es:(%rdi)
    4c11:	aa                   	stos   %al,%es:(%rdi)
    4c12:	aa                   	stos   %al,%es:(%rdi)
    4c13:	aa                   	stos   %al,%es:(%rdi)
    4c14:	aa                   	stos   %al,%es:(%rdi)
    4c15:	aa                   	stos   %al,%es:(%rdi)
    4c16:	aa                   	stos   %al,%es:(%rdi)
    4c17:	aa                   	stos   %al,%es:(%rdi)
    4c18:	aa                   	stos   %al,%es:(%rdi)
    4c19:	aa                   	stos   %al,%es:(%rdi)
    4c1a:	aa                   	stos   %al,%es:(%rdi)
    4c1b:	aa                   	stos   %al,%es:(%rdi)
    4c1c:	aa                   	stos   %al,%es:(%rdi)
    4c1d:	aa                   	stos   %al,%es:(%rdi)
    4c1e:	aa                   	stos   %al,%es:(%rdi)
    4c1f:	aa                   	stos   %al,%es:(%rdi)
    4c20:	aa                   	stos   %al,%es:(%rdi)
    4c21:	aa                   	stos   %al,%es:(%rdi)
    4c22:	aa                   	stos   %al,%es:(%rdi)
    4c23:	aa                   	stos   %al,%es:(%rdi)
    4c24:	aa                   	stos   %al,%es:(%rdi)
    4c25:	aa                   	stos   %al,%es:(%rdi)
    4c26:	aa                   	stos   %al,%es:(%rdi)
    4c27:	aa                   	stos   %al,%es:(%rdi)
    4c28:	aa                   	stos   %al,%es:(%rdi)
    4c29:	aa                   	stos   %al,%es:(%rdi)
    4c2a:	aa                   	stos   %al,%es:(%rdi)
    4c2b:	aa                   	stos   %al,%es:(%rdi)
    4c2c:	aa                   	stos   %al,%es:(%rdi)
    4c2d:	aa                   	stos   %al,%es:(%rdi)
    4c2e:	aa                   	stos   %al,%es:(%rdi)
    4c2f:	aa                   	stos   %al,%es:(%rdi)
    4c30:	aa                   	stos   %al,%es:(%rdi)
    4c31:	aa                   	stos   %al,%es:(%rdi)
    4c32:	aa                   	stos   %al,%es:(%rdi)
    4c33:	aa                   	stos   %al,%es:(%rdi)
    4c34:	aa                   	stos   %al,%es:(%rdi)
    4c35:	aa                   	stos   %al,%es:(%rdi)
    4c36:	aa                   	stos   %al,%es:(%rdi)
    4c37:	aa                   	stos   %al,%es:(%rdi)
    4c38:	aa                   	stos   %al,%es:(%rdi)
    4c39:	aa                   	stos   %al,%es:(%rdi)
    4c3a:	aa                   	stos   %al,%es:(%rdi)
    4c3b:	aa                   	stos   %al,%es:(%rdi)
    4c3c:	aa                   	stos   %al,%es:(%rdi)
    4c3d:	aa                   	stos   %al,%es:(%rdi)
    4c3e:	aa                   	stos   %al,%es:(%rdi)
    4c3f:	aa                   	stos   %al,%es:(%rdi)
    4c40:	aa                   	stos   %al,%es:(%rdi)
    4c41:	aa                   	stos   %al,%es:(%rdi)
    4c42:	aa                   	stos   %al,%es:(%rdi)
    4c43:	aa                   	stos   %al,%es:(%rdi)
    4c44:	aa                   	stos   %al,%es:(%rdi)
    4c45:	aa                   	stos   %al,%es:(%rdi)
    4c46:	aa                   	stos   %al,%es:(%rdi)
    4c47:	aa                   	stos   %al,%es:(%rdi)
    4c48:	aa                   	stos   %al,%es:(%rdi)
    4c49:	aa                   	stos   %al,%es:(%rdi)
    4c4a:	aa                   	stos   %al,%es:(%rdi)
    4c4b:	aa                   	stos   %al,%es:(%rdi)
    4c4c:	aa                   	stos   %al,%es:(%rdi)
    4c4d:	aa                   	stos   %al,%es:(%rdi)
    4c4e:	aa                   	stos   %al,%es:(%rdi)
    4c4f:	aa                   	stos   %al,%es:(%rdi)
    4c50:	aa                   	stos   %al,%es:(%rdi)
    4c51:	aa                   	stos   %al,%es:(%rdi)
    4c52:	aa                   	stos   %al,%es:(%rdi)
    4c53:	aa                   	stos   %al,%es:(%rdi)
    4c54:	aa                   	stos   %al,%es:(%rdi)
    4c55:	aa                   	stos   %al,%es:(%rdi)
    4c56:	aa                   	stos   %al,%es:(%rdi)
    4c57:	aa                   	stos   %al,%es:(%rdi)
    4c58:	aa                   	stos   %al,%es:(%rdi)
    4c59:	aa                   	stos   %al,%es:(%rdi)
    4c5a:	aa                   	stos   %al,%es:(%rdi)
    4c5b:	aa                   	stos   %al,%es:(%rdi)
    4c5c:	aa                   	stos   %al,%es:(%rdi)
    4c5d:	aa                   	stos   %al,%es:(%rdi)
    4c5e:	aa                   	stos   %al,%es:(%rdi)
    4c5f:	aa                   	stos   %al,%es:(%rdi)
    4c60:	aa                   	stos   %al,%es:(%rdi)
    4c61:	aa                   	stos   %al,%es:(%rdi)
    4c62:	aa                   	stos   %al,%es:(%rdi)
    4c63:	aa                   	stos   %al,%es:(%rdi)
    4c64:	aa                   	stos   %al,%es:(%rdi)
    4c65:	aa                   	stos   %al,%es:(%rdi)
    4c66:	aa                   	stos   %al,%es:(%rdi)
    4c67:	aa                   	stos   %al,%es:(%rdi)
    4c68:	aa                   	stos   %al,%es:(%rdi)
    4c69:	aa                   	stos   %al,%es:(%rdi)
    4c6a:	aa                   	stos   %al,%es:(%rdi)
    4c6b:	aa                   	stos   %al,%es:(%rdi)
    4c6c:	aa                   	stos   %al,%es:(%rdi)
    4c6d:	aa                   	stos   %al,%es:(%rdi)
    4c6e:	aa                   	stos   %al,%es:(%rdi)
    4c6f:	aa                   	stos   %al,%es:(%rdi)
    4c70:	aa                   	stos   %al,%es:(%rdi)
    4c71:	aa                   	stos   %al,%es:(%rdi)
    4c72:	aa                   	stos   %al,%es:(%rdi)
    4c73:	aa                   	stos   %al,%es:(%rdi)
    4c74:	aa                   	stos   %al,%es:(%rdi)
    4c75:	aa                   	stos   %al,%es:(%rdi)
    4c76:	aa                   	stos   %al,%es:(%rdi)
    4c77:	aa                   	stos   %al,%es:(%rdi)
    4c78:	aa                   	stos   %al,%es:(%rdi)
    4c79:	aa                   	stos   %al,%es:(%rdi)
    4c7a:	aa                   	stos   %al,%es:(%rdi)
    4c7b:	aa                   	stos   %al,%es:(%rdi)
    4c7c:	aa                   	stos   %al,%es:(%rdi)
    4c7d:	aa                   	stos   %al,%es:(%rdi)
    4c7e:	aa                   	stos   %al,%es:(%rdi)
    4c7f:	aa                   	stos   %al,%es:(%rdi)
    4c80:	aa                   	stos   %al,%es:(%rdi)
    4c81:	aa                   	stos   %al,%es:(%rdi)
    4c82:	aa                   	stos   %al,%es:(%rdi)
    4c83:	aa                   	stos   %al,%es:(%rdi)
    4c84:	aa                   	stos   %al,%es:(%rdi)
    4c85:	aa                   	stos   %al,%es:(%rdi)
    4c86:	aa                   	stos   %al,%es:(%rdi)
    4c87:	aa                   	stos   %al,%es:(%rdi)
    4c88:	aa                   	stos   %al,%es:(%rdi)
    4c89:	aa                   	stos   %al,%es:(%rdi)
    4c8a:	aa                   	stos   %al,%es:(%rdi)
    4c8b:	aa                   	stos   %al,%es:(%rdi)
    4c8c:	aa                   	stos   %al,%es:(%rdi)
    4c8d:	aa                   	stos   %al,%es:(%rdi)
    4c8e:	aa                   	stos   %al,%es:(%rdi)
    4c8f:	aa                   	stos   %al,%es:(%rdi)
    4c90:	aa                   	stos   %al,%es:(%rdi)
    4c91:	aa                   	stos   %al,%es:(%rdi)
    4c92:	aa                   	stos   %al,%es:(%rdi)
    4c93:	aa                   	stos   %al,%es:(%rdi)
    4c94:	aa                   	stos   %al,%es:(%rdi)
    4c95:	aa                   	stos   %al,%es:(%rdi)
    4c96:	aa                   	stos   %al,%es:(%rdi)
    4c97:	aa                   	stos   %al,%es:(%rdi)
    4c98:	aa                   	stos   %al,%es:(%rdi)
    4c99:	aa                   	stos   %al,%es:(%rdi)
    4c9a:	aa                   	stos   %al,%es:(%rdi)
    4c9b:	aa                   	stos   %al,%es:(%rdi)
    4c9c:	aa                   	stos   %al,%es:(%rdi)
    4c9d:	aa                   	stos   %al,%es:(%rdi)
    4c9e:	aa                   	stos   %al,%es:(%rdi)
    4c9f:	aa                   	stos   %al,%es:(%rdi)
    4ca0:	aa                   	stos   %al,%es:(%rdi)
    4ca1:	aa                   	stos   %al,%es:(%rdi)
    4ca2:	aa                   	stos   %al,%es:(%rdi)
    4ca3:	aa                   	stos   %al,%es:(%rdi)
    4ca4:	aa                   	stos   %al,%es:(%rdi)
    4ca5:	aa                   	stos   %al,%es:(%rdi)
    4ca6:	aa                   	stos   %al,%es:(%rdi)
    4ca7:	aa                   	stos   %al,%es:(%rdi)
    4ca8:	aa                   	stos   %al,%es:(%rdi)
    4ca9:	aa                   	stos   %al,%es:(%rdi)
    4caa:	aa                   	stos   %al,%es:(%rdi)
    4cab:	aa                   	stos   %al,%es:(%rdi)
    4cac:	aa                   	stos   %al,%es:(%rdi)
    4cad:	aa                   	stos   %al,%es:(%rdi)
    4cae:	aa                   	stos   %al,%es:(%rdi)
    4caf:	aa                   	stos   %al,%es:(%rdi)
    4cb0:	aa                   	stos   %al,%es:(%rdi)
    4cb1:	aa                   	stos   %al,%es:(%rdi)
    4cb2:	aa                   	stos   %al,%es:(%rdi)
    4cb3:	aa                   	stos   %al,%es:(%rdi)
    4cb4:	aa                   	stos   %al,%es:(%rdi)
    4cb5:	aa                   	stos   %al,%es:(%rdi)
    4cb6:	aa                   	stos   %al,%es:(%rdi)
    4cb7:	aa                   	stos   %al,%es:(%rdi)
    4cb8:	aa                   	stos   %al,%es:(%rdi)
    4cb9:	aa                   	stos   %al,%es:(%rdi)
    4cba:	aa                   	stos   %al,%es:(%rdi)
    4cbb:	aa                   	stos   %al,%es:(%rdi)
    4cbc:	aa                   	stos   %al,%es:(%rdi)
    4cbd:	aa                   	stos   %al,%es:(%rdi)
    4cbe:	aa                   	stos   %al,%es:(%rdi)
    4cbf:	aa                   	stos   %al,%es:(%rdi)
    4cc0:	aa                   	stos   %al,%es:(%rdi)
    4cc1:	aa                   	stos   %al,%es:(%rdi)
    4cc2:	aa                   	stos   %al,%es:(%rdi)
    4cc3:	aa                   	stos   %al,%es:(%rdi)
    4cc4:	aa                   	stos   %al,%es:(%rdi)
    4cc5:	aa                   	stos   %al,%es:(%rdi)
    4cc6:	aa                   	stos   %al,%es:(%rdi)
    4cc7:	aa                   	stos   %al,%es:(%rdi)
    4cc8:	aa                   	stos   %al,%es:(%rdi)
    4cc9:	aa                   	stos   %al,%es:(%rdi)
    4cca:	aa                   	stos   %al,%es:(%rdi)
    4ccb:	aa                   	stos   %al,%es:(%rdi)
    4ccc:	aa                   	stos   %al,%es:(%rdi)
    4ccd:	aa                   	stos   %al,%es:(%rdi)
    4cce:	aa                   	stos   %al,%es:(%rdi)
    4ccf:	aa                   	stos   %al,%es:(%rdi)
    4cd0:	aa                   	stos   %al,%es:(%rdi)
    4cd1:	aa                   	stos   %al,%es:(%rdi)
    4cd2:	aa                   	stos   %al,%es:(%rdi)
    4cd3:	aa                   	stos   %al,%es:(%rdi)
    4cd4:	aa                   	stos   %al,%es:(%rdi)
    4cd5:	aa                   	stos   %al,%es:(%rdi)
    4cd6:	aa                   	stos   %al,%es:(%rdi)
    4cd7:	aa                   	stos   %al,%es:(%rdi)
    4cd8:	aa                   	stos   %al,%es:(%rdi)
    4cd9:	aa                   	stos   %al,%es:(%rdi)
    4cda:	aa                   	stos   %al,%es:(%rdi)
    4cdb:	aa                   	stos   %al,%es:(%rdi)
    4cdc:	aa                   	stos   %al,%es:(%rdi)
    4cdd:	aa                   	stos   %al,%es:(%rdi)
    4cde:	aa                   	stos   %al,%es:(%rdi)
    4cdf:	aa                   	stos   %al,%es:(%rdi)
    4ce0:	aa                   	stos   %al,%es:(%rdi)
    4ce1:	aa                   	stos   %al,%es:(%rdi)
    4ce2:	aa                   	stos   %al,%es:(%rdi)
    4ce3:	aa                   	stos   %al,%es:(%rdi)
    4ce4:	aa                   	stos   %al,%es:(%rdi)
    4ce5:	aa                   	stos   %al,%es:(%rdi)
    4ce6:	aa                   	stos   %al,%es:(%rdi)
    4ce7:	aa                   	stos   %al,%es:(%rdi)
    4ce8:	aa                   	stos   %al,%es:(%rdi)
    4ce9:	aa                   	stos   %al,%es:(%rdi)
    4cea:	aa                   	stos   %al,%es:(%rdi)
    4ceb:	aa                   	stos   %al,%es:(%rdi)
    4cec:	aa                   	stos   %al,%es:(%rdi)
    4ced:	aa                   	stos   %al,%es:(%rdi)
    4cee:	aa                   	stos   %al,%es:(%rdi)
    4cef:	aa                   	stos   %al,%es:(%rdi)
    4cf0:	aa                   	stos   %al,%es:(%rdi)
    4cf1:	aa                   	stos   %al,%es:(%rdi)
    4cf2:	aa                   	stos   %al,%es:(%rdi)
    4cf3:	aa                   	stos   %al,%es:(%rdi)
    4cf4:	aa                   	stos   %al,%es:(%rdi)
    4cf5:	aa                   	stos   %al,%es:(%rdi)
    4cf6:	aa                   	stos   %al,%es:(%rdi)
    4cf7:	aa                   	stos   %al,%es:(%rdi)
    4cf8:	aa                   	stos   %al,%es:(%rdi)
    4cf9:	aa                   	stos   %al,%es:(%rdi)
    4cfa:	aa                   	stos   %al,%es:(%rdi)
    4cfb:	aa                   	stos   %al,%es:(%rdi)
    4cfc:	aa                   	stos   %al,%es:(%rdi)
    4cfd:	aa                   	stos   %al,%es:(%rdi)
    4cfe:	aa                   	stos   %al,%es:(%rdi)
    4cff:	aa                   	stos   %al,%es:(%rdi)
    4d00:	aa                   	stos   %al,%es:(%rdi)
    4d01:	aa                   	stos   %al,%es:(%rdi)
    4d02:	aa                   	stos   %al,%es:(%rdi)
    4d03:	aa                   	stos   %al,%es:(%rdi)
    4d04:	aa                   	stos   %al,%es:(%rdi)
    4d05:	aa                   	stos   %al,%es:(%rdi)
    4d06:	aa                   	stos   %al,%es:(%rdi)
    4d07:	aa                   	stos   %al,%es:(%rdi)
    4d08:	aa                   	stos   %al,%es:(%rdi)
    4d09:	aa                   	stos   %al,%es:(%rdi)
    4d0a:	aa                   	stos   %al,%es:(%rdi)
    4d0b:	aa                   	stos   %al,%es:(%rdi)
    4d0c:	aa                   	stos   %al,%es:(%rdi)
    4d0d:	aa                   	stos   %al,%es:(%rdi)
    4d0e:	aa                   	stos   %al,%es:(%rdi)
    4d0f:	aa                   	stos   %al,%es:(%rdi)
    4d10:	aa                   	stos   %al,%es:(%rdi)
    4d11:	aa                   	stos   %al,%es:(%rdi)
    4d12:	aa                   	stos   %al,%es:(%rdi)
    4d13:	aa                   	stos   %al,%es:(%rdi)
    4d14:	aa                   	stos   %al,%es:(%rdi)
    4d15:	aa                   	stos   %al,%es:(%rdi)
    4d16:	aa                   	stos   %al,%es:(%rdi)
    4d17:	aa                   	stos   %al,%es:(%rdi)
    4d18:	aa                   	stos   %al,%es:(%rdi)
    4d19:	aa                   	stos   %al,%es:(%rdi)
    4d1a:	aa                   	stos   %al,%es:(%rdi)
    4d1b:	aa                   	stos   %al,%es:(%rdi)
    4d1c:	aa                   	stos   %al,%es:(%rdi)
    4d1d:	aa                   	stos   %al,%es:(%rdi)
    4d1e:	aa                   	stos   %al,%es:(%rdi)
    4d1f:	aa                   	stos   %al,%es:(%rdi)
    4d20:	aa                   	stos   %al,%es:(%rdi)
    4d21:	aa                   	stos   %al,%es:(%rdi)
    4d22:	aa                   	stos   %al,%es:(%rdi)
    4d23:	aa                   	stos   %al,%es:(%rdi)
    4d24:	aa                   	stos   %al,%es:(%rdi)
    4d25:	aa                   	stos   %al,%es:(%rdi)
    4d26:	aa                   	stos   %al,%es:(%rdi)
    4d27:	aa                   	stos   %al,%es:(%rdi)
    4d28:	aa                   	stos   %al,%es:(%rdi)
    4d29:	aa                   	stos   %al,%es:(%rdi)
    4d2a:	aa                   	stos   %al,%es:(%rdi)
    4d2b:	aa                   	stos   %al,%es:(%rdi)
    4d2c:	aa                   	stos   %al,%es:(%rdi)
    4d2d:	aa                   	stos   %al,%es:(%rdi)
    4d2e:	aa                   	stos   %al,%es:(%rdi)
    4d2f:	aa                   	stos   %al,%es:(%rdi)
    4d30:	aa                   	stos   %al,%es:(%rdi)
    4d31:	aa                   	stos   %al,%es:(%rdi)
    4d32:	aa                   	stos   %al,%es:(%rdi)
    4d33:	aa                   	stos   %al,%es:(%rdi)
    4d34:	aa                   	stos   %al,%es:(%rdi)
    4d35:	aa                   	stos   %al,%es:(%rdi)
    4d36:	aa                   	stos   %al,%es:(%rdi)
    4d37:	aa                   	stos   %al,%es:(%rdi)
    4d38:	aa                   	stos   %al,%es:(%rdi)
    4d39:	aa                   	stos   %al,%es:(%rdi)
    4d3a:	aa                   	stos   %al,%es:(%rdi)
    4d3b:	aa                   	stos   %al,%es:(%rdi)
    4d3c:	aa                   	stos   %al,%es:(%rdi)
    4d3d:	aa                   	stos   %al,%es:(%rdi)
    4d3e:	aa                   	stos   %al,%es:(%rdi)
    4d3f:	aa                   	stos   %al,%es:(%rdi)
    4d40:	aa                   	stos   %al,%es:(%rdi)
    4d41:	aa                   	stos   %al,%es:(%rdi)
    4d42:	aa                   	stos   %al,%es:(%rdi)
    4d43:	aa                   	stos   %al,%es:(%rdi)
    4d44:	aa                   	stos   %al,%es:(%rdi)
    4d45:	aa                   	stos   %al,%es:(%rdi)
    4d46:	aa                   	stos   %al,%es:(%rdi)
    4d47:	aa                   	stos   %al,%es:(%rdi)
    4d48:	aa                   	stos   %al,%es:(%rdi)
    4d49:	aa                   	stos   %al,%es:(%rdi)
    4d4a:	aa                   	stos   %al,%es:(%rdi)
    4d4b:	aa                   	stos   %al,%es:(%rdi)
    4d4c:	aa                   	stos   %al,%es:(%rdi)
    4d4d:	aa                   	stos   %al,%es:(%rdi)
    4d4e:	aa                   	stos   %al,%es:(%rdi)
    4d4f:	aa                   	stos   %al,%es:(%rdi)
    4d50:	aa                   	stos   %al,%es:(%rdi)
    4d51:	aa                   	stos   %al,%es:(%rdi)
    4d52:	aa                   	stos   %al,%es:(%rdi)
    4d53:	aa                   	stos   %al,%es:(%rdi)
    4d54:	aa                   	stos   %al,%es:(%rdi)
    4d55:	aa                   	stos   %al,%es:(%rdi)
    4d56:	aa                   	stos   %al,%es:(%rdi)
    4d57:	aa                   	stos   %al,%es:(%rdi)
    4d58:	aa                   	stos   %al,%es:(%rdi)
    4d59:	aa                   	stos   %al,%es:(%rdi)
    4d5a:	aa                   	stos   %al,%es:(%rdi)
    4d5b:	aa                   	stos   %al,%es:(%rdi)
    4d5c:	aa                   	stos   %al,%es:(%rdi)
    4d5d:	aa                   	stos   %al,%es:(%rdi)
    4d5e:	aa                   	stos   %al,%es:(%rdi)
    4d5f:	aa                   	stos   %al,%es:(%rdi)
    4d60:	aa                   	stos   %al,%es:(%rdi)
    4d61:	aa                   	stos   %al,%es:(%rdi)
    4d62:	aa                   	stos   %al,%es:(%rdi)
    4d63:	aa                   	stos   %al,%es:(%rdi)
    4d64:	aa                   	stos   %al,%es:(%rdi)
    4d65:	aa                   	stos   %al,%es:(%rdi)
    4d66:	aa                   	stos   %al,%es:(%rdi)
    4d67:	aa                   	stos   %al,%es:(%rdi)
    4d68:	aa                   	stos   %al,%es:(%rdi)
    4d69:	aa                   	stos   %al,%es:(%rdi)
    4d6a:	aa                   	stos   %al,%es:(%rdi)
    4d6b:	aa                   	stos   %al,%es:(%rdi)
    4d6c:	aa                   	stos   %al,%es:(%rdi)
    4d6d:	aa                   	stos   %al,%es:(%rdi)
    4d6e:	aa                   	stos   %al,%es:(%rdi)
    4d6f:	aa                   	stos   %al,%es:(%rdi)
    4d70:	aa                   	stos   %al,%es:(%rdi)
    4d71:	aa                   	stos   %al,%es:(%rdi)
    4d72:	aa                   	stos   %al,%es:(%rdi)
    4d73:	aa                   	stos   %al,%es:(%rdi)
    4d74:	aa                   	stos   %al,%es:(%rdi)
    4d75:	aa                   	stos   %al,%es:(%rdi)
    4d76:	aa                   	stos   %al,%es:(%rdi)
    4d77:	aa                   	stos   %al,%es:(%rdi)
    4d78:	aa                   	stos   %al,%es:(%rdi)
    4d79:	aa                   	stos   %al,%es:(%rdi)
    4d7a:	aa                   	stos   %al,%es:(%rdi)
    4d7b:	aa                   	stos   %al,%es:(%rdi)
    4d7c:	aa                   	stos   %al,%es:(%rdi)
    4d7d:	aa                   	stos   %al,%es:(%rdi)
    4d7e:	aa                   	stos   %al,%es:(%rdi)
    4d7f:	aa                   	stos   %al,%es:(%rdi)
    4d80:	aa                   	stos   %al,%es:(%rdi)
    4d81:	aa                   	stos   %al,%es:(%rdi)
    4d82:	aa                   	stos   %al,%es:(%rdi)
    4d83:	aa                   	stos   %al,%es:(%rdi)
    4d84:	aa                   	stos   %al,%es:(%rdi)
    4d85:	aa                   	stos   %al,%es:(%rdi)
    4d86:	aa                   	stos   %al,%es:(%rdi)
    4d87:	aa                   	stos   %al,%es:(%rdi)
    4d88:	aa                   	stos   %al,%es:(%rdi)
    4d89:	aa                   	stos   %al,%es:(%rdi)
    4d8a:	aa                   	stos   %al,%es:(%rdi)
    4d8b:	aa                   	stos   %al,%es:(%rdi)
    4d8c:	aa                   	stos   %al,%es:(%rdi)
    4d8d:	aa                   	stos   %al,%es:(%rdi)
    4d8e:	aa                   	stos   %al,%es:(%rdi)
    4d8f:	aa                   	stos   %al,%es:(%rdi)
    4d90:	aa                   	stos   %al,%es:(%rdi)
    4d91:	aa                   	stos   %al,%es:(%rdi)
    4d92:	aa                   	stos   %al,%es:(%rdi)
    4d93:	aa                   	stos   %al,%es:(%rdi)
    4d94:	aa                   	stos   %al,%es:(%rdi)
    4d95:	aa                   	stos   %al,%es:(%rdi)
    4d96:	aa                   	stos   %al,%es:(%rdi)
    4d97:	aa                   	stos   %al,%es:(%rdi)
    4d98:	aa                   	stos   %al,%es:(%rdi)
    4d99:	aa                   	stos   %al,%es:(%rdi)
    4d9a:	aa                   	stos   %al,%es:(%rdi)
    4d9b:	aa                   	stos   %al,%es:(%rdi)
    4d9c:	aa                   	stos   %al,%es:(%rdi)
    4d9d:	aa                   	stos   %al,%es:(%rdi)
    4d9e:	aa                   	stos   %al,%es:(%rdi)
    4d9f:	aa                   	stos   %al,%es:(%rdi)
    4da0:	aa                   	stos   %al,%es:(%rdi)
    4da1:	aa                   	stos   %al,%es:(%rdi)
    4da2:	aa                   	stos   %al,%es:(%rdi)
    4da3:	aa                   	stos   %al,%es:(%rdi)
    4da4:	aa                   	stos   %al,%es:(%rdi)
    4da5:	aa                   	stos   %al,%es:(%rdi)
    4da6:	aa                   	stos   %al,%es:(%rdi)
    4da7:	aa                   	stos   %al,%es:(%rdi)
    4da8:	aa                   	stos   %al,%es:(%rdi)
    4da9:	aa                   	stos   %al,%es:(%rdi)
    4daa:	aa                   	stos   %al,%es:(%rdi)
    4dab:	aa                   	stos   %al,%es:(%rdi)
    4dac:	aa                   	stos   %al,%es:(%rdi)
    4dad:	aa                   	stos   %al,%es:(%rdi)
    4dae:	aa                   	stos   %al,%es:(%rdi)
    4daf:	aa                   	stos   %al,%es:(%rdi)
    4db0:	aa                   	stos   %al,%es:(%rdi)
    4db1:	aa                   	stos   %al,%es:(%rdi)
    4db2:	aa                   	stos   %al,%es:(%rdi)
    4db3:	aa                   	stos   %al,%es:(%rdi)
    4db4:	aa                   	stos   %al,%es:(%rdi)
    4db5:	aa                   	stos   %al,%es:(%rdi)
    4db6:	aa                   	stos   %al,%es:(%rdi)
    4db7:	aa                   	stos   %al,%es:(%rdi)
    4db8:	aa                   	stos   %al,%es:(%rdi)
    4db9:	aa                   	stos   %al,%es:(%rdi)
    4dba:	aa                   	stos   %al,%es:(%rdi)
    4dbb:	aa                   	stos   %al,%es:(%rdi)
    4dbc:	aa                   	stos   %al,%es:(%rdi)
    4dbd:	aa                   	stos   %al,%es:(%rdi)
    4dbe:	aa                   	stos   %al,%es:(%rdi)
    4dbf:	aa                   	stos   %al,%es:(%rdi)
    4dc0:	aa                   	stos   %al,%es:(%rdi)
    4dc1:	aa                   	stos   %al,%es:(%rdi)
    4dc2:	aa                   	stos   %al,%es:(%rdi)
    4dc3:	aa                   	stos   %al,%es:(%rdi)
    4dc4:	aa                   	stos   %al,%es:(%rdi)
    4dc5:	aa                   	stos   %al,%es:(%rdi)
    4dc6:	aa                   	stos   %al,%es:(%rdi)
    4dc7:	aa                   	stos   %al,%es:(%rdi)
    4dc8:	aa                   	stos   %al,%es:(%rdi)
    4dc9:	aa                   	stos   %al,%es:(%rdi)
    4dca:	aa                   	stos   %al,%es:(%rdi)
    4dcb:	aa                   	stos   %al,%es:(%rdi)
    4dcc:	aa                   	stos   %al,%es:(%rdi)
    4dcd:	aa                   	stos   %al,%es:(%rdi)
    4dce:	aa                   	stos   %al,%es:(%rdi)
    4dcf:	aa                   	stos   %al,%es:(%rdi)
    4dd0:	aa                   	stos   %al,%es:(%rdi)
    4dd1:	aa                   	stos   %al,%es:(%rdi)
    4dd2:	aa                   	stos   %al,%es:(%rdi)
    4dd3:	aa                   	stos   %al,%es:(%rdi)
    4dd4:	aa                   	stos   %al,%es:(%rdi)
    4dd5:	aa                   	stos   %al,%es:(%rdi)
    4dd6:	aa                   	stos   %al,%es:(%rdi)
    4dd7:	aa                   	stos   %al,%es:(%rdi)
    4dd8:	aa                   	stos   %al,%es:(%rdi)
    4dd9:	aa                   	stos   %al,%es:(%rdi)
    4dda:	aa                   	stos   %al,%es:(%rdi)
    4ddb:	aa                   	stos   %al,%es:(%rdi)
    4ddc:	aa                   	stos   %al,%es:(%rdi)
    4ddd:	aa                   	stos   %al,%es:(%rdi)
    4dde:	aa                   	stos   %al,%es:(%rdi)
    4ddf:	aa                   	stos   %al,%es:(%rdi)
    4de0:	aa                   	stos   %al,%es:(%rdi)
    4de1:	aa                   	stos   %al,%es:(%rdi)
    4de2:	aa                   	stos   %al,%es:(%rdi)
    4de3:	aa                   	stos   %al,%es:(%rdi)
    4de4:	aa                   	stos   %al,%es:(%rdi)
    4de5:	aa                   	stos   %al,%es:(%rdi)
    4de6:	aa                   	stos   %al,%es:(%rdi)
    4de7:	aa                   	stos   %al,%es:(%rdi)
    4de8:	aa                   	stos   %al,%es:(%rdi)
    4de9:	aa                   	stos   %al,%es:(%rdi)
    4dea:	aa                   	stos   %al,%es:(%rdi)
    4deb:	aa                   	stos   %al,%es:(%rdi)
    4dec:	aa                   	stos   %al,%es:(%rdi)
    4ded:	aa                   	stos   %al,%es:(%rdi)
    4dee:	aa                   	stos   %al,%es:(%rdi)
    4def:	aa                   	stos   %al,%es:(%rdi)
    4df0:	aa                   	stos   %al,%es:(%rdi)
    4df1:	aa                   	stos   %al,%es:(%rdi)
    4df2:	aa                   	stos   %al,%es:(%rdi)
    4df3:	aa                   	stos   %al,%es:(%rdi)
    4df4:	aa                   	stos   %al,%es:(%rdi)
    4df5:	aa                   	stos   %al,%es:(%rdi)
    4df6:	aa                   	stos   %al,%es:(%rdi)
    4df7:	aa                   	stos   %al,%es:(%rdi)
    4df8:	aa                   	stos   %al,%es:(%rdi)
    4df9:	aa                   	stos   %al,%es:(%rdi)
    4dfa:	aa                   	stos   %al,%es:(%rdi)
    4dfb:	aa                   	stos   %al,%es:(%rdi)
    4dfc:	aa                   	stos   %al,%es:(%rdi)
    4dfd:	aa                   	stos   %al,%es:(%rdi)
    4dfe:	aa                   	stos   %al,%es:(%rdi)
    4dff:	aa                   	stos   %al,%es:(%rdi)
    4e00:	aa                   	stos   %al,%es:(%rdi)
    4e01:	aa                   	stos   %al,%es:(%rdi)
    4e02:	aa                   	stos   %al,%es:(%rdi)
    4e03:	aa                   	stos   %al,%es:(%rdi)
    4e04:	aa                   	stos   %al,%es:(%rdi)
    4e05:	aa                   	stos   %al,%es:(%rdi)
    4e06:	aa                   	stos   %al,%es:(%rdi)
    4e07:	aa                   	stos   %al,%es:(%rdi)
    4e08:	aa                   	stos   %al,%es:(%rdi)
    4e09:	aa                   	stos   %al,%es:(%rdi)
    4e0a:	aa                   	stos   %al,%es:(%rdi)
    4e0b:	aa                   	stos   %al,%es:(%rdi)
    4e0c:	aa                   	stos   %al,%es:(%rdi)
    4e0d:	aa                   	stos   %al,%es:(%rdi)
    4e0e:	aa                   	stos   %al,%es:(%rdi)
    4e0f:	aa                   	stos   %al,%es:(%rdi)
    4e10:	aa                   	stos   %al,%es:(%rdi)
    4e11:	aa                   	stos   %al,%es:(%rdi)
    4e12:	aa                   	stos   %al,%es:(%rdi)
    4e13:	aa                   	stos   %al,%es:(%rdi)
    4e14:	aa                   	stos   %al,%es:(%rdi)
    4e15:	aa                   	stos   %al,%es:(%rdi)
    4e16:	aa                   	stos   %al,%es:(%rdi)
    4e17:	aa                   	stos   %al,%es:(%rdi)
    4e18:	aa                   	stos   %al,%es:(%rdi)
    4e19:	aa                   	stos   %al,%es:(%rdi)
    4e1a:	aa                   	stos   %al,%es:(%rdi)
    4e1b:	aa                   	stos   %al,%es:(%rdi)
    4e1c:	aa                   	stos   %al,%es:(%rdi)
    4e1d:	aa                   	stos   %al,%es:(%rdi)
    4e1e:	aa                   	stos   %al,%es:(%rdi)
    4e1f:	aa                   	stos   %al,%es:(%rdi)
    4e20:	aa                   	stos   %al,%es:(%rdi)
    4e21:	aa                   	stos   %al,%es:(%rdi)
    4e22:	aa                   	stos   %al,%es:(%rdi)
    4e23:	aa                   	stos   %al,%es:(%rdi)
    4e24:	aa                   	stos   %al,%es:(%rdi)
    4e25:	aa                   	stos   %al,%es:(%rdi)
    4e26:	aa                   	stos   %al,%es:(%rdi)
    4e27:	aa                   	stos   %al,%es:(%rdi)
    4e28:	aa                   	stos   %al,%es:(%rdi)
    4e29:	aa                   	stos   %al,%es:(%rdi)
    4e2a:	aa                   	stos   %al,%es:(%rdi)
    4e2b:	aa                   	stos   %al,%es:(%rdi)
    4e2c:	aa                   	stos   %al,%es:(%rdi)
    4e2d:	aa                   	stos   %al,%es:(%rdi)
    4e2e:	aa                   	stos   %al,%es:(%rdi)
    4e2f:	aa                   	stos   %al,%es:(%rdi)
    4e30:	aa                   	stos   %al,%es:(%rdi)
    4e31:	aa                   	stos   %al,%es:(%rdi)
    4e32:	aa                   	stos   %al,%es:(%rdi)
    4e33:	aa                   	stos   %al,%es:(%rdi)
    4e34:	aa                   	stos   %al,%es:(%rdi)
    4e35:	aa                   	stos   %al,%es:(%rdi)
    4e36:	aa                   	stos   %al,%es:(%rdi)
    4e37:	aa                   	stos   %al,%es:(%rdi)
    4e38:	aa                   	stos   %al,%es:(%rdi)
    4e39:	aa                   	stos   %al,%es:(%rdi)
    4e3a:	aa                   	stos   %al,%es:(%rdi)
    4e3b:	aa                   	stos   %al,%es:(%rdi)
    4e3c:	aa                   	stos   %al,%es:(%rdi)
    4e3d:	aa                   	stos   %al,%es:(%rdi)
    4e3e:	aa                   	stos   %al,%es:(%rdi)
    4e3f:	aa                   	stos   %al,%es:(%rdi)
    4e40:	aa                   	stos   %al,%es:(%rdi)
    4e41:	aa                   	stos   %al,%es:(%rdi)
    4e42:	aa                   	stos   %al,%es:(%rdi)
    4e43:	aa                   	stos   %al,%es:(%rdi)
    4e44:	aa                   	stos   %al,%es:(%rdi)
    4e45:	aa                   	stos   %al,%es:(%rdi)
    4e46:	aa                   	stos   %al,%es:(%rdi)
    4e47:	aa                   	stos   %al,%es:(%rdi)
    4e48:	aa                   	stos   %al,%es:(%rdi)
    4e49:	aa                   	stos   %al,%es:(%rdi)
    4e4a:	aa                   	stos   %al,%es:(%rdi)
    4e4b:	aa                   	stos   %al,%es:(%rdi)
    4e4c:	aa                   	stos   %al,%es:(%rdi)
    4e4d:	aa                   	stos   %al,%es:(%rdi)
    4e4e:	aa                   	stos   %al,%es:(%rdi)
    4e4f:	aa                   	stos   %al,%es:(%rdi)
    4e50:	aa                   	stos   %al,%es:(%rdi)
    4e51:	aa                   	stos   %al,%es:(%rdi)
    4e52:	aa                   	stos   %al,%es:(%rdi)
    4e53:	aa                   	stos   %al,%es:(%rdi)
    4e54:	aa                   	stos   %al,%es:(%rdi)
    4e55:	aa                   	stos   %al,%es:(%rdi)
    4e56:	aa                   	stos   %al,%es:(%rdi)
    4e57:	aa                   	stos   %al,%es:(%rdi)
    4e58:	aa                   	stos   %al,%es:(%rdi)
    4e59:	aa                   	stos   %al,%es:(%rdi)
    4e5a:	aa                   	stos   %al,%es:(%rdi)
    4e5b:	aa                   	stos   %al,%es:(%rdi)
    4e5c:	aa                   	stos   %al,%es:(%rdi)
    4e5d:	aa                   	stos   %al,%es:(%rdi)
    4e5e:	aa                   	stos   %al,%es:(%rdi)
    4e5f:	aa                   	stos   %al,%es:(%rdi)
    4e60:	aa                   	stos   %al,%es:(%rdi)
    4e61:	aa                   	stos   %al,%es:(%rdi)
    4e62:	aa                   	stos   %al,%es:(%rdi)
    4e63:	aa                   	stos   %al,%es:(%rdi)
    4e64:	aa                   	stos   %al,%es:(%rdi)
    4e65:	aa                   	stos   %al,%es:(%rdi)
    4e66:	aa                   	stos   %al,%es:(%rdi)
    4e67:	aa                   	stos   %al,%es:(%rdi)
    4e68:	aa                   	stos   %al,%es:(%rdi)
    4e69:	aa                   	stos   %al,%es:(%rdi)
    4e6a:	aa                   	stos   %al,%es:(%rdi)
    4e6b:	aa                   	stos   %al,%es:(%rdi)
    4e6c:	aa                   	stos   %al,%es:(%rdi)
    4e6d:	aa                   	stos   %al,%es:(%rdi)
    4e6e:	aa                   	stos   %al,%es:(%rdi)
    4e6f:	aa                   	stos   %al,%es:(%rdi)
    4e70:	aa                   	stos   %al,%es:(%rdi)
    4e71:	aa                   	stos   %al,%es:(%rdi)
    4e72:	aa                   	stos   %al,%es:(%rdi)
    4e73:	aa                   	stos   %al,%es:(%rdi)
    4e74:	aa                   	stos   %al,%es:(%rdi)
    4e75:	aa                   	stos   %al,%es:(%rdi)
    4e76:	aa                   	stos   %al,%es:(%rdi)
    4e77:	aa                   	stos   %al,%es:(%rdi)
    4e78:	aa                   	stos   %al,%es:(%rdi)
    4e79:	aa                   	stos   %al,%es:(%rdi)
    4e7a:	aa                   	stos   %al,%es:(%rdi)
    4e7b:	aa                   	stos   %al,%es:(%rdi)
    4e7c:	aa                   	stos   %al,%es:(%rdi)
    4e7d:	aa                   	stos   %al,%es:(%rdi)
    4e7e:	aa                   	stos   %al,%es:(%rdi)
    4e7f:	aa                   	stos   %al,%es:(%rdi)
    4e80:	aa                   	stos   %al,%es:(%rdi)
    4e81:	aa                   	stos   %al,%es:(%rdi)
    4e82:	aa                   	stos   %al,%es:(%rdi)
    4e83:	aa                   	stos   %al,%es:(%rdi)
    4e84:	aa                   	stos   %al,%es:(%rdi)
    4e85:	aa                   	stos   %al,%es:(%rdi)
    4e86:	aa                   	stos   %al,%es:(%rdi)
    4e87:	aa                   	stos   %al,%es:(%rdi)
    4e88:	aa                   	stos   %al,%es:(%rdi)
    4e89:	aa                   	stos   %al,%es:(%rdi)
    4e8a:	aa                   	stos   %al,%es:(%rdi)
    4e8b:	aa                   	stos   %al,%es:(%rdi)
    4e8c:	aa                   	stos   %al,%es:(%rdi)
    4e8d:	aa                   	stos   %al,%es:(%rdi)
    4e8e:	aa                   	stos   %al,%es:(%rdi)
    4e8f:	aa                   	stos   %al,%es:(%rdi)
    4e90:	aa                   	stos   %al,%es:(%rdi)
    4e91:	aa                   	stos   %al,%es:(%rdi)
    4e92:	aa                   	stos   %al,%es:(%rdi)
    4e93:	aa                   	stos   %al,%es:(%rdi)
    4e94:	aa                   	stos   %al,%es:(%rdi)
    4e95:	aa                   	stos   %al,%es:(%rdi)
    4e96:	aa                   	stos   %al,%es:(%rdi)
    4e97:	aa                   	stos   %al,%es:(%rdi)
    4e98:	aa                   	stos   %al,%es:(%rdi)
    4e99:	aa                   	stos   %al,%es:(%rdi)
    4e9a:	aa                   	stos   %al,%es:(%rdi)
    4e9b:	aa                   	stos   %al,%es:(%rdi)
    4e9c:	aa                   	stos   %al,%es:(%rdi)
    4e9d:	aa                   	stos   %al,%es:(%rdi)
    4e9e:	aa                   	stos   %al,%es:(%rdi)
    4e9f:	aa                   	stos   %al,%es:(%rdi)
    4ea0:	aa                   	stos   %al,%es:(%rdi)
    4ea1:	aa                   	stos   %al,%es:(%rdi)
    4ea2:	aa                   	stos   %al,%es:(%rdi)
    4ea3:	aa                   	stos   %al,%es:(%rdi)
    4ea4:	aa                   	stos   %al,%es:(%rdi)
    4ea5:	aa                   	stos   %al,%es:(%rdi)
    4ea6:	aa                   	stos   %al,%es:(%rdi)
    4ea7:	aa                   	stos   %al,%es:(%rdi)
    4ea8:	aa                   	stos   %al,%es:(%rdi)
    4ea9:	aa                   	stos   %al,%es:(%rdi)
    4eaa:	aa                   	stos   %al,%es:(%rdi)
    4eab:	aa                   	stos   %al,%es:(%rdi)
    4eac:	aa                   	stos   %al,%es:(%rdi)
    4ead:	aa                   	stos   %al,%es:(%rdi)
    4eae:	aa                   	stos   %al,%es:(%rdi)
    4eaf:	aa                   	stos   %al,%es:(%rdi)
    4eb0:	aa                   	stos   %al,%es:(%rdi)
    4eb1:	aa                   	stos   %al,%es:(%rdi)
    4eb2:	aa                   	stos   %al,%es:(%rdi)
    4eb3:	aa                   	stos   %al,%es:(%rdi)
    4eb4:	aa                   	stos   %al,%es:(%rdi)
    4eb5:	aa                   	stos   %al,%es:(%rdi)
    4eb6:	aa                   	stos   %al,%es:(%rdi)
    4eb7:	aa                   	stos   %al,%es:(%rdi)
    4eb8:	aa                   	stos   %al,%es:(%rdi)
    4eb9:	aa                   	stos   %al,%es:(%rdi)
    4eba:	aa                   	stos   %al,%es:(%rdi)
    4ebb:	aa                   	stos   %al,%es:(%rdi)
    4ebc:	aa                   	stos   %al,%es:(%rdi)
    4ebd:	aa                   	stos   %al,%es:(%rdi)
    4ebe:	aa                   	stos   %al,%es:(%rdi)
    4ebf:	aa                   	stos   %al,%es:(%rdi)
    4ec0:	aa                   	stos   %al,%es:(%rdi)
    4ec1:	aa                   	stos   %al,%es:(%rdi)
    4ec2:	aa                   	stos   %al,%es:(%rdi)
    4ec3:	aa                   	stos   %al,%es:(%rdi)
    4ec4:	aa                   	stos   %al,%es:(%rdi)
    4ec5:	aa                   	stos   %al,%es:(%rdi)
    4ec6:	aa                   	stos   %al,%es:(%rdi)
    4ec7:	aa                   	stos   %al,%es:(%rdi)
    4ec8:	aa                   	stos   %al,%es:(%rdi)
    4ec9:	aa                   	stos   %al,%es:(%rdi)
    4eca:	aa                   	stos   %al,%es:(%rdi)
    4ecb:	aa                   	stos   %al,%es:(%rdi)
    4ecc:	aa                   	stos   %al,%es:(%rdi)
    4ecd:	aa                   	stos   %al,%es:(%rdi)
    4ece:	aa                   	stos   %al,%es:(%rdi)
    4ecf:	aa                   	stos   %al,%es:(%rdi)
    4ed0:	aa                   	stos   %al,%es:(%rdi)
    4ed1:	aa                   	stos   %al,%es:(%rdi)
    4ed2:	aa                   	stos   %al,%es:(%rdi)
    4ed3:	aa                   	stos   %al,%es:(%rdi)
    4ed4:	aa                   	stos   %al,%es:(%rdi)
    4ed5:	aa                   	stos   %al,%es:(%rdi)
    4ed6:	aa                   	stos   %al,%es:(%rdi)
    4ed7:	aa                   	stos   %al,%es:(%rdi)
    4ed8:	aa                   	stos   %al,%es:(%rdi)
    4ed9:	aa                   	stos   %al,%es:(%rdi)
    4eda:	aa                   	stos   %al,%es:(%rdi)
    4edb:	aa                   	stos   %al,%es:(%rdi)
    4edc:	aa                   	stos   %al,%es:(%rdi)
    4edd:	aa                   	stos   %al,%es:(%rdi)
    4ede:	aa                   	stos   %al,%es:(%rdi)
    4edf:	aa                   	stos   %al,%es:(%rdi)
    4ee0:	aa                   	stos   %al,%es:(%rdi)
    4ee1:	aa                   	stos   %al,%es:(%rdi)
    4ee2:	aa                   	stos   %al,%es:(%rdi)
    4ee3:	aa                   	stos   %al,%es:(%rdi)
    4ee4:	aa                   	stos   %al,%es:(%rdi)
    4ee5:	aa                   	stos   %al,%es:(%rdi)
    4ee6:	aa                   	stos   %al,%es:(%rdi)
    4ee7:	aa                   	stos   %al,%es:(%rdi)
    4ee8:	aa                   	stos   %al,%es:(%rdi)
    4ee9:	aa                   	stos   %al,%es:(%rdi)
    4eea:	aa                   	stos   %al,%es:(%rdi)
    4eeb:	aa                   	stos   %al,%es:(%rdi)
    4eec:	aa                   	stos   %al,%es:(%rdi)
    4eed:	aa                   	stos   %al,%es:(%rdi)
    4eee:	aa                   	stos   %al,%es:(%rdi)
    4eef:	aa                   	stos   %al,%es:(%rdi)
    4ef0:	aa                   	stos   %al,%es:(%rdi)
    4ef1:	aa                   	stos   %al,%es:(%rdi)
    4ef2:	aa                   	stos   %al,%es:(%rdi)
    4ef3:	aa                   	stos   %al,%es:(%rdi)
    4ef4:	aa                   	stos   %al,%es:(%rdi)
    4ef5:	aa                   	stos   %al,%es:(%rdi)
    4ef6:	aa                   	stos   %al,%es:(%rdi)
    4ef7:	aa                   	stos   %al,%es:(%rdi)
    4ef8:	aa                   	stos   %al,%es:(%rdi)
    4ef9:	aa                   	stos   %al,%es:(%rdi)
    4efa:	aa                   	stos   %al,%es:(%rdi)
    4efb:	aa                   	stos   %al,%es:(%rdi)
    4efc:	aa                   	stos   %al,%es:(%rdi)
    4efd:	aa                   	stos   %al,%es:(%rdi)
    4efe:	aa                   	stos   %al,%es:(%rdi)
    4eff:	aa                   	stos   %al,%es:(%rdi)
    4f00:	aa                   	stos   %al,%es:(%rdi)
    4f01:	aa                   	stos   %al,%es:(%rdi)
    4f02:	aa                   	stos   %al,%es:(%rdi)
    4f03:	aa                   	stos   %al,%es:(%rdi)
    4f04:	aa                   	stos   %al,%es:(%rdi)
    4f05:	aa                   	stos   %al,%es:(%rdi)
    4f06:	aa                   	stos   %al,%es:(%rdi)
    4f07:	aa                   	stos   %al,%es:(%rdi)
    4f08:	aa                   	stos   %al,%es:(%rdi)
    4f09:	aa                   	stos   %al,%es:(%rdi)
    4f0a:	aa                   	stos   %al,%es:(%rdi)
    4f0b:	aa                   	stos   %al,%es:(%rdi)
    4f0c:	aa                   	stos   %al,%es:(%rdi)
    4f0d:	aa                   	stos   %al,%es:(%rdi)
    4f0e:	aa                   	stos   %al,%es:(%rdi)
    4f0f:	aa                   	stos   %al,%es:(%rdi)
    4f10:	aa                   	stos   %al,%es:(%rdi)
    4f11:	aa                   	stos   %al,%es:(%rdi)
    4f12:	aa                   	stos   %al,%es:(%rdi)
    4f13:	aa                   	stos   %al,%es:(%rdi)
    4f14:	aa                   	stos   %al,%es:(%rdi)
    4f15:	aa                   	stos   %al,%es:(%rdi)
    4f16:	aa                   	stos   %al,%es:(%rdi)
    4f17:	aa                   	stos   %al,%es:(%rdi)
    4f18:	aa                   	stos   %al,%es:(%rdi)
    4f19:	aa                   	stos   %al,%es:(%rdi)
    4f1a:	aa                   	stos   %al,%es:(%rdi)
    4f1b:	aa                   	stos   %al,%es:(%rdi)
    4f1c:	aa                   	stos   %al,%es:(%rdi)
    4f1d:	aa                   	stos   %al,%es:(%rdi)
    4f1e:	aa                   	stos   %al,%es:(%rdi)
    4f1f:	aa                   	stos   %al,%es:(%rdi)
    4f20:	aa                   	stos   %al,%es:(%rdi)
    4f21:	aa                   	stos   %al,%es:(%rdi)
    4f22:	aa                   	stos   %al,%es:(%rdi)
    4f23:	aa                   	stos   %al,%es:(%rdi)
    4f24:	aa                   	stos   %al,%es:(%rdi)
    4f25:	aa                   	stos   %al,%es:(%rdi)
    4f26:	aa                   	stos   %al,%es:(%rdi)
    4f27:	aa                   	stos   %al,%es:(%rdi)
    4f28:	aa                   	stos   %al,%es:(%rdi)
    4f29:	aa                   	stos   %al,%es:(%rdi)
    4f2a:	aa                   	stos   %al,%es:(%rdi)
    4f2b:	aa                   	stos   %al,%es:(%rdi)
    4f2c:	aa                   	stos   %al,%es:(%rdi)
    4f2d:	aa                   	stos   %al,%es:(%rdi)
    4f2e:	aa                   	stos   %al,%es:(%rdi)
    4f2f:	aa                   	stos   %al,%es:(%rdi)
    4f30:	aa                   	stos   %al,%es:(%rdi)
    4f31:	aa                   	stos   %al,%es:(%rdi)
    4f32:	aa                   	stos   %al,%es:(%rdi)
    4f33:	aa                   	stos   %al,%es:(%rdi)
    4f34:	aa                   	stos   %al,%es:(%rdi)
    4f35:	aa                   	stos   %al,%es:(%rdi)
    4f36:	aa                   	stos   %al,%es:(%rdi)
    4f37:	aa                   	stos   %al,%es:(%rdi)
    4f38:	aa                   	stos   %al,%es:(%rdi)
    4f39:	aa                   	stos   %al,%es:(%rdi)
    4f3a:	aa                   	stos   %al,%es:(%rdi)
    4f3b:	aa                   	stos   %al,%es:(%rdi)
    4f3c:	aa                   	stos   %al,%es:(%rdi)
    4f3d:	aa                   	stos   %al,%es:(%rdi)
    4f3e:	aa                   	stos   %al,%es:(%rdi)
    4f3f:	aa                   	stos   %al,%es:(%rdi)
    4f40:	aa                   	stos   %al,%es:(%rdi)
    4f41:	aa                   	stos   %al,%es:(%rdi)
    4f42:	aa                   	stos   %al,%es:(%rdi)
    4f43:	aa                   	stos   %al,%es:(%rdi)
    4f44:	aa                   	stos   %al,%es:(%rdi)
    4f45:	aa                   	stos   %al,%es:(%rdi)
    4f46:	aa                   	stos   %al,%es:(%rdi)
    4f47:	aa                   	stos   %al,%es:(%rdi)
    4f48:	aa                   	stos   %al,%es:(%rdi)
    4f49:	aa                   	stos   %al,%es:(%rdi)
    4f4a:	aa                   	stos   %al,%es:(%rdi)
    4f4b:	aa                   	stos   %al,%es:(%rdi)
    4f4c:	aa                   	stos   %al,%es:(%rdi)
    4f4d:	aa                   	stos   %al,%es:(%rdi)
    4f4e:	aa                   	stos   %al,%es:(%rdi)
    4f4f:	aa                   	stos   %al,%es:(%rdi)
    4f50:	aa                   	stos   %al,%es:(%rdi)
    4f51:	aa                   	stos   %al,%es:(%rdi)
    4f52:	aa                   	stos   %al,%es:(%rdi)
    4f53:	aa                   	stos   %al,%es:(%rdi)
    4f54:	aa                   	stos   %al,%es:(%rdi)
    4f55:	aa                   	stos   %al,%es:(%rdi)
    4f56:	aa                   	stos   %al,%es:(%rdi)
    4f57:	aa                   	stos   %al,%es:(%rdi)
    4f58:	aa                   	stos   %al,%es:(%rdi)
    4f59:	aa                   	stos   %al,%es:(%rdi)
    4f5a:	aa                   	stos   %al,%es:(%rdi)
    4f5b:	aa                   	stos   %al,%es:(%rdi)
    4f5c:	aa                   	stos   %al,%es:(%rdi)
    4f5d:	aa                   	stos   %al,%es:(%rdi)
    4f5e:	aa                   	stos   %al,%es:(%rdi)
    4f5f:	aa                   	stos   %al,%es:(%rdi)
    4f60:	aa                   	stos   %al,%es:(%rdi)
    4f61:	aa                   	stos   %al,%es:(%rdi)
    4f62:	aa                   	stos   %al,%es:(%rdi)
    4f63:	aa                   	stos   %al,%es:(%rdi)
    4f64:	aa                   	stos   %al,%es:(%rdi)
    4f65:	aa                   	stos   %al,%es:(%rdi)
    4f66:	aa                   	stos   %al,%es:(%rdi)
    4f67:	aa                   	stos   %al,%es:(%rdi)
    4f68:	aa                   	stos   %al,%es:(%rdi)
    4f69:	aa                   	stos   %al,%es:(%rdi)
    4f6a:	aa                   	stos   %al,%es:(%rdi)
    4f6b:	aa                   	stos   %al,%es:(%rdi)
    4f6c:	aa                   	stos   %al,%es:(%rdi)
    4f6d:	aa                   	stos   %al,%es:(%rdi)
    4f6e:	aa                   	stos   %al,%es:(%rdi)
    4f6f:	aa                   	stos   %al,%es:(%rdi)
    4f70:	aa                   	stos   %al,%es:(%rdi)
    4f71:	aa                   	stos   %al,%es:(%rdi)
    4f72:	aa                   	stos   %al,%es:(%rdi)
    4f73:	aa                   	stos   %al,%es:(%rdi)
    4f74:	aa                   	stos   %al,%es:(%rdi)
    4f75:	aa                   	stos   %al,%es:(%rdi)
    4f76:	aa                   	stos   %al,%es:(%rdi)
    4f77:	aa                   	stos   %al,%es:(%rdi)
    4f78:	aa                   	stos   %al,%es:(%rdi)
    4f79:	aa                   	stos   %al,%es:(%rdi)
    4f7a:	aa                   	stos   %al,%es:(%rdi)
    4f7b:	aa                   	stos   %al,%es:(%rdi)
    4f7c:	aa                   	stos   %al,%es:(%rdi)
    4f7d:	aa                   	stos   %al,%es:(%rdi)
    4f7e:	aa                   	stos   %al,%es:(%rdi)
    4f7f:	aa                   	stos   %al,%es:(%rdi)
    4f80:	aa                   	stos   %al,%es:(%rdi)
    4f81:	aa                   	stos   %al,%es:(%rdi)
    4f82:	aa                   	stos   %al,%es:(%rdi)
    4f83:	aa                   	stos   %al,%es:(%rdi)
    4f84:	aa                   	stos   %al,%es:(%rdi)
    4f85:	aa                   	stos   %al,%es:(%rdi)
    4f86:	aa                   	stos   %al,%es:(%rdi)
    4f87:	aa                   	stos   %al,%es:(%rdi)
    4f88:	aa                   	stos   %al,%es:(%rdi)
    4f89:	aa                   	stos   %al,%es:(%rdi)
    4f8a:	aa                   	stos   %al,%es:(%rdi)
    4f8b:	aa                   	stos   %al,%es:(%rdi)
    4f8c:	aa                   	stos   %al,%es:(%rdi)
    4f8d:	aa                   	stos   %al,%es:(%rdi)
    4f8e:	aa                   	stos   %al,%es:(%rdi)
    4f8f:	aa                   	stos   %al,%es:(%rdi)
    4f90:	aa                   	stos   %al,%es:(%rdi)
    4f91:	aa                   	stos   %al,%es:(%rdi)
    4f92:	aa                   	stos   %al,%es:(%rdi)
    4f93:	aa                   	stos   %al,%es:(%rdi)
    4f94:	aa                   	stos   %al,%es:(%rdi)
    4f95:	aa                   	stos   %al,%es:(%rdi)
    4f96:	aa                   	stos   %al,%es:(%rdi)
    4f97:	aa                   	stos   %al,%es:(%rdi)
    4f98:	aa                   	stos   %al,%es:(%rdi)
    4f99:	aa                   	stos   %al,%es:(%rdi)
    4f9a:	aa                   	stos   %al,%es:(%rdi)
    4f9b:	aa                   	stos   %al,%es:(%rdi)
    4f9c:	aa                   	stos   %al,%es:(%rdi)
    4f9d:	aa                   	stos   %al,%es:(%rdi)
    4f9e:	aa                   	stos   %al,%es:(%rdi)
    4f9f:	aa                   	stos   %al,%es:(%rdi)
    4fa0:	aa                   	stos   %al,%es:(%rdi)
    4fa1:	aa                   	stos   %al,%es:(%rdi)
    4fa2:	aa                   	stos   %al,%es:(%rdi)
    4fa3:	aa                   	stos   %al,%es:(%rdi)
    4fa4:	aa                   	stos   %al,%es:(%rdi)
    4fa5:	aa                   	stos   %al,%es:(%rdi)
    4fa6:	aa                   	stos   %al,%es:(%rdi)
    4fa7:	aa                   	stos   %al,%es:(%rdi)
    4fa8:	aa                   	stos   %al,%es:(%rdi)
    4fa9:	aa                   	stos   %al,%es:(%rdi)
    4faa:	aa                   	stos   %al,%es:(%rdi)
    4fab:	aa                   	stos   %al,%es:(%rdi)
    4fac:	aa                   	stos   %al,%es:(%rdi)
    4fad:	aa                   	stos   %al,%es:(%rdi)
    4fae:	aa                   	stos   %al,%es:(%rdi)
    4faf:	aa                   	stos   %al,%es:(%rdi)
    4fb0:	aa                   	stos   %al,%es:(%rdi)
    4fb1:	aa                   	stos   %al,%es:(%rdi)
    4fb2:	aa                   	stos   %al,%es:(%rdi)
    4fb3:	aa                   	stos   %al,%es:(%rdi)
    4fb4:	aa                   	stos   %al,%es:(%rdi)
    4fb5:	aa                   	stos   %al,%es:(%rdi)
    4fb6:	aa                   	stos   %al,%es:(%rdi)
    4fb7:	aa                   	stos   %al,%es:(%rdi)
    4fb8:	aa                   	stos   %al,%es:(%rdi)
    4fb9:	aa                   	stos   %al,%es:(%rdi)
    4fba:	aa                   	stos   %al,%es:(%rdi)
    4fbb:	aa                   	stos   %al,%es:(%rdi)
    4fbc:	aa                   	stos   %al,%es:(%rdi)
    4fbd:	aa                   	stos   %al,%es:(%rdi)
    4fbe:	aa                   	stos   %al,%es:(%rdi)
    4fbf:	aa                   	stos   %al,%es:(%rdi)
    4fc0:	aa                   	stos   %al,%es:(%rdi)
    4fc1:	aa                   	stos   %al,%es:(%rdi)
    4fc2:	aa                   	stos   %al,%es:(%rdi)
    4fc3:	aa                   	stos   %al,%es:(%rdi)
    4fc4:	aa                   	stos   %al,%es:(%rdi)
    4fc5:	aa                   	stos   %al,%es:(%rdi)
    4fc6:	aa                   	stos   %al,%es:(%rdi)
    4fc7:	aa                   	stos   %al,%es:(%rdi)
    4fc8:	aa                   	stos   %al,%es:(%rdi)
    4fc9:	aa                   	stos   %al,%es:(%rdi)
    4fca:	aa                   	stos   %al,%es:(%rdi)
    4fcb:	aa                   	stos   %al,%es:(%rdi)
    4fcc:	aa                   	stos   %al,%es:(%rdi)
    4fcd:	aa                   	stos   %al,%es:(%rdi)
    4fce:	aa                   	stos   %al,%es:(%rdi)
    4fcf:	aa                   	stos   %al,%es:(%rdi)
    4fd0:	aa                   	stos   %al,%es:(%rdi)
    4fd1:	aa                   	stos   %al,%es:(%rdi)
    4fd2:	aa                   	stos   %al,%es:(%rdi)
    4fd3:	aa                   	stos   %al,%es:(%rdi)
    4fd4:	aa                   	stos   %al,%es:(%rdi)
    4fd5:	aa                   	stos   %al,%es:(%rdi)
    4fd6:	aa                   	stos   %al,%es:(%rdi)
    4fd7:	aa                   	stos   %al,%es:(%rdi)
    4fd8:	aa                   	stos   %al,%es:(%rdi)
    4fd9:	aa                   	stos   %al,%es:(%rdi)
    4fda:	aa                   	stos   %al,%es:(%rdi)
    4fdb:	aa                   	stos   %al,%es:(%rdi)
    4fdc:	aa                   	stos   %al,%es:(%rdi)
    4fdd:	aa                   	stos   %al,%es:(%rdi)
    4fde:	aa                   	stos   %al,%es:(%rdi)
    4fdf:	aa                   	stos   %al,%es:(%rdi)
    4fe0:	aa                   	stos   %al,%es:(%rdi)
    4fe1:	aa                   	stos   %al,%es:(%rdi)
    4fe2:	aa                   	stos   %al,%es:(%rdi)
    4fe3:	aa                   	stos   %al,%es:(%rdi)
    4fe4:	aa                   	stos   %al,%es:(%rdi)
    4fe5:	aa                   	stos   %al,%es:(%rdi)
    4fe6:	aa                   	stos   %al,%es:(%rdi)
    4fe7:	aa                   	stos   %al,%es:(%rdi)
    4fe8:	aa                   	stos   %al,%es:(%rdi)
    4fe9:	aa                   	stos   %al,%es:(%rdi)
    4fea:	aa                   	stos   %al,%es:(%rdi)
    4feb:	aa                   	stos   %al,%es:(%rdi)
    4fec:	aa                   	stos   %al,%es:(%rdi)
    4fed:	aa                   	stos   %al,%es:(%rdi)
    4fee:	aa                   	stos   %al,%es:(%rdi)
    4fef:	aa                   	stos   %al,%es:(%rdi)
    4ff0:	aa                   	stos   %al,%es:(%rdi)
    4ff1:	aa                   	stos   %al,%es:(%rdi)
    4ff2:	aa                   	stos   %al,%es:(%rdi)
    4ff3:	aa                   	stos   %al,%es:(%rdi)
    4ff4:	aa                   	stos   %al,%es:(%rdi)
    4ff5:	aa                   	stos   %al,%es:(%rdi)
    4ff6:	aa                   	stos   %al,%es:(%rdi)
    4ff7:	aa                   	stos   %al,%es:(%rdi)
    4ff8:	aa                   	stos   %al,%es:(%rdi)
    4ff9:	aa                   	stos   %al,%es:(%rdi)
    4ffa:	aa                   	stos   %al,%es:(%rdi)
    4ffb:	aa                   	stos   %al,%es:(%rdi)
    4ffc:	aa                   	stos   %al,%es:(%rdi)
    4ffd:	aa                   	stos   %al,%es:(%rdi)
    4ffe:	aa                   	stos   %al,%es:(%rdi)
    4fff:	aa                   	stos   %al,%es:(%rdi)

0000000000005000 <z_x86_nmi_stack>:
    5000:	aa                   	stos   %al,%es:(%rdi)
    5001:	aa                   	stos   %al,%es:(%rdi)
    5002:	aa                   	stos   %al,%es:(%rdi)
    5003:	aa                   	stos   %al,%es:(%rdi)
    5004:	aa                   	stos   %al,%es:(%rdi)
    5005:	aa                   	stos   %al,%es:(%rdi)
    5006:	aa                   	stos   %al,%es:(%rdi)
    5007:	aa                   	stos   %al,%es:(%rdi)
    5008:	aa                   	stos   %al,%es:(%rdi)
    5009:	aa                   	stos   %al,%es:(%rdi)
    500a:	aa                   	stos   %al,%es:(%rdi)
    500b:	aa                   	stos   %al,%es:(%rdi)
    500c:	aa                   	stos   %al,%es:(%rdi)
    500d:	aa                   	stos   %al,%es:(%rdi)
    500e:	aa                   	stos   %al,%es:(%rdi)
    500f:	aa                   	stos   %al,%es:(%rdi)
    5010:	aa                   	stos   %al,%es:(%rdi)
    5011:	aa                   	stos   %al,%es:(%rdi)
    5012:	aa                   	stos   %al,%es:(%rdi)
    5013:	aa                   	stos   %al,%es:(%rdi)
    5014:	aa                   	stos   %al,%es:(%rdi)
    5015:	aa                   	stos   %al,%es:(%rdi)
    5016:	aa                   	stos   %al,%es:(%rdi)
    5017:	aa                   	stos   %al,%es:(%rdi)
    5018:	aa                   	stos   %al,%es:(%rdi)
    5019:	aa                   	stos   %al,%es:(%rdi)
    501a:	aa                   	stos   %al,%es:(%rdi)
    501b:	aa                   	stos   %al,%es:(%rdi)
    501c:	aa                   	stos   %al,%es:(%rdi)
    501d:	aa                   	stos   %al,%es:(%rdi)
    501e:	aa                   	stos   %al,%es:(%rdi)
    501f:	aa                   	stos   %al,%es:(%rdi)
    5020:	aa                   	stos   %al,%es:(%rdi)
    5021:	aa                   	stos   %al,%es:(%rdi)
    5022:	aa                   	stos   %al,%es:(%rdi)
    5023:	aa                   	stos   %al,%es:(%rdi)
    5024:	aa                   	stos   %al,%es:(%rdi)
    5025:	aa                   	stos   %al,%es:(%rdi)
    5026:	aa                   	stos   %al,%es:(%rdi)
    5027:	aa                   	stos   %al,%es:(%rdi)
    5028:	aa                   	stos   %al,%es:(%rdi)
    5029:	aa                   	stos   %al,%es:(%rdi)
    502a:	aa                   	stos   %al,%es:(%rdi)
    502b:	aa                   	stos   %al,%es:(%rdi)
    502c:	aa                   	stos   %al,%es:(%rdi)
    502d:	aa                   	stos   %al,%es:(%rdi)
    502e:	aa                   	stos   %al,%es:(%rdi)
    502f:	aa                   	stos   %al,%es:(%rdi)
    5030:	aa                   	stos   %al,%es:(%rdi)
    5031:	aa                   	stos   %al,%es:(%rdi)
    5032:	aa                   	stos   %al,%es:(%rdi)
    5033:	aa                   	stos   %al,%es:(%rdi)
    5034:	aa                   	stos   %al,%es:(%rdi)
    5035:	aa                   	stos   %al,%es:(%rdi)
    5036:	aa                   	stos   %al,%es:(%rdi)
    5037:	aa                   	stos   %al,%es:(%rdi)
    5038:	aa                   	stos   %al,%es:(%rdi)
    5039:	aa                   	stos   %al,%es:(%rdi)
    503a:	aa                   	stos   %al,%es:(%rdi)
    503b:	aa                   	stos   %al,%es:(%rdi)
    503c:	aa                   	stos   %al,%es:(%rdi)
    503d:	aa                   	stos   %al,%es:(%rdi)
    503e:	aa                   	stos   %al,%es:(%rdi)
    503f:	aa                   	stos   %al,%es:(%rdi)
    5040:	aa                   	stos   %al,%es:(%rdi)
    5041:	aa                   	stos   %al,%es:(%rdi)
    5042:	aa                   	stos   %al,%es:(%rdi)
    5043:	aa                   	stos   %al,%es:(%rdi)
    5044:	aa                   	stos   %al,%es:(%rdi)
    5045:	aa                   	stos   %al,%es:(%rdi)
    5046:	aa                   	stos   %al,%es:(%rdi)
    5047:	aa                   	stos   %al,%es:(%rdi)
    5048:	aa                   	stos   %al,%es:(%rdi)
    5049:	aa                   	stos   %al,%es:(%rdi)
    504a:	aa                   	stos   %al,%es:(%rdi)
    504b:	aa                   	stos   %al,%es:(%rdi)
    504c:	aa                   	stos   %al,%es:(%rdi)
    504d:	aa                   	stos   %al,%es:(%rdi)
    504e:	aa                   	stos   %al,%es:(%rdi)
    504f:	aa                   	stos   %al,%es:(%rdi)
    5050:	aa                   	stos   %al,%es:(%rdi)
    5051:	aa                   	stos   %al,%es:(%rdi)
    5052:	aa                   	stos   %al,%es:(%rdi)
    5053:	aa                   	stos   %al,%es:(%rdi)
    5054:	aa                   	stos   %al,%es:(%rdi)
    5055:	aa                   	stos   %al,%es:(%rdi)
    5056:	aa                   	stos   %al,%es:(%rdi)
    5057:	aa                   	stos   %al,%es:(%rdi)
    5058:	aa                   	stos   %al,%es:(%rdi)
    5059:	aa                   	stos   %al,%es:(%rdi)
    505a:	aa                   	stos   %al,%es:(%rdi)
    505b:	aa                   	stos   %al,%es:(%rdi)
    505c:	aa                   	stos   %al,%es:(%rdi)
    505d:	aa                   	stos   %al,%es:(%rdi)
    505e:	aa                   	stos   %al,%es:(%rdi)
    505f:	aa                   	stos   %al,%es:(%rdi)
    5060:	aa                   	stos   %al,%es:(%rdi)
    5061:	aa                   	stos   %al,%es:(%rdi)
    5062:	aa                   	stos   %al,%es:(%rdi)
    5063:	aa                   	stos   %al,%es:(%rdi)
    5064:	aa                   	stos   %al,%es:(%rdi)
    5065:	aa                   	stos   %al,%es:(%rdi)
    5066:	aa                   	stos   %al,%es:(%rdi)
    5067:	aa                   	stos   %al,%es:(%rdi)
    5068:	aa                   	stos   %al,%es:(%rdi)
    5069:	aa                   	stos   %al,%es:(%rdi)
    506a:	aa                   	stos   %al,%es:(%rdi)
    506b:	aa                   	stos   %al,%es:(%rdi)
    506c:	aa                   	stos   %al,%es:(%rdi)
    506d:	aa                   	stos   %al,%es:(%rdi)
    506e:	aa                   	stos   %al,%es:(%rdi)
    506f:	aa                   	stos   %al,%es:(%rdi)
    5070:	aa                   	stos   %al,%es:(%rdi)
    5071:	aa                   	stos   %al,%es:(%rdi)
    5072:	aa                   	stos   %al,%es:(%rdi)
    5073:	aa                   	stos   %al,%es:(%rdi)
    5074:	aa                   	stos   %al,%es:(%rdi)
    5075:	aa                   	stos   %al,%es:(%rdi)
    5076:	aa                   	stos   %al,%es:(%rdi)
    5077:	aa                   	stos   %al,%es:(%rdi)
    5078:	aa                   	stos   %al,%es:(%rdi)
    5079:	aa                   	stos   %al,%es:(%rdi)
    507a:	aa                   	stos   %al,%es:(%rdi)
    507b:	aa                   	stos   %al,%es:(%rdi)
    507c:	aa                   	stos   %al,%es:(%rdi)
    507d:	aa                   	stos   %al,%es:(%rdi)
    507e:	aa                   	stos   %al,%es:(%rdi)
    507f:	aa                   	stos   %al,%es:(%rdi)
    5080:	aa                   	stos   %al,%es:(%rdi)
    5081:	aa                   	stos   %al,%es:(%rdi)
    5082:	aa                   	stos   %al,%es:(%rdi)
    5083:	aa                   	stos   %al,%es:(%rdi)
    5084:	aa                   	stos   %al,%es:(%rdi)
    5085:	aa                   	stos   %al,%es:(%rdi)
    5086:	aa                   	stos   %al,%es:(%rdi)
    5087:	aa                   	stos   %al,%es:(%rdi)
    5088:	aa                   	stos   %al,%es:(%rdi)
    5089:	aa                   	stos   %al,%es:(%rdi)
    508a:	aa                   	stos   %al,%es:(%rdi)
    508b:	aa                   	stos   %al,%es:(%rdi)
    508c:	aa                   	stos   %al,%es:(%rdi)
    508d:	aa                   	stos   %al,%es:(%rdi)
    508e:	aa                   	stos   %al,%es:(%rdi)
    508f:	aa                   	stos   %al,%es:(%rdi)
    5090:	aa                   	stos   %al,%es:(%rdi)
    5091:	aa                   	stos   %al,%es:(%rdi)
    5092:	aa                   	stos   %al,%es:(%rdi)
    5093:	aa                   	stos   %al,%es:(%rdi)
    5094:	aa                   	stos   %al,%es:(%rdi)
    5095:	aa                   	stos   %al,%es:(%rdi)
    5096:	aa                   	stos   %al,%es:(%rdi)
    5097:	aa                   	stos   %al,%es:(%rdi)
    5098:	aa                   	stos   %al,%es:(%rdi)
    5099:	aa                   	stos   %al,%es:(%rdi)
    509a:	aa                   	stos   %al,%es:(%rdi)
    509b:	aa                   	stos   %al,%es:(%rdi)
    509c:	aa                   	stos   %al,%es:(%rdi)
    509d:	aa                   	stos   %al,%es:(%rdi)
    509e:	aa                   	stos   %al,%es:(%rdi)
    509f:	aa                   	stos   %al,%es:(%rdi)
    50a0:	aa                   	stos   %al,%es:(%rdi)
    50a1:	aa                   	stos   %al,%es:(%rdi)
    50a2:	aa                   	stos   %al,%es:(%rdi)
    50a3:	aa                   	stos   %al,%es:(%rdi)
    50a4:	aa                   	stos   %al,%es:(%rdi)
    50a5:	aa                   	stos   %al,%es:(%rdi)
    50a6:	aa                   	stos   %al,%es:(%rdi)
    50a7:	aa                   	stos   %al,%es:(%rdi)
    50a8:	aa                   	stos   %al,%es:(%rdi)
    50a9:	aa                   	stos   %al,%es:(%rdi)
    50aa:	aa                   	stos   %al,%es:(%rdi)
    50ab:	aa                   	stos   %al,%es:(%rdi)
    50ac:	aa                   	stos   %al,%es:(%rdi)
    50ad:	aa                   	stos   %al,%es:(%rdi)
    50ae:	aa                   	stos   %al,%es:(%rdi)
    50af:	aa                   	stos   %al,%es:(%rdi)
    50b0:	aa                   	stos   %al,%es:(%rdi)
    50b1:	aa                   	stos   %al,%es:(%rdi)
    50b2:	aa                   	stos   %al,%es:(%rdi)
    50b3:	aa                   	stos   %al,%es:(%rdi)
    50b4:	aa                   	stos   %al,%es:(%rdi)
    50b5:	aa                   	stos   %al,%es:(%rdi)
    50b6:	aa                   	stos   %al,%es:(%rdi)
    50b7:	aa                   	stos   %al,%es:(%rdi)
    50b8:	aa                   	stos   %al,%es:(%rdi)
    50b9:	aa                   	stos   %al,%es:(%rdi)
    50ba:	aa                   	stos   %al,%es:(%rdi)
    50bb:	aa                   	stos   %al,%es:(%rdi)
    50bc:	aa                   	stos   %al,%es:(%rdi)
    50bd:	aa                   	stos   %al,%es:(%rdi)
    50be:	aa                   	stos   %al,%es:(%rdi)
    50bf:	aa                   	stos   %al,%es:(%rdi)
    50c0:	aa                   	stos   %al,%es:(%rdi)
    50c1:	aa                   	stos   %al,%es:(%rdi)
    50c2:	aa                   	stos   %al,%es:(%rdi)
    50c3:	aa                   	stos   %al,%es:(%rdi)
    50c4:	aa                   	stos   %al,%es:(%rdi)
    50c5:	aa                   	stos   %al,%es:(%rdi)
    50c6:	aa                   	stos   %al,%es:(%rdi)
    50c7:	aa                   	stos   %al,%es:(%rdi)
    50c8:	aa                   	stos   %al,%es:(%rdi)
    50c9:	aa                   	stos   %al,%es:(%rdi)
    50ca:	aa                   	stos   %al,%es:(%rdi)
    50cb:	aa                   	stos   %al,%es:(%rdi)
    50cc:	aa                   	stos   %al,%es:(%rdi)
    50cd:	aa                   	stos   %al,%es:(%rdi)
    50ce:	aa                   	stos   %al,%es:(%rdi)
    50cf:	aa                   	stos   %al,%es:(%rdi)
    50d0:	aa                   	stos   %al,%es:(%rdi)
    50d1:	aa                   	stos   %al,%es:(%rdi)
    50d2:	aa                   	stos   %al,%es:(%rdi)
    50d3:	aa                   	stos   %al,%es:(%rdi)
    50d4:	aa                   	stos   %al,%es:(%rdi)
    50d5:	aa                   	stos   %al,%es:(%rdi)
    50d6:	aa                   	stos   %al,%es:(%rdi)
    50d7:	aa                   	stos   %al,%es:(%rdi)
    50d8:	aa                   	stos   %al,%es:(%rdi)
    50d9:	aa                   	stos   %al,%es:(%rdi)
    50da:	aa                   	stos   %al,%es:(%rdi)
    50db:	aa                   	stos   %al,%es:(%rdi)
    50dc:	aa                   	stos   %al,%es:(%rdi)
    50dd:	aa                   	stos   %al,%es:(%rdi)
    50de:	aa                   	stos   %al,%es:(%rdi)
    50df:	aa                   	stos   %al,%es:(%rdi)
    50e0:	aa                   	stos   %al,%es:(%rdi)
    50e1:	aa                   	stos   %al,%es:(%rdi)
    50e2:	aa                   	stos   %al,%es:(%rdi)
    50e3:	aa                   	stos   %al,%es:(%rdi)
    50e4:	aa                   	stos   %al,%es:(%rdi)
    50e5:	aa                   	stos   %al,%es:(%rdi)
    50e6:	aa                   	stos   %al,%es:(%rdi)
    50e7:	aa                   	stos   %al,%es:(%rdi)
    50e8:	aa                   	stos   %al,%es:(%rdi)
    50e9:	aa                   	stos   %al,%es:(%rdi)
    50ea:	aa                   	stos   %al,%es:(%rdi)
    50eb:	aa                   	stos   %al,%es:(%rdi)
    50ec:	aa                   	stos   %al,%es:(%rdi)
    50ed:	aa                   	stos   %al,%es:(%rdi)
    50ee:	aa                   	stos   %al,%es:(%rdi)
    50ef:	aa                   	stos   %al,%es:(%rdi)
    50f0:	aa                   	stos   %al,%es:(%rdi)
    50f1:	aa                   	stos   %al,%es:(%rdi)
    50f2:	aa                   	stos   %al,%es:(%rdi)
    50f3:	aa                   	stos   %al,%es:(%rdi)
    50f4:	aa                   	stos   %al,%es:(%rdi)
    50f5:	aa                   	stos   %al,%es:(%rdi)
    50f6:	aa                   	stos   %al,%es:(%rdi)
    50f7:	aa                   	stos   %al,%es:(%rdi)
    50f8:	aa                   	stos   %al,%es:(%rdi)
    50f9:	aa                   	stos   %al,%es:(%rdi)
    50fa:	aa                   	stos   %al,%es:(%rdi)
    50fb:	aa                   	stos   %al,%es:(%rdi)
    50fc:	aa                   	stos   %al,%es:(%rdi)
    50fd:	aa                   	stos   %al,%es:(%rdi)
    50fe:	aa                   	stos   %al,%es:(%rdi)
    50ff:	aa                   	stos   %al,%es:(%rdi)
    5100:	aa                   	stos   %al,%es:(%rdi)
    5101:	aa                   	stos   %al,%es:(%rdi)
    5102:	aa                   	stos   %al,%es:(%rdi)
    5103:	aa                   	stos   %al,%es:(%rdi)
    5104:	aa                   	stos   %al,%es:(%rdi)
    5105:	aa                   	stos   %al,%es:(%rdi)
    5106:	aa                   	stos   %al,%es:(%rdi)
    5107:	aa                   	stos   %al,%es:(%rdi)
    5108:	aa                   	stos   %al,%es:(%rdi)
    5109:	aa                   	stos   %al,%es:(%rdi)
    510a:	aa                   	stos   %al,%es:(%rdi)
    510b:	aa                   	stos   %al,%es:(%rdi)
    510c:	aa                   	stos   %al,%es:(%rdi)
    510d:	aa                   	stos   %al,%es:(%rdi)
    510e:	aa                   	stos   %al,%es:(%rdi)
    510f:	aa                   	stos   %al,%es:(%rdi)
    5110:	aa                   	stos   %al,%es:(%rdi)
    5111:	aa                   	stos   %al,%es:(%rdi)
    5112:	aa                   	stos   %al,%es:(%rdi)
    5113:	aa                   	stos   %al,%es:(%rdi)
    5114:	aa                   	stos   %al,%es:(%rdi)
    5115:	aa                   	stos   %al,%es:(%rdi)
    5116:	aa                   	stos   %al,%es:(%rdi)
    5117:	aa                   	stos   %al,%es:(%rdi)
    5118:	aa                   	stos   %al,%es:(%rdi)
    5119:	aa                   	stos   %al,%es:(%rdi)
    511a:	aa                   	stos   %al,%es:(%rdi)
    511b:	aa                   	stos   %al,%es:(%rdi)
    511c:	aa                   	stos   %al,%es:(%rdi)
    511d:	aa                   	stos   %al,%es:(%rdi)
    511e:	aa                   	stos   %al,%es:(%rdi)
    511f:	aa                   	stos   %al,%es:(%rdi)
    5120:	aa                   	stos   %al,%es:(%rdi)
    5121:	aa                   	stos   %al,%es:(%rdi)
    5122:	aa                   	stos   %al,%es:(%rdi)
    5123:	aa                   	stos   %al,%es:(%rdi)
    5124:	aa                   	stos   %al,%es:(%rdi)
    5125:	aa                   	stos   %al,%es:(%rdi)
    5126:	aa                   	stos   %al,%es:(%rdi)
    5127:	aa                   	stos   %al,%es:(%rdi)
    5128:	aa                   	stos   %al,%es:(%rdi)
    5129:	aa                   	stos   %al,%es:(%rdi)
    512a:	aa                   	stos   %al,%es:(%rdi)
    512b:	aa                   	stos   %al,%es:(%rdi)
    512c:	aa                   	stos   %al,%es:(%rdi)
    512d:	aa                   	stos   %al,%es:(%rdi)
    512e:	aa                   	stos   %al,%es:(%rdi)
    512f:	aa                   	stos   %al,%es:(%rdi)
    5130:	aa                   	stos   %al,%es:(%rdi)
    5131:	aa                   	stos   %al,%es:(%rdi)
    5132:	aa                   	stos   %al,%es:(%rdi)
    5133:	aa                   	stos   %al,%es:(%rdi)
    5134:	aa                   	stos   %al,%es:(%rdi)
    5135:	aa                   	stos   %al,%es:(%rdi)
    5136:	aa                   	stos   %al,%es:(%rdi)
    5137:	aa                   	stos   %al,%es:(%rdi)
    5138:	aa                   	stos   %al,%es:(%rdi)
    5139:	aa                   	stos   %al,%es:(%rdi)
    513a:	aa                   	stos   %al,%es:(%rdi)
    513b:	aa                   	stos   %al,%es:(%rdi)
    513c:	aa                   	stos   %al,%es:(%rdi)
    513d:	aa                   	stos   %al,%es:(%rdi)
    513e:	aa                   	stos   %al,%es:(%rdi)
    513f:	aa                   	stos   %al,%es:(%rdi)
    5140:	aa                   	stos   %al,%es:(%rdi)
    5141:	aa                   	stos   %al,%es:(%rdi)
    5142:	aa                   	stos   %al,%es:(%rdi)
    5143:	aa                   	stos   %al,%es:(%rdi)
    5144:	aa                   	stos   %al,%es:(%rdi)
    5145:	aa                   	stos   %al,%es:(%rdi)
    5146:	aa                   	stos   %al,%es:(%rdi)
    5147:	aa                   	stos   %al,%es:(%rdi)
    5148:	aa                   	stos   %al,%es:(%rdi)
    5149:	aa                   	stos   %al,%es:(%rdi)
    514a:	aa                   	stos   %al,%es:(%rdi)
    514b:	aa                   	stos   %al,%es:(%rdi)
    514c:	aa                   	stos   %al,%es:(%rdi)
    514d:	aa                   	stos   %al,%es:(%rdi)
    514e:	aa                   	stos   %al,%es:(%rdi)
    514f:	aa                   	stos   %al,%es:(%rdi)
    5150:	aa                   	stos   %al,%es:(%rdi)
    5151:	aa                   	stos   %al,%es:(%rdi)
    5152:	aa                   	stos   %al,%es:(%rdi)
    5153:	aa                   	stos   %al,%es:(%rdi)
    5154:	aa                   	stos   %al,%es:(%rdi)
    5155:	aa                   	stos   %al,%es:(%rdi)
    5156:	aa                   	stos   %al,%es:(%rdi)
    5157:	aa                   	stos   %al,%es:(%rdi)
    5158:	aa                   	stos   %al,%es:(%rdi)
    5159:	aa                   	stos   %al,%es:(%rdi)
    515a:	aa                   	stos   %al,%es:(%rdi)
    515b:	aa                   	stos   %al,%es:(%rdi)
    515c:	aa                   	stos   %al,%es:(%rdi)
    515d:	aa                   	stos   %al,%es:(%rdi)
    515e:	aa                   	stos   %al,%es:(%rdi)
    515f:	aa                   	stos   %al,%es:(%rdi)
    5160:	aa                   	stos   %al,%es:(%rdi)
    5161:	aa                   	stos   %al,%es:(%rdi)
    5162:	aa                   	stos   %al,%es:(%rdi)
    5163:	aa                   	stos   %al,%es:(%rdi)
    5164:	aa                   	stos   %al,%es:(%rdi)
    5165:	aa                   	stos   %al,%es:(%rdi)
    5166:	aa                   	stos   %al,%es:(%rdi)
    5167:	aa                   	stos   %al,%es:(%rdi)
    5168:	aa                   	stos   %al,%es:(%rdi)
    5169:	aa                   	stos   %al,%es:(%rdi)
    516a:	aa                   	stos   %al,%es:(%rdi)
    516b:	aa                   	stos   %al,%es:(%rdi)
    516c:	aa                   	stos   %al,%es:(%rdi)
    516d:	aa                   	stos   %al,%es:(%rdi)
    516e:	aa                   	stos   %al,%es:(%rdi)
    516f:	aa                   	stos   %al,%es:(%rdi)
    5170:	aa                   	stos   %al,%es:(%rdi)
    5171:	aa                   	stos   %al,%es:(%rdi)
    5172:	aa                   	stos   %al,%es:(%rdi)
    5173:	aa                   	stos   %al,%es:(%rdi)
    5174:	aa                   	stos   %al,%es:(%rdi)
    5175:	aa                   	stos   %al,%es:(%rdi)
    5176:	aa                   	stos   %al,%es:(%rdi)
    5177:	aa                   	stos   %al,%es:(%rdi)
    5178:	aa                   	stos   %al,%es:(%rdi)
    5179:	aa                   	stos   %al,%es:(%rdi)
    517a:	aa                   	stos   %al,%es:(%rdi)
    517b:	aa                   	stos   %al,%es:(%rdi)
    517c:	aa                   	stos   %al,%es:(%rdi)
    517d:	aa                   	stos   %al,%es:(%rdi)
    517e:	aa                   	stos   %al,%es:(%rdi)
    517f:	aa                   	stos   %al,%es:(%rdi)
    5180:	aa                   	stos   %al,%es:(%rdi)
    5181:	aa                   	stos   %al,%es:(%rdi)
    5182:	aa                   	stos   %al,%es:(%rdi)
    5183:	aa                   	stos   %al,%es:(%rdi)
    5184:	aa                   	stos   %al,%es:(%rdi)
    5185:	aa                   	stos   %al,%es:(%rdi)
    5186:	aa                   	stos   %al,%es:(%rdi)
    5187:	aa                   	stos   %al,%es:(%rdi)
    5188:	aa                   	stos   %al,%es:(%rdi)
    5189:	aa                   	stos   %al,%es:(%rdi)
    518a:	aa                   	stos   %al,%es:(%rdi)
    518b:	aa                   	stos   %al,%es:(%rdi)
    518c:	aa                   	stos   %al,%es:(%rdi)
    518d:	aa                   	stos   %al,%es:(%rdi)
    518e:	aa                   	stos   %al,%es:(%rdi)
    518f:	aa                   	stos   %al,%es:(%rdi)
    5190:	aa                   	stos   %al,%es:(%rdi)
    5191:	aa                   	stos   %al,%es:(%rdi)
    5192:	aa                   	stos   %al,%es:(%rdi)
    5193:	aa                   	stos   %al,%es:(%rdi)
    5194:	aa                   	stos   %al,%es:(%rdi)
    5195:	aa                   	stos   %al,%es:(%rdi)
    5196:	aa                   	stos   %al,%es:(%rdi)
    5197:	aa                   	stos   %al,%es:(%rdi)
    5198:	aa                   	stos   %al,%es:(%rdi)
    5199:	aa                   	stos   %al,%es:(%rdi)
    519a:	aa                   	stos   %al,%es:(%rdi)
    519b:	aa                   	stos   %al,%es:(%rdi)
    519c:	aa                   	stos   %al,%es:(%rdi)
    519d:	aa                   	stos   %al,%es:(%rdi)
    519e:	aa                   	stos   %al,%es:(%rdi)
    519f:	aa                   	stos   %al,%es:(%rdi)
    51a0:	aa                   	stos   %al,%es:(%rdi)
    51a1:	aa                   	stos   %al,%es:(%rdi)
    51a2:	aa                   	stos   %al,%es:(%rdi)
    51a3:	aa                   	stos   %al,%es:(%rdi)
    51a4:	aa                   	stos   %al,%es:(%rdi)
    51a5:	aa                   	stos   %al,%es:(%rdi)
    51a6:	aa                   	stos   %al,%es:(%rdi)
    51a7:	aa                   	stos   %al,%es:(%rdi)
    51a8:	aa                   	stos   %al,%es:(%rdi)
    51a9:	aa                   	stos   %al,%es:(%rdi)
    51aa:	aa                   	stos   %al,%es:(%rdi)
    51ab:	aa                   	stos   %al,%es:(%rdi)
    51ac:	aa                   	stos   %al,%es:(%rdi)
    51ad:	aa                   	stos   %al,%es:(%rdi)
    51ae:	aa                   	stos   %al,%es:(%rdi)
    51af:	aa                   	stos   %al,%es:(%rdi)
    51b0:	aa                   	stos   %al,%es:(%rdi)
    51b1:	aa                   	stos   %al,%es:(%rdi)
    51b2:	aa                   	stos   %al,%es:(%rdi)
    51b3:	aa                   	stos   %al,%es:(%rdi)
    51b4:	aa                   	stos   %al,%es:(%rdi)
    51b5:	aa                   	stos   %al,%es:(%rdi)
    51b6:	aa                   	stos   %al,%es:(%rdi)
    51b7:	aa                   	stos   %al,%es:(%rdi)
    51b8:	aa                   	stos   %al,%es:(%rdi)
    51b9:	aa                   	stos   %al,%es:(%rdi)
    51ba:	aa                   	stos   %al,%es:(%rdi)
    51bb:	aa                   	stos   %al,%es:(%rdi)
    51bc:	aa                   	stos   %al,%es:(%rdi)
    51bd:	aa                   	stos   %al,%es:(%rdi)
    51be:	aa                   	stos   %al,%es:(%rdi)
    51bf:	aa                   	stos   %al,%es:(%rdi)
    51c0:	aa                   	stos   %al,%es:(%rdi)
    51c1:	aa                   	stos   %al,%es:(%rdi)
    51c2:	aa                   	stos   %al,%es:(%rdi)
    51c3:	aa                   	stos   %al,%es:(%rdi)
    51c4:	aa                   	stos   %al,%es:(%rdi)
    51c5:	aa                   	stos   %al,%es:(%rdi)
    51c6:	aa                   	stos   %al,%es:(%rdi)
    51c7:	aa                   	stos   %al,%es:(%rdi)
    51c8:	aa                   	stos   %al,%es:(%rdi)
    51c9:	aa                   	stos   %al,%es:(%rdi)
    51ca:	aa                   	stos   %al,%es:(%rdi)
    51cb:	aa                   	stos   %al,%es:(%rdi)
    51cc:	aa                   	stos   %al,%es:(%rdi)
    51cd:	aa                   	stos   %al,%es:(%rdi)
    51ce:	aa                   	stos   %al,%es:(%rdi)
    51cf:	aa                   	stos   %al,%es:(%rdi)
    51d0:	aa                   	stos   %al,%es:(%rdi)
    51d1:	aa                   	stos   %al,%es:(%rdi)
    51d2:	aa                   	stos   %al,%es:(%rdi)
    51d3:	aa                   	stos   %al,%es:(%rdi)
    51d4:	aa                   	stos   %al,%es:(%rdi)
    51d5:	aa                   	stos   %al,%es:(%rdi)
    51d6:	aa                   	stos   %al,%es:(%rdi)
    51d7:	aa                   	stos   %al,%es:(%rdi)
    51d8:	aa                   	stos   %al,%es:(%rdi)
    51d9:	aa                   	stos   %al,%es:(%rdi)
    51da:	aa                   	stos   %al,%es:(%rdi)
    51db:	aa                   	stos   %al,%es:(%rdi)
    51dc:	aa                   	stos   %al,%es:(%rdi)
    51dd:	aa                   	stos   %al,%es:(%rdi)
    51de:	aa                   	stos   %al,%es:(%rdi)
    51df:	aa                   	stos   %al,%es:(%rdi)
    51e0:	aa                   	stos   %al,%es:(%rdi)
    51e1:	aa                   	stos   %al,%es:(%rdi)
    51e2:	aa                   	stos   %al,%es:(%rdi)
    51e3:	aa                   	stos   %al,%es:(%rdi)
    51e4:	aa                   	stos   %al,%es:(%rdi)
    51e5:	aa                   	stos   %al,%es:(%rdi)
    51e6:	aa                   	stos   %al,%es:(%rdi)
    51e7:	aa                   	stos   %al,%es:(%rdi)
    51e8:	aa                   	stos   %al,%es:(%rdi)
    51e9:	aa                   	stos   %al,%es:(%rdi)
    51ea:	aa                   	stos   %al,%es:(%rdi)
    51eb:	aa                   	stos   %al,%es:(%rdi)
    51ec:	aa                   	stos   %al,%es:(%rdi)
    51ed:	aa                   	stos   %al,%es:(%rdi)
    51ee:	aa                   	stos   %al,%es:(%rdi)
    51ef:	aa                   	stos   %al,%es:(%rdi)
    51f0:	aa                   	stos   %al,%es:(%rdi)
    51f1:	aa                   	stos   %al,%es:(%rdi)
    51f2:	aa                   	stos   %al,%es:(%rdi)
    51f3:	aa                   	stos   %al,%es:(%rdi)
    51f4:	aa                   	stos   %al,%es:(%rdi)
    51f5:	aa                   	stos   %al,%es:(%rdi)
    51f6:	aa                   	stos   %al,%es:(%rdi)
    51f7:	aa                   	stos   %al,%es:(%rdi)
    51f8:	aa                   	stos   %al,%es:(%rdi)
    51f9:	aa                   	stos   %al,%es:(%rdi)
    51fa:	aa                   	stos   %al,%es:(%rdi)
    51fb:	aa                   	stos   %al,%es:(%rdi)
    51fc:	aa                   	stos   %al,%es:(%rdi)
    51fd:	aa                   	stos   %al,%es:(%rdi)
    51fe:	aa                   	stos   %al,%es:(%rdi)
    51ff:	aa                   	stos   %al,%es:(%rdi)
    5200:	aa                   	stos   %al,%es:(%rdi)
    5201:	aa                   	stos   %al,%es:(%rdi)
    5202:	aa                   	stos   %al,%es:(%rdi)
    5203:	aa                   	stos   %al,%es:(%rdi)
    5204:	aa                   	stos   %al,%es:(%rdi)
    5205:	aa                   	stos   %al,%es:(%rdi)
    5206:	aa                   	stos   %al,%es:(%rdi)
    5207:	aa                   	stos   %al,%es:(%rdi)
    5208:	aa                   	stos   %al,%es:(%rdi)
    5209:	aa                   	stos   %al,%es:(%rdi)
    520a:	aa                   	stos   %al,%es:(%rdi)
    520b:	aa                   	stos   %al,%es:(%rdi)
    520c:	aa                   	stos   %al,%es:(%rdi)
    520d:	aa                   	stos   %al,%es:(%rdi)
    520e:	aa                   	stos   %al,%es:(%rdi)
    520f:	aa                   	stos   %al,%es:(%rdi)
    5210:	aa                   	stos   %al,%es:(%rdi)
    5211:	aa                   	stos   %al,%es:(%rdi)
    5212:	aa                   	stos   %al,%es:(%rdi)
    5213:	aa                   	stos   %al,%es:(%rdi)
    5214:	aa                   	stos   %al,%es:(%rdi)
    5215:	aa                   	stos   %al,%es:(%rdi)
    5216:	aa                   	stos   %al,%es:(%rdi)
    5217:	aa                   	stos   %al,%es:(%rdi)
    5218:	aa                   	stos   %al,%es:(%rdi)
    5219:	aa                   	stos   %al,%es:(%rdi)
    521a:	aa                   	stos   %al,%es:(%rdi)
    521b:	aa                   	stos   %al,%es:(%rdi)
    521c:	aa                   	stos   %al,%es:(%rdi)
    521d:	aa                   	stos   %al,%es:(%rdi)
    521e:	aa                   	stos   %al,%es:(%rdi)
    521f:	aa                   	stos   %al,%es:(%rdi)
    5220:	aa                   	stos   %al,%es:(%rdi)
    5221:	aa                   	stos   %al,%es:(%rdi)
    5222:	aa                   	stos   %al,%es:(%rdi)
    5223:	aa                   	stos   %al,%es:(%rdi)
    5224:	aa                   	stos   %al,%es:(%rdi)
    5225:	aa                   	stos   %al,%es:(%rdi)
    5226:	aa                   	stos   %al,%es:(%rdi)
    5227:	aa                   	stos   %al,%es:(%rdi)
    5228:	aa                   	stos   %al,%es:(%rdi)
    5229:	aa                   	stos   %al,%es:(%rdi)
    522a:	aa                   	stos   %al,%es:(%rdi)
    522b:	aa                   	stos   %al,%es:(%rdi)
    522c:	aa                   	stos   %al,%es:(%rdi)
    522d:	aa                   	stos   %al,%es:(%rdi)
    522e:	aa                   	stos   %al,%es:(%rdi)
    522f:	aa                   	stos   %al,%es:(%rdi)
    5230:	aa                   	stos   %al,%es:(%rdi)
    5231:	aa                   	stos   %al,%es:(%rdi)
    5232:	aa                   	stos   %al,%es:(%rdi)
    5233:	aa                   	stos   %al,%es:(%rdi)
    5234:	aa                   	stos   %al,%es:(%rdi)
    5235:	aa                   	stos   %al,%es:(%rdi)
    5236:	aa                   	stos   %al,%es:(%rdi)
    5237:	aa                   	stos   %al,%es:(%rdi)
    5238:	aa                   	stos   %al,%es:(%rdi)
    5239:	aa                   	stos   %al,%es:(%rdi)
    523a:	aa                   	stos   %al,%es:(%rdi)
    523b:	aa                   	stos   %al,%es:(%rdi)
    523c:	aa                   	stos   %al,%es:(%rdi)
    523d:	aa                   	stos   %al,%es:(%rdi)
    523e:	aa                   	stos   %al,%es:(%rdi)
    523f:	aa                   	stos   %al,%es:(%rdi)
    5240:	aa                   	stos   %al,%es:(%rdi)
    5241:	aa                   	stos   %al,%es:(%rdi)
    5242:	aa                   	stos   %al,%es:(%rdi)
    5243:	aa                   	stos   %al,%es:(%rdi)
    5244:	aa                   	stos   %al,%es:(%rdi)
    5245:	aa                   	stos   %al,%es:(%rdi)
    5246:	aa                   	stos   %al,%es:(%rdi)
    5247:	aa                   	stos   %al,%es:(%rdi)
    5248:	aa                   	stos   %al,%es:(%rdi)
    5249:	aa                   	stos   %al,%es:(%rdi)
    524a:	aa                   	stos   %al,%es:(%rdi)
    524b:	aa                   	stos   %al,%es:(%rdi)
    524c:	aa                   	stos   %al,%es:(%rdi)
    524d:	aa                   	stos   %al,%es:(%rdi)
    524e:	aa                   	stos   %al,%es:(%rdi)
    524f:	aa                   	stos   %al,%es:(%rdi)
    5250:	aa                   	stos   %al,%es:(%rdi)
    5251:	aa                   	stos   %al,%es:(%rdi)
    5252:	aa                   	stos   %al,%es:(%rdi)
    5253:	aa                   	stos   %al,%es:(%rdi)
    5254:	aa                   	stos   %al,%es:(%rdi)
    5255:	aa                   	stos   %al,%es:(%rdi)
    5256:	aa                   	stos   %al,%es:(%rdi)
    5257:	aa                   	stos   %al,%es:(%rdi)
    5258:	aa                   	stos   %al,%es:(%rdi)
    5259:	aa                   	stos   %al,%es:(%rdi)
    525a:	aa                   	stos   %al,%es:(%rdi)
    525b:	aa                   	stos   %al,%es:(%rdi)
    525c:	aa                   	stos   %al,%es:(%rdi)
    525d:	aa                   	stos   %al,%es:(%rdi)
    525e:	aa                   	stos   %al,%es:(%rdi)
    525f:	aa                   	stos   %al,%es:(%rdi)
    5260:	aa                   	stos   %al,%es:(%rdi)
    5261:	aa                   	stos   %al,%es:(%rdi)
    5262:	aa                   	stos   %al,%es:(%rdi)
    5263:	aa                   	stos   %al,%es:(%rdi)
    5264:	aa                   	stos   %al,%es:(%rdi)
    5265:	aa                   	stos   %al,%es:(%rdi)
    5266:	aa                   	stos   %al,%es:(%rdi)
    5267:	aa                   	stos   %al,%es:(%rdi)
    5268:	aa                   	stos   %al,%es:(%rdi)
    5269:	aa                   	stos   %al,%es:(%rdi)
    526a:	aa                   	stos   %al,%es:(%rdi)
    526b:	aa                   	stos   %al,%es:(%rdi)
    526c:	aa                   	stos   %al,%es:(%rdi)
    526d:	aa                   	stos   %al,%es:(%rdi)
    526e:	aa                   	stos   %al,%es:(%rdi)
    526f:	aa                   	stos   %al,%es:(%rdi)
    5270:	aa                   	stos   %al,%es:(%rdi)
    5271:	aa                   	stos   %al,%es:(%rdi)
    5272:	aa                   	stos   %al,%es:(%rdi)
    5273:	aa                   	stos   %al,%es:(%rdi)
    5274:	aa                   	stos   %al,%es:(%rdi)
    5275:	aa                   	stos   %al,%es:(%rdi)
    5276:	aa                   	stos   %al,%es:(%rdi)
    5277:	aa                   	stos   %al,%es:(%rdi)
    5278:	aa                   	stos   %al,%es:(%rdi)
    5279:	aa                   	stos   %al,%es:(%rdi)
    527a:	aa                   	stos   %al,%es:(%rdi)
    527b:	aa                   	stos   %al,%es:(%rdi)
    527c:	aa                   	stos   %al,%es:(%rdi)
    527d:	aa                   	stos   %al,%es:(%rdi)
    527e:	aa                   	stos   %al,%es:(%rdi)
    527f:	aa                   	stos   %al,%es:(%rdi)
    5280:	aa                   	stos   %al,%es:(%rdi)
    5281:	aa                   	stos   %al,%es:(%rdi)
    5282:	aa                   	stos   %al,%es:(%rdi)
    5283:	aa                   	stos   %al,%es:(%rdi)
    5284:	aa                   	stos   %al,%es:(%rdi)
    5285:	aa                   	stos   %al,%es:(%rdi)
    5286:	aa                   	stos   %al,%es:(%rdi)
    5287:	aa                   	stos   %al,%es:(%rdi)
    5288:	aa                   	stos   %al,%es:(%rdi)
    5289:	aa                   	stos   %al,%es:(%rdi)
    528a:	aa                   	stos   %al,%es:(%rdi)
    528b:	aa                   	stos   %al,%es:(%rdi)
    528c:	aa                   	stos   %al,%es:(%rdi)
    528d:	aa                   	stos   %al,%es:(%rdi)
    528e:	aa                   	stos   %al,%es:(%rdi)
    528f:	aa                   	stos   %al,%es:(%rdi)
    5290:	aa                   	stos   %al,%es:(%rdi)
    5291:	aa                   	stos   %al,%es:(%rdi)
    5292:	aa                   	stos   %al,%es:(%rdi)
    5293:	aa                   	stos   %al,%es:(%rdi)
    5294:	aa                   	stos   %al,%es:(%rdi)
    5295:	aa                   	stos   %al,%es:(%rdi)
    5296:	aa                   	stos   %al,%es:(%rdi)
    5297:	aa                   	stos   %al,%es:(%rdi)
    5298:	aa                   	stos   %al,%es:(%rdi)
    5299:	aa                   	stos   %al,%es:(%rdi)
    529a:	aa                   	stos   %al,%es:(%rdi)
    529b:	aa                   	stos   %al,%es:(%rdi)
    529c:	aa                   	stos   %al,%es:(%rdi)
    529d:	aa                   	stos   %al,%es:(%rdi)
    529e:	aa                   	stos   %al,%es:(%rdi)
    529f:	aa                   	stos   %al,%es:(%rdi)
    52a0:	aa                   	stos   %al,%es:(%rdi)
    52a1:	aa                   	stos   %al,%es:(%rdi)
    52a2:	aa                   	stos   %al,%es:(%rdi)
    52a3:	aa                   	stos   %al,%es:(%rdi)
    52a4:	aa                   	stos   %al,%es:(%rdi)
    52a5:	aa                   	stos   %al,%es:(%rdi)
    52a6:	aa                   	stos   %al,%es:(%rdi)
    52a7:	aa                   	stos   %al,%es:(%rdi)
    52a8:	aa                   	stos   %al,%es:(%rdi)
    52a9:	aa                   	stos   %al,%es:(%rdi)
    52aa:	aa                   	stos   %al,%es:(%rdi)
    52ab:	aa                   	stos   %al,%es:(%rdi)
    52ac:	aa                   	stos   %al,%es:(%rdi)
    52ad:	aa                   	stos   %al,%es:(%rdi)
    52ae:	aa                   	stos   %al,%es:(%rdi)
    52af:	aa                   	stos   %al,%es:(%rdi)
    52b0:	aa                   	stos   %al,%es:(%rdi)
    52b1:	aa                   	stos   %al,%es:(%rdi)
    52b2:	aa                   	stos   %al,%es:(%rdi)
    52b3:	aa                   	stos   %al,%es:(%rdi)
    52b4:	aa                   	stos   %al,%es:(%rdi)
    52b5:	aa                   	stos   %al,%es:(%rdi)
    52b6:	aa                   	stos   %al,%es:(%rdi)
    52b7:	aa                   	stos   %al,%es:(%rdi)
    52b8:	aa                   	stos   %al,%es:(%rdi)
    52b9:	aa                   	stos   %al,%es:(%rdi)
    52ba:	aa                   	stos   %al,%es:(%rdi)
    52bb:	aa                   	stos   %al,%es:(%rdi)
    52bc:	aa                   	stos   %al,%es:(%rdi)
    52bd:	aa                   	stos   %al,%es:(%rdi)
    52be:	aa                   	stos   %al,%es:(%rdi)
    52bf:	aa                   	stos   %al,%es:(%rdi)
    52c0:	aa                   	stos   %al,%es:(%rdi)
    52c1:	aa                   	stos   %al,%es:(%rdi)
    52c2:	aa                   	stos   %al,%es:(%rdi)
    52c3:	aa                   	stos   %al,%es:(%rdi)
    52c4:	aa                   	stos   %al,%es:(%rdi)
    52c5:	aa                   	stos   %al,%es:(%rdi)
    52c6:	aa                   	stos   %al,%es:(%rdi)
    52c7:	aa                   	stos   %al,%es:(%rdi)
    52c8:	aa                   	stos   %al,%es:(%rdi)
    52c9:	aa                   	stos   %al,%es:(%rdi)
    52ca:	aa                   	stos   %al,%es:(%rdi)
    52cb:	aa                   	stos   %al,%es:(%rdi)
    52cc:	aa                   	stos   %al,%es:(%rdi)
    52cd:	aa                   	stos   %al,%es:(%rdi)
    52ce:	aa                   	stos   %al,%es:(%rdi)
    52cf:	aa                   	stos   %al,%es:(%rdi)
    52d0:	aa                   	stos   %al,%es:(%rdi)
    52d1:	aa                   	stos   %al,%es:(%rdi)
    52d2:	aa                   	stos   %al,%es:(%rdi)
    52d3:	aa                   	stos   %al,%es:(%rdi)
    52d4:	aa                   	stos   %al,%es:(%rdi)
    52d5:	aa                   	stos   %al,%es:(%rdi)
    52d6:	aa                   	stos   %al,%es:(%rdi)
    52d7:	aa                   	stos   %al,%es:(%rdi)
    52d8:	aa                   	stos   %al,%es:(%rdi)
    52d9:	aa                   	stos   %al,%es:(%rdi)
    52da:	aa                   	stos   %al,%es:(%rdi)
    52db:	aa                   	stos   %al,%es:(%rdi)
    52dc:	aa                   	stos   %al,%es:(%rdi)
    52dd:	aa                   	stos   %al,%es:(%rdi)
    52de:	aa                   	stos   %al,%es:(%rdi)
    52df:	aa                   	stos   %al,%es:(%rdi)
    52e0:	aa                   	stos   %al,%es:(%rdi)
    52e1:	aa                   	stos   %al,%es:(%rdi)
    52e2:	aa                   	stos   %al,%es:(%rdi)
    52e3:	aa                   	stos   %al,%es:(%rdi)
    52e4:	aa                   	stos   %al,%es:(%rdi)
    52e5:	aa                   	stos   %al,%es:(%rdi)
    52e6:	aa                   	stos   %al,%es:(%rdi)
    52e7:	aa                   	stos   %al,%es:(%rdi)
    52e8:	aa                   	stos   %al,%es:(%rdi)
    52e9:	aa                   	stos   %al,%es:(%rdi)
    52ea:	aa                   	stos   %al,%es:(%rdi)
    52eb:	aa                   	stos   %al,%es:(%rdi)
    52ec:	aa                   	stos   %al,%es:(%rdi)
    52ed:	aa                   	stos   %al,%es:(%rdi)
    52ee:	aa                   	stos   %al,%es:(%rdi)
    52ef:	aa                   	stos   %al,%es:(%rdi)
    52f0:	aa                   	stos   %al,%es:(%rdi)
    52f1:	aa                   	stos   %al,%es:(%rdi)
    52f2:	aa                   	stos   %al,%es:(%rdi)
    52f3:	aa                   	stos   %al,%es:(%rdi)
    52f4:	aa                   	stos   %al,%es:(%rdi)
    52f5:	aa                   	stos   %al,%es:(%rdi)
    52f6:	aa                   	stos   %al,%es:(%rdi)
    52f7:	aa                   	stos   %al,%es:(%rdi)
    52f8:	aa                   	stos   %al,%es:(%rdi)
    52f9:	aa                   	stos   %al,%es:(%rdi)
    52fa:	aa                   	stos   %al,%es:(%rdi)
    52fb:	aa                   	stos   %al,%es:(%rdi)
    52fc:	aa                   	stos   %al,%es:(%rdi)
    52fd:	aa                   	stos   %al,%es:(%rdi)
    52fe:	aa                   	stos   %al,%es:(%rdi)
    52ff:	aa                   	stos   %al,%es:(%rdi)
    5300:	aa                   	stos   %al,%es:(%rdi)
    5301:	aa                   	stos   %al,%es:(%rdi)
    5302:	aa                   	stos   %al,%es:(%rdi)
    5303:	aa                   	stos   %al,%es:(%rdi)
    5304:	aa                   	stos   %al,%es:(%rdi)
    5305:	aa                   	stos   %al,%es:(%rdi)
    5306:	aa                   	stos   %al,%es:(%rdi)
    5307:	aa                   	stos   %al,%es:(%rdi)
    5308:	aa                   	stos   %al,%es:(%rdi)
    5309:	aa                   	stos   %al,%es:(%rdi)
    530a:	aa                   	stos   %al,%es:(%rdi)
    530b:	aa                   	stos   %al,%es:(%rdi)
    530c:	aa                   	stos   %al,%es:(%rdi)
    530d:	aa                   	stos   %al,%es:(%rdi)
    530e:	aa                   	stos   %al,%es:(%rdi)
    530f:	aa                   	stos   %al,%es:(%rdi)
    5310:	aa                   	stos   %al,%es:(%rdi)
    5311:	aa                   	stos   %al,%es:(%rdi)
    5312:	aa                   	stos   %al,%es:(%rdi)
    5313:	aa                   	stos   %al,%es:(%rdi)
    5314:	aa                   	stos   %al,%es:(%rdi)
    5315:	aa                   	stos   %al,%es:(%rdi)
    5316:	aa                   	stos   %al,%es:(%rdi)
    5317:	aa                   	stos   %al,%es:(%rdi)
    5318:	aa                   	stos   %al,%es:(%rdi)
    5319:	aa                   	stos   %al,%es:(%rdi)
    531a:	aa                   	stos   %al,%es:(%rdi)
    531b:	aa                   	stos   %al,%es:(%rdi)
    531c:	aa                   	stos   %al,%es:(%rdi)
    531d:	aa                   	stos   %al,%es:(%rdi)
    531e:	aa                   	stos   %al,%es:(%rdi)
    531f:	aa                   	stos   %al,%es:(%rdi)
    5320:	aa                   	stos   %al,%es:(%rdi)
    5321:	aa                   	stos   %al,%es:(%rdi)
    5322:	aa                   	stos   %al,%es:(%rdi)
    5323:	aa                   	stos   %al,%es:(%rdi)
    5324:	aa                   	stos   %al,%es:(%rdi)
    5325:	aa                   	stos   %al,%es:(%rdi)
    5326:	aa                   	stos   %al,%es:(%rdi)
    5327:	aa                   	stos   %al,%es:(%rdi)
    5328:	aa                   	stos   %al,%es:(%rdi)
    5329:	aa                   	stos   %al,%es:(%rdi)
    532a:	aa                   	stos   %al,%es:(%rdi)
    532b:	aa                   	stos   %al,%es:(%rdi)
    532c:	aa                   	stos   %al,%es:(%rdi)
    532d:	aa                   	stos   %al,%es:(%rdi)
    532e:	aa                   	stos   %al,%es:(%rdi)
    532f:	aa                   	stos   %al,%es:(%rdi)
    5330:	aa                   	stos   %al,%es:(%rdi)
    5331:	aa                   	stos   %al,%es:(%rdi)
    5332:	aa                   	stos   %al,%es:(%rdi)
    5333:	aa                   	stos   %al,%es:(%rdi)
    5334:	aa                   	stos   %al,%es:(%rdi)
    5335:	aa                   	stos   %al,%es:(%rdi)
    5336:	aa                   	stos   %al,%es:(%rdi)
    5337:	aa                   	stos   %al,%es:(%rdi)
    5338:	aa                   	stos   %al,%es:(%rdi)
    5339:	aa                   	stos   %al,%es:(%rdi)
    533a:	aa                   	stos   %al,%es:(%rdi)
    533b:	aa                   	stos   %al,%es:(%rdi)
    533c:	aa                   	stos   %al,%es:(%rdi)
    533d:	aa                   	stos   %al,%es:(%rdi)
    533e:	aa                   	stos   %al,%es:(%rdi)
    533f:	aa                   	stos   %al,%es:(%rdi)
    5340:	aa                   	stos   %al,%es:(%rdi)
    5341:	aa                   	stos   %al,%es:(%rdi)
    5342:	aa                   	stos   %al,%es:(%rdi)
    5343:	aa                   	stos   %al,%es:(%rdi)
    5344:	aa                   	stos   %al,%es:(%rdi)
    5345:	aa                   	stos   %al,%es:(%rdi)
    5346:	aa                   	stos   %al,%es:(%rdi)
    5347:	aa                   	stos   %al,%es:(%rdi)
    5348:	aa                   	stos   %al,%es:(%rdi)
    5349:	aa                   	stos   %al,%es:(%rdi)
    534a:	aa                   	stos   %al,%es:(%rdi)
    534b:	aa                   	stos   %al,%es:(%rdi)
    534c:	aa                   	stos   %al,%es:(%rdi)
    534d:	aa                   	stos   %al,%es:(%rdi)
    534e:	aa                   	stos   %al,%es:(%rdi)
    534f:	aa                   	stos   %al,%es:(%rdi)
    5350:	aa                   	stos   %al,%es:(%rdi)
    5351:	aa                   	stos   %al,%es:(%rdi)
    5352:	aa                   	stos   %al,%es:(%rdi)
    5353:	aa                   	stos   %al,%es:(%rdi)
    5354:	aa                   	stos   %al,%es:(%rdi)
    5355:	aa                   	stos   %al,%es:(%rdi)
    5356:	aa                   	stos   %al,%es:(%rdi)
    5357:	aa                   	stos   %al,%es:(%rdi)
    5358:	aa                   	stos   %al,%es:(%rdi)
    5359:	aa                   	stos   %al,%es:(%rdi)
    535a:	aa                   	stos   %al,%es:(%rdi)
    535b:	aa                   	stos   %al,%es:(%rdi)
    535c:	aa                   	stos   %al,%es:(%rdi)
    535d:	aa                   	stos   %al,%es:(%rdi)
    535e:	aa                   	stos   %al,%es:(%rdi)
    535f:	aa                   	stos   %al,%es:(%rdi)
    5360:	aa                   	stos   %al,%es:(%rdi)
    5361:	aa                   	stos   %al,%es:(%rdi)
    5362:	aa                   	stos   %al,%es:(%rdi)
    5363:	aa                   	stos   %al,%es:(%rdi)
    5364:	aa                   	stos   %al,%es:(%rdi)
    5365:	aa                   	stos   %al,%es:(%rdi)
    5366:	aa                   	stos   %al,%es:(%rdi)
    5367:	aa                   	stos   %al,%es:(%rdi)
    5368:	aa                   	stos   %al,%es:(%rdi)
    5369:	aa                   	stos   %al,%es:(%rdi)
    536a:	aa                   	stos   %al,%es:(%rdi)
    536b:	aa                   	stos   %al,%es:(%rdi)
    536c:	aa                   	stos   %al,%es:(%rdi)
    536d:	aa                   	stos   %al,%es:(%rdi)
    536e:	aa                   	stos   %al,%es:(%rdi)
    536f:	aa                   	stos   %al,%es:(%rdi)
    5370:	aa                   	stos   %al,%es:(%rdi)
    5371:	aa                   	stos   %al,%es:(%rdi)
    5372:	aa                   	stos   %al,%es:(%rdi)
    5373:	aa                   	stos   %al,%es:(%rdi)
    5374:	aa                   	stos   %al,%es:(%rdi)
    5375:	aa                   	stos   %al,%es:(%rdi)
    5376:	aa                   	stos   %al,%es:(%rdi)
    5377:	aa                   	stos   %al,%es:(%rdi)
    5378:	aa                   	stos   %al,%es:(%rdi)
    5379:	aa                   	stos   %al,%es:(%rdi)
    537a:	aa                   	stos   %al,%es:(%rdi)
    537b:	aa                   	stos   %al,%es:(%rdi)
    537c:	aa                   	stos   %al,%es:(%rdi)
    537d:	aa                   	stos   %al,%es:(%rdi)
    537e:	aa                   	stos   %al,%es:(%rdi)
    537f:	aa                   	stos   %al,%es:(%rdi)
    5380:	aa                   	stos   %al,%es:(%rdi)
    5381:	aa                   	stos   %al,%es:(%rdi)
    5382:	aa                   	stos   %al,%es:(%rdi)
    5383:	aa                   	stos   %al,%es:(%rdi)
    5384:	aa                   	stos   %al,%es:(%rdi)
    5385:	aa                   	stos   %al,%es:(%rdi)
    5386:	aa                   	stos   %al,%es:(%rdi)
    5387:	aa                   	stos   %al,%es:(%rdi)
    5388:	aa                   	stos   %al,%es:(%rdi)
    5389:	aa                   	stos   %al,%es:(%rdi)
    538a:	aa                   	stos   %al,%es:(%rdi)
    538b:	aa                   	stos   %al,%es:(%rdi)
    538c:	aa                   	stos   %al,%es:(%rdi)
    538d:	aa                   	stos   %al,%es:(%rdi)
    538e:	aa                   	stos   %al,%es:(%rdi)
    538f:	aa                   	stos   %al,%es:(%rdi)
    5390:	aa                   	stos   %al,%es:(%rdi)
    5391:	aa                   	stos   %al,%es:(%rdi)
    5392:	aa                   	stos   %al,%es:(%rdi)
    5393:	aa                   	stos   %al,%es:(%rdi)
    5394:	aa                   	stos   %al,%es:(%rdi)
    5395:	aa                   	stos   %al,%es:(%rdi)
    5396:	aa                   	stos   %al,%es:(%rdi)
    5397:	aa                   	stos   %al,%es:(%rdi)
    5398:	aa                   	stos   %al,%es:(%rdi)
    5399:	aa                   	stos   %al,%es:(%rdi)
    539a:	aa                   	stos   %al,%es:(%rdi)
    539b:	aa                   	stos   %al,%es:(%rdi)
    539c:	aa                   	stos   %al,%es:(%rdi)
    539d:	aa                   	stos   %al,%es:(%rdi)
    539e:	aa                   	stos   %al,%es:(%rdi)
    539f:	aa                   	stos   %al,%es:(%rdi)
    53a0:	aa                   	stos   %al,%es:(%rdi)
    53a1:	aa                   	stos   %al,%es:(%rdi)
    53a2:	aa                   	stos   %al,%es:(%rdi)
    53a3:	aa                   	stos   %al,%es:(%rdi)
    53a4:	aa                   	stos   %al,%es:(%rdi)
    53a5:	aa                   	stos   %al,%es:(%rdi)
    53a6:	aa                   	stos   %al,%es:(%rdi)
    53a7:	aa                   	stos   %al,%es:(%rdi)
    53a8:	aa                   	stos   %al,%es:(%rdi)
    53a9:	aa                   	stos   %al,%es:(%rdi)
    53aa:	aa                   	stos   %al,%es:(%rdi)
    53ab:	aa                   	stos   %al,%es:(%rdi)
    53ac:	aa                   	stos   %al,%es:(%rdi)
    53ad:	aa                   	stos   %al,%es:(%rdi)
    53ae:	aa                   	stos   %al,%es:(%rdi)
    53af:	aa                   	stos   %al,%es:(%rdi)
    53b0:	aa                   	stos   %al,%es:(%rdi)
    53b1:	aa                   	stos   %al,%es:(%rdi)
    53b2:	aa                   	stos   %al,%es:(%rdi)
    53b3:	aa                   	stos   %al,%es:(%rdi)
    53b4:	aa                   	stos   %al,%es:(%rdi)
    53b5:	aa                   	stos   %al,%es:(%rdi)
    53b6:	aa                   	stos   %al,%es:(%rdi)
    53b7:	aa                   	stos   %al,%es:(%rdi)
    53b8:	aa                   	stos   %al,%es:(%rdi)
    53b9:	aa                   	stos   %al,%es:(%rdi)
    53ba:	aa                   	stos   %al,%es:(%rdi)
    53bb:	aa                   	stos   %al,%es:(%rdi)
    53bc:	aa                   	stos   %al,%es:(%rdi)
    53bd:	aa                   	stos   %al,%es:(%rdi)
    53be:	aa                   	stos   %al,%es:(%rdi)
    53bf:	aa                   	stos   %al,%es:(%rdi)
    53c0:	aa                   	stos   %al,%es:(%rdi)
    53c1:	aa                   	stos   %al,%es:(%rdi)
    53c2:	aa                   	stos   %al,%es:(%rdi)
    53c3:	aa                   	stos   %al,%es:(%rdi)
    53c4:	aa                   	stos   %al,%es:(%rdi)
    53c5:	aa                   	stos   %al,%es:(%rdi)
    53c6:	aa                   	stos   %al,%es:(%rdi)
    53c7:	aa                   	stos   %al,%es:(%rdi)
    53c8:	aa                   	stos   %al,%es:(%rdi)
    53c9:	aa                   	stos   %al,%es:(%rdi)
    53ca:	aa                   	stos   %al,%es:(%rdi)
    53cb:	aa                   	stos   %al,%es:(%rdi)
    53cc:	aa                   	stos   %al,%es:(%rdi)
    53cd:	aa                   	stos   %al,%es:(%rdi)
    53ce:	aa                   	stos   %al,%es:(%rdi)
    53cf:	aa                   	stos   %al,%es:(%rdi)
    53d0:	aa                   	stos   %al,%es:(%rdi)
    53d1:	aa                   	stos   %al,%es:(%rdi)
    53d2:	aa                   	stos   %al,%es:(%rdi)
    53d3:	aa                   	stos   %al,%es:(%rdi)
    53d4:	aa                   	stos   %al,%es:(%rdi)
    53d5:	aa                   	stos   %al,%es:(%rdi)
    53d6:	aa                   	stos   %al,%es:(%rdi)
    53d7:	aa                   	stos   %al,%es:(%rdi)
    53d8:	aa                   	stos   %al,%es:(%rdi)
    53d9:	aa                   	stos   %al,%es:(%rdi)
    53da:	aa                   	stos   %al,%es:(%rdi)
    53db:	aa                   	stos   %al,%es:(%rdi)
    53dc:	aa                   	stos   %al,%es:(%rdi)
    53dd:	aa                   	stos   %al,%es:(%rdi)
    53de:	aa                   	stos   %al,%es:(%rdi)
    53df:	aa                   	stos   %al,%es:(%rdi)
    53e0:	aa                   	stos   %al,%es:(%rdi)
    53e1:	aa                   	stos   %al,%es:(%rdi)
    53e2:	aa                   	stos   %al,%es:(%rdi)
    53e3:	aa                   	stos   %al,%es:(%rdi)
    53e4:	aa                   	stos   %al,%es:(%rdi)
    53e5:	aa                   	stos   %al,%es:(%rdi)
    53e6:	aa                   	stos   %al,%es:(%rdi)
    53e7:	aa                   	stos   %al,%es:(%rdi)
    53e8:	aa                   	stos   %al,%es:(%rdi)
    53e9:	aa                   	stos   %al,%es:(%rdi)
    53ea:	aa                   	stos   %al,%es:(%rdi)
    53eb:	aa                   	stos   %al,%es:(%rdi)
    53ec:	aa                   	stos   %al,%es:(%rdi)
    53ed:	aa                   	stos   %al,%es:(%rdi)
    53ee:	aa                   	stos   %al,%es:(%rdi)
    53ef:	aa                   	stos   %al,%es:(%rdi)
    53f0:	aa                   	stos   %al,%es:(%rdi)
    53f1:	aa                   	stos   %al,%es:(%rdi)
    53f2:	aa                   	stos   %al,%es:(%rdi)
    53f3:	aa                   	stos   %al,%es:(%rdi)
    53f4:	aa                   	stos   %al,%es:(%rdi)
    53f5:	aa                   	stos   %al,%es:(%rdi)
    53f6:	aa                   	stos   %al,%es:(%rdi)
    53f7:	aa                   	stos   %al,%es:(%rdi)
    53f8:	aa                   	stos   %al,%es:(%rdi)
    53f9:	aa                   	stos   %al,%es:(%rdi)
    53fa:	aa                   	stos   %al,%es:(%rdi)
    53fb:	aa                   	stos   %al,%es:(%rdi)
    53fc:	aa                   	stos   %al,%es:(%rdi)
    53fd:	aa                   	stos   %al,%es:(%rdi)
    53fe:	aa                   	stos   %al,%es:(%rdi)
    53ff:	aa                   	stos   %al,%es:(%rdi)
    5400:	aa                   	stos   %al,%es:(%rdi)
    5401:	aa                   	stos   %al,%es:(%rdi)
    5402:	aa                   	stos   %al,%es:(%rdi)
    5403:	aa                   	stos   %al,%es:(%rdi)
    5404:	aa                   	stos   %al,%es:(%rdi)
    5405:	aa                   	stos   %al,%es:(%rdi)
    5406:	aa                   	stos   %al,%es:(%rdi)
    5407:	aa                   	stos   %al,%es:(%rdi)
    5408:	aa                   	stos   %al,%es:(%rdi)
    5409:	aa                   	stos   %al,%es:(%rdi)
    540a:	aa                   	stos   %al,%es:(%rdi)
    540b:	aa                   	stos   %al,%es:(%rdi)
    540c:	aa                   	stos   %al,%es:(%rdi)
    540d:	aa                   	stos   %al,%es:(%rdi)
    540e:	aa                   	stos   %al,%es:(%rdi)
    540f:	aa                   	stos   %al,%es:(%rdi)
    5410:	aa                   	stos   %al,%es:(%rdi)
    5411:	aa                   	stos   %al,%es:(%rdi)
    5412:	aa                   	stos   %al,%es:(%rdi)
    5413:	aa                   	stos   %al,%es:(%rdi)
    5414:	aa                   	stos   %al,%es:(%rdi)
    5415:	aa                   	stos   %al,%es:(%rdi)
    5416:	aa                   	stos   %al,%es:(%rdi)
    5417:	aa                   	stos   %al,%es:(%rdi)
    5418:	aa                   	stos   %al,%es:(%rdi)
    5419:	aa                   	stos   %al,%es:(%rdi)
    541a:	aa                   	stos   %al,%es:(%rdi)
    541b:	aa                   	stos   %al,%es:(%rdi)
    541c:	aa                   	stos   %al,%es:(%rdi)
    541d:	aa                   	stos   %al,%es:(%rdi)
    541e:	aa                   	stos   %al,%es:(%rdi)
    541f:	aa                   	stos   %al,%es:(%rdi)
    5420:	aa                   	stos   %al,%es:(%rdi)
    5421:	aa                   	stos   %al,%es:(%rdi)
    5422:	aa                   	stos   %al,%es:(%rdi)
    5423:	aa                   	stos   %al,%es:(%rdi)
    5424:	aa                   	stos   %al,%es:(%rdi)
    5425:	aa                   	stos   %al,%es:(%rdi)
    5426:	aa                   	stos   %al,%es:(%rdi)
    5427:	aa                   	stos   %al,%es:(%rdi)
    5428:	aa                   	stos   %al,%es:(%rdi)
    5429:	aa                   	stos   %al,%es:(%rdi)
    542a:	aa                   	stos   %al,%es:(%rdi)
    542b:	aa                   	stos   %al,%es:(%rdi)
    542c:	aa                   	stos   %al,%es:(%rdi)
    542d:	aa                   	stos   %al,%es:(%rdi)
    542e:	aa                   	stos   %al,%es:(%rdi)
    542f:	aa                   	stos   %al,%es:(%rdi)
    5430:	aa                   	stos   %al,%es:(%rdi)
    5431:	aa                   	stos   %al,%es:(%rdi)
    5432:	aa                   	stos   %al,%es:(%rdi)
    5433:	aa                   	stos   %al,%es:(%rdi)
    5434:	aa                   	stos   %al,%es:(%rdi)
    5435:	aa                   	stos   %al,%es:(%rdi)
    5436:	aa                   	stos   %al,%es:(%rdi)
    5437:	aa                   	stos   %al,%es:(%rdi)
    5438:	aa                   	stos   %al,%es:(%rdi)
    5439:	aa                   	stos   %al,%es:(%rdi)
    543a:	aa                   	stos   %al,%es:(%rdi)
    543b:	aa                   	stos   %al,%es:(%rdi)
    543c:	aa                   	stos   %al,%es:(%rdi)
    543d:	aa                   	stos   %al,%es:(%rdi)
    543e:	aa                   	stos   %al,%es:(%rdi)
    543f:	aa                   	stos   %al,%es:(%rdi)
    5440:	aa                   	stos   %al,%es:(%rdi)
    5441:	aa                   	stos   %al,%es:(%rdi)
    5442:	aa                   	stos   %al,%es:(%rdi)
    5443:	aa                   	stos   %al,%es:(%rdi)
    5444:	aa                   	stos   %al,%es:(%rdi)
    5445:	aa                   	stos   %al,%es:(%rdi)
    5446:	aa                   	stos   %al,%es:(%rdi)
    5447:	aa                   	stos   %al,%es:(%rdi)
    5448:	aa                   	stos   %al,%es:(%rdi)
    5449:	aa                   	stos   %al,%es:(%rdi)
    544a:	aa                   	stos   %al,%es:(%rdi)
    544b:	aa                   	stos   %al,%es:(%rdi)
    544c:	aa                   	stos   %al,%es:(%rdi)
    544d:	aa                   	stos   %al,%es:(%rdi)
    544e:	aa                   	stos   %al,%es:(%rdi)
    544f:	aa                   	stos   %al,%es:(%rdi)
    5450:	aa                   	stos   %al,%es:(%rdi)
    5451:	aa                   	stos   %al,%es:(%rdi)
    5452:	aa                   	stos   %al,%es:(%rdi)
    5453:	aa                   	stos   %al,%es:(%rdi)
    5454:	aa                   	stos   %al,%es:(%rdi)
    5455:	aa                   	stos   %al,%es:(%rdi)
    5456:	aa                   	stos   %al,%es:(%rdi)
    5457:	aa                   	stos   %al,%es:(%rdi)
    5458:	aa                   	stos   %al,%es:(%rdi)
    5459:	aa                   	stos   %al,%es:(%rdi)
    545a:	aa                   	stos   %al,%es:(%rdi)
    545b:	aa                   	stos   %al,%es:(%rdi)
    545c:	aa                   	stos   %al,%es:(%rdi)
    545d:	aa                   	stos   %al,%es:(%rdi)
    545e:	aa                   	stos   %al,%es:(%rdi)
    545f:	aa                   	stos   %al,%es:(%rdi)
    5460:	aa                   	stos   %al,%es:(%rdi)
    5461:	aa                   	stos   %al,%es:(%rdi)
    5462:	aa                   	stos   %al,%es:(%rdi)
    5463:	aa                   	stos   %al,%es:(%rdi)
    5464:	aa                   	stos   %al,%es:(%rdi)
    5465:	aa                   	stos   %al,%es:(%rdi)
    5466:	aa                   	stos   %al,%es:(%rdi)
    5467:	aa                   	stos   %al,%es:(%rdi)
    5468:	aa                   	stos   %al,%es:(%rdi)
    5469:	aa                   	stos   %al,%es:(%rdi)
    546a:	aa                   	stos   %al,%es:(%rdi)
    546b:	aa                   	stos   %al,%es:(%rdi)
    546c:	aa                   	stos   %al,%es:(%rdi)
    546d:	aa                   	stos   %al,%es:(%rdi)
    546e:	aa                   	stos   %al,%es:(%rdi)
    546f:	aa                   	stos   %al,%es:(%rdi)
    5470:	aa                   	stos   %al,%es:(%rdi)
    5471:	aa                   	stos   %al,%es:(%rdi)
    5472:	aa                   	stos   %al,%es:(%rdi)
    5473:	aa                   	stos   %al,%es:(%rdi)
    5474:	aa                   	stos   %al,%es:(%rdi)
    5475:	aa                   	stos   %al,%es:(%rdi)
    5476:	aa                   	stos   %al,%es:(%rdi)
    5477:	aa                   	stos   %al,%es:(%rdi)
    5478:	aa                   	stos   %al,%es:(%rdi)
    5479:	aa                   	stos   %al,%es:(%rdi)
    547a:	aa                   	stos   %al,%es:(%rdi)
    547b:	aa                   	stos   %al,%es:(%rdi)
    547c:	aa                   	stos   %al,%es:(%rdi)
    547d:	aa                   	stos   %al,%es:(%rdi)
    547e:	aa                   	stos   %al,%es:(%rdi)
    547f:	aa                   	stos   %al,%es:(%rdi)
    5480:	aa                   	stos   %al,%es:(%rdi)
    5481:	aa                   	stos   %al,%es:(%rdi)
    5482:	aa                   	stos   %al,%es:(%rdi)
    5483:	aa                   	stos   %al,%es:(%rdi)
    5484:	aa                   	stos   %al,%es:(%rdi)
    5485:	aa                   	stos   %al,%es:(%rdi)
    5486:	aa                   	stos   %al,%es:(%rdi)
    5487:	aa                   	stos   %al,%es:(%rdi)
    5488:	aa                   	stos   %al,%es:(%rdi)
    5489:	aa                   	stos   %al,%es:(%rdi)
    548a:	aa                   	stos   %al,%es:(%rdi)
    548b:	aa                   	stos   %al,%es:(%rdi)
    548c:	aa                   	stos   %al,%es:(%rdi)
    548d:	aa                   	stos   %al,%es:(%rdi)
    548e:	aa                   	stos   %al,%es:(%rdi)
    548f:	aa                   	stos   %al,%es:(%rdi)
    5490:	aa                   	stos   %al,%es:(%rdi)
    5491:	aa                   	stos   %al,%es:(%rdi)
    5492:	aa                   	stos   %al,%es:(%rdi)
    5493:	aa                   	stos   %al,%es:(%rdi)
    5494:	aa                   	stos   %al,%es:(%rdi)
    5495:	aa                   	stos   %al,%es:(%rdi)
    5496:	aa                   	stos   %al,%es:(%rdi)
    5497:	aa                   	stos   %al,%es:(%rdi)
    5498:	aa                   	stos   %al,%es:(%rdi)
    5499:	aa                   	stos   %al,%es:(%rdi)
    549a:	aa                   	stos   %al,%es:(%rdi)
    549b:	aa                   	stos   %al,%es:(%rdi)
    549c:	aa                   	stos   %al,%es:(%rdi)
    549d:	aa                   	stos   %al,%es:(%rdi)
    549e:	aa                   	stos   %al,%es:(%rdi)
    549f:	aa                   	stos   %al,%es:(%rdi)
    54a0:	aa                   	stos   %al,%es:(%rdi)
    54a1:	aa                   	stos   %al,%es:(%rdi)
    54a2:	aa                   	stos   %al,%es:(%rdi)
    54a3:	aa                   	stos   %al,%es:(%rdi)
    54a4:	aa                   	stos   %al,%es:(%rdi)
    54a5:	aa                   	stos   %al,%es:(%rdi)
    54a6:	aa                   	stos   %al,%es:(%rdi)
    54a7:	aa                   	stos   %al,%es:(%rdi)
    54a8:	aa                   	stos   %al,%es:(%rdi)
    54a9:	aa                   	stos   %al,%es:(%rdi)
    54aa:	aa                   	stos   %al,%es:(%rdi)
    54ab:	aa                   	stos   %al,%es:(%rdi)
    54ac:	aa                   	stos   %al,%es:(%rdi)
    54ad:	aa                   	stos   %al,%es:(%rdi)
    54ae:	aa                   	stos   %al,%es:(%rdi)
    54af:	aa                   	stos   %al,%es:(%rdi)
    54b0:	aa                   	stos   %al,%es:(%rdi)
    54b1:	aa                   	stos   %al,%es:(%rdi)
    54b2:	aa                   	stos   %al,%es:(%rdi)
    54b3:	aa                   	stos   %al,%es:(%rdi)
    54b4:	aa                   	stos   %al,%es:(%rdi)
    54b5:	aa                   	stos   %al,%es:(%rdi)
    54b6:	aa                   	stos   %al,%es:(%rdi)
    54b7:	aa                   	stos   %al,%es:(%rdi)
    54b8:	aa                   	stos   %al,%es:(%rdi)
    54b9:	aa                   	stos   %al,%es:(%rdi)
    54ba:	aa                   	stos   %al,%es:(%rdi)
    54bb:	aa                   	stos   %al,%es:(%rdi)
    54bc:	aa                   	stos   %al,%es:(%rdi)
    54bd:	aa                   	stos   %al,%es:(%rdi)
    54be:	aa                   	stos   %al,%es:(%rdi)
    54bf:	aa                   	stos   %al,%es:(%rdi)
    54c0:	aa                   	stos   %al,%es:(%rdi)
    54c1:	aa                   	stos   %al,%es:(%rdi)
    54c2:	aa                   	stos   %al,%es:(%rdi)
    54c3:	aa                   	stos   %al,%es:(%rdi)
    54c4:	aa                   	stos   %al,%es:(%rdi)
    54c5:	aa                   	stos   %al,%es:(%rdi)
    54c6:	aa                   	stos   %al,%es:(%rdi)
    54c7:	aa                   	stos   %al,%es:(%rdi)
    54c8:	aa                   	stos   %al,%es:(%rdi)
    54c9:	aa                   	stos   %al,%es:(%rdi)
    54ca:	aa                   	stos   %al,%es:(%rdi)
    54cb:	aa                   	stos   %al,%es:(%rdi)
    54cc:	aa                   	stos   %al,%es:(%rdi)
    54cd:	aa                   	stos   %al,%es:(%rdi)
    54ce:	aa                   	stos   %al,%es:(%rdi)
    54cf:	aa                   	stos   %al,%es:(%rdi)
    54d0:	aa                   	stos   %al,%es:(%rdi)
    54d1:	aa                   	stos   %al,%es:(%rdi)
    54d2:	aa                   	stos   %al,%es:(%rdi)
    54d3:	aa                   	stos   %al,%es:(%rdi)
    54d4:	aa                   	stos   %al,%es:(%rdi)
    54d5:	aa                   	stos   %al,%es:(%rdi)
    54d6:	aa                   	stos   %al,%es:(%rdi)
    54d7:	aa                   	stos   %al,%es:(%rdi)
    54d8:	aa                   	stos   %al,%es:(%rdi)
    54d9:	aa                   	stos   %al,%es:(%rdi)
    54da:	aa                   	stos   %al,%es:(%rdi)
    54db:	aa                   	stos   %al,%es:(%rdi)
    54dc:	aa                   	stos   %al,%es:(%rdi)
    54dd:	aa                   	stos   %al,%es:(%rdi)
    54de:	aa                   	stos   %al,%es:(%rdi)
    54df:	aa                   	stos   %al,%es:(%rdi)
    54e0:	aa                   	stos   %al,%es:(%rdi)
    54e1:	aa                   	stos   %al,%es:(%rdi)
    54e2:	aa                   	stos   %al,%es:(%rdi)
    54e3:	aa                   	stos   %al,%es:(%rdi)
    54e4:	aa                   	stos   %al,%es:(%rdi)
    54e5:	aa                   	stos   %al,%es:(%rdi)
    54e6:	aa                   	stos   %al,%es:(%rdi)
    54e7:	aa                   	stos   %al,%es:(%rdi)
    54e8:	aa                   	stos   %al,%es:(%rdi)
    54e9:	aa                   	stos   %al,%es:(%rdi)
    54ea:	aa                   	stos   %al,%es:(%rdi)
    54eb:	aa                   	stos   %al,%es:(%rdi)
    54ec:	aa                   	stos   %al,%es:(%rdi)
    54ed:	aa                   	stos   %al,%es:(%rdi)
    54ee:	aa                   	stos   %al,%es:(%rdi)
    54ef:	aa                   	stos   %al,%es:(%rdi)
    54f0:	aa                   	stos   %al,%es:(%rdi)
    54f1:	aa                   	stos   %al,%es:(%rdi)
    54f2:	aa                   	stos   %al,%es:(%rdi)
    54f3:	aa                   	stos   %al,%es:(%rdi)
    54f4:	aa                   	stos   %al,%es:(%rdi)
    54f5:	aa                   	stos   %al,%es:(%rdi)
    54f6:	aa                   	stos   %al,%es:(%rdi)
    54f7:	aa                   	stos   %al,%es:(%rdi)
    54f8:	aa                   	stos   %al,%es:(%rdi)
    54f9:	aa                   	stos   %al,%es:(%rdi)
    54fa:	aa                   	stos   %al,%es:(%rdi)
    54fb:	aa                   	stos   %al,%es:(%rdi)
    54fc:	aa                   	stos   %al,%es:(%rdi)
    54fd:	aa                   	stos   %al,%es:(%rdi)
    54fe:	aa                   	stos   %al,%es:(%rdi)
    54ff:	aa                   	stos   %al,%es:(%rdi)
    5500:	aa                   	stos   %al,%es:(%rdi)
    5501:	aa                   	stos   %al,%es:(%rdi)
    5502:	aa                   	stos   %al,%es:(%rdi)
    5503:	aa                   	stos   %al,%es:(%rdi)
    5504:	aa                   	stos   %al,%es:(%rdi)
    5505:	aa                   	stos   %al,%es:(%rdi)
    5506:	aa                   	stos   %al,%es:(%rdi)
    5507:	aa                   	stos   %al,%es:(%rdi)
    5508:	aa                   	stos   %al,%es:(%rdi)
    5509:	aa                   	stos   %al,%es:(%rdi)
    550a:	aa                   	stos   %al,%es:(%rdi)
    550b:	aa                   	stos   %al,%es:(%rdi)
    550c:	aa                   	stos   %al,%es:(%rdi)
    550d:	aa                   	stos   %al,%es:(%rdi)
    550e:	aa                   	stos   %al,%es:(%rdi)
    550f:	aa                   	stos   %al,%es:(%rdi)
    5510:	aa                   	stos   %al,%es:(%rdi)
    5511:	aa                   	stos   %al,%es:(%rdi)
    5512:	aa                   	stos   %al,%es:(%rdi)
    5513:	aa                   	stos   %al,%es:(%rdi)
    5514:	aa                   	stos   %al,%es:(%rdi)
    5515:	aa                   	stos   %al,%es:(%rdi)
    5516:	aa                   	stos   %al,%es:(%rdi)
    5517:	aa                   	stos   %al,%es:(%rdi)
    5518:	aa                   	stos   %al,%es:(%rdi)
    5519:	aa                   	stos   %al,%es:(%rdi)
    551a:	aa                   	stos   %al,%es:(%rdi)
    551b:	aa                   	stos   %al,%es:(%rdi)
    551c:	aa                   	stos   %al,%es:(%rdi)
    551d:	aa                   	stos   %al,%es:(%rdi)
    551e:	aa                   	stos   %al,%es:(%rdi)
    551f:	aa                   	stos   %al,%es:(%rdi)
    5520:	aa                   	stos   %al,%es:(%rdi)
    5521:	aa                   	stos   %al,%es:(%rdi)
    5522:	aa                   	stos   %al,%es:(%rdi)
    5523:	aa                   	stos   %al,%es:(%rdi)
    5524:	aa                   	stos   %al,%es:(%rdi)
    5525:	aa                   	stos   %al,%es:(%rdi)
    5526:	aa                   	stos   %al,%es:(%rdi)
    5527:	aa                   	stos   %al,%es:(%rdi)
    5528:	aa                   	stos   %al,%es:(%rdi)
    5529:	aa                   	stos   %al,%es:(%rdi)
    552a:	aa                   	stos   %al,%es:(%rdi)
    552b:	aa                   	stos   %al,%es:(%rdi)
    552c:	aa                   	stos   %al,%es:(%rdi)
    552d:	aa                   	stos   %al,%es:(%rdi)
    552e:	aa                   	stos   %al,%es:(%rdi)
    552f:	aa                   	stos   %al,%es:(%rdi)
    5530:	aa                   	stos   %al,%es:(%rdi)
    5531:	aa                   	stos   %al,%es:(%rdi)
    5532:	aa                   	stos   %al,%es:(%rdi)
    5533:	aa                   	stos   %al,%es:(%rdi)
    5534:	aa                   	stos   %al,%es:(%rdi)
    5535:	aa                   	stos   %al,%es:(%rdi)
    5536:	aa                   	stos   %al,%es:(%rdi)
    5537:	aa                   	stos   %al,%es:(%rdi)
    5538:	aa                   	stos   %al,%es:(%rdi)
    5539:	aa                   	stos   %al,%es:(%rdi)
    553a:	aa                   	stos   %al,%es:(%rdi)
    553b:	aa                   	stos   %al,%es:(%rdi)
    553c:	aa                   	stos   %al,%es:(%rdi)
    553d:	aa                   	stos   %al,%es:(%rdi)
    553e:	aa                   	stos   %al,%es:(%rdi)
    553f:	aa                   	stos   %al,%es:(%rdi)
    5540:	aa                   	stos   %al,%es:(%rdi)
    5541:	aa                   	stos   %al,%es:(%rdi)
    5542:	aa                   	stos   %al,%es:(%rdi)
    5543:	aa                   	stos   %al,%es:(%rdi)
    5544:	aa                   	stos   %al,%es:(%rdi)
    5545:	aa                   	stos   %al,%es:(%rdi)
    5546:	aa                   	stos   %al,%es:(%rdi)
    5547:	aa                   	stos   %al,%es:(%rdi)
    5548:	aa                   	stos   %al,%es:(%rdi)
    5549:	aa                   	stos   %al,%es:(%rdi)
    554a:	aa                   	stos   %al,%es:(%rdi)
    554b:	aa                   	stos   %al,%es:(%rdi)
    554c:	aa                   	stos   %al,%es:(%rdi)
    554d:	aa                   	stos   %al,%es:(%rdi)
    554e:	aa                   	stos   %al,%es:(%rdi)
    554f:	aa                   	stos   %al,%es:(%rdi)
    5550:	aa                   	stos   %al,%es:(%rdi)
    5551:	aa                   	stos   %al,%es:(%rdi)
    5552:	aa                   	stos   %al,%es:(%rdi)
    5553:	aa                   	stos   %al,%es:(%rdi)
    5554:	aa                   	stos   %al,%es:(%rdi)
    5555:	aa                   	stos   %al,%es:(%rdi)
    5556:	aa                   	stos   %al,%es:(%rdi)
    5557:	aa                   	stos   %al,%es:(%rdi)
    5558:	aa                   	stos   %al,%es:(%rdi)
    5559:	aa                   	stos   %al,%es:(%rdi)
    555a:	aa                   	stos   %al,%es:(%rdi)
    555b:	aa                   	stos   %al,%es:(%rdi)
    555c:	aa                   	stos   %al,%es:(%rdi)
    555d:	aa                   	stos   %al,%es:(%rdi)
    555e:	aa                   	stos   %al,%es:(%rdi)
    555f:	aa                   	stos   %al,%es:(%rdi)
    5560:	aa                   	stos   %al,%es:(%rdi)
    5561:	aa                   	stos   %al,%es:(%rdi)
    5562:	aa                   	stos   %al,%es:(%rdi)
    5563:	aa                   	stos   %al,%es:(%rdi)
    5564:	aa                   	stos   %al,%es:(%rdi)
    5565:	aa                   	stos   %al,%es:(%rdi)
    5566:	aa                   	stos   %al,%es:(%rdi)
    5567:	aa                   	stos   %al,%es:(%rdi)
    5568:	aa                   	stos   %al,%es:(%rdi)
    5569:	aa                   	stos   %al,%es:(%rdi)
    556a:	aa                   	stos   %al,%es:(%rdi)
    556b:	aa                   	stos   %al,%es:(%rdi)
    556c:	aa                   	stos   %al,%es:(%rdi)
    556d:	aa                   	stos   %al,%es:(%rdi)
    556e:	aa                   	stos   %al,%es:(%rdi)
    556f:	aa                   	stos   %al,%es:(%rdi)
    5570:	aa                   	stos   %al,%es:(%rdi)
    5571:	aa                   	stos   %al,%es:(%rdi)
    5572:	aa                   	stos   %al,%es:(%rdi)
    5573:	aa                   	stos   %al,%es:(%rdi)
    5574:	aa                   	stos   %al,%es:(%rdi)
    5575:	aa                   	stos   %al,%es:(%rdi)
    5576:	aa                   	stos   %al,%es:(%rdi)
    5577:	aa                   	stos   %al,%es:(%rdi)
    5578:	aa                   	stos   %al,%es:(%rdi)
    5579:	aa                   	stos   %al,%es:(%rdi)
    557a:	aa                   	stos   %al,%es:(%rdi)
    557b:	aa                   	stos   %al,%es:(%rdi)
    557c:	aa                   	stos   %al,%es:(%rdi)
    557d:	aa                   	stos   %al,%es:(%rdi)
    557e:	aa                   	stos   %al,%es:(%rdi)
    557f:	aa                   	stos   %al,%es:(%rdi)
    5580:	aa                   	stos   %al,%es:(%rdi)
    5581:	aa                   	stos   %al,%es:(%rdi)
    5582:	aa                   	stos   %al,%es:(%rdi)
    5583:	aa                   	stos   %al,%es:(%rdi)
    5584:	aa                   	stos   %al,%es:(%rdi)
    5585:	aa                   	stos   %al,%es:(%rdi)
    5586:	aa                   	stos   %al,%es:(%rdi)
    5587:	aa                   	stos   %al,%es:(%rdi)
    5588:	aa                   	stos   %al,%es:(%rdi)
    5589:	aa                   	stos   %al,%es:(%rdi)
    558a:	aa                   	stos   %al,%es:(%rdi)
    558b:	aa                   	stos   %al,%es:(%rdi)
    558c:	aa                   	stos   %al,%es:(%rdi)
    558d:	aa                   	stos   %al,%es:(%rdi)
    558e:	aa                   	stos   %al,%es:(%rdi)
    558f:	aa                   	stos   %al,%es:(%rdi)
    5590:	aa                   	stos   %al,%es:(%rdi)
    5591:	aa                   	stos   %al,%es:(%rdi)
    5592:	aa                   	stos   %al,%es:(%rdi)
    5593:	aa                   	stos   %al,%es:(%rdi)
    5594:	aa                   	stos   %al,%es:(%rdi)
    5595:	aa                   	stos   %al,%es:(%rdi)
    5596:	aa                   	stos   %al,%es:(%rdi)
    5597:	aa                   	stos   %al,%es:(%rdi)
    5598:	aa                   	stos   %al,%es:(%rdi)
    5599:	aa                   	stos   %al,%es:(%rdi)
    559a:	aa                   	stos   %al,%es:(%rdi)
    559b:	aa                   	stos   %al,%es:(%rdi)
    559c:	aa                   	stos   %al,%es:(%rdi)
    559d:	aa                   	stos   %al,%es:(%rdi)
    559e:	aa                   	stos   %al,%es:(%rdi)
    559f:	aa                   	stos   %al,%es:(%rdi)
    55a0:	aa                   	stos   %al,%es:(%rdi)
    55a1:	aa                   	stos   %al,%es:(%rdi)
    55a2:	aa                   	stos   %al,%es:(%rdi)
    55a3:	aa                   	stos   %al,%es:(%rdi)
    55a4:	aa                   	stos   %al,%es:(%rdi)
    55a5:	aa                   	stos   %al,%es:(%rdi)
    55a6:	aa                   	stos   %al,%es:(%rdi)
    55a7:	aa                   	stos   %al,%es:(%rdi)
    55a8:	aa                   	stos   %al,%es:(%rdi)
    55a9:	aa                   	stos   %al,%es:(%rdi)
    55aa:	aa                   	stos   %al,%es:(%rdi)
    55ab:	aa                   	stos   %al,%es:(%rdi)
    55ac:	aa                   	stos   %al,%es:(%rdi)
    55ad:	aa                   	stos   %al,%es:(%rdi)
    55ae:	aa                   	stos   %al,%es:(%rdi)
    55af:	aa                   	stos   %al,%es:(%rdi)
    55b0:	aa                   	stos   %al,%es:(%rdi)
    55b1:	aa                   	stos   %al,%es:(%rdi)
    55b2:	aa                   	stos   %al,%es:(%rdi)
    55b3:	aa                   	stos   %al,%es:(%rdi)
    55b4:	aa                   	stos   %al,%es:(%rdi)
    55b5:	aa                   	stos   %al,%es:(%rdi)
    55b6:	aa                   	stos   %al,%es:(%rdi)
    55b7:	aa                   	stos   %al,%es:(%rdi)
    55b8:	aa                   	stos   %al,%es:(%rdi)
    55b9:	aa                   	stos   %al,%es:(%rdi)
    55ba:	aa                   	stos   %al,%es:(%rdi)
    55bb:	aa                   	stos   %al,%es:(%rdi)
    55bc:	aa                   	stos   %al,%es:(%rdi)
    55bd:	aa                   	stos   %al,%es:(%rdi)
    55be:	aa                   	stos   %al,%es:(%rdi)
    55bf:	aa                   	stos   %al,%es:(%rdi)
    55c0:	aa                   	stos   %al,%es:(%rdi)
    55c1:	aa                   	stos   %al,%es:(%rdi)
    55c2:	aa                   	stos   %al,%es:(%rdi)
    55c3:	aa                   	stos   %al,%es:(%rdi)
    55c4:	aa                   	stos   %al,%es:(%rdi)
    55c5:	aa                   	stos   %al,%es:(%rdi)
    55c6:	aa                   	stos   %al,%es:(%rdi)
    55c7:	aa                   	stos   %al,%es:(%rdi)
    55c8:	aa                   	stos   %al,%es:(%rdi)
    55c9:	aa                   	stos   %al,%es:(%rdi)
    55ca:	aa                   	stos   %al,%es:(%rdi)
    55cb:	aa                   	stos   %al,%es:(%rdi)
    55cc:	aa                   	stos   %al,%es:(%rdi)
    55cd:	aa                   	stos   %al,%es:(%rdi)
    55ce:	aa                   	stos   %al,%es:(%rdi)
    55cf:	aa                   	stos   %al,%es:(%rdi)
    55d0:	aa                   	stos   %al,%es:(%rdi)
    55d1:	aa                   	stos   %al,%es:(%rdi)
    55d2:	aa                   	stos   %al,%es:(%rdi)
    55d3:	aa                   	stos   %al,%es:(%rdi)
    55d4:	aa                   	stos   %al,%es:(%rdi)
    55d5:	aa                   	stos   %al,%es:(%rdi)
    55d6:	aa                   	stos   %al,%es:(%rdi)
    55d7:	aa                   	stos   %al,%es:(%rdi)
    55d8:	aa                   	stos   %al,%es:(%rdi)
    55d9:	aa                   	stos   %al,%es:(%rdi)
    55da:	aa                   	stos   %al,%es:(%rdi)
    55db:	aa                   	stos   %al,%es:(%rdi)
    55dc:	aa                   	stos   %al,%es:(%rdi)
    55dd:	aa                   	stos   %al,%es:(%rdi)
    55de:	aa                   	stos   %al,%es:(%rdi)
    55df:	aa                   	stos   %al,%es:(%rdi)
    55e0:	aa                   	stos   %al,%es:(%rdi)
    55e1:	aa                   	stos   %al,%es:(%rdi)
    55e2:	aa                   	stos   %al,%es:(%rdi)
    55e3:	aa                   	stos   %al,%es:(%rdi)
    55e4:	aa                   	stos   %al,%es:(%rdi)
    55e5:	aa                   	stos   %al,%es:(%rdi)
    55e6:	aa                   	stos   %al,%es:(%rdi)
    55e7:	aa                   	stos   %al,%es:(%rdi)
    55e8:	aa                   	stos   %al,%es:(%rdi)
    55e9:	aa                   	stos   %al,%es:(%rdi)
    55ea:	aa                   	stos   %al,%es:(%rdi)
    55eb:	aa                   	stos   %al,%es:(%rdi)
    55ec:	aa                   	stos   %al,%es:(%rdi)
    55ed:	aa                   	stos   %al,%es:(%rdi)
    55ee:	aa                   	stos   %al,%es:(%rdi)
    55ef:	aa                   	stos   %al,%es:(%rdi)
    55f0:	aa                   	stos   %al,%es:(%rdi)
    55f1:	aa                   	stos   %al,%es:(%rdi)
    55f2:	aa                   	stos   %al,%es:(%rdi)
    55f3:	aa                   	stos   %al,%es:(%rdi)
    55f4:	aa                   	stos   %al,%es:(%rdi)
    55f5:	aa                   	stos   %al,%es:(%rdi)
    55f6:	aa                   	stos   %al,%es:(%rdi)
    55f7:	aa                   	stos   %al,%es:(%rdi)
    55f8:	aa                   	stos   %al,%es:(%rdi)
    55f9:	aa                   	stos   %al,%es:(%rdi)
    55fa:	aa                   	stos   %al,%es:(%rdi)
    55fb:	aa                   	stos   %al,%es:(%rdi)
    55fc:	aa                   	stos   %al,%es:(%rdi)
    55fd:	aa                   	stos   %al,%es:(%rdi)
    55fe:	aa                   	stos   %al,%es:(%rdi)
    55ff:	aa                   	stos   %al,%es:(%rdi)
    5600:	aa                   	stos   %al,%es:(%rdi)
    5601:	aa                   	stos   %al,%es:(%rdi)
    5602:	aa                   	stos   %al,%es:(%rdi)
    5603:	aa                   	stos   %al,%es:(%rdi)
    5604:	aa                   	stos   %al,%es:(%rdi)
    5605:	aa                   	stos   %al,%es:(%rdi)
    5606:	aa                   	stos   %al,%es:(%rdi)
    5607:	aa                   	stos   %al,%es:(%rdi)
    5608:	aa                   	stos   %al,%es:(%rdi)
    5609:	aa                   	stos   %al,%es:(%rdi)
    560a:	aa                   	stos   %al,%es:(%rdi)
    560b:	aa                   	stos   %al,%es:(%rdi)
    560c:	aa                   	stos   %al,%es:(%rdi)
    560d:	aa                   	stos   %al,%es:(%rdi)
    560e:	aa                   	stos   %al,%es:(%rdi)
    560f:	aa                   	stos   %al,%es:(%rdi)
    5610:	aa                   	stos   %al,%es:(%rdi)
    5611:	aa                   	stos   %al,%es:(%rdi)
    5612:	aa                   	stos   %al,%es:(%rdi)
    5613:	aa                   	stos   %al,%es:(%rdi)
    5614:	aa                   	stos   %al,%es:(%rdi)
    5615:	aa                   	stos   %al,%es:(%rdi)
    5616:	aa                   	stos   %al,%es:(%rdi)
    5617:	aa                   	stos   %al,%es:(%rdi)
    5618:	aa                   	stos   %al,%es:(%rdi)
    5619:	aa                   	stos   %al,%es:(%rdi)
    561a:	aa                   	stos   %al,%es:(%rdi)
    561b:	aa                   	stos   %al,%es:(%rdi)
    561c:	aa                   	stos   %al,%es:(%rdi)
    561d:	aa                   	stos   %al,%es:(%rdi)
    561e:	aa                   	stos   %al,%es:(%rdi)
    561f:	aa                   	stos   %al,%es:(%rdi)
    5620:	aa                   	stos   %al,%es:(%rdi)
    5621:	aa                   	stos   %al,%es:(%rdi)
    5622:	aa                   	stos   %al,%es:(%rdi)
    5623:	aa                   	stos   %al,%es:(%rdi)
    5624:	aa                   	stos   %al,%es:(%rdi)
    5625:	aa                   	stos   %al,%es:(%rdi)
    5626:	aa                   	stos   %al,%es:(%rdi)
    5627:	aa                   	stos   %al,%es:(%rdi)
    5628:	aa                   	stos   %al,%es:(%rdi)
    5629:	aa                   	stos   %al,%es:(%rdi)
    562a:	aa                   	stos   %al,%es:(%rdi)
    562b:	aa                   	stos   %al,%es:(%rdi)
    562c:	aa                   	stos   %al,%es:(%rdi)
    562d:	aa                   	stos   %al,%es:(%rdi)
    562e:	aa                   	stos   %al,%es:(%rdi)
    562f:	aa                   	stos   %al,%es:(%rdi)
    5630:	aa                   	stos   %al,%es:(%rdi)
    5631:	aa                   	stos   %al,%es:(%rdi)
    5632:	aa                   	stos   %al,%es:(%rdi)
    5633:	aa                   	stos   %al,%es:(%rdi)
    5634:	aa                   	stos   %al,%es:(%rdi)
    5635:	aa                   	stos   %al,%es:(%rdi)
    5636:	aa                   	stos   %al,%es:(%rdi)
    5637:	aa                   	stos   %al,%es:(%rdi)
    5638:	aa                   	stos   %al,%es:(%rdi)
    5639:	aa                   	stos   %al,%es:(%rdi)
    563a:	aa                   	stos   %al,%es:(%rdi)
    563b:	aa                   	stos   %al,%es:(%rdi)
    563c:	aa                   	stos   %al,%es:(%rdi)
    563d:	aa                   	stos   %al,%es:(%rdi)
    563e:	aa                   	stos   %al,%es:(%rdi)
    563f:	aa                   	stos   %al,%es:(%rdi)
    5640:	aa                   	stos   %al,%es:(%rdi)
    5641:	aa                   	stos   %al,%es:(%rdi)
    5642:	aa                   	stos   %al,%es:(%rdi)
    5643:	aa                   	stos   %al,%es:(%rdi)
    5644:	aa                   	stos   %al,%es:(%rdi)
    5645:	aa                   	stos   %al,%es:(%rdi)
    5646:	aa                   	stos   %al,%es:(%rdi)
    5647:	aa                   	stos   %al,%es:(%rdi)
    5648:	aa                   	stos   %al,%es:(%rdi)
    5649:	aa                   	stos   %al,%es:(%rdi)
    564a:	aa                   	stos   %al,%es:(%rdi)
    564b:	aa                   	stos   %al,%es:(%rdi)
    564c:	aa                   	stos   %al,%es:(%rdi)
    564d:	aa                   	stos   %al,%es:(%rdi)
    564e:	aa                   	stos   %al,%es:(%rdi)
    564f:	aa                   	stos   %al,%es:(%rdi)
    5650:	aa                   	stos   %al,%es:(%rdi)
    5651:	aa                   	stos   %al,%es:(%rdi)
    5652:	aa                   	stos   %al,%es:(%rdi)
    5653:	aa                   	stos   %al,%es:(%rdi)
    5654:	aa                   	stos   %al,%es:(%rdi)
    5655:	aa                   	stos   %al,%es:(%rdi)
    5656:	aa                   	stos   %al,%es:(%rdi)
    5657:	aa                   	stos   %al,%es:(%rdi)
    5658:	aa                   	stos   %al,%es:(%rdi)
    5659:	aa                   	stos   %al,%es:(%rdi)
    565a:	aa                   	stos   %al,%es:(%rdi)
    565b:	aa                   	stos   %al,%es:(%rdi)
    565c:	aa                   	stos   %al,%es:(%rdi)
    565d:	aa                   	stos   %al,%es:(%rdi)
    565e:	aa                   	stos   %al,%es:(%rdi)
    565f:	aa                   	stos   %al,%es:(%rdi)
    5660:	aa                   	stos   %al,%es:(%rdi)
    5661:	aa                   	stos   %al,%es:(%rdi)
    5662:	aa                   	stos   %al,%es:(%rdi)
    5663:	aa                   	stos   %al,%es:(%rdi)
    5664:	aa                   	stos   %al,%es:(%rdi)
    5665:	aa                   	stos   %al,%es:(%rdi)
    5666:	aa                   	stos   %al,%es:(%rdi)
    5667:	aa                   	stos   %al,%es:(%rdi)
    5668:	aa                   	stos   %al,%es:(%rdi)
    5669:	aa                   	stos   %al,%es:(%rdi)
    566a:	aa                   	stos   %al,%es:(%rdi)
    566b:	aa                   	stos   %al,%es:(%rdi)
    566c:	aa                   	stos   %al,%es:(%rdi)
    566d:	aa                   	stos   %al,%es:(%rdi)
    566e:	aa                   	stos   %al,%es:(%rdi)
    566f:	aa                   	stos   %al,%es:(%rdi)
    5670:	aa                   	stos   %al,%es:(%rdi)
    5671:	aa                   	stos   %al,%es:(%rdi)
    5672:	aa                   	stos   %al,%es:(%rdi)
    5673:	aa                   	stos   %al,%es:(%rdi)
    5674:	aa                   	stos   %al,%es:(%rdi)
    5675:	aa                   	stos   %al,%es:(%rdi)
    5676:	aa                   	stos   %al,%es:(%rdi)
    5677:	aa                   	stos   %al,%es:(%rdi)
    5678:	aa                   	stos   %al,%es:(%rdi)
    5679:	aa                   	stos   %al,%es:(%rdi)
    567a:	aa                   	stos   %al,%es:(%rdi)
    567b:	aa                   	stos   %al,%es:(%rdi)
    567c:	aa                   	stos   %al,%es:(%rdi)
    567d:	aa                   	stos   %al,%es:(%rdi)
    567e:	aa                   	stos   %al,%es:(%rdi)
    567f:	aa                   	stos   %al,%es:(%rdi)
    5680:	aa                   	stos   %al,%es:(%rdi)
    5681:	aa                   	stos   %al,%es:(%rdi)
    5682:	aa                   	stos   %al,%es:(%rdi)
    5683:	aa                   	stos   %al,%es:(%rdi)
    5684:	aa                   	stos   %al,%es:(%rdi)
    5685:	aa                   	stos   %al,%es:(%rdi)
    5686:	aa                   	stos   %al,%es:(%rdi)
    5687:	aa                   	stos   %al,%es:(%rdi)
    5688:	aa                   	stos   %al,%es:(%rdi)
    5689:	aa                   	stos   %al,%es:(%rdi)
    568a:	aa                   	stos   %al,%es:(%rdi)
    568b:	aa                   	stos   %al,%es:(%rdi)
    568c:	aa                   	stos   %al,%es:(%rdi)
    568d:	aa                   	stos   %al,%es:(%rdi)
    568e:	aa                   	stos   %al,%es:(%rdi)
    568f:	aa                   	stos   %al,%es:(%rdi)
    5690:	aa                   	stos   %al,%es:(%rdi)
    5691:	aa                   	stos   %al,%es:(%rdi)
    5692:	aa                   	stos   %al,%es:(%rdi)
    5693:	aa                   	stos   %al,%es:(%rdi)
    5694:	aa                   	stos   %al,%es:(%rdi)
    5695:	aa                   	stos   %al,%es:(%rdi)
    5696:	aa                   	stos   %al,%es:(%rdi)
    5697:	aa                   	stos   %al,%es:(%rdi)
    5698:	aa                   	stos   %al,%es:(%rdi)
    5699:	aa                   	stos   %al,%es:(%rdi)
    569a:	aa                   	stos   %al,%es:(%rdi)
    569b:	aa                   	stos   %al,%es:(%rdi)
    569c:	aa                   	stos   %al,%es:(%rdi)
    569d:	aa                   	stos   %al,%es:(%rdi)
    569e:	aa                   	stos   %al,%es:(%rdi)
    569f:	aa                   	stos   %al,%es:(%rdi)
    56a0:	aa                   	stos   %al,%es:(%rdi)
    56a1:	aa                   	stos   %al,%es:(%rdi)
    56a2:	aa                   	stos   %al,%es:(%rdi)
    56a3:	aa                   	stos   %al,%es:(%rdi)
    56a4:	aa                   	stos   %al,%es:(%rdi)
    56a5:	aa                   	stos   %al,%es:(%rdi)
    56a6:	aa                   	stos   %al,%es:(%rdi)
    56a7:	aa                   	stos   %al,%es:(%rdi)
    56a8:	aa                   	stos   %al,%es:(%rdi)
    56a9:	aa                   	stos   %al,%es:(%rdi)
    56aa:	aa                   	stos   %al,%es:(%rdi)
    56ab:	aa                   	stos   %al,%es:(%rdi)
    56ac:	aa                   	stos   %al,%es:(%rdi)
    56ad:	aa                   	stos   %al,%es:(%rdi)
    56ae:	aa                   	stos   %al,%es:(%rdi)
    56af:	aa                   	stos   %al,%es:(%rdi)
    56b0:	aa                   	stos   %al,%es:(%rdi)
    56b1:	aa                   	stos   %al,%es:(%rdi)
    56b2:	aa                   	stos   %al,%es:(%rdi)
    56b3:	aa                   	stos   %al,%es:(%rdi)
    56b4:	aa                   	stos   %al,%es:(%rdi)
    56b5:	aa                   	stos   %al,%es:(%rdi)
    56b6:	aa                   	stos   %al,%es:(%rdi)
    56b7:	aa                   	stos   %al,%es:(%rdi)
    56b8:	aa                   	stos   %al,%es:(%rdi)
    56b9:	aa                   	stos   %al,%es:(%rdi)
    56ba:	aa                   	stos   %al,%es:(%rdi)
    56bb:	aa                   	stos   %al,%es:(%rdi)
    56bc:	aa                   	stos   %al,%es:(%rdi)
    56bd:	aa                   	stos   %al,%es:(%rdi)
    56be:	aa                   	stos   %al,%es:(%rdi)
    56bf:	aa                   	stos   %al,%es:(%rdi)
    56c0:	aa                   	stos   %al,%es:(%rdi)
    56c1:	aa                   	stos   %al,%es:(%rdi)
    56c2:	aa                   	stos   %al,%es:(%rdi)
    56c3:	aa                   	stos   %al,%es:(%rdi)
    56c4:	aa                   	stos   %al,%es:(%rdi)
    56c5:	aa                   	stos   %al,%es:(%rdi)
    56c6:	aa                   	stos   %al,%es:(%rdi)
    56c7:	aa                   	stos   %al,%es:(%rdi)
    56c8:	aa                   	stos   %al,%es:(%rdi)
    56c9:	aa                   	stos   %al,%es:(%rdi)
    56ca:	aa                   	stos   %al,%es:(%rdi)
    56cb:	aa                   	stos   %al,%es:(%rdi)
    56cc:	aa                   	stos   %al,%es:(%rdi)
    56cd:	aa                   	stos   %al,%es:(%rdi)
    56ce:	aa                   	stos   %al,%es:(%rdi)
    56cf:	aa                   	stos   %al,%es:(%rdi)
    56d0:	aa                   	stos   %al,%es:(%rdi)
    56d1:	aa                   	stos   %al,%es:(%rdi)
    56d2:	aa                   	stos   %al,%es:(%rdi)
    56d3:	aa                   	stos   %al,%es:(%rdi)
    56d4:	aa                   	stos   %al,%es:(%rdi)
    56d5:	aa                   	stos   %al,%es:(%rdi)
    56d6:	aa                   	stos   %al,%es:(%rdi)
    56d7:	aa                   	stos   %al,%es:(%rdi)
    56d8:	aa                   	stos   %al,%es:(%rdi)
    56d9:	aa                   	stos   %al,%es:(%rdi)
    56da:	aa                   	stos   %al,%es:(%rdi)
    56db:	aa                   	stos   %al,%es:(%rdi)
    56dc:	aa                   	stos   %al,%es:(%rdi)
    56dd:	aa                   	stos   %al,%es:(%rdi)
    56de:	aa                   	stos   %al,%es:(%rdi)
    56df:	aa                   	stos   %al,%es:(%rdi)
    56e0:	aa                   	stos   %al,%es:(%rdi)
    56e1:	aa                   	stos   %al,%es:(%rdi)
    56e2:	aa                   	stos   %al,%es:(%rdi)
    56e3:	aa                   	stos   %al,%es:(%rdi)
    56e4:	aa                   	stos   %al,%es:(%rdi)
    56e5:	aa                   	stos   %al,%es:(%rdi)
    56e6:	aa                   	stos   %al,%es:(%rdi)
    56e7:	aa                   	stos   %al,%es:(%rdi)
    56e8:	aa                   	stos   %al,%es:(%rdi)
    56e9:	aa                   	stos   %al,%es:(%rdi)
    56ea:	aa                   	stos   %al,%es:(%rdi)
    56eb:	aa                   	stos   %al,%es:(%rdi)
    56ec:	aa                   	stos   %al,%es:(%rdi)
    56ed:	aa                   	stos   %al,%es:(%rdi)
    56ee:	aa                   	stos   %al,%es:(%rdi)
    56ef:	aa                   	stos   %al,%es:(%rdi)
    56f0:	aa                   	stos   %al,%es:(%rdi)
    56f1:	aa                   	stos   %al,%es:(%rdi)
    56f2:	aa                   	stos   %al,%es:(%rdi)
    56f3:	aa                   	stos   %al,%es:(%rdi)
    56f4:	aa                   	stos   %al,%es:(%rdi)
    56f5:	aa                   	stos   %al,%es:(%rdi)
    56f6:	aa                   	stos   %al,%es:(%rdi)
    56f7:	aa                   	stos   %al,%es:(%rdi)
    56f8:	aa                   	stos   %al,%es:(%rdi)
    56f9:	aa                   	stos   %al,%es:(%rdi)
    56fa:	aa                   	stos   %al,%es:(%rdi)
    56fb:	aa                   	stos   %al,%es:(%rdi)
    56fc:	aa                   	stos   %al,%es:(%rdi)
    56fd:	aa                   	stos   %al,%es:(%rdi)
    56fe:	aa                   	stos   %al,%es:(%rdi)
    56ff:	aa                   	stos   %al,%es:(%rdi)
    5700:	aa                   	stos   %al,%es:(%rdi)
    5701:	aa                   	stos   %al,%es:(%rdi)
    5702:	aa                   	stos   %al,%es:(%rdi)
    5703:	aa                   	stos   %al,%es:(%rdi)
    5704:	aa                   	stos   %al,%es:(%rdi)
    5705:	aa                   	stos   %al,%es:(%rdi)
    5706:	aa                   	stos   %al,%es:(%rdi)
    5707:	aa                   	stos   %al,%es:(%rdi)
    5708:	aa                   	stos   %al,%es:(%rdi)
    5709:	aa                   	stos   %al,%es:(%rdi)
    570a:	aa                   	stos   %al,%es:(%rdi)
    570b:	aa                   	stos   %al,%es:(%rdi)
    570c:	aa                   	stos   %al,%es:(%rdi)
    570d:	aa                   	stos   %al,%es:(%rdi)
    570e:	aa                   	stos   %al,%es:(%rdi)
    570f:	aa                   	stos   %al,%es:(%rdi)
    5710:	aa                   	stos   %al,%es:(%rdi)
    5711:	aa                   	stos   %al,%es:(%rdi)
    5712:	aa                   	stos   %al,%es:(%rdi)
    5713:	aa                   	stos   %al,%es:(%rdi)
    5714:	aa                   	stos   %al,%es:(%rdi)
    5715:	aa                   	stos   %al,%es:(%rdi)
    5716:	aa                   	stos   %al,%es:(%rdi)
    5717:	aa                   	stos   %al,%es:(%rdi)
    5718:	aa                   	stos   %al,%es:(%rdi)
    5719:	aa                   	stos   %al,%es:(%rdi)
    571a:	aa                   	stos   %al,%es:(%rdi)
    571b:	aa                   	stos   %al,%es:(%rdi)
    571c:	aa                   	stos   %al,%es:(%rdi)
    571d:	aa                   	stos   %al,%es:(%rdi)
    571e:	aa                   	stos   %al,%es:(%rdi)
    571f:	aa                   	stos   %al,%es:(%rdi)
    5720:	aa                   	stos   %al,%es:(%rdi)
    5721:	aa                   	stos   %al,%es:(%rdi)
    5722:	aa                   	stos   %al,%es:(%rdi)
    5723:	aa                   	stos   %al,%es:(%rdi)
    5724:	aa                   	stos   %al,%es:(%rdi)
    5725:	aa                   	stos   %al,%es:(%rdi)
    5726:	aa                   	stos   %al,%es:(%rdi)
    5727:	aa                   	stos   %al,%es:(%rdi)
    5728:	aa                   	stos   %al,%es:(%rdi)
    5729:	aa                   	stos   %al,%es:(%rdi)
    572a:	aa                   	stos   %al,%es:(%rdi)
    572b:	aa                   	stos   %al,%es:(%rdi)
    572c:	aa                   	stos   %al,%es:(%rdi)
    572d:	aa                   	stos   %al,%es:(%rdi)
    572e:	aa                   	stos   %al,%es:(%rdi)
    572f:	aa                   	stos   %al,%es:(%rdi)
    5730:	aa                   	stos   %al,%es:(%rdi)
    5731:	aa                   	stos   %al,%es:(%rdi)
    5732:	aa                   	stos   %al,%es:(%rdi)
    5733:	aa                   	stos   %al,%es:(%rdi)
    5734:	aa                   	stos   %al,%es:(%rdi)
    5735:	aa                   	stos   %al,%es:(%rdi)
    5736:	aa                   	stos   %al,%es:(%rdi)
    5737:	aa                   	stos   %al,%es:(%rdi)
    5738:	aa                   	stos   %al,%es:(%rdi)
    5739:	aa                   	stos   %al,%es:(%rdi)
    573a:	aa                   	stos   %al,%es:(%rdi)
    573b:	aa                   	stos   %al,%es:(%rdi)
    573c:	aa                   	stos   %al,%es:(%rdi)
    573d:	aa                   	stos   %al,%es:(%rdi)
    573e:	aa                   	stos   %al,%es:(%rdi)
    573f:	aa                   	stos   %al,%es:(%rdi)
    5740:	aa                   	stos   %al,%es:(%rdi)
    5741:	aa                   	stos   %al,%es:(%rdi)
    5742:	aa                   	stos   %al,%es:(%rdi)
    5743:	aa                   	stos   %al,%es:(%rdi)
    5744:	aa                   	stos   %al,%es:(%rdi)
    5745:	aa                   	stos   %al,%es:(%rdi)
    5746:	aa                   	stos   %al,%es:(%rdi)
    5747:	aa                   	stos   %al,%es:(%rdi)
    5748:	aa                   	stos   %al,%es:(%rdi)
    5749:	aa                   	stos   %al,%es:(%rdi)
    574a:	aa                   	stos   %al,%es:(%rdi)
    574b:	aa                   	stos   %al,%es:(%rdi)
    574c:	aa                   	stos   %al,%es:(%rdi)
    574d:	aa                   	stos   %al,%es:(%rdi)
    574e:	aa                   	stos   %al,%es:(%rdi)
    574f:	aa                   	stos   %al,%es:(%rdi)
    5750:	aa                   	stos   %al,%es:(%rdi)
    5751:	aa                   	stos   %al,%es:(%rdi)
    5752:	aa                   	stos   %al,%es:(%rdi)
    5753:	aa                   	stos   %al,%es:(%rdi)
    5754:	aa                   	stos   %al,%es:(%rdi)
    5755:	aa                   	stos   %al,%es:(%rdi)
    5756:	aa                   	stos   %al,%es:(%rdi)
    5757:	aa                   	stos   %al,%es:(%rdi)
    5758:	aa                   	stos   %al,%es:(%rdi)
    5759:	aa                   	stos   %al,%es:(%rdi)
    575a:	aa                   	stos   %al,%es:(%rdi)
    575b:	aa                   	stos   %al,%es:(%rdi)
    575c:	aa                   	stos   %al,%es:(%rdi)
    575d:	aa                   	stos   %al,%es:(%rdi)
    575e:	aa                   	stos   %al,%es:(%rdi)
    575f:	aa                   	stos   %al,%es:(%rdi)
    5760:	aa                   	stos   %al,%es:(%rdi)
    5761:	aa                   	stos   %al,%es:(%rdi)
    5762:	aa                   	stos   %al,%es:(%rdi)
    5763:	aa                   	stos   %al,%es:(%rdi)
    5764:	aa                   	stos   %al,%es:(%rdi)
    5765:	aa                   	stos   %al,%es:(%rdi)
    5766:	aa                   	stos   %al,%es:(%rdi)
    5767:	aa                   	stos   %al,%es:(%rdi)
    5768:	aa                   	stos   %al,%es:(%rdi)
    5769:	aa                   	stos   %al,%es:(%rdi)
    576a:	aa                   	stos   %al,%es:(%rdi)
    576b:	aa                   	stos   %al,%es:(%rdi)
    576c:	aa                   	stos   %al,%es:(%rdi)
    576d:	aa                   	stos   %al,%es:(%rdi)
    576e:	aa                   	stos   %al,%es:(%rdi)
    576f:	aa                   	stos   %al,%es:(%rdi)
    5770:	aa                   	stos   %al,%es:(%rdi)
    5771:	aa                   	stos   %al,%es:(%rdi)
    5772:	aa                   	stos   %al,%es:(%rdi)
    5773:	aa                   	stos   %al,%es:(%rdi)
    5774:	aa                   	stos   %al,%es:(%rdi)
    5775:	aa                   	stos   %al,%es:(%rdi)
    5776:	aa                   	stos   %al,%es:(%rdi)
    5777:	aa                   	stos   %al,%es:(%rdi)
    5778:	aa                   	stos   %al,%es:(%rdi)
    5779:	aa                   	stos   %al,%es:(%rdi)
    577a:	aa                   	stos   %al,%es:(%rdi)
    577b:	aa                   	stos   %al,%es:(%rdi)
    577c:	aa                   	stos   %al,%es:(%rdi)
    577d:	aa                   	stos   %al,%es:(%rdi)
    577e:	aa                   	stos   %al,%es:(%rdi)
    577f:	aa                   	stos   %al,%es:(%rdi)
    5780:	aa                   	stos   %al,%es:(%rdi)
    5781:	aa                   	stos   %al,%es:(%rdi)
    5782:	aa                   	stos   %al,%es:(%rdi)
    5783:	aa                   	stos   %al,%es:(%rdi)
    5784:	aa                   	stos   %al,%es:(%rdi)
    5785:	aa                   	stos   %al,%es:(%rdi)
    5786:	aa                   	stos   %al,%es:(%rdi)
    5787:	aa                   	stos   %al,%es:(%rdi)
    5788:	aa                   	stos   %al,%es:(%rdi)
    5789:	aa                   	stos   %al,%es:(%rdi)
    578a:	aa                   	stos   %al,%es:(%rdi)
    578b:	aa                   	stos   %al,%es:(%rdi)
    578c:	aa                   	stos   %al,%es:(%rdi)
    578d:	aa                   	stos   %al,%es:(%rdi)
    578e:	aa                   	stos   %al,%es:(%rdi)
    578f:	aa                   	stos   %al,%es:(%rdi)
    5790:	aa                   	stos   %al,%es:(%rdi)
    5791:	aa                   	stos   %al,%es:(%rdi)
    5792:	aa                   	stos   %al,%es:(%rdi)
    5793:	aa                   	stos   %al,%es:(%rdi)
    5794:	aa                   	stos   %al,%es:(%rdi)
    5795:	aa                   	stos   %al,%es:(%rdi)
    5796:	aa                   	stos   %al,%es:(%rdi)
    5797:	aa                   	stos   %al,%es:(%rdi)
    5798:	aa                   	stos   %al,%es:(%rdi)
    5799:	aa                   	stos   %al,%es:(%rdi)
    579a:	aa                   	stos   %al,%es:(%rdi)
    579b:	aa                   	stos   %al,%es:(%rdi)
    579c:	aa                   	stos   %al,%es:(%rdi)
    579d:	aa                   	stos   %al,%es:(%rdi)
    579e:	aa                   	stos   %al,%es:(%rdi)
    579f:	aa                   	stos   %al,%es:(%rdi)
    57a0:	aa                   	stos   %al,%es:(%rdi)
    57a1:	aa                   	stos   %al,%es:(%rdi)
    57a2:	aa                   	stos   %al,%es:(%rdi)
    57a3:	aa                   	stos   %al,%es:(%rdi)
    57a4:	aa                   	stos   %al,%es:(%rdi)
    57a5:	aa                   	stos   %al,%es:(%rdi)
    57a6:	aa                   	stos   %al,%es:(%rdi)
    57a7:	aa                   	stos   %al,%es:(%rdi)
    57a8:	aa                   	stos   %al,%es:(%rdi)
    57a9:	aa                   	stos   %al,%es:(%rdi)
    57aa:	aa                   	stos   %al,%es:(%rdi)
    57ab:	aa                   	stos   %al,%es:(%rdi)
    57ac:	aa                   	stos   %al,%es:(%rdi)
    57ad:	aa                   	stos   %al,%es:(%rdi)
    57ae:	aa                   	stos   %al,%es:(%rdi)
    57af:	aa                   	stos   %al,%es:(%rdi)
    57b0:	aa                   	stos   %al,%es:(%rdi)
    57b1:	aa                   	stos   %al,%es:(%rdi)
    57b2:	aa                   	stos   %al,%es:(%rdi)
    57b3:	aa                   	stos   %al,%es:(%rdi)
    57b4:	aa                   	stos   %al,%es:(%rdi)
    57b5:	aa                   	stos   %al,%es:(%rdi)
    57b6:	aa                   	stos   %al,%es:(%rdi)
    57b7:	aa                   	stos   %al,%es:(%rdi)
    57b8:	aa                   	stos   %al,%es:(%rdi)
    57b9:	aa                   	stos   %al,%es:(%rdi)
    57ba:	aa                   	stos   %al,%es:(%rdi)
    57bb:	aa                   	stos   %al,%es:(%rdi)
    57bc:	aa                   	stos   %al,%es:(%rdi)
    57bd:	aa                   	stos   %al,%es:(%rdi)
    57be:	aa                   	stos   %al,%es:(%rdi)
    57bf:	aa                   	stos   %al,%es:(%rdi)
    57c0:	aa                   	stos   %al,%es:(%rdi)
    57c1:	aa                   	stos   %al,%es:(%rdi)
    57c2:	aa                   	stos   %al,%es:(%rdi)
    57c3:	aa                   	stos   %al,%es:(%rdi)
    57c4:	aa                   	stos   %al,%es:(%rdi)
    57c5:	aa                   	stos   %al,%es:(%rdi)
    57c6:	aa                   	stos   %al,%es:(%rdi)
    57c7:	aa                   	stos   %al,%es:(%rdi)
    57c8:	aa                   	stos   %al,%es:(%rdi)
    57c9:	aa                   	stos   %al,%es:(%rdi)
    57ca:	aa                   	stos   %al,%es:(%rdi)
    57cb:	aa                   	stos   %al,%es:(%rdi)
    57cc:	aa                   	stos   %al,%es:(%rdi)
    57cd:	aa                   	stos   %al,%es:(%rdi)
    57ce:	aa                   	stos   %al,%es:(%rdi)
    57cf:	aa                   	stos   %al,%es:(%rdi)
    57d0:	aa                   	stos   %al,%es:(%rdi)
    57d1:	aa                   	stos   %al,%es:(%rdi)
    57d2:	aa                   	stos   %al,%es:(%rdi)
    57d3:	aa                   	stos   %al,%es:(%rdi)
    57d4:	aa                   	stos   %al,%es:(%rdi)
    57d5:	aa                   	stos   %al,%es:(%rdi)
    57d6:	aa                   	stos   %al,%es:(%rdi)
    57d7:	aa                   	stos   %al,%es:(%rdi)
    57d8:	aa                   	stos   %al,%es:(%rdi)
    57d9:	aa                   	stos   %al,%es:(%rdi)
    57da:	aa                   	stos   %al,%es:(%rdi)
    57db:	aa                   	stos   %al,%es:(%rdi)
    57dc:	aa                   	stos   %al,%es:(%rdi)
    57dd:	aa                   	stos   %al,%es:(%rdi)
    57de:	aa                   	stos   %al,%es:(%rdi)
    57df:	aa                   	stos   %al,%es:(%rdi)
    57e0:	aa                   	stos   %al,%es:(%rdi)
    57e1:	aa                   	stos   %al,%es:(%rdi)
    57e2:	aa                   	stos   %al,%es:(%rdi)
    57e3:	aa                   	stos   %al,%es:(%rdi)
    57e4:	aa                   	stos   %al,%es:(%rdi)
    57e5:	aa                   	stos   %al,%es:(%rdi)
    57e6:	aa                   	stos   %al,%es:(%rdi)
    57e7:	aa                   	stos   %al,%es:(%rdi)
    57e8:	aa                   	stos   %al,%es:(%rdi)
    57e9:	aa                   	stos   %al,%es:(%rdi)
    57ea:	aa                   	stos   %al,%es:(%rdi)
    57eb:	aa                   	stos   %al,%es:(%rdi)
    57ec:	aa                   	stos   %al,%es:(%rdi)
    57ed:	aa                   	stos   %al,%es:(%rdi)
    57ee:	aa                   	stos   %al,%es:(%rdi)
    57ef:	aa                   	stos   %al,%es:(%rdi)
    57f0:	aa                   	stos   %al,%es:(%rdi)
    57f1:	aa                   	stos   %al,%es:(%rdi)
    57f2:	aa                   	stos   %al,%es:(%rdi)
    57f3:	aa                   	stos   %al,%es:(%rdi)
    57f4:	aa                   	stos   %al,%es:(%rdi)
    57f5:	aa                   	stos   %al,%es:(%rdi)
    57f6:	aa                   	stos   %al,%es:(%rdi)
    57f7:	aa                   	stos   %al,%es:(%rdi)
    57f8:	aa                   	stos   %al,%es:(%rdi)
    57f9:	aa                   	stos   %al,%es:(%rdi)
    57fa:	aa                   	stos   %al,%es:(%rdi)
    57fb:	aa                   	stos   %al,%es:(%rdi)
    57fc:	aa                   	stos   %al,%es:(%rdi)
    57fd:	aa                   	stos   %al,%es:(%rdi)
    57fe:	aa                   	stos   %al,%es:(%rdi)
    57ff:	aa                   	stos   %al,%es:(%rdi)
    5800:	aa                   	stos   %al,%es:(%rdi)
    5801:	aa                   	stos   %al,%es:(%rdi)
    5802:	aa                   	stos   %al,%es:(%rdi)
    5803:	aa                   	stos   %al,%es:(%rdi)
    5804:	aa                   	stos   %al,%es:(%rdi)
    5805:	aa                   	stos   %al,%es:(%rdi)
    5806:	aa                   	stos   %al,%es:(%rdi)
    5807:	aa                   	stos   %al,%es:(%rdi)
    5808:	aa                   	stos   %al,%es:(%rdi)
    5809:	aa                   	stos   %al,%es:(%rdi)
    580a:	aa                   	stos   %al,%es:(%rdi)
    580b:	aa                   	stos   %al,%es:(%rdi)
    580c:	aa                   	stos   %al,%es:(%rdi)
    580d:	aa                   	stos   %al,%es:(%rdi)
    580e:	aa                   	stos   %al,%es:(%rdi)
    580f:	aa                   	stos   %al,%es:(%rdi)
    5810:	aa                   	stos   %al,%es:(%rdi)
    5811:	aa                   	stos   %al,%es:(%rdi)
    5812:	aa                   	stos   %al,%es:(%rdi)
    5813:	aa                   	stos   %al,%es:(%rdi)
    5814:	aa                   	stos   %al,%es:(%rdi)
    5815:	aa                   	stos   %al,%es:(%rdi)
    5816:	aa                   	stos   %al,%es:(%rdi)
    5817:	aa                   	stos   %al,%es:(%rdi)
    5818:	aa                   	stos   %al,%es:(%rdi)
    5819:	aa                   	stos   %al,%es:(%rdi)
    581a:	aa                   	stos   %al,%es:(%rdi)
    581b:	aa                   	stos   %al,%es:(%rdi)
    581c:	aa                   	stos   %al,%es:(%rdi)
    581d:	aa                   	stos   %al,%es:(%rdi)
    581e:	aa                   	stos   %al,%es:(%rdi)
    581f:	aa                   	stos   %al,%es:(%rdi)
    5820:	aa                   	stos   %al,%es:(%rdi)
    5821:	aa                   	stos   %al,%es:(%rdi)
    5822:	aa                   	stos   %al,%es:(%rdi)
    5823:	aa                   	stos   %al,%es:(%rdi)
    5824:	aa                   	stos   %al,%es:(%rdi)
    5825:	aa                   	stos   %al,%es:(%rdi)
    5826:	aa                   	stos   %al,%es:(%rdi)
    5827:	aa                   	stos   %al,%es:(%rdi)
    5828:	aa                   	stos   %al,%es:(%rdi)
    5829:	aa                   	stos   %al,%es:(%rdi)
    582a:	aa                   	stos   %al,%es:(%rdi)
    582b:	aa                   	stos   %al,%es:(%rdi)
    582c:	aa                   	stos   %al,%es:(%rdi)
    582d:	aa                   	stos   %al,%es:(%rdi)
    582e:	aa                   	stos   %al,%es:(%rdi)
    582f:	aa                   	stos   %al,%es:(%rdi)
    5830:	aa                   	stos   %al,%es:(%rdi)
    5831:	aa                   	stos   %al,%es:(%rdi)
    5832:	aa                   	stos   %al,%es:(%rdi)
    5833:	aa                   	stos   %al,%es:(%rdi)
    5834:	aa                   	stos   %al,%es:(%rdi)
    5835:	aa                   	stos   %al,%es:(%rdi)
    5836:	aa                   	stos   %al,%es:(%rdi)
    5837:	aa                   	stos   %al,%es:(%rdi)
    5838:	aa                   	stos   %al,%es:(%rdi)
    5839:	aa                   	stos   %al,%es:(%rdi)
    583a:	aa                   	stos   %al,%es:(%rdi)
    583b:	aa                   	stos   %al,%es:(%rdi)
    583c:	aa                   	stos   %al,%es:(%rdi)
    583d:	aa                   	stos   %al,%es:(%rdi)
    583e:	aa                   	stos   %al,%es:(%rdi)
    583f:	aa                   	stos   %al,%es:(%rdi)
    5840:	aa                   	stos   %al,%es:(%rdi)
    5841:	aa                   	stos   %al,%es:(%rdi)
    5842:	aa                   	stos   %al,%es:(%rdi)
    5843:	aa                   	stos   %al,%es:(%rdi)
    5844:	aa                   	stos   %al,%es:(%rdi)
    5845:	aa                   	stos   %al,%es:(%rdi)
    5846:	aa                   	stos   %al,%es:(%rdi)
    5847:	aa                   	stos   %al,%es:(%rdi)
    5848:	aa                   	stos   %al,%es:(%rdi)
    5849:	aa                   	stos   %al,%es:(%rdi)
    584a:	aa                   	stos   %al,%es:(%rdi)
    584b:	aa                   	stos   %al,%es:(%rdi)
    584c:	aa                   	stos   %al,%es:(%rdi)
    584d:	aa                   	stos   %al,%es:(%rdi)
    584e:	aa                   	stos   %al,%es:(%rdi)
    584f:	aa                   	stos   %al,%es:(%rdi)
    5850:	aa                   	stos   %al,%es:(%rdi)
    5851:	aa                   	stos   %al,%es:(%rdi)
    5852:	aa                   	stos   %al,%es:(%rdi)
    5853:	aa                   	stos   %al,%es:(%rdi)
    5854:	aa                   	stos   %al,%es:(%rdi)
    5855:	aa                   	stos   %al,%es:(%rdi)
    5856:	aa                   	stos   %al,%es:(%rdi)
    5857:	aa                   	stos   %al,%es:(%rdi)
    5858:	aa                   	stos   %al,%es:(%rdi)
    5859:	aa                   	stos   %al,%es:(%rdi)
    585a:	aa                   	stos   %al,%es:(%rdi)
    585b:	aa                   	stos   %al,%es:(%rdi)
    585c:	aa                   	stos   %al,%es:(%rdi)
    585d:	aa                   	stos   %al,%es:(%rdi)
    585e:	aa                   	stos   %al,%es:(%rdi)
    585f:	aa                   	stos   %al,%es:(%rdi)
    5860:	aa                   	stos   %al,%es:(%rdi)
    5861:	aa                   	stos   %al,%es:(%rdi)
    5862:	aa                   	stos   %al,%es:(%rdi)
    5863:	aa                   	stos   %al,%es:(%rdi)
    5864:	aa                   	stos   %al,%es:(%rdi)
    5865:	aa                   	stos   %al,%es:(%rdi)
    5866:	aa                   	stos   %al,%es:(%rdi)
    5867:	aa                   	stos   %al,%es:(%rdi)
    5868:	aa                   	stos   %al,%es:(%rdi)
    5869:	aa                   	stos   %al,%es:(%rdi)
    586a:	aa                   	stos   %al,%es:(%rdi)
    586b:	aa                   	stos   %al,%es:(%rdi)
    586c:	aa                   	stos   %al,%es:(%rdi)
    586d:	aa                   	stos   %al,%es:(%rdi)
    586e:	aa                   	stos   %al,%es:(%rdi)
    586f:	aa                   	stos   %al,%es:(%rdi)
    5870:	aa                   	stos   %al,%es:(%rdi)
    5871:	aa                   	stos   %al,%es:(%rdi)
    5872:	aa                   	stos   %al,%es:(%rdi)
    5873:	aa                   	stos   %al,%es:(%rdi)
    5874:	aa                   	stos   %al,%es:(%rdi)
    5875:	aa                   	stos   %al,%es:(%rdi)
    5876:	aa                   	stos   %al,%es:(%rdi)
    5877:	aa                   	stos   %al,%es:(%rdi)
    5878:	aa                   	stos   %al,%es:(%rdi)
    5879:	aa                   	stos   %al,%es:(%rdi)
    587a:	aa                   	stos   %al,%es:(%rdi)
    587b:	aa                   	stos   %al,%es:(%rdi)
    587c:	aa                   	stos   %al,%es:(%rdi)
    587d:	aa                   	stos   %al,%es:(%rdi)
    587e:	aa                   	stos   %al,%es:(%rdi)
    587f:	aa                   	stos   %al,%es:(%rdi)
    5880:	aa                   	stos   %al,%es:(%rdi)
    5881:	aa                   	stos   %al,%es:(%rdi)
    5882:	aa                   	stos   %al,%es:(%rdi)
    5883:	aa                   	stos   %al,%es:(%rdi)
    5884:	aa                   	stos   %al,%es:(%rdi)
    5885:	aa                   	stos   %al,%es:(%rdi)
    5886:	aa                   	stos   %al,%es:(%rdi)
    5887:	aa                   	stos   %al,%es:(%rdi)
    5888:	aa                   	stos   %al,%es:(%rdi)
    5889:	aa                   	stos   %al,%es:(%rdi)
    588a:	aa                   	stos   %al,%es:(%rdi)
    588b:	aa                   	stos   %al,%es:(%rdi)
    588c:	aa                   	stos   %al,%es:(%rdi)
    588d:	aa                   	stos   %al,%es:(%rdi)
    588e:	aa                   	stos   %al,%es:(%rdi)
    588f:	aa                   	stos   %al,%es:(%rdi)
    5890:	aa                   	stos   %al,%es:(%rdi)
    5891:	aa                   	stos   %al,%es:(%rdi)
    5892:	aa                   	stos   %al,%es:(%rdi)
    5893:	aa                   	stos   %al,%es:(%rdi)
    5894:	aa                   	stos   %al,%es:(%rdi)
    5895:	aa                   	stos   %al,%es:(%rdi)
    5896:	aa                   	stos   %al,%es:(%rdi)
    5897:	aa                   	stos   %al,%es:(%rdi)
    5898:	aa                   	stos   %al,%es:(%rdi)
    5899:	aa                   	stos   %al,%es:(%rdi)
    589a:	aa                   	stos   %al,%es:(%rdi)
    589b:	aa                   	stos   %al,%es:(%rdi)
    589c:	aa                   	stos   %al,%es:(%rdi)
    589d:	aa                   	stos   %al,%es:(%rdi)
    589e:	aa                   	stos   %al,%es:(%rdi)
    589f:	aa                   	stos   %al,%es:(%rdi)
    58a0:	aa                   	stos   %al,%es:(%rdi)
    58a1:	aa                   	stos   %al,%es:(%rdi)
    58a2:	aa                   	stos   %al,%es:(%rdi)
    58a3:	aa                   	stos   %al,%es:(%rdi)
    58a4:	aa                   	stos   %al,%es:(%rdi)
    58a5:	aa                   	stos   %al,%es:(%rdi)
    58a6:	aa                   	stos   %al,%es:(%rdi)
    58a7:	aa                   	stos   %al,%es:(%rdi)
    58a8:	aa                   	stos   %al,%es:(%rdi)
    58a9:	aa                   	stos   %al,%es:(%rdi)
    58aa:	aa                   	stos   %al,%es:(%rdi)
    58ab:	aa                   	stos   %al,%es:(%rdi)
    58ac:	aa                   	stos   %al,%es:(%rdi)
    58ad:	aa                   	stos   %al,%es:(%rdi)
    58ae:	aa                   	stos   %al,%es:(%rdi)
    58af:	aa                   	stos   %al,%es:(%rdi)
    58b0:	aa                   	stos   %al,%es:(%rdi)
    58b1:	aa                   	stos   %al,%es:(%rdi)
    58b2:	aa                   	stos   %al,%es:(%rdi)
    58b3:	aa                   	stos   %al,%es:(%rdi)
    58b4:	aa                   	stos   %al,%es:(%rdi)
    58b5:	aa                   	stos   %al,%es:(%rdi)
    58b6:	aa                   	stos   %al,%es:(%rdi)
    58b7:	aa                   	stos   %al,%es:(%rdi)
    58b8:	aa                   	stos   %al,%es:(%rdi)
    58b9:	aa                   	stos   %al,%es:(%rdi)
    58ba:	aa                   	stos   %al,%es:(%rdi)
    58bb:	aa                   	stos   %al,%es:(%rdi)
    58bc:	aa                   	stos   %al,%es:(%rdi)
    58bd:	aa                   	stos   %al,%es:(%rdi)
    58be:	aa                   	stos   %al,%es:(%rdi)
    58bf:	aa                   	stos   %al,%es:(%rdi)
    58c0:	aa                   	stos   %al,%es:(%rdi)
    58c1:	aa                   	stos   %al,%es:(%rdi)
    58c2:	aa                   	stos   %al,%es:(%rdi)
    58c3:	aa                   	stos   %al,%es:(%rdi)
    58c4:	aa                   	stos   %al,%es:(%rdi)
    58c5:	aa                   	stos   %al,%es:(%rdi)
    58c6:	aa                   	stos   %al,%es:(%rdi)
    58c7:	aa                   	stos   %al,%es:(%rdi)
    58c8:	aa                   	stos   %al,%es:(%rdi)
    58c9:	aa                   	stos   %al,%es:(%rdi)
    58ca:	aa                   	stos   %al,%es:(%rdi)
    58cb:	aa                   	stos   %al,%es:(%rdi)
    58cc:	aa                   	stos   %al,%es:(%rdi)
    58cd:	aa                   	stos   %al,%es:(%rdi)
    58ce:	aa                   	stos   %al,%es:(%rdi)
    58cf:	aa                   	stos   %al,%es:(%rdi)
    58d0:	aa                   	stos   %al,%es:(%rdi)
    58d1:	aa                   	stos   %al,%es:(%rdi)
    58d2:	aa                   	stos   %al,%es:(%rdi)
    58d3:	aa                   	stos   %al,%es:(%rdi)
    58d4:	aa                   	stos   %al,%es:(%rdi)
    58d5:	aa                   	stos   %al,%es:(%rdi)
    58d6:	aa                   	stos   %al,%es:(%rdi)
    58d7:	aa                   	stos   %al,%es:(%rdi)
    58d8:	aa                   	stos   %al,%es:(%rdi)
    58d9:	aa                   	stos   %al,%es:(%rdi)
    58da:	aa                   	stos   %al,%es:(%rdi)
    58db:	aa                   	stos   %al,%es:(%rdi)
    58dc:	aa                   	stos   %al,%es:(%rdi)
    58dd:	aa                   	stos   %al,%es:(%rdi)
    58de:	aa                   	stos   %al,%es:(%rdi)
    58df:	aa                   	stos   %al,%es:(%rdi)
    58e0:	aa                   	stos   %al,%es:(%rdi)
    58e1:	aa                   	stos   %al,%es:(%rdi)
    58e2:	aa                   	stos   %al,%es:(%rdi)
    58e3:	aa                   	stos   %al,%es:(%rdi)
    58e4:	aa                   	stos   %al,%es:(%rdi)
    58e5:	aa                   	stos   %al,%es:(%rdi)
    58e6:	aa                   	stos   %al,%es:(%rdi)
    58e7:	aa                   	stos   %al,%es:(%rdi)
    58e8:	aa                   	stos   %al,%es:(%rdi)
    58e9:	aa                   	stos   %al,%es:(%rdi)
    58ea:	aa                   	stos   %al,%es:(%rdi)
    58eb:	aa                   	stos   %al,%es:(%rdi)
    58ec:	aa                   	stos   %al,%es:(%rdi)
    58ed:	aa                   	stos   %al,%es:(%rdi)
    58ee:	aa                   	stos   %al,%es:(%rdi)
    58ef:	aa                   	stos   %al,%es:(%rdi)
    58f0:	aa                   	stos   %al,%es:(%rdi)
    58f1:	aa                   	stos   %al,%es:(%rdi)
    58f2:	aa                   	stos   %al,%es:(%rdi)
    58f3:	aa                   	stos   %al,%es:(%rdi)
    58f4:	aa                   	stos   %al,%es:(%rdi)
    58f5:	aa                   	stos   %al,%es:(%rdi)
    58f6:	aa                   	stos   %al,%es:(%rdi)
    58f7:	aa                   	stos   %al,%es:(%rdi)
    58f8:	aa                   	stos   %al,%es:(%rdi)
    58f9:	aa                   	stos   %al,%es:(%rdi)
    58fa:	aa                   	stos   %al,%es:(%rdi)
    58fb:	aa                   	stos   %al,%es:(%rdi)
    58fc:	aa                   	stos   %al,%es:(%rdi)
    58fd:	aa                   	stos   %al,%es:(%rdi)
    58fe:	aa                   	stos   %al,%es:(%rdi)
    58ff:	aa                   	stos   %al,%es:(%rdi)
    5900:	aa                   	stos   %al,%es:(%rdi)
    5901:	aa                   	stos   %al,%es:(%rdi)
    5902:	aa                   	stos   %al,%es:(%rdi)
    5903:	aa                   	stos   %al,%es:(%rdi)
    5904:	aa                   	stos   %al,%es:(%rdi)
    5905:	aa                   	stos   %al,%es:(%rdi)
    5906:	aa                   	stos   %al,%es:(%rdi)
    5907:	aa                   	stos   %al,%es:(%rdi)
    5908:	aa                   	stos   %al,%es:(%rdi)
    5909:	aa                   	stos   %al,%es:(%rdi)
    590a:	aa                   	stos   %al,%es:(%rdi)
    590b:	aa                   	stos   %al,%es:(%rdi)
    590c:	aa                   	stos   %al,%es:(%rdi)
    590d:	aa                   	stos   %al,%es:(%rdi)
    590e:	aa                   	stos   %al,%es:(%rdi)
    590f:	aa                   	stos   %al,%es:(%rdi)
    5910:	aa                   	stos   %al,%es:(%rdi)
    5911:	aa                   	stos   %al,%es:(%rdi)
    5912:	aa                   	stos   %al,%es:(%rdi)
    5913:	aa                   	stos   %al,%es:(%rdi)
    5914:	aa                   	stos   %al,%es:(%rdi)
    5915:	aa                   	stos   %al,%es:(%rdi)
    5916:	aa                   	stos   %al,%es:(%rdi)
    5917:	aa                   	stos   %al,%es:(%rdi)
    5918:	aa                   	stos   %al,%es:(%rdi)
    5919:	aa                   	stos   %al,%es:(%rdi)
    591a:	aa                   	stos   %al,%es:(%rdi)
    591b:	aa                   	stos   %al,%es:(%rdi)
    591c:	aa                   	stos   %al,%es:(%rdi)
    591d:	aa                   	stos   %al,%es:(%rdi)
    591e:	aa                   	stos   %al,%es:(%rdi)
    591f:	aa                   	stos   %al,%es:(%rdi)
    5920:	aa                   	stos   %al,%es:(%rdi)
    5921:	aa                   	stos   %al,%es:(%rdi)
    5922:	aa                   	stos   %al,%es:(%rdi)
    5923:	aa                   	stos   %al,%es:(%rdi)
    5924:	aa                   	stos   %al,%es:(%rdi)
    5925:	aa                   	stos   %al,%es:(%rdi)
    5926:	aa                   	stos   %al,%es:(%rdi)
    5927:	aa                   	stos   %al,%es:(%rdi)
    5928:	aa                   	stos   %al,%es:(%rdi)
    5929:	aa                   	stos   %al,%es:(%rdi)
    592a:	aa                   	stos   %al,%es:(%rdi)
    592b:	aa                   	stos   %al,%es:(%rdi)
    592c:	aa                   	stos   %al,%es:(%rdi)
    592d:	aa                   	stos   %al,%es:(%rdi)
    592e:	aa                   	stos   %al,%es:(%rdi)
    592f:	aa                   	stos   %al,%es:(%rdi)
    5930:	aa                   	stos   %al,%es:(%rdi)
    5931:	aa                   	stos   %al,%es:(%rdi)
    5932:	aa                   	stos   %al,%es:(%rdi)
    5933:	aa                   	stos   %al,%es:(%rdi)
    5934:	aa                   	stos   %al,%es:(%rdi)
    5935:	aa                   	stos   %al,%es:(%rdi)
    5936:	aa                   	stos   %al,%es:(%rdi)
    5937:	aa                   	stos   %al,%es:(%rdi)
    5938:	aa                   	stos   %al,%es:(%rdi)
    5939:	aa                   	stos   %al,%es:(%rdi)
    593a:	aa                   	stos   %al,%es:(%rdi)
    593b:	aa                   	stos   %al,%es:(%rdi)
    593c:	aa                   	stos   %al,%es:(%rdi)
    593d:	aa                   	stos   %al,%es:(%rdi)
    593e:	aa                   	stos   %al,%es:(%rdi)
    593f:	aa                   	stos   %al,%es:(%rdi)
    5940:	aa                   	stos   %al,%es:(%rdi)
    5941:	aa                   	stos   %al,%es:(%rdi)
    5942:	aa                   	stos   %al,%es:(%rdi)
    5943:	aa                   	stos   %al,%es:(%rdi)
    5944:	aa                   	stos   %al,%es:(%rdi)
    5945:	aa                   	stos   %al,%es:(%rdi)
    5946:	aa                   	stos   %al,%es:(%rdi)
    5947:	aa                   	stos   %al,%es:(%rdi)
    5948:	aa                   	stos   %al,%es:(%rdi)
    5949:	aa                   	stos   %al,%es:(%rdi)
    594a:	aa                   	stos   %al,%es:(%rdi)
    594b:	aa                   	stos   %al,%es:(%rdi)
    594c:	aa                   	stos   %al,%es:(%rdi)
    594d:	aa                   	stos   %al,%es:(%rdi)
    594e:	aa                   	stos   %al,%es:(%rdi)
    594f:	aa                   	stos   %al,%es:(%rdi)
    5950:	aa                   	stos   %al,%es:(%rdi)
    5951:	aa                   	stos   %al,%es:(%rdi)
    5952:	aa                   	stos   %al,%es:(%rdi)
    5953:	aa                   	stos   %al,%es:(%rdi)
    5954:	aa                   	stos   %al,%es:(%rdi)
    5955:	aa                   	stos   %al,%es:(%rdi)
    5956:	aa                   	stos   %al,%es:(%rdi)
    5957:	aa                   	stos   %al,%es:(%rdi)
    5958:	aa                   	stos   %al,%es:(%rdi)
    5959:	aa                   	stos   %al,%es:(%rdi)
    595a:	aa                   	stos   %al,%es:(%rdi)
    595b:	aa                   	stos   %al,%es:(%rdi)
    595c:	aa                   	stos   %al,%es:(%rdi)
    595d:	aa                   	stos   %al,%es:(%rdi)
    595e:	aa                   	stos   %al,%es:(%rdi)
    595f:	aa                   	stos   %al,%es:(%rdi)
    5960:	aa                   	stos   %al,%es:(%rdi)
    5961:	aa                   	stos   %al,%es:(%rdi)
    5962:	aa                   	stos   %al,%es:(%rdi)
    5963:	aa                   	stos   %al,%es:(%rdi)
    5964:	aa                   	stos   %al,%es:(%rdi)
    5965:	aa                   	stos   %al,%es:(%rdi)
    5966:	aa                   	stos   %al,%es:(%rdi)
    5967:	aa                   	stos   %al,%es:(%rdi)
    5968:	aa                   	stos   %al,%es:(%rdi)
    5969:	aa                   	stos   %al,%es:(%rdi)
    596a:	aa                   	stos   %al,%es:(%rdi)
    596b:	aa                   	stos   %al,%es:(%rdi)
    596c:	aa                   	stos   %al,%es:(%rdi)
    596d:	aa                   	stos   %al,%es:(%rdi)
    596e:	aa                   	stos   %al,%es:(%rdi)
    596f:	aa                   	stos   %al,%es:(%rdi)
    5970:	aa                   	stos   %al,%es:(%rdi)
    5971:	aa                   	stos   %al,%es:(%rdi)
    5972:	aa                   	stos   %al,%es:(%rdi)
    5973:	aa                   	stos   %al,%es:(%rdi)
    5974:	aa                   	stos   %al,%es:(%rdi)
    5975:	aa                   	stos   %al,%es:(%rdi)
    5976:	aa                   	stos   %al,%es:(%rdi)
    5977:	aa                   	stos   %al,%es:(%rdi)
    5978:	aa                   	stos   %al,%es:(%rdi)
    5979:	aa                   	stos   %al,%es:(%rdi)
    597a:	aa                   	stos   %al,%es:(%rdi)
    597b:	aa                   	stos   %al,%es:(%rdi)
    597c:	aa                   	stos   %al,%es:(%rdi)
    597d:	aa                   	stos   %al,%es:(%rdi)
    597e:	aa                   	stos   %al,%es:(%rdi)
    597f:	aa                   	stos   %al,%es:(%rdi)
    5980:	aa                   	stos   %al,%es:(%rdi)
    5981:	aa                   	stos   %al,%es:(%rdi)
    5982:	aa                   	stos   %al,%es:(%rdi)
    5983:	aa                   	stos   %al,%es:(%rdi)
    5984:	aa                   	stos   %al,%es:(%rdi)
    5985:	aa                   	stos   %al,%es:(%rdi)
    5986:	aa                   	stos   %al,%es:(%rdi)
    5987:	aa                   	stos   %al,%es:(%rdi)
    5988:	aa                   	stos   %al,%es:(%rdi)
    5989:	aa                   	stos   %al,%es:(%rdi)
    598a:	aa                   	stos   %al,%es:(%rdi)
    598b:	aa                   	stos   %al,%es:(%rdi)
    598c:	aa                   	stos   %al,%es:(%rdi)
    598d:	aa                   	stos   %al,%es:(%rdi)
    598e:	aa                   	stos   %al,%es:(%rdi)
    598f:	aa                   	stos   %al,%es:(%rdi)
    5990:	aa                   	stos   %al,%es:(%rdi)
    5991:	aa                   	stos   %al,%es:(%rdi)
    5992:	aa                   	stos   %al,%es:(%rdi)
    5993:	aa                   	stos   %al,%es:(%rdi)
    5994:	aa                   	stos   %al,%es:(%rdi)
    5995:	aa                   	stos   %al,%es:(%rdi)
    5996:	aa                   	stos   %al,%es:(%rdi)
    5997:	aa                   	stos   %al,%es:(%rdi)
    5998:	aa                   	stos   %al,%es:(%rdi)
    5999:	aa                   	stos   %al,%es:(%rdi)
    599a:	aa                   	stos   %al,%es:(%rdi)
    599b:	aa                   	stos   %al,%es:(%rdi)
    599c:	aa                   	stos   %al,%es:(%rdi)
    599d:	aa                   	stos   %al,%es:(%rdi)
    599e:	aa                   	stos   %al,%es:(%rdi)
    599f:	aa                   	stos   %al,%es:(%rdi)
    59a0:	aa                   	stos   %al,%es:(%rdi)
    59a1:	aa                   	stos   %al,%es:(%rdi)
    59a2:	aa                   	stos   %al,%es:(%rdi)
    59a3:	aa                   	stos   %al,%es:(%rdi)
    59a4:	aa                   	stos   %al,%es:(%rdi)
    59a5:	aa                   	stos   %al,%es:(%rdi)
    59a6:	aa                   	stos   %al,%es:(%rdi)
    59a7:	aa                   	stos   %al,%es:(%rdi)
    59a8:	aa                   	stos   %al,%es:(%rdi)
    59a9:	aa                   	stos   %al,%es:(%rdi)
    59aa:	aa                   	stos   %al,%es:(%rdi)
    59ab:	aa                   	stos   %al,%es:(%rdi)
    59ac:	aa                   	stos   %al,%es:(%rdi)
    59ad:	aa                   	stos   %al,%es:(%rdi)
    59ae:	aa                   	stos   %al,%es:(%rdi)
    59af:	aa                   	stos   %al,%es:(%rdi)
    59b0:	aa                   	stos   %al,%es:(%rdi)
    59b1:	aa                   	stos   %al,%es:(%rdi)
    59b2:	aa                   	stos   %al,%es:(%rdi)
    59b3:	aa                   	stos   %al,%es:(%rdi)
    59b4:	aa                   	stos   %al,%es:(%rdi)
    59b5:	aa                   	stos   %al,%es:(%rdi)
    59b6:	aa                   	stos   %al,%es:(%rdi)
    59b7:	aa                   	stos   %al,%es:(%rdi)
    59b8:	aa                   	stos   %al,%es:(%rdi)
    59b9:	aa                   	stos   %al,%es:(%rdi)
    59ba:	aa                   	stos   %al,%es:(%rdi)
    59bb:	aa                   	stos   %al,%es:(%rdi)
    59bc:	aa                   	stos   %al,%es:(%rdi)
    59bd:	aa                   	stos   %al,%es:(%rdi)
    59be:	aa                   	stos   %al,%es:(%rdi)
    59bf:	aa                   	stos   %al,%es:(%rdi)
    59c0:	aa                   	stos   %al,%es:(%rdi)
    59c1:	aa                   	stos   %al,%es:(%rdi)
    59c2:	aa                   	stos   %al,%es:(%rdi)
    59c3:	aa                   	stos   %al,%es:(%rdi)
    59c4:	aa                   	stos   %al,%es:(%rdi)
    59c5:	aa                   	stos   %al,%es:(%rdi)
    59c6:	aa                   	stos   %al,%es:(%rdi)
    59c7:	aa                   	stos   %al,%es:(%rdi)
    59c8:	aa                   	stos   %al,%es:(%rdi)
    59c9:	aa                   	stos   %al,%es:(%rdi)
    59ca:	aa                   	stos   %al,%es:(%rdi)
    59cb:	aa                   	stos   %al,%es:(%rdi)
    59cc:	aa                   	stos   %al,%es:(%rdi)
    59cd:	aa                   	stos   %al,%es:(%rdi)
    59ce:	aa                   	stos   %al,%es:(%rdi)
    59cf:	aa                   	stos   %al,%es:(%rdi)
    59d0:	aa                   	stos   %al,%es:(%rdi)
    59d1:	aa                   	stos   %al,%es:(%rdi)
    59d2:	aa                   	stos   %al,%es:(%rdi)
    59d3:	aa                   	stos   %al,%es:(%rdi)
    59d4:	aa                   	stos   %al,%es:(%rdi)
    59d5:	aa                   	stos   %al,%es:(%rdi)
    59d6:	aa                   	stos   %al,%es:(%rdi)
    59d7:	aa                   	stos   %al,%es:(%rdi)
    59d8:	aa                   	stos   %al,%es:(%rdi)
    59d9:	aa                   	stos   %al,%es:(%rdi)
    59da:	aa                   	stos   %al,%es:(%rdi)
    59db:	aa                   	stos   %al,%es:(%rdi)
    59dc:	aa                   	stos   %al,%es:(%rdi)
    59dd:	aa                   	stos   %al,%es:(%rdi)
    59de:	aa                   	stos   %al,%es:(%rdi)
    59df:	aa                   	stos   %al,%es:(%rdi)
    59e0:	aa                   	stos   %al,%es:(%rdi)
    59e1:	aa                   	stos   %al,%es:(%rdi)
    59e2:	aa                   	stos   %al,%es:(%rdi)
    59e3:	aa                   	stos   %al,%es:(%rdi)
    59e4:	aa                   	stos   %al,%es:(%rdi)
    59e5:	aa                   	stos   %al,%es:(%rdi)
    59e6:	aa                   	stos   %al,%es:(%rdi)
    59e7:	aa                   	stos   %al,%es:(%rdi)
    59e8:	aa                   	stos   %al,%es:(%rdi)
    59e9:	aa                   	stos   %al,%es:(%rdi)
    59ea:	aa                   	stos   %al,%es:(%rdi)
    59eb:	aa                   	stos   %al,%es:(%rdi)
    59ec:	aa                   	stos   %al,%es:(%rdi)
    59ed:	aa                   	stos   %al,%es:(%rdi)
    59ee:	aa                   	stos   %al,%es:(%rdi)
    59ef:	aa                   	stos   %al,%es:(%rdi)
    59f0:	aa                   	stos   %al,%es:(%rdi)
    59f1:	aa                   	stos   %al,%es:(%rdi)
    59f2:	aa                   	stos   %al,%es:(%rdi)
    59f3:	aa                   	stos   %al,%es:(%rdi)
    59f4:	aa                   	stos   %al,%es:(%rdi)
    59f5:	aa                   	stos   %al,%es:(%rdi)
    59f6:	aa                   	stos   %al,%es:(%rdi)
    59f7:	aa                   	stos   %al,%es:(%rdi)
    59f8:	aa                   	stos   %al,%es:(%rdi)
    59f9:	aa                   	stos   %al,%es:(%rdi)
    59fa:	aa                   	stos   %al,%es:(%rdi)
    59fb:	aa                   	stos   %al,%es:(%rdi)
    59fc:	aa                   	stos   %al,%es:(%rdi)
    59fd:	aa                   	stos   %al,%es:(%rdi)
    59fe:	aa                   	stos   %al,%es:(%rdi)
    59ff:	aa                   	stos   %al,%es:(%rdi)
    5a00:	aa                   	stos   %al,%es:(%rdi)
    5a01:	aa                   	stos   %al,%es:(%rdi)
    5a02:	aa                   	stos   %al,%es:(%rdi)
    5a03:	aa                   	stos   %al,%es:(%rdi)
    5a04:	aa                   	stos   %al,%es:(%rdi)
    5a05:	aa                   	stos   %al,%es:(%rdi)
    5a06:	aa                   	stos   %al,%es:(%rdi)
    5a07:	aa                   	stos   %al,%es:(%rdi)
    5a08:	aa                   	stos   %al,%es:(%rdi)
    5a09:	aa                   	stos   %al,%es:(%rdi)
    5a0a:	aa                   	stos   %al,%es:(%rdi)
    5a0b:	aa                   	stos   %al,%es:(%rdi)
    5a0c:	aa                   	stos   %al,%es:(%rdi)
    5a0d:	aa                   	stos   %al,%es:(%rdi)
    5a0e:	aa                   	stos   %al,%es:(%rdi)
    5a0f:	aa                   	stos   %al,%es:(%rdi)
    5a10:	aa                   	stos   %al,%es:(%rdi)
    5a11:	aa                   	stos   %al,%es:(%rdi)
    5a12:	aa                   	stos   %al,%es:(%rdi)
    5a13:	aa                   	stos   %al,%es:(%rdi)
    5a14:	aa                   	stos   %al,%es:(%rdi)
    5a15:	aa                   	stos   %al,%es:(%rdi)
    5a16:	aa                   	stos   %al,%es:(%rdi)
    5a17:	aa                   	stos   %al,%es:(%rdi)
    5a18:	aa                   	stos   %al,%es:(%rdi)
    5a19:	aa                   	stos   %al,%es:(%rdi)
    5a1a:	aa                   	stos   %al,%es:(%rdi)
    5a1b:	aa                   	stos   %al,%es:(%rdi)
    5a1c:	aa                   	stos   %al,%es:(%rdi)
    5a1d:	aa                   	stos   %al,%es:(%rdi)
    5a1e:	aa                   	stos   %al,%es:(%rdi)
    5a1f:	aa                   	stos   %al,%es:(%rdi)
    5a20:	aa                   	stos   %al,%es:(%rdi)
    5a21:	aa                   	stos   %al,%es:(%rdi)
    5a22:	aa                   	stos   %al,%es:(%rdi)
    5a23:	aa                   	stos   %al,%es:(%rdi)
    5a24:	aa                   	stos   %al,%es:(%rdi)
    5a25:	aa                   	stos   %al,%es:(%rdi)
    5a26:	aa                   	stos   %al,%es:(%rdi)
    5a27:	aa                   	stos   %al,%es:(%rdi)
    5a28:	aa                   	stos   %al,%es:(%rdi)
    5a29:	aa                   	stos   %al,%es:(%rdi)
    5a2a:	aa                   	stos   %al,%es:(%rdi)
    5a2b:	aa                   	stos   %al,%es:(%rdi)
    5a2c:	aa                   	stos   %al,%es:(%rdi)
    5a2d:	aa                   	stos   %al,%es:(%rdi)
    5a2e:	aa                   	stos   %al,%es:(%rdi)
    5a2f:	aa                   	stos   %al,%es:(%rdi)
    5a30:	aa                   	stos   %al,%es:(%rdi)
    5a31:	aa                   	stos   %al,%es:(%rdi)
    5a32:	aa                   	stos   %al,%es:(%rdi)
    5a33:	aa                   	stos   %al,%es:(%rdi)
    5a34:	aa                   	stos   %al,%es:(%rdi)
    5a35:	aa                   	stos   %al,%es:(%rdi)
    5a36:	aa                   	stos   %al,%es:(%rdi)
    5a37:	aa                   	stos   %al,%es:(%rdi)
    5a38:	aa                   	stos   %al,%es:(%rdi)
    5a39:	aa                   	stos   %al,%es:(%rdi)
    5a3a:	aa                   	stos   %al,%es:(%rdi)
    5a3b:	aa                   	stos   %al,%es:(%rdi)
    5a3c:	aa                   	stos   %al,%es:(%rdi)
    5a3d:	aa                   	stos   %al,%es:(%rdi)
    5a3e:	aa                   	stos   %al,%es:(%rdi)
    5a3f:	aa                   	stos   %al,%es:(%rdi)
    5a40:	aa                   	stos   %al,%es:(%rdi)
    5a41:	aa                   	stos   %al,%es:(%rdi)
    5a42:	aa                   	stos   %al,%es:(%rdi)
    5a43:	aa                   	stos   %al,%es:(%rdi)
    5a44:	aa                   	stos   %al,%es:(%rdi)
    5a45:	aa                   	stos   %al,%es:(%rdi)
    5a46:	aa                   	stos   %al,%es:(%rdi)
    5a47:	aa                   	stos   %al,%es:(%rdi)
    5a48:	aa                   	stos   %al,%es:(%rdi)
    5a49:	aa                   	stos   %al,%es:(%rdi)
    5a4a:	aa                   	stos   %al,%es:(%rdi)
    5a4b:	aa                   	stos   %al,%es:(%rdi)
    5a4c:	aa                   	stos   %al,%es:(%rdi)
    5a4d:	aa                   	stos   %al,%es:(%rdi)
    5a4e:	aa                   	stos   %al,%es:(%rdi)
    5a4f:	aa                   	stos   %al,%es:(%rdi)
    5a50:	aa                   	stos   %al,%es:(%rdi)
    5a51:	aa                   	stos   %al,%es:(%rdi)
    5a52:	aa                   	stos   %al,%es:(%rdi)
    5a53:	aa                   	stos   %al,%es:(%rdi)
    5a54:	aa                   	stos   %al,%es:(%rdi)
    5a55:	aa                   	stos   %al,%es:(%rdi)
    5a56:	aa                   	stos   %al,%es:(%rdi)
    5a57:	aa                   	stos   %al,%es:(%rdi)
    5a58:	aa                   	stos   %al,%es:(%rdi)
    5a59:	aa                   	stos   %al,%es:(%rdi)
    5a5a:	aa                   	stos   %al,%es:(%rdi)
    5a5b:	aa                   	stos   %al,%es:(%rdi)
    5a5c:	aa                   	stos   %al,%es:(%rdi)
    5a5d:	aa                   	stos   %al,%es:(%rdi)
    5a5e:	aa                   	stos   %al,%es:(%rdi)
    5a5f:	aa                   	stos   %al,%es:(%rdi)
    5a60:	aa                   	stos   %al,%es:(%rdi)
    5a61:	aa                   	stos   %al,%es:(%rdi)
    5a62:	aa                   	stos   %al,%es:(%rdi)
    5a63:	aa                   	stos   %al,%es:(%rdi)
    5a64:	aa                   	stos   %al,%es:(%rdi)
    5a65:	aa                   	stos   %al,%es:(%rdi)
    5a66:	aa                   	stos   %al,%es:(%rdi)
    5a67:	aa                   	stos   %al,%es:(%rdi)
    5a68:	aa                   	stos   %al,%es:(%rdi)
    5a69:	aa                   	stos   %al,%es:(%rdi)
    5a6a:	aa                   	stos   %al,%es:(%rdi)
    5a6b:	aa                   	stos   %al,%es:(%rdi)
    5a6c:	aa                   	stos   %al,%es:(%rdi)
    5a6d:	aa                   	stos   %al,%es:(%rdi)
    5a6e:	aa                   	stos   %al,%es:(%rdi)
    5a6f:	aa                   	stos   %al,%es:(%rdi)
    5a70:	aa                   	stos   %al,%es:(%rdi)
    5a71:	aa                   	stos   %al,%es:(%rdi)
    5a72:	aa                   	stos   %al,%es:(%rdi)
    5a73:	aa                   	stos   %al,%es:(%rdi)
    5a74:	aa                   	stos   %al,%es:(%rdi)
    5a75:	aa                   	stos   %al,%es:(%rdi)
    5a76:	aa                   	stos   %al,%es:(%rdi)
    5a77:	aa                   	stos   %al,%es:(%rdi)
    5a78:	aa                   	stos   %al,%es:(%rdi)
    5a79:	aa                   	stos   %al,%es:(%rdi)
    5a7a:	aa                   	stos   %al,%es:(%rdi)
    5a7b:	aa                   	stos   %al,%es:(%rdi)
    5a7c:	aa                   	stos   %al,%es:(%rdi)
    5a7d:	aa                   	stos   %al,%es:(%rdi)
    5a7e:	aa                   	stos   %al,%es:(%rdi)
    5a7f:	aa                   	stos   %al,%es:(%rdi)
    5a80:	aa                   	stos   %al,%es:(%rdi)
    5a81:	aa                   	stos   %al,%es:(%rdi)
    5a82:	aa                   	stos   %al,%es:(%rdi)
    5a83:	aa                   	stos   %al,%es:(%rdi)
    5a84:	aa                   	stos   %al,%es:(%rdi)
    5a85:	aa                   	stos   %al,%es:(%rdi)
    5a86:	aa                   	stos   %al,%es:(%rdi)
    5a87:	aa                   	stos   %al,%es:(%rdi)
    5a88:	aa                   	stos   %al,%es:(%rdi)
    5a89:	aa                   	stos   %al,%es:(%rdi)
    5a8a:	aa                   	stos   %al,%es:(%rdi)
    5a8b:	aa                   	stos   %al,%es:(%rdi)
    5a8c:	aa                   	stos   %al,%es:(%rdi)
    5a8d:	aa                   	stos   %al,%es:(%rdi)
    5a8e:	aa                   	stos   %al,%es:(%rdi)
    5a8f:	aa                   	stos   %al,%es:(%rdi)
    5a90:	aa                   	stos   %al,%es:(%rdi)
    5a91:	aa                   	stos   %al,%es:(%rdi)
    5a92:	aa                   	stos   %al,%es:(%rdi)
    5a93:	aa                   	stos   %al,%es:(%rdi)
    5a94:	aa                   	stos   %al,%es:(%rdi)
    5a95:	aa                   	stos   %al,%es:(%rdi)
    5a96:	aa                   	stos   %al,%es:(%rdi)
    5a97:	aa                   	stos   %al,%es:(%rdi)
    5a98:	aa                   	stos   %al,%es:(%rdi)
    5a99:	aa                   	stos   %al,%es:(%rdi)
    5a9a:	aa                   	stos   %al,%es:(%rdi)
    5a9b:	aa                   	stos   %al,%es:(%rdi)
    5a9c:	aa                   	stos   %al,%es:(%rdi)
    5a9d:	aa                   	stos   %al,%es:(%rdi)
    5a9e:	aa                   	stos   %al,%es:(%rdi)
    5a9f:	aa                   	stos   %al,%es:(%rdi)
    5aa0:	aa                   	stos   %al,%es:(%rdi)
    5aa1:	aa                   	stos   %al,%es:(%rdi)
    5aa2:	aa                   	stos   %al,%es:(%rdi)
    5aa3:	aa                   	stos   %al,%es:(%rdi)
    5aa4:	aa                   	stos   %al,%es:(%rdi)
    5aa5:	aa                   	stos   %al,%es:(%rdi)
    5aa6:	aa                   	stos   %al,%es:(%rdi)
    5aa7:	aa                   	stos   %al,%es:(%rdi)
    5aa8:	aa                   	stos   %al,%es:(%rdi)
    5aa9:	aa                   	stos   %al,%es:(%rdi)
    5aaa:	aa                   	stos   %al,%es:(%rdi)
    5aab:	aa                   	stos   %al,%es:(%rdi)
    5aac:	aa                   	stos   %al,%es:(%rdi)
    5aad:	aa                   	stos   %al,%es:(%rdi)
    5aae:	aa                   	stos   %al,%es:(%rdi)
    5aaf:	aa                   	stos   %al,%es:(%rdi)
    5ab0:	aa                   	stos   %al,%es:(%rdi)
    5ab1:	aa                   	stos   %al,%es:(%rdi)
    5ab2:	aa                   	stos   %al,%es:(%rdi)
    5ab3:	aa                   	stos   %al,%es:(%rdi)
    5ab4:	aa                   	stos   %al,%es:(%rdi)
    5ab5:	aa                   	stos   %al,%es:(%rdi)
    5ab6:	aa                   	stos   %al,%es:(%rdi)
    5ab7:	aa                   	stos   %al,%es:(%rdi)
    5ab8:	aa                   	stos   %al,%es:(%rdi)
    5ab9:	aa                   	stos   %al,%es:(%rdi)
    5aba:	aa                   	stos   %al,%es:(%rdi)
    5abb:	aa                   	stos   %al,%es:(%rdi)
    5abc:	aa                   	stos   %al,%es:(%rdi)
    5abd:	aa                   	stos   %al,%es:(%rdi)
    5abe:	aa                   	stos   %al,%es:(%rdi)
    5abf:	aa                   	stos   %al,%es:(%rdi)
    5ac0:	aa                   	stos   %al,%es:(%rdi)
    5ac1:	aa                   	stos   %al,%es:(%rdi)
    5ac2:	aa                   	stos   %al,%es:(%rdi)
    5ac3:	aa                   	stos   %al,%es:(%rdi)
    5ac4:	aa                   	stos   %al,%es:(%rdi)
    5ac5:	aa                   	stos   %al,%es:(%rdi)
    5ac6:	aa                   	stos   %al,%es:(%rdi)
    5ac7:	aa                   	stos   %al,%es:(%rdi)
    5ac8:	aa                   	stos   %al,%es:(%rdi)
    5ac9:	aa                   	stos   %al,%es:(%rdi)
    5aca:	aa                   	stos   %al,%es:(%rdi)
    5acb:	aa                   	stos   %al,%es:(%rdi)
    5acc:	aa                   	stos   %al,%es:(%rdi)
    5acd:	aa                   	stos   %al,%es:(%rdi)
    5ace:	aa                   	stos   %al,%es:(%rdi)
    5acf:	aa                   	stos   %al,%es:(%rdi)
    5ad0:	aa                   	stos   %al,%es:(%rdi)
    5ad1:	aa                   	stos   %al,%es:(%rdi)
    5ad2:	aa                   	stos   %al,%es:(%rdi)
    5ad3:	aa                   	stos   %al,%es:(%rdi)
    5ad4:	aa                   	stos   %al,%es:(%rdi)
    5ad5:	aa                   	stos   %al,%es:(%rdi)
    5ad6:	aa                   	stos   %al,%es:(%rdi)
    5ad7:	aa                   	stos   %al,%es:(%rdi)
    5ad8:	aa                   	stos   %al,%es:(%rdi)
    5ad9:	aa                   	stos   %al,%es:(%rdi)
    5ada:	aa                   	stos   %al,%es:(%rdi)
    5adb:	aa                   	stos   %al,%es:(%rdi)
    5adc:	aa                   	stos   %al,%es:(%rdi)
    5add:	aa                   	stos   %al,%es:(%rdi)
    5ade:	aa                   	stos   %al,%es:(%rdi)
    5adf:	aa                   	stos   %al,%es:(%rdi)
    5ae0:	aa                   	stos   %al,%es:(%rdi)
    5ae1:	aa                   	stos   %al,%es:(%rdi)
    5ae2:	aa                   	stos   %al,%es:(%rdi)
    5ae3:	aa                   	stos   %al,%es:(%rdi)
    5ae4:	aa                   	stos   %al,%es:(%rdi)
    5ae5:	aa                   	stos   %al,%es:(%rdi)
    5ae6:	aa                   	stos   %al,%es:(%rdi)
    5ae7:	aa                   	stos   %al,%es:(%rdi)
    5ae8:	aa                   	stos   %al,%es:(%rdi)
    5ae9:	aa                   	stos   %al,%es:(%rdi)
    5aea:	aa                   	stos   %al,%es:(%rdi)
    5aeb:	aa                   	stos   %al,%es:(%rdi)
    5aec:	aa                   	stos   %al,%es:(%rdi)
    5aed:	aa                   	stos   %al,%es:(%rdi)
    5aee:	aa                   	stos   %al,%es:(%rdi)
    5aef:	aa                   	stos   %al,%es:(%rdi)
    5af0:	aa                   	stos   %al,%es:(%rdi)
    5af1:	aa                   	stos   %al,%es:(%rdi)
    5af2:	aa                   	stos   %al,%es:(%rdi)
    5af3:	aa                   	stos   %al,%es:(%rdi)
    5af4:	aa                   	stos   %al,%es:(%rdi)
    5af5:	aa                   	stos   %al,%es:(%rdi)
    5af6:	aa                   	stos   %al,%es:(%rdi)
    5af7:	aa                   	stos   %al,%es:(%rdi)
    5af8:	aa                   	stos   %al,%es:(%rdi)
    5af9:	aa                   	stos   %al,%es:(%rdi)
    5afa:	aa                   	stos   %al,%es:(%rdi)
    5afb:	aa                   	stos   %al,%es:(%rdi)
    5afc:	aa                   	stos   %al,%es:(%rdi)
    5afd:	aa                   	stos   %al,%es:(%rdi)
    5afe:	aa                   	stos   %al,%es:(%rdi)
    5aff:	aa                   	stos   %al,%es:(%rdi)
    5b00:	aa                   	stos   %al,%es:(%rdi)
    5b01:	aa                   	stos   %al,%es:(%rdi)
    5b02:	aa                   	stos   %al,%es:(%rdi)
    5b03:	aa                   	stos   %al,%es:(%rdi)
    5b04:	aa                   	stos   %al,%es:(%rdi)
    5b05:	aa                   	stos   %al,%es:(%rdi)
    5b06:	aa                   	stos   %al,%es:(%rdi)
    5b07:	aa                   	stos   %al,%es:(%rdi)
    5b08:	aa                   	stos   %al,%es:(%rdi)
    5b09:	aa                   	stos   %al,%es:(%rdi)
    5b0a:	aa                   	stos   %al,%es:(%rdi)
    5b0b:	aa                   	stos   %al,%es:(%rdi)
    5b0c:	aa                   	stos   %al,%es:(%rdi)
    5b0d:	aa                   	stos   %al,%es:(%rdi)
    5b0e:	aa                   	stos   %al,%es:(%rdi)
    5b0f:	aa                   	stos   %al,%es:(%rdi)
    5b10:	aa                   	stos   %al,%es:(%rdi)
    5b11:	aa                   	stos   %al,%es:(%rdi)
    5b12:	aa                   	stos   %al,%es:(%rdi)
    5b13:	aa                   	stos   %al,%es:(%rdi)
    5b14:	aa                   	stos   %al,%es:(%rdi)
    5b15:	aa                   	stos   %al,%es:(%rdi)
    5b16:	aa                   	stos   %al,%es:(%rdi)
    5b17:	aa                   	stos   %al,%es:(%rdi)
    5b18:	aa                   	stos   %al,%es:(%rdi)
    5b19:	aa                   	stos   %al,%es:(%rdi)
    5b1a:	aa                   	stos   %al,%es:(%rdi)
    5b1b:	aa                   	stos   %al,%es:(%rdi)
    5b1c:	aa                   	stos   %al,%es:(%rdi)
    5b1d:	aa                   	stos   %al,%es:(%rdi)
    5b1e:	aa                   	stos   %al,%es:(%rdi)
    5b1f:	aa                   	stos   %al,%es:(%rdi)
    5b20:	aa                   	stos   %al,%es:(%rdi)
    5b21:	aa                   	stos   %al,%es:(%rdi)
    5b22:	aa                   	stos   %al,%es:(%rdi)
    5b23:	aa                   	stos   %al,%es:(%rdi)
    5b24:	aa                   	stos   %al,%es:(%rdi)
    5b25:	aa                   	stos   %al,%es:(%rdi)
    5b26:	aa                   	stos   %al,%es:(%rdi)
    5b27:	aa                   	stos   %al,%es:(%rdi)
    5b28:	aa                   	stos   %al,%es:(%rdi)
    5b29:	aa                   	stos   %al,%es:(%rdi)
    5b2a:	aa                   	stos   %al,%es:(%rdi)
    5b2b:	aa                   	stos   %al,%es:(%rdi)
    5b2c:	aa                   	stos   %al,%es:(%rdi)
    5b2d:	aa                   	stos   %al,%es:(%rdi)
    5b2e:	aa                   	stos   %al,%es:(%rdi)
    5b2f:	aa                   	stos   %al,%es:(%rdi)
    5b30:	aa                   	stos   %al,%es:(%rdi)
    5b31:	aa                   	stos   %al,%es:(%rdi)
    5b32:	aa                   	stos   %al,%es:(%rdi)
    5b33:	aa                   	stos   %al,%es:(%rdi)
    5b34:	aa                   	stos   %al,%es:(%rdi)
    5b35:	aa                   	stos   %al,%es:(%rdi)
    5b36:	aa                   	stos   %al,%es:(%rdi)
    5b37:	aa                   	stos   %al,%es:(%rdi)
    5b38:	aa                   	stos   %al,%es:(%rdi)
    5b39:	aa                   	stos   %al,%es:(%rdi)
    5b3a:	aa                   	stos   %al,%es:(%rdi)
    5b3b:	aa                   	stos   %al,%es:(%rdi)
    5b3c:	aa                   	stos   %al,%es:(%rdi)
    5b3d:	aa                   	stos   %al,%es:(%rdi)
    5b3e:	aa                   	stos   %al,%es:(%rdi)
    5b3f:	aa                   	stos   %al,%es:(%rdi)
    5b40:	aa                   	stos   %al,%es:(%rdi)
    5b41:	aa                   	stos   %al,%es:(%rdi)
    5b42:	aa                   	stos   %al,%es:(%rdi)
    5b43:	aa                   	stos   %al,%es:(%rdi)
    5b44:	aa                   	stos   %al,%es:(%rdi)
    5b45:	aa                   	stos   %al,%es:(%rdi)
    5b46:	aa                   	stos   %al,%es:(%rdi)
    5b47:	aa                   	stos   %al,%es:(%rdi)
    5b48:	aa                   	stos   %al,%es:(%rdi)
    5b49:	aa                   	stos   %al,%es:(%rdi)
    5b4a:	aa                   	stos   %al,%es:(%rdi)
    5b4b:	aa                   	stos   %al,%es:(%rdi)
    5b4c:	aa                   	stos   %al,%es:(%rdi)
    5b4d:	aa                   	stos   %al,%es:(%rdi)
    5b4e:	aa                   	stos   %al,%es:(%rdi)
    5b4f:	aa                   	stos   %al,%es:(%rdi)
    5b50:	aa                   	stos   %al,%es:(%rdi)
    5b51:	aa                   	stos   %al,%es:(%rdi)
    5b52:	aa                   	stos   %al,%es:(%rdi)
    5b53:	aa                   	stos   %al,%es:(%rdi)
    5b54:	aa                   	stos   %al,%es:(%rdi)
    5b55:	aa                   	stos   %al,%es:(%rdi)
    5b56:	aa                   	stos   %al,%es:(%rdi)
    5b57:	aa                   	stos   %al,%es:(%rdi)
    5b58:	aa                   	stos   %al,%es:(%rdi)
    5b59:	aa                   	stos   %al,%es:(%rdi)
    5b5a:	aa                   	stos   %al,%es:(%rdi)
    5b5b:	aa                   	stos   %al,%es:(%rdi)
    5b5c:	aa                   	stos   %al,%es:(%rdi)
    5b5d:	aa                   	stos   %al,%es:(%rdi)
    5b5e:	aa                   	stos   %al,%es:(%rdi)
    5b5f:	aa                   	stos   %al,%es:(%rdi)
    5b60:	aa                   	stos   %al,%es:(%rdi)
    5b61:	aa                   	stos   %al,%es:(%rdi)
    5b62:	aa                   	stos   %al,%es:(%rdi)
    5b63:	aa                   	stos   %al,%es:(%rdi)
    5b64:	aa                   	stos   %al,%es:(%rdi)
    5b65:	aa                   	stos   %al,%es:(%rdi)
    5b66:	aa                   	stos   %al,%es:(%rdi)
    5b67:	aa                   	stos   %al,%es:(%rdi)
    5b68:	aa                   	stos   %al,%es:(%rdi)
    5b69:	aa                   	stos   %al,%es:(%rdi)
    5b6a:	aa                   	stos   %al,%es:(%rdi)
    5b6b:	aa                   	stos   %al,%es:(%rdi)
    5b6c:	aa                   	stos   %al,%es:(%rdi)
    5b6d:	aa                   	stos   %al,%es:(%rdi)
    5b6e:	aa                   	stos   %al,%es:(%rdi)
    5b6f:	aa                   	stos   %al,%es:(%rdi)
    5b70:	aa                   	stos   %al,%es:(%rdi)
    5b71:	aa                   	stos   %al,%es:(%rdi)
    5b72:	aa                   	stos   %al,%es:(%rdi)
    5b73:	aa                   	stos   %al,%es:(%rdi)
    5b74:	aa                   	stos   %al,%es:(%rdi)
    5b75:	aa                   	stos   %al,%es:(%rdi)
    5b76:	aa                   	stos   %al,%es:(%rdi)
    5b77:	aa                   	stos   %al,%es:(%rdi)
    5b78:	aa                   	stos   %al,%es:(%rdi)
    5b79:	aa                   	stos   %al,%es:(%rdi)
    5b7a:	aa                   	stos   %al,%es:(%rdi)
    5b7b:	aa                   	stos   %al,%es:(%rdi)
    5b7c:	aa                   	stos   %al,%es:(%rdi)
    5b7d:	aa                   	stos   %al,%es:(%rdi)
    5b7e:	aa                   	stos   %al,%es:(%rdi)
    5b7f:	aa                   	stos   %al,%es:(%rdi)
    5b80:	aa                   	stos   %al,%es:(%rdi)
    5b81:	aa                   	stos   %al,%es:(%rdi)
    5b82:	aa                   	stos   %al,%es:(%rdi)
    5b83:	aa                   	stos   %al,%es:(%rdi)
    5b84:	aa                   	stos   %al,%es:(%rdi)
    5b85:	aa                   	stos   %al,%es:(%rdi)
    5b86:	aa                   	stos   %al,%es:(%rdi)
    5b87:	aa                   	stos   %al,%es:(%rdi)
    5b88:	aa                   	stos   %al,%es:(%rdi)
    5b89:	aa                   	stos   %al,%es:(%rdi)
    5b8a:	aa                   	stos   %al,%es:(%rdi)
    5b8b:	aa                   	stos   %al,%es:(%rdi)
    5b8c:	aa                   	stos   %al,%es:(%rdi)
    5b8d:	aa                   	stos   %al,%es:(%rdi)
    5b8e:	aa                   	stos   %al,%es:(%rdi)
    5b8f:	aa                   	stos   %al,%es:(%rdi)
    5b90:	aa                   	stos   %al,%es:(%rdi)
    5b91:	aa                   	stos   %al,%es:(%rdi)
    5b92:	aa                   	stos   %al,%es:(%rdi)
    5b93:	aa                   	stos   %al,%es:(%rdi)
    5b94:	aa                   	stos   %al,%es:(%rdi)
    5b95:	aa                   	stos   %al,%es:(%rdi)
    5b96:	aa                   	stos   %al,%es:(%rdi)
    5b97:	aa                   	stos   %al,%es:(%rdi)
    5b98:	aa                   	stos   %al,%es:(%rdi)
    5b99:	aa                   	stos   %al,%es:(%rdi)
    5b9a:	aa                   	stos   %al,%es:(%rdi)
    5b9b:	aa                   	stos   %al,%es:(%rdi)
    5b9c:	aa                   	stos   %al,%es:(%rdi)
    5b9d:	aa                   	stos   %al,%es:(%rdi)
    5b9e:	aa                   	stos   %al,%es:(%rdi)
    5b9f:	aa                   	stos   %al,%es:(%rdi)
    5ba0:	aa                   	stos   %al,%es:(%rdi)
    5ba1:	aa                   	stos   %al,%es:(%rdi)
    5ba2:	aa                   	stos   %al,%es:(%rdi)
    5ba3:	aa                   	stos   %al,%es:(%rdi)
    5ba4:	aa                   	stos   %al,%es:(%rdi)
    5ba5:	aa                   	stos   %al,%es:(%rdi)
    5ba6:	aa                   	stos   %al,%es:(%rdi)
    5ba7:	aa                   	stos   %al,%es:(%rdi)
    5ba8:	aa                   	stos   %al,%es:(%rdi)
    5ba9:	aa                   	stos   %al,%es:(%rdi)
    5baa:	aa                   	stos   %al,%es:(%rdi)
    5bab:	aa                   	stos   %al,%es:(%rdi)
    5bac:	aa                   	stos   %al,%es:(%rdi)
    5bad:	aa                   	stos   %al,%es:(%rdi)
    5bae:	aa                   	stos   %al,%es:(%rdi)
    5baf:	aa                   	stos   %al,%es:(%rdi)
    5bb0:	aa                   	stos   %al,%es:(%rdi)
    5bb1:	aa                   	stos   %al,%es:(%rdi)
    5bb2:	aa                   	stos   %al,%es:(%rdi)
    5bb3:	aa                   	stos   %al,%es:(%rdi)
    5bb4:	aa                   	stos   %al,%es:(%rdi)
    5bb5:	aa                   	stos   %al,%es:(%rdi)
    5bb6:	aa                   	stos   %al,%es:(%rdi)
    5bb7:	aa                   	stos   %al,%es:(%rdi)
    5bb8:	aa                   	stos   %al,%es:(%rdi)
    5bb9:	aa                   	stos   %al,%es:(%rdi)
    5bba:	aa                   	stos   %al,%es:(%rdi)
    5bbb:	aa                   	stos   %al,%es:(%rdi)
    5bbc:	aa                   	stos   %al,%es:(%rdi)
    5bbd:	aa                   	stos   %al,%es:(%rdi)
    5bbe:	aa                   	stos   %al,%es:(%rdi)
    5bbf:	aa                   	stos   %al,%es:(%rdi)
    5bc0:	aa                   	stos   %al,%es:(%rdi)
    5bc1:	aa                   	stos   %al,%es:(%rdi)
    5bc2:	aa                   	stos   %al,%es:(%rdi)
    5bc3:	aa                   	stos   %al,%es:(%rdi)
    5bc4:	aa                   	stos   %al,%es:(%rdi)
    5bc5:	aa                   	stos   %al,%es:(%rdi)
    5bc6:	aa                   	stos   %al,%es:(%rdi)
    5bc7:	aa                   	stos   %al,%es:(%rdi)
    5bc8:	aa                   	stos   %al,%es:(%rdi)
    5bc9:	aa                   	stos   %al,%es:(%rdi)
    5bca:	aa                   	stos   %al,%es:(%rdi)
    5bcb:	aa                   	stos   %al,%es:(%rdi)
    5bcc:	aa                   	stos   %al,%es:(%rdi)
    5bcd:	aa                   	stos   %al,%es:(%rdi)
    5bce:	aa                   	stos   %al,%es:(%rdi)
    5bcf:	aa                   	stos   %al,%es:(%rdi)
    5bd0:	aa                   	stos   %al,%es:(%rdi)
    5bd1:	aa                   	stos   %al,%es:(%rdi)
    5bd2:	aa                   	stos   %al,%es:(%rdi)
    5bd3:	aa                   	stos   %al,%es:(%rdi)
    5bd4:	aa                   	stos   %al,%es:(%rdi)
    5bd5:	aa                   	stos   %al,%es:(%rdi)
    5bd6:	aa                   	stos   %al,%es:(%rdi)
    5bd7:	aa                   	stos   %al,%es:(%rdi)
    5bd8:	aa                   	stos   %al,%es:(%rdi)
    5bd9:	aa                   	stos   %al,%es:(%rdi)
    5bda:	aa                   	stos   %al,%es:(%rdi)
    5bdb:	aa                   	stos   %al,%es:(%rdi)
    5bdc:	aa                   	stos   %al,%es:(%rdi)
    5bdd:	aa                   	stos   %al,%es:(%rdi)
    5bde:	aa                   	stos   %al,%es:(%rdi)
    5bdf:	aa                   	stos   %al,%es:(%rdi)
    5be0:	aa                   	stos   %al,%es:(%rdi)
    5be1:	aa                   	stos   %al,%es:(%rdi)
    5be2:	aa                   	stos   %al,%es:(%rdi)
    5be3:	aa                   	stos   %al,%es:(%rdi)
    5be4:	aa                   	stos   %al,%es:(%rdi)
    5be5:	aa                   	stos   %al,%es:(%rdi)
    5be6:	aa                   	stos   %al,%es:(%rdi)
    5be7:	aa                   	stos   %al,%es:(%rdi)
    5be8:	aa                   	stos   %al,%es:(%rdi)
    5be9:	aa                   	stos   %al,%es:(%rdi)
    5bea:	aa                   	stos   %al,%es:(%rdi)
    5beb:	aa                   	stos   %al,%es:(%rdi)
    5bec:	aa                   	stos   %al,%es:(%rdi)
    5bed:	aa                   	stos   %al,%es:(%rdi)
    5bee:	aa                   	stos   %al,%es:(%rdi)
    5bef:	aa                   	stos   %al,%es:(%rdi)
    5bf0:	aa                   	stos   %al,%es:(%rdi)
    5bf1:	aa                   	stos   %al,%es:(%rdi)
    5bf2:	aa                   	stos   %al,%es:(%rdi)
    5bf3:	aa                   	stos   %al,%es:(%rdi)
    5bf4:	aa                   	stos   %al,%es:(%rdi)
    5bf5:	aa                   	stos   %al,%es:(%rdi)
    5bf6:	aa                   	stos   %al,%es:(%rdi)
    5bf7:	aa                   	stos   %al,%es:(%rdi)
    5bf8:	aa                   	stos   %al,%es:(%rdi)
    5bf9:	aa                   	stos   %al,%es:(%rdi)
    5bfa:	aa                   	stos   %al,%es:(%rdi)
    5bfb:	aa                   	stos   %al,%es:(%rdi)
    5bfc:	aa                   	stos   %al,%es:(%rdi)
    5bfd:	aa                   	stos   %al,%es:(%rdi)
    5bfe:	aa                   	stos   %al,%es:(%rdi)
    5bff:	aa                   	stos   %al,%es:(%rdi)
    5c00:	aa                   	stos   %al,%es:(%rdi)
    5c01:	aa                   	stos   %al,%es:(%rdi)
    5c02:	aa                   	stos   %al,%es:(%rdi)
    5c03:	aa                   	stos   %al,%es:(%rdi)
    5c04:	aa                   	stos   %al,%es:(%rdi)
    5c05:	aa                   	stos   %al,%es:(%rdi)
    5c06:	aa                   	stos   %al,%es:(%rdi)
    5c07:	aa                   	stos   %al,%es:(%rdi)
    5c08:	aa                   	stos   %al,%es:(%rdi)
    5c09:	aa                   	stos   %al,%es:(%rdi)
    5c0a:	aa                   	stos   %al,%es:(%rdi)
    5c0b:	aa                   	stos   %al,%es:(%rdi)
    5c0c:	aa                   	stos   %al,%es:(%rdi)
    5c0d:	aa                   	stos   %al,%es:(%rdi)
    5c0e:	aa                   	stos   %al,%es:(%rdi)
    5c0f:	aa                   	stos   %al,%es:(%rdi)
    5c10:	aa                   	stos   %al,%es:(%rdi)
    5c11:	aa                   	stos   %al,%es:(%rdi)
    5c12:	aa                   	stos   %al,%es:(%rdi)
    5c13:	aa                   	stos   %al,%es:(%rdi)
    5c14:	aa                   	stos   %al,%es:(%rdi)
    5c15:	aa                   	stos   %al,%es:(%rdi)
    5c16:	aa                   	stos   %al,%es:(%rdi)
    5c17:	aa                   	stos   %al,%es:(%rdi)
    5c18:	aa                   	stos   %al,%es:(%rdi)
    5c19:	aa                   	stos   %al,%es:(%rdi)
    5c1a:	aa                   	stos   %al,%es:(%rdi)
    5c1b:	aa                   	stos   %al,%es:(%rdi)
    5c1c:	aa                   	stos   %al,%es:(%rdi)
    5c1d:	aa                   	stos   %al,%es:(%rdi)
    5c1e:	aa                   	stos   %al,%es:(%rdi)
    5c1f:	aa                   	stos   %al,%es:(%rdi)
    5c20:	aa                   	stos   %al,%es:(%rdi)
    5c21:	aa                   	stos   %al,%es:(%rdi)
    5c22:	aa                   	stos   %al,%es:(%rdi)
    5c23:	aa                   	stos   %al,%es:(%rdi)
    5c24:	aa                   	stos   %al,%es:(%rdi)
    5c25:	aa                   	stos   %al,%es:(%rdi)
    5c26:	aa                   	stos   %al,%es:(%rdi)
    5c27:	aa                   	stos   %al,%es:(%rdi)
    5c28:	aa                   	stos   %al,%es:(%rdi)
    5c29:	aa                   	stos   %al,%es:(%rdi)
    5c2a:	aa                   	stos   %al,%es:(%rdi)
    5c2b:	aa                   	stos   %al,%es:(%rdi)
    5c2c:	aa                   	stos   %al,%es:(%rdi)
    5c2d:	aa                   	stos   %al,%es:(%rdi)
    5c2e:	aa                   	stos   %al,%es:(%rdi)
    5c2f:	aa                   	stos   %al,%es:(%rdi)
    5c30:	aa                   	stos   %al,%es:(%rdi)
    5c31:	aa                   	stos   %al,%es:(%rdi)
    5c32:	aa                   	stos   %al,%es:(%rdi)
    5c33:	aa                   	stos   %al,%es:(%rdi)
    5c34:	aa                   	stos   %al,%es:(%rdi)
    5c35:	aa                   	stos   %al,%es:(%rdi)
    5c36:	aa                   	stos   %al,%es:(%rdi)
    5c37:	aa                   	stos   %al,%es:(%rdi)
    5c38:	aa                   	stos   %al,%es:(%rdi)
    5c39:	aa                   	stos   %al,%es:(%rdi)
    5c3a:	aa                   	stos   %al,%es:(%rdi)
    5c3b:	aa                   	stos   %al,%es:(%rdi)
    5c3c:	aa                   	stos   %al,%es:(%rdi)
    5c3d:	aa                   	stos   %al,%es:(%rdi)
    5c3e:	aa                   	stos   %al,%es:(%rdi)
    5c3f:	aa                   	stos   %al,%es:(%rdi)
    5c40:	aa                   	stos   %al,%es:(%rdi)
    5c41:	aa                   	stos   %al,%es:(%rdi)
    5c42:	aa                   	stos   %al,%es:(%rdi)
    5c43:	aa                   	stos   %al,%es:(%rdi)
    5c44:	aa                   	stos   %al,%es:(%rdi)
    5c45:	aa                   	stos   %al,%es:(%rdi)
    5c46:	aa                   	stos   %al,%es:(%rdi)
    5c47:	aa                   	stos   %al,%es:(%rdi)
    5c48:	aa                   	stos   %al,%es:(%rdi)
    5c49:	aa                   	stos   %al,%es:(%rdi)
    5c4a:	aa                   	stos   %al,%es:(%rdi)
    5c4b:	aa                   	stos   %al,%es:(%rdi)
    5c4c:	aa                   	stos   %al,%es:(%rdi)
    5c4d:	aa                   	stos   %al,%es:(%rdi)
    5c4e:	aa                   	stos   %al,%es:(%rdi)
    5c4f:	aa                   	stos   %al,%es:(%rdi)
    5c50:	aa                   	stos   %al,%es:(%rdi)
    5c51:	aa                   	stos   %al,%es:(%rdi)
    5c52:	aa                   	stos   %al,%es:(%rdi)
    5c53:	aa                   	stos   %al,%es:(%rdi)
    5c54:	aa                   	stos   %al,%es:(%rdi)
    5c55:	aa                   	stos   %al,%es:(%rdi)
    5c56:	aa                   	stos   %al,%es:(%rdi)
    5c57:	aa                   	stos   %al,%es:(%rdi)
    5c58:	aa                   	stos   %al,%es:(%rdi)
    5c59:	aa                   	stos   %al,%es:(%rdi)
    5c5a:	aa                   	stos   %al,%es:(%rdi)
    5c5b:	aa                   	stos   %al,%es:(%rdi)
    5c5c:	aa                   	stos   %al,%es:(%rdi)
    5c5d:	aa                   	stos   %al,%es:(%rdi)
    5c5e:	aa                   	stos   %al,%es:(%rdi)
    5c5f:	aa                   	stos   %al,%es:(%rdi)
    5c60:	aa                   	stos   %al,%es:(%rdi)
    5c61:	aa                   	stos   %al,%es:(%rdi)
    5c62:	aa                   	stos   %al,%es:(%rdi)
    5c63:	aa                   	stos   %al,%es:(%rdi)
    5c64:	aa                   	stos   %al,%es:(%rdi)
    5c65:	aa                   	stos   %al,%es:(%rdi)
    5c66:	aa                   	stos   %al,%es:(%rdi)
    5c67:	aa                   	stos   %al,%es:(%rdi)
    5c68:	aa                   	stos   %al,%es:(%rdi)
    5c69:	aa                   	stos   %al,%es:(%rdi)
    5c6a:	aa                   	stos   %al,%es:(%rdi)
    5c6b:	aa                   	stos   %al,%es:(%rdi)
    5c6c:	aa                   	stos   %al,%es:(%rdi)
    5c6d:	aa                   	stos   %al,%es:(%rdi)
    5c6e:	aa                   	stos   %al,%es:(%rdi)
    5c6f:	aa                   	stos   %al,%es:(%rdi)
    5c70:	aa                   	stos   %al,%es:(%rdi)
    5c71:	aa                   	stos   %al,%es:(%rdi)
    5c72:	aa                   	stos   %al,%es:(%rdi)
    5c73:	aa                   	stos   %al,%es:(%rdi)
    5c74:	aa                   	stos   %al,%es:(%rdi)
    5c75:	aa                   	stos   %al,%es:(%rdi)
    5c76:	aa                   	stos   %al,%es:(%rdi)
    5c77:	aa                   	stos   %al,%es:(%rdi)
    5c78:	aa                   	stos   %al,%es:(%rdi)
    5c79:	aa                   	stos   %al,%es:(%rdi)
    5c7a:	aa                   	stos   %al,%es:(%rdi)
    5c7b:	aa                   	stos   %al,%es:(%rdi)
    5c7c:	aa                   	stos   %al,%es:(%rdi)
    5c7d:	aa                   	stos   %al,%es:(%rdi)
    5c7e:	aa                   	stos   %al,%es:(%rdi)
    5c7f:	aa                   	stos   %al,%es:(%rdi)
    5c80:	aa                   	stos   %al,%es:(%rdi)
    5c81:	aa                   	stos   %al,%es:(%rdi)
    5c82:	aa                   	stos   %al,%es:(%rdi)
    5c83:	aa                   	stos   %al,%es:(%rdi)
    5c84:	aa                   	stos   %al,%es:(%rdi)
    5c85:	aa                   	stos   %al,%es:(%rdi)
    5c86:	aa                   	stos   %al,%es:(%rdi)
    5c87:	aa                   	stos   %al,%es:(%rdi)
    5c88:	aa                   	stos   %al,%es:(%rdi)
    5c89:	aa                   	stos   %al,%es:(%rdi)
    5c8a:	aa                   	stos   %al,%es:(%rdi)
    5c8b:	aa                   	stos   %al,%es:(%rdi)
    5c8c:	aa                   	stos   %al,%es:(%rdi)
    5c8d:	aa                   	stos   %al,%es:(%rdi)
    5c8e:	aa                   	stos   %al,%es:(%rdi)
    5c8f:	aa                   	stos   %al,%es:(%rdi)
    5c90:	aa                   	stos   %al,%es:(%rdi)
    5c91:	aa                   	stos   %al,%es:(%rdi)
    5c92:	aa                   	stos   %al,%es:(%rdi)
    5c93:	aa                   	stos   %al,%es:(%rdi)
    5c94:	aa                   	stos   %al,%es:(%rdi)
    5c95:	aa                   	stos   %al,%es:(%rdi)
    5c96:	aa                   	stos   %al,%es:(%rdi)
    5c97:	aa                   	stos   %al,%es:(%rdi)
    5c98:	aa                   	stos   %al,%es:(%rdi)
    5c99:	aa                   	stos   %al,%es:(%rdi)
    5c9a:	aa                   	stos   %al,%es:(%rdi)
    5c9b:	aa                   	stos   %al,%es:(%rdi)
    5c9c:	aa                   	stos   %al,%es:(%rdi)
    5c9d:	aa                   	stos   %al,%es:(%rdi)
    5c9e:	aa                   	stos   %al,%es:(%rdi)
    5c9f:	aa                   	stos   %al,%es:(%rdi)
    5ca0:	aa                   	stos   %al,%es:(%rdi)
    5ca1:	aa                   	stos   %al,%es:(%rdi)
    5ca2:	aa                   	stos   %al,%es:(%rdi)
    5ca3:	aa                   	stos   %al,%es:(%rdi)
    5ca4:	aa                   	stos   %al,%es:(%rdi)
    5ca5:	aa                   	stos   %al,%es:(%rdi)
    5ca6:	aa                   	stos   %al,%es:(%rdi)
    5ca7:	aa                   	stos   %al,%es:(%rdi)
    5ca8:	aa                   	stos   %al,%es:(%rdi)
    5ca9:	aa                   	stos   %al,%es:(%rdi)
    5caa:	aa                   	stos   %al,%es:(%rdi)
    5cab:	aa                   	stos   %al,%es:(%rdi)
    5cac:	aa                   	stos   %al,%es:(%rdi)
    5cad:	aa                   	stos   %al,%es:(%rdi)
    5cae:	aa                   	stos   %al,%es:(%rdi)
    5caf:	aa                   	stos   %al,%es:(%rdi)
    5cb0:	aa                   	stos   %al,%es:(%rdi)
    5cb1:	aa                   	stos   %al,%es:(%rdi)
    5cb2:	aa                   	stos   %al,%es:(%rdi)
    5cb3:	aa                   	stos   %al,%es:(%rdi)
    5cb4:	aa                   	stos   %al,%es:(%rdi)
    5cb5:	aa                   	stos   %al,%es:(%rdi)
    5cb6:	aa                   	stos   %al,%es:(%rdi)
    5cb7:	aa                   	stos   %al,%es:(%rdi)
    5cb8:	aa                   	stos   %al,%es:(%rdi)
    5cb9:	aa                   	stos   %al,%es:(%rdi)
    5cba:	aa                   	stos   %al,%es:(%rdi)
    5cbb:	aa                   	stos   %al,%es:(%rdi)
    5cbc:	aa                   	stos   %al,%es:(%rdi)
    5cbd:	aa                   	stos   %al,%es:(%rdi)
    5cbe:	aa                   	stos   %al,%es:(%rdi)
    5cbf:	aa                   	stos   %al,%es:(%rdi)
    5cc0:	aa                   	stos   %al,%es:(%rdi)
    5cc1:	aa                   	stos   %al,%es:(%rdi)
    5cc2:	aa                   	stos   %al,%es:(%rdi)
    5cc3:	aa                   	stos   %al,%es:(%rdi)
    5cc4:	aa                   	stos   %al,%es:(%rdi)
    5cc5:	aa                   	stos   %al,%es:(%rdi)
    5cc6:	aa                   	stos   %al,%es:(%rdi)
    5cc7:	aa                   	stos   %al,%es:(%rdi)
    5cc8:	aa                   	stos   %al,%es:(%rdi)
    5cc9:	aa                   	stos   %al,%es:(%rdi)
    5cca:	aa                   	stos   %al,%es:(%rdi)
    5ccb:	aa                   	stos   %al,%es:(%rdi)
    5ccc:	aa                   	stos   %al,%es:(%rdi)
    5ccd:	aa                   	stos   %al,%es:(%rdi)
    5cce:	aa                   	stos   %al,%es:(%rdi)
    5ccf:	aa                   	stos   %al,%es:(%rdi)
    5cd0:	aa                   	stos   %al,%es:(%rdi)
    5cd1:	aa                   	stos   %al,%es:(%rdi)
    5cd2:	aa                   	stos   %al,%es:(%rdi)
    5cd3:	aa                   	stos   %al,%es:(%rdi)
    5cd4:	aa                   	stos   %al,%es:(%rdi)
    5cd5:	aa                   	stos   %al,%es:(%rdi)
    5cd6:	aa                   	stos   %al,%es:(%rdi)
    5cd7:	aa                   	stos   %al,%es:(%rdi)
    5cd8:	aa                   	stos   %al,%es:(%rdi)
    5cd9:	aa                   	stos   %al,%es:(%rdi)
    5cda:	aa                   	stos   %al,%es:(%rdi)
    5cdb:	aa                   	stos   %al,%es:(%rdi)
    5cdc:	aa                   	stos   %al,%es:(%rdi)
    5cdd:	aa                   	stos   %al,%es:(%rdi)
    5cde:	aa                   	stos   %al,%es:(%rdi)
    5cdf:	aa                   	stos   %al,%es:(%rdi)
    5ce0:	aa                   	stos   %al,%es:(%rdi)
    5ce1:	aa                   	stos   %al,%es:(%rdi)
    5ce2:	aa                   	stos   %al,%es:(%rdi)
    5ce3:	aa                   	stos   %al,%es:(%rdi)
    5ce4:	aa                   	stos   %al,%es:(%rdi)
    5ce5:	aa                   	stos   %al,%es:(%rdi)
    5ce6:	aa                   	stos   %al,%es:(%rdi)
    5ce7:	aa                   	stos   %al,%es:(%rdi)
    5ce8:	aa                   	stos   %al,%es:(%rdi)
    5ce9:	aa                   	stos   %al,%es:(%rdi)
    5cea:	aa                   	stos   %al,%es:(%rdi)
    5ceb:	aa                   	stos   %al,%es:(%rdi)
    5cec:	aa                   	stos   %al,%es:(%rdi)
    5ced:	aa                   	stos   %al,%es:(%rdi)
    5cee:	aa                   	stos   %al,%es:(%rdi)
    5cef:	aa                   	stos   %al,%es:(%rdi)
    5cf0:	aa                   	stos   %al,%es:(%rdi)
    5cf1:	aa                   	stos   %al,%es:(%rdi)
    5cf2:	aa                   	stos   %al,%es:(%rdi)
    5cf3:	aa                   	stos   %al,%es:(%rdi)
    5cf4:	aa                   	stos   %al,%es:(%rdi)
    5cf5:	aa                   	stos   %al,%es:(%rdi)
    5cf6:	aa                   	stos   %al,%es:(%rdi)
    5cf7:	aa                   	stos   %al,%es:(%rdi)
    5cf8:	aa                   	stos   %al,%es:(%rdi)
    5cf9:	aa                   	stos   %al,%es:(%rdi)
    5cfa:	aa                   	stos   %al,%es:(%rdi)
    5cfb:	aa                   	stos   %al,%es:(%rdi)
    5cfc:	aa                   	stos   %al,%es:(%rdi)
    5cfd:	aa                   	stos   %al,%es:(%rdi)
    5cfe:	aa                   	stos   %al,%es:(%rdi)
    5cff:	aa                   	stos   %al,%es:(%rdi)
    5d00:	aa                   	stos   %al,%es:(%rdi)
    5d01:	aa                   	stos   %al,%es:(%rdi)
    5d02:	aa                   	stos   %al,%es:(%rdi)
    5d03:	aa                   	stos   %al,%es:(%rdi)
    5d04:	aa                   	stos   %al,%es:(%rdi)
    5d05:	aa                   	stos   %al,%es:(%rdi)
    5d06:	aa                   	stos   %al,%es:(%rdi)
    5d07:	aa                   	stos   %al,%es:(%rdi)
    5d08:	aa                   	stos   %al,%es:(%rdi)
    5d09:	aa                   	stos   %al,%es:(%rdi)
    5d0a:	aa                   	stos   %al,%es:(%rdi)
    5d0b:	aa                   	stos   %al,%es:(%rdi)
    5d0c:	aa                   	stos   %al,%es:(%rdi)
    5d0d:	aa                   	stos   %al,%es:(%rdi)
    5d0e:	aa                   	stos   %al,%es:(%rdi)
    5d0f:	aa                   	stos   %al,%es:(%rdi)
    5d10:	aa                   	stos   %al,%es:(%rdi)
    5d11:	aa                   	stos   %al,%es:(%rdi)
    5d12:	aa                   	stos   %al,%es:(%rdi)
    5d13:	aa                   	stos   %al,%es:(%rdi)
    5d14:	aa                   	stos   %al,%es:(%rdi)
    5d15:	aa                   	stos   %al,%es:(%rdi)
    5d16:	aa                   	stos   %al,%es:(%rdi)
    5d17:	aa                   	stos   %al,%es:(%rdi)
    5d18:	aa                   	stos   %al,%es:(%rdi)
    5d19:	aa                   	stos   %al,%es:(%rdi)
    5d1a:	aa                   	stos   %al,%es:(%rdi)
    5d1b:	aa                   	stos   %al,%es:(%rdi)
    5d1c:	aa                   	stos   %al,%es:(%rdi)
    5d1d:	aa                   	stos   %al,%es:(%rdi)
    5d1e:	aa                   	stos   %al,%es:(%rdi)
    5d1f:	aa                   	stos   %al,%es:(%rdi)
    5d20:	aa                   	stos   %al,%es:(%rdi)
    5d21:	aa                   	stos   %al,%es:(%rdi)
    5d22:	aa                   	stos   %al,%es:(%rdi)
    5d23:	aa                   	stos   %al,%es:(%rdi)
    5d24:	aa                   	stos   %al,%es:(%rdi)
    5d25:	aa                   	stos   %al,%es:(%rdi)
    5d26:	aa                   	stos   %al,%es:(%rdi)
    5d27:	aa                   	stos   %al,%es:(%rdi)
    5d28:	aa                   	stos   %al,%es:(%rdi)
    5d29:	aa                   	stos   %al,%es:(%rdi)
    5d2a:	aa                   	stos   %al,%es:(%rdi)
    5d2b:	aa                   	stos   %al,%es:(%rdi)
    5d2c:	aa                   	stos   %al,%es:(%rdi)
    5d2d:	aa                   	stos   %al,%es:(%rdi)
    5d2e:	aa                   	stos   %al,%es:(%rdi)
    5d2f:	aa                   	stos   %al,%es:(%rdi)
    5d30:	aa                   	stos   %al,%es:(%rdi)
    5d31:	aa                   	stos   %al,%es:(%rdi)
    5d32:	aa                   	stos   %al,%es:(%rdi)
    5d33:	aa                   	stos   %al,%es:(%rdi)
    5d34:	aa                   	stos   %al,%es:(%rdi)
    5d35:	aa                   	stos   %al,%es:(%rdi)
    5d36:	aa                   	stos   %al,%es:(%rdi)
    5d37:	aa                   	stos   %al,%es:(%rdi)
    5d38:	aa                   	stos   %al,%es:(%rdi)
    5d39:	aa                   	stos   %al,%es:(%rdi)
    5d3a:	aa                   	stos   %al,%es:(%rdi)
    5d3b:	aa                   	stos   %al,%es:(%rdi)
    5d3c:	aa                   	stos   %al,%es:(%rdi)
    5d3d:	aa                   	stos   %al,%es:(%rdi)
    5d3e:	aa                   	stos   %al,%es:(%rdi)
    5d3f:	aa                   	stos   %al,%es:(%rdi)
    5d40:	aa                   	stos   %al,%es:(%rdi)
    5d41:	aa                   	stos   %al,%es:(%rdi)
    5d42:	aa                   	stos   %al,%es:(%rdi)
    5d43:	aa                   	stos   %al,%es:(%rdi)
    5d44:	aa                   	stos   %al,%es:(%rdi)
    5d45:	aa                   	stos   %al,%es:(%rdi)
    5d46:	aa                   	stos   %al,%es:(%rdi)
    5d47:	aa                   	stos   %al,%es:(%rdi)
    5d48:	aa                   	stos   %al,%es:(%rdi)
    5d49:	aa                   	stos   %al,%es:(%rdi)
    5d4a:	aa                   	stos   %al,%es:(%rdi)
    5d4b:	aa                   	stos   %al,%es:(%rdi)
    5d4c:	aa                   	stos   %al,%es:(%rdi)
    5d4d:	aa                   	stos   %al,%es:(%rdi)
    5d4e:	aa                   	stos   %al,%es:(%rdi)
    5d4f:	aa                   	stos   %al,%es:(%rdi)
    5d50:	aa                   	stos   %al,%es:(%rdi)
    5d51:	aa                   	stos   %al,%es:(%rdi)
    5d52:	aa                   	stos   %al,%es:(%rdi)
    5d53:	aa                   	stos   %al,%es:(%rdi)
    5d54:	aa                   	stos   %al,%es:(%rdi)
    5d55:	aa                   	stos   %al,%es:(%rdi)
    5d56:	aa                   	stos   %al,%es:(%rdi)
    5d57:	aa                   	stos   %al,%es:(%rdi)
    5d58:	aa                   	stos   %al,%es:(%rdi)
    5d59:	aa                   	stos   %al,%es:(%rdi)
    5d5a:	aa                   	stos   %al,%es:(%rdi)
    5d5b:	aa                   	stos   %al,%es:(%rdi)
    5d5c:	aa                   	stos   %al,%es:(%rdi)
    5d5d:	aa                   	stos   %al,%es:(%rdi)
    5d5e:	aa                   	stos   %al,%es:(%rdi)
    5d5f:	aa                   	stos   %al,%es:(%rdi)
    5d60:	aa                   	stos   %al,%es:(%rdi)
    5d61:	aa                   	stos   %al,%es:(%rdi)
    5d62:	aa                   	stos   %al,%es:(%rdi)
    5d63:	aa                   	stos   %al,%es:(%rdi)
    5d64:	aa                   	stos   %al,%es:(%rdi)
    5d65:	aa                   	stos   %al,%es:(%rdi)
    5d66:	aa                   	stos   %al,%es:(%rdi)
    5d67:	aa                   	stos   %al,%es:(%rdi)
    5d68:	aa                   	stos   %al,%es:(%rdi)
    5d69:	aa                   	stos   %al,%es:(%rdi)
    5d6a:	aa                   	stos   %al,%es:(%rdi)
    5d6b:	aa                   	stos   %al,%es:(%rdi)
    5d6c:	aa                   	stos   %al,%es:(%rdi)
    5d6d:	aa                   	stos   %al,%es:(%rdi)
    5d6e:	aa                   	stos   %al,%es:(%rdi)
    5d6f:	aa                   	stos   %al,%es:(%rdi)
    5d70:	aa                   	stos   %al,%es:(%rdi)
    5d71:	aa                   	stos   %al,%es:(%rdi)
    5d72:	aa                   	stos   %al,%es:(%rdi)
    5d73:	aa                   	stos   %al,%es:(%rdi)
    5d74:	aa                   	stos   %al,%es:(%rdi)
    5d75:	aa                   	stos   %al,%es:(%rdi)
    5d76:	aa                   	stos   %al,%es:(%rdi)
    5d77:	aa                   	stos   %al,%es:(%rdi)
    5d78:	aa                   	stos   %al,%es:(%rdi)
    5d79:	aa                   	stos   %al,%es:(%rdi)
    5d7a:	aa                   	stos   %al,%es:(%rdi)
    5d7b:	aa                   	stos   %al,%es:(%rdi)
    5d7c:	aa                   	stos   %al,%es:(%rdi)
    5d7d:	aa                   	stos   %al,%es:(%rdi)
    5d7e:	aa                   	stos   %al,%es:(%rdi)
    5d7f:	aa                   	stos   %al,%es:(%rdi)
    5d80:	aa                   	stos   %al,%es:(%rdi)
    5d81:	aa                   	stos   %al,%es:(%rdi)
    5d82:	aa                   	stos   %al,%es:(%rdi)
    5d83:	aa                   	stos   %al,%es:(%rdi)
    5d84:	aa                   	stos   %al,%es:(%rdi)
    5d85:	aa                   	stos   %al,%es:(%rdi)
    5d86:	aa                   	stos   %al,%es:(%rdi)
    5d87:	aa                   	stos   %al,%es:(%rdi)
    5d88:	aa                   	stos   %al,%es:(%rdi)
    5d89:	aa                   	stos   %al,%es:(%rdi)
    5d8a:	aa                   	stos   %al,%es:(%rdi)
    5d8b:	aa                   	stos   %al,%es:(%rdi)
    5d8c:	aa                   	stos   %al,%es:(%rdi)
    5d8d:	aa                   	stos   %al,%es:(%rdi)
    5d8e:	aa                   	stos   %al,%es:(%rdi)
    5d8f:	aa                   	stos   %al,%es:(%rdi)
    5d90:	aa                   	stos   %al,%es:(%rdi)
    5d91:	aa                   	stos   %al,%es:(%rdi)
    5d92:	aa                   	stos   %al,%es:(%rdi)
    5d93:	aa                   	stos   %al,%es:(%rdi)
    5d94:	aa                   	stos   %al,%es:(%rdi)
    5d95:	aa                   	stos   %al,%es:(%rdi)
    5d96:	aa                   	stos   %al,%es:(%rdi)
    5d97:	aa                   	stos   %al,%es:(%rdi)
    5d98:	aa                   	stos   %al,%es:(%rdi)
    5d99:	aa                   	stos   %al,%es:(%rdi)
    5d9a:	aa                   	stos   %al,%es:(%rdi)
    5d9b:	aa                   	stos   %al,%es:(%rdi)
    5d9c:	aa                   	stos   %al,%es:(%rdi)
    5d9d:	aa                   	stos   %al,%es:(%rdi)
    5d9e:	aa                   	stos   %al,%es:(%rdi)
    5d9f:	aa                   	stos   %al,%es:(%rdi)
    5da0:	aa                   	stos   %al,%es:(%rdi)
    5da1:	aa                   	stos   %al,%es:(%rdi)
    5da2:	aa                   	stos   %al,%es:(%rdi)
    5da3:	aa                   	stos   %al,%es:(%rdi)
    5da4:	aa                   	stos   %al,%es:(%rdi)
    5da5:	aa                   	stos   %al,%es:(%rdi)
    5da6:	aa                   	stos   %al,%es:(%rdi)
    5da7:	aa                   	stos   %al,%es:(%rdi)
    5da8:	aa                   	stos   %al,%es:(%rdi)
    5da9:	aa                   	stos   %al,%es:(%rdi)
    5daa:	aa                   	stos   %al,%es:(%rdi)
    5dab:	aa                   	stos   %al,%es:(%rdi)
    5dac:	aa                   	stos   %al,%es:(%rdi)
    5dad:	aa                   	stos   %al,%es:(%rdi)
    5dae:	aa                   	stos   %al,%es:(%rdi)
    5daf:	aa                   	stos   %al,%es:(%rdi)
    5db0:	aa                   	stos   %al,%es:(%rdi)
    5db1:	aa                   	stos   %al,%es:(%rdi)
    5db2:	aa                   	stos   %al,%es:(%rdi)
    5db3:	aa                   	stos   %al,%es:(%rdi)
    5db4:	aa                   	stos   %al,%es:(%rdi)
    5db5:	aa                   	stos   %al,%es:(%rdi)
    5db6:	aa                   	stos   %al,%es:(%rdi)
    5db7:	aa                   	stos   %al,%es:(%rdi)
    5db8:	aa                   	stos   %al,%es:(%rdi)
    5db9:	aa                   	stos   %al,%es:(%rdi)
    5dba:	aa                   	stos   %al,%es:(%rdi)
    5dbb:	aa                   	stos   %al,%es:(%rdi)
    5dbc:	aa                   	stos   %al,%es:(%rdi)
    5dbd:	aa                   	stos   %al,%es:(%rdi)
    5dbe:	aa                   	stos   %al,%es:(%rdi)
    5dbf:	aa                   	stos   %al,%es:(%rdi)
    5dc0:	aa                   	stos   %al,%es:(%rdi)
    5dc1:	aa                   	stos   %al,%es:(%rdi)
    5dc2:	aa                   	stos   %al,%es:(%rdi)
    5dc3:	aa                   	stos   %al,%es:(%rdi)
    5dc4:	aa                   	stos   %al,%es:(%rdi)
    5dc5:	aa                   	stos   %al,%es:(%rdi)
    5dc6:	aa                   	stos   %al,%es:(%rdi)
    5dc7:	aa                   	stos   %al,%es:(%rdi)
    5dc8:	aa                   	stos   %al,%es:(%rdi)
    5dc9:	aa                   	stos   %al,%es:(%rdi)
    5dca:	aa                   	stos   %al,%es:(%rdi)
    5dcb:	aa                   	stos   %al,%es:(%rdi)
    5dcc:	aa                   	stos   %al,%es:(%rdi)
    5dcd:	aa                   	stos   %al,%es:(%rdi)
    5dce:	aa                   	stos   %al,%es:(%rdi)
    5dcf:	aa                   	stos   %al,%es:(%rdi)
    5dd0:	aa                   	stos   %al,%es:(%rdi)
    5dd1:	aa                   	stos   %al,%es:(%rdi)
    5dd2:	aa                   	stos   %al,%es:(%rdi)
    5dd3:	aa                   	stos   %al,%es:(%rdi)
    5dd4:	aa                   	stos   %al,%es:(%rdi)
    5dd5:	aa                   	stos   %al,%es:(%rdi)
    5dd6:	aa                   	stos   %al,%es:(%rdi)
    5dd7:	aa                   	stos   %al,%es:(%rdi)
    5dd8:	aa                   	stos   %al,%es:(%rdi)
    5dd9:	aa                   	stos   %al,%es:(%rdi)
    5dda:	aa                   	stos   %al,%es:(%rdi)
    5ddb:	aa                   	stos   %al,%es:(%rdi)
    5ddc:	aa                   	stos   %al,%es:(%rdi)
    5ddd:	aa                   	stos   %al,%es:(%rdi)
    5dde:	aa                   	stos   %al,%es:(%rdi)
    5ddf:	aa                   	stos   %al,%es:(%rdi)
    5de0:	aa                   	stos   %al,%es:(%rdi)
    5de1:	aa                   	stos   %al,%es:(%rdi)
    5de2:	aa                   	stos   %al,%es:(%rdi)
    5de3:	aa                   	stos   %al,%es:(%rdi)
    5de4:	aa                   	stos   %al,%es:(%rdi)
    5de5:	aa                   	stos   %al,%es:(%rdi)
    5de6:	aa                   	stos   %al,%es:(%rdi)
    5de7:	aa                   	stos   %al,%es:(%rdi)
    5de8:	aa                   	stos   %al,%es:(%rdi)
    5de9:	aa                   	stos   %al,%es:(%rdi)
    5dea:	aa                   	stos   %al,%es:(%rdi)
    5deb:	aa                   	stos   %al,%es:(%rdi)
    5dec:	aa                   	stos   %al,%es:(%rdi)
    5ded:	aa                   	stos   %al,%es:(%rdi)
    5dee:	aa                   	stos   %al,%es:(%rdi)
    5def:	aa                   	stos   %al,%es:(%rdi)
    5df0:	aa                   	stos   %al,%es:(%rdi)
    5df1:	aa                   	stos   %al,%es:(%rdi)
    5df2:	aa                   	stos   %al,%es:(%rdi)
    5df3:	aa                   	stos   %al,%es:(%rdi)
    5df4:	aa                   	stos   %al,%es:(%rdi)
    5df5:	aa                   	stos   %al,%es:(%rdi)
    5df6:	aa                   	stos   %al,%es:(%rdi)
    5df7:	aa                   	stos   %al,%es:(%rdi)
    5df8:	aa                   	stos   %al,%es:(%rdi)
    5df9:	aa                   	stos   %al,%es:(%rdi)
    5dfa:	aa                   	stos   %al,%es:(%rdi)
    5dfb:	aa                   	stos   %al,%es:(%rdi)
    5dfc:	aa                   	stos   %al,%es:(%rdi)
    5dfd:	aa                   	stos   %al,%es:(%rdi)
    5dfe:	aa                   	stos   %al,%es:(%rdi)
    5dff:	aa                   	stos   %al,%es:(%rdi)
    5e00:	aa                   	stos   %al,%es:(%rdi)
    5e01:	aa                   	stos   %al,%es:(%rdi)
    5e02:	aa                   	stos   %al,%es:(%rdi)
    5e03:	aa                   	stos   %al,%es:(%rdi)
    5e04:	aa                   	stos   %al,%es:(%rdi)
    5e05:	aa                   	stos   %al,%es:(%rdi)
    5e06:	aa                   	stos   %al,%es:(%rdi)
    5e07:	aa                   	stos   %al,%es:(%rdi)
    5e08:	aa                   	stos   %al,%es:(%rdi)
    5e09:	aa                   	stos   %al,%es:(%rdi)
    5e0a:	aa                   	stos   %al,%es:(%rdi)
    5e0b:	aa                   	stos   %al,%es:(%rdi)
    5e0c:	aa                   	stos   %al,%es:(%rdi)
    5e0d:	aa                   	stos   %al,%es:(%rdi)
    5e0e:	aa                   	stos   %al,%es:(%rdi)
    5e0f:	aa                   	stos   %al,%es:(%rdi)
    5e10:	aa                   	stos   %al,%es:(%rdi)
    5e11:	aa                   	stos   %al,%es:(%rdi)
    5e12:	aa                   	stos   %al,%es:(%rdi)
    5e13:	aa                   	stos   %al,%es:(%rdi)
    5e14:	aa                   	stos   %al,%es:(%rdi)
    5e15:	aa                   	stos   %al,%es:(%rdi)
    5e16:	aa                   	stos   %al,%es:(%rdi)
    5e17:	aa                   	stos   %al,%es:(%rdi)
    5e18:	aa                   	stos   %al,%es:(%rdi)
    5e19:	aa                   	stos   %al,%es:(%rdi)
    5e1a:	aa                   	stos   %al,%es:(%rdi)
    5e1b:	aa                   	stos   %al,%es:(%rdi)
    5e1c:	aa                   	stos   %al,%es:(%rdi)
    5e1d:	aa                   	stos   %al,%es:(%rdi)
    5e1e:	aa                   	stos   %al,%es:(%rdi)
    5e1f:	aa                   	stos   %al,%es:(%rdi)
    5e20:	aa                   	stos   %al,%es:(%rdi)
    5e21:	aa                   	stos   %al,%es:(%rdi)
    5e22:	aa                   	stos   %al,%es:(%rdi)
    5e23:	aa                   	stos   %al,%es:(%rdi)
    5e24:	aa                   	stos   %al,%es:(%rdi)
    5e25:	aa                   	stos   %al,%es:(%rdi)
    5e26:	aa                   	stos   %al,%es:(%rdi)
    5e27:	aa                   	stos   %al,%es:(%rdi)
    5e28:	aa                   	stos   %al,%es:(%rdi)
    5e29:	aa                   	stos   %al,%es:(%rdi)
    5e2a:	aa                   	stos   %al,%es:(%rdi)
    5e2b:	aa                   	stos   %al,%es:(%rdi)
    5e2c:	aa                   	stos   %al,%es:(%rdi)
    5e2d:	aa                   	stos   %al,%es:(%rdi)
    5e2e:	aa                   	stos   %al,%es:(%rdi)
    5e2f:	aa                   	stos   %al,%es:(%rdi)
    5e30:	aa                   	stos   %al,%es:(%rdi)
    5e31:	aa                   	stos   %al,%es:(%rdi)
    5e32:	aa                   	stos   %al,%es:(%rdi)
    5e33:	aa                   	stos   %al,%es:(%rdi)
    5e34:	aa                   	stos   %al,%es:(%rdi)
    5e35:	aa                   	stos   %al,%es:(%rdi)
    5e36:	aa                   	stos   %al,%es:(%rdi)
    5e37:	aa                   	stos   %al,%es:(%rdi)
    5e38:	aa                   	stos   %al,%es:(%rdi)
    5e39:	aa                   	stos   %al,%es:(%rdi)
    5e3a:	aa                   	stos   %al,%es:(%rdi)
    5e3b:	aa                   	stos   %al,%es:(%rdi)
    5e3c:	aa                   	stos   %al,%es:(%rdi)
    5e3d:	aa                   	stos   %al,%es:(%rdi)
    5e3e:	aa                   	stos   %al,%es:(%rdi)
    5e3f:	aa                   	stos   %al,%es:(%rdi)
    5e40:	aa                   	stos   %al,%es:(%rdi)
    5e41:	aa                   	stos   %al,%es:(%rdi)
    5e42:	aa                   	stos   %al,%es:(%rdi)
    5e43:	aa                   	stos   %al,%es:(%rdi)
    5e44:	aa                   	stos   %al,%es:(%rdi)
    5e45:	aa                   	stos   %al,%es:(%rdi)
    5e46:	aa                   	stos   %al,%es:(%rdi)
    5e47:	aa                   	stos   %al,%es:(%rdi)
    5e48:	aa                   	stos   %al,%es:(%rdi)
    5e49:	aa                   	stos   %al,%es:(%rdi)
    5e4a:	aa                   	stos   %al,%es:(%rdi)
    5e4b:	aa                   	stos   %al,%es:(%rdi)
    5e4c:	aa                   	stos   %al,%es:(%rdi)
    5e4d:	aa                   	stos   %al,%es:(%rdi)
    5e4e:	aa                   	stos   %al,%es:(%rdi)
    5e4f:	aa                   	stos   %al,%es:(%rdi)
    5e50:	aa                   	stos   %al,%es:(%rdi)
    5e51:	aa                   	stos   %al,%es:(%rdi)
    5e52:	aa                   	stos   %al,%es:(%rdi)
    5e53:	aa                   	stos   %al,%es:(%rdi)
    5e54:	aa                   	stos   %al,%es:(%rdi)
    5e55:	aa                   	stos   %al,%es:(%rdi)
    5e56:	aa                   	stos   %al,%es:(%rdi)
    5e57:	aa                   	stos   %al,%es:(%rdi)
    5e58:	aa                   	stos   %al,%es:(%rdi)
    5e59:	aa                   	stos   %al,%es:(%rdi)
    5e5a:	aa                   	stos   %al,%es:(%rdi)
    5e5b:	aa                   	stos   %al,%es:(%rdi)
    5e5c:	aa                   	stos   %al,%es:(%rdi)
    5e5d:	aa                   	stos   %al,%es:(%rdi)
    5e5e:	aa                   	stos   %al,%es:(%rdi)
    5e5f:	aa                   	stos   %al,%es:(%rdi)
    5e60:	aa                   	stos   %al,%es:(%rdi)
    5e61:	aa                   	stos   %al,%es:(%rdi)
    5e62:	aa                   	stos   %al,%es:(%rdi)
    5e63:	aa                   	stos   %al,%es:(%rdi)
    5e64:	aa                   	stos   %al,%es:(%rdi)
    5e65:	aa                   	stos   %al,%es:(%rdi)
    5e66:	aa                   	stos   %al,%es:(%rdi)
    5e67:	aa                   	stos   %al,%es:(%rdi)
    5e68:	aa                   	stos   %al,%es:(%rdi)
    5e69:	aa                   	stos   %al,%es:(%rdi)
    5e6a:	aa                   	stos   %al,%es:(%rdi)
    5e6b:	aa                   	stos   %al,%es:(%rdi)
    5e6c:	aa                   	stos   %al,%es:(%rdi)
    5e6d:	aa                   	stos   %al,%es:(%rdi)
    5e6e:	aa                   	stos   %al,%es:(%rdi)
    5e6f:	aa                   	stos   %al,%es:(%rdi)
    5e70:	aa                   	stos   %al,%es:(%rdi)
    5e71:	aa                   	stos   %al,%es:(%rdi)
    5e72:	aa                   	stos   %al,%es:(%rdi)
    5e73:	aa                   	stos   %al,%es:(%rdi)
    5e74:	aa                   	stos   %al,%es:(%rdi)
    5e75:	aa                   	stos   %al,%es:(%rdi)
    5e76:	aa                   	stos   %al,%es:(%rdi)
    5e77:	aa                   	stos   %al,%es:(%rdi)
    5e78:	aa                   	stos   %al,%es:(%rdi)
    5e79:	aa                   	stos   %al,%es:(%rdi)
    5e7a:	aa                   	stos   %al,%es:(%rdi)
    5e7b:	aa                   	stos   %al,%es:(%rdi)
    5e7c:	aa                   	stos   %al,%es:(%rdi)
    5e7d:	aa                   	stos   %al,%es:(%rdi)
    5e7e:	aa                   	stos   %al,%es:(%rdi)
    5e7f:	aa                   	stos   %al,%es:(%rdi)
    5e80:	aa                   	stos   %al,%es:(%rdi)
    5e81:	aa                   	stos   %al,%es:(%rdi)
    5e82:	aa                   	stos   %al,%es:(%rdi)
    5e83:	aa                   	stos   %al,%es:(%rdi)
    5e84:	aa                   	stos   %al,%es:(%rdi)
    5e85:	aa                   	stos   %al,%es:(%rdi)
    5e86:	aa                   	stos   %al,%es:(%rdi)
    5e87:	aa                   	stos   %al,%es:(%rdi)
    5e88:	aa                   	stos   %al,%es:(%rdi)
    5e89:	aa                   	stos   %al,%es:(%rdi)
    5e8a:	aa                   	stos   %al,%es:(%rdi)
    5e8b:	aa                   	stos   %al,%es:(%rdi)
    5e8c:	aa                   	stos   %al,%es:(%rdi)
    5e8d:	aa                   	stos   %al,%es:(%rdi)
    5e8e:	aa                   	stos   %al,%es:(%rdi)
    5e8f:	aa                   	stos   %al,%es:(%rdi)
    5e90:	aa                   	stos   %al,%es:(%rdi)
    5e91:	aa                   	stos   %al,%es:(%rdi)
    5e92:	aa                   	stos   %al,%es:(%rdi)
    5e93:	aa                   	stos   %al,%es:(%rdi)
    5e94:	aa                   	stos   %al,%es:(%rdi)
    5e95:	aa                   	stos   %al,%es:(%rdi)
    5e96:	aa                   	stos   %al,%es:(%rdi)
    5e97:	aa                   	stos   %al,%es:(%rdi)
    5e98:	aa                   	stos   %al,%es:(%rdi)
    5e99:	aa                   	stos   %al,%es:(%rdi)
    5e9a:	aa                   	stos   %al,%es:(%rdi)
    5e9b:	aa                   	stos   %al,%es:(%rdi)
    5e9c:	aa                   	stos   %al,%es:(%rdi)
    5e9d:	aa                   	stos   %al,%es:(%rdi)
    5e9e:	aa                   	stos   %al,%es:(%rdi)
    5e9f:	aa                   	stos   %al,%es:(%rdi)
    5ea0:	aa                   	stos   %al,%es:(%rdi)
    5ea1:	aa                   	stos   %al,%es:(%rdi)
    5ea2:	aa                   	stos   %al,%es:(%rdi)
    5ea3:	aa                   	stos   %al,%es:(%rdi)
    5ea4:	aa                   	stos   %al,%es:(%rdi)
    5ea5:	aa                   	stos   %al,%es:(%rdi)
    5ea6:	aa                   	stos   %al,%es:(%rdi)
    5ea7:	aa                   	stos   %al,%es:(%rdi)
    5ea8:	aa                   	stos   %al,%es:(%rdi)
    5ea9:	aa                   	stos   %al,%es:(%rdi)
    5eaa:	aa                   	stos   %al,%es:(%rdi)
    5eab:	aa                   	stos   %al,%es:(%rdi)
    5eac:	aa                   	stos   %al,%es:(%rdi)
    5ead:	aa                   	stos   %al,%es:(%rdi)
    5eae:	aa                   	stos   %al,%es:(%rdi)
    5eaf:	aa                   	stos   %al,%es:(%rdi)
    5eb0:	aa                   	stos   %al,%es:(%rdi)
    5eb1:	aa                   	stos   %al,%es:(%rdi)
    5eb2:	aa                   	stos   %al,%es:(%rdi)
    5eb3:	aa                   	stos   %al,%es:(%rdi)
    5eb4:	aa                   	stos   %al,%es:(%rdi)
    5eb5:	aa                   	stos   %al,%es:(%rdi)
    5eb6:	aa                   	stos   %al,%es:(%rdi)
    5eb7:	aa                   	stos   %al,%es:(%rdi)
    5eb8:	aa                   	stos   %al,%es:(%rdi)
    5eb9:	aa                   	stos   %al,%es:(%rdi)
    5eba:	aa                   	stos   %al,%es:(%rdi)
    5ebb:	aa                   	stos   %al,%es:(%rdi)
    5ebc:	aa                   	stos   %al,%es:(%rdi)
    5ebd:	aa                   	stos   %al,%es:(%rdi)
    5ebe:	aa                   	stos   %al,%es:(%rdi)
    5ebf:	aa                   	stos   %al,%es:(%rdi)
    5ec0:	aa                   	stos   %al,%es:(%rdi)
    5ec1:	aa                   	stos   %al,%es:(%rdi)
    5ec2:	aa                   	stos   %al,%es:(%rdi)
    5ec3:	aa                   	stos   %al,%es:(%rdi)
    5ec4:	aa                   	stos   %al,%es:(%rdi)
    5ec5:	aa                   	stos   %al,%es:(%rdi)
    5ec6:	aa                   	stos   %al,%es:(%rdi)
    5ec7:	aa                   	stos   %al,%es:(%rdi)
    5ec8:	aa                   	stos   %al,%es:(%rdi)
    5ec9:	aa                   	stos   %al,%es:(%rdi)
    5eca:	aa                   	stos   %al,%es:(%rdi)
    5ecb:	aa                   	stos   %al,%es:(%rdi)
    5ecc:	aa                   	stos   %al,%es:(%rdi)
    5ecd:	aa                   	stos   %al,%es:(%rdi)
    5ece:	aa                   	stos   %al,%es:(%rdi)
    5ecf:	aa                   	stos   %al,%es:(%rdi)
    5ed0:	aa                   	stos   %al,%es:(%rdi)
    5ed1:	aa                   	stos   %al,%es:(%rdi)
    5ed2:	aa                   	stos   %al,%es:(%rdi)
    5ed3:	aa                   	stos   %al,%es:(%rdi)
    5ed4:	aa                   	stos   %al,%es:(%rdi)
    5ed5:	aa                   	stos   %al,%es:(%rdi)
    5ed6:	aa                   	stos   %al,%es:(%rdi)
    5ed7:	aa                   	stos   %al,%es:(%rdi)
    5ed8:	aa                   	stos   %al,%es:(%rdi)
    5ed9:	aa                   	stos   %al,%es:(%rdi)
    5eda:	aa                   	stos   %al,%es:(%rdi)
    5edb:	aa                   	stos   %al,%es:(%rdi)
    5edc:	aa                   	stos   %al,%es:(%rdi)
    5edd:	aa                   	stos   %al,%es:(%rdi)
    5ede:	aa                   	stos   %al,%es:(%rdi)
    5edf:	aa                   	stos   %al,%es:(%rdi)
    5ee0:	aa                   	stos   %al,%es:(%rdi)
    5ee1:	aa                   	stos   %al,%es:(%rdi)
    5ee2:	aa                   	stos   %al,%es:(%rdi)
    5ee3:	aa                   	stos   %al,%es:(%rdi)
    5ee4:	aa                   	stos   %al,%es:(%rdi)
    5ee5:	aa                   	stos   %al,%es:(%rdi)
    5ee6:	aa                   	stos   %al,%es:(%rdi)
    5ee7:	aa                   	stos   %al,%es:(%rdi)
    5ee8:	aa                   	stos   %al,%es:(%rdi)
    5ee9:	aa                   	stos   %al,%es:(%rdi)
    5eea:	aa                   	stos   %al,%es:(%rdi)
    5eeb:	aa                   	stos   %al,%es:(%rdi)
    5eec:	aa                   	stos   %al,%es:(%rdi)
    5eed:	aa                   	stos   %al,%es:(%rdi)
    5eee:	aa                   	stos   %al,%es:(%rdi)
    5eef:	aa                   	stos   %al,%es:(%rdi)
    5ef0:	aa                   	stos   %al,%es:(%rdi)
    5ef1:	aa                   	stos   %al,%es:(%rdi)
    5ef2:	aa                   	stos   %al,%es:(%rdi)
    5ef3:	aa                   	stos   %al,%es:(%rdi)
    5ef4:	aa                   	stos   %al,%es:(%rdi)
    5ef5:	aa                   	stos   %al,%es:(%rdi)
    5ef6:	aa                   	stos   %al,%es:(%rdi)
    5ef7:	aa                   	stos   %al,%es:(%rdi)
    5ef8:	aa                   	stos   %al,%es:(%rdi)
    5ef9:	aa                   	stos   %al,%es:(%rdi)
    5efa:	aa                   	stos   %al,%es:(%rdi)
    5efb:	aa                   	stos   %al,%es:(%rdi)
    5efc:	aa                   	stos   %al,%es:(%rdi)
    5efd:	aa                   	stos   %al,%es:(%rdi)
    5efe:	aa                   	stos   %al,%es:(%rdi)
    5eff:	aa                   	stos   %al,%es:(%rdi)
    5f00:	aa                   	stos   %al,%es:(%rdi)
    5f01:	aa                   	stos   %al,%es:(%rdi)
    5f02:	aa                   	stos   %al,%es:(%rdi)
    5f03:	aa                   	stos   %al,%es:(%rdi)
    5f04:	aa                   	stos   %al,%es:(%rdi)
    5f05:	aa                   	stos   %al,%es:(%rdi)
    5f06:	aa                   	stos   %al,%es:(%rdi)
    5f07:	aa                   	stos   %al,%es:(%rdi)
    5f08:	aa                   	stos   %al,%es:(%rdi)
    5f09:	aa                   	stos   %al,%es:(%rdi)
    5f0a:	aa                   	stos   %al,%es:(%rdi)
    5f0b:	aa                   	stos   %al,%es:(%rdi)
    5f0c:	aa                   	stos   %al,%es:(%rdi)
    5f0d:	aa                   	stos   %al,%es:(%rdi)
    5f0e:	aa                   	stos   %al,%es:(%rdi)
    5f0f:	aa                   	stos   %al,%es:(%rdi)
    5f10:	aa                   	stos   %al,%es:(%rdi)
    5f11:	aa                   	stos   %al,%es:(%rdi)
    5f12:	aa                   	stos   %al,%es:(%rdi)
    5f13:	aa                   	stos   %al,%es:(%rdi)
    5f14:	aa                   	stos   %al,%es:(%rdi)
    5f15:	aa                   	stos   %al,%es:(%rdi)
    5f16:	aa                   	stos   %al,%es:(%rdi)
    5f17:	aa                   	stos   %al,%es:(%rdi)
    5f18:	aa                   	stos   %al,%es:(%rdi)
    5f19:	aa                   	stos   %al,%es:(%rdi)
    5f1a:	aa                   	stos   %al,%es:(%rdi)
    5f1b:	aa                   	stos   %al,%es:(%rdi)
    5f1c:	aa                   	stos   %al,%es:(%rdi)
    5f1d:	aa                   	stos   %al,%es:(%rdi)
    5f1e:	aa                   	stos   %al,%es:(%rdi)
    5f1f:	aa                   	stos   %al,%es:(%rdi)
    5f20:	aa                   	stos   %al,%es:(%rdi)
    5f21:	aa                   	stos   %al,%es:(%rdi)
    5f22:	aa                   	stos   %al,%es:(%rdi)
    5f23:	aa                   	stos   %al,%es:(%rdi)
    5f24:	aa                   	stos   %al,%es:(%rdi)
    5f25:	aa                   	stos   %al,%es:(%rdi)
    5f26:	aa                   	stos   %al,%es:(%rdi)
    5f27:	aa                   	stos   %al,%es:(%rdi)
    5f28:	aa                   	stos   %al,%es:(%rdi)
    5f29:	aa                   	stos   %al,%es:(%rdi)
    5f2a:	aa                   	stos   %al,%es:(%rdi)
    5f2b:	aa                   	stos   %al,%es:(%rdi)
    5f2c:	aa                   	stos   %al,%es:(%rdi)
    5f2d:	aa                   	stos   %al,%es:(%rdi)
    5f2e:	aa                   	stos   %al,%es:(%rdi)
    5f2f:	aa                   	stos   %al,%es:(%rdi)
    5f30:	aa                   	stos   %al,%es:(%rdi)
    5f31:	aa                   	stos   %al,%es:(%rdi)
    5f32:	aa                   	stos   %al,%es:(%rdi)
    5f33:	aa                   	stos   %al,%es:(%rdi)
    5f34:	aa                   	stos   %al,%es:(%rdi)
    5f35:	aa                   	stos   %al,%es:(%rdi)
    5f36:	aa                   	stos   %al,%es:(%rdi)
    5f37:	aa                   	stos   %al,%es:(%rdi)
    5f38:	aa                   	stos   %al,%es:(%rdi)
    5f39:	aa                   	stos   %al,%es:(%rdi)
    5f3a:	aa                   	stos   %al,%es:(%rdi)
    5f3b:	aa                   	stos   %al,%es:(%rdi)
    5f3c:	aa                   	stos   %al,%es:(%rdi)
    5f3d:	aa                   	stos   %al,%es:(%rdi)
    5f3e:	aa                   	stos   %al,%es:(%rdi)
    5f3f:	aa                   	stos   %al,%es:(%rdi)
    5f40:	aa                   	stos   %al,%es:(%rdi)
    5f41:	aa                   	stos   %al,%es:(%rdi)
    5f42:	aa                   	stos   %al,%es:(%rdi)
    5f43:	aa                   	stos   %al,%es:(%rdi)
    5f44:	aa                   	stos   %al,%es:(%rdi)
    5f45:	aa                   	stos   %al,%es:(%rdi)
    5f46:	aa                   	stos   %al,%es:(%rdi)
    5f47:	aa                   	stos   %al,%es:(%rdi)
    5f48:	aa                   	stos   %al,%es:(%rdi)
    5f49:	aa                   	stos   %al,%es:(%rdi)
    5f4a:	aa                   	stos   %al,%es:(%rdi)
    5f4b:	aa                   	stos   %al,%es:(%rdi)
    5f4c:	aa                   	stos   %al,%es:(%rdi)
    5f4d:	aa                   	stos   %al,%es:(%rdi)
    5f4e:	aa                   	stos   %al,%es:(%rdi)
    5f4f:	aa                   	stos   %al,%es:(%rdi)
    5f50:	aa                   	stos   %al,%es:(%rdi)
    5f51:	aa                   	stos   %al,%es:(%rdi)
    5f52:	aa                   	stos   %al,%es:(%rdi)
    5f53:	aa                   	stos   %al,%es:(%rdi)
    5f54:	aa                   	stos   %al,%es:(%rdi)
    5f55:	aa                   	stos   %al,%es:(%rdi)
    5f56:	aa                   	stos   %al,%es:(%rdi)
    5f57:	aa                   	stos   %al,%es:(%rdi)
    5f58:	aa                   	stos   %al,%es:(%rdi)
    5f59:	aa                   	stos   %al,%es:(%rdi)
    5f5a:	aa                   	stos   %al,%es:(%rdi)
    5f5b:	aa                   	stos   %al,%es:(%rdi)
    5f5c:	aa                   	stos   %al,%es:(%rdi)
    5f5d:	aa                   	stos   %al,%es:(%rdi)
    5f5e:	aa                   	stos   %al,%es:(%rdi)
    5f5f:	aa                   	stos   %al,%es:(%rdi)
    5f60:	aa                   	stos   %al,%es:(%rdi)
    5f61:	aa                   	stos   %al,%es:(%rdi)
    5f62:	aa                   	stos   %al,%es:(%rdi)
    5f63:	aa                   	stos   %al,%es:(%rdi)
    5f64:	aa                   	stos   %al,%es:(%rdi)
    5f65:	aa                   	stos   %al,%es:(%rdi)
    5f66:	aa                   	stos   %al,%es:(%rdi)
    5f67:	aa                   	stos   %al,%es:(%rdi)
    5f68:	aa                   	stos   %al,%es:(%rdi)
    5f69:	aa                   	stos   %al,%es:(%rdi)
    5f6a:	aa                   	stos   %al,%es:(%rdi)
    5f6b:	aa                   	stos   %al,%es:(%rdi)
    5f6c:	aa                   	stos   %al,%es:(%rdi)
    5f6d:	aa                   	stos   %al,%es:(%rdi)
    5f6e:	aa                   	stos   %al,%es:(%rdi)
    5f6f:	aa                   	stos   %al,%es:(%rdi)
    5f70:	aa                   	stos   %al,%es:(%rdi)
    5f71:	aa                   	stos   %al,%es:(%rdi)
    5f72:	aa                   	stos   %al,%es:(%rdi)
    5f73:	aa                   	stos   %al,%es:(%rdi)
    5f74:	aa                   	stos   %al,%es:(%rdi)
    5f75:	aa                   	stos   %al,%es:(%rdi)
    5f76:	aa                   	stos   %al,%es:(%rdi)
    5f77:	aa                   	stos   %al,%es:(%rdi)
    5f78:	aa                   	stos   %al,%es:(%rdi)
    5f79:	aa                   	stos   %al,%es:(%rdi)
    5f7a:	aa                   	stos   %al,%es:(%rdi)
    5f7b:	aa                   	stos   %al,%es:(%rdi)
    5f7c:	aa                   	stos   %al,%es:(%rdi)
    5f7d:	aa                   	stos   %al,%es:(%rdi)
    5f7e:	aa                   	stos   %al,%es:(%rdi)
    5f7f:	aa                   	stos   %al,%es:(%rdi)
    5f80:	aa                   	stos   %al,%es:(%rdi)
    5f81:	aa                   	stos   %al,%es:(%rdi)
    5f82:	aa                   	stos   %al,%es:(%rdi)
    5f83:	aa                   	stos   %al,%es:(%rdi)
    5f84:	aa                   	stos   %al,%es:(%rdi)
    5f85:	aa                   	stos   %al,%es:(%rdi)
    5f86:	aa                   	stos   %al,%es:(%rdi)
    5f87:	aa                   	stos   %al,%es:(%rdi)
    5f88:	aa                   	stos   %al,%es:(%rdi)
    5f89:	aa                   	stos   %al,%es:(%rdi)
    5f8a:	aa                   	stos   %al,%es:(%rdi)
    5f8b:	aa                   	stos   %al,%es:(%rdi)
    5f8c:	aa                   	stos   %al,%es:(%rdi)
    5f8d:	aa                   	stos   %al,%es:(%rdi)
    5f8e:	aa                   	stos   %al,%es:(%rdi)
    5f8f:	aa                   	stos   %al,%es:(%rdi)
    5f90:	aa                   	stos   %al,%es:(%rdi)
    5f91:	aa                   	stos   %al,%es:(%rdi)
    5f92:	aa                   	stos   %al,%es:(%rdi)
    5f93:	aa                   	stos   %al,%es:(%rdi)
    5f94:	aa                   	stos   %al,%es:(%rdi)
    5f95:	aa                   	stos   %al,%es:(%rdi)
    5f96:	aa                   	stos   %al,%es:(%rdi)
    5f97:	aa                   	stos   %al,%es:(%rdi)
    5f98:	aa                   	stos   %al,%es:(%rdi)
    5f99:	aa                   	stos   %al,%es:(%rdi)
    5f9a:	aa                   	stos   %al,%es:(%rdi)
    5f9b:	aa                   	stos   %al,%es:(%rdi)
    5f9c:	aa                   	stos   %al,%es:(%rdi)
    5f9d:	aa                   	stos   %al,%es:(%rdi)
    5f9e:	aa                   	stos   %al,%es:(%rdi)
    5f9f:	aa                   	stos   %al,%es:(%rdi)
    5fa0:	aa                   	stos   %al,%es:(%rdi)
    5fa1:	aa                   	stos   %al,%es:(%rdi)
    5fa2:	aa                   	stos   %al,%es:(%rdi)
    5fa3:	aa                   	stos   %al,%es:(%rdi)
    5fa4:	aa                   	stos   %al,%es:(%rdi)
    5fa5:	aa                   	stos   %al,%es:(%rdi)
    5fa6:	aa                   	stos   %al,%es:(%rdi)
    5fa7:	aa                   	stos   %al,%es:(%rdi)
    5fa8:	aa                   	stos   %al,%es:(%rdi)
    5fa9:	aa                   	stos   %al,%es:(%rdi)
    5faa:	aa                   	stos   %al,%es:(%rdi)
    5fab:	aa                   	stos   %al,%es:(%rdi)
    5fac:	aa                   	stos   %al,%es:(%rdi)
    5fad:	aa                   	stos   %al,%es:(%rdi)
    5fae:	aa                   	stos   %al,%es:(%rdi)
    5faf:	aa                   	stos   %al,%es:(%rdi)
    5fb0:	aa                   	stos   %al,%es:(%rdi)
    5fb1:	aa                   	stos   %al,%es:(%rdi)
    5fb2:	aa                   	stos   %al,%es:(%rdi)
    5fb3:	aa                   	stos   %al,%es:(%rdi)
    5fb4:	aa                   	stos   %al,%es:(%rdi)
    5fb5:	aa                   	stos   %al,%es:(%rdi)
    5fb6:	aa                   	stos   %al,%es:(%rdi)
    5fb7:	aa                   	stos   %al,%es:(%rdi)
    5fb8:	aa                   	stos   %al,%es:(%rdi)
    5fb9:	aa                   	stos   %al,%es:(%rdi)
    5fba:	aa                   	stos   %al,%es:(%rdi)
    5fbb:	aa                   	stos   %al,%es:(%rdi)
    5fbc:	aa                   	stos   %al,%es:(%rdi)
    5fbd:	aa                   	stos   %al,%es:(%rdi)
    5fbe:	aa                   	stos   %al,%es:(%rdi)
    5fbf:	aa                   	stos   %al,%es:(%rdi)
    5fc0:	aa                   	stos   %al,%es:(%rdi)
    5fc1:	aa                   	stos   %al,%es:(%rdi)
    5fc2:	aa                   	stos   %al,%es:(%rdi)
    5fc3:	aa                   	stos   %al,%es:(%rdi)
    5fc4:	aa                   	stos   %al,%es:(%rdi)
    5fc5:	aa                   	stos   %al,%es:(%rdi)
    5fc6:	aa                   	stos   %al,%es:(%rdi)
    5fc7:	aa                   	stos   %al,%es:(%rdi)
    5fc8:	aa                   	stos   %al,%es:(%rdi)
    5fc9:	aa                   	stos   %al,%es:(%rdi)
    5fca:	aa                   	stos   %al,%es:(%rdi)
    5fcb:	aa                   	stos   %al,%es:(%rdi)
    5fcc:	aa                   	stos   %al,%es:(%rdi)
    5fcd:	aa                   	stos   %al,%es:(%rdi)
    5fce:	aa                   	stos   %al,%es:(%rdi)
    5fcf:	aa                   	stos   %al,%es:(%rdi)
    5fd0:	aa                   	stos   %al,%es:(%rdi)
    5fd1:	aa                   	stos   %al,%es:(%rdi)
    5fd2:	aa                   	stos   %al,%es:(%rdi)
    5fd3:	aa                   	stos   %al,%es:(%rdi)
    5fd4:	aa                   	stos   %al,%es:(%rdi)
    5fd5:	aa                   	stos   %al,%es:(%rdi)
    5fd6:	aa                   	stos   %al,%es:(%rdi)
    5fd7:	aa                   	stos   %al,%es:(%rdi)
    5fd8:	aa                   	stos   %al,%es:(%rdi)
    5fd9:	aa                   	stos   %al,%es:(%rdi)
    5fda:	aa                   	stos   %al,%es:(%rdi)
    5fdb:	aa                   	stos   %al,%es:(%rdi)
    5fdc:	aa                   	stos   %al,%es:(%rdi)
    5fdd:	aa                   	stos   %al,%es:(%rdi)
    5fde:	aa                   	stos   %al,%es:(%rdi)
    5fdf:	aa                   	stos   %al,%es:(%rdi)
    5fe0:	aa                   	stos   %al,%es:(%rdi)
    5fe1:	aa                   	stos   %al,%es:(%rdi)
    5fe2:	aa                   	stos   %al,%es:(%rdi)
    5fe3:	aa                   	stos   %al,%es:(%rdi)
    5fe4:	aa                   	stos   %al,%es:(%rdi)
    5fe5:	aa                   	stos   %al,%es:(%rdi)
    5fe6:	aa                   	stos   %al,%es:(%rdi)
    5fe7:	aa                   	stos   %al,%es:(%rdi)
    5fe8:	aa                   	stos   %al,%es:(%rdi)
    5fe9:	aa                   	stos   %al,%es:(%rdi)
    5fea:	aa                   	stos   %al,%es:(%rdi)
    5feb:	aa                   	stos   %al,%es:(%rdi)
    5fec:	aa                   	stos   %al,%es:(%rdi)
    5fed:	aa                   	stos   %al,%es:(%rdi)
    5fee:	aa                   	stos   %al,%es:(%rdi)
    5fef:	aa                   	stos   %al,%es:(%rdi)
    5ff0:	aa                   	stos   %al,%es:(%rdi)
    5ff1:	aa                   	stos   %al,%es:(%rdi)
    5ff2:	aa                   	stos   %al,%es:(%rdi)
    5ff3:	aa                   	stos   %al,%es:(%rdi)
    5ff4:	aa                   	stos   %al,%es:(%rdi)
    5ff5:	aa                   	stos   %al,%es:(%rdi)
    5ff6:	aa                   	stos   %al,%es:(%rdi)
    5ff7:	aa                   	stos   %al,%es:(%rdi)
    5ff8:	aa                   	stos   %al,%es:(%rdi)
    5ff9:	aa                   	stos   %al,%es:(%rdi)
    5ffa:	aa                   	stos   %al,%es:(%rdi)
    5ffb:	aa                   	stos   %al,%es:(%rdi)
    5ffc:	aa                   	stos   %al,%es:(%rdi)
    5ffd:	aa                   	stos   %al,%es:(%rdi)
    5ffe:	aa                   	stos   %al,%es:(%rdi)
    5fff:	aa                   	stos   %al,%es:(%rdi)

0000000000006000 <tss0>:
	...
    604c:	00 60 00 00 00 00 00 00 00 50 00 00 00 00 00 00     .`.......P......
	...
    6064:	00 00 ff ff 40 da 11 00 00 00 00 00                 ....@.......

0000000000006070 <gdt>:
	...
    6078:	ff                   	(bad)  
    6079:	ff 00                	incl   (%rax)
    607b:	00 00                	add    %al,(%rax)
    607d:	9a                   	(bad)  
    607e:	cf                   	iret   
    607f:	00 ff                	add    %bh,%bh
    6081:	ff 00                	incl   (%rax)
    6083:	00 00                	add    %al,(%rax)
    6085:	92                   	xchg   %eax,%edx
    6086:	cf                   	iret   
    6087:	00 00                	add    %al,(%rax)
    6089:	00 00                	add    %al,(%rax)
    608b:	00 00                	add    %al,(%rax)
    608d:	98                   	cwtl   
    608e:	20 00                	and    %al,(%rax)
    6090:	00 00                	add    %al,(%rax)
    6092:	00 00                	add    %al,(%rax)
    6094:	00 92 00 00 ff ff    	add    %dl,-0x10000(%rdx)
    609a:	00 00                	add    %al,(%rax)
    609c:	00 fa                	add    %bh,%dl
    609e:	cf                   	iret   
    609f:	00 00                	add    %al,(%rax)
    60a1:	00 00                	add    %al,(%rax)
    60a3:	00 00                	add    %al,(%rax)
    60a5:	f2 00 00             	repnz add %al,(%rax)
    60a8:	00 00                	add    %al,(%rax)
    60aa:	00 00                	add    %al,(%rax)
    60ac:	00 f8                	add    %bh,%al
    60ae:	20 00                	and    %al,(%rax)
    60b0:	6f                   	outsl  %ds:(%rsi),(%dx)
    60b1:	00 00                	add    %al,(%rax)
    60b3:	60                   	(bad)  
    60b4:	00 89 00 00 00 00    	add    %cl,0x0(%rcx)
    60ba:	00 00                	add    %al,(%rax)
    60bc:	00 00                	add    %al,(%rax)
	...

00000000000060c0 <gdt48>:
    60c0:	4f 00 70 60          	rex.WRXB add %r14b,0x60(%r8)
	...

00000000000060c6 <gdt80>:
    60c6:	4f 00 70 60          	rex.WRXB add %r14b,0x60(%r8)
    60ca:	00 00                	add    %al,(%rax)
    60cc:	00 00                	add    %al,(%rax)
    60ce:	00 00                	add    %al,(%rax)
    60d0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    60d7:	00 00 00 
    60da:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    60e1:	00 00 00 
    60e4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    60eb:	00 00 00 
    60ee:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    60f5:	00 00 00 
    60f8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    60ff:	00 00 00 
    6102:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6109:	00 00 00 
    610c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6113:	00 00 00 
    6116:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    611d:	00 00 00 
    6120:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6127:	00 00 00 
    612a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6131:	00 00 00 
    6134:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    613b:	00 00 00 
    613e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6145:	00 00 00 
    6148:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    614f:	00 00 00 
    6152:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6159:	00 00 00 
    615c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6163:	00 00 00 
    6166:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    616d:	00 00 00 
    6170:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6177:	00 00 00 
    617a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6181:	00 00 00 
    6184:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    618b:	00 00 00 
    618e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6195:	00 00 00 
    6198:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    619f:	00 00 00 
    61a2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    61a9:	00 00 00 
    61ac:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    61b3:	00 00 00 
    61b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    61bd:	00 00 00 
    61c0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    61c7:	00 00 00 
    61ca:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    61d1:	00 00 00 
    61d4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    61db:	00 00 00 
    61de:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    61e5:	00 00 00 
    61e8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    61ef:	00 00 00 
    61f2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    61f9:	00 00 00 
    61fc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6203:	00 00 00 
    6206:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    620d:	00 00 00 
    6210:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6217:	00 00 00 
    621a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6221:	00 00 00 
    6224:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    622b:	00 00 00 
    622e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6235:	00 00 00 
    6238:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    623f:	00 00 00 
    6242:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6249:	00 00 00 
    624c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6253:	00 00 00 
    6256:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    625d:	00 00 00 
    6260:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6267:	00 00 00 
    626a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6271:	00 00 00 
    6274:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    627b:	00 00 00 
    627e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6285:	00 00 00 
    6288:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    628f:	00 00 00 
    6292:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6299:	00 00 00 
    629c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    62a3:	00 00 00 
    62a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    62ad:	00 00 00 
    62b0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    62b7:	00 00 00 
    62ba:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    62c1:	00 00 00 
    62c4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    62cb:	00 00 00 
    62ce:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    62d5:	00 00 00 
    62d8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    62df:	00 00 00 
    62e2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    62e9:	00 00 00 
    62ec:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    62f3:	00 00 00 
    62f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    62fd:	00 00 00 
    6300:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6307:	00 00 00 
    630a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6311:	00 00 00 
    6314:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    631b:	00 00 00 
    631e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6325:	00 00 00 
    6328:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    632f:	00 00 00 
    6332:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6339:	00 00 00 
    633c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6343:	00 00 00 
    6346:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    634d:	00 00 00 
    6350:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6357:	00 00 00 
    635a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6361:	00 00 00 
    6364:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    636b:	00 00 00 
    636e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6375:	00 00 00 
    6378:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    637f:	00 00 00 
    6382:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6389:	00 00 00 
    638c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6393:	00 00 00 
    6396:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    639d:	00 00 00 
    63a0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    63a7:	00 00 00 
    63aa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    63b1:	00 00 00 
    63b4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    63bb:	00 00 00 
    63be:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    63c5:	00 00 00 
    63c8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    63cf:	00 00 00 
    63d2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    63d9:	00 00 00 
    63dc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    63e3:	00 00 00 
    63e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    63ed:	00 00 00 
    63f0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    63f7:	00 00 00 
    63fa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6401:	00 00 00 
    6404:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    640b:	00 00 00 
    640e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6415:	00 00 00 
    6418:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    641f:	00 00 00 
    6422:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6429:	00 00 00 
    642c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6433:	00 00 00 
    6436:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    643d:	00 00 00 
    6440:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6447:	00 00 00 
    644a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6451:	00 00 00 
    6454:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    645b:	00 00 00 
    645e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6465:	00 00 00 
    6468:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    646f:	00 00 00 
    6472:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6479:	00 00 00 
    647c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6483:	00 00 00 
    6486:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    648d:	00 00 00 
    6490:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6497:	00 00 00 
    649a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    64a1:	00 00 00 
    64a4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    64ab:	00 00 00 
    64ae:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    64b5:	00 00 00 
    64b8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    64bf:	00 00 00 
    64c2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    64c9:	00 00 00 
    64cc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    64d3:	00 00 00 
    64d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    64dd:	00 00 00 
    64e0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    64e7:	00 00 00 
    64ea:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    64f1:	00 00 00 
    64f4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    64fb:	00 00 00 
    64fe:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6505:	00 00 00 
    6508:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    650f:	00 00 00 
    6512:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6519:	00 00 00 
    651c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6523:	00 00 00 
    6526:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    652d:	00 00 00 
    6530:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6537:	00 00 00 
    653a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6541:	00 00 00 
    6544:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    654b:	00 00 00 
    654e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6555:	00 00 00 
    6558:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    655f:	00 00 00 
    6562:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6569:	00 00 00 
    656c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6573:	00 00 00 
    6576:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    657d:	00 00 00 
    6580:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6587:	00 00 00 
    658a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6591:	00 00 00 
    6594:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    659b:	00 00 00 
    659e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    65a5:	00 00 00 
    65a8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    65af:	00 00 00 
    65b2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    65b9:	00 00 00 
    65bc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    65c3:	00 00 00 
    65c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    65cd:	00 00 00 
    65d0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    65d7:	00 00 00 
    65da:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    65e1:	00 00 00 
    65e4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    65eb:	00 00 00 
    65ee:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    65f5:	00 00 00 
    65f8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    65ff:	00 00 00 
    6602:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6609:	00 00 00 
    660c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6613:	00 00 00 
    6616:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    661d:	00 00 00 
    6620:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6627:	00 00 00 
    662a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6631:	00 00 00 
    6634:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    663b:	00 00 00 
    663e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6645:	00 00 00 
    6648:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    664f:	00 00 00 
    6652:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6659:	00 00 00 
    665c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6663:	00 00 00 
    6666:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    666d:	00 00 00 
    6670:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6677:	00 00 00 
    667a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6681:	00 00 00 
    6684:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    668b:	00 00 00 
    668e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6695:	00 00 00 
    6698:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    669f:	00 00 00 
    66a2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    66a9:	00 00 00 
    66ac:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    66b3:	00 00 00 
    66b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    66bd:	00 00 00 
    66c0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    66c7:	00 00 00 
    66ca:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    66d1:	00 00 00 
    66d4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    66db:	00 00 00 
    66de:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    66e5:	00 00 00 
    66e8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    66ef:	00 00 00 
    66f2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    66f9:	00 00 00 
    66fc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6703:	00 00 00 
    6706:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    670d:	00 00 00 
    6710:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6717:	00 00 00 
    671a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6721:	00 00 00 
    6724:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    672b:	00 00 00 
    672e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6735:	00 00 00 
    6738:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    673f:	00 00 00 
    6742:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6749:	00 00 00 
    674c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6753:	00 00 00 
    6756:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    675d:	00 00 00 
    6760:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6767:	00 00 00 
    676a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6771:	00 00 00 
    6774:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    677b:	00 00 00 
    677e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6785:	00 00 00 
    6788:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    678f:	00 00 00 
    6792:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6799:	00 00 00 
    679c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    67a3:	00 00 00 
    67a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    67ad:	00 00 00 
    67b0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    67b7:	00 00 00 
    67ba:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    67c1:	00 00 00 
    67c4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    67cb:	00 00 00 
    67ce:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    67d5:	00 00 00 
    67d8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    67df:	00 00 00 
    67e2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    67e9:	00 00 00 
    67ec:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    67f3:	00 00 00 
    67f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    67fd:	00 00 00 
    6800:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6807:	00 00 00 
    680a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6811:	00 00 00 
    6814:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    681b:	00 00 00 
    681e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6825:	00 00 00 
    6828:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    682f:	00 00 00 
    6832:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6839:	00 00 00 
    683c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6843:	00 00 00 
    6846:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    684d:	00 00 00 
    6850:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6857:	00 00 00 
    685a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6861:	00 00 00 
    6864:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    686b:	00 00 00 
    686e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6875:	00 00 00 
    6878:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    687f:	00 00 00 
    6882:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6889:	00 00 00 
    688c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6893:	00 00 00 
    6896:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    689d:	00 00 00 
    68a0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    68a7:	00 00 00 
    68aa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    68b1:	00 00 00 
    68b4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    68bb:	00 00 00 
    68be:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    68c5:	00 00 00 
    68c8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    68cf:	00 00 00 
    68d2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    68d9:	00 00 00 
    68dc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    68e3:	00 00 00 
    68e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    68ed:	00 00 00 
    68f0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    68f7:	00 00 00 
    68fa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6901:	00 00 00 
    6904:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    690b:	00 00 00 
    690e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6915:	00 00 00 
    6918:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    691f:	00 00 00 
    6922:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6929:	00 00 00 
    692c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6933:	00 00 00 
    6936:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    693d:	00 00 00 
    6940:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6947:	00 00 00 
    694a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6951:	00 00 00 
    6954:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    695b:	00 00 00 
    695e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6965:	00 00 00 
    6968:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    696f:	00 00 00 
    6972:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6979:	00 00 00 
    697c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6983:	00 00 00 
    6986:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    698d:	00 00 00 
    6990:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6997:	00 00 00 
    699a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    69a1:	00 00 00 
    69a4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    69ab:	00 00 00 
    69ae:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    69b5:	00 00 00 
    69b8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    69bf:	00 00 00 
    69c2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    69c9:	00 00 00 
    69cc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    69d3:	00 00 00 
    69d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    69dd:	00 00 00 
    69e0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    69e7:	00 00 00 
    69ea:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    69f1:	00 00 00 
    69f4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    69fb:	00 00 00 
    69fe:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6a05:	00 00 00 
    6a08:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6a0f:	00 00 00 
    6a12:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6a19:	00 00 00 
    6a1c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6a23:	00 00 00 
    6a26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6a2d:	00 00 00 
    6a30:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6a37:	00 00 00 
    6a3a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6a41:	00 00 00 
    6a44:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6a4b:	00 00 00 
    6a4e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6a55:	00 00 00 
    6a58:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6a5f:	00 00 00 
    6a62:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6a69:	00 00 00 
    6a6c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6a73:	00 00 00 
    6a76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6a7d:	00 00 00 
    6a80:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6a87:	00 00 00 
    6a8a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6a91:	00 00 00 
    6a94:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6a9b:	00 00 00 
    6a9e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6aa5:	00 00 00 
    6aa8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6aaf:	00 00 00 
    6ab2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6ab9:	00 00 00 
    6abc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6ac3:	00 00 00 
    6ac6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6acd:	00 00 00 
    6ad0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6ad7:	00 00 00 
    6ada:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6ae1:	00 00 00 
    6ae4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6aeb:	00 00 00 
    6aee:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6af5:	00 00 00 
    6af8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6aff:	00 00 00 
    6b02:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6b09:	00 00 00 
    6b0c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6b13:	00 00 00 
    6b16:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6b1d:	00 00 00 
    6b20:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6b27:	00 00 00 
    6b2a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6b31:	00 00 00 
    6b34:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6b3b:	00 00 00 
    6b3e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6b45:	00 00 00 
    6b48:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6b4f:	00 00 00 
    6b52:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6b59:	00 00 00 
    6b5c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6b63:	00 00 00 
    6b66:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6b6d:	00 00 00 
    6b70:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6b77:	00 00 00 
    6b7a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6b81:	00 00 00 
    6b84:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6b8b:	00 00 00 
    6b8e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6b95:	00 00 00 
    6b98:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6b9f:	00 00 00 
    6ba2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6ba9:	00 00 00 
    6bac:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6bb3:	00 00 00 
    6bb6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6bbd:	00 00 00 
    6bc0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6bc7:	00 00 00 
    6bca:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6bd1:	00 00 00 
    6bd4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6bdb:	00 00 00 
    6bde:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6be5:	00 00 00 
    6be8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6bef:	00 00 00 
    6bf2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6bf9:	00 00 00 
    6bfc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6c03:	00 00 00 
    6c06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6c0d:	00 00 00 
    6c10:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6c17:	00 00 00 
    6c1a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6c21:	00 00 00 
    6c24:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6c2b:	00 00 00 
    6c2e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6c35:	00 00 00 
    6c38:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6c3f:	00 00 00 
    6c42:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6c49:	00 00 00 
    6c4c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6c53:	00 00 00 
    6c56:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6c5d:	00 00 00 
    6c60:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6c67:	00 00 00 
    6c6a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6c71:	00 00 00 
    6c74:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6c7b:	00 00 00 
    6c7e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6c85:	00 00 00 
    6c88:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6c8f:	00 00 00 
    6c92:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6c99:	00 00 00 
    6c9c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6ca3:	00 00 00 
    6ca6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6cad:	00 00 00 
    6cb0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6cb7:	00 00 00 
    6cba:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6cc1:	00 00 00 
    6cc4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6ccb:	00 00 00 
    6cce:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6cd5:	00 00 00 
    6cd8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6cdf:	00 00 00 
    6ce2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6ce9:	00 00 00 
    6cec:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6cf3:	00 00 00 
    6cf6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6cfd:	00 00 00 
    6d00:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6d07:	00 00 00 
    6d0a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6d11:	00 00 00 
    6d14:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6d1b:	00 00 00 
    6d1e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6d25:	00 00 00 
    6d28:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6d2f:	00 00 00 
    6d32:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6d39:	00 00 00 
    6d3c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6d43:	00 00 00 
    6d46:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6d4d:	00 00 00 
    6d50:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6d57:	00 00 00 
    6d5a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6d61:	00 00 00 
    6d64:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6d6b:	00 00 00 
    6d6e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6d75:	00 00 00 
    6d78:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6d7f:	00 00 00 
    6d82:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6d89:	00 00 00 
    6d8c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6d93:	00 00 00 
    6d96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6d9d:	00 00 00 
    6da0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6da7:	00 00 00 
    6daa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6db1:	00 00 00 
    6db4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6dbb:	00 00 00 
    6dbe:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6dc5:	00 00 00 
    6dc8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6dcf:	00 00 00 
    6dd2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6dd9:	00 00 00 
    6ddc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6de3:	00 00 00 
    6de6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6ded:	00 00 00 
    6df0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6df7:	00 00 00 
    6dfa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6e01:	00 00 00 
    6e04:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6e0b:	00 00 00 
    6e0e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6e15:	00 00 00 
    6e18:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6e1f:	00 00 00 
    6e22:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6e29:	00 00 00 
    6e2c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6e33:	00 00 00 
    6e36:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6e3d:	00 00 00 
    6e40:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6e47:	00 00 00 
    6e4a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6e51:	00 00 00 
    6e54:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6e5b:	00 00 00 
    6e5e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6e65:	00 00 00 
    6e68:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6e6f:	00 00 00 
    6e72:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6e79:	00 00 00 
    6e7c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6e83:	00 00 00 
    6e86:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6e8d:	00 00 00 
    6e90:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6e97:	00 00 00 
    6e9a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6ea1:	00 00 00 
    6ea4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6eab:	00 00 00 
    6eae:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6eb5:	00 00 00 
    6eb8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6ebf:	00 00 00 
    6ec2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6ec9:	00 00 00 
    6ecc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6ed3:	00 00 00 
    6ed6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6edd:	00 00 00 
    6ee0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6ee7:	00 00 00 
    6eea:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6ef1:	00 00 00 
    6ef4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6efb:	00 00 00 
    6efe:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6f05:	00 00 00 
    6f08:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6f0f:	00 00 00 
    6f12:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6f19:	00 00 00 
    6f1c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6f23:	00 00 00 
    6f26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6f2d:	00 00 00 
    6f30:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6f37:	00 00 00 
    6f3a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6f41:	00 00 00 
    6f44:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6f4b:	00 00 00 
    6f4e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6f55:	00 00 00 
    6f58:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6f5f:	00 00 00 
    6f62:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6f69:	00 00 00 
    6f6c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6f73:	00 00 00 
    6f76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6f7d:	00 00 00 
    6f80:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6f87:	00 00 00 
    6f8a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6f91:	00 00 00 
    6f94:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6f9b:	00 00 00 
    6f9e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6fa5:	00 00 00 
    6fa8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6faf:	00 00 00 
    6fb2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6fb9:	00 00 00 
    6fbc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6fc3:	00 00 00 
    6fc6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6fcd:	00 00 00 
    6fd0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6fd7:	00 00 00 
    6fda:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6fe1:	00 00 00 
    6fe4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6feb:	00 00 00 
    6fee:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6ff5:	00 00 00 
    6ff8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    6fff:	00 

Disassembly of section text:

0000000000100000 <__rom_region_start>:
  100000:	48 89 f8             	mov    %rdi,%rax
  100003:	48 83 fa 10          	cmp    $0x10,%rdx
  100007:	0f 82 fa 00 00 00    	jb     100107 <byte_copy>
  10000d:	49 89 f8             	mov    %rdi,%r8
  100010:	49 83 e0 07          	and    $0x7,%r8
  100014:	74 0f                	je     100025 <quadword_aligned>
  100016:	48 c7 c1 08 00 00 00 	mov    $0x8,%rcx
  10001d:	4c 29 c1             	sub    %r8,%rcx
  100020:	48 29 ca             	sub    %rcx,%rdx
  100023:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)

0000000000100025 <quadword_aligned>:
  100025:	48 81 fa 00 01 00 00 	cmp    $0x100,%rdx
  10002c:	0f 82 db 00 00 00    	jb     10010d <quadword_copy>
  100032:	50                   	push   %rax
  100033:	41 54                	push   %r12
  100035:	41 55                	push   %r13
  100037:	41 56                	push   %r14
  100039:	48 89 d1             	mov    %rdx,%rcx
  10003c:	48 c1 e9 07          	shr    $0x7,%rcx

0000000000100040 <loop>:
  100040:	0f 18 86 00 03 00 00 	prefetchnta 0x300(%rsi)
  100047:	0f 18 86 40 03 00 00 	prefetchnta 0x340(%rsi)
  10004e:	48 8b 06             	mov    (%rsi),%rax
  100051:	4c 8b 46 08          	mov    0x8(%rsi),%r8
  100055:	4c 8b 4e 10          	mov    0x10(%rsi),%r9
  100059:	4c 8b 56 18          	mov    0x18(%rsi),%r10
  10005d:	4c 8b 5e 20          	mov    0x20(%rsi),%r11
  100061:	4c 8b 66 28          	mov    0x28(%rsi),%r12
  100065:	4c 8b 6e 30          	mov    0x30(%rsi),%r13
  100069:	4c 8b 76 38          	mov    0x38(%rsi),%r14
  10006d:	48 0f c3 07          	movnti %rax,(%rdi)
  100071:	4c 0f c3 47 08       	movnti %r8,0x8(%rdi)
  100076:	4c 0f c3 4f 10       	movnti %r9,0x10(%rdi)
  10007b:	4c 0f c3 57 18       	movnti %r10,0x18(%rdi)
  100080:	4c 0f c3 5f 20       	movnti %r11,0x20(%rdi)
  100085:	4c 0f c3 67 28       	movnti %r12,0x28(%rdi)
  10008a:	4c 0f c3 6f 30       	movnti %r13,0x30(%rdi)
  10008f:	4c 0f c3 77 38       	movnti %r14,0x38(%rdi)
  100094:	48 8b 46 40          	mov    0x40(%rsi),%rax
  100098:	4c 8b 46 48          	mov    0x48(%rsi),%r8
  10009c:	4c 8b 4e 50          	mov    0x50(%rsi),%r9
  1000a0:	4c 8b 56 58          	mov    0x58(%rsi),%r10
  1000a4:	4c 8b 5e 60          	mov    0x60(%rsi),%r11
  1000a8:	4c 8b 66 68          	mov    0x68(%rsi),%r12
  1000ac:	4c 8b 6e 70          	mov    0x70(%rsi),%r13
  1000b0:	4c 8b 76 78          	mov    0x78(%rsi),%r14
  1000b4:	48 0f c3 47 40       	movnti %rax,0x40(%rdi)
  1000b9:	4c 0f c3 47 48       	movnti %r8,0x48(%rdi)
  1000be:	4c 0f c3 4f 50       	movnti %r9,0x50(%rdi)
  1000c3:	4c 0f c3 57 58       	movnti %r10,0x58(%rdi)
  1000c8:	4c 0f c3 5f 60       	movnti %r11,0x60(%rdi)
  1000cd:	4c 0f c3 67 68       	movnti %r12,0x68(%rdi)
  1000d2:	4c 0f c3 6f 70       	movnti %r13,0x70(%rdi)
  1000d7:	4c 0f c3 77 78       	movnti %r14,0x78(%rdi)
  1000dc:	48 8d b6 80 00 00 00 	lea    0x80(%rsi),%rsi
  1000e3:	48 8d bf 80 00 00 00 	lea    0x80(%rdi),%rdi
  1000ea:	48 ff c9             	dec    %rcx
  1000ed:	0f 85 4d ff ff ff    	jne    100040 <loop>
  1000f3:	0f ae f8             	sfence 
  1000f6:	48 89 d1             	mov    %rdx,%rcx
  1000f9:	48 83 e1 7f          	and    $0x7f,%rcx
  1000fd:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  1000ff:	41 5e                	pop    %r14
  100101:	41 5d                	pop    %r13
  100103:	41 5c                	pop    %r12
  100105:	58                   	pop    %rax
  100106:	c3                   	retq   

0000000000100107 <byte_copy>:
  100107:	48 89 d1             	mov    %rdx,%rcx
  10010a:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  10010c:	c3                   	retq   

000000000010010d <quadword_copy>:
  10010d:	48 89 d1             	mov    %rdx,%rcx
  100110:	48 c1 e9 03          	shr    $0x3,%rcx
  100114:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  10011b:	00 00 00 00 
  10011f:	90                   	nop
  100120:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  100123:	48 89 d1             	mov    %rdx,%rcx
  100126:	48 83 e1 07          	and    $0x7,%rcx
  10012a:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  10012c:	c3                   	retq   
  10012d:	0f 1f 00             	nopl   (%rax)

0000000000100130 <memset>:
  100130:	49 89 f9             	mov    %rdi,%r9
  100133:	48 89 f0             	mov    %rsi,%rax
  100136:	48 89 d1             	mov    %rdx,%rcx
  100139:	48 83 fa 10          	cmp    $0x10,%rdx
  10013d:	0f 82 a8 00 00 00    	jb     1001eb <byte_set>
  100143:	49 89 f8             	mov    %rdi,%r8
  100146:	49 83 e0 07          	and    $0x7,%r8
  10014a:	74 12                	je     10015e <quadword_aligned>
  10014c:	48 c7 c1 08 00 00 00 	mov    $0x8,%rcx
  100153:	4c 29 c1             	sub    %r8,%rcx
  100156:	48 29 ca             	sub    %rcx,%rdx
  100159:	f3 aa                	rep stos %al,%es:(%rdi)
  10015b:	48 89 d1             	mov    %rdx,%rcx

000000000010015e <quadword_aligned>:
  10015e:	49 b8 01 01 01 01 01 	movabs $0x101010101010101,%r8
  100165:	01 01 01 
  100168:	40 0f b6 c6          	movzbl %sil,%eax
  10016c:	49 0f af c0          	imul   %r8,%rax
  100170:	48 81 fa 00 01 00 00 	cmp    $0x100,%rdx
  100177:	72 78                	jb     1001f1 <quadword_set>
  100179:	48 c1 e9 07          	shr    $0x7,%rcx
  10017d:	0f 1f 00             	nopl   (%rax)

0000000000100180 <loop>:
  100180:	48 0f c3 07          	movnti %rax,(%rdi)
  100184:	48 0f c3 47 08       	movnti %rax,0x8(%rdi)
  100189:	48 0f c3 47 10       	movnti %rax,0x10(%rdi)
  10018e:	48 0f c3 47 18       	movnti %rax,0x18(%rdi)
  100193:	48 0f c3 47 20       	movnti %rax,0x20(%rdi)
  100198:	48 0f c3 47 28       	movnti %rax,0x28(%rdi)
  10019d:	48 0f c3 47 30       	movnti %rax,0x30(%rdi)
  1001a2:	48 0f c3 47 38       	movnti %rax,0x38(%rdi)
  1001a7:	48 0f c3 47 40       	movnti %rax,0x40(%rdi)
  1001ac:	48 0f c3 47 48       	movnti %rax,0x48(%rdi)
  1001b1:	48 0f c3 47 50       	movnti %rax,0x50(%rdi)
  1001b6:	48 0f c3 47 58       	movnti %rax,0x58(%rdi)
  1001bb:	48 0f c3 47 60       	movnti %rax,0x60(%rdi)
  1001c0:	48 0f c3 47 68       	movnti %rax,0x68(%rdi)
  1001c5:	48 0f c3 47 70       	movnti %rax,0x70(%rdi)
  1001ca:	48 0f c3 47 78       	movnti %rax,0x78(%rdi)
  1001cf:	48 8d bf 80 00 00 00 	lea    0x80(%rdi),%rdi
  1001d6:	48 ff c9             	dec    %rcx
  1001d9:	75 a5                	jne    100180 <loop>
  1001db:	0f ae f8             	sfence 
  1001de:	48 89 d1             	mov    %rdx,%rcx
  1001e1:	48 83 e1 7f          	and    $0x7f,%rcx
  1001e5:	f3 aa                	rep stos %al,%es:(%rdi)
  1001e7:	4c 89 c8             	mov    %r9,%rax
  1001ea:	c3                   	retq   

00000000001001eb <byte_set>:
  1001eb:	f3 aa                	rep stos %al,%es:(%rdi)
  1001ed:	4c 89 c8             	mov    %r9,%rax
  1001f0:	c3                   	retq   

00000000001001f1 <quadword_set>:
  1001f1:	48 c1 e9 03          	shr    $0x3,%rcx
  1001f5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  1001fc:	00 00 00 00 
  100200:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  100203:	48 89 d1             	mov    %rdx,%rcx
  100206:	48 83 e1 07          	and    $0x7,%rcx
  10020a:	f3 aa                	rep stos %al,%es:(%rdi)
  10020c:	4c 89 c8             	mov    %r9,%rax
  10020f:	c3                   	retq   

0000000000100210 <fabs>:
  100210:	66 48 0f 7e c0       	movq   %xmm0,%rax
  100215:	48 0f ba f0 3f       	btr    $0x3f,%rax
  10021a:	66 48 0f 6e c0       	movq   %rax,%xmm0
  10021f:	c3                   	retq   

0000000000100220 <exp>:
  100220:	55                   	push   %rbp
  100221:	48 89 e5             	mov    %rsp,%rbp
  100224:	48 83 ec 10          	sub    $0x10,%rsp
  100228:	f2 0f 11 45 f8       	movsd  %xmm0,-0x8(%rbp)
  10022d:	e8 3e 01 00 00       	callq  100370 <__ieee754_exp>
  100232:	83 3d cf 81 04 00 ff 	cmpl   $0xffffffff,0x481cf(%rip)        # 148408 <__fdlib_version>
  100239:	66 0f 28 d0          	movapd %xmm0,%xmm2
  10023d:	74 39                	je     100278 <exp+0x58>
  10023f:	f2 0f 10 4d f8       	movsd  -0x8(%rbp),%xmm1
  100244:	f2 0f 11 45 f0       	movsd  %xmm0,-0x10(%rbp)
  100249:	66 0f 28 c1          	movapd %xmm1,%xmm0
  10024d:	e8 be 08 00 00       	callq  100b10 <finite>
  100252:	f2 0f 10 55 f0       	movsd  -0x10(%rbp),%xmm2
  100257:	85 c0                	test   %eax,%eax
  100259:	74 1d                	je     100278 <exp+0x58>
  10025b:	f2 0f 10 4d f8       	movsd  -0x8(%rbp),%xmm1
  100260:	66 0f 2f 0d 18 07 01 	comisd 0x10718(%rip),%xmm1        # 110980 <uart_ns16550_dev_cfg_0+0x10>
  100267:	00 
  100268:	77 2e                	ja     100298 <exp+0x78>
  10026a:	f2 0f 10 05 16 07 01 	movsd  0x10716(%rip),%xmm0        # 110988 <uart_ns16550_dev_cfg_0+0x18>
  100271:	00 
  100272:	66 0f 2f c1          	comisd %xmm1,%xmm0
  100276:	77 08                	ja     100280 <exp+0x60>
  100278:	c9                   	leaveq 
  100279:	66 0f 28 c2          	movapd %xmm2,%xmm0
  10027d:	c3                   	retq   
  10027e:	66 90                	xchg   %ax,%ax
  100280:	e8 87 ca 00 00       	callq  10cd0c <__errno>
  100285:	66 0f ef d2          	pxor   %xmm2,%xmm2
  100289:	c7 00 22 00 00 00    	movl   $0x22,(%rax)
  10028f:	eb e7                	jmp    100278 <exp+0x58>
  100291:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  100298:	e8 6f ca 00 00       	callq  10cd0c <__errno>
  10029d:	f2 0f 10 15 d3 06 01 	movsd  0x106d3(%rip),%xmm2        # 110978 <uart_ns16550_dev_cfg_0+0x8>
  1002a4:	00 
  1002a5:	c7 00 22 00 00 00    	movl   $0x22,(%rax)
  1002ab:	eb cb                	jmp    100278 <exp+0x58>
  1002ad:	0f 1f 00             	nopl   (%rax)

00000000001002b0 <log>:
  1002b0:	55                   	push   %rbp
  1002b1:	48 89 e5             	mov    %rsp,%rbp
  1002b4:	48 83 ec 10          	sub    $0x10,%rsp
  1002b8:	f2 0f 11 45 f8       	movsd  %xmm0,-0x8(%rbp)
  1002bd:	e8 6e 03 00 00       	callq  100630 <__ieee754_log>
  1002c2:	83 3d 3f 81 04 00 ff 	cmpl   $0xffffffff,0x4813f(%rip)        # 148408 <__fdlib_version>
  1002c9:	74 30                	je     1002fb <log+0x4b>
  1002cb:	f2 0f 10 4d f8       	movsd  -0x8(%rbp),%xmm1
  1002d0:	66 0f 2e c9          	ucomisd %xmm1,%xmm1
  1002d4:	7a 25                	jp     1002fb <log+0x4b>
  1002d6:	66 0f ef d2          	pxor   %xmm2,%xmm2
  1002da:	66 0f 2f ca          	comisd %xmm2,%xmm1
  1002de:	77 1b                	ja     1002fb <log+0x4b>
  1002e0:	66 0f 2e ca          	ucomisd %xmm2,%xmm1
  1002e4:	7a 1a                	jp     100300 <log+0x50>
  1002e6:	75 18                	jne    100300 <log+0x50>
  1002e8:	e8 1f ca 00 00       	callq  10cd0c <__errno>
  1002ed:	f2 0f 10 05 9b 06 01 	movsd  0x1069b(%rip),%xmm0        # 110990 <uart_ns16550_dev_cfg_0+0x20>
  1002f4:	00 
  1002f5:	c7 00 22 00 00 00    	movl   $0x22,(%rax)
  1002fb:	c9                   	leaveq 
  1002fc:	c3                   	retq   
  1002fd:	0f 1f 00             	nopl   (%rax)
  100300:	e8 07 ca 00 00       	callq  10cd0c <__errno>
  100305:	bf f3 13 11 00       	mov    $0x1113f3,%edi
  10030a:	c7 00 21 00 00 00    	movl   $0x21,(%rax)
  100310:	c9                   	leaveq 
  100311:	e9 1a 08 00 00       	jmpq   100b30 <nan>
  100316:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10031d:	00 00 00 

0000000000100320 <sqrt>:
  100320:	55                   	push   %rbp
  100321:	48 89 e5             	mov    %rsp,%rbp
  100324:	48 83 ec 10          	sub    $0x10,%rsp
  100328:	f2 0f 11 45 f8       	movsd  %xmm0,-0x8(%rbp)
  10032d:	e8 be 05 00 00       	callq  1008f0 <__ieee754_sqrt>
  100332:	83 3d cf 80 04 00 ff 	cmpl   $0xffffffff,0x480cf(%rip)        # 148408 <__fdlib_version>
  100339:	74 15                	je     100350 <sqrt+0x30>
  10033b:	f2 0f 10 4d f8       	movsd  -0x8(%rbp),%xmm1
  100340:	66 0f 2e c9          	ucomisd %xmm1,%xmm1
  100344:	7a 0a                	jp     100350 <sqrt+0x30>
  100346:	66 0f ef d2          	pxor   %xmm2,%xmm2
  10034a:	66 0f 2f d1          	comisd %xmm1,%xmm2
  10034e:	77 08                	ja     100358 <sqrt+0x38>
  100350:	c9                   	leaveq 
  100351:	c3                   	retq   
  100352:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  100358:	e8 af c9 00 00       	callq  10cd0c <__errno>
  10035d:	66 0f ef c0          	pxor   %xmm0,%xmm0
  100361:	f2 0f 5e c0          	divsd  %xmm0,%xmm0
  100365:	c7 00 21 00 00 00    	movl   $0x21,(%rax)
  10036b:	c9                   	leaveq 
  10036c:	c3                   	retq   
  10036d:	0f 1f 00             	nopl   (%rax)

0000000000100370 <__ieee754_exp>:
  100370:	66 48 0f 7e c1       	movq   %xmm0,%rcx
  100375:	66 48 0f 7e c0       	movq   %xmm0,%rax
  10037a:	66 48 0f 7e c2       	movq   %xmm0,%rdx
  10037f:	48 c1 e8 3f          	shr    $0x3f,%rax
  100383:	48 c1 e9 20          	shr    $0x20,%rcx
  100387:	48 89 c6             	mov    %rax,%rsi
  10038a:	89 c8                	mov    %ecx,%eax
  10038c:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
  100391:	3d 41 2e 86 40       	cmp    $0x40862e41,%eax
  100396:	76 30                	jbe    1003c8 <__ieee754_exp+0x58>
  100398:	3d ff ff ef 7f       	cmp    $0x7fefffff,%eax
  10039d:	76 69                	jbe    100408 <__ieee754_exp+0x98>
  10039f:	81 e1 ff ff 0f 00    	and    $0xfffff,%ecx
  1003a5:	09 d1                	or     %edx,%ecx
  1003a7:	0f 85 23 02 00 00    	jne    1005d0 <__ieee754_exp+0x260>
  1003ad:	66 0f ef c9          	pxor   %xmm1,%xmm1
  1003b1:	85 f6                	test   %esi,%esi
  1003b3:	0f 85 99 01 00 00    	jne    100552 <__ieee754_exp+0x1e2>
  1003b9:	66 0f 28 c8          	movapd %xmm0,%xmm1
  1003bd:	e9 90 01 00 00       	jmpq   100552 <__ieee754_exp+0x1e2>
  1003c2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  1003c8:	3d 42 2e d6 3f       	cmp    $0x3fd62e42,%eax
  1003cd:	0f 87 9d 00 00 00    	ja     100470 <__ieee754_exp+0x100>
  1003d3:	f2 0f 10 0d 05 06 01 	movsd  0x10605(%rip),%xmm1        # 1109e0 <uart_ns16550_dev_cfg_0+0x70>
  1003da:	00 
  1003db:	3d ff ff 2f 3e       	cmp    $0x3e2fffff,%eax
  1003e0:	0f 87 7a 01 00 00    	ja     100560 <__ieee754_exp+0x1f0>
  1003e6:	f2 0f 10 15 aa 05 01 	movsd  0x105aa(%rip),%xmm2        # 110998 <uart_ns16550_dev_cfg_0+0x28>
  1003ed:	00 
  1003ee:	f2 0f 58 d0          	addsd  %xmm0,%xmm2
  1003f2:	66 0f 2f d1          	comisd %xmm1,%xmm2
  1003f6:	0f 86 64 01 00 00    	jbe    100560 <__ieee754_exp+0x1f0>
  1003fc:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  100400:	e9 4d 01 00 00       	jmpq   100552 <__ieee754_exp+0x1e2>
  100405:	0f 1f 00             	nopl   (%rax)
  100408:	66 0f 2f 05 70 05 01 	comisd 0x10570(%rip),%xmm0        # 110980 <uart_ns16550_dev_cfg_0+0x10>
  10040f:	00 
  100410:	0f 87 ca 01 00 00    	ja     1005e0 <__ieee754_exp+0x270>
  100416:	f2 0f 10 15 6a 05 01 	movsd  0x1056a(%rip),%xmm2        # 110988 <uart_ns16550_dev_cfg_0+0x18>
  10041d:	00 
  10041e:	66 0f ef c9          	pxor   %xmm1,%xmm1
  100422:	66 0f 2f d0          	comisd %xmm0,%xmm2
  100426:	0f 87 26 01 00 00    	ja     100552 <__ieee754_exp+0x1e2>
  10042c:	f2 0f 10 0d 6c 05 01 	movsd  0x1056c(%rip),%xmm1        # 1109a0 <uart_ns16550_dev_cfg_0+0x30>
  100433:	00 
  100434:	48 63 f6             	movslq %esi,%rsi
  100437:	66 0f ef db          	pxor   %xmm3,%xmm3
  10043b:	f2 0f 10 15 65 05 01 	movsd  0x10565(%rip),%xmm2        # 1109a8 <uart_ns16550_dev_cfg_0+0x38>
  100442:	00 
  100443:	66 0f 28 e0          	movapd %xmm0,%xmm4
  100447:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  10044b:	f2 0f 58 0c f5 c0 06 	addsd  0x1106c0(,%rsi,8),%xmm1
  100452:	11 00 
  100454:	f2 0f 2c d1          	cvttsd2si %xmm1,%edx
  100458:	f2 0f 2a da          	cvtsi2sd %edx,%xmm3
  10045c:	f2 0f 59 d3          	mulsd  %xmm3,%xmm2
  100460:	f2 0f 59 1d 48 05 01 	mulsd  0x10548(%rip),%xmm3        # 1109b0 <uart_ns16550_dev_cfg_0+0x40>
  100467:	00 
  100468:	f2 0f 5c e2          	subsd  %xmm2,%xmm4
  10046c:	eb 2b                	jmp    100499 <__ieee754_exp+0x129>
  10046e:	66 90                	xchg   %ax,%ax
  100470:	3d b1 a2 f0 3f       	cmp    $0x3ff0a2b1,%eax
  100475:	77 b5                	ja     10042c <__ieee754_exp+0xbc>
  100477:	48 63 c6             	movslq %esi,%rax
  10047a:	66 0f 28 e0          	movapd %xmm0,%xmm4
  10047e:	ba 01 00 00 00       	mov    $0x1,%edx
  100483:	f2 0f 5c 24 c5 b0 06 	subsd  0x1106b0(,%rax,8),%xmm4
  10048a:	11 00 
  10048c:	29 f2                	sub    %esi,%edx
  10048e:	f2 0f 10 1c c5 a0 06 	movsd  0x1106a0(,%rax,8),%xmm3
  100495:	11 00 
  100497:	29 f2                	sub    %esi,%edx
  100499:	66 0f 28 c4          	movapd %xmm4,%xmm0
  10049d:	f2 0f 10 0d 13 05 01 	movsd  0x10513(%rip),%xmm1        # 1109b8 <uart_ns16550_dev_cfg_0+0x48>
  1004a4:	00 
  1004a5:	f2 0f 5c c3          	subsd  %xmm3,%xmm0
  1004a9:	66 0f 28 d0          	movapd %xmm0,%xmm2
  1004ad:	66 0f 28 e8          	movapd %xmm0,%xmm5
  1004b1:	f2 0f 59 d0          	mulsd  %xmm0,%xmm2
  1004b5:	f2 0f 59 ca          	mulsd  %xmm2,%xmm1
  1004b9:	f2 0f 5c 0d ff 04 01 	subsd  0x104ff(%rip),%xmm1        # 1109c0 <uart_ns16550_dev_cfg_0+0x50>
  1004c0:	00 
  1004c1:	f2 0f 59 ca          	mulsd  %xmm2,%xmm1
  1004c5:	f2 0f 58 0d fb 04 01 	addsd  0x104fb(%rip),%xmm1        # 1109c8 <uart_ns16550_dev_cfg_0+0x58>
  1004cc:	00 
  1004cd:	f2 0f 59 ca          	mulsd  %xmm2,%xmm1
  1004d1:	f2 0f 5c 0d f7 04 01 	subsd  0x104f7(%rip),%xmm1        # 1109d0 <uart_ns16550_dev_cfg_0+0x60>
  1004d8:	00 
  1004d9:	f2 0f 59 ca          	mulsd  %xmm2,%xmm1
  1004dd:	f2 0f 58 0d f3 04 01 	addsd  0x104f3(%rip),%xmm1        # 1109d8 <uart_ns16550_dev_cfg_0+0x68>
  1004e4:	00 
  1004e5:	f2 0f 59 ca          	mulsd  %xmm2,%xmm1
  1004e9:	66 0f 28 d0          	movapd %xmm0,%xmm2
  1004ed:	f2 0f 5c e9          	subsd  %xmm1,%xmm5
  1004f1:	f2 0f 59 d5          	mulsd  %xmm5,%xmm2
  1004f5:	85 d2                	test   %edx,%edx
  1004f7:	0f 84 21 01 00 00    	je     10061e <__ieee754_exp+0x2ae>
  1004fd:	f2 0f 10 05 e3 04 01 	movsd  0x104e3(%rip),%xmm0        # 1109e8 <uart_ns16550_dev_cfg_0+0x78>
  100504:	00 
  100505:	f2 0f 5c c5          	subsd  %xmm5,%xmm0
  100509:	f2 0f 5e d0          	divsd  %xmm0,%xmm2
  10050d:	f2 0f 10 05 cb 04 01 	movsd  0x104cb(%rip),%xmm0        # 1109e0 <uart_ns16550_dev_cfg_0+0x70>
  100514:	00 
  100515:	f2 0f 5c da          	subsd  %xmm2,%xmm3
  100519:	66 0f 28 cb          	movapd %xmm3,%xmm1
  10051d:	f2 0f 5c cc          	subsd  %xmm4,%xmm1
  100521:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  100525:	66 48 0f 7e c1       	movq   %xmm0,%rcx
  10052a:	66 48 0f 7e c0       	movq   %xmm0,%rax
  10052f:	48 c1 e9 20          	shr    $0x20,%rcx
  100533:	81 fa 03 fc ff ff    	cmp    $0xfffffc03,%edx
  100539:	0f 8c b9 00 00 00    	jl     1005f8 <__ieee754_exp+0x288>
  10053f:	c1 e2 14             	shl    $0x14,%edx
  100542:	89 c0                	mov    %eax,%eax
  100544:	01 ca                	add    %ecx,%edx
  100546:	48 c1 e2 20          	shl    $0x20,%rdx
  10054a:	48 09 d0             	or     %rdx,%rax
  10054d:	66 48 0f 6e c8       	movq   %rax,%xmm1
  100552:	66 0f 28 c1          	movapd %xmm1,%xmm0
  100556:	c3                   	retq   
  100557:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  10055e:	00 00 
  100560:	66 0f 28 d8          	movapd %xmm0,%xmm3
  100564:	f2 0f 10 15 4c 04 01 	movsd  0x1044c(%rip),%xmm2        # 1109b8 <uart_ns16550_dev_cfg_0+0x48>
  10056b:	00 
  10056c:	66 0f 28 e8          	movapd %xmm0,%xmm5
  100570:	f2 0f 59 d8          	mulsd  %xmm0,%xmm3
  100574:	f2 0f 59 d3          	mulsd  %xmm3,%xmm2
  100578:	f2 0f 5c 15 40 04 01 	subsd  0x10440(%rip),%xmm2        # 1109c0 <uart_ns16550_dev_cfg_0+0x50>
  10057f:	00 
  100580:	f2 0f 59 d3          	mulsd  %xmm3,%xmm2
  100584:	f2 0f 58 15 3c 04 01 	addsd  0x1043c(%rip),%xmm2        # 1109c8 <uart_ns16550_dev_cfg_0+0x58>
  10058b:	00 
  10058c:	f2 0f 59 d3          	mulsd  %xmm3,%xmm2
  100590:	f2 0f 5c 15 38 04 01 	subsd  0x10438(%rip),%xmm2        # 1109d0 <uart_ns16550_dev_cfg_0+0x60>
  100597:	00 
  100598:	f2 0f 59 d3          	mulsd  %xmm3,%xmm2
  10059c:	f2 0f 58 15 34 04 01 	addsd  0x10434(%rip),%xmm2        # 1109d8 <uart_ns16550_dev_cfg_0+0x68>
  1005a3:	00 
  1005a4:	f2 0f 59 d3          	mulsd  %xmm3,%xmm2
  1005a8:	f2 0f 5c ea          	subsd  %xmm2,%xmm5
  1005ac:	66 0f 28 d0          	movapd %xmm0,%xmm2
  1005b0:	f2 0f 59 d5          	mulsd  %xmm5,%xmm2
  1005b4:	f2 0f 5c 2d 2c 04 01 	subsd  0x1042c(%rip),%xmm5        # 1109e8 <uart_ns16550_dev_cfg_0+0x78>
  1005bb:	00 
  1005bc:	f2 0f 5e d5          	divsd  %xmm5,%xmm2
  1005c0:	f2 0f 5c d0          	subsd  %xmm0,%xmm2
  1005c4:	f2 0f 5c ca          	subsd  %xmm2,%xmm1
  1005c8:	66 0f 28 c1          	movapd %xmm1,%xmm0
  1005cc:	c3                   	retq   
  1005cd:	0f 1f 00             	nopl   (%rax)
  1005d0:	66 0f 28 c8          	movapd %xmm0,%xmm1
  1005d4:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  1005d8:	66 0f 28 c1          	movapd %xmm1,%xmm0
  1005dc:	c3                   	retq   
  1005dd:	0f 1f 00             	nopl   (%rax)
  1005e0:	f2 0f 10 0d b0 03 01 	movsd  0x103b0(%rip),%xmm1        # 110998 <uart_ns16550_dev_cfg_0+0x28>
  1005e7:	00 
  1005e8:	f2 0f 59 c9          	mulsd  %xmm1,%xmm1
  1005ec:	e9 61 ff ff ff       	jmpq   100552 <__ieee754_exp+0x1e2>
  1005f1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  1005f8:	81 c2 e8 03 00 00    	add    $0x3e8,%edx
  1005fe:	89 c0                	mov    %eax,%eax
  100600:	c1 e2 14             	shl    $0x14,%edx
  100603:	01 ca                	add    %ecx,%edx
  100605:	48 c1 e2 20          	shl    $0x20,%rdx
  100609:	48 09 d0             	or     %rdx,%rax
  10060c:	66 48 0f 6e c8       	movq   %rax,%xmm1
  100611:	f2 0f 59 0d d7 03 01 	mulsd  0x103d7(%rip),%xmm1        # 1109f0 <uart_ns16550_dev_cfg_0+0x80>
  100618:	00 
  100619:	66 0f 28 c1          	movapd %xmm1,%xmm0
  10061d:	c3                   	retq   
  10061e:	f2 0f 10 0d ba 03 01 	movsd  0x103ba(%rip),%xmm1        # 1109e0 <uart_ns16550_dev_cfg_0+0x70>
  100625:	00 
  100626:	eb 8c                	jmp    1005b4 <__ieee754_exp+0x244>
  100628:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10062f:	00 

0000000000100630 <__ieee754_log>:
  100630:	66 48 0f 7e c0       	movq   %xmm0,%rax
  100635:	66 48 0f 7e c1       	movq   %xmm0,%rcx
  10063a:	48 c1 e8 20          	shr    $0x20,%rax
  10063e:	89 c2                	mov    %eax,%edx
  100640:	3d ff ff 0f 00       	cmp    $0xfffff,%eax
  100645:	0f 8f d5 00 00 00    	jg     100720 <__ieee754_log+0xf0>
  10064b:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
  100651:	09 ca                	or     %ecx,%edx
  100653:	0f 84 a7 01 00 00    	je     100800 <__ieee754_log+0x1d0>
  100659:	85 c0                	test   %eax,%eax
  10065b:	0f 88 4f 02 00 00    	js     1008b0 <__ieee754_log+0x280>
  100661:	f2 0f 59 05 9f 03 01 	mulsd  0x1039f(%rip),%xmm0        # 110a08 <uart_ns16550_dev_cfg_0+0x98>
  100668:	00 
  100669:	b8 ca ff ff ff       	mov    $0xffffffca,%eax
  10066e:	66 48 0f 7e c2       	movq   %xmm0,%rdx
  100673:	48 c1 ea 20          	shr    $0x20,%rdx
  100677:	81 fa ff ff ef 7f    	cmp    $0x7fefffff,%edx
  10067d:	0f 8f ab 00 00 00    	jg     10072e <__ieee754_log+0xfe>
  100683:	89 d1                	mov    %edx,%ecx
  100685:	c1 f9 14             	sar    $0x14,%ecx
  100688:	44 8d 84 08 01 fc ff 	lea    -0x3ff(%rax,%rcx,1),%r8d
  10068f:	ff 
  100690:	89 d1                	mov    %edx,%ecx
  100692:	66 48 0f 7e c2       	movq   %xmm0,%rdx
  100697:	81 e1 ff ff 0f 00    	and    $0xfffff,%ecx
  10069d:	89 d0                	mov    %edx,%eax
  10069f:	8d b1 64 5f 09 00    	lea    0x95f64(%rcx),%esi
  1006a5:	81 e6 00 00 10 00    	and    $0x100000,%esi
  1006ab:	89 f7                	mov    %esi,%edi
  1006ad:	c1 fe 14             	sar    $0x14,%esi
  1006b0:	81 f7 00 00 f0 3f    	xor    $0x3ff00000,%edi
  1006b6:	44 01 c6             	add    %r8d,%esi
  1006b9:	09 cf                	or     %ecx,%edi
  1006bb:	48 c1 e7 20          	shl    $0x20,%rdi
  1006bf:	48 09 f8             	or     %rdi,%rax
  1006c2:	66 48 0f 6e c0       	movq   %rax,%xmm0
  1006c7:	8d 41 02             	lea    0x2(%rcx),%eax
  1006ca:	f2 0f 5c 05 0e 03 01 	subsd  0x1030e(%rip),%xmm0        # 1109e0 <uart_ns16550_dev_cfg_0+0x70>
  1006d1:	00 
  1006d2:	25 ff ff 0f 00       	and    $0xfffff,%eax
  1006d7:	83 f8 02             	cmp    $0x2,%eax
  1006da:	7f 5c                	jg     100738 <__ieee754_log+0x108>
  1006dc:	66 0f ef f6          	pxor   %xmm6,%xmm6
  1006e0:	66 0f 2e c6          	ucomisd %xmm6,%xmm0
  1006e4:	0f 8a 2e 01 00 00    	jp     100818 <__ieee754_log+0x1e8>
  1006ea:	0f 85 28 01 00 00    	jne    100818 <__ieee754_log+0x1e8>
  1006f0:	66 0f ef c0          	pxor   %xmm0,%xmm0
  1006f4:	85 f6                	test   %esi,%esi
  1006f6:	0f 84 a8 01 00 00    	je     1008a4 <__ieee754_log+0x274>
  1006fc:	66 0f ef c0          	pxor   %xmm0,%xmm0
  100700:	f2 0f 10 0d a0 02 01 	movsd  0x102a0(%rip),%xmm1        # 1109a8 <uart_ns16550_dev_cfg_0+0x38>
  100707:	00 
  100708:	f2 0f 2a c6          	cvtsi2sd %esi,%xmm0
  10070c:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  100710:	f2 0f 59 05 98 02 01 	mulsd  0x10298(%rip),%xmm0        # 1109b0 <uart_ns16550_dev_cfg_0+0x40>
  100717:	00 
  100718:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  10071c:	c3                   	retq   
  10071d:	0f 1f 00             	nopl   (%rax)
  100720:	31 c0                	xor    %eax,%eax
  100722:	81 fa ff ff ef 7f    	cmp    $0x7fefffff,%edx
  100728:	0f 8e 55 ff ff ff    	jle    100683 <__ieee754_log+0x53>
  10072e:	f2 0f 58 c0          	addsd  %xmm0,%xmm0
  100732:	c3                   	retq   
  100733:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  100738:	f2 0f 10 0d a8 02 01 	movsd  0x102a8(%rip),%xmm1        # 1109e8 <uart_ns16550_dev_cfg_0+0x78>
  10073f:	00 
  100740:	66 0f 28 d8          	movapd %xmm0,%xmm3
  100744:	b8 51 b8 06 00       	mov    $0x6b851,%eax
  100749:	8d 91 86 eb f9 ff    	lea    -0x6147a(%rcx),%edx
  10074f:	29 c8                	sub    %ecx,%eax
  100751:	66 0f ef ed          	pxor   %xmm5,%xmm5
  100755:	09 d0                	or     %edx,%eax
  100757:	f2 0f 2a ee          	cvtsi2sd %esi,%xmm5
  10075b:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  10075f:	f2 0f 5e d9          	divsd  %xmm1,%xmm3
  100763:	f2 0f 10 0d b5 02 01 	movsd  0x102b5(%rip),%xmm1        # 110a20 <uart_ns16550_dev_cfg_0+0xb0>
  10076a:	00 
  10076b:	66 0f 28 d3          	movapd %xmm3,%xmm2
  10076f:	f2 0f 59 d3          	mulsd  %xmm3,%xmm2
  100773:	66 0f 28 e2          	movapd %xmm2,%xmm4
  100777:	f2 0f 59 e2          	mulsd  %xmm2,%xmm4
  10077b:	f2 0f 59 cc          	mulsd  %xmm4,%xmm1
  10077f:	f2 0f 58 0d a1 02 01 	addsd  0x102a1(%rip),%xmm1        # 110a28 <uart_ns16550_dev_cfg_0+0xb8>
  100786:	00 
  100787:	f2 0f 59 cc          	mulsd  %xmm4,%xmm1
  10078b:	f2 0f 58 0d 9d 02 01 	addsd  0x1029d(%rip),%xmm1        # 110a30 <uart_ns16550_dev_cfg_0+0xc0>
  100792:	00 
  100793:	f2 0f 59 cc          	mulsd  %xmm4,%xmm1
  100797:	f2 0f 58 0d 99 02 01 	addsd  0x10299(%rip),%xmm1        # 110a38 <uart_ns16550_dev_cfg_0+0xc8>
  10079e:	00 
  10079f:	f2 0f 59 ca          	mulsd  %xmm2,%xmm1
  1007a3:	f2 0f 10 15 95 02 01 	movsd  0x10295(%rip),%xmm2        # 110a40 <uart_ns16550_dev_cfg_0+0xd0>
  1007aa:	00 
  1007ab:	f2 0f 59 d4          	mulsd  %xmm4,%xmm2
  1007af:	f2 0f 58 15 91 02 01 	addsd  0x10291(%rip),%xmm2        # 110a48 <uart_ns16550_dev_cfg_0+0xd8>
  1007b6:	00 
  1007b7:	f2 0f 59 d4          	mulsd  %xmm4,%xmm2
  1007bb:	f2 0f 58 15 8d 02 01 	addsd  0x1028d(%rip),%xmm2        # 110a50 <uart_ns16550_dev_cfg_0+0xe0>
  1007c2:	00 
  1007c3:	f2 0f 59 d4          	mulsd  %xmm4,%xmm2
  1007c7:	f2 0f 58 ca          	addsd  %xmm2,%xmm1
  1007cb:	66 0f 28 d0          	movapd %xmm0,%xmm2
  1007cf:	0f 8e 9b 00 00 00    	jle    100870 <__ieee754_log+0x240>
  1007d5:	f2 0f 59 15 3b 02 01 	mulsd  0x1023b(%rip),%xmm2        # 110a18 <uart_ns16550_dev_cfg_0+0xa8>
  1007dc:	00 
  1007dd:	f2 0f 59 d0          	mulsd  %xmm0,%xmm2
  1007e1:	f2 0f 58 ca          	addsd  %xmm2,%xmm1
  1007e5:	f2 0f 59 cb          	mulsd  %xmm3,%xmm1
  1007e9:	85 f6                	test   %esi,%esi
  1007eb:	0f 85 cf 00 00 00    	jne    1008c0 <__ieee754_log+0x290>
  1007f1:	f2 0f 5c d1          	subsd  %xmm1,%xmm2
  1007f5:	f2 0f 5c c2          	subsd  %xmm2,%xmm0
  1007f9:	c3                   	retq   
  1007fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  100800:	f2 0f 10 05 f8 01 01 	movsd  0x101f8(%rip),%xmm0        # 110a00 <uart_ns16550_dev_cfg_0+0x90>
  100807:	00 
  100808:	f2 0f 5e 05 e8 01 01 	divsd  0x101e8(%rip),%xmm0        # 1109f8 <uart_ns16550_dev_cfg_0+0x88>
  10080f:	00 
  100810:	c3                   	retq   
  100811:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  100818:	f2 0f 10 15 f0 01 01 	movsd  0x101f0(%rip),%xmm2        # 110a10 <uart_ns16550_dev_cfg_0+0xa0>
  10081f:	00 
  100820:	f2 0f 10 0d f0 01 01 	movsd  0x101f0(%rip),%xmm1        # 110a18 <uart_ns16550_dev_cfg_0+0xa8>
  100827:	00 
  100828:	f2 0f 59 d0          	mulsd  %xmm0,%xmm2
  10082c:	f2 0f 5c ca          	subsd  %xmm2,%xmm1
  100830:	66 0f 28 d0          	movapd %xmm0,%xmm2
  100834:	f2 0f 59 d0          	mulsd  %xmm0,%xmm2
  100838:	f2 0f 59 ca          	mulsd  %xmm2,%xmm1
  10083c:	85 f6                	test   %esi,%esi
  10083e:	74 68                	je     1008a8 <__ieee754_log+0x278>
  100840:	66 0f ef d2          	pxor   %xmm2,%xmm2
  100844:	f2 0f 10 1d 5c 01 01 	movsd  0x1015c(%rip),%xmm3        # 1109a8 <uart_ns16550_dev_cfg_0+0x38>
  10084b:	00 
  10084c:	f2 0f 2a d6          	cvtsi2sd %esi,%xmm2
  100850:	f2 0f 59 da          	mulsd  %xmm2,%xmm3
  100854:	f2 0f 59 15 54 01 01 	mulsd  0x10154(%rip),%xmm2        # 1109b0 <uart_ns16550_dev_cfg_0+0x40>
  10085b:	00 
  10085c:	f2 0f 5c ca          	subsd  %xmm2,%xmm1
  100860:	f2 0f 5c c8          	subsd  %xmm0,%xmm1
  100864:	f2 0f 5c d9          	subsd  %xmm1,%xmm3
  100868:	66 0f 28 c3          	movapd %xmm3,%xmm0
  10086c:	c3                   	retq   
  10086d:	0f 1f 00             	nopl   (%rax)
  100870:	f2 0f 5c d1          	subsd  %xmm1,%xmm2
  100874:	66 0f 28 ca          	movapd %xmm2,%xmm1
  100878:	f2 0f 59 cb          	mulsd  %xmm3,%xmm1
  10087c:	85 f6                	test   %esi,%esi
  10087e:	74 28                	je     1008a8 <__ieee754_log+0x278>
  100880:	f2 0f 10 15 20 01 01 	movsd  0x10120(%rip),%xmm2        # 1109a8 <uart_ns16550_dev_cfg_0+0x38>
  100887:	00 
  100888:	f2 0f 59 d5          	mulsd  %xmm5,%xmm2
  10088c:	f2 0f 59 2d 1c 01 01 	mulsd  0x1011c(%rip),%xmm5        # 1109b0 <uart_ns16550_dev_cfg_0+0x40>
  100893:	00 
  100894:	f2 0f 5c cd          	subsd  %xmm5,%xmm1
  100898:	f2 0f 5c c8          	subsd  %xmm0,%xmm1
  10089c:	f2 0f 5c d1          	subsd  %xmm1,%xmm2
  1008a0:	66 0f 28 c2          	movapd %xmm2,%xmm0
  1008a4:	c3                   	retq   
  1008a5:	0f 1f 00             	nopl   (%rax)
  1008a8:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  1008ac:	c3                   	retq   
  1008ad:	0f 1f 00             	nopl   (%rax)
  1008b0:	f2 0f 5c c0          	subsd  %xmm0,%xmm0
  1008b4:	f2 0f 5e 05 3c 01 01 	divsd  0x1013c(%rip),%xmm0        # 1109f8 <uart_ns16550_dev_cfg_0+0x88>
  1008bb:	00 
  1008bc:	c3                   	retq   
  1008bd:	0f 1f 00             	nopl   (%rax)
  1008c0:	f2 0f 10 1d e0 00 01 	movsd  0x100e0(%rip),%xmm3        # 1109a8 <uart_ns16550_dev_cfg_0+0x38>
  1008c7:	00 
  1008c8:	f2 0f 59 dd          	mulsd  %xmm5,%xmm3
  1008cc:	f2 0f 59 2d dc 00 01 	mulsd  0x100dc(%rip),%xmm5        # 1109b0 <uart_ns16550_dev_cfg_0+0x40>
  1008d3:	00 
  1008d4:	f2 0f 58 cd          	addsd  %xmm5,%xmm1
  1008d8:	f2 0f 5c d1          	subsd  %xmm1,%xmm2
  1008dc:	f2 0f 5c d0          	subsd  %xmm0,%xmm2
  1008e0:	f2 0f 5c da          	subsd  %xmm2,%xmm3
  1008e4:	66 0f 28 c3          	movapd %xmm3,%xmm0
  1008e8:	c3                   	retq   
  1008e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000001008f0 <__ieee754_sqrt>:
  1008f0:	66 48 0f 7e c1       	movq   %xmm0,%rcx
  1008f5:	48 c1 e9 20          	shr    $0x20,%rcx
  1008f9:	89 cf                	mov    %ecx,%edi
  1008fb:	81 e7 00 00 f0 7f    	and    $0x7ff00000,%edi
  100901:	81 ff 00 00 f0 7f    	cmp    $0x7ff00000,%edi
  100907:	0f 84 d3 01 00 00    	je     100ae0 <__ieee754_sqrt+0x1f0>
  10090d:	66 0f 7e c0          	movd   %xmm0,%eax
  100911:	85 c9                	test   %ecx,%ecx
  100913:	0f 8e e7 00 00 00    	jle    100a00 <__ieee754_sqrt+0x110>
  100919:	89 cf                	mov    %ecx,%edi
  10091b:	89 ca                	mov    %ecx,%edx
  10091d:	c1 ff 14             	sar    $0x14,%edi
  100920:	0f 84 17 01 00 00    	je     100a3d <__ieee754_sqrt+0x14d>
  100926:	55                   	push   %rbp
  100927:	81 e2 ff ff 0f 00    	and    $0xfffff,%edx
  10092d:	81 ca 00 00 10 00    	or     $0x100000,%edx
  100933:	48 89 e5             	mov    %rsp,%rbp
  100936:	41 54                	push   %r12
  100938:	44 8d a7 01 fc ff ff 	lea    -0x3ff(%rdi),%r12d
  10093f:	83 e7 01             	and    $0x1,%edi
  100942:	53                   	push   %rbx
  100943:	75 0a                	jne    10094f <__ieee754_sqrt+0x5f>
  100945:	89 c1                	mov    %eax,%ecx
  100947:	01 c0                	add    %eax,%eax
  100949:	c1 e9 1f             	shr    $0x1f,%ecx
  10094c:	8d 14 51             	lea    (%rcx,%rdx,2),%edx
  10094f:	89 c1                	mov    %eax,%ecx
  100951:	41 d1 fc             	sar    %r12d
  100954:	01 c0                	add    %eax,%eax
  100956:	41 b8 16 00 00 00    	mov    $0x16,%r8d
  10095c:	c1 e9 1f             	shr    $0x1f,%ecx
  10095f:	31 db                	xor    %ebx,%ebx
  100961:	31 f6                	xor    %esi,%esi
  100963:	8d 14 51             	lea    (%rcx,%rdx,2),%edx
  100966:	b9 00 00 20 00       	mov    $0x200000,%ecx
  10096b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  100970:	8d 3c 0e             	lea    (%rsi,%rcx,1),%edi
  100973:	39 d7                	cmp    %edx,%edi
  100975:	7f 07                	jg     10097e <__ieee754_sqrt+0x8e>
  100977:	8d 34 0f             	lea    (%rdi,%rcx,1),%esi
  10097a:	29 fa                	sub    %edi,%edx
  10097c:	01 cb                	add    %ecx,%ebx
  10097e:	89 c7                	mov    %eax,%edi
  100980:	d1 e9                	shr    %ecx
  100982:	01 c0                	add    %eax,%eax
  100984:	c1 ef 1f             	shr    $0x1f,%edi
  100987:	8d 14 57             	lea    (%rdi,%rdx,2),%edx
  10098a:	41 83 e8 01          	sub    $0x1,%r8d
  10098e:	75 e0                	jne    100970 <__ieee754_sqrt+0x80>
  100990:	45 31 db             	xor    %r11d,%r11d
  100993:	41 b9 20 00 00 00    	mov    $0x20,%r9d
  100999:	b9 00 00 00 80       	mov    $0x80000000,%ecx
  10099e:	eb 3e                	jmp    1009de <__ieee754_sqrt+0xee>
  1009a0:	75 26                	jne    1009c8 <__ieee754_sqrt+0xd8>
  1009a2:	39 c7                	cmp    %eax,%edi
  1009a4:	77 22                	ja     1009c8 <__ieee754_sqrt+0xd8>
  1009a6:	44 8d 04 0f          	lea    (%rdi,%rcx,1),%r8d
  1009aa:	85 ff                	test   %edi,%edi
  1009ac:	0f 88 be 00 00 00    	js     100a70 <__ieee754_sqrt+0x180>
  1009b2:	41 89 f2             	mov    %esi,%r10d
  1009b5:	31 d2                	xor    %edx,%edx
  1009b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  1009be:	00 00 
  1009c0:	29 f8                	sub    %edi,%eax
  1009c2:	41 01 cb             	add    %ecx,%r11d
  1009c5:	44 89 d6             	mov    %r10d,%esi
  1009c8:	89 c7                	mov    %eax,%edi
  1009ca:	d1 e9                	shr    %ecx
  1009cc:	01 c0                	add    %eax,%eax
  1009ce:	c1 ef 1f             	shr    $0x1f,%edi
  1009d1:	8d 14 57             	lea    (%rdi,%rdx,2),%edx
  1009d4:	41 83 e9 01          	sub    $0x1,%r9d
  1009d8:	0f 84 aa 00 00 00    	je     100a88 <__ieee754_sqrt+0x198>
  1009de:	42 8d 3c 01          	lea    (%rcx,%r8,1),%edi
  1009e2:	39 f2                	cmp    %esi,%edx
  1009e4:	7e ba                	jle    1009a0 <__ieee754_sqrt+0xb0>
  1009e6:	44 8d 04 0f          	lea    (%rdi,%rcx,1),%r8d
  1009ea:	41 89 f2             	mov    %esi,%r10d
  1009ed:	85 ff                	test   %edi,%edi
  1009ef:	78 7f                	js     100a70 <__ieee754_sqrt+0x180>
  1009f1:	39 f8                	cmp    %edi,%eax
  1009f3:	19 f2                	sbb    %esi,%edx
  1009f5:	eb c9                	jmp    1009c0 <__ieee754_sqrt+0xd0>
  1009f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  1009fe:	00 00 
  100a00:	89 ca                	mov    %ecx,%edx
  100a02:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
  100a08:	09 c2                	or     %eax,%edx
  100a0a:	0f 84 cf 00 00 00    	je     100adf <__ieee754_sqrt+0x1ef>
  100a10:	31 ff                	xor    %edi,%edi
  100a12:	85 c9                	test   %ecx,%ecx
  100a14:	0f 85 d3 00 00 00    	jne    100aed <__ieee754_sqrt+0x1fd>
  100a1a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  100a20:	89 c6                	mov    %eax,%esi
  100a22:	83 ef 15             	sub    $0x15,%edi
  100a25:	c1 e0 15             	shl    $0x15,%eax
  100a28:	c1 ee 0b             	shr    $0xb,%esi
  100a2b:	89 f2                	mov    %esi,%edx
  100a2d:	85 f6                	test   %esi,%esi
  100a2f:	74 ef                	je     100a20 <__ieee754_sqrt+0x130>
  100a31:	f7 c6 00 00 10 00    	test   $0x100000,%esi
  100a37:	0f 85 be 00 00 00    	jne    100afb <__ieee754_sqrt+0x20b>
  100a3d:	31 c9                	xor    %ecx,%ecx
  100a3f:	90                   	nop
  100a40:	01 d2                	add    %edx,%edx
  100a42:	41 89 c8             	mov    %ecx,%r8d
  100a45:	8d 49 01             	lea    0x1(%rcx),%ecx
  100a48:	f7 c2 00 00 10 00    	test   $0x100000,%edx
  100a4e:	74 f0                	je     100a40 <__ieee754_sqrt+0x150>
  100a50:	41 b9 20 00 00 00    	mov    $0x20,%r9d
  100a56:	89 d6                	mov    %edx,%esi
  100a58:	89 c2                	mov    %eax,%edx
  100a5a:	d3 e0                	shl    %cl,%eax
  100a5c:	41 29 c9             	sub    %ecx,%r9d
  100a5f:	44 89 c9             	mov    %r9d,%ecx
  100a62:	44 29 c7             	sub    %r8d,%edi
  100a65:	d3 ea                	shr    %cl,%edx
  100a67:	09 f2                	or     %esi,%edx
  100a69:	e9 b8 fe ff ff       	jmpq   100926 <__ieee754_sqrt+0x36>
  100a6e:	66 90                	xchg   %ax,%ax
  100a70:	41 81 f8 00 00 00 80 	cmp    $0x80000000,%r8d
  100a77:	41 89 f2             	mov    %esi,%r10d
  100a7a:	41 83 d2 00          	adc    $0x0,%r10d
  100a7e:	e9 6e ff ff ff       	jmpq   1009f1 <__ieee754_sqrt+0x101>
  100a83:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  100a88:	09 c2                	or     %eax,%edx
  100a8a:	75 44                	jne    100ad0 <__ieee754_sqrt+0x1e0>
  100a8c:	41 d1 eb             	shr    %r11d
  100a8f:	45 89 d9             	mov    %r11d,%r9d
  100a92:	89 d8                	mov    %ebx,%eax
  100a94:	44 89 ca             	mov    %r9d,%edx
  100a97:	d1 f8                	sar    %eax
  100a99:	81 ca 00 00 00 80    	or     $0x80000000,%edx
  100a9f:	83 e3 01             	and    $0x1,%ebx
  100aa2:	5b                   	pop    %rbx
  100aa3:	44 0f 45 ca          	cmovne %edx,%r9d
  100aa7:	41 c1 e4 14          	shl    $0x14,%r12d
  100aab:	42 8d 84 20 00 00 e0 	lea    0x3fe00000(%rax,%r12,1),%eax
  100ab2:	3f 
  100ab3:	41 5c                	pop    %r12
  100ab5:	5d                   	pop    %rbp
  100ab6:	45 89 c9             	mov    %r9d,%r9d
  100ab9:	48 c1 e0 20          	shl    $0x20,%rax
  100abd:	4c 09 c8             	or     %r9,%rax
  100ac0:	66 48 0f 6e c0       	movq   %rax,%xmm0
  100ac5:	c3                   	retq   
  100ac6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100acd:	00 00 00 
  100ad0:	41 83 fb ff          	cmp    $0xffffffff,%r11d
  100ad4:	74 20                	je     100af6 <__ieee754_sqrt+0x206>
  100ad6:	45 8d 4b 01          	lea    0x1(%r11),%r9d
  100ada:	41 d1 e9             	shr    %r9d
  100add:	eb b3                	jmp    100a92 <__ieee754_sqrt+0x1a2>
  100adf:	c3                   	retq   
  100ae0:	66 0f 28 c8          	movapd %xmm0,%xmm1
  100ae4:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  100ae8:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  100aec:	c3                   	retq   
  100aed:	f2 0f 5c c0          	subsd  %xmm0,%xmm0
  100af1:	f2 0f 5e c0          	divsd  %xmm0,%xmm0
  100af5:	c3                   	retq   
  100af6:	83 c3 01             	add    $0x1,%ebx
  100af9:	eb 97                	jmp    100a92 <__ieee754_sqrt+0x1a2>
  100afb:	89 c2                	mov    %eax,%edx
  100afd:	41 b9 20 00 00 00    	mov    $0x20,%r9d
  100b03:	41 b8 ff ff ff ff    	mov    $0xffffffff,%r8d
  100b09:	e9 51 ff ff ff       	jmpq   100a5f <__ieee754_sqrt+0x16f>
  100b0e:	66 90                	xchg   %ax,%ax

0000000000100b10 <finite>:
  100b10:	66 48 0f 7e c0       	movq   %xmm0,%rax
  100b15:	48 c1 e8 20          	shr    $0x20,%rax
  100b19:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
  100b1e:	2d 00 00 f0 7f       	sub    $0x7ff00000,%eax
  100b23:	c1 e8 1f             	shr    $0x1f,%eax
  100b26:	c3                   	retq   
  100b27:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  100b2e:	00 00 

0000000000100b30 <nan>:
  100b30:	f2 0f 10 05 20 ff 00 	movsd  0xff20(%rip),%xmm0        # 110a58 <uart_ns16550_dev_cfg_0+0xe8>
  100b37:	00 
  100b38:	c3                   	retq   
  100b39:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000100b40 <malloc>:
  100b40:	48 89 fe             	mov    %rdi,%rsi
  100b43:	48 8b 3d ae 78 04 00 	mov    0x478ae(%rip),%rdi        # 1483f8 <_impure_ptr>
  100b4a:	e9 11 00 00 00       	jmpq   100b60 <_malloc_r>
  100b4f:	90                   	nop

0000000000100b50 <free>:
  100b50:	48 89 fe             	mov    %rdi,%rsi
  100b53:	48 8b 3d 9e 78 04 00 	mov    0x4789e(%rip),%rdi        # 1483f8 <_impure_ptr>
  100b5a:	e9 41 5d 00 00       	jmpq   1068a0 <_free_r>
  100b5f:	90                   	nop

0000000000100b60 <_malloc_r>:
  100b60:	55                   	push   %rbp
  100b61:	48 89 e5             	mov    %rsp,%rbp
  100b64:	41 57                	push   %r15
  100b66:	41 56                	push   %r14
  100b68:	41 55                	push   %r13
  100b6a:	49 89 fd             	mov    %rdi,%r13
  100b6d:	41 54                	push   %r12
  100b6f:	4c 8d 66 17          	lea    0x17(%rsi),%r12
  100b73:	53                   	push   %rbx
  100b74:	48 83 ec 28          	sub    $0x28,%rsp
  100b78:	49 83 fc 2e          	cmp    $0x2e,%r12
  100b7c:	77 7a                	ja     100bf8 <_malloc_r+0x98>
  100b7e:	48 83 fe 20          	cmp    $0x20,%rsi
  100b82:	0f 87 18 01 00 00    	ja     100ca0 <_malloc_r+0x140>
  100b88:	e8 c3 08 00 00       	callq  101450 <__malloc_lock>
  100b8d:	41 bc 20 00 00 00    	mov    $0x20,%r12d
  100b93:	b8 50 00 00 00       	mov    $0x50,%eax
  100b98:	be 04 00 00 00       	mov    $0x4,%esi
  100b9d:	48 8b 98 88 75 14 00 	mov    0x147588(%rax),%rbx
  100ba4:	48 8d 90 70 75 14 00 	lea    0x147570(%rax),%rdx
  100bab:	48 05 80 75 14 00    	add    $0x147580,%rax
  100bb1:	48 39 d3             	cmp    %rdx,%rbx
  100bb4:	0f 84 06 01 00 00    	je     100cc0 <_malloc_r+0x160>
  100bba:	48 8b 43 08          	mov    0x8(%rbx),%rax
  100bbe:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
  100bc2:	48 8b 53 18          	mov    0x18(%rbx),%rdx
  100bc6:	48 8b 4b 10          	mov    0x10(%rbx),%rcx
  100bca:	4c 89 ef             	mov    %r13,%rdi
  100bcd:	48 89 51 18          	mov    %rdx,0x18(%rcx)
  100bd1:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
  100bd5:	48 83 4c 03 08 01    	orq    $0x1,0x8(%rbx,%rax,1)
  100bdb:	e8 80 08 00 00       	callq  101460 <__malloc_unlock>
  100be0:	48 83 c4 28          	add    $0x28,%rsp
  100be4:	48 8d 43 10          	lea    0x10(%rbx),%rax
  100be8:	5b                   	pop    %rbx
  100be9:	41 5c                	pop    %r12
  100beb:	41 5d                	pop    %r13
  100bed:	41 5e                	pop    %r14
  100bef:	41 5f                	pop    %r15
  100bf1:	5d                   	pop    %rbp
  100bf2:	c3                   	retq   
  100bf3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  100bf8:	49 83 e4 f0          	and    $0xfffffffffffffff0,%r12
  100bfc:	49 81 fc ff ff ff 7f 	cmp    $0x7fffffff,%r12
  100c03:	0f 87 97 00 00 00    	ja     100ca0 <_malloc_r+0x140>
  100c09:	4c 39 e6             	cmp    %r12,%rsi
  100c0c:	0f 87 8e 00 00 00    	ja     100ca0 <_malloc_r+0x140>
  100c12:	e8 39 08 00 00       	callq  101450 <__malloc_lock>
  100c17:	49 81 fc f7 01 00 00 	cmp    $0x1f7,%r12
  100c1e:	0f 86 64 05 00 00    	jbe    101188 <_malloc_r+0x628>
  100c24:	4c 89 e6             	mov    %r12,%rsi
  100c27:	48 c1 ee 09          	shr    $0x9,%rsi
  100c2b:	0f 84 2f 03 00 00    	je     100f60 <_malloc_r+0x400>
  100c31:	48 83 fe 04          	cmp    $0x4,%rsi
  100c35:	0f 87 95 04 00 00    	ja     1010d0 <_malloc_r+0x570>
  100c3b:	4c 89 e6             	mov    %r12,%rsi
  100c3e:	48 c1 ee 06          	shr    $0x6,%rsi
  100c42:	8d 7e 38             	lea    0x38(%rsi),%edi
  100c45:	83 c6 39             	add    $0x39,%esi
  100c48:	8d 04 36             	lea    (%rsi,%rsi,1),%eax
  100c4b:	48 98                	cltq   
  100c4d:	48 c1 e0 03          	shl    $0x3,%rax
  100c51:	48 8b 98 88 75 14 00 	mov    0x147588(%rax),%rbx
  100c58:	48 8d 88 70 75 14 00 	lea    0x147570(%rax),%rcx
  100c5f:	48 39 d9             	cmp    %rbx,%rcx
  100c62:	75 1e                	jne    100c82 <_malloc_r+0x122>
  100c64:	eb 6a                	jmp    100cd0 <_malloc_r+0x170>
  100c66:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c6d:	00 00 00 
  100c70:	48 85 d2             	test   %rdx,%rdx
  100c73:	0f 89 49 ff ff ff    	jns    100bc2 <_malloc_r+0x62>
  100c79:	48 8b 5b 18          	mov    0x18(%rbx),%rbx
  100c7d:	48 39 d9             	cmp    %rbx,%rcx
  100c80:	74 4e                	je     100cd0 <_malloc_r+0x170>
  100c82:	48 8b 43 08          	mov    0x8(%rbx),%rax
  100c86:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
  100c8a:	48 89 c2             	mov    %rax,%rdx
  100c8d:	4c 29 e2             	sub    %r12,%rdx
  100c90:	48 83 fa 1f          	cmp    $0x1f,%rdx
  100c94:	7e da                	jle    100c70 <_malloc_r+0x110>
  100c96:	89 fe                	mov    %edi,%esi
  100c98:	eb 36                	jmp    100cd0 <_malloc_r+0x170>
  100c9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  100ca0:	41 c7 45 00 0c 00 00 	movl   $0xc,0x0(%r13)
  100ca7:	00 
  100ca8:	31 c0                	xor    %eax,%eax
  100caa:	48 83 c4 28          	add    $0x28,%rsp
  100cae:	5b                   	pop    %rbx
  100caf:	41 5c                	pop    %r12
  100cb1:	41 5d                	pop    %r13
  100cb3:	41 5e                	pop    %r14
  100cb5:	41 5f                	pop    %r15
  100cb7:	5d                   	pop    %rbp
  100cb8:	c3                   	retq   
  100cb9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  100cc0:	48 8b 58 18          	mov    0x18(%rax),%rbx
  100cc4:	48 39 d8             	cmp    %rbx,%rax
  100cc7:	0f 85 ed fe ff ff    	jne    100bba <_malloc_r+0x5a>
  100ccd:	83 c6 02             	add    $0x2,%esi
  100cd0:	48 8b 1d c9 68 04 00 	mov    0x468c9(%rip),%rbx        # 1475a0 <__malloc_av_+0x20>
  100cd7:	48 8b 15 aa 68 04 00 	mov    0x468aa(%rip),%rdx        # 147588 <__malloc_av_+0x8>
  100cde:	48 81 fb 90 75 14 00 	cmp    $0x147590,%rbx
  100ce5:	0f 84 8f 00 00 00    	je     100d7a <_malloc_r+0x21a>
  100ceb:	4c 8b 43 08          	mov    0x8(%rbx),%r8
  100cef:	49 83 e0 fc          	and    $0xfffffffffffffffc,%r8
  100cf3:	4c 89 c0             	mov    %r8,%rax
  100cf6:	4c 29 e0             	sub    %r12,%rax
  100cf9:	48 83 f8 1f          	cmp    $0x1f,%rax
  100cfd:	0f 8f 9d 04 00 00    	jg     1011a0 <_malloc_r+0x640>
  100d03:	48 c7 05 9a 68 04 00 	movq   $0x147590,0x4689a(%rip)        # 1475a8 <__malloc_av_+0x28>
  100d0a:	90 75 14 00 
  100d0e:	48 c7 05 87 68 04 00 	movq   $0x147590,0x46887(%rip)        # 1475a0 <__malloc_av_+0x20>
  100d15:	90 75 14 00 
  100d19:	48 85 c0             	test   %rax,%rax
  100d1c:	0f 89 ce 02 00 00    	jns    100ff0 <_malloc_r+0x490>
  100d22:	49 81 f8 ff 01 00 00 	cmp    $0x1ff,%r8
  100d29:	0f 87 21 03 00 00    	ja     101050 <_malloc_r+0x4f0>
  100d2f:	49 c1 e8 03          	shr    $0x3,%r8
  100d33:	ba 01 00 00 00       	mov    $0x1,%edx
  100d38:	44 89 c1             	mov    %r8d,%ecx
  100d3b:	43 8d 44 00 02       	lea    0x2(%r8,%r8,1),%eax
  100d40:	48 98                	cltq   
  100d42:	c1 f9 02             	sar    $0x2,%ecx
  100d45:	48 d3 e2             	shl    %cl,%rdx
  100d48:	48 8b 0c c5 80 75 14 	mov    0x147580(,%rax,8),%rcx
  100d4f:	00 
  100d50:	48 0b 15 31 68 04 00 	or     0x46831(%rip),%rdx        # 147588 <__malloc_av_+0x8>
  100d57:	48 8d 3c c5 70 75 14 	lea    0x147570(,%rax,8),%rdi
  100d5e:	00 
  100d5f:	48 89 7b 18          	mov    %rdi,0x18(%rbx)
  100d63:	48 89 4b 10          	mov    %rcx,0x10(%rbx)
  100d67:	48 89 15 1a 68 04 00 	mov    %rdx,0x4681a(%rip)        # 147588 <__malloc_av_+0x8>
  100d6e:	48 89 1c c5 80 75 14 	mov    %rbx,0x147580(,%rax,8)
  100d75:	00 
  100d76:	48 89 59 18          	mov    %rbx,0x18(%rcx)
  100d7a:	89 f1                	mov    %esi,%ecx
  100d7c:	bf 01 00 00 00       	mov    $0x1,%edi
  100d81:	c1 f9 02             	sar    $0x2,%ecx
  100d84:	48 d3 e7             	shl    %cl,%rdi
  100d87:	48 39 d7             	cmp    %rdx,%rdi
  100d8a:	0f 86 e8 01 00 00    	jbe    100f78 <_malloc_r+0x418>
  100d90:	48 8b 1d f9 67 04 00 	mov    0x467f9(%rip),%rbx        # 147590 <__malloc_av_+0x10>
  100d97:	4c 8b 7b 08          	mov    0x8(%rbx),%r15
  100d9b:	49 83 e7 fc          	and    $0xfffffffffffffffc,%r15
  100d9f:	4c 89 f8             	mov    %r15,%rax
  100da2:	4c 29 e0             	sub    %r12,%rax
  100da5:	48 83 f8 1f          	cmp    $0x1f,%rax
  100da9:	7e 09                	jle    100db4 <_malloc_r+0x254>
  100dab:	4d 39 fc             	cmp    %r15,%r12
  100dae:	0f 86 5c 02 00 00    	jbe    101010 <_malloc_r+0x4b0>
  100db4:	48 8b 05 4d f6 01 00 	mov    0x1f64d(%rip),%rax        # 120408 <__malloc_top_pad>
  100dbb:	4a 8d 14 3b          	lea    (%rbx,%r15,1),%rdx
  100dbf:	4c 89 ef             	mov    %r13,%rdi
  100dc2:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  100dc6:	4c 01 e0             	add    %r12,%rax
  100dc9:	4c 8d b0 1f 10 00 00 	lea    0x101f(%rax),%r14
  100dd0:	48 83 c0 20          	add    $0x20,%rax
  100dd4:	49 81 e6 00 f0 ff ff 	and    $0xfffffffffffff000,%r14
  100ddb:	48 83 3d 05 76 04 00 	cmpq   $0xffffffffffffffff,0x47605(%rip)        # 1483e8 <__malloc_sbrk_base>
  100de2:	ff 
  100de3:	4c 0f 44 f0          	cmove  %rax,%r14
  100de7:	4c 89 f6             	mov    %r14,%rsi
  100dea:	e8 21 07 00 00       	callq  101510 <_sbrk_r>
  100def:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  100df3:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  100df7:	48 89 c1             	mov    %rax,%rcx
  100dfa:	0f 84 80 04 00 00    	je     101280 <_malloc_r+0x720>
  100e00:	48 81 fb 80 75 14 00 	cmp    $0x147580,%rbx
  100e07:	74 09                	je     100e12 <_malloc_r+0x2b2>
  100e09:	48 39 c2             	cmp    %rax,%rdx
  100e0c:	0f 87 6e 04 00 00    	ja     101280 <_malloc_r+0x720>
  100e12:	8b 35 c8 f4 01 00    	mov    0x1f4c8(%rip),%esi        # 1202e0 <__malloc_current_mallinfo>
  100e18:	44 01 f6             	add    %r14d,%esi
  100e1b:	89 35 bf f4 01 00    	mov    %esi,0x1f4bf(%rip)        # 1202e0 <__malloc_current_mallinfo>
  100e21:	89 f0                	mov    %esi,%eax
  100e23:	48 39 ca             	cmp    %rcx,%rdx
  100e26:	0f 84 64 04 00 00    	je     101290 <_malloc_r+0x730>
  100e2c:	48 83 3d b4 75 04 00 	cmpq   $0xffffffffffffffff,0x475b4(%rip)        # 1483e8 <__malloc_sbrk_base>
  100e33:	ff 
  100e34:	0f 84 79 04 00 00    	je     1012b3 <_malloc_r+0x753>
  100e3a:	48 89 c8             	mov    %rcx,%rax
  100e3d:	48 29 d0             	sub    %rdx,%rax
  100e40:	01 c6                	add    %eax,%esi
  100e42:	89 35 98 f4 01 00    	mov    %esi,0x1f498(%rip)        # 1202e0 <__malloc_current_mallinfo>
  100e48:	48 89 ca             	mov    %rcx,%rdx
  100e4b:	83 e2 0f             	and    $0xf,%edx
  100e4e:	0f 84 89 04 00 00    	je     1012dd <_malloc_r+0x77d>
  100e54:	48 29 d1             	sub    %rdx,%rcx
  100e57:	4c 89 ef             	mov    %r13,%rdi
  100e5a:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  100e5e:	48 83 c1 10          	add    $0x10,%rcx
  100e62:	4e 8d 04 31          	lea    (%rcx,%r14,1),%r8
  100e66:	41 be 10 10 00 00    	mov    $0x1010,%r14d
  100e6c:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
  100e70:	49 29 d6             	sub    %rdx,%r14
  100e73:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
  100e77:	4d 29 c6             	sub    %r8,%r14
  100e7a:	41 81 e6 ff 0f 00 00 	and    $0xfff,%r14d
  100e81:	4c 89 f6             	mov    %r14,%rsi
  100e84:	e8 87 06 00 00       	callq  101510 <_sbrk_r>
  100e89:	4c 8b 45 c8          	mov    -0x38(%rbp),%r8
  100e8d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  100e91:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  100e95:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  100e99:	48 89 c6             	mov    %rax,%rsi
  100e9c:	0f 84 23 05 00 00    	je     1013c5 <_malloc_r+0x865>
  100ea2:	48 29 ce             	sub    %rcx,%rsi
  100ea5:	44 89 f0             	mov    %r14d,%eax
  100ea8:	49 01 f6             	add    %rsi,%r14
  100eab:	03 05 2f f4 01 00    	add    0x1f42f(%rip),%eax        # 1202e0 <__malloc_current_mallinfo>
  100eb1:	49 83 ce 01          	or     $0x1,%r14
  100eb5:	48 89 0d d4 66 04 00 	mov    %rcx,0x466d4(%rip)        # 147590 <__malloc_av_+0x10>
  100ebc:	89 05 1e f4 01 00    	mov    %eax,0x1f41e(%rip)        # 1202e0 <__malloc_current_mallinfo>
  100ec2:	4c 89 71 08          	mov    %r14,0x8(%rcx)
  100ec6:	48 81 fb 80 75 14 00 	cmp    $0x147580,%rbx
  100ecd:	0f 84 95 04 00 00    	je     101368 <_malloc_r+0x808>
  100ed3:	49 83 ff 1f          	cmp    $0x1f,%r15
  100ed7:	0f 86 93 04 00 00    	jbe    101370 <_malloc_r+0x810>
  100edd:	48 8b 53 08          	mov    0x8(%rbx),%rdx
  100ee1:	4d 8d 77 e8          	lea    -0x18(%r15),%r14
  100ee5:	49 83 e6 f0          	and    $0xfffffffffffffff0,%r14
  100ee9:	83 e2 01             	and    $0x1,%edx
  100eec:	4c 09 f2             	or     %r14,%rdx
  100eef:	48 89 53 08          	mov    %rdx,0x8(%rbx)
  100ef3:	4a c7 44 33 08 09 00 	movq   $0x9,0x8(%rbx,%r14,1)
  100efa:	00 00 
  100efc:	4a c7 44 33 10 09 00 	movq   $0x9,0x10(%rbx,%r14,1)
  100f03:	00 00 
  100f05:	49 83 fe 1f          	cmp    $0x1f,%r14
  100f09:	0f 87 c5 04 00 00    	ja     1013d4 <_malloc_r+0x874>
  100f0f:	4c 8b 71 08          	mov    0x8(%rcx),%r14
  100f13:	48 89 cb             	mov    %rcx,%rbx
  100f16:	48 98                	cltq   
  100f18:	48 3b 05 e1 f4 01 00 	cmp    0x1f4e1(%rip),%rax        # 120400 <__malloc_max_sbrked_mem>
  100f1f:	76 07                	jbe    100f28 <_malloc_r+0x3c8>
  100f21:	48 89 05 d8 f4 01 00 	mov    %rax,0x1f4d8(%rip)        # 120400 <__malloc_max_sbrked_mem>
  100f28:	48 3b 05 c9 f4 01 00 	cmp    0x1f4c9(%rip),%rax        # 1203f8 <__malloc_max_total_mem>
  100f2f:	76 07                	jbe    100f38 <_malloc_r+0x3d8>
  100f31:	48 89 05 c0 f4 01 00 	mov    %rax,0x1f4c0(%rip)        # 1203f8 <__malloc_max_total_mem>
  100f38:	49 83 e6 fc          	and    $0xfffffffffffffffc,%r14
  100f3c:	4c 89 f0             	mov    %r14,%rax
  100f3f:	4c 29 e0             	sub    %r12,%rax
  100f42:	4d 39 f4             	cmp    %r14,%r12
  100f45:	77 0a                	ja     100f51 <_malloc_r+0x3f1>
  100f47:	48 83 f8 1f          	cmp    $0x1f,%rax
  100f4b:	0f 8f bf 00 00 00    	jg     101010 <_malloc_r+0x4b0>
  100f51:	4c 89 ef             	mov    %r13,%rdi
  100f54:	e8 07 05 00 00       	callq  101460 <__malloc_unlock>
  100f59:	31 c0                	xor    %eax,%eax
  100f5b:	e9 4a fd ff ff       	jmpq   100caa <_malloc_r+0x14a>
  100f60:	b8 00 04 00 00       	mov    $0x400,%eax
  100f65:	be 40 00 00 00       	mov    $0x40,%esi
  100f6a:	bf 3f 00 00 00       	mov    $0x3f,%edi
  100f6f:	e9 dd fc ff ff       	jmpq   100c51 <_malloc_r+0xf1>
  100f74:	0f 1f 40 00          	nopl   0x0(%rax)
  100f78:	48 85 d7             	test   %rdx,%rdi
  100f7b:	75 0e                	jne    100f8b <_malloc_r+0x42b>
  100f7d:	83 e6 fc             	and    $0xfffffffc,%esi
  100f80:	48 01 ff             	add    %rdi,%rdi
  100f83:	83 c6 04             	add    $0x4,%esi
  100f86:	48 85 d7             	test   %rdx,%rdi
  100f89:	74 f5                	je     100f80 <_malloc_r+0x420>
  100f8b:	8d 44 36 02          	lea    0x2(%rsi,%rsi,1),%eax
  100f8f:	41 89 f1             	mov    %esi,%r9d
  100f92:	48 98                	cltq   
  100f94:	4c 8d 14 c5 70 75 14 	lea    0x147570(,%rax,8),%r10
  100f9b:	00 
  100f9c:	4d 89 d0             	mov    %r10,%r8
  100f9f:	49 8b 40 18          	mov    0x18(%r8),%rax
  100fa3:	eb 2b                	jmp    100fd0 <_malloc_r+0x470>
  100fa5:	0f 1f 00             	nopl   (%rax)
  100fa8:	48 8b 50 08          	mov    0x8(%rax),%rdx
  100fac:	48 89 c3             	mov    %rax,%rbx
  100faf:	48 8b 40 18          	mov    0x18(%rax),%rax
  100fb3:	48 83 e2 fc          	and    $0xfffffffffffffffc,%rdx
  100fb7:	48 89 d1             	mov    %rdx,%rcx
  100fba:	4c 29 e1             	sub    %r12,%rcx
  100fbd:	48 83 f9 1f          	cmp    $0x1f,%rcx
  100fc1:	0f 8f 39 01 00 00    	jg     101100 <_malloc_r+0x5a0>
  100fc7:	48 85 c9             	test   %rcx,%rcx
  100fca:	0f 89 90 01 00 00    	jns    101160 <_malloc_r+0x600>
  100fd0:	49 39 c0             	cmp    %rax,%r8
  100fd3:	75 d3                	jne    100fa8 <_malloc_r+0x448>
  100fd5:	41 83 c1 01          	add    $0x1,%r9d
  100fd9:	49 83 c0 10          	add    $0x10,%r8
  100fdd:	41 f6 c1 03          	test   $0x3,%r9b
  100fe1:	75 bc                	jne    100f9f <_malloc_r+0x43f>
  100fe3:	e9 4d 02 00 00       	jmpq   101235 <_malloc_r+0x6d5>
  100fe8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  100fef:	00 
  100ff0:	4a 83 4c 03 08 01    	orq    $0x1,0x8(%rbx,%r8,1)
  100ff6:	4c 89 ef             	mov    %r13,%rdi
  100ff9:	e8 62 04 00 00       	callq  101460 <__malloc_unlock>
  100ffe:	48 8d 43 10          	lea    0x10(%rbx),%rax
  101002:	e9 a3 fc ff ff       	jmpq   100caa <_malloc_r+0x14a>
  101007:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  10100e:	00 00 
  101010:	4c 89 e2             	mov    %r12,%rdx
  101013:	48 83 c8 01          	or     $0x1,%rax
  101017:	49 01 dc             	add    %rbx,%r12
  10101a:	4c 89 ef             	mov    %r13,%rdi
  10101d:	48 83 ca 01          	or     $0x1,%rdx
  101021:	48 89 53 08          	mov    %rdx,0x8(%rbx)
  101025:	4c 89 25 64 65 04 00 	mov    %r12,0x46564(%rip)        # 147590 <__malloc_av_+0x10>
  10102c:	49 89 44 24 08       	mov    %rax,0x8(%r12)
  101031:	e8 2a 04 00 00       	callq  101460 <__malloc_unlock>
  101036:	48 83 c4 28          	add    $0x28,%rsp
  10103a:	48 8d 43 10          	lea    0x10(%rbx),%rax
  10103e:	5b                   	pop    %rbx
  10103f:	41 5c                	pop    %r12
  101041:	41 5d                	pop    %r13
  101043:	41 5e                	pop    %r14
  101045:	41 5f                	pop    %r15
  101047:	5d                   	pop    %rbp
  101048:	c3                   	retq   
  101049:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  101050:	4c 89 c0             	mov    %r8,%rax
  101053:	48 c1 e8 09          	shr    $0x9,%rax
  101057:	49 81 f8 ff 09 00 00 	cmp    $0x9ff,%r8
  10105e:	0f 86 8c 01 00 00    	jbe    1011f0 <_malloc_r+0x690>
  101064:	48 83 f8 14          	cmp    $0x14,%rax
  101068:	0f 87 b4 02 00 00    	ja     101322 <_malloc_r+0x7c2>
  10106e:	8d 48 5b             	lea    0x5b(%rax),%ecx
  101071:	8d 84 00 b8 00 00 00 	lea    0xb8(%rax,%rax,1),%eax
  101078:	48 98                	cltq   
  10107a:	48 c1 e0 03          	shl    $0x3,%rax
  10107e:	48 8d b8 70 75 14 00 	lea    0x147570(%rax),%rdi
  101085:	48 8b 80 80 75 14 00 	mov    0x147580(%rax),%rax
  10108c:	48 39 c7             	cmp    %rax,%rdi
  10108f:	0f 84 2a 02 00 00    	je     1012bf <_malloc_r+0x75f>
  101095:	0f 1f 00             	nopl   (%rax)
  101098:	48 8b 50 08          	mov    0x8(%rax),%rdx
  10109c:	48 83 e2 fc          	and    $0xfffffffffffffffc,%rdx
  1010a0:	4c 39 c2             	cmp    %r8,%rdx
  1010a3:	76 09                	jbe    1010ae <_malloc_r+0x54e>
  1010a5:	48 8b 40 10          	mov    0x10(%rax),%rax
  1010a9:	48 39 c7             	cmp    %rax,%rdi
  1010ac:	75 ea                	jne    101098 <_malloc_r+0x538>
  1010ae:	48 8b 78 18          	mov    0x18(%rax),%rdi
  1010b2:	48 8b 15 cf 64 04 00 	mov    0x464cf(%rip),%rdx        # 147588 <__malloc_av_+0x8>
  1010b9:	48 89 7b 18          	mov    %rdi,0x18(%rbx)
  1010bd:	48 89 43 10          	mov    %rax,0x10(%rbx)
  1010c1:	48 89 5f 10          	mov    %rbx,0x10(%rdi)
  1010c5:	48 89 58 18          	mov    %rbx,0x18(%rax)
  1010c9:	e9 ac fc ff ff       	jmpq   100d7a <_malloc_r+0x21a>
  1010ce:	66 90                	xchg   %ax,%ax
  1010d0:	48 83 fe 14          	cmp    $0x14,%rsi
  1010d4:	0f 86 36 01 00 00    	jbe    101210 <_malloc_r+0x6b0>
  1010da:	48 83 fe 54          	cmp    $0x54,%rsi
  1010de:	0f 87 60 02 00 00    	ja     101344 <_malloc_r+0x7e4>
  1010e4:	4c 89 e6             	mov    %r12,%rsi
  1010e7:	48 c1 ee 0c          	shr    $0xc,%rsi
  1010eb:	8d 7e 6e             	lea    0x6e(%rsi),%edi
  1010ee:	83 c6 6f             	add    $0x6f,%esi
  1010f1:	8d 04 36             	lea    (%rsi,%rsi,1),%eax
  1010f4:	48 98                	cltq   
  1010f6:	48 c1 e0 03          	shl    $0x3,%rax
  1010fa:	e9 52 fb ff ff       	jmpq   100c51 <_malloc_r+0xf1>
  1010ff:	90                   	nop
  101100:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
  101104:	4a 8d 34 23          	lea    (%rbx,%r12,1),%rsi
  101108:	49 83 cc 01          	or     $0x1,%r12
  10110c:	4c 89 63 08          	mov    %r12,0x8(%rbx)
  101110:	48 89 47 18          	mov    %rax,0x18(%rdi)
  101114:	48 89 78 10          	mov    %rdi,0x10(%rax)
  101118:	48 89 c8             	mov    %rcx,%rax
  10111b:	4c 89 ef             	mov    %r13,%rdi
  10111e:	48 83 c8 01          	or     $0x1,%rax
  101122:	48 89 35 7f 64 04 00 	mov    %rsi,0x4647f(%rip)        # 1475a8 <__malloc_av_+0x28>
  101129:	48 89 35 70 64 04 00 	mov    %rsi,0x46470(%rip)        # 1475a0 <__malloc_av_+0x20>
  101130:	48 89 46 08          	mov    %rax,0x8(%rsi)
  101134:	48 c7 46 18 90 75 14 	movq   $0x147590,0x18(%rsi)
  10113b:	00 
  10113c:	48 c7 46 10 90 75 14 	movq   $0x147590,0x10(%rsi)
  101143:	00 
  101144:	48 89 0c 13          	mov    %rcx,(%rbx,%rdx,1)
  101148:	e8 13 03 00 00       	callq  101460 <__malloc_unlock>
  10114d:	48 8d 43 10          	lea    0x10(%rbx),%rax
  101151:	e9 54 fb ff ff       	jmpq   100caa <_malloc_r+0x14a>
  101156:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10115d:	00 00 00 
  101160:	48 83 4c 13 08 01    	orq    $0x1,0x8(%rbx,%rdx,1)
  101166:	48 8b 53 10          	mov    0x10(%rbx),%rdx
  10116a:	4c 89 ef             	mov    %r13,%rdi
  10116d:	48 89 42 18          	mov    %rax,0x18(%rdx)
  101171:	48 89 50 10          	mov    %rdx,0x10(%rax)
  101175:	e8 e6 02 00 00       	callq  101460 <__malloc_unlock>
  10117a:	48 8d 43 10          	lea    0x10(%rbx),%rax
  10117e:	e9 27 fb ff ff       	jmpq   100caa <_malloc_r+0x14a>
  101183:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  101188:	4c 89 e0             	mov    %r12,%rax
  10118b:	48 c1 e8 03          	shr    $0x3,%rax
  10118f:	89 c6                	mov    %eax,%esi
  101191:	8d 44 00 02          	lea    0x2(%rax,%rax,1),%eax
  101195:	48 98                	cltq   
  101197:	48 c1 e0 03          	shl    $0x3,%rax
  10119b:	e9 fd f9 ff ff       	jmpq   100b9d <_malloc_r+0x3d>
  1011a0:	48 89 c1             	mov    %rax,%rcx
  1011a3:	4a 8d 14 23          	lea    (%rbx,%r12,1),%rdx
  1011a7:	49 83 cc 01          	or     $0x1,%r12
  1011ab:	4c 89 ef             	mov    %r13,%rdi
  1011ae:	48 83 c9 01          	or     $0x1,%rcx
  1011b2:	4c 89 63 08          	mov    %r12,0x8(%rbx)
  1011b6:	48 89 15 eb 63 04 00 	mov    %rdx,0x463eb(%rip)        # 1475a8 <__malloc_av_+0x28>
  1011bd:	48 89 15 dc 63 04 00 	mov    %rdx,0x463dc(%rip)        # 1475a0 <__malloc_av_+0x20>
  1011c4:	48 c7 42 18 90 75 14 	movq   $0x147590,0x18(%rdx)
  1011cb:	00 
  1011cc:	48 c7 42 10 90 75 14 	movq   $0x147590,0x10(%rdx)
  1011d3:	00 
  1011d4:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  1011d8:	4a 89 04 03          	mov    %rax,(%rbx,%r8,1)
  1011dc:	e8 7f 02 00 00       	callq  101460 <__malloc_unlock>
  1011e1:	48 8d 43 10          	lea    0x10(%rbx),%rax
  1011e5:	e9 c0 fa ff ff       	jmpq   100caa <_malloc_r+0x14a>
  1011ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  1011f0:	4c 89 c0             	mov    %r8,%rax
  1011f3:	48 c1 e8 06          	shr    $0x6,%rax
  1011f7:	8d 48 38             	lea    0x38(%rax),%ecx
  1011fa:	8d 44 00 72          	lea    0x72(%rax,%rax,1),%eax
  1011fe:	48 98                	cltq   
  101200:	48 c1 e0 03          	shl    $0x3,%rax
  101204:	e9 75 fe ff ff       	jmpq   10107e <_malloc_r+0x51e>
  101209:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  101210:	8d 7e 5b             	lea    0x5b(%rsi),%edi
  101213:	83 c6 5c             	add    $0x5c,%esi
  101216:	8d 04 36             	lea    (%rsi,%rsi,1),%eax
  101219:	48 98                	cltq   
  10121b:	48 c1 e0 03          	shl    $0x3,%rax
  10121f:	e9 2d fa ff ff       	jmpq   100c51 <_malloc_r+0xf1>
  101224:	49 83 ea 10          	sub    $0x10,%r10
  101228:	83 ee 01             	sub    $0x1,%esi
  10122b:	4d 39 52 10          	cmp    %r10,0x10(%r10)
  10122f:	0f 85 08 02 00 00    	jne    10143d <_malloc_r+0x8dd>
  101235:	40 f6 c6 03          	test   $0x3,%sil
  101239:	75 e9                	jne    101224 <_malloc_r+0x6c4>
  10123b:	48 89 f8             	mov    %rdi,%rax
  10123e:	48 f7 d0             	not    %rax
  101241:	48 23 05 40 63 04 00 	and    0x46340(%rip),%rax        # 147588 <__malloc_av_+0x8>
  101248:	48 89 05 39 63 04 00 	mov    %rax,0x46339(%rip)        # 147588 <__malloc_av_+0x8>
  10124f:	48 01 ff             	add    %rdi,%rdi
  101252:	48 39 c7             	cmp    %rax,%rdi
  101255:	0f 87 35 fb ff ff    	ja     100d90 <_malloc_r+0x230>
  10125b:	48 85 ff             	test   %rdi,%rdi
  10125e:	75 0f                	jne    10126f <_malloc_r+0x70f>
  101260:	e9 2b fb ff ff       	jmpq   100d90 <_malloc_r+0x230>
  101265:	0f 1f 00             	nopl   (%rax)
  101268:	41 83 c1 04          	add    $0x4,%r9d
  10126c:	48 01 ff             	add    %rdi,%rdi
  10126f:	48 85 c7             	test   %rax,%rdi
  101272:	74 f4                	je     101268 <_malloc_r+0x708>
  101274:	44 89 ce             	mov    %r9d,%esi
  101277:	e9 0f fd ff ff       	jmpq   100f8b <_malloc_r+0x42b>
  10127c:	0f 1f 40 00          	nopl   0x0(%rax)
  101280:	48 8b 1d 09 63 04 00 	mov    0x46309(%rip),%rbx        # 147590 <__malloc_av_+0x10>
  101287:	4c 8b 73 08          	mov    0x8(%rbx),%r14
  10128b:	e9 a8 fc ff ff       	jmpq   100f38 <_malloc_r+0x3d8>
  101290:	f7 c2 ff 0f 00 00    	test   $0xfff,%edx
  101296:	0f 85 90 fb ff ff    	jne    100e2c <_malloc_r+0x2cc>
  10129c:	48 8b 1d ed 62 04 00 	mov    0x462ed(%rip),%rbx        # 147590 <__malloc_av_+0x10>
  1012a3:	4d 01 fe             	add    %r15,%r14
  1012a6:	49 83 ce 01          	or     $0x1,%r14
  1012aa:	4c 89 73 08          	mov    %r14,0x8(%rbx)
  1012ae:	e9 63 fc ff ff       	jmpq   100f16 <_malloc_r+0x3b6>
  1012b3:	48 89 0d 2e 71 04 00 	mov    %rcx,0x4712e(%rip)        # 1483e8 <__malloc_sbrk_base>
  1012ba:	e9 89 fb ff ff       	jmpq   100e48 <_malloc_r+0x2e8>
  1012bf:	c1 f9 02             	sar    $0x2,%ecx
  1012c2:	ba 01 00 00 00       	mov    $0x1,%edx
  1012c7:	48 d3 e2             	shl    %cl,%rdx
  1012ca:	48 0b 15 b7 62 04 00 	or     0x462b7(%rip),%rdx        # 147588 <__malloc_av_+0x8>
  1012d1:	48 89 15 b0 62 04 00 	mov    %rdx,0x462b0(%rip)        # 147588 <__malloc_av_+0x8>
  1012d8:	e9 dc fd ff ff       	jmpq   1010b9 <_malloc_r+0x559>
  1012dd:	4a 8d 14 31          	lea    (%rcx,%r14,1),%rdx
  1012e1:	4c 89 ef             	mov    %r13,%rdi
  1012e4:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  1012e8:	48 f7 da             	neg    %rdx
  1012eb:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  1012f1:	48 89 d6             	mov    %rdx,%rsi
  1012f4:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  1012f8:	e8 13 02 00 00       	callq  101510 <_sbrk_r>
  1012fd:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  101301:	48 89 c6             	mov    %rax,%rsi
  101304:	31 c0                	xor    %eax,%eax
  101306:	48 83 fe ff          	cmp    $0xffffffffffffffff,%rsi
  10130a:	0f 84 9b fb ff ff    	je     100eab <_malloc_r+0x34b>
  101310:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  101314:	48 29 ce             	sub    %rcx,%rsi
  101317:	89 d0                	mov    %edx,%eax
  101319:	4c 8d 34 16          	lea    (%rsi,%rdx,1),%r14
  10131d:	e9 89 fb ff ff       	jmpq   100eab <_malloc_r+0x34b>
  101322:	48 83 f8 54          	cmp    $0x54,%rax
  101326:	77 55                	ja     10137d <_malloc_r+0x81d>
  101328:	4c 89 c0             	mov    %r8,%rax
  10132b:	48 c1 e8 0c          	shr    $0xc,%rax
  10132f:	8d 48 6e             	lea    0x6e(%rax),%ecx
  101332:	8d 84 00 de 00 00 00 	lea    0xde(%rax,%rax,1),%eax
  101339:	48 98                	cltq   
  10133b:	48 c1 e0 03          	shl    $0x3,%rax
  10133f:	e9 3a fd ff ff       	jmpq   10107e <_malloc_r+0x51e>
  101344:	48 81 fe 54 01 00 00 	cmp    $0x154,%rsi
  10134b:	77 54                	ja     1013a1 <_malloc_r+0x841>
  10134d:	4c 89 e6             	mov    %r12,%rsi
  101350:	48 c1 ee 0f          	shr    $0xf,%rsi
  101354:	8d 7e 77             	lea    0x77(%rsi),%edi
  101357:	83 c6 78             	add    $0x78,%esi
  10135a:	8d 04 36             	lea    (%rsi,%rsi,1),%eax
  10135d:	48 98                	cltq   
  10135f:	48 c1 e0 03          	shl    $0x3,%rax
  101363:	e9 e9 f8 ff ff       	jmpq   100c51 <_malloc_r+0xf1>
  101368:	48 89 cb             	mov    %rcx,%rbx
  10136b:	e9 a6 fb ff ff       	jmpq   100f16 <_malloc_r+0x3b6>
  101370:	48 c7 41 08 01 00 00 	movq   $0x1,0x8(%rcx)
  101377:	00 
  101378:	e9 d4 fb ff ff       	jmpq   100f51 <_malloc_r+0x3f1>
  10137d:	48 3d 54 01 00 00    	cmp    $0x154,%rax
  101383:	77 71                	ja     1013f6 <_malloc_r+0x896>
  101385:	4c 89 c0             	mov    %r8,%rax
  101388:	48 c1 e8 0f          	shr    $0xf,%rax
  10138c:	8d 48 77             	lea    0x77(%rax),%ecx
  10138f:	8d 84 00 f0 00 00 00 	lea    0xf0(%rax,%rax,1),%eax
  101396:	48 98                	cltq   
  101398:	48 c1 e0 03          	shl    $0x3,%rax
  10139c:	e9 dd fc ff ff       	jmpq   10107e <_malloc_r+0x51e>
  1013a1:	48 81 fe 54 05 00 00 	cmp    $0x554,%rsi
  1013a8:	77 70                	ja     10141a <_malloc_r+0x8ba>
  1013aa:	4c 89 e6             	mov    %r12,%rsi
  1013ad:	48 c1 ee 12          	shr    $0x12,%rsi
  1013b1:	8d 7e 7c             	lea    0x7c(%rsi),%edi
  1013b4:	83 c6 7d             	add    $0x7d,%esi
  1013b7:	8d 04 36             	lea    (%rsi,%rsi,1),%eax
  1013ba:	48 98                	cltq   
  1013bc:	48 c1 e0 03          	shl    $0x3,%rax
  1013c0:	e9 8c f8 ff ff       	jmpq   100c51 <_malloc_r+0xf1>
  1013c5:	4d 8d 74 10 f0       	lea    -0x10(%r8,%rdx,1),%r14
  1013ca:	31 c0                	xor    %eax,%eax
  1013cc:	49 29 ce             	sub    %rcx,%r14
  1013cf:	e9 d7 fa ff ff       	jmpq   100eab <_malloc_r+0x34b>
  1013d4:	48 8d 73 10          	lea    0x10(%rbx),%rsi
  1013d8:	4c 89 ef             	mov    %r13,%rdi
  1013db:	e8 c0 54 00 00       	callq  1068a0 <_free_r>
  1013e0:	48 8b 1d a9 61 04 00 	mov    0x461a9(%rip),%rbx        # 147590 <__malloc_av_+0x10>
  1013e7:	8b 05 f3 ee 01 00    	mov    0x1eef3(%rip),%eax        # 1202e0 <__malloc_current_mallinfo>
  1013ed:	4c 8b 73 08          	mov    0x8(%rbx),%r14
  1013f1:	e9 20 fb ff ff       	jmpq   100f16 <_malloc_r+0x3b6>
  1013f6:	48 3d 54 05 00 00    	cmp    $0x554,%rax
  1013fc:	77 30                	ja     10142e <_malloc_r+0x8ce>
  1013fe:	4c 89 c0             	mov    %r8,%rax
  101401:	48 c1 e8 12          	shr    $0x12,%rax
  101405:	8d 48 7c             	lea    0x7c(%rax),%ecx
  101408:	8d 84 00 fa 00 00 00 	lea    0xfa(%rax,%rax,1),%eax
  10140f:	48 98                	cltq   
  101411:	48 c1 e0 03          	shl    $0x3,%rax
  101415:	e9 64 fc ff ff       	jmpq   10107e <_malloc_r+0x51e>
  10141a:	b8 f0 07 00 00       	mov    $0x7f0,%eax
  10141f:	be 7f 00 00 00       	mov    $0x7f,%esi
  101424:	bf 7e 00 00 00       	mov    $0x7e,%edi
  101429:	e9 23 f8 ff ff       	jmpq   100c51 <_malloc_r+0xf1>
  10142e:	b8 f0 07 00 00       	mov    $0x7f0,%eax
  101433:	b9 7e 00 00 00       	mov    $0x7e,%ecx
  101438:	e9 41 fc ff ff       	jmpq   10107e <_malloc_r+0x51e>
  10143d:	48 8b 05 44 61 04 00 	mov    0x46144(%rip),%rax        # 147588 <__malloc_av_+0x8>
  101444:	e9 06 fe ff ff       	jmpq   10124f <_malloc_r+0x6ef>
  101449:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000101450 <__malloc_lock>:
  101450:	bf 20 84 14 00       	mov    $0x148420,%edi
  101455:	e9 a4 b8 00 00       	jmpq   10ccfe <__retarget_lock_acquire_recursive>
  10145a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000101460 <__malloc_unlock>:
  101460:	bf 20 84 14 00       	mov    $0x148420,%edi
  101465:	e9 9d b8 00 00       	jmpq   10cd07 <__retarget_lock_release_recursive>
  10146a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000101470 <printf>:
  101470:	55                   	push   %rbp
  101471:	49 89 fa             	mov    %rdi,%r10
  101474:	48 89 e5             	mov    %rsp,%rbp
  101477:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  10147e:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)
  101485:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  10148c:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  101493:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  10149a:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  1014a1:	84 c0                	test   %al,%al
  1014a3:	74 20                	je     1014c5 <printf+0x55>
  1014a5:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  1014a9:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  1014ad:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  1014b1:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  1014b5:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  1014b9:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  1014bd:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  1014c1:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  1014c5:	48 8b 3d 2c 6f 04 00 	mov    0x46f2c(%rip),%rdi        # 1483f8 <_impure_ptr>
  1014cc:	48 8d 45 10          	lea    0x10(%rbp),%rax
  1014d0:	48 8d 8d 38 ff ff ff 	lea    -0xc8(%rbp),%rcx
  1014d7:	4c 89 d2             	mov    %r10,%rdx
  1014da:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  1014e1:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  1014e8:	48 8b 77 10          	mov    0x10(%rdi),%rsi
  1014ec:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  1014f3:	c7 85 38 ff ff ff 08 	movl   $0x8,-0xc8(%rbp)
  1014fa:	00 00 00 
  1014fd:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  101504:	00 00 00 
  101507:	e8 d4 01 00 00       	callq  1016e0 <_vfprintf_r>
  10150c:	c9                   	leaveq 
  10150d:	c3                   	retq   
  10150e:	66 90                	xchg   %ax,%ax

0000000000101510 <_sbrk_r>:
  101510:	55                   	push   %rbp
  101511:	48 89 e5             	mov    %rsp,%rbp
  101514:	53                   	push   %rbx
  101515:	48 89 fb             	mov    %rdi,%rbx
  101518:	48 89 f7             	mov    %rsi,%rdi
  10151b:	48 83 ec 08          	sub    $0x8,%rsp
  10151f:	c7 05 0b ef 01 00 00 	movl   $0x0,0x1ef0b(%rip)        # 120434 <errno>
  101526:	00 00 00 
  101529:	e8 81 b7 00 00       	callq  10ccaf <_sbrk>
  10152e:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  101532:	74 0c                	je     101540 <_sbrk_r+0x30>
  101534:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  101538:	c9                   	leaveq 
  101539:	c3                   	retq   
  10153a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  101540:	8b 15 ee ee 01 00    	mov    0x1eeee(%rip),%edx        # 120434 <errno>
  101546:	85 d2                	test   %edx,%edx
  101548:	74 ea                	je     101534 <_sbrk_r+0x24>
  10154a:	89 13                	mov    %edx,(%rbx)
  10154c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  101550:	c9                   	leaveq 
  101551:	c3                   	retq   
  101552:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  101559:	00 00 00 
  10155c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000101560 <strlen>:
  101560:	48 89 f8             	mov    %rdi,%rax
  101563:	40 f6 c7 07          	test   $0x7,%dil
  101567:	75 0f                	jne    101578 <strlen+0x18>
  101569:	eb 1d                	jmp    101588 <strlen+0x28>
  10156b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  101570:	48 83 c0 01          	add    $0x1,%rax
  101574:	a8 07                	test   $0x7,%al
  101576:	74 10                	je     101588 <strlen+0x28>
  101578:	80 38 00             	cmpb   $0x0,(%rax)
  10157b:	75 f3                	jne    101570 <strlen+0x10>
  10157d:	48 29 f8             	sub    %rdi,%rax
  101580:	c3                   	retq   
  101581:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  101588:	49 b8 ff fe fe fe fe 	movabs $0xfefefefefefefeff,%r8
  10158f:	fe fe fe 
  101592:	48 8b 10             	mov    (%rax),%rdx
  101595:	48 be 80 80 80 80 80 	movabs $0x8080808080808080,%rsi
  10159c:	80 80 80 
  10159f:	4a 8d 0c 02          	lea    (%rdx,%r8,1),%rcx
  1015a3:	48 f7 d2             	not    %rdx
  1015a6:	48 21 ca             	and    %rcx,%rdx
  1015a9:	48 85 f2             	test   %rsi,%rdx
  1015ac:	75 26                	jne    1015d4 <strlen+0x74>
  1015ae:	66 90                	xchg   %ax,%ax
  1015b0:	48 8b 50 08          	mov    0x8(%rax),%rdx
  1015b4:	48 83 c0 08          	add    $0x8,%rax
  1015b8:	4a 8d 0c 02          	lea    (%rdx,%r8,1),%rcx
  1015bc:	48 f7 d2             	not    %rdx
  1015bf:	48 21 ca             	and    %rcx,%rdx
  1015c2:	48 85 f2             	test   %rsi,%rdx
  1015c5:	74 e9                	je     1015b0 <strlen+0x50>
  1015c7:	eb 0b                	jmp    1015d4 <strlen+0x74>
  1015c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  1015d0:	48 83 c0 01          	add    $0x1,%rax
  1015d4:	80 38 00             	cmpb   $0x0,(%rax)
  1015d7:	75 f7                	jne    1015d0 <strlen+0x70>
  1015d9:	48 29 f8             	sub    %rdi,%rax
  1015dc:	c3                   	retq   
  1015dd:	0f 1f 00             	nopl   (%rax)

00000000001015e0 <strncpy>:
  1015e0:	48 89 f0             	mov    %rsi,%rax
  1015e3:	49 89 f9             	mov    %rdi,%r9
  1015e6:	48 89 f9             	mov    %rdi,%rcx
  1015e9:	48 09 f8             	or     %rdi,%rax
  1015ec:	a8 07                	test   $0x7,%al
  1015ee:	75 6e                	jne    10165e <strncpy+0x7e>
  1015f0:	48 83 fa 07          	cmp    $0x7,%rdx
  1015f4:	76 68                	jbe    10165e <strncpy+0x7e>
  1015f6:	49 bb ff fe fe fe fe 	movabs $0xfefefefefefefeff,%r11
  1015fd:	fe fe fe 
  101600:	49 ba 80 80 80 80 80 	movabs $0x8080808080808080,%r10
  101607:	80 80 80 
  10160a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  101610:	48 8b 3e             	mov    (%rsi),%rdi
  101613:	49 89 f8             	mov    %rdi,%r8
  101616:	4a 8d 04 1f          	lea    (%rdi,%r11,1),%rax
  10161a:	49 f7 d0             	not    %r8
  10161d:	4c 21 c0             	and    %r8,%rax
  101620:	4c 85 d0             	test   %r10,%rax
  101623:	75 39                	jne    10165e <strncpy+0x7e>
  101625:	48 83 ea 08          	sub    $0x8,%rdx
  101629:	48 83 c1 08          	add    $0x8,%rcx
  10162d:	48 83 c6 08          	add    $0x8,%rsi
  101631:	48 89 79 f8          	mov    %rdi,-0x8(%rcx)
  101635:	48 83 fa 07          	cmp    $0x7,%rdx
  101639:	77 d5                	ja     101610 <strncpy+0x30>
  10163b:	48 85 d2             	test   %rdx,%rdx
  10163e:	74 23                	je     101663 <strncpy+0x83>
  101640:	0f b6 3e             	movzbl (%rsi),%edi
  101643:	48 83 c6 01          	add    $0x1,%rsi
  101647:	48 8d 41 01          	lea    0x1(%rcx),%rax
  10164b:	4c 8d 42 ff          	lea    -0x1(%rdx),%r8
  10164f:	40 88 78 ff          	mov    %dil,-0x1(%rax)
  101653:	40 84 ff             	test   %dil,%dil
  101656:	74 18                	je     101670 <strncpy+0x90>
  101658:	48 89 c1             	mov    %rax,%rcx
  10165b:	4c 89 c2             	mov    %r8,%rdx
  10165e:	48 85 d2             	test   %rdx,%rdx
  101661:	75 dd                	jne    101640 <strncpy+0x60>
  101663:	4c 89 c8             	mov    %r9,%rax
  101666:	c3                   	retq   
  101667:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  10166e:	00 00 
  101670:	48 01 ca             	add    %rcx,%rdx
  101673:	4d 85 c0             	test   %r8,%r8
  101676:	74 eb                	je     101663 <strncpy+0x83>
  101678:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10167f:	00 
  101680:	48 83 c0 01          	add    $0x1,%rax
  101684:	c6 40 ff 00          	movb   $0x0,-0x1(%rax)
  101688:	48 39 d0             	cmp    %rdx,%rax
  10168b:	75 f3                	jne    101680 <strncpy+0xa0>
  10168d:	4c 89 c8             	mov    %r9,%rax
  101690:	c3                   	retq   
  101691:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  101698:	00 00 00 
  10169b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000001016a0 <strnlen>:
  1016a0:	48 8d 14 37          	lea    (%rdi,%rsi,1),%rdx
  1016a4:	48 89 f8             	mov    %rdi,%rax
  1016a7:	48 85 f6             	test   %rsi,%rsi
  1016aa:	75 0d                	jne    1016b9 <strnlen+0x19>
  1016ac:	eb 21                	jmp    1016cf <strnlen+0x2f>
  1016ae:	66 90                	xchg   %ax,%ax
  1016b0:	48 83 c0 01          	add    $0x1,%rax
  1016b4:	48 39 c2             	cmp    %rax,%rdx
  1016b7:	74 0f                	je     1016c8 <strnlen+0x28>
  1016b9:	80 38 00             	cmpb   $0x0,(%rax)
  1016bc:	75 f2                	jne    1016b0 <strnlen+0x10>
  1016be:	48 29 f8             	sub    %rdi,%rax
  1016c1:	c3                   	retq   
  1016c2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  1016c8:	48 89 d0             	mov    %rdx,%rax
  1016cb:	48 29 f8             	sub    %rdi,%rax
  1016ce:	c3                   	retq   
  1016cf:	31 c0                	xor    %eax,%eax
  1016d1:	c3                   	retq   
  1016d2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1016d9:	00 00 00 
  1016dc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000001016e0 <_vfprintf_r>:
  1016e0:	55                   	push   %rbp
  1016e1:	48 89 e5             	mov    %rsp,%rbp
  1016e4:	41 57                	push   %r15
  1016e6:	41 56                	push   %r14
  1016e8:	49 89 fe             	mov    %rdi,%r14
  1016eb:	41 55                	push   %r13
  1016ed:	49 89 d5             	mov    %rdx,%r13
  1016f0:	41 54                	push   %r12
  1016f2:	53                   	push   %rbx
  1016f3:	48 81 ec e8 01 00 00 	sub    $0x1e8,%rsp
  1016fa:	48 89 b5 90 fe ff ff 	mov    %rsi,-0x170(%rbp)
  101701:	48 89 8d 70 fe ff ff 	mov    %rcx,-0x190(%rbp)
  101708:	e8 a3 55 00 00       	callq  106cb0 <_localeconv_r>
  10170d:	48 8b 00             	mov    (%rax),%rax
  101710:	48 89 c7             	mov    %rax,%rdi
  101713:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
  10171a:	e8 41 fe ff ff       	callq  101560 <strlen>
  10171f:	48 89 85 40 fe ff ff 	mov    %rax,-0x1c0(%rbp)
  101726:	4d 85 f6             	test   %r14,%r14
  101729:	74 0d                	je     101738 <_vfprintf_r+0x58>
  10172b:	45 8b 56 50          	mov    0x50(%r14),%r10d
  10172f:	45 85 d2             	test   %r10d,%r10d
  101732:	0f 84 99 05 00 00    	je     101cd1 <_vfprintf_r+0x5f1>
  101738:	48 8b 8d 90 fe ff ff 	mov    -0x170(%rbp),%rcx
  10173f:	0f b7 41 10          	movzwl 0x10(%rcx),%eax
  101743:	f6 81 b0 00 00 00 01 	testb  $0x1,0xb0(%rcx)
  10174a:	75 09                	jne    101755 <_vfprintf_r+0x75>
  10174c:	f6 c4 02             	test   $0x2,%ah
  10174f:	0f 84 c6 15 00 00    	je     102d1b <_vfprintf_r+0x163b>
  101755:	a8 08                	test   $0x8,%al
  101757:	0f 84 83 03 00 00    	je     101ae0 <_vfprintf_r+0x400>
  10175d:	48 8b 8d 90 fe ff ff 	mov    -0x170(%rbp),%rcx
  101764:	48 83 79 18 00       	cmpq   $0x0,0x18(%rcx)
  101769:	0f 84 71 03 00 00    	je     101ae0 <_vfprintf_r+0x400>
  10176f:	89 c2                	mov    %eax,%edx
  101771:	83 e2 1a             	and    $0x1a,%edx
  101774:	66 83 fa 0a          	cmp    $0xa,%dx
  101778:	0f 84 8f 03 00 00    	je     101b0d <_vfprintf_r+0x42d>
  10177e:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  101785:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  10178c:	00 00 00 00 
  101790:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
  101797:	49 89 c2             	mov    %rax,%r10
  10179a:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  1017a1:	00 00 00 
  1017a4:	c7 85 58 fe ff ff 00 	movl   $0x0,-0x1a8(%rbp)
  1017ab:	00 00 00 
  1017ae:	48 c7 85 48 fe ff ff 	movq   $0x0,-0x1b8(%rbp)
  1017b5:	00 00 00 00 
  1017b9:	48 c7 85 20 fe ff ff 	movq   $0x0,-0x1e0(%rbp)
  1017c0:	00 00 00 00 
  1017c4:	c7 85 14 fe ff ff 00 	movl   $0x0,-0x1ec(%rbp)
  1017cb:	00 00 00 
  1017ce:	48 c7 85 38 fe ff ff 	movq   $0x0,-0x1c8(%rbp)
  1017d5:	00 00 00 00 
  1017d9:	48 c7 85 28 fe ff ff 	movq   $0x0,-0x1d8(%rbp)
  1017e0:	00 00 00 00 
  1017e4:	48 c7 85 08 fe ff ff 	movq   $0x0,-0x1f8(%rbp)
  1017eb:	00 00 00 00 
  1017ef:	c7 85 88 fe ff ff 00 	movl   $0x0,-0x178(%rbp)
  1017f6:	00 00 00 
  1017f9:	41 0f b6 45 00       	movzbl 0x0(%r13),%eax
  1017fe:	4c 89 eb             	mov    %r13,%rbx
  101801:	3c 25                	cmp    $0x25,%al
  101803:	74 64                	je     101869 <_vfprintf_r+0x189>
  101805:	84 c0                	test   %al,%al
  101807:	74 60                	je     101869 <_vfprintf_r+0x189>
  101809:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  101810:	49 89 dc             	mov    %rbx,%r12
  101813:	0f b6 43 01          	movzbl 0x1(%rbx),%eax
  101817:	48 83 c3 01          	add    $0x1,%rbx
  10181b:	84 c0                	test   %al,%al
  10181d:	74 04                	je     101823 <_vfprintf_r+0x143>
  10181f:	3c 25                	cmp    $0x25,%al
  101821:	75 ed                	jne    101810 <_vfprintf_r+0x130>
  101823:	49 89 df             	mov    %rbx,%r15
  101826:	4d 29 ef             	sub    %r13,%r15
  101829:	44 39 eb             	cmp    %r13d,%ebx
  10182c:	74 3b                	je     101869 <_vfprintf_r+0x189>
  10182e:	49 63 c7             	movslq %r15d,%rax
  101831:	48 01 85 d0 fe ff ff 	add    %rax,-0x130(%rbp)
  101838:	49 83 c2 10          	add    $0x10,%r10
  10183c:	49 89 42 f8          	mov    %rax,-0x8(%r10)
  101840:	8b 85 c8 fe ff ff    	mov    -0x138(%rbp),%eax
  101846:	4d 89 6a f0          	mov    %r13,-0x10(%r10)
  10184a:	83 c0 01             	add    $0x1,%eax
  10184d:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)
  101853:	83 f8 07             	cmp    $0x7,%eax
  101856:	0f 8f 04 03 00 00    	jg     101b60 <_vfprintf_r+0x480>
  10185c:	44 01 bd 88 fe ff ff 	add    %r15d,-0x178(%rbp)
  101863:	41 0f b6 44 24 01    	movzbl 0x1(%r12),%eax
  101869:	84 c0                	test   %al,%al
  10186b:	0f 84 8a 1c 00 00    	je     1034fb <_vfprintf_r+0x1e1b>
  101871:	44 0f be 5b 01       	movsbl 0x1(%rbx),%r11d
  101876:	4c 8d 6b 01          	lea    0x1(%rbx),%r13
  10187a:	45 31 ff             	xor    %r15d,%r15d
  10187d:	4d 89 d4             	mov    %r10,%r12
  101880:	c6 85 a5 fe ff ff 00 	movb   $0x0,-0x15b(%rbp)
  101887:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
  10188c:	c7 85 8c fe ff ff 00 	movl   $0x0,-0x174(%rbp)
  101893:	00 00 00 
  101896:	49 83 c5 01          	add    $0x1,%r13
  10189a:	41 8d 43 e0          	lea    -0x20(%r11),%eax
  10189e:	83 f8 5a             	cmp    $0x5a,%eax
  1018a1:	77 3d                	ja     1018e0 <_vfprintf_r+0x200>
  1018a3:	ff 24 c5 60 0a 11 00 	jmpq   *0x110a60(,%rax,8)
  1018aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  1018b0:	31 d2                	xor    %edx,%edx
  1018b2:	41 8d 43 d0          	lea    -0x30(%r11),%eax
  1018b6:	45 0f be 5d 00       	movsbl 0x0(%r13),%r11d
  1018bb:	8d 14 92             	lea    (%rdx,%rdx,4),%edx
  1018be:	49 83 c5 01          	add    $0x1,%r13
  1018c2:	8d 14 50             	lea    (%rax,%rdx,2),%edx
  1018c5:	41 8d 43 d0          	lea    -0x30(%r11),%eax
  1018c9:	83 f8 09             	cmp    $0x9,%eax
  1018cc:	76 e8                	jbe    1018b6 <_vfprintf_r+0x1d6>
  1018ce:	41 8d 43 e0          	lea    -0x20(%r11),%eax
  1018d2:	89 95 8c fe ff ff    	mov    %edx,-0x174(%rbp)
  1018d8:	83 f8 5a             	cmp    $0x5a,%eax
  1018db:	76 c6                	jbe    1018a3 <_vfprintf_r+0x1c3>
  1018dd:	0f 1f 00             	nopl   (%rax)
  1018e0:	4d 89 e2             	mov    %r12,%r10
  1018e3:	45 85 db             	test   %r11d,%r11d
  1018e6:	0f 84 0f 1c 00 00    	je     1034fb <_vfprintf_r+0x1e1b>
  1018ec:	44 88 9d e0 fe ff ff 	mov    %r11b,-0x120(%rbp)
  1018f3:	48 8d 8d e0 fe ff ff 	lea    -0x120(%rbp),%rcx
  1018fa:	c6 85 a5 fe ff ff 00 	movb   $0x0,-0x15b(%rbp)
  101901:	c7 85 98 fe ff ff 01 	movl   $0x1,-0x168(%rbp)
  101908:	00 00 00 
  10190b:	c7 85 80 fe ff ff 01 	movl   $0x1,-0x180(%rbp)
  101912:	00 00 00 
  101915:	48 c7 85 78 fe ff ff 	movq   $0x0,-0x188(%rbp)
  10191c:	00 00 00 00 
  101920:	31 db                	xor    %ebx,%ebx
  101922:	c7 85 50 fe ff ff 00 	movl   $0x0,-0x1b0(%rbp)
  101929:	00 00 00 
  10192c:	c7 85 5c fe ff ff 00 	movl   $0x0,-0x1a4(%rbp)
  101933:	00 00 00 
  101936:	c7 85 60 fe ff ff 00 	movl   $0x0,-0x1a0(%rbp)
  10193d:	00 00 00 
  101940:	8b bd 98 fe ff ff    	mov    -0x168(%rbp),%edi
  101946:	45 89 fc             	mov    %r15d,%r12d
  101949:	44 89 fe             	mov    %r15d,%esi
  10194c:	41 83 e4 02          	and    $0x2,%r12d
  101950:	8d 47 02             	lea    0x2(%rdi),%eax
  101953:	0f 44 c7             	cmove  %edi,%eax
  101956:	81 e6 84 00 00 00    	and    $0x84,%esi
  10195c:	89 b5 68 fe ff ff    	mov    %esi,-0x198(%rbp)
  101962:	89 85 98 fe ff ff    	mov    %eax,-0x168(%rbp)
  101968:	89 c7                	mov    %eax,%edi
  10196a:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  101971:	75 13                	jne    101986 <_vfprintf_r+0x2a6>
  101973:	44 8b 85 8c fe ff ff 	mov    -0x174(%rbp),%r8d
  10197a:	41 29 f8             	sub    %edi,%r8d
  10197d:	45 85 c0             	test   %r8d,%r8d
  101980:	0f 8f 2a 0d 00 00    	jg     1026b0 <_vfprintf_r+0xfd0>
  101986:	80 bd a5 fe ff ff 00 	cmpb   $0x0,-0x15b(%rbp)
  10198d:	74 3a                	je     1019c9 <_vfprintf_r+0x2e9>
  10198f:	8b b5 c8 fe ff ff    	mov    -0x138(%rbp),%esi
  101995:	48 83 c0 01          	add    $0x1,%rax
  101999:	49 83 c2 10          	add    $0x10,%r10
  10199d:	48 8d 95 a5 fe ff ff 	lea    -0x15b(%rbp),%rdx
  1019a4:	49 89 52 f0          	mov    %rdx,-0x10(%r10)
  1019a8:	8d 56 01             	lea    0x1(%rsi),%edx
  1019ab:	49 c7 42 f8 01 00 00 	movq   $0x1,-0x8(%r10)
  1019b2:	00 
  1019b3:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  1019ba:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  1019c0:	83 fa 07             	cmp    $0x7,%edx
  1019c3:	0f 8f 3f 0e 00 00    	jg     102808 <_vfprintf_r+0x1128>
  1019c9:	45 85 e4             	test   %r12d,%r12d
  1019cc:	74 3a                	je     101a08 <_vfprintf_r+0x328>
  1019ce:	8b bd c8 fe ff ff    	mov    -0x138(%rbp),%edi
  1019d4:	48 83 c0 02          	add    $0x2,%rax
  1019d8:	49 83 c2 10          	add    $0x10,%r10
  1019dc:	48 8d 95 a6 fe ff ff 	lea    -0x15a(%rbp),%rdx
  1019e3:	49 89 52 f0          	mov    %rdx,-0x10(%r10)
  1019e7:	8d 57 01             	lea    0x1(%rdi),%edx
  1019ea:	49 c7 42 f8 02 00 00 	movq   $0x2,-0x8(%r10)
  1019f1:	00 
  1019f2:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  1019f9:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  1019ff:	83 fa 07             	cmp    $0x7,%edx
  101a02:	0f 8f 50 0e 00 00    	jg     102858 <_vfprintf_r+0x1178>
  101a08:	81 bd 68 fe ff ff 80 	cmpl   $0x80,-0x198(%rbp)
  101a0f:	00 00 00 
  101a12:	0f 84 a8 08 00 00    	je     1022c0 <_vfprintf_r+0xbe0>
  101a18:	2b 9d 80 fe ff ff    	sub    -0x180(%rbp),%ebx
  101a1e:	85 db                	test   %ebx,%ebx
  101a20:	0f 8f fa 09 00 00    	jg     102420 <_vfprintf_r+0xd40>
  101a26:	41 f7 c7 00 01 00 00 	test   $0x100,%r15d
  101a2d:	0f 85 45 07 00 00    	jne    102178 <_vfprintf_r+0xa98>
  101a33:	48 63 9d 80 fe ff ff 	movslq -0x180(%rbp),%rbx
  101a3a:	49 89 0a             	mov    %rcx,(%r10)
  101a3d:	8b 8d c8 fe ff ff    	mov    -0x138(%rbp),%ecx
  101a43:	48 01 d8             	add    %rbx,%rax
  101a46:	49 89 5a 08          	mov    %rbx,0x8(%r10)
  101a4a:	8d 51 01             	lea    0x1(%rcx),%edx
  101a4d:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  101a54:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  101a5a:	83 fa 07             	cmp    $0x7,%edx
  101a5d:	0f 8f 12 0c 00 00    	jg     102675 <_vfprintf_r+0xf95>
  101a63:	49 83 c2 10          	add    $0x10,%r10
  101a67:	41 83 e7 04          	and    $0x4,%r15d
  101a6b:	74 14                	je     101a81 <_vfprintf_r+0x3a1>
  101a6d:	8b 9d 8c fe ff ff    	mov    -0x174(%rbp),%ebx
  101a73:	2b 9d 98 fe ff ff    	sub    -0x168(%rbp),%ebx
  101a79:	85 db                	test   %ebx,%ebx
  101a7b:	0f 8f 27 0e 00 00    	jg     1028a8 <_vfprintf_r+0x11c8>
  101a81:	8b 8d 8c fe ff ff    	mov    -0x174(%rbp),%ecx
  101a87:	8b 95 98 fe ff ff    	mov    -0x168(%rbp),%edx
  101a8d:	39 d1                	cmp    %edx,%ecx
  101a8f:	0f 4d d1             	cmovge %ecx,%edx
  101a92:	01 95 88 fe ff ff    	add    %edx,-0x178(%rbp)
  101a98:	48 85 c0             	test   %rax,%rax
  101a9b:	0f 85 af 0a 00 00    	jne    102550 <_vfprintf_r+0xe70>
  101aa1:	48 83 bd 78 fe ff ff 	cmpq   $0x0,-0x188(%rbp)
  101aa8:	00 
  101aa9:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  101ab0:	00 00 00 
  101ab3:	74 0f                	je     101ac4 <_vfprintf_r+0x3e4>
  101ab5:	48 8b b5 78 fe ff ff 	mov    -0x188(%rbp),%rsi
  101abc:	4c 89 f7             	mov    %r14,%rdi
  101abf:	e8 dc 4d 00 00       	callq  1068a0 <_free_r>
  101ac4:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  101acb:	e9 29 fd ff ff       	jmpq   1017f9 <_vfprintf_r+0x119>
  101ad0:	45 0f be 5d 00       	movsbl 0x0(%r13),%r11d
  101ad5:	41 83 cf 10          	or     $0x10,%r15d
  101ad9:	e9 b8 fd ff ff       	jmpq   101896 <_vfprintf_r+0x1b6>
  101ade:	66 90                	xchg   %ax,%ax
  101ae0:	48 8b 9d 90 fe ff ff 	mov    -0x170(%rbp),%rbx
  101ae7:	4c 89 f7             	mov    %r14,%rdi
  101aea:	48 89 de             	mov    %rbx,%rsi
  101aed:	e8 ce 2f 00 00       	callq  104ac0 <__swsetup_r>
  101af2:	85 c0                	test   %eax,%eax
  101af4:	0f 85 10 2a 00 00    	jne    10450a <_vfprintf_r+0x2e2a>
  101afa:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  101afe:	89 c2                	mov    %eax,%edx
  101b00:	83 e2 1a             	and    $0x1a,%edx
  101b03:	66 83 fa 0a          	cmp    $0xa,%dx
  101b07:	0f 85 71 fc ff ff    	jne    10177e <_vfprintf_r+0x9e>
  101b0d:	48 8b 8d 90 fe ff ff 	mov    -0x170(%rbp),%rcx
  101b14:	66 83 79 12 00       	cmpw   $0x0,0x12(%rcx)
  101b19:	0f 88 5f fc ff ff    	js     10177e <_vfprintf_r+0x9e>
  101b1f:	f6 81 b0 00 00 00 01 	testb  $0x1,0xb0(%rcx)
  101b26:	75 09                	jne    101b31 <_vfprintf_r+0x451>
  101b28:	f6 c4 02             	test   $0x2,%ah
  101b2b:	0f 84 f7 20 00 00    	je     103c28 <_vfprintf_r+0x2548>
  101b31:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  101b38:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  101b3f:	4c 89 ea             	mov    %r13,%rdx
  101b42:	4c 89 f7             	mov    %r14,%rdi
  101b45:	48 81 c4 e8 01 00 00 	add    $0x1e8,%rsp
  101b4c:	5b                   	pop    %rbx
  101b4d:	41 5c                	pop    %r12
  101b4f:	41 5d                	pop    %r13
  101b51:	41 5e                	pop    %r14
  101b53:	41 5f                	pop    %r15
  101b55:	5d                   	pop    %rbp
  101b56:	e9 65 2e 00 00       	jmpq   1049c0 <__sbprintf>
  101b5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  101b60:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  101b67:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  101b6e:	4c 89 f7             	mov    %r14,%rdi
  101b71:	e8 9a 60 00 00       	callq  107c10 <__sprint_r>
  101b76:	85 c0                	test   %eax,%eax
  101b78:	75 30                	jne    101baa <_vfprintf_r+0x4ca>
  101b7a:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  101b81:	e9 d6 fc ff ff       	jmpq   10185c <_vfprintf_r+0x17c>
  101b86:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  101b8d:	00 00 00 
  101b90:	4d 89 ee             	mov    %r13,%r14
  101b93:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
  101b9a:	48 85 c0             	test   %rax,%rax
  101b9d:	74 0b                	je     101baa <_vfprintf_r+0x4ca>
  101b9f:	48 89 c6             	mov    %rax,%rsi
  101ba2:	4c 89 f7             	mov    %r14,%rdi
  101ba5:	e8 f6 4c 00 00       	callq  1068a0 <_free_r>
  101baa:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  101bb1:	0f b7 46 10          	movzwl 0x10(%rsi),%eax
  101bb5:	f6 86 b0 00 00 00 01 	testb  $0x1,0xb0(%rsi)
  101bbc:	0f 84 ee 00 00 00    	je     101cb0 <_vfprintf_r+0x5d0>
  101bc2:	a8 40                	test   $0x40,%al
  101bc4:	0f 85 69 29 00 00    	jne    104533 <_vfprintf_r+0x2e53>
  101bca:	8b 85 88 fe ff ff    	mov    -0x178(%rbp),%eax
  101bd0:	48 81 c4 e8 01 00 00 	add    $0x1e8,%rsp
  101bd7:	5b                   	pop    %rbx
  101bd8:	41 5c                	pop    %r12
  101bda:	41 5d                	pop    %r13
  101bdc:	41 5e                	pop    %r14
  101bde:	41 5f                	pop    %r15
  101be0:	5d                   	pop    %rbp
  101be1:	c3                   	retq   
  101be2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  101be8:	48 8b b5 70 fe ff ff 	mov    -0x190(%rbp),%rsi
  101bef:	4d 89 e2             	mov    %r12,%r10
  101bf2:	41 f6 c7 08          	test   $0x8,%r15b
  101bf6:	0f 84 8f 12 00 00    	je     102e8b <_vfprintf_r+0x17ab>
  101bfc:	48 8b 46 08          	mov    0x8(%rsi),%rax
  101c00:	48 89 85 98 fe ff ff 	mov    %rax,-0x168(%rbp)
  101c07:	48 83 c0 0f          	add    $0xf,%rax
  101c0b:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  101c0f:	48 8d 50 10          	lea    0x10(%rax),%rdx
  101c13:	48 89 56 08          	mov    %rdx,0x8(%rsi)
  101c17:	db 28                	fldt   (%rax)
  101c19:	dd 9d 48 fe ff ff    	fstpl  -0x1b8(%rbp)
  101c1f:	f2 0f 10 95 48 fe ff 	movsd  -0x1b8(%rbp),%xmm2
  101c26:	ff 
  101c27:	66 0f 28 c2          	movapd %xmm2,%xmm0
  101c2b:	66 0f 54 05 bd ea 00 	andpd  0xeabd(%rip),%xmm0        # 1106f0 <blanks.1+0x10>
  101c32:	00 
  101c33:	66 0f 2e 05 fd f0 00 	ucomisd 0xf0fd(%rip),%xmm0        # 110d38 <uart_ns16550_dev_cfg_0+0x3c8>
  101c3a:	00 
  101c3b:	0f 86 f5 15 00 00    	jbe    103236 <_vfprintf_r+0x1b56>
  101c41:	66 0f ef f6          	pxor   %xmm6,%xmm6
  101c45:	66 0f 2f f2          	comisd %xmm2,%xmm6
  101c49:	0f 87 f6 1d 00 00    	ja     103a45 <_vfprintf_r+0x2365>
  101c4f:	0f b6 85 a5 fe ff ff 	movzbl -0x15b(%rbp),%eax
  101c56:	41 83 fb 48          	cmp    $0x48,%r11d
  101c5a:	b9 f1 14 11 00       	mov    $0x1114f1,%ecx
  101c5f:	ba f5 14 11 00       	mov    $0x1114f5,%edx
  101c64:	c7 85 98 fe ff ff 03 	movl   $0x3,-0x168(%rbp)
  101c6b:	00 00 00 
  101c6e:	48 0f 4d ca          	cmovge %rdx,%rcx
  101c72:	31 db                	xor    %ebx,%ebx
  101c74:	41 80 e7 7f          	and    $0x7f,%r15b
  101c78:	48 c7 85 78 fe ff ff 	movq   $0x0,-0x188(%rbp)
  101c7f:	00 00 00 00 
  101c83:	c7 85 80 fe ff ff 03 	movl   $0x3,-0x180(%rbp)
  101c8a:	00 00 00 
  101c8d:	c7 85 50 fe ff ff 00 	movl   $0x0,-0x1b0(%rbp)
  101c94:	00 00 00 
  101c97:	c7 85 5c fe ff ff 00 	movl   $0x0,-0x1a4(%rbp)
  101c9e:	00 00 00 
  101ca1:	c7 85 60 fe ff ff 00 	movl   $0x0,-0x1a0(%rbp)
  101ca8:	00 00 00 
  101cab:	e9 d1 03 00 00       	jmpq   102081 <_vfprintf_r+0x9a1>
  101cb0:	f6 c4 02             	test   $0x2,%ah
  101cb3:	0f 85 09 ff ff ff    	jne    101bc2 <_vfprintf_r+0x4e2>
  101cb9:	48 8b be a0 00 00 00 	mov    0xa0(%rsi),%rdi
  101cc0:	48 89 f3             	mov    %rsi,%rbx
  101cc3:	e8 3f b0 00 00       	callq  10cd07 <__retarget_lock_release_recursive>
  101cc8:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  101ccc:	e9 f1 fe ff ff       	jmpq   101bc2 <_vfprintf_r+0x4e2>
  101cd1:	4c 89 f7             	mov    %r14,%rdi
  101cd4:	e8 d7 48 00 00       	callq  1065b0 <__sinit>
  101cd9:	e9 5a fa ff ff       	jmpq   101738 <_vfprintf_r+0x58>
  101cde:	48 8b bd 70 fe ff ff 	mov    -0x190(%rbp),%rdi
  101ce5:	4d 89 e2             	mov    %r12,%r10
  101ce8:	8b 07                	mov    (%rdi),%eax
  101cea:	83 f8 2f             	cmp    $0x2f,%eax
  101ced:	0f 87 eb 11 00 00    	ja     102ede <_vfprintf_r+0x17fe>
  101cf3:	89 c2                	mov    %eax,%edx
  101cf5:	83 c0 08             	add    $0x8,%eax
  101cf8:	48 03 57 10          	add    0x10(%rdi),%rdx
  101cfc:	89 07                	mov    %eax,(%rdi)
  101cfe:	8b 02                	mov    (%rdx),%eax
  101d00:	48 8d 8d e0 fe ff ff 	lea    -0x120(%rbp),%rcx
  101d07:	c6 85 a5 fe ff ff 00 	movb   $0x0,-0x15b(%rbp)
  101d0e:	c7 85 98 fe ff ff 01 	movl   $0x1,-0x168(%rbp)
  101d15:	00 00 00 
  101d18:	88 85 e0 fe ff ff    	mov    %al,-0x120(%rbp)
  101d1e:	c7 85 80 fe ff ff 01 	movl   $0x1,-0x180(%rbp)
  101d25:	00 00 00 
  101d28:	e9 e8 fb ff ff       	jmpq   101915 <_vfprintf_r+0x235>
  101d2d:	48 8b b5 70 fe ff ff 	mov    -0x190(%rbp),%rsi
  101d34:	4d 89 e2             	mov    %r12,%r10
  101d37:	8b 06                	mov    (%rsi),%eax
  101d39:	83 f8 2f             	cmp    $0x2f,%eax
  101d3c:	0f 87 84 11 00 00    	ja     102ec6 <_vfprintf_r+0x17e6>
  101d42:	89 c2                	mov    %eax,%edx
  101d44:	83 c0 08             	add    $0x8,%eax
  101d47:	48 03 56 10          	add    0x10(%rsi),%rdx
  101d4b:	89 06                	mov    %eax,(%rsi)
  101d4d:	48 8b 0a             	mov    (%rdx),%rcx
  101d50:	c6 85 a5 fe ff ff 00 	movb   $0x0,-0x15b(%rbp)
  101d57:	48 85 c9             	test   %rcx,%rcx
  101d5a:	0f 84 7a 17 00 00    	je     1034da <_vfprintf_r+0x1dfa>
  101d60:	83 fb ff             	cmp    $0xffffffff,%ebx
  101d63:	0f 84 af 17 00 00    	je     103518 <_vfprintf_r+0x1e38>
  101d69:	31 f6                	xor    %esi,%esi
  101d6b:	48 89 cf             	mov    %rcx,%rdi
  101d6e:	48 63 d3             	movslq %ebx,%rdx
  101d71:	4c 89 95 68 fe ff ff 	mov    %r10,-0x198(%rbp)
  101d78:	44 89 9d 80 fe ff ff 	mov    %r11d,-0x180(%rbp)
  101d7f:	48 89 8d 98 fe ff ff 	mov    %rcx,-0x168(%rbp)
  101d86:	e8 65 50 00 00       	callq  106df0 <memchr>
  101d8b:	48 8b 8d 98 fe ff ff 	mov    -0x168(%rbp),%rcx
  101d92:	44 8b 9d 80 fe ff ff 	mov    -0x180(%rbp),%r11d
  101d99:	48 85 c0             	test   %rax,%rax
  101d9c:	48 89 85 78 fe ff ff 	mov    %rax,-0x188(%rbp)
  101da3:	4c 8b 95 68 fe ff ff 	mov    -0x198(%rbp),%r10
  101daa:	0f 84 0f 25 00 00    	je     1042bf <_vfprintf_r+0x2bdf>
  101db0:	48 8b 95 78 fe ff ff 	mov    -0x188(%rbp),%rdx
  101db7:	be 00 00 00 00       	mov    $0x0,%esi
  101dbc:	48 c7 85 78 fe ff ff 	movq   $0x0,-0x188(%rbp)
  101dc3:	00 00 00 00 
  101dc7:	c7 85 50 fe ff ff 00 	movl   $0x0,-0x1b0(%rbp)
  101dce:	00 00 00 
  101dd1:	0f b6 85 a5 fe ff ff 	movzbl -0x15b(%rbp),%eax
  101dd8:	c7 85 5c fe ff ff 00 	movl   $0x0,-0x1a4(%rbp)
  101ddf:	00 00 00 
  101de2:	48 29 ca             	sub    %rcx,%rdx
  101de5:	85 d2                	test   %edx,%edx
  101de7:	89 95 80 fe ff ff    	mov    %edx,-0x180(%rbp)
  101ded:	c7 85 60 fe ff ff 00 	movl   $0x0,-0x1a0(%rbp)
  101df4:	00 00 00 
  101df7:	0f 49 f2             	cmovns %edx,%esi
  101dfa:	31 db                	xor    %ebx,%ebx
  101dfc:	89 b5 98 fe ff ff    	mov    %esi,-0x168(%rbp)
  101e02:	e9 7a 02 00 00       	jmpq   102081 <_vfprintf_r+0x9a1>
  101e07:	48 8b b5 70 fe ff ff 	mov    -0x190(%rbp),%rsi
  101e0e:	8b 06                	mov    (%rsi),%eax
  101e10:	83 f8 2f             	cmp    $0x2f,%eax
  101e13:	0f 86 9d 10 00 00    	jbe    102eb6 <_vfprintf_r+0x17d6>
  101e19:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  101e20:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  101e24:	48 8d 42 08          	lea    0x8(%rdx),%rax
  101e28:	48 89 41 08          	mov    %rax,0x8(%rcx)
  101e2c:	8b 02                	mov    (%rdx),%eax
  101e2e:	89 85 8c fe ff ff    	mov    %eax,-0x174(%rbp)
  101e34:	85 c0                	test   %eax,%eax
  101e36:	0f 89 2e 03 00 00    	jns    10216a <_vfprintf_r+0xa8a>
  101e3c:	f7 9d 8c fe ff ff    	negl   -0x174(%rbp)
  101e42:	45 0f be 5d 00       	movsbl 0x0(%r13),%r11d
  101e47:	41 83 cf 04          	or     $0x4,%r15d
  101e4b:	e9 46 fa ff ff       	jmpq   101896 <_vfprintf_r+0x1b6>
  101e50:	c6 85 a5 fe ff ff 2b 	movb   $0x2b,-0x15b(%rbp)
  101e57:	45 0f be 5d 00       	movsbl 0x0(%r13),%r11d
  101e5c:	e9 35 fa ff ff       	jmpq   101896 <_vfprintf_r+0x1b6>
  101e61:	45 0f be 5d 00       	movsbl 0x0(%r13),%r11d
  101e66:	41 80 cf 80          	or     $0x80,%r15b
  101e6a:	e9 27 fa ff ff       	jmpq   101896 <_vfprintf_r+0x1b6>
  101e6f:	45 0f be 5d 00       	movsbl 0x0(%r13),%r11d
  101e74:	49 8d 55 01          	lea    0x1(%r13),%rdx
  101e78:	41 83 fb 2a          	cmp    $0x2a,%r11d
  101e7c:	0f 84 a6 2a 00 00    	je     104928 <_vfprintf_r+0x3248>
  101e82:	41 8d 43 d0          	lea    -0x30(%r11),%eax
  101e86:	49 89 d5             	mov    %rdx,%r13
  101e89:	31 db                	xor    %ebx,%ebx
  101e8b:	83 f8 09             	cmp    $0x9,%eax
  101e8e:	0f 87 06 fa ff ff    	ja     10189a <_vfprintf_r+0x1ba>
  101e94:	0f 1f 40 00          	nopl   0x0(%rax)
  101e98:	45 0f be 5d 00       	movsbl 0x0(%r13),%r11d
  101e9d:	8d 14 9b             	lea    (%rbx,%rbx,4),%edx
  101ea0:	49 83 c5 01          	add    $0x1,%r13
  101ea4:	8d 1c 50             	lea    (%rax,%rdx,2),%ebx
  101ea7:	41 8d 43 d0          	lea    -0x30(%r11),%eax
  101eab:	83 f8 09             	cmp    $0x9,%eax
  101eae:	76 e8                	jbe    101e98 <_vfprintf_r+0x7b8>
  101eb0:	e9 e5 f9 ff ff       	jmpq   10189a <_vfprintf_r+0x1ba>
  101eb5:	4c 89 f7             	mov    %r14,%rdi
  101eb8:	e8 f3 4d 00 00       	callq  106cb0 <_localeconv_r>
  101ebd:	48 8b 40 08          	mov    0x8(%rax),%rax
  101ec1:	48 89 c7             	mov    %rax,%rdi
  101ec4:	48 89 85 08 fe ff ff 	mov    %rax,-0x1f8(%rbp)
  101ecb:	e8 90 f6 ff ff       	callq  101560 <strlen>
  101ed0:	4c 89 f7             	mov    %r14,%rdi
  101ed3:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
  101eda:	e8 d1 4d 00 00       	callq  106cb0 <_localeconv_r>
  101edf:	48 83 bd 28 fe ff ff 	cmpq   $0x0,-0x1d8(%rbp)
  101ee6:	00 
  101ee7:	48 8b 78 10          	mov    0x10(%rax),%rdi
  101eeb:	48 89 bd 38 fe ff ff 	mov    %rdi,-0x1c8(%rbp)
  101ef2:	0f 84 72 02 00 00    	je     10216a <_vfprintf_r+0xa8a>
  101ef8:	48 85 ff             	test   %rdi,%rdi
  101efb:	0f 84 69 02 00 00    	je     10216a <_vfprintf_r+0xa8a>
  101f01:	44 89 f8             	mov    %r15d,%eax
  101f04:	45 0f be 5d 00       	movsbl 0x0(%r13),%r11d
  101f09:	80 cc 04             	or     $0x4,%ah
  101f0c:	80 3f 00             	cmpb   $0x0,(%rdi)
  101f0f:	44 0f 45 f8          	cmovne %eax,%r15d
  101f13:	e9 7e f9 ff ff       	jmpq   101896 <_vfprintf_r+0x1b6>
  101f18:	45 0f be 5d 00       	movsbl 0x0(%r13),%r11d
  101f1d:	41 83 cf 01          	or     $0x1,%r15d
  101f21:	e9 70 f9 ff ff       	jmpq   101896 <_vfprintf_r+0x1b6>
  101f26:	80 bd a5 fe ff ff 00 	cmpb   $0x0,-0x15b(%rbp)
  101f2d:	45 0f be 5d 00       	movsbl 0x0(%r13),%r11d
  101f32:	0f 85 5e f9 ff ff    	jne    101896 <_vfprintf_r+0x1b6>
  101f38:	c6 85 a5 fe ff ff 20 	movb   $0x20,-0x15b(%rbp)
  101f3f:	e9 52 f9 ff ff       	jmpq   101896 <_vfprintf_r+0x1b6>
  101f44:	4d 89 e2             	mov    %r12,%r10
  101f47:	41 83 cf 10          	or     $0x10,%r15d
  101f4b:	48 8b bd 70 fe ff ff 	mov    -0x190(%rbp),%rdi
  101f52:	8b 07                	mov    (%rdi),%eax
  101f54:	41 f6 c7 20          	test   $0x20,%r15b
  101f58:	0f 84 6a 0d 00 00    	je     102cc8 <_vfprintf_r+0x15e8>
  101f5e:	83 f8 2f             	cmp    $0x2f,%eax
  101f61:	0f 86 8f 0f 00 00    	jbe    102ef6 <_vfprintf_r+0x1816>
  101f67:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  101f6e:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  101f72:	48 8d 42 08          	lea    0x8(%rdx),%rax
  101f76:	48 89 41 08          	mov    %rax,0x8(%rcx)
  101f7a:	e9 71 0d 00 00       	jmpq   102cf0 <_vfprintf_r+0x1610>
  101f7f:	45 89 f9             	mov    %r15d,%r9d
  101f82:	4d 89 e2             	mov    %r12,%r10
  101f85:	41 83 c9 10          	or     $0x10,%r9d
  101f89:	48 8b b5 70 fe ff ff 	mov    -0x190(%rbp),%rsi
  101f90:	8b 06                	mov    (%rsi),%eax
  101f92:	41 f6 c1 20          	test   $0x20,%r9b
  101f96:	0f 84 7d 0c 00 00    	je     102c19 <_vfprintf_r+0x1539>
  101f9c:	83 f8 2f             	cmp    $0x2f,%eax
  101f9f:	0f 86 d6 0e 00 00    	jbe    102e7b <_vfprintf_r+0x179b>
  101fa5:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  101fac:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  101fb0:	48 8d 42 08          	lea    0x8(%rdx),%rax
  101fb4:	48 89 41 08          	mov    %rax,0x8(%rcx)
  101fb8:	e9 83 0c 00 00       	jmpq   102c40 <_vfprintf_r+0x1560>
  101fbd:	45 0f be 5d 00       	movsbl 0x0(%r13),%r11d
  101fc2:	41 83 cf 08          	or     $0x8,%r15d
  101fc6:	e9 cb f8 ff ff       	jmpq   101896 <_vfprintf_r+0x1b6>
  101fcb:	4d 89 e2             	mov    %r12,%r10
  101fce:	41 83 cf 10          	or     $0x10,%r15d
  101fd2:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  101fd9:	8b 01                	mov    (%rcx),%eax
  101fdb:	41 f6 c7 20          	test   $0x20,%r15b
  101fdf:	0f 84 b9 0c 00 00    	je     102c9e <_vfprintf_r+0x15be>
  101fe5:	83 f8 2f             	cmp    $0x2f,%eax
  101fe8:	0f 86 18 0f 00 00    	jbe    102f06 <_vfprintf_r+0x1826>
  101fee:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  101ff5:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  101ff9:	48 8d 42 08          	lea    0x8(%rdx),%rax
  101ffd:	48 89 41 08          	mov    %rax,0x8(%rcx)
  102001:	48 8b 02             	mov    (%rdx),%rax
  102004:	48 89 c6             	mov    %rax,%rsi
  102007:	48 85 c0             	test   %rax,%rax
  10200a:	0f 88 40 11 00 00    	js     103150 <_vfprintf_r+0x1a70>
  102010:	83 fb ff             	cmp    $0xffffffff,%ebx
  102013:	0f 84 cf 10 00 00    	je     1030e8 <_vfprintf_r+0x1a08>
  102019:	41 80 e7 7f          	and    $0x7f,%r15b
  10201d:	85 db                	test   %ebx,%ebx
  10201f:	0f 85 c3 10 00 00    	jne    1030e8 <_vfprintf_r+0x1a08>
  102025:	48 85 f6             	test   %rsi,%rsi
  102028:	0f 85 ba 10 00 00    	jne    1030e8 <_vfprintf_r+0x1a08>
  10202e:	c7 85 80 fe ff ff 00 	movl   $0x0,-0x180(%rbp)
  102035:	00 00 00 
  102038:	48 8d 8d 44 ff ff ff 	lea    -0xbc(%rbp),%rcx
  10203f:	90                   	nop
  102040:	8b bd 80 fe ff ff    	mov    -0x180(%rbp),%edi
  102046:	48 c7 85 78 fe ff ff 	movq   $0x0,-0x188(%rbp)
  10204d:	00 00 00 00 
  102051:	c7 85 50 fe ff ff 00 	movl   $0x0,-0x1b0(%rbp)
  102058:	00 00 00 
  10205b:	0f b6 85 a5 fe ff ff 	movzbl -0x15b(%rbp),%eax
  102062:	c7 85 5c fe ff ff 00 	movl   $0x0,-0x1a4(%rbp)
  102069:	00 00 00 
  10206c:	39 fb                	cmp    %edi,%ebx
  10206e:	c7 85 60 fe ff ff 00 	movl   $0x0,-0x1a0(%rbp)
  102075:	00 00 00 
  102078:	0f 4d fb             	cmovge %ebx,%edi
  10207b:	89 bd 98 fe ff ff    	mov    %edi,-0x168(%rbp)
  102081:	84 c0                	test   %al,%al
  102083:	0f 84 b7 f8 ff ff    	je     101940 <_vfprintf_r+0x260>
  102089:	83 85 98 fe ff ff 01 	addl   $0x1,-0x168(%rbp)
  102090:	e9 ab f8 ff ff       	jmpq   101940 <_vfprintf_r+0x260>
  102095:	45 0f be 5d 00       	movsbl 0x0(%r13),%r11d
  10209a:	41 80 fb 68          	cmp    $0x68,%r11b
  10209e:	0f 84 de 0e 00 00    	je     102f82 <_vfprintf_r+0x18a2>
  1020a4:	41 83 cf 40          	or     $0x40,%r15d
  1020a8:	e9 e9 f7 ff ff       	jmpq   101896 <_vfprintf_r+0x1b6>
  1020ad:	45 0f be 5d 00       	movsbl 0x0(%r13),%r11d
  1020b2:	41 83 cf 20          	or     $0x20,%r15d
  1020b6:	e9 db f7 ff ff       	jmpq   101896 <_vfprintf_r+0x1b6>
  1020bb:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  1020c2:	4d 89 e2             	mov    %r12,%r10
  1020c5:	8b 01                	mov    (%rcx),%eax
  1020c7:	83 f8 2f             	cmp    $0x2f,%eax
  1020ca:	0f 86 71 0e 00 00    	jbe    102f41 <_vfprintf_r+0x1861>
  1020d0:	48 8b bd 70 fe ff ff 	mov    -0x190(%rbp),%rdi
  1020d7:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  1020db:	48 8d 42 08          	lea    0x8(%rdx),%rax
  1020df:	48 89 47 08          	mov    %rax,0x8(%rdi)
  1020e3:	45 89 f9             	mov    %r15d,%r9d
  1020e6:	48 8b 32             	mov    (%rdx),%rsi
  1020e9:	41 b8 30 78 00 00    	mov    $0x7830,%r8d
  1020ef:	48 c7 85 20 fe ff ff 	movq   $0x111501,-0x1e0(%rbp)
  1020f6:	01 15 11 00 
  1020fa:	41 83 c9 02          	or     $0x2,%r9d
  1020fe:	66 44 89 85 a6 fe ff 	mov    %r8w,-0x15a(%rbp)
  102105:	ff 
  102106:	b8 02 00 00 00       	mov    $0x2,%eax
  10210b:	41 bb 78 00 00 00    	mov    $0x78,%r11d
  102111:	e9 32 0b 00 00       	jmpq   102c48 <_vfprintf_r+0x1568>
  102116:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  10211d:	4d 89 e2             	mov    %r12,%r10
  102120:	8b 01                	mov    (%rcx),%eax
  102122:	41 f6 c7 20          	test   $0x20,%r15b
  102126:	0f 84 ea 0d 00 00    	je     102f16 <_vfprintf_r+0x1836>
  10212c:	83 f8 2f             	cmp    $0x2f,%eax
  10212f:	0f 87 f4 0d 00 00    	ja     102f29 <_vfprintf_r+0x1849>
  102135:	89 c2                	mov    %eax,%edx
  102137:	83 c0 08             	add    $0x8,%eax
  10213a:	48 03 51 10          	add    0x10(%rcx),%rdx
  10213e:	89 01                	mov    %eax,(%rcx)
  102140:	48 8b 02             	mov    (%rdx),%rax
  102143:	48 63 95 88 fe ff ff 	movslq -0x178(%rbp),%rdx
  10214a:	48 89 10             	mov    %rdx,(%rax)
  10214d:	e9 a7 f6 ff ff       	jmpq   1017f9 <_vfprintf_r+0x119>
  102152:	45 0f be 5d 00       	movsbl 0x0(%r13),%r11d
  102157:	41 80 fb 6c          	cmp    $0x6c,%r11b
  10215b:	0f 84 36 0e 00 00    	je     102f97 <_vfprintf_r+0x18b7>
  102161:	41 83 cf 10          	or     $0x10,%r15d
  102165:	e9 2c f7 ff ff       	jmpq   101896 <_vfprintf_r+0x1b6>
  10216a:	45 0f be 5d 00       	movsbl 0x0(%r13),%r11d
  10216f:	e9 22 f7 ff ff       	jmpq   101896 <_vfprintf_r+0x1b6>
  102174:	0f 1f 40 00          	nopl   0x0(%rax)
  102178:	41 83 fb 65          	cmp    $0x65,%r11d
  10217c:	0f 8e f6 03 00 00    	jle    102578 <_vfprintf_r+0xe98>
  102182:	f2 0f 10 a5 48 fe ff 	movsd  -0x1b8(%rbp),%xmm4
  102189:	ff 
  10218a:	66 0f ef ed          	pxor   %xmm5,%xmm5
  10218e:	66 0f 2e e5          	ucomisd %xmm5,%xmm4
  102192:	0f 8a e8 07 00 00    	jp     102980 <_vfprintf_r+0x12a0>
  102198:	0f 85 e2 07 00 00    	jne    102980 <_vfprintf_r+0x12a0>
  10219e:	8b bd c8 fe ff ff    	mov    -0x138(%rbp),%edi
  1021a4:	48 83 c0 01          	add    $0x1,%rax
  1021a8:	49 83 c2 10          	add    $0x10,%r10
  1021ac:	49 c7 42 f0 9f 14 11 	movq   $0x11149f,-0x10(%r10)
  1021b3:	00 
  1021b4:	49 c7 42 f8 01 00 00 	movq   $0x1,-0x8(%r10)
  1021bb:	00 
  1021bc:	8d 57 01             	lea    0x1(%rdi),%edx
  1021bf:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  1021c6:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  1021cc:	83 fa 07             	cmp    $0x7,%edx
  1021cf:	0f 8f 03 12 00 00    	jg     1033d8 <_vfprintf_r+0x1cf8>
  1021d5:	8b 8d 58 fe ff ff    	mov    -0x1a8(%rbp),%ecx
  1021db:	39 8d a8 fe ff ff    	cmp    %ecx,-0x158(%rbp)
  1021e1:	0f 8d 1d 0b 00 00    	jge    102d04 <_vfprintf_r+0x1624>
  1021e7:	48 8b 8d 30 fe ff ff 	mov    -0x1d0(%rbp),%rcx
  1021ee:	8b b5 c8 fe ff ff    	mov    -0x138(%rbp),%esi
  1021f4:	49 83 c2 10          	add    $0x10,%r10
  1021f8:	49 89 4a f0          	mov    %rcx,-0x10(%r10)
  1021fc:	48 8b 8d 40 fe ff ff 	mov    -0x1c0(%rbp),%rcx
  102203:	8d 56 01             	lea    0x1(%rsi),%edx
  102206:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  10220c:	48 01 c8             	add    %rcx,%rax
  10220f:	49 89 4a f8          	mov    %rcx,-0x8(%r10)
  102213:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  10221a:	83 fa 07             	cmp    $0x7,%edx
  10221d:	0f 8f 2e 0d 00 00    	jg     102f51 <_vfprintf_r+0x1871>
  102223:	8b bd 58 fe ff ff    	mov    -0x1a8(%rbp),%edi
  102229:	8d 5f ff             	lea    -0x1(%rdi),%ebx
  10222c:	85 db                	test   %ebx,%ebx
  10222e:	0f 8e 33 f8 ff ff    	jle    101a67 <_vfprintf_r+0x387>
  102234:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  10223a:	83 fb 10             	cmp    $0x10,%ebx
  10223d:	0f 8e c6 11 00 00    	jle    103409 <_vfprintf_r+0x1d29>
  102243:	4c 8b a5 90 fe ff ff 	mov    -0x170(%rbp),%r12
  10224a:	eb 10                	jmp    10225c <_vfprintf_r+0xb7c>
  10224c:	0f 1f 40 00          	nopl   0x0(%rax)
  102250:	83 eb 10             	sub    $0x10,%ebx
  102253:	83 fb 10             	cmp    $0x10,%ebx
  102256:	0f 8e ad 11 00 00    	jle    103409 <_vfprintf_r+0x1d29>
  10225c:	48 83 c0 10          	add    $0x10,%rax
  102260:	83 c2 01             	add    $0x1,%edx
  102263:	49 83 c2 10          	add    $0x10,%r10
  102267:	49 c7 42 f0 d0 06 11 	movq   $0x1106d0,-0x10(%r10)
  10226e:	00 
  10226f:	49 c7 42 f8 10 00 00 	movq   $0x10,-0x8(%r10)
  102276:	00 
  102277:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  10227e:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  102284:	83 fa 07             	cmp    $0x7,%edx
  102287:	7e c7                	jle    102250 <_vfprintf_r+0xb70>
  102289:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  102290:	4c 89 e6             	mov    %r12,%rsi
  102293:	4c 89 f7             	mov    %r14,%rdi
  102296:	e8 75 59 00 00       	callq  107c10 <__sprint_r>
  10229b:	85 c0                	test   %eax,%eax
  10229d:	0f 85 f0 f8 ff ff    	jne    101b93 <_vfprintf_r+0x4b3>
  1022a3:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  1022aa:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  1022b0:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  1022b7:	eb 97                	jmp    102250 <_vfprintf_r+0xb70>
  1022b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  1022c0:	44 8b a5 8c fe ff ff 	mov    -0x174(%rbp),%r12d
  1022c7:	44 2b a5 98 fe ff ff 	sub    -0x168(%rbp),%r12d
  1022ce:	45 85 e4             	test   %r12d,%r12d
  1022d1:	0f 8e 41 f7 ff ff    	jle    101a18 <_vfprintf_r+0x338>
  1022d7:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  1022dd:	41 83 fc 10          	cmp    $0x10,%r12d
  1022e1:	0f 8e b5 00 00 00    	jle    10239c <_vfprintf_r+0xcbc>
  1022e7:	4c 89 ef             	mov    %r13,%rdi
  1022ea:	89 9d 00 fe ff ff    	mov    %ebx,-0x200(%rbp)
  1022f0:	4d 89 f5             	mov    %r14,%r13
  1022f3:	48 8b 9d 90 fe ff ff 	mov    -0x170(%rbp),%rbx
  1022fa:	44 89 9d 68 fe ff ff 	mov    %r11d,-0x198(%rbp)
  102301:	49 89 fe             	mov    %rdi,%r14
  102304:	48 89 8d 18 fe ff ff 	mov    %rcx,-0x1e8(%rbp)
  10230b:	eb 0d                	jmp    10231a <_vfprintf_r+0xc3a>
  10230d:	0f 1f 00             	nopl   (%rax)
  102310:	41 83 ec 10          	sub    $0x10,%r12d
  102314:	41 83 fc 10          	cmp    $0x10,%r12d
  102318:	7e 65                	jle    10237f <_vfprintf_r+0xc9f>
  10231a:	48 83 c0 10          	add    $0x10,%rax
  10231e:	83 c2 01             	add    $0x1,%edx
  102321:	49 83 c2 10          	add    $0x10,%r10
  102325:	49 c7 42 f0 d0 06 11 	movq   $0x1106d0,-0x10(%r10)
  10232c:	00 
  10232d:	49 c7 42 f8 10 00 00 	movq   $0x10,-0x8(%r10)
  102334:	00 
  102335:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  10233c:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  102342:	83 fa 07             	cmp    $0x7,%edx
  102345:	7e c9                	jle    102310 <_vfprintf_r+0xc30>
  102347:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  10234e:	48 89 de             	mov    %rbx,%rsi
  102351:	4c 89 ef             	mov    %r13,%rdi
  102354:	e8 b7 58 00 00       	callq  107c10 <__sprint_r>
  102359:	85 c0                	test   %eax,%eax
  10235b:	0f 85 2f f8 ff ff    	jne    101b90 <_vfprintf_r+0x4b0>
  102361:	41 83 ec 10          	sub    $0x10,%r12d
  102365:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  10236c:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  102372:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  102379:	41 83 fc 10          	cmp    $0x10,%r12d
  10237d:	7f 9b                	jg     10231a <_vfprintf_r+0xc3a>
  10237f:	4c 89 f6             	mov    %r14,%rsi
  102382:	44 8b 9d 68 fe ff ff 	mov    -0x198(%rbp),%r11d
  102389:	48 8b 8d 18 fe ff ff 	mov    -0x1e8(%rbp),%rcx
  102390:	4d 89 ee             	mov    %r13,%r14
  102393:	8b 9d 00 fe ff ff    	mov    -0x200(%rbp),%ebx
  102399:	49 89 f5             	mov    %rsi,%r13
  10239c:	4d 63 e4             	movslq %r12d,%r12
  10239f:	83 c2 01             	add    $0x1,%edx
  1023a2:	49 c7 02 d0 06 11 00 	movq   $0x1106d0,(%r10)
  1023a9:	49 83 c2 10          	add    $0x10,%r10
  1023ad:	4c 01 e0             	add    %r12,%rax
  1023b0:	4d 89 62 f8          	mov    %r12,-0x8(%r10)
  1023b4:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  1023bb:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  1023c1:	83 fa 07             	cmp    $0x7,%edx
  1023c4:	0f 8e 4e f6 ff ff    	jle    101a18 <_vfprintf_r+0x338>
  1023ca:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  1023d1:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  1023d8:	4c 89 f7             	mov    %r14,%rdi
  1023db:	48 89 8d 18 fe ff ff 	mov    %rcx,-0x1e8(%rbp)
  1023e2:	44 89 9d 68 fe ff ff 	mov    %r11d,-0x198(%rbp)
  1023e9:	e8 22 58 00 00       	callq  107c10 <__sprint_r>
  1023ee:	85 c0                	test   %eax,%eax
  1023f0:	0f 85 9d f7 ff ff    	jne    101b93 <_vfprintf_r+0x4b3>
  1023f6:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  1023fd:	48 8b 8d 18 fe ff ff 	mov    -0x1e8(%rbp),%rcx
  102404:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  10240b:	44 8b 9d 68 fe ff ff 	mov    -0x198(%rbp),%r11d
  102412:	e9 01 f6 ff ff       	jmpq   101a18 <_vfprintf_r+0x338>
  102417:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  10241e:	00 00 
  102420:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  102426:	83 fb 10             	cmp    $0x10,%ebx
  102429:	0f 8e a3 00 00 00    	jle    1024d2 <_vfprintf_r+0xdf2>
  10242f:	4c 89 ef             	mov    %r13,%rdi
  102432:	44 89 9d 68 fe ff ff 	mov    %r11d,-0x198(%rbp)
  102439:	4d 89 f5             	mov    %r14,%r13
  10243c:	4c 8b a5 90 fe ff ff 	mov    -0x170(%rbp),%r12
  102443:	48 89 8d 18 fe ff ff 	mov    %rcx,-0x1e8(%rbp)
  10244a:	49 89 fe             	mov    %rdi,%r14
  10244d:	eb 09                	jmp    102458 <_vfprintf_r+0xd78>
  10244f:	90                   	nop
  102450:	83 eb 10             	sub    $0x10,%ebx
  102453:	83 fb 10             	cmp    $0x10,%ebx
  102456:	7e 63                	jle    1024bb <_vfprintf_r+0xddb>
  102458:	48 83 c0 10          	add    $0x10,%rax
  10245c:	83 c2 01             	add    $0x1,%edx
  10245f:	49 83 c2 10          	add    $0x10,%r10
  102463:	49 c7 42 f0 d0 06 11 	movq   $0x1106d0,-0x10(%r10)
  10246a:	00 
  10246b:	49 c7 42 f8 10 00 00 	movq   $0x10,-0x8(%r10)
  102472:	00 
  102473:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  10247a:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  102480:	83 fa 07             	cmp    $0x7,%edx
  102483:	7e cb                	jle    102450 <_vfprintf_r+0xd70>
  102485:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  10248c:	4c 89 e6             	mov    %r12,%rsi
  10248f:	4c 89 ef             	mov    %r13,%rdi
  102492:	e8 79 57 00 00       	callq  107c10 <__sprint_r>
  102497:	85 c0                	test   %eax,%eax
  102499:	0f 85 f1 f6 ff ff    	jne    101b90 <_vfprintf_r+0x4b0>
  10249f:	83 eb 10             	sub    $0x10,%ebx
  1024a2:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  1024a9:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  1024af:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  1024b6:	83 fb 10             	cmp    $0x10,%ebx
  1024b9:	7f 9d                	jg     102458 <_vfprintf_r+0xd78>
  1024bb:	4c 89 f6             	mov    %r14,%rsi
  1024be:	44 8b 9d 68 fe ff ff 	mov    -0x198(%rbp),%r11d
  1024c5:	4d 89 ee             	mov    %r13,%r14
  1024c8:	48 8b 8d 18 fe ff ff 	mov    -0x1e8(%rbp),%rcx
  1024cf:	49 89 f5             	mov    %rsi,%r13
  1024d2:	4c 63 e3             	movslq %ebx,%r12
  1024d5:	83 c2 01             	add    $0x1,%edx
  1024d8:	49 c7 02 d0 06 11 00 	movq   $0x1106d0,(%r10)
  1024df:	49 83 c2 10          	add    $0x10,%r10
  1024e3:	4c 01 e0             	add    %r12,%rax
  1024e6:	4d 89 62 f8          	mov    %r12,-0x8(%r10)
  1024ea:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  1024f1:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  1024f7:	83 fa 07             	cmp    $0x7,%edx
  1024fa:	0f 8e 26 f5 ff ff    	jle    101a26 <_vfprintf_r+0x346>
  102500:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  102507:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  10250e:	4c 89 f7             	mov    %r14,%rdi
  102511:	48 89 8d 18 fe ff ff 	mov    %rcx,-0x1e8(%rbp)
  102518:	44 89 9d 68 fe ff ff 	mov    %r11d,-0x198(%rbp)
  10251f:	e8 ec 56 00 00       	callq  107c10 <__sprint_r>
  102524:	85 c0                	test   %eax,%eax
  102526:	0f 85 67 f6 ff ff    	jne    101b93 <_vfprintf_r+0x4b3>
  10252c:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  102533:	48 8b 8d 18 fe ff ff 	mov    -0x1e8(%rbp),%rcx
  10253a:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  102541:	44 8b 9d 68 fe ff ff 	mov    -0x198(%rbp),%r11d
  102548:	e9 d9 f4 ff ff       	jmpq   101a26 <_vfprintf_r+0x346>
  10254d:	0f 1f 00             	nopl   (%rax)
  102550:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  102557:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  10255e:	4c 89 f7             	mov    %r14,%rdi
  102561:	e8 aa 56 00 00       	callq  107c10 <__sprint_r>
  102566:	85 c0                	test   %eax,%eax
  102568:	0f 84 33 f5 ff ff    	je     101aa1 <_vfprintf_r+0x3c1>
  10256e:	e9 20 f6 ff ff       	jmpq   101b93 <_vfprintf_r+0x4b3>
  102573:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  102578:	8b bd c8 fe ff ff    	mov    -0x138(%rbp),%edi
  10257e:	48 83 c0 01          	add    $0x1,%rax
  102582:	49 89 0a             	mov    %rcx,(%r10)
  102585:	49 8d 72 10          	lea    0x10(%r10),%rsi
  102589:	83 bd 58 fe ff ff 01 	cmpl   $0x1,-0x1a8(%rbp)
  102590:	49 c7 42 08 01 00 00 	movq   $0x1,0x8(%r10)
  102597:	00 
  102598:	8d 57 01             	lea    0x1(%rdi),%edx
  10259b:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  1025a2:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  1025a8:	0f 8e 9b 05 00 00    	jle    102b49 <_vfprintf_r+0x1469>
  1025ae:	83 fa 07             	cmp    $0x7,%edx
  1025b1:	0f 8f f5 0b 00 00    	jg     1031ac <_vfprintf_r+0x1acc>
  1025b7:	48 8b bd 30 fe ff ff 	mov    -0x1d0(%rbp),%rdi
  1025be:	83 c2 01             	add    $0x1,%edx
  1025c1:	48 83 c6 10          	add    $0x10,%rsi
  1025c5:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  1025cb:	48 89 7e f0          	mov    %rdi,-0x10(%rsi)
  1025cf:	48 8b bd 40 fe ff ff 	mov    -0x1c0(%rbp),%rdi
  1025d6:	48 01 f8             	add    %rdi,%rax
  1025d9:	48 89 7e f8          	mov    %rdi,-0x8(%rsi)
  1025dd:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  1025e4:	83 fa 07             	cmp    $0x7,%edx
  1025e7:	0f 8f 7a 0b 00 00    	jg     103167 <_vfprintf_r+0x1a87>
  1025ed:	f2 0f 10 9d 48 fe ff 	movsd  -0x1b8(%rbp),%xmm3
  1025f4:	ff 
  1025f5:	66 0f ef f6          	pxor   %xmm6,%xmm6
  1025f9:	8b bd 58 fe ff ff    	mov    -0x1a8(%rbp),%edi
  1025ff:	66 0f 2e de          	ucomisd %xmm6,%xmm3
  102603:	8d 5f ff             	lea    -0x1(%rdi),%ebx
  102606:	7a 0a                	jp     102612 <_vfprintf_r+0xf32>
  102608:	66 0f 2f de          	comisd %xmm6,%xmm3
  10260c:	0f 84 81 05 00 00    	je     102b93 <_vfprintf_r+0x14b3>
  102612:	48 63 db             	movslq %ebx,%rbx
  102615:	83 c2 01             	add    $0x1,%edx
  102618:	48 83 c1 01          	add    $0x1,%rcx
  10261c:	48 01 d8             	add    %rbx,%rax
  10261f:	48 89 0e             	mov    %rcx,(%rsi)
  102622:	48 89 5e 08          	mov    %rbx,0x8(%rsi)
  102626:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  10262d:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  102633:	83 fa 07             	cmp    $0x7,%edx
  102636:	0f 8f 20 05 00 00    	jg     102b5c <_vfprintf_r+0x147c>
  10263c:	48 83 c6 10          	add    $0x10,%rsi
  102640:	48 63 8d 14 fe ff ff 	movslq -0x1ec(%rbp),%rcx
  102647:	48 8d bd b1 fe ff ff 	lea    -0x14f(%rbp),%rdi
  10264e:	83 c2 01             	add    $0x1,%edx
  102651:	4c 8d 56 10          	lea    0x10(%rsi),%r10
  102655:	48 89 3e             	mov    %rdi,(%rsi)
  102658:	48 01 c8             	add    %rcx,%rax
  10265b:	48 89 4e 08          	mov    %rcx,0x8(%rsi)
  10265f:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  102666:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  10266c:	83 fa 07             	cmp    $0x7,%edx
  10266f:	0f 8e f2 f3 ff ff    	jle    101a67 <_vfprintf_r+0x387>
  102675:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  10267c:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  102683:	4c 89 f7             	mov    %r14,%rdi
  102686:	e8 85 55 00 00       	callq  107c10 <__sprint_r>
  10268b:	85 c0                	test   %eax,%eax
  10268d:	0f 85 00 f5 ff ff    	jne    101b93 <_vfprintf_r+0x4b3>
  102693:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  10269a:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  1026a1:	e9 c1 f3 ff ff       	jmpq   101a67 <_vfprintf_r+0x387>
  1026a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1026ad:	00 00 00 
  1026b0:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  1026b6:	41 83 f8 10          	cmp    $0x10,%r8d
  1026ba:	0f 8e c6 00 00 00    	jle    102786 <_vfprintf_r+0x10a6>
  1026c0:	4c 89 ee             	mov    %r13,%rsi
  1026c3:	89 9d 10 fe ff ff    	mov    %ebx,-0x1f0(%rbp)
  1026c9:	4d 89 f5             	mov    %r14,%r13
  1026cc:	48 8b 9d 90 fe ff ff 	mov    -0x170(%rbp),%rbx
  1026d3:	44 89 a5 18 fe ff ff 	mov    %r12d,-0x1e8(%rbp)
  1026da:	49 89 f6             	mov    %rsi,%r14
  1026dd:	45 89 c4             	mov    %r8d,%r12d
  1026e0:	44 89 9d 00 fe ff ff 	mov    %r11d,-0x200(%rbp)
  1026e7:	48 89 8d f8 fd ff ff 	mov    %rcx,-0x208(%rbp)
  1026ee:	eb 0a                	jmp    1026fa <_vfprintf_r+0x101a>
  1026f0:	41 83 ec 10          	sub    $0x10,%r12d
  1026f4:	41 83 fc 10          	cmp    $0x10,%r12d
  1026f8:	7e 65                	jle    10275f <_vfprintf_r+0x107f>
  1026fa:	48 83 c0 10          	add    $0x10,%rax
  1026fe:	83 c2 01             	add    $0x1,%edx
  102701:	49 83 c2 10          	add    $0x10,%r10
  102705:	49 c7 42 f0 e0 06 11 	movq   $0x1106e0,-0x10(%r10)
  10270c:	00 
  10270d:	49 c7 42 f8 10 00 00 	movq   $0x10,-0x8(%r10)
  102714:	00 
  102715:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  10271c:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  102722:	83 fa 07             	cmp    $0x7,%edx
  102725:	7e c9                	jle    1026f0 <_vfprintf_r+0x1010>
  102727:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  10272e:	48 89 de             	mov    %rbx,%rsi
  102731:	4c 89 ef             	mov    %r13,%rdi
  102734:	e8 d7 54 00 00       	callq  107c10 <__sprint_r>
  102739:	85 c0                	test   %eax,%eax
  10273b:	0f 85 4f f4 ff ff    	jne    101b90 <_vfprintf_r+0x4b0>
  102741:	41 83 ec 10          	sub    $0x10,%r12d
  102745:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  10274c:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  102752:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  102759:	41 83 fc 10          	cmp    $0x10,%r12d
  10275d:	7f 9b                	jg     1026fa <_vfprintf_r+0x101a>
  10275f:	4c 89 f6             	mov    %r14,%rsi
  102762:	45 89 e0             	mov    %r12d,%r8d
  102765:	4d 89 ee             	mov    %r13,%r14
  102768:	44 8b 9d 00 fe ff ff 	mov    -0x200(%rbp),%r11d
  10276f:	48 8b 8d f8 fd ff ff 	mov    -0x208(%rbp),%rcx
  102776:	8b 9d 10 fe ff ff    	mov    -0x1f0(%rbp),%ebx
  10277c:	49 89 f5             	mov    %rsi,%r13
  10277f:	44 8b a5 18 fe ff ff 	mov    -0x1e8(%rbp),%r12d
  102786:	4d 63 c0             	movslq %r8d,%r8
  102789:	83 c2 01             	add    $0x1,%edx
  10278c:	49 c7 02 e0 06 11 00 	movq   $0x1106e0,(%r10)
  102793:	49 83 c2 10          	add    $0x10,%r10
  102797:	4c 01 c0             	add    %r8,%rax
  10279a:	4d 89 42 f8          	mov    %r8,-0x8(%r10)
  10279e:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  1027a5:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  1027ab:	83 fa 07             	cmp    $0x7,%edx
  1027ae:	0f 8e d2 f1 ff ff    	jle    101986 <_vfprintf_r+0x2a6>
  1027b4:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  1027bb:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  1027c2:	4c 89 f7             	mov    %r14,%rdi
  1027c5:	48 89 8d 00 fe ff ff 	mov    %rcx,-0x200(%rbp)
  1027cc:	44 89 9d 18 fe ff ff 	mov    %r11d,-0x1e8(%rbp)
  1027d3:	e8 38 54 00 00       	callq  107c10 <__sprint_r>
  1027d8:	85 c0                	test   %eax,%eax
  1027da:	0f 85 b3 f3 ff ff    	jne    101b93 <_vfprintf_r+0x4b3>
  1027e0:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  1027e7:	48 8b 8d 00 fe ff ff 	mov    -0x200(%rbp),%rcx
  1027ee:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  1027f5:	44 8b 9d 18 fe ff ff 	mov    -0x1e8(%rbp),%r11d
  1027fc:	e9 85 f1 ff ff       	jmpq   101986 <_vfprintf_r+0x2a6>
  102801:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  102808:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  10280f:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  102816:	4c 89 f7             	mov    %r14,%rdi
  102819:	48 89 8d 00 fe ff ff 	mov    %rcx,-0x200(%rbp)
  102820:	44 89 9d 18 fe ff ff 	mov    %r11d,-0x1e8(%rbp)
  102827:	e8 e4 53 00 00       	callq  107c10 <__sprint_r>
  10282c:	85 c0                	test   %eax,%eax
  10282e:	0f 85 5f f3 ff ff    	jne    101b93 <_vfprintf_r+0x4b3>
  102834:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  10283b:	48 8b 8d 00 fe ff ff 	mov    -0x200(%rbp),%rcx
  102842:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  102849:	44 8b 9d 18 fe ff ff 	mov    -0x1e8(%rbp),%r11d
  102850:	e9 74 f1 ff ff       	jmpq   1019c9 <_vfprintf_r+0x2e9>
  102855:	0f 1f 00             	nopl   (%rax)
  102858:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  10285f:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  102866:	4c 89 f7             	mov    %r14,%rdi
  102869:	48 89 8d 00 fe ff ff 	mov    %rcx,-0x200(%rbp)
  102870:	44 89 9d 18 fe ff ff 	mov    %r11d,-0x1e8(%rbp)
  102877:	e8 94 53 00 00       	callq  107c10 <__sprint_r>
  10287c:	85 c0                	test   %eax,%eax
  10287e:	0f 85 0f f3 ff ff    	jne    101b93 <_vfprintf_r+0x4b3>
  102884:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  10288b:	48 8b 8d 00 fe ff ff 	mov    -0x200(%rbp),%rcx
  102892:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  102899:	44 8b 9d 18 fe ff ff 	mov    -0x1e8(%rbp),%r11d
  1028a0:	e9 63 f1 ff ff       	jmpq   101a08 <_vfprintf_r+0x328>
  1028a5:	0f 1f 00             	nopl   (%rax)
  1028a8:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  1028ae:	83 fb 10             	cmp    $0x10,%ebx
  1028b1:	7e 78                	jle    10292b <_vfprintf_r+0x124b>
  1028b3:	4c 8b a5 90 fe ff ff 	mov    -0x170(%rbp),%r12
  1028ba:	eb 0c                	jmp    1028c8 <_vfprintf_r+0x11e8>
  1028bc:	0f 1f 40 00          	nopl   0x0(%rax)
  1028c0:	83 eb 10             	sub    $0x10,%ebx
  1028c3:	83 fb 10             	cmp    $0x10,%ebx
  1028c6:	7e 63                	jle    10292b <_vfprintf_r+0x124b>
  1028c8:	48 83 c0 10          	add    $0x10,%rax
  1028cc:	83 c2 01             	add    $0x1,%edx
  1028cf:	49 83 c2 10          	add    $0x10,%r10
  1028d3:	49 c7 42 f0 e0 06 11 	movq   $0x1106e0,-0x10(%r10)
  1028da:	00 
  1028db:	49 c7 42 f8 10 00 00 	movq   $0x10,-0x8(%r10)
  1028e2:	00 
  1028e3:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  1028ea:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  1028f0:	83 fa 07             	cmp    $0x7,%edx
  1028f3:	7e cb                	jle    1028c0 <_vfprintf_r+0x11e0>
  1028f5:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  1028fc:	4c 89 e6             	mov    %r12,%rsi
  1028ff:	4c 89 f7             	mov    %r14,%rdi
  102902:	e8 09 53 00 00       	callq  107c10 <__sprint_r>
  102907:	85 c0                	test   %eax,%eax
  102909:	0f 85 84 f2 ff ff    	jne    101b93 <_vfprintf_r+0x4b3>
  10290f:	83 eb 10             	sub    $0x10,%ebx
  102912:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  102919:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  10291f:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  102926:	83 fb 10             	cmp    $0x10,%ebx
  102929:	7f 9d                	jg     1028c8 <_vfprintf_r+0x11e8>
  10292b:	48 63 db             	movslq %ebx,%rbx
  10292e:	83 c2 01             	add    $0x1,%edx
  102931:	49 c7 02 e0 06 11 00 	movq   $0x1106e0,(%r10)
  102938:	48 01 d8             	add    %rbx,%rax
  10293b:	49 89 5a 08          	mov    %rbx,0x8(%r10)
  10293f:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  102946:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  10294c:	83 fa 07             	cmp    $0x7,%edx
  10294f:	0f 8e 2c f1 ff ff    	jle    101a81 <_vfprintf_r+0x3a1>
  102955:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  10295c:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  102963:	4c 89 f7             	mov    %r14,%rdi
  102966:	e8 a5 52 00 00       	callq  107c10 <__sprint_r>
  10296b:	85 c0                	test   %eax,%eax
  10296d:	0f 85 20 f2 ff ff    	jne    101b93 <_vfprintf_r+0x4b3>
  102973:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  10297a:	e9 02 f1 ff ff       	jmpq   101a81 <_vfprintf_r+0x3a1>
  10297f:	90                   	nop
  102980:	8b b5 a8 fe ff ff    	mov    -0x158(%rbp),%esi
  102986:	85 f6                	test   %esi,%esi
  102988:	0f 8e a5 03 00 00    	jle    102d33 <_vfprintf_r+0x1653>
  10298e:	8b bd 60 fe ff ff    	mov    -0x1a0(%rbp),%edi
  102994:	8b 9d 58 fe ff ff    	mov    -0x1a8(%rbp),%ebx
  10299a:	39 df                	cmp    %ebx,%edi
  10299c:	0f 4e df             	cmovle %edi,%ebx
  10299f:	85 db                	test   %ebx,%ebx
  1029a1:	7e 30                	jle    1029d3 <_vfprintf_r+0x12f3>
  1029a3:	8b b5 c8 fe ff ff    	mov    -0x138(%rbp),%esi
  1029a9:	48 63 d3             	movslq %ebx,%rdx
  1029ac:	49 89 0a             	mov    %rcx,(%r10)
  1029af:	49 83 c2 10          	add    $0x10,%r10
  1029b3:	48 01 d0             	add    %rdx,%rax
  1029b6:	49 89 52 f8          	mov    %rdx,-0x8(%r10)
  1029ba:	8d 56 01             	lea    0x1(%rsi),%edx
  1029bd:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  1029c4:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  1029ca:	83 fa 07             	cmp    $0x7,%edx
  1029cd:	0f 8f 97 17 00 00    	jg     10416a <_vfprintf_r+0x2a8a>
  1029d3:	85 db                	test   %ebx,%ebx
  1029d5:	ba 00 00 00 00       	mov    $0x0,%edx
  1029da:	0f 49 d3             	cmovns %ebx,%edx
  1029dd:	8b 9d 60 fe ff ff    	mov    -0x1a0(%rbp),%ebx
  1029e3:	29 d3                	sub    %edx,%ebx
  1029e5:	85 db                	test   %ebx,%ebx
  1029e7:	0f 8f dc 0b 00 00    	jg     1035c9 <_vfprintf_r+0x1ee9>
  1029ed:	48 63 9d 60 fe ff ff 	movslq -0x1a0(%rbp),%rbx
  1029f4:	48 01 cb             	add    %rcx,%rbx
  1029f7:	41 f7 c7 00 04 00 00 	test   $0x400,%r15d
  1029fe:	0f 85 7f 14 00 00    	jne    103e83 <_vfprintf_r+0x27a3>
  102a04:	8b b5 a8 fe ff ff    	mov    -0x158(%rbp),%esi
  102a0a:	3b b5 58 fe ff ff    	cmp    -0x1a8(%rbp),%esi
  102a10:	7c 0a                	jl     102a1c <_vfprintf_r+0x133c>
  102a12:	41 f6 c7 01          	test   $0x1,%r15b
  102a16:	0f 84 b7 10 00 00    	je     103ad3 <_vfprintf_r+0x23f3>
  102a1c:	48 8b bd 30 fe ff ff 	mov    -0x1d0(%rbp),%rdi
  102a23:	49 83 c2 10          	add    $0x10,%r10
  102a27:	49 89 7a f0          	mov    %rdi,-0x10(%r10)
  102a2b:	48 8b bd 40 fe ff ff 	mov    -0x1c0(%rbp),%rdi
  102a32:	48 01 f8             	add    %rdi,%rax
  102a35:	49 89 7a f8          	mov    %rdi,-0x8(%r10)
  102a39:	8b bd c8 fe ff ff    	mov    -0x138(%rbp),%edi
  102a3f:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  102a46:	8d 57 01             	lea    0x1(%rdi),%edx
  102a49:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  102a4f:	83 fa 07             	cmp    $0x7,%edx
  102a52:	0f 8f 22 18 00 00    	jg     10427a <_vfprintf_r+0x2b9a>
  102a58:	4c 63 a5 58 fe ff ff 	movslq -0x1a8(%rbp),%r12
  102a5f:	4c 89 e7             	mov    %r12,%rdi
  102a62:	49 01 cc             	add    %rcx,%r12
  102a65:	29 f7                	sub    %esi,%edi
  102a67:	49 29 dc             	sub    %rbx,%r12
  102a6a:	44 39 e7             	cmp    %r12d,%edi
  102a6d:	89 fa                	mov    %edi,%edx
  102a6f:	44 0f 4e e7          	cmovle %edi,%r12d
  102a73:	45 85 e4             	test   %r12d,%r12d
  102a76:	7e 30                	jle    102aa8 <_vfprintf_r+0x13c8>
  102a78:	49 63 cc             	movslq %r12d,%rcx
  102a7b:	49 89 1a             	mov    %rbx,(%r10)
  102a7e:	49 83 c2 10          	add    $0x10,%r10
  102a82:	48 01 c8             	add    %rcx,%rax
  102a85:	49 89 4a f8          	mov    %rcx,-0x8(%r10)
  102a89:	8b 8d c8 fe ff ff    	mov    -0x138(%rbp),%ecx
  102a8f:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  102a96:	83 c1 01             	add    $0x1,%ecx
  102a99:	89 8d c8 fe ff ff    	mov    %ecx,-0x138(%rbp)
  102a9f:	83 f9 07             	cmp    $0x7,%ecx
  102aa2:	0f 8f 69 19 00 00    	jg     104411 <_vfprintf_r+0x2d31>
  102aa8:	45 85 e4             	test   %r12d,%r12d
  102aab:	b9 00 00 00 00       	mov    $0x0,%ecx
  102ab0:	89 d3                	mov    %edx,%ebx
  102ab2:	44 0f 48 e1          	cmovs  %ecx,%r12d
  102ab6:	44 29 e3             	sub    %r12d,%ebx
  102ab9:	85 db                	test   %ebx,%ebx
  102abb:	0f 8e a6 ef ff ff    	jle    101a67 <_vfprintf_r+0x387>
  102ac1:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  102ac7:	83 fb 10             	cmp    $0x10,%ebx
  102aca:	0f 8e 39 09 00 00    	jle    103409 <_vfprintf_r+0x1d29>
  102ad0:	4c 8b a5 90 fe ff ff 	mov    -0x170(%rbp),%r12
  102ad7:	eb 13                	jmp    102aec <_vfprintf_r+0x140c>
  102ad9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  102ae0:	83 eb 10             	sub    $0x10,%ebx
  102ae3:	83 fb 10             	cmp    $0x10,%ebx
  102ae6:	0f 8e 1d 09 00 00    	jle    103409 <_vfprintf_r+0x1d29>
  102aec:	48 83 c0 10          	add    $0x10,%rax
  102af0:	83 c2 01             	add    $0x1,%edx
  102af3:	49 83 c2 10          	add    $0x10,%r10
  102af7:	49 c7 42 f0 d0 06 11 	movq   $0x1106d0,-0x10(%r10)
  102afe:	00 
  102aff:	49 c7 42 f8 10 00 00 	movq   $0x10,-0x8(%r10)
  102b06:	00 
  102b07:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  102b0e:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  102b14:	83 fa 07             	cmp    $0x7,%edx
  102b17:	7e c7                	jle    102ae0 <_vfprintf_r+0x1400>
  102b19:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  102b20:	4c 89 e6             	mov    %r12,%rsi
  102b23:	4c 89 f7             	mov    %r14,%rdi
  102b26:	e8 e5 50 00 00       	callq  107c10 <__sprint_r>
  102b2b:	85 c0                	test   %eax,%eax
  102b2d:	0f 85 60 f0 ff ff    	jne    101b93 <_vfprintf_r+0x4b3>
  102b33:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  102b3a:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  102b40:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  102b47:	eb 97                	jmp    102ae0 <_vfprintf_r+0x1400>
  102b49:	41 f6 c7 01          	test   $0x1,%r15b
  102b4d:	0f 85 5b fa ff ff    	jne    1025ae <_vfprintf_r+0xece>
  102b53:	83 fa 07             	cmp    $0x7,%edx
  102b56:	0f 8e e4 fa ff ff    	jle    102640 <_vfprintf_r+0xf60>
  102b5c:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  102b63:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  102b6a:	4c 89 f7             	mov    %r14,%rdi
  102b6d:	e8 9e 50 00 00       	callq  107c10 <__sprint_r>
  102b72:	85 c0                	test   %eax,%eax
  102b74:	0f 85 19 f0 ff ff    	jne    101b93 <_vfprintf_r+0x4b3>
  102b7a:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  102b81:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  102b87:	48 8d b5 50 ff ff ff 	lea    -0xb0(%rbp),%rsi
  102b8e:	e9 ad fa ff ff       	jmpq   102640 <_vfprintf_r+0xf60>
  102b93:	85 db                	test   %ebx,%ebx
  102b95:	0f 8e a5 fa ff ff    	jle    102640 <_vfprintf_r+0xf60>
  102b9b:	83 fb 10             	cmp    $0x10,%ebx
  102b9e:	0f 8e f6 09 00 00    	jle    10359a <_vfprintf_r+0x1eba>
  102ba4:	4c 8b a5 90 fe ff ff 	mov    -0x170(%rbp),%r12
  102bab:	eb 0f                	jmp    102bbc <_vfprintf_r+0x14dc>
  102bad:	0f 1f 00             	nopl   (%rax)
  102bb0:	83 eb 10             	sub    $0x10,%ebx
  102bb3:	83 fb 10             	cmp    $0x10,%ebx
  102bb6:	0f 8e de 09 00 00    	jle    10359a <_vfprintf_r+0x1eba>
  102bbc:	48 83 c0 10          	add    $0x10,%rax
  102bc0:	83 c2 01             	add    $0x1,%edx
  102bc3:	48 83 c6 10          	add    $0x10,%rsi
  102bc7:	48 c7 46 f0 d0 06 11 	movq   $0x1106d0,-0x10(%rsi)
  102bce:	00 
  102bcf:	48 c7 46 f8 10 00 00 	movq   $0x10,-0x8(%rsi)
  102bd6:	00 
  102bd7:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  102bde:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  102be4:	83 fa 07             	cmp    $0x7,%edx
  102be7:	7e c7                	jle    102bb0 <_vfprintf_r+0x14d0>
  102be9:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  102bf0:	4c 89 e6             	mov    %r12,%rsi
  102bf3:	4c 89 f7             	mov    %r14,%rdi
  102bf6:	e8 15 50 00 00       	callq  107c10 <__sprint_r>
  102bfb:	85 c0                	test   %eax,%eax
  102bfd:	0f 85 90 ef ff ff    	jne    101b93 <_vfprintf_r+0x4b3>
  102c03:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  102c0a:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  102c10:	48 8d b5 50 ff ff ff 	lea    -0xb0(%rbp),%rsi
  102c17:	eb 97                	jmp    102bb0 <_vfprintf_r+0x14d0>
  102c19:	41 f6 c1 10          	test   $0x10,%r9b
  102c1d:	0f 84 f9 01 00 00    	je     102e1c <_vfprintf_r+0x173c>
  102c23:	83 f8 2f             	cmp    $0x2f,%eax
  102c26:	0f 87 43 0b 00 00    	ja     10376f <_vfprintf_r+0x208f>
  102c2c:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  102c33:	89 c2                	mov    %eax,%edx
  102c35:	83 c0 08             	add    $0x8,%eax
  102c38:	89 01                	mov    %eax,(%rcx)
  102c3a:	48 03 51 10          	add    0x10(%rcx),%rdx
  102c3e:	66 90                	xchg   %ax,%ax
  102c40:	48 8b 32             	mov    (%rdx),%rsi
  102c43:	b8 01 00 00 00       	mov    $0x1,%eax
  102c48:	c6 85 a5 fe ff ff 00 	movb   $0x0,-0x15b(%rbp)
  102c4f:	83 fb ff             	cmp    $0xffffffff,%ebx
  102c52:	0f 84 e8 03 00 00    	je     103040 <_vfprintf_r+0x1960>
  102c58:	45 89 cf             	mov    %r9d,%r15d
  102c5b:	41 80 e7 7f          	and    $0x7f,%r15b
  102c5f:	48 85 f6             	test   %rsi,%rsi
  102c62:	0f 85 cd 03 00 00    	jne    103035 <_vfprintf_r+0x1955>
  102c68:	85 db                	test   %ebx,%ebx
  102c6a:	0f 85 c5 03 00 00    	jne    103035 <_vfprintf_r+0x1955>
  102c70:	85 c0                	test   %eax,%eax
  102c72:	0f 85 58 04 00 00    	jne    1030d0 <_vfprintf_r+0x19f0>
  102c78:	41 83 e1 01          	and    $0x1,%r9d
  102c7c:	44 89 8d 80 fe ff ff 	mov    %r9d,-0x180(%rbp)
  102c83:	0f 84 8f 04 00 00    	je     103118 <_vfprintf_r+0x1a38>
  102c89:	c6 85 43 ff ff ff 30 	movb   $0x30,-0xbd(%rbp)
  102c90:	31 db                	xor    %ebx,%ebx
  102c92:	48 8d 8d 43 ff ff ff 	lea    -0xbd(%rbp),%rcx
  102c99:	e9 a2 f3 ff ff       	jmpq   102040 <_vfprintf_r+0x960>
  102c9e:	41 f6 c7 10          	test   $0x10,%r15b
  102ca2:	0f 84 43 01 00 00    	je     102deb <_vfprintf_r+0x170b>
  102ca8:	83 f8 2f             	cmp    $0x2f,%eax
  102cab:	0f 87 3d f3 ff ff    	ja     101fee <_vfprintf_r+0x90e>
  102cb1:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  102cb8:	89 c2                	mov    %eax,%edx
  102cba:	83 c0 08             	add    $0x8,%eax
  102cbd:	89 01                	mov    %eax,(%rcx)
  102cbf:	48 03 51 10          	add    0x10(%rcx),%rdx
  102cc3:	e9 39 f3 ff ff       	jmpq   102001 <_vfprintf_r+0x921>
  102cc8:	41 f6 c7 10          	test   $0x10,%r15b
  102ccc:	0f 84 7c 01 00 00    	je     102e4e <_vfprintf_r+0x176e>
  102cd2:	83 f8 2f             	cmp    $0x2f,%eax
  102cd5:	0f 87 88 09 00 00    	ja     103663 <_vfprintf_r+0x1f83>
  102cdb:	48 8b bd 70 fe ff ff 	mov    -0x190(%rbp),%rdi
  102ce2:	89 c2                	mov    %eax,%edx
  102ce4:	83 c0 08             	add    $0x8,%eax
  102ce7:	89 07                	mov    %eax,(%rdi)
  102ce9:	48 03 57 10          	add    0x10(%rdi),%rdx
  102ced:	0f 1f 00             	nopl   (%rax)
  102cf0:	48 8b 32             	mov    (%rdx),%rsi
  102cf3:	45 89 f9             	mov    %r15d,%r9d
  102cf6:	31 c0                	xor    %eax,%eax
  102cf8:	41 81 e1 ff fb ff ff 	and    $0xfffffbff,%r9d
  102cff:	e9 44 ff ff ff       	jmpq   102c48 <_vfprintf_r+0x1568>
  102d04:	41 f6 c7 01          	test   $0x1,%r15b
  102d08:	0f 84 59 ed ff ff    	je     101a67 <_vfprintf_r+0x387>
  102d0e:	e9 d4 f4 ff ff       	jmpq   1021e7 <_vfprintf_r+0xb07>
  102d13:	4d 89 e2             	mov    %r12,%r10
  102d16:	e9 b7 f2 ff ff       	jmpq   101fd2 <_vfprintf_r+0x8f2>
  102d1b:	48 8b b9 a0 00 00 00 	mov    0xa0(%rcx),%rdi
  102d22:	48 89 cb             	mov    %rcx,%rbx
  102d25:	e8 d4 9f 00 00       	callq  10ccfe <__retarget_lock_acquire_recursive>
  102d2a:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  102d2e:	e9 22 ea ff ff       	jmpq   101755 <_vfprintf_r+0x75>
  102d33:	8b bd c8 fe ff ff    	mov    -0x138(%rbp),%edi
  102d39:	48 83 c0 01          	add    $0x1,%rax
  102d3d:	49 83 c2 10          	add    $0x10,%r10
  102d41:	49 c7 42 f0 9f 14 11 	movq   $0x11149f,-0x10(%r10)
  102d48:	00 
  102d49:	49 c7 42 f8 01 00 00 	movq   $0x1,-0x8(%r10)
  102d50:	00 
  102d51:	8d 57 01             	lea    0x1(%rdi),%edx
  102d54:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  102d5b:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  102d61:	83 fa 07             	cmp    $0x7,%edx
  102d64:	0f 8f bb 13 00 00    	jg     104125 <_vfprintf_r+0x2a45>
  102d6a:	8b bd 58 fe ff ff    	mov    -0x1a8(%rbp),%edi
  102d70:	09 f7                	or     %esi,%edi
  102d72:	0f 84 b8 14 00 00    	je     104230 <_vfprintf_r+0x2b50>
  102d78:	48 8b bd 30 fe ff ff 	mov    -0x1d0(%rbp),%rdi
  102d7f:	49 83 c2 10          	add    $0x10,%r10
  102d83:	49 89 7a f0          	mov    %rdi,-0x10(%r10)
  102d87:	48 8b bd 40 fe ff ff 	mov    -0x1c0(%rbp),%rdi
  102d8e:	48 01 f8             	add    %rdi,%rax
  102d91:	49 89 7a f8          	mov    %rdi,-0x8(%r10)
  102d95:	8b bd c8 fe ff ff    	mov    -0x138(%rbp),%edi
  102d9b:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  102da2:	8d 57 01             	lea    0x1(%rdi),%edx
  102da5:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  102dab:	83 fa 07             	cmp    $0x7,%edx
  102dae:	0f 8f fd 13 00 00    	jg     1041b1 <_vfprintf_r+0x2ad1>
  102db4:	85 f6                	test   %esi,%esi
  102db6:	0f 88 92 16 00 00    	js     10444e <_vfprintf_r+0x2d6e>
  102dbc:	49 89 0a             	mov    %rcx,(%r10)
  102dbf:	48 63 8d 58 fe ff ff 	movslq -0x1a8(%rbp),%rcx
  102dc6:	49 89 4a 08          	mov    %rcx,0x8(%r10)
  102dca:	48 01 c8             	add    %rcx,%rax
  102dcd:	83 c2 01             	add    $0x1,%edx
  102dd0:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  102dd7:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  102ddd:	83 fa 07             	cmp    $0x7,%edx
  102de0:	0f 8e 7d ec ff ff    	jle    101a63 <_vfprintf_r+0x383>
  102de6:	e9 8a f8 ff ff       	jmpq   102675 <_vfprintf_r+0xf95>
  102deb:	41 f6 c7 40          	test   $0x40,%r15b
  102def:	0f 84 86 08 00 00    	je     10367b <_vfprintf_r+0x1f9b>
  102df5:	83 f8 2f             	cmp    $0x2f,%eax
  102df8:	0f 87 0d 0d 00 00    	ja     103b0b <_vfprintf_r+0x242b>
  102dfe:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  102e05:	89 c2                	mov    %eax,%edx
  102e07:	83 c0 08             	add    $0x8,%eax
  102e0a:	89 01                	mov    %eax,(%rcx)
  102e0c:	48 03 51 10          	add    0x10(%rcx),%rdx
  102e10:	48 0f bf 32          	movswq (%rdx),%rsi
  102e14:	48 89 f0             	mov    %rsi,%rax
  102e17:	e9 eb f1 ff ff       	jmpq   102007 <_vfprintf_r+0x927>
  102e1c:	41 f6 c1 40          	test   $0x40,%r9b
  102e20:	0f 84 89 08 00 00    	je     1036af <_vfprintf_r+0x1fcf>
  102e26:	83 f8 2f             	cmp    $0x2f,%eax
  102e29:	0f 87 f4 0c 00 00    	ja     103b23 <_vfprintf_r+0x2443>
  102e2f:	48 8b bd 70 fe ff ff 	mov    -0x190(%rbp),%rdi
  102e36:	89 c2                	mov    %eax,%edx
  102e38:	83 c0 08             	add    $0x8,%eax
  102e3b:	89 07                	mov    %eax,(%rdi)
  102e3d:	48 03 57 10          	add    0x10(%rdi),%rdx
  102e41:	0f b7 32             	movzwl (%rdx),%esi
  102e44:	b8 01 00 00 00       	mov    $0x1,%eax
  102e49:	e9 fa fd ff ff       	jmpq   102c48 <_vfprintf_r+0x1568>
  102e4e:	41 f6 c7 40          	test   $0x40,%r15b
  102e52:	0f 84 2f 09 00 00    	je     103787 <_vfprintf_r+0x20a7>
  102e58:	83 f8 2f             	cmp    $0x2f,%eax
  102e5b:	0f 87 92 0c 00 00    	ja     103af3 <_vfprintf_r+0x2413>
  102e61:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  102e68:	89 c2                	mov    %eax,%edx
  102e6a:	83 c0 08             	add    $0x8,%eax
  102e6d:	89 01                	mov    %eax,(%rcx)
  102e6f:	48 03 51 10          	add    0x10(%rcx),%rdx
  102e73:	0f b7 32             	movzwl (%rdx),%esi
  102e76:	e9 78 fe ff ff       	jmpq   102cf3 <_vfprintf_r+0x1613>
  102e7b:	89 c2                	mov    %eax,%edx
  102e7d:	83 c0 08             	add    $0x8,%eax
  102e80:	48 03 56 10          	add    0x10(%rsi),%rdx
  102e84:	89 06                	mov    %eax,(%rsi)
  102e86:	e9 b5 fd ff ff       	jmpq   102c40 <_vfprintf_r+0x1560>
  102e8b:	8b 46 04             	mov    0x4(%rsi),%eax
  102e8e:	3d af 00 00 00       	cmp    $0xaf,%eax
  102e93:	0f 87 1e 09 00 00    	ja     1037b7 <_vfprintf_r+0x20d7>
  102e99:	89 c2                	mov    %eax,%edx
  102e9b:	83 c0 10             	add    $0x10,%eax
  102e9e:	48 03 56 10          	add    0x10(%rsi),%rdx
  102ea2:	89 46 04             	mov    %eax,0x4(%rsi)
  102ea5:	f2 0f 10 12          	movsd  (%rdx),%xmm2
  102ea9:	f2 0f 11 95 48 fe ff 	movsd  %xmm2,-0x1b8(%rbp)
  102eb0:	ff 
  102eb1:	e9 69 ed ff ff       	jmpq   101c1f <_vfprintf_r+0x53f>
  102eb6:	89 c2                	mov    %eax,%edx
  102eb8:	83 c0 08             	add    $0x8,%eax
  102ebb:	48 03 56 10          	add    0x10(%rsi),%rdx
  102ebf:	89 06                	mov    %eax,(%rsi)
  102ec1:	e9 66 ef ff ff       	jmpq   101e2c <_vfprintf_r+0x74c>
  102ec6:	48 8b b5 70 fe ff ff 	mov    -0x190(%rbp),%rsi
  102ecd:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  102ed1:	48 8d 42 08          	lea    0x8(%rdx),%rax
  102ed5:	48 89 46 08          	mov    %rax,0x8(%rsi)
  102ed9:	e9 6f ee ff ff       	jmpq   101d4d <_vfprintf_r+0x66d>
  102ede:	48 8b bd 70 fe ff ff 	mov    -0x190(%rbp),%rdi
  102ee5:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  102ee9:	48 8d 42 08          	lea    0x8(%rdx),%rax
  102eed:	48 89 47 08          	mov    %rax,0x8(%rdi)
  102ef1:	e9 08 ee ff ff       	jmpq   101cfe <_vfprintf_r+0x61e>
  102ef6:	89 c2                	mov    %eax,%edx
  102ef8:	83 c0 08             	add    $0x8,%eax
  102efb:	48 03 57 10          	add    0x10(%rdi),%rdx
  102eff:	89 07                	mov    %eax,(%rdi)
  102f01:	e9 ea fd ff ff       	jmpq   102cf0 <_vfprintf_r+0x1610>
  102f06:	89 c2                	mov    %eax,%edx
  102f08:	83 c0 08             	add    $0x8,%eax
  102f0b:	48 03 51 10          	add    0x10(%rcx),%rdx
  102f0f:	89 01                	mov    %eax,(%rcx)
  102f11:	e9 eb f0 ff ff       	jmpq   102001 <_vfprintf_r+0x921>
  102f16:	41 f6 c7 10          	test   $0x10,%r15b
  102f1a:	0f 84 0c 08 00 00    	je     10372c <_vfprintf_r+0x204c>
  102f20:	83 f8 2f             	cmp    $0x2f,%eax
  102f23:	0f 86 56 0c 00 00    	jbe    103b7f <_vfprintf_r+0x249f>
  102f29:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  102f30:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  102f34:	48 8d 42 08          	lea    0x8(%rdx),%rax
  102f38:	48 89 41 08          	mov    %rax,0x8(%rcx)
  102f3c:	e9 ff f1 ff ff       	jmpq   102140 <_vfprintf_r+0xa60>
  102f41:	89 c2                	mov    %eax,%edx
  102f43:	83 c0 08             	add    $0x8,%eax
  102f46:	48 03 51 10          	add    0x10(%rcx),%rdx
  102f4a:	89 01                	mov    %eax,(%rcx)
  102f4c:	e9 92 f1 ff ff       	jmpq   1020e3 <_vfprintf_r+0xa03>
  102f51:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  102f58:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  102f5f:	4c 89 f7             	mov    %r14,%rdi
  102f62:	e8 a9 4c 00 00       	callq  107c10 <__sprint_r>
  102f67:	85 c0                	test   %eax,%eax
  102f69:	0f 85 24 ec ff ff    	jne    101b93 <_vfprintf_r+0x4b3>
  102f6f:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  102f76:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  102f7d:	e9 a1 f2 ff ff       	jmpq   102223 <_vfprintf_r+0xb43>
  102f82:	45 0f be 5d 01       	movsbl 0x1(%r13),%r11d
  102f87:	41 81 cf 00 02 00 00 	or     $0x200,%r15d
  102f8e:	49 83 c5 01          	add    $0x1,%r13
  102f92:	e9 ff e8 ff ff       	jmpq   101896 <_vfprintf_r+0x1b6>
  102f97:	45 0f be 5d 01       	movsbl 0x1(%r13),%r11d
  102f9c:	41 83 cf 20          	or     $0x20,%r15d
  102fa0:	49 83 c5 01          	add    $0x1,%r13
  102fa4:	e9 ed e8 ff ff       	jmpq   101896 <_vfprintf_r+0x1b6>
  102fa9:	4d 89 e2             	mov    %r12,%r10
  102fac:	45 89 f9             	mov    %r15d,%r9d
  102faf:	e9 d5 ef ff ff       	jmpq   101f89 <_vfprintf_r+0x8a9>
  102fb4:	48 c7 85 20 fe ff ff 	movq   $0x111501,-0x1e0(%rbp)
  102fbb:	01 15 11 00 
  102fbf:	4d 89 e2             	mov    %r12,%r10
  102fc2:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  102fc9:	8b 01                	mov    (%rcx),%eax
  102fcb:	41 f6 c7 20          	test   $0x20,%r15b
  102fcf:	0f 84 51 01 00 00    	je     103126 <_vfprintf_r+0x1a46>
  102fd5:	83 f8 2f             	cmp    $0x2f,%eax
  102fd8:	0f 87 13 02 00 00    	ja     1031f1 <_vfprintf_r+0x1b11>
  102fde:	89 c2                	mov    %eax,%edx
  102fe0:	83 c0 08             	add    $0x8,%eax
  102fe3:	48 03 51 10          	add    0x10(%rcx),%rdx
  102fe7:	89 01                	mov    %eax,(%rcx)
  102fe9:	48 8b 32             	mov    (%rdx),%rsi
  102fec:	48 85 f6             	test   %rsi,%rsi
  102fef:	74 18                	je     103009 <_vfprintf_r+0x1929>
  102ff1:	41 f6 c7 01          	test   $0x1,%r15b
  102ff5:	74 12                	je     103009 <_vfprintf_r+0x1929>
  102ff7:	c6 85 a6 fe ff ff 30 	movb   $0x30,-0x15a(%rbp)
  102ffe:	41 83 cf 02          	or     $0x2,%r15d
  103002:	44 88 9d a7 fe ff ff 	mov    %r11b,-0x159(%rbp)
  103009:	45 89 f9             	mov    %r15d,%r9d
  10300c:	b8 02 00 00 00       	mov    $0x2,%eax
  103011:	41 81 e1 ff fb ff ff 	and    $0xfffffbff,%r9d
  103018:	e9 2b fc ff ff       	jmpq   102c48 <_vfprintf_r+0x1568>
  10301d:	4d 89 e2             	mov    %r12,%r10
  103020:	e9 26 ef ff ff       	jmpq   101f4b <_vfprintf_r+0x86b>
  103025:	48 c7 85 20 fe ff ff 	movq   $0x111512,-0x1e0(%rbp)
  10302c:	12 15 11 00 
  103030:	4d 89 e2             	mov    %r12,%r10
  103033:	eb 8d                	jmp    102fc2 <_vfprintf_r+0x18e2>
  103035:	45 89 f9             	mov    %r15d,%r9d
  103038:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10303f:	00 
  103040:	83 f8 01             	cmp    $0x1,%eax
  103043:	0f 84 a2 00 00 00    	je     1030eb <_vfprintf_r+0x1a0b>
  103049:	4c 8d bd 44 ff ff ff 	lea    -0xbc(%rbp),%r15
  103050:	4c 89 f9             	mov    %r15,%rcx
  103053:	83 f8 02             	cmp    $0x2,%eax
  103056:	75 38                	jne    103090 <_vfprintf_r+0x19b0>
  103058:	48 8b 95 20 fe ff ff 	mov    -0x1e0(%rbp),%rdx
  10305f:	90                   	nop
  103060:	48 89 f0             	mov    %rsi,%rax
  103063:	48 83 e9 01          	sub    $0x1,%rcx
  103067:	83 e0 0f             	and    $0xf,%eax
  10306a:	48 c1 ee 04          	shr    $0x4,%rsi
  10306e:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  103072:	88 01                	mov    %al,(%rcx)
  103074:	75 ea                	jne    103060 <_vfprintf_r+0x1980>
  103076:	44 89 f8             	mov    %r15d,%eax
  103079:	45 89 cf             	mov    %r9d,%r15d
  10307c:	29 c8                	sub    %ecx,%eax
  10307e:	89 85 80 fe ff ff    	mov    %eax,-0x180(%rbp)
  103084:	e9 b7 ef ff ff       	jmpq   102040 <_vfprintf_r+0x960>
  103089:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  103090:	89 f0                	mov    %esi,%eax
  103092:	48 89 ca             	mov    %rcx,%rdx
  103095:	48 83 e9 01          	sub    $0x1,%rcx
  103099:	83 e0 07             	and    $0x7,%eax
  10309c:	83 c0 30             	add    $0x30,%eax
  10309f:	48 c1 ee 03          	shr    $0x3,%rsi
  1030a3:	88 01                	mov    %al,(%rcx)
  1030a5:	75 e9                	jne    103090 <_vfprintf_r+0x19b0>
  1030a7:	3c 30                	cmp    $0x30,%al
  1030a9:	74 cb                	je     103076 <_vfprintf_r+0x1996>
  1030ab:	41 f6 c1 01          	test   $0x1,%r9b
  1030af:	74 c5                	je     103076 <_vfprintf_r+0x1996>
  1030b1:	48 83 ea 02          	sub    $0x2,%rdx
  1030b5:	44 89 f8             	mov    %r15d,%eax
  1030b8:	c6 41 ff 30          	movb   $0x30,-0x1(%rcx)
  1030bc:	45 89 cf             	mov    %r9d,%r15d
  1030bf:	29 d0                	sub    %edx,%eax
  1030c1:	48 89 d1             	mov    %rdx,%rcx
  1030c4:	89 85 80 fe ff ff    	mov    %eax,-0x180(%rbp)
  1030ca:	e9 71 ef ff ff       	jmpq   102040 <_vfprintf_r+0x960>
  1030cf:	90                   	nop
  1030d0:	c7 85 80 fe ff ff 00 	movl   $0x0,-0x180(%rbp)
  1030d7:	00 00 00 
  1030da:	31 db                	xor    %ebx,%ebx
  1030dc:	48 8d 8d 44 ff ff ff 	lea    -0xbc(%rbp),%rcx
  1030e3:	e9 58 ef ff ff       	jmpq   102040 <_vfprintf_r+0x960>
  1030e8:	45 89 f9             	mov    %r15d,%r9d
  1030eb:	48 83 fe 09          	cmp    $0x9,%rsi
  1030ef:	0f 87 2a 03 00 00    	ja     10341f <_vfprintf_r+0x1d3f>
  1030f5:	83 c6 30             	add    $0x30,%esi
  1030f8:	45 89 cf             	mov    %r9d,%r15d
  1030fb:	c7 85 80 fe ff ff 01 	movl   $0x1,-0x180(%rbp)
  103102:	00 00 00 
  103105:	48 8d 8d 43 ff ff ff 	lea    -0xbd(%rbp),%rcx
  10310c:	40 88 b5 43 ff ff ff 	mov    %sil,-0xbd(%rbp)
  103113:	e9 28 ef ff ff       	jmpq   102040 <_vfprintf_r+0x960>
  103118:	31 db                	xor    %ebx,%ebx
  10311a:	48 8d 8d 44 ff ff ff 	lea    -0xbc(%rbp),%rcx
  103121:	e9 1a ef ff ff       	jmpq   102040 <_vfprintf_r+0x960>
  103126:	41 f6 c7 10          	test   $0x10,%r15b
  10312a:	0f 84 d9 00 00 00    	je     103209 <_vfprintf_r+0x1b29>
  103130:	83 f8 2f             	cmp    $0x2f,%eax
  103133:	0f 87 ab 05 00 00    	ja     1036e4 <_vfprintf_r+0x2004>
  103139:	48 8b bd 70 fe ff ff 	mov    -0x190(%rbp),%rdi
  103140:	89 c2                	mov    %eax,%edx
  103142:	83 c0 08             	add    $0x8,%eax
  103145:	89 07                	mov    %eax,(%rdi)
  103147:	48 03 57 10          	add    0x10(%rdi),%rdx
  10314b:	e9 99 fe ff ff       	jmpq   102fe9 <_vfprintf_r+0x1909>
  103150:	c6 85 a5 fe ff ff 2d 	movb   $0x2d,-0x15b(%rbp)
  103157:	48 f7 de             	neg    %rsi
  10315a:	45 89 f9             	mov    %r15d,%r9d
  10315d:	b8 01 00 00 00       	mov    $0x1,%eax
  103162:	e9 e8 fa ff ff       	jmpq   102c4f <_vfprintf_r+0x156f>
  103167:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  10316e:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  103175:	4c 89 f7             	mov    %r14,%rdi
  103178:	48 89 8d 80 fe ff ff 	mov    %rcx,-0x180(%rbp)
  10317f:	e8 8c 4a 00 00       	callq  107c10 <__sprint_r>
  103184:	85 c0                	test   %eax,%eax
  103186:	0f 85 07 ea ff ff    	jne    101b93 <_vfprintf_r+0x4b3>
  10318c:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  103193:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  103199:	48 8d b5 50 ff ff ff 	lea    -0xb0(%rbp),%rsi
  1031a0:	48 8b 8d 80 fe ff ff 	mov    -0x180(%rbp),%rcx
  1031a7:	e9 41 f4 ff ff       	jmpq   1025ed <_vfprintf_r+0xf0d>
  1031ac:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  1031b3:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  1031ba:	4c 89 f7             	mov    %r14,%rdi
  1031bd:	48 89 8d 80 fe ff ff 	mov    %rcx,-0x180(%rbp)
  1031c4:	e8 47 4a 00 00       	callq  107c10 <__sprint_r>
  1031c9:	85 c0                	test   %eax,%eax
  1031cb:	0f 85 c2 e9 ff ff    	jne    101b93 <_vfprintf_r+0x4b3>
  1031d1:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  1031d8:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  1031de:	48 8d b5 50 ff ff ff 	lea    -0xb0(%rbp),%rsi
  1031e5:	48 8b 8d 80 fe ff ff 	mov    -0x180(%rbp),%rcx
  1031ec:	e9 c6 f3 ff ff       	jmpq   1025b7 <_vfprintf_r+0xed7>
  1031f1:	48 8b bd 70 fe ff ff 	mov    -0x190(%rbp),%rdi
  1031f8:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  1031fc:	48 8d 42 08          	lea    0x8(%rdx),%rax
  103200:	48 89 47 08          	mov    %rax,0x8(%rdi)
  103204:	e9 e0 fd ff ff       	jmpq   102fe9 <_vfprintf_r+0x1909>
  103209:	41 f6 c7 40          	test   $0x40,%r15b
  10320d:	0f 84 e9 04 00 00    	je     1036fc <_vfprintf_r+0x201c>
  103213:	83 f8 2f             	cmp    $0x2f,%eax
  103216:	0f 87 7a 09 00 00    	ja     103b96 <_vfprintf_r+0x24b6>
  10321c:	48 8b b5 70 fe ff ff 	mov    -0x190(%rbp),%rsi
  103223:	89 c2                	mov    %eax,%edx
  103225:	83 c0 08             	add    $0x8,%eax
  103228:	89 06                	mov    %eax,(%rsi)
  10322a:	48 03 56 10          	add    0x10(%rsi),%rdx
  10322e:	0f b7 32             	movzwl (%rdx),%esi
  103231:	e9 b6 fd ff ff       	jmpq   102fec <_vfprintf_r+0x190c>
  103236:	f2 0f 10 bd 48 fe ff 	movsd  -0x1b8(%rbp),%xmm7
  10323d:	ff 
  10323e:	66 0f 2e ff          	ucomisd %xmm7,%xmm7
  103242:	0f 8a 96 15 00 00    	jp     1047de <_vfprintf_r+0x30fe>
  103248:	45 89 dc             	mov    %r11d,%r12d
  10324b:	41 83 e4 df          	and    $0xffffffdf,%r12d
  10324f:	41 83 fc 41          	cmp    $0x41,%r12d
  103253:	0f 85 76 05 00 00    	jne    1037cf <_vfprintf_r+0x20ef>
  103259:	41 83 fb 61          	cmp    $0x61,%r11d
  10325d:	b8 78 00 00 00       	mov    $0x78,%eax
  103262:	ba 58 00 00 00       	mov    $0x58,%edx
  103267:	c6 85 a6 fe ff ff 30 	movb   $0x30,-0x15a(%rbp)
  10326e:	0f 45 c2             	cmovne %edx,%eax
  103271:	48 8d 8d e0 fe ff ff 	lea    -0x120(%rbp),%rcx
  103278:	48 c7 85 78 fe ff ff 	movq   $0x0,-0x188(%rbp)
  10327f:	00 00 00 00 
  103283:	88 85 a7 fe ff ff    	mov    %al,-0x159(%rbp)
  103289:	83 fb 63             	cmp    $0x63,%ebx
  10328c:	0f 8f 8a 0a 00 00    	jg     103d1c <_vfprintf_r+0x263c>
  103292:	f2 0f 10 95 48 fe ff 	movsd  -0x1b8(%rbp),%xmm2
  103299:	ff 
  10329a:	c6 85 68 fe ff ff 2d 	movb   $0x2d,-0x198(%rbp)
  1032a1:	66 48 0f 7e d0       	movq   %xmm2,%rax
  1032a6:	66 0f 28 c2          	movapd %xmm2,%xmm0
  1032aa:	66 0f 57 05 4e d4 00 	xorpd  0xd44e(%rip),%xmm0        # 110700 <blanks.1+0x20>
  1032b1:	00 
  1032b2:	48 c1 e8 20          	shr    $0x20,%rax
  1032b6:	85 c0                	test   %eax,%eax
  1032b8:	0f 89 7b 09 00 00    	jns    103c39 <_vfprintf_r+0x2559>
  1032be:	48 8d bd a8 fe ff ff 	lea    -0x158(%rbp),%rdi
  1032c5:	4c 89 95 60 fe ff ff 	mov    %r10,-0x1a0(%rbp)
  1032cc:	48 89 8d 80 fe ff ff 	mov    %rcx,-0x180(%rbp)
  1032d3:	44 89 9d 98 fe ff ff 	mov    %r11d,-0x168(%rbp)
  1032da:	e8 c1 47 00 00       	callq  107aa0 <frexp>
  1032df:	66 0f ef c9          	pxor   %xmm1,%xmm1
  1032e3:	44 8b 9d 98 fe ff ff 	mov    -0x168(%rbp),%r11d
  1032ea:	48 8b 8d 80 fe ff ff 	mov    -0x180(%rbp),%rcx
  1032f1:	f2 0f 59 05 47 da 00 	mulsd  0xda47(%rip),%xmm0        # 110d40 <uart_ns16550_dev_cfg_0+0x3d0>
  1032f8:	00 
  1032f9:	4c 8b 95 60 fe ff ff 	mov    -0x1a0(%rbp),%r10
  103300:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  103304:	7a 0c                	jp     103312 <_vfprintf_r+0x1c32>
  103306:	75 0a                	jne    103312 <_vfprintf_r+0x1c32>
  103308:	c7 85 a8 fe ff ff 01 	movl   $0x1,-0x158(%rbp)
  10330f:	00 00 00 
  103312:	41 83 fb 61          	cmp    $0x61,%r11d
  103316:	b8 12 15 11 00       	mov    $0x111512,%eax
  10331b:	bf 01 15 11 00       	mov    $0x111501,%edi
  103320:	f2 0f 10 15 20 da 00 	movsd  0xda20(%rip),%xmm2        # 110d48 <uart_ns16550_dev_cfg_0+0x3d8>
  103327:	00 
  103328:	48 0f 45 f8          	cmovne %rax,%rdi
  10332c:	89 d8                	mov    %ebx,%eax
  10332e:	01 cb                	add    %ecx,%ebx
  103330:	4c 8d 4c 01 01       	lea    0x1(%rcx,%rax,1),%r9
  103335:	48 89 c8             	mov    %rcx,%rax
  103338:	eb 10                	jmp    10334a <_vfprintf_r+0x1c6a>
  10333a:	66 0f ef c9          	pxor   %xmm1,%xmm1
  10333e:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  103342:	7a 06                	jp     10334a <_vfprintf_r+0x1c6a>
  103344:	66 0f 2f c1          	comisd %xmm1,%xmm0
  103348:	74 34                	je     10337e <_vfprintf_r+0x1c9e>
  10334a:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  10334e:	66 0f ef c9          	pxor   %xmm1,%xmm1
  103352:	49 89 c0             	mov    %rax,%r8
  103355:	48 83 c0 01          	add    $0x1,%rax
  103359:	f2 0f 2c d0          	cvttsd2si %xmm0,%edx
  10335d:	f2 0f 2a ca          	cvtsi2sd %edx,%xmm1
  103361:	48 63 f2             	movslq %edx,%rsi
  103364:	0f b6 34 37          	movzbl (%rdi,%rsi,1),%esi
  103368:	40 88 70 ff          	mov    %sil,-0x1(%rax)
  10336c:	89 de                	mov    %ebx,%esi
  10336e:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  103372:	29 c6                	sub    %eax,%esi
  103374:	49 39 c1             	cmp    %rax,%r9
  103377:	75 c1                	jne    10333a <_vfprintf_r+0x1c5a>
  103379:	be ff ff ff ff       	mov    $0xffffffff,%esi
  10337e:	f2 0f 10 0d 92 d6 00 	movsd  0xd692(%rip),%xmm1        # 110a18 <uart_ns16550_dev_cfg_0+0xa8>
  103385:	00 
  103386:	66 0f 2f c1          	comisd %xmm1,%xmm0
  10338a:	0f 87 98 14 00 00    	ja     104828 <_vfprintf_r+0x3148>
  103390:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  103394:	7a 0b                	jp     1033a1 <_vfprintf_r+0x1cc1>
  103396:	75 09                	jne    1033a1 <_vfprintf_r+0x1cc1>
  103398:	83 e2 01             	and    $0x1,%edx
  10339b:	0f 85 87 14 00 00    	jne    104828 <_vfprintf_r+0x3148>
  1033a1:	8d 56 01             	lea    0x1(%rsi),%edx
  1033a4:	48 63 d2             	movslq %edx,%rdx
  1033a7:	48 01 c2             	add    %rax,%rdx
  1033aa:	85 f6                	test   %esi,%esi
  1033ac:	78 0d                	js     1033bb <_vfprintf_r+0x1cdb>
  1033ae:	48 83 c0 01          	add    $0x1,%rax
  1033b2:	c6 40 ff 30          	movb   $0x30,-0x1(%rax)
  1033b6:	48 39 c2             	cmp    %rax,%rdx
  1033b9:	75 f3                	jne    1033ae <_vfprintf_r+0x1cce>
  1033bb:	29 c8                	sub    %ecx,%eax
  1033bd:	41 83 cf 02          	or     $0x2,%r15d
  1033c1:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%rbp)
  1033c7:	8b 85 a8 fe ff ff    	mov    -0x158(%rbp),%eax
  1033cd:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%rbp)
  1033d3:	e9 fe 04 00 00       	jmpq   1038d6 <_vfprintf_r+0x21f6>
  1033d8:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  1033df:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  1033e6:	4c 89 f7             	mov    %r14,%rdi
  1033e9:	e8 22 48 00 00       	callq  107c10 <__sprint_r>
  1033ee:	85 c0                	test   %eax,%eax
  1033f0:	0f 85 9d e7 ff ff    	jne    101b93 <_vfprintf_r+0x4b3>
  1033f6:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  1033fd:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  103404:	e9 cc ed ff ff       	jmpq   1021d5 <_vfprintf_r+0xaf5>
  103409:	48 63 db             	movslq %ebx,%rbx
  10340c:	49 c7 02 d0 06 11 00 	movq   $0x1106d0,(%r10)
  103413:	49 89 5a 08          	mov    %rbx,0x8(%r10)
  103417:	48 01 d8             	add    %rbx,%rax
  10341a:	e9 ae f9 ff ff       	jmpq   102dcd <_vfprintf_r+0x16ed>
  10341f:	45 89 c8             	mov    %r9d,%r8d
  103422:	31 c0                	xor    %eax,%eax
  103424:	4c 8d bd 44 ff ff ff 	lea    -0xbc(%rbp),%r15
  10342b:	44 89 9d 98 fe ff ff 	mov    %r11d,-0x168(%rbp)
  103432:	44 89 8d 80 fe ff ff 	mov    %r9d,-0x180(%rbp)
  103439:	41 81 e0 00 04 00 00 	and    $0x400,%r8d
  103440:	4c 89 ff             	mov    %r15,%rdi
  103443:	41 89 c3             	mov    %eax,%r11d
  103446:	4c 8b 8d 38 fe ff ff 	mov    -0x1c8(%rbp),%r9
  10344d:	eb 1e                	jmp    10346d <_vfprintf_r+0x1d8d>
  10344f:	90                   	nop
  103450:	48 b8 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rax
  103457:	cc cc cc 
  10345a:	48 f7 e6             	mul    %rsi
  10345d:	48 c1 ea 03          	shr    $0x3,%rdx
  103461:	48 83 fe 09          	cmp    $0x9,%rsi
  103465:	76 52                	jbe    1034b9 <_vfprintf_r+0x1dd9>
  103467:	48 89 d6             	mov    %rdx,%rsi
  10346a:	48 89 cf             	mov    %rcx,%rdi
  10346d:	48 b8 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rax
  103474:	cc cc cc 
  103477:	48 8d 4f ff          	lea    -0x1(%rdi),%rcx
  10347b:	41 83 c3 01          	add    $0x1,%r11d
  10347f:	48 f7 e6             	mul    %rsi
  103482:	48 89 f0             	mov    %rsi,%rax
  103485:	48 c1 ea 03          	shr    $0x3,%rdx
  103489:	49 89 d4             	mov    %rdx,%r12
  10348c:	48 8d 14 92          	lea    (%rdx,%rdx,4),%rdx
  103490:	48 01 d2             	add    %rdx,%rdx
  103493:	48 29 d0             	sub    %rdx,%rax
  103496:	83 c0 30             	add    $0x30,%eax
  103499:	88 47 ff             	mov    %al,-0x1(%rdi)
  10349c:	45 85 c0             	test   %r8d,%r8d
  10349f:	74 af                	je     103450 <_vfprintf_r+0x1d70>
  1034a1:	41 0f be 11          	movsbl (%r9),%edx
  1034a5:	44 39 da             	cmp    %r11d,%edx
  1034a8:	75 a6                	jne    103450 <_vfprintf_r+0x1d70>
  1034aa:	80 fa 7f             	cmp    $0x7f,%dl
  1034ad:	74 a1                	je     103450 <_vfprintf_r+0x1d70>
  1034af:	48 83 fe 09          	cmp    $0x9,%rsi
  1034b3:	0f 87 b3 0e 00 00    	ja     10436c <_vfprintf_r+0x2c8c>
  1034b9:	4c 89 8d 38 fe ff ff 	mov    %r9,-0x1c8(%rbp)
  1034c0:	44 8b 8d 80 fe ff ff 	mov    -0x180(%rbp),%r9d
  1034c7:	44 89 9d 58 fe ff ff 	mov    %r11d,-0x1a8(%rbp)
  1034ce:	44 8b 9d 98 fe ff ff 	mov    -0x168(%rbp),%r11d
  1034d5:	e9 9c fb ff ff       	jmpq   103076 <_vfprintf_r+0x1996>
  1034da:	83 fb 06             	cmp    $0x6,%ebx
  1034dd:	b8 06 00 00 00       	mov    $0x6,%eax
  1034e2:	b9 23 15 11 00       	mov    $0x111523,%ecx
  1034e7:	0f 46 c3             	cmovbe %ebx,%eax
  1034ea:	89 85 80 fe ff ff    	mov    %eax,-0x180(%rbp)
  1034f0:	89 85 98 fe ff ff    	mov    %eax,-0x168(%rbp)
  1034f6:	e9 1a e4 ff ff       	jmpq   101915 <_vfprintf_r+0x235>
  1034fb:	48 83 bd d0 fe ff ff 	cmpq   $0x0,-0x130(%rbp)
  103502:	00 
  103503:	0f 85 d6 0f 00 00    	jne    1044df <_vfprintf_r+0x2dff>
  103509:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  103510:	00 00 00 
  103513:	e9 92 e6 ff ff       	jmpq   101baa <_vfprintf_r+0x4ca>
  103518:	48 89 cf             	mov    %rcx,%rdi
  10351b:	4c 89 95 00 fe ff ff 	mov    %r10,-0x200(%rbp)
  103522:	44 89 9d 18 fe ff ff 	mov    %r11d,-0x1e8(%rbp)
  103529:	48 89 8d 68 fe ff ff 	mov    %rcx,-0x198(%rbp)
  103530:	e8 2b e0 ff ff       	callq  101560 <strlen>
  103535:	be 00 00 00 00       	mov    $0x0,%esi
  10353a:	48 c7 85 78 fe ff ff 	movq   $0x0,-0x188(%rbp)
  103541:	00 00 00 00 
  103545:	48 8b 8d 68 fe ff ff 	mov    -0x198(%rbp),%rcx
  10354c:	48 89 c2             	mov    %rax,%rdx
  10354f:	89 85 80 fe ff ff    	mov    %eax,-0x180(%rbp)
  103555:	44 8b 9d 18 fe ff ff 	mov    -0x1e8(%rbp),%r11d
  10355c:	85 d2                	test   %edx,%edx
  10355e:	c7 85 50 fe ff ff 00 	movl   $0x0,-0x1b0(%rbp)
  103565:	00 00 00 
  103568:	0f b6 85 a5 fe ff ff 	movzbl -0x15b(%rbp),%eax
  10356f:	0f 49 f2             	cmovns %edx,%esi
  103572:	4c 8b 95 00 fe ff ff 	mov    -0x200(%rbp),%r10
  103579:	31 db                	xor    %ebx,%ebx
  10357b:	c7 85 5c fe ff ff 00 	movl   $0x0,-0x1a4(%rbp)
  103582:	00 00 00 
  103585:	c7 85 60 fe ff ff 00 	movl   $0x0,-0x1a0(%rbp)
  10358c:	00 00 00 
  10358f:	89 b5 98 fe ff ff    	mov    %esi,-0x168(%rbp)
  103595:	e9 e7 ea ff ff       	jmpq   102081 <_vfprintf_r+0x9a1>
  10359a:	48 63 db             	movslq %ebx,%rbx
  10359d:	83 c2 01             	add    $0x1,%edx
  1035a0:	48 c7 06 d0 06 11 00 	movq   $0x1106d0,(%rsi)
  1035a7:	48 01 d8             	add    %rbx,%rax
  1035aa:	48 89 5e 08          	mov    %rbx,0x8(%rsi)
  1035ae:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  1035b5:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  1035bb:	83 fa 07             	cmp    $0x7,%edx
  1035be:	0f 8e 78 f0 ff ff    	jle    10263c <_vfprintf_r+0xf5c>
  1035c4:	e9 93 f5 ff ff       	jmpq   102b5c <_vfprintf_r+0x147c>
  1035c9:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  1035cf:	83 fb 10             	cmp    $0x10,%ebx
  1035d2:	0f 8e 8e 04 00 00    	jle    103a66 <_vfprintf_r+0x2386>
  1035d8:	48 89 8d 80 fe ff ff 	mov    %rcx,-0x180(%rbp)
  1035df:	4c 89 f1             	mov    %r14,%rcx
  1035e2:	4c 8b a5 90 fe ff ff 	mov    -0x170(%rbp),%r12
  1035e9:	41 89 de             	mov    %ebx,%r14d
  1035ec:	48 89 cb             	mov    %rcx,%rbx
  1035ef:	eb 15                	jmp    103606 <_vfprintf_r+0x1f26>
  1035f1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  1035f8:	41 83 ee 10          	sub    $0x10,%r14d
  1035fc:	41 83 fe 10          	cmp    $0x10,%r14d
  103600:	0f 8e 50 04 00 00    	jle    103a56 <_vfprintf_r+0x2376>
  103606:	48 83 c0 10          	add    $0x10,%rax
  10360a:	83 c2 01             	add    $0x1,%edx
  10360d:	49 83 c2 10          	add    $0x10,%r10
  103611:	49 c7 42 f0 d0 06 11 	movq   $0x1106d0,-0x10(%r10)
  103618:	00 
  103619:	49 c7 42 f8 10 00 00 	movq   $0x10,-0x8(%r10)
  103620:	00 
  103621:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  103628:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  10362e:	83 fa 07             	cmp    $0x7,%edx
  103631:	7e c5                	jle    1035f8 <_vfprintf_r+0x1f18>
  103633:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  10363a:	4c 89 e6             	mov    %r12,%rsi
  10363d:	48 89 df             	mov    %rbx,%rdi
  103640:	e8 cb 45 00 00       	callq  107c10 <__sprint_r>
  103645:	85 c0                	test   %eax,%eax
  103647:	0f 85 b5 0e 00 00    	jne    104502 <_vfprintf_r+0x2e22>
  10364d:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  103654:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  10365a:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  103661:	eb 95                	jmp    1035f8 <_vfprintf_r+0x1f18>
  103663:	48 8b b5 70 fe ff ff 	mov    -0x190(%rbp),%rsi
  10366a:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  10366e:	48 8d 42 08          	lea    0x8(%rdx),%rax
  103672:	48 89 46 08          	mov    %rax,0x8(%rsi)
  103676:	e9 75 f6 ff ff       	jmpq   102cf0 <_vfprintf_r+0x1610>
  10367b:	41 f7 c7 00 02 00 00 	test   $0x200,%r15d
  103682:	0f 84 26 05 00 00    	je     103bae <_vfprintf_r+0x24ce>
  103688:	83 f8 2f             	cmp    $0x2f,%eax
  10368b:	0f 87 d7 0f 00 00    	ja     104668 <_vfprintf_r+0x2f88>
  103691:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  103698:	89 c2                	mov    %eax,%edx
  10369a:	83 c0 08             	add    $0x8,%eax
  10369d:	89 01                	mov    %eax,(%rcx)
  10369f:	48 03 51 10          	add    0x10(%rcx),%rdx
  1036a3:	48 0f be 32          	movsbq (%rdx),%rsi
  1036a7:	48 89 f0             	mov    %rsi,%rax
  1036aa:	e9 58 e9 ff ff       	jmpq   102007 <_vfprintf_r+0x927>
  1036af:	41 f7 c1 00 02 00 00 	test   $0x200,%r9d
  1036b6:	0f 84 18 05 00 00    	je     103bd4 <_vfprintf_r+0x24f4>
  1036bc:	83 f8 2f             	cmp    $0x2f,%eax
  1036bf:	0f 87 fc 0e 00 00    	ja     1045c1 <_vfprintf_r+0x2ee1>
  1036c5:	48 8b b5 70 fe ff ff 	mov    -0x190(%rbp),%rsi
  1036cc:	89 c2                	mov    %eax,%edx
  1036ce:	83 c0 08             	add    $0x8,%eax
  1036d1:	89 06                	mov    %eax,(%rsi)
  1036d3:	48 03 56 10          	add    0x10(%rsi),%rdx
  1036d7:	0f b6 32             	movzbl (%rdx),%esi
  1036da:	b8 01 00 00 00       	mov    $0x1,%eax
  1036df:	e9 64 f5 ff ff       	jmpq   102c48 <_vfprintf_r+0x1568>
  1036e4:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  1036eb:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  1036ef:	48 8d 42 08          	lea    0x8(%rdx),%rax
  1036f3:	48 89 41 08          	mov    %rax,0x8(%rcx)
  1036f7:	e9 ed f8 ff ff       	jmpq   102fe9 <_vfprintf_r+0x1909>
  1036fc:	41 f7 c7 00 02 00 00 	test   $0x200,%r15d
  103703:	0f 84 54 04 00 00    	je     103b5d <_vfprintf_r+0x247d>
  103709:	83 f8 2f             	cmp    $0x2f,%eax
  10370c:	0f 87 13 0f 00 00    	ja     104625 <_vfprintf_r+0x2f45>
  103712:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  103719:	89 c2                	mov    %eax,%edx
  10371b:	83 c0 08             	add    $0x8,%eax
  10371e:	89 01                	mov    %eax,(%rcx)
  103720:	48 03 51 10          	add    0x10(%rcx),%rdx
  103724:	0f b6 32             	movzbl (%rdx),%esi
  103727:	e9 c0 f8 ff ff       	jmpq   102fec <_vfprintf_r+0x190c>
  10372c:	41 f6 c7 40          	test   $0x40,%r15b
  103730:	0f 85 c5 04 00 00    	jne    103bfb <_vfprintf_r+0x251b>
  103736:	41 81 e7 00 02 00 00 	and    $0x200,%r15d
  10373d:	0f 84 fa 0e 00 00    	je     10463d <_vfprintf_r+0x2f5d>
  103743:	83 f8 2f             	cmp    $0x2f,%eax
  103746:	0f 87 c4 11 00 00    	ja     104910 <_vfprintf_r+0x3230>
  10374c:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  103753:	89 c2                	mov    %eax,%edx
  103755:	83 c0 08             	add    $0x8,%eax
  103758:	89 01                	mov    %eax,(%rcx)
  10375a:	48 03 51 10          	add    0x10(%rcx),%rdx
  10375e:	48 8b 02             	mov    (%rdx),%rax
  103761:	0f b6 8d 88 fe ff ff 	movzbl -0x178(%rbp),%ecx
  103768:	88 08                	mov    %cl,(%rax)
  10376a:	e9 8a e0 ff ff       	jmpq   1017f9 <_vfprintf_r+0x119>
  10376f:	48 8b b5 70 fe ff ff 	mov    -0x190(%rbp),%rsi
  103776:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  10377a:	48 8d 42 08          	lea    0x8(%rdx),%rax
  10377e:	48 89 46 08          	mov    %rax,0x8(%rsi)
  103782:	e9 b9 f4 ff ff       	jmpq   102c40 <_vfprintf_r+0x1560>
  103787:	41 f7 c7 00 02 00 00 	test   $0x200,%r15d
  10378e:	0f 84 a7 03 00 00    	je     103b3b <_vfprintf_r+0x245b>
  103794:	83 f8 2f             	cmp    $0x2f,%eax
  103797:	0f 87 9e 0f 00 00    	ja     10473b <_vfprintf_r+0x305b>
  10379d:	48 8b b5 70 fe ff ff 	mov    -0x190(%rbp),%rsi
  1037a4:	89 c2                	mov    %eax,%edx
  1037a6:	83 c0 08             	add    $0x8,%eax
  1037a9:	89 06                	mov    %eax,(%rsi)
  1037ab:	48 03 56 10          	add    0x10(%rsi),%rdx
  1037af:	0f b6 32             	movzbl (%rdx),%esi
  1037b2:	e9 3c f5 ff ff       	jmpq   102cf3 <_vfprintf_r+0x1613>
  1037b7:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  1037be:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  1037c2:	48 8d 42 08          	lea    0x8(%rdx),%rax
  1037c6:	48 89 41 08          	mov    %rax,0x8(%rcx)
  1037ca:	e9 d6 f6 ff ff       	jmpq   102ea5 <_vfprintf_r+0x17c5>
  1037cf:	83 fb ff             	cmp    $0xffffffff,%ebx
  1037d2:	0f 84 71 04 00 00    	je     103c49 <_vfprintf_r+0x2569>
  1037d8:	85 db                	test   %ebx,%ebx
  1037da:	0f 85 6e 04 00 00    	jne    103c4e <_vfprintf_r+0x256e>
  1037e0:	41 83 fc 47          	cmp    $0x47,%r12d
  1037e4:	0f 85 64 04 00 00    	jne    103c4e <_vfprintf_r+0x256e>
  1037ea:	f2 0f 10 85 48 fe ff 	movsd  -0x1b8(%rbp),%xmm0
  1037f1:	ff 
  1037f2:	44 89 f8             	mov    %r15d,%eax
  1037f5:	80 cc 01             	or     $0x1,%ah
  1037f8:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%rbp)
  1037fe:	66 48 0f 7e c0       	movq   %xmm0,%rax
  103803:	48 c1 e8 20          	shr    $0x20,%rax
  103807:	85 c0                	test   %eax,%eax
  103809:	0f 88 77 0f 00 00    	js     104786 <_vfprintf_r+0x30a6>
  10380f:	c6 85 68 fe ff ff 00 	movb   $0x0,-0x198(%rbp)
  103816:	bb 01 00 00 00       	mov    $0x1,%ebx
  10381b:	ba 01 00 00 00       	mov    $0x1,%edx
  103820:	48 8d 8d a8 fe ff ff 	lea    -0x158(%rbp),%rcx
  103827:	4c 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%r9
  10382e:	be 02 00 00 00       	mov    $0x2,%esi
  103833:	4c 89 f7             	mov    %r14,%rdi
  103836:	4c 8d 85 ac fe ff ff 	lea    -0x154(%rbp),%r8
  10383d:	4c 89 95 60 fe ff ff 	mov    %r10,-0x1a0(%rbp)
  103844:	44 89 9d 78 fe ff ff 	mov    %r11d,-0x188(%rbp)
  10384b:	89 95 80 fe ff ff    	mov    %edx,-0x180(%rbp)
  103851:	f2 0f 11 85 98 fe ff 	movsd  %xmm0,-0x168(%rbp)
  103858:	ff 
  103859:	e8 42 15 00 00       	callq  104da0 <_dtoa_r>
  10385e:	41 83 fc 47          	cmp    $0x47,%r12d
  103862:	f2 0f 10 85 98 fe ff 	movsd  -0x168(%rbp),%xmm0
  103869:	ff 
  10386a:	8b 95 80 fe ff ff    	mov    -0x180(%rbp),%edx
  103870:	44 8b 9d 78 fe ff ff 	mov    -0x188(%rbp),%r11d
  103877:	4c 8b 95 60 fe ff ff 	mov    -0x1a0(%rbp),%r10
  10387e:	48 89 c1             	mov    %rax,%rcx
  103881:	0f 85 da 0a 00 00    	jne    104361 <_vfprintf_r+0x2c81>
  103887:	41 f6 c7 01          	test   $0x1,%r15b
  10388b:	0f 85 d0 0a 00 00    	jne    104361 <_vfprintf_r+0x2c81>
  103891:	48 8b b5 b8 fe ff ff 	mov    -0x148(%rbp),%rsi
  103898:	48 89 f0             	mov    %rsi,%rax
  10389b:	8b b5 a8 fe ff ff    	mov    -0x158(%rbp),%esi
  1038a1:	48 29 c8             	sub    %rcx,%rax
  1038a4:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%rbp)
  1038aa:	89 b5 60 fe ff ff    	mov    %esi,-0x1a0(%rbp)
  1038b0:	41 83 fc 47          	cmp    $0x47,%r12d
  1038b4:	0f 85 d5 04 00 00    	jne    103d8f <_vfprintf_r+0x26af>
  1038ba:	83 fe fd             	cmp    $0xfffffffd,%esi
  1038bd:	7c 08                	jl     1038c7 <_vfprintf_r+0x21e7>
  1038bf:	39 f3                	cmp    %esi,%ebx
  1038c1:	0f 8d 5a 05 00 00    	jge    103e21 <_vfprintf_r+0x2741>
  1038c7:	48 c7 85 78 fe ff ff 	movq   $0x0,-0x188(%rbp)
  1038ce:	00 00 00 00 
  1038d2:	41 83 eb 02          	sub    $0x2,%r11d
  1038d6:	44 89 de             	mov    %r11d,%esi
  1038d9:	8b bd 60 fe ff ff    	mov    -0x1a0(%rbp),%edi
  1038df:	41 8d 53 0f          	lea    0xf(%r11),%edx
  1038e3:	83 e6 df             	and    $0xffffffdf,%esi
  1038e6:	83 fe 41             	cmp    $0x41,%esi
  1038e9:	8d 47 ff             	lea    -0x1(%rdi),%eax
  1038ec:	41 0f 45 d3          	cmovne %r11d,%edx
  1038f0:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%rbp)
  1038f6:	88 95 b1 fe ff ff    	mov    %dl,-0x14f(%rbp)
  1038fc:	ba 2b 00 00 00       	mov    $0x2b,%edx
  103901:	85 c0                	test   %eax,%eax
  103903:	79 0c                	jns    103911 <_vfprintf_r+0x2231>
  103905:	b8 01 00 00 00       	mov    $0x1,%eax
  10390a:	ba 2d 00 00 00       	mov    $0x2d,%edx
  10390f:	29 f8                	sub    %edi,%eax
  103911:	88 95 b2 fe ff ff    	mov    %dl,-0x14e(%rbp)
  103917:	83 f8 09             	cmp    $0x9,%eax
  10391a:	0f 8e 87 0e 00 00    	jle    1047a7 <_vfprintf_r+0x30c7>
  103920:	48 8d 9d bf fe ff ff 	lea    -0x141(%rbp),%rbx
  103927:	49 89 d9             	mov    %rbx,%r9
  10392a:	48 63 d0             	movslq %eax,%rdx
  10392d:	89 c7                	mov    %eax,%edi
  10392f:	4c 89 ce             	mov    %r9,%rsi
  103932:	48 69 d2 67 66 66 66 	imul   $0x66666667,%rdx,%rdx
  103939:	c1 ff 1f             	sar    $0x1f,%edi
  10393c:	4d 8d 49 ff          	lea    -0x1(%r9),%r9
  103940:	48 c1 fa 22          	sar    $0x22,%rdx
  103944:	29 fa                	sub    %edi,%edx
  103946:	89 c7                	mov    %eax,%edi
  103948:	44 8d 04 92          	lea    (%rdx,%rdx,4),%r8d
  10394c:	45 01 c0             	add    %r8d,%r8d
  10394f:	44 29 c7             	sub    %r8d,%edi
  103952:	83 c7 30             	add    $0x30,%edi
  103955:	40 88 7e ff          	mov    %dil,-0x1(%rsi)
  103959:	89 c7                	mov    %eax,%edi
  10395b:	89 d0                	mov    %edx,%eax
  10395d:	83 ff 63             	cmp    $0x63,%edi
  103960:	7f c8                	jg     10392a <_vfprintf_r+0x224a>
  103962:	83 c0 30             	add    $0x30,%eax
  103965:	48 8d 56 fe          	lea    -0x2(%rsi),%rdx
  103969:	41 88 41 ff          	mov    %al,-0x1(%r9)
  10396d:	48 39 d3             	cmp    %rdx,%rbx
  103970:	0f 86 28 10 00 00    	jbe    10499e <_vfprintf_r+0x32be>
  103976:	48 29 f3             	sub    %rsi,%rbx
  103979:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  103980:	48 8d bd b1 fe ff ff 	lea    -0x14f(%rbp),%rdi
  103987:	eb 08                	jmp    103991 <_vfprintf_r+0x22b1>
  103989:	0f b6 04 16          	movzbl (%rsi,%rdx,1),%eax
  10398d:	48 83 c2 01          	add    $0x1,%rdx
  103991:	88 84 15 b4 fe ff ff 	mov    %al,-0x14c(%rbp,%rdx,1)
  103998:	48 39 d3             	cmp    %rdx,%rbx
  10399b:	75 ec                	jne    103989 <_vfprintf_r+0x22a9>
  10399d:	48 8d 85 c1 fe ff ff 	lea    -0x13f(%rbp),%rax
  1039a4:	48 29 f0             	sub    %rsi,%rax
  1039a7:	48 8d 84 05 b3 fe ff 	lea    -0x14d(%rbp,%rax,1),%rax
  1039ae:	ff 
  1039af:	29 f8                	sub    %edi,%eax
  1039b1:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%rbp)
  1039b7:	8b 85 58 fe ff ff    	mov    -0x1a8(%rbp),%eax
  1039bd:	8b b5 14 fe ff ff    	mov    -0x1ec(%rbp),%esi
  1039c3:	01 c6                	add    %eax,%esi
  1039c5:	89 b5 80 fe ff ff    	mov    %esi,-0x180(%rbp)
  1039cb:	83 f8 01             	cmp    $0x1,%eax
  1039ce:	0f 8e a3 0e 00 00    	jle    104877 <_vfprintf_r+0x3197>
  1039d4:	8b bd 40 fe ff ff    	mov    -0x1c0(%rbp),%edi
  1039da:	01 bd 80 fe ff ff    	add    %edi,-0x180(%rbp)
  1039e0:	44 89 f8             	mov    %r15d,%eax
  1039e3:	8b b5 80 fe ff ff    	mov    -0x180(%rbp),%esi
  1039e9:	c7 85 50 fe ff ff 00 	movl   $0x0,-0x1b0(%rbp)
  1039f0:	00 00 00 
  1039f3:	c7 85 5c fe ff ff 00 	movl   $0x0,-0x1a4(%rbp)
  1039fa:	00 00 00 
  1039fd:	80 e4 fb             	and    $0xfb,%ah
  103a00:	c7 85 60 fe ff ff 00 	movl   $0x0,-0x1a0(%rbp)
  103a07:	00 00 00 
  103a0a:	80 cc 01             	or     $0x1,%ah
  103a0d:	85 f6                	test   %esi,%esi
  103a0f:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%rbp)
  103a15:	b8 00 00 00 00       	mov    $0x0,%eax
  103a1a:	0f 49 c6             	cmovns %esi,%eax
  103a1d:	89 85 98 fe ff ff    	mov    %eax,-0x168(%rbp)
  103a23:	80 bd 68 fe ff ff 00 	cmpb   $0x0,-0x198(%rbp)
  103a2a:	0f 84 dc 03 00 00    	je     103e0c <_vfprintf_r+0x272c>
  103a30:	c6 85 a5 fe ff ff 2d 	movb   $0x2d,-0x15b(%rbp)
  103a37:	44 8b bd 18 fe ff ff 	mov    -0x1e8(%rbp),%r15d
  103a3e:	31 db                	xor    %ebx,%ebx
  103a40:	e9 44 e6 ff ff       	jmpq   102089 <_vfprintf_r+0x9a9>
  103a45:	c6 85 a5 fe ff ff 2d 	movb   $0x2d,-0x15b(%rbp)
  103a4c:	b8 2d 00 00 00       	mov    $0x2d,%eax
  103a51:	e9 00 e2 ff ff       	jmpq   101c56 <_vfprintf_r+0x576>
  103a56:	48 89 df             	mov    %rbx,%rdi
  103a59:	48 8b 8d 80 fe ff ff 	mov    -0x180(%rbp),%rcx
  103a60:	44 89 f3             	mov    %r14d,%ebx
  103a63:	49 89 fe             	mov    %rdi,%r14
  103a66:	48 63 db             	movslq %ebx,%rbx
  103a69:	83 c2 01             	add    $0x1,%edx
  103a6c:	49 c7 02 d0 06 11 00 	movq   $0x1106d0,(%r10)
  103a73:	49 83 c2 10          	add    $0x10,%r10
  103a77:	48 01 d8             	add    %rbx,%rax
  103a7a:	49 89 5a f8          	mov    %rbx,-0x8(%r10)
  103a7e:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  103a85:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  103a8b:	83 fa 07             	cmp    $0x7,%edx
  103a8e:	0f 8e 59 ef ff ff    	jle    1029ed <_vfprintf_r+0x130d>
  103a94:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  103a9b:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  103aa2:	4c 89 f7             	mov    %r14,%rdi
  103aa5:	48 89 8d 80 fe ff ff 	mov    %rcx,-0x180(%rbp)
  103aac:	e8 5f 41 00 00       	callq  107c10 <__sprint_r>
  103ab1:	85 c0                	test   %eax,%eax
  103ab3:	0f 85 da e0 ff ff    	jne    101b93 <_vfprintf_r+0x4b3>
  103ab9:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  103ac0:	48 8b 8d 80 fe ff ff 	mov    -0x180(%rbp),%rcx
  103ac7:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  103ace:	e9 1a ef ff ff       	jmpq   1029ed <_vfprintf_r+0x130d>
  103ad3:	4c 63 a5 58 fe ff ff 	movslq -0x1a8(%rbp),%r12
  103ada:	4c 89 e7             	mov    %r12,%rdi
  103add:	49 01 cc             	add    %rcx,%r12
  103ae0:	29 f7                	sub    %esi,%edi
  103ae2:	49 29 dc             	sub    %rbx,%r12
  103ae5:	44 39 e7             	cmp    %r12d,%edi
  103ae8:	89 fa                	mov    %edi,%edx
  103aea:	44 0f 4e e7          	cmovle %edi,%r12d
  103aee:	e9 b5 ef ff ff       	jmpq   102aa8 <_vfprintf_r+0x13c8>
  103af3:	48 8b bd 70 fe ff ff 	mov    -0x190(%rbp),%rdi
  103afa:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  103afe:	48 8d 42 08          	lea    0x8(%rdx),%rax
  103b02:	48 89 47 08          	mov    %rax,0x8(%rdi)
  103b06:	e9 68 f3 ff ff       	jmpq   102e73 <_vfprintf_r+0x1793>
  103b0b:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  103b12:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  103b16:	48 8d 42 08          	lea    0x8(%rdx),%rax
  103b1a:	48 89 41 08          	mov    %rax,0x8(%rcx)
  103b1e:	e9 ed f2 ff ff       	jmpq   102e10 <_vfprintf_r+0x1730>
  103b23:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  103b2a:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  103b2e:	48 8d 42 08          	lea    0x8(%rdx),%rax
  103b32:	48 89 41 08          	mov    %rax,0x8(%rcx)
  103b36:	e9 06 f3 ff ff       	jmpq   102e41 <_vfprintf_r+0x1761>
  103b3b:	83 f8 2f             	cmp    $0x2f,%eax
  103b3e:	0f 87 af 0a 00 00    	ja     1045f3 <_vfprintf_r+0x2f13>
  103b44:	48 8b bd 70 fe ff ff 	mov    -0x190(%rbp),%rdi
  103b4b:	89 c2                	mov    %eax,%edx
  103b4d:	83 c0 08             	add    $0x8,%eax
  103b50:	48 03 57 10          	add    0x10(%rdi),%rdx
  103b54:	89 07                	mov    %eax,(%rdi)
  103b56:	8b 32                	mov    (%rdx),%esi
  103b58:	e9 96 f1 ff ff       	jmpq   102cf3 <_vfprintf_r+0x1613>
  103b5d:	83 f8 2f             	cmp    $0x2f,%eax
  103b60:	0f 87 73 0a 00 00    	ja     1045d9 <_vfprintf_r+0x2ef9>
  103b66:	48 8b bd 70 fe ff ff 	mov    -0x190(%rbp),%rdi
  103b6d:	89 c2                	mov    %eax,%edx
  103b6f:	83 c0 08             	add    $0x8,%eax
  103b72:	48 03 57 10          	add    0x10(%rdi),%rdx
  103b76:	89 07                	mov    %eax,(%rdi)
  103b78:	8b 32                	mov    (%rdx),%esi
  103b7a:	e9 6d f4 ff ff       	jmpq   102fec <_vfprintf_r+0x190c>
  103b7f:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  103b86:	89 c2                	mov    %eax,%edx
  103b88:	83 c0 08             	add    $0x8,%eax
  103b8b:	89 01                	mov    %eax,(%rcx)
  103b8d:	48 03 51 10          	add    0x10(%rcx),%rdx
  103b91:	e9 aa e5 ff ff       	jmpq   102140 <_vfprintf_r+0xa60>
  103b96:	48 8b bd 70 fe ff ff 	mov    -0x190(%rbp),%rdi
  103b9d:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  103ba1:	48 8d 42 08          	lea    0x8(%rdx),%rax
  103ba5:	48 89 47 08          	mov    %rax,0x8(%rdi)
  103ba9:	e9 80 f6 ff ff       	jmpq   10322e <_vfprintf_r+0x1b4e>
  103bae:	83 f8 2f             	cmp    $0x2f,%eax
  103bb1:	0f 87 6c 0b 00 00    	ja     104723 <_vfprintf_r+0x3043>
  103bb7:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  103bbe:	89 c2                	mov    %eax,%edx
  103bc0:	83 c0 08             	add    $0x8,%eax
  103bc3:	89 01                	mov    %eax,(%rcx)
  103bc5:	48 03 51 10          	add    0x10(%rcx),%rdx
  103bc9:	48 63 32             	movslq (%rdx),%rsi
  103bcc:	48 89 f0             	mov    %rsi,%rax
  103bcf:	e9 33 e4 ff ff       	jmpq   102007 <_vfprintf_r+0x927>
  103bd4:	83 f8 2f             	cmp    $0x2f,%eax
  103bd7:	0f 87 30 0a 00 00    	ja     10460d <_vfprintf_r+0x2f2d>
  103bdd:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  103be4:	89 c2                	mov    %eax,%edx
  103be6:	83 c0 08             	add    $0x8,%eax
  103be9:	89 01                	mov    %eax,(%rcx)
  103beb:	48 03 51 10          	add    0x10(%rcx),%rdx
  103bef:	8b 32                	mov    (%rdx),%esi
  103bf1:	b8 01 00 00 00       	mov    $0x1,%eax
  103bf6:	e9 4d f0 ff ff       	jmpq   102c48 <_vfprintf_r+0x1568>
  103bfb:	83 f8 2f             	cmp    $0x2f,%eax
  103bfe:	0f 87 4f 0b 00 00    	ja     104753 <_vfprintf_r+0x3073>
  103c04:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  103c0b:	89 c2                	mov    %eax,%edx
  103c0d:	83 c0 08             	add    $0x8,%eax
  103c10:	89 01                	mov    %eax,(%rcx)
  103c12:	48 03 51 10          	add    0x10(%rcx),%rdx
  103c16:	48 8b 02             	mov    (%rdx),%rax
  103c19:	0f b7 8d 88 fe ff ff 	movzwl -0x178(%rbp),%ecx
  103c20:	66 89 08             	mov    %cx,(%rax)
  103c23:	e9 d1 db ff ff       	jmpq   1017f9 <_vfprintf_r+0x119>
  103c28:	48 8b b9 a0 00 00 00 	mov    0xa0(%rcx),%rdi
  103c2f:	e8 d3 90 00 00       	callq  10cd07 <__retarget_lock_release_recursive>
  103c34:	e9 f8 de ff ff       	jmpq   101b31 <_vfprintf_r+0x451>
  103c39:	c6 85 68 fe ff ff 00 	movb   $0x0,-0x198(%rbp)
  103c40:	66 0f 28 c2          	movapd %xmm2,%xmm0
  103c44:	e9 75 f6 ff ff       	jmpq   1032be <_vfprintf_r+0x1bde>
  103c49:	bb 06 00 00 00       	mov    $0x6,%ebx
  103c4e:	f2 0f 10 85 48 fe ff 	movsd  -0x1b8(%rbp),%xmm0
  103c55:	ff 
  103c56:	44 89 f8             	mov    %r15d,%eax
  103c59:	80 cc 01             	or     $0x1,%ah
  103c5c:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%rbp)
  103c62:	66 48 0f 7e c0       	movq   %xmm0,%rax
  103c67:	48 c1 e8 20          	shr    $0x20,%rax
  103c6b:	85 c0                	test   %eax,%eax
  103c6d:	0f 88 18 0b 00 00    	js     10478b <_vfprintf_r+0x30ab>
  103c73:	c6 85 68 fe ff ff 00 	movb   $0x0,-0x198(%rbp)
  103c7a:	41 83 fc 46          	cmp    $0x46,%r12d
  103c7e:	0f 85 73 06 00 00    	jne    1042f7 <_vfprintf_r+0x2c17>
  103c84:	48 8d 8d a8 fe ff ff 	lea    -0x158(%rbp),%rcx
  103c8b:	89 da                	mov    %ebx,%edx
  103c8d:	4c 89 f7             	mov    %r14,%rdi
  103c90:	be 03 00 00 00       	mov    $0x3,%esi
  103c95:	4c 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%r9
  103c9c:	4c 8d 85 ac fe ff ff 	lea    -0x154(%rbp),%r8
  103ca3:	4c 89 95 78 fe ff ff 	mov    %r10,-0x188(%rbp)
  103caa:	44 89 9d 80 fe ff ff 	mov    %r11d,-0x180(%rbp)
  103cb1:	f2 0f 11 85 98 fe ff 	movsd  %xmm0,-0x168(%rbp)
  103cb8:	ff 
  103cb9:	e8 e2 10 00 00       	callq  104da0 <_dtoa_r>
  103cbe:	f2 0f 10 85 98 fe ff 	movsd  -0x168(%rbp),%xmm0
  103cc5:	ff 
  103cc6:	44 8b 9d 80 fe ff ff 	mov    -0x180(%rbp),%r11d
  103ccd:	48 63 d3             	movslq %ebx,%rdx
  103cd0:	80 38 30             	cmpb   $0x30,(%rax)
  103cd3:	4c 8b 95 78 fe ff ff 	mov    -0x188(%rbp),%r10
  103cda:	48 89 c1             	mov    %rax,%rcx
  103cdd:	75 1b                	jne    103cfa <_vfprintf_r+0x261a>
  103cdf:	66 0f ef ff          	pxor   %xmm7,%xmm7
  103ce3:	be 01 00 00 00       	mov    $0x1,%esi
  103ce8:	66 0f 2e c7          	ucomisd %xmm7,%xmm0
  103cec:	0f 9a c0             	setp   %al
  103cef:	0f 45 c6             	cmovne %esi,%eax
  103cf2:	84 c0                	test   %al,%al
  103cf4:	0f 85 04 0c 00 00    	jne    1048fe <_vfprintf_r+0x321e>
  103cfa:	8b 85 a8 fe ff ff    	mov    -0x158(%rbp),%eax
  103d00:	48 98                	cltq   
  103d02:	48 01 d0             	add    %rdx,%rax
  103d05:	48 01 c8             	add    %rcx,%rax
  103d08:	66 0f ef f6          	pxor   %xmm6,%xmm6
  103d0c:	66 0f 2e c6          	ucomisd %xmm6,%xmm0
  103d10:	7a 4c                	jp     103d5e <_vfprintf_r+0x267e>
  103d12:	75 4a                	jne    103d5e <_vfprintf_r+0x267e>
  103d14:	48 89 c6             	mov    %rax,%rsi
  103d17:	e9 7c fb ff ff       	jmpq   103898 <_vfprintf_r+0x21b8>
  103d1c:	8d 73 01             	lea    0x1(%rbx),%esi
  103d1f:	4c 89 f7             	mov    %r14,%rdi
  103d22:	4c 89 95 80 fe ff ff 	mov    %r10,-0x180(%rbp)
  103d29:	48 63 f6             	movslq %esi,%rsi
  103d2c:	44 89 9d 98 fe ff ff 	mov    %r11d,-0x168(%rbp)
  103d33:	e8 28 ce ff ff       	callq  100b60 <_malloc_r>
  103d38:	44 8b 9d 98 fe ff ff 	mov    -0x168(%rbp),%r11d
  103d3f:	4c 8b 95 80 fe ff ff 	mov    -0x180(%rbp),%r10
  103d46:	48 85 c0             	test   %rax,%rax
  103d49:	48 89 c1             	mov    %rax,%rcx
  103d4c:	0f 84 1d 0c 00 00    	je     10496f <_vfprintf_r+0x328f>
  103d52:	48 89 85 78 fe ff ff 	mov    %rax,-0x188(%rbp)
  103d59:	e9 34 f5 ff ff       	jmpq   103292 <_vfprintf_r+0x1bb2>
  103d5e:	48 8b b5 b8 fe ff ff 	mov    -0x148(%rbp),%rsi
  103d65:	48 39 c6             	cmp    %rax,%rsi
  103d68:	0f 83 2a fb ff ff    	jae    103898 <_vfprintf_r+0x21b8>
  103d6e:	66 90                	xchg   %ax,%ax
  103d70:	48 8d 56 01          	lea    0x1(%rsi),%rdx
  103d74:	48 89 95 b8 fe ff ff 	mov    %rdx,-0x148(%rbp)
  103d7b:	c6 06 30             	movb   $0x30,(%rsi)
  103d7e:	48 8b b5 b8 fe ff ff 	mov    -0x148(%rbp),%rsi
  103d85:	48 39 f0             	cmp    %rsi,%rax
  103d88:	77 e6                	ja     103d70 <_vfprintf_r+0x2690>
  103d8a:	e9 09 fb ff ff       	jmpq   103898 <_vfprintf_r+0x21b8>
  103d8f:	41 83 fc 46          	cmp    $0x46,%r12d
  103d93:	0f 85 14 0c 00 00    	jne    1049ad <_vfprintf_r+0x32cd>
  103d99:	44 89 f8             	mov    %r15d,%eax
  103d9c:	8b b5 60 fe ff ff    	mov    -0x1a0(%rbp),%esi
  103da2:	83 e0 01             	and    $0x1,%eax
  103da5:	09 d8                	or     %ebx,%eax
  103da7:	85 f6                	test   %esi,%esi
  103da9:	0f 8e e8 0a 00 00    	jle    104897 <_vfprintf_r+0x31b7>
  103daf:	85 c0                	test   %eax,%eax
  103db1:	0f 85 b4 09 00 00    	jne    10476b <_vfprintf_r+0x308b>
  103db7:	8b 85 60 fe ff ff    	mov    -0x1a0(%rbp),%eax
  103dbd:	41 bb 66 00 00 00    	mov    $0x66,%r11d
  103dc3:	89 85 80 fe ff ff    	mov    %eax,-0x180(%rbp)
  103dc9:	44 89 f8             	mov    %r15d,%eax
  103dcc:	25 00 04 00 00       	and    $0x400,%eax
  103dd1:	0f 85 af 08 00 00    	jne    104686 <_vfprintf_r+0x2fa6>
  103dd7:	8b b5 80 fe ff ff    	mov    -0x180(%rbp),%esi
  103ddd:	85 f6                	test   %esi,%esi
  103ddf:	0f 49 c6             	cmovns %esi,%eax
  103de2:	89 85 98 fe ff ff    	mov    %eax,-0x168(%rbp)
  103de8:	48 c7 85 78 fe ff ff 	movq   $0x0,-0x188(%rbp)
  103def:	00 00 00 00 
  103df3:	c7 85 50 fe ff ff 00 	movl   $0x0,-0x1b0(%rbp)
  103dfa:	00 00 00 
  103dfd:	c7 85 5c fe ff ff 00 	movl   $0x0,-0x1a4(%rbp)
  103e04:	00 00 00 
  103e07:	e9 17 fc ff ff       	jmpq   103a23 <_vfprintf_r+0x2343>
  103e0c:	0f b6 85 a5 fe ff ff 	movzbl -0x15b(%rbp),%eax
  103e13:	44 8b bd 18 fe ff ff 	mov    -0x1e8(%rbp),%r15d
  103e1a:	31 db                	xor    %ebx,%ebx
  103e1c:	e9 60 e2 ff ff       	jmpq   102081 <_vfprintf_r+0x9a1>
  103e21:	8b b5 60 fe ff ff    	mov    -0x1a0(%rbp),%esi
  103e27:	39 f0                	cmp    %esi,%eax
  103e29:	0f 8f a2 05 00 00    	jg     1043d1 <_vfprintf_r+0x2cf1>
  103e2f:	8b 9d 40 fe ff ff    	mov    -0x1c0(%rbp),%ebx
  103e35:	44 89 f8             	mov    %r15d,%eax
  103e38:	01 f3                	add    %esi,%ebx
  103e3a:	41 f6 c7 01          	test   $0x1,%r15b
  103e3e:	0f 44 de             	cmove  %esi,%ebx
  103e41:	89 9d 80 fe ff ff    	mov    %ebx,-0x180(%rbp)
  103e47:	25 00 04 00 00       	and    $0x400,%eax
  103e4c:	0f 84 ba 09 00 00    	je     10480c <_vfprintf_r+0x312c>
  103e52:	44 8b 8d 60 fe ff ff 	mov    -0x1a0(%rbp),%r9d
  103e59:	45 85 c9             	test   %r9d,%r9d
  103e5c:	0f 8f 1e 08 00 00    	jg     104680 <_vfprintf_r+0x2fa0>
  103e62:	8b bd 80 fe ff ff    	mov    -0x180(%rbp),%edi
  103e68:	b8 00 00 00 00       	mov    $0x0,%eax
  103e6d:	41 bb 67 00 00 00    	mov    $0x67,%r11d
  103e73:	85 ff                	test   %edi,%edi
  103e75:	0f 49 c7             	cmovns %edi,%eax
  103e78:	89 85 98 fe ff ff    	mov    %eax,-0x168(%rbp)
  103e7e:	e9 65 ff ff ff       	jmpq   103de8 <_vfprintf_r+0x2708>
  103e83:	8b bd 5c fe ff ff    	mov    -0x1a4(%rbp),%edi
  103e89:	85 ff                	test   %edi,%edi
  103e8b:	7f 0e                	jg     103e9b <_vfprintf_r+0x27bb>
  103e8d:	8b b5 50 fe ff ff    	mov    -0x1b0(%rbp),%esi
  103e93:	85 f6                	test   %esi,%esi
  103e95:	0f 8e ec 0a 00 00    	jle    104987 <_vfprintf_r+0x32a7>
  103e9b:	4c 63 a5 58 fe ff ff 	movslq -0x1a8(%rbp),%r12
  103ea2:	44 89 bd 18 fe ff ff 	mov    %r15d,-0x1e8(%rbp)
  103ea9:	4d 89 f7             	mov    %r14,%r15
  103eac:	48 89 8d 60 fe ff ff 	mov    %rcx,-0x1a0(%rbp)
  103eb3:	44 8b b5 50 fe ff ff 	mov    -0x1b0(%rbp),%r14d
  103eba:	4a 8d 3c 21          	lea    (%rcx,%r12,1),%rdi
  103ebe:	4c 89 ad 50 fe ff ff 	mov    %r13,-0x1b0(%rbp)
  103ec5:	4c 8b a5 90 fe ff ff 	mov    -0x170(%rbp),%r12
  103ecc:	48 89 bd 68 fe ff ff 	mov    %rdi,-0x198(%rbp)
  103ed3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  103ed8:	45 85 f6             	test   %r14d,%r14d
  103edb:	0f 84 07 01 00 00    	je     103fe8 <_vfprintf_r+0x2908>
  103ee1:	41 83 ee 01          	sub    $0x1,%r14d
  103ee5:	48 8b bd 08 fe ff ff 	mov    -0x1f8(%rbp),%rdi
  103eec:	48 8b b5 28 fe ff ff 	mov    -0x1d8(%rbp),%rsi
  103ef3:	49 83 c2 10          	add    $0x10,%r10
  103ef7:	49 89 7a f0          	mov    %rdi,-0x10(%r10)
  103efb:	8b bd c8 fe ff ff    	mov    -0x138(%rbp),%edi
  103f01:	48 01 f0             	add    %rsi,%rax
  103f04:	49 89 72 f8          	mov    %rsi,-0x8(%r10)
  103f08:	8d 57 01             	lea    0x1(%rdi),%edx
  103f0b:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  103f12:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  103f18:	83 fa 07             	cmp    $0x7,%edx
  103f1b:	0f 8f 9c 01 00 00    	jg     1040bd <_vfprintf_r+0x29dd>
  103f21:	48 8b 8d 68 fe ff ff 	mov    -0x198(%rbp),%rcx
  103f28:	48 8b b5 38 fe ff ff 	mov    -0x1c8(%rbp),%rsi
  103f2f:	48 89 8d 80 fe ff ff 	mov    %rcx,-0x180(%rbp)
  103f36:	48 29 d9             	sub    %rbx,%rcx
  103f39:	49 89 c8             	mov    %rcx,%r8
  103f3c:	48 0f be 0e          	movsbq (%rsi),%rcx
  103f40:	45 89 c5             	mov    %r8d,%r13d
  103f43:	44 39 c1             	cmp    %r8d,%ecx
  103f46:	48 89 ca             	mov    %rcx,%rdx
  103f49:	44 0f 4e e9          	cmovle %ecx,%r13d
  103f4d:	45 85 ed             	test   %r13d,%r13d
  103f50:	7e 37                	jle    103f89 <_vfprintf_r+0x28a9>
  103f52:	8b 8d c8 fe ff ff    	mov    -0x138(%rbp),%ecx
  103f58:	49 63 d5             	movslq %r13d,%rdx
  103f5b:	49 89 1a             	mov    %rbx,(%r10)
  103f5e:	48 01 d0             	add    %rdx,%rax
  103f61:	49 89 52 08          	mov    %rdx,0x8(%r10)
  103f65:	8d 51 01             	lea    0x1(%rcx),%edx
  103f68:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  103f6f:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  103f75:	83 fa 07             	cmp    $0x7,%edx
  103f78:	0f 8f 6c 01 00 00    	jg     1040ea <_vfprintf_r+0x2a0a>
  103f7e:	48 0f be 0e          	movsbq (%rsi),%rcx
  103f82:	49 83 c2 10          	add    $0x10,%r10
  103f86:	48 89 ca             	mov    %rcx,%rdx
  103f89:	45 85 ed             	test   %r13d,%r13d
  103f8c:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  103f92:	45 0f 49 c5          	cmovns %r13d,%r8d
  103f96:	44 29 c1             	sub    %r8d,%ecx
  103f99:	41 89 cd             	mov    %ecx,%r13d
  103f9c:	85 c9                	test   %ecx,%ecx
  103f9e:	7f 5c                	jg     103ffc <_vfprintf_r+0x291c>
  103fa0:	48 01 d3             	add    %rdx,%rbx
  103fa3:	8b 95 5c fe ff ff    	mov    -0x1a4(%rbp),%edx
  103fa9:	85 d2                	test   %edx,%edx
  103fab:	0f 8f 27 ff ff ff    	jg     103ed8 <_vfprintf_r+0x27f8>
  103fb1:	45 85 f6             	test   %r14d,%r14d
  103fb4:	0f 8f 1e ff ff ff    	jg     103ed8 <_vfprintf_r+0x27f8>
  103fba:	4d 89 fe             	mov    %r15,%r14
  103fbd:	48 8b 8d 60 fe ff ff 	mov    -0x1a0(%rbp),%rcx
  103fc4:	44 8b bd 18 fe ff ff 	mov    -0x1e8(%rbp),%r15d
  103fcb:	4c 8b ad 50 fe ff ff 	mov    -0x1b0(%rbp),%r13
  103fd2:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  103fd9:	48 39 f3             	cmp    %rsi,%rbx
  103fdc:	48 0f 47 de          	cmova  %rsi,%rbx
  103fe0:	e9 1f ea ff ff       	jmpq   102a04 <_vfprintf_r+0x1324>
  103fe5:	0f 1f 00             	nopl   (%rax)
  103fe8:	48 83 ad 38 fe ff ff 	subq   $0x1,-0x1c8(%rbp)
  103fef:	01 
  103ff0:	83 ad 5c fe ff ff 01 	subl   $0x1,-0x1a4(%rbp)
  103ff7:	e9 e9 fe ff ff       	jmpq   103ee5 <_vfprintf_r+0x2805>
  103ffc:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  104002:	83 f9 10             	cmp    $0x10,%ecx
  104005:	7f 13                	jg     10401a <_vfprintf_r+0x293a>
  104007:	eb 76                	jmp    10407f <_vfprintf_r+0x299f>
  104009:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  104010:	41 83 ed 10          	sub    $0x10,%r13d
  104014:	41 83 fd 10          	cmp    $0x10,%r13d
  104018:	7e 65                	jle    10407f <_vfprintf_r+0x299f>
  10401a:	48 83 c0 10          	add    $0x10,%rax
  10401e:	83 c2 01             	add    $0x1,%edx
  104021:	49 83 c2 10          	add    $0x10,%r10
  104025:	49 c7 42 f0 d0 06 11 	movq   $0x1106d0,-0x10(%r10)
  10402c:	00 
  10402d:	49 c7 42 f8 10 00 00 	movq   $0x10,-0x8(%r10)
  104034:	00 
  104035:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  10403c:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  104042:	83 fa 07             	cmp    $0x7,%edx
  104045:	7e c9                	jle    104010 <_vfprintf_r+0x2930>
  104047:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  10404e:	4c 89 e6             	mov    %r12,%rsi
  104051:	4c 89 ff             	mov    %r15,%rdi
  104054:	e8 b7 3b 00 00       	callq  107c10 <__sprint_r>
  104059:	85 c0                	test   %eax,%eax
  10405b:	0f 85 48 01 00 00    	jne    1041a9 <_vfprintf_r+0x2ac9>
  104061:	41 83 ed 10          	sub    $0x10,%r13d
  104065:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  10406c:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  104072:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  104079:	41 83 fd 10          	cmp    $0x10,%r13d
  10407d:	7f 9b                	jg     10401a <_vfprintf_r+0x293a>
  10407f:	49 63 cd             	movslq %r13d,%rcx
  104082:	83 c2 01             	add    $0x1,%edx
  104085:	49 c7 02 d0 06 11 00 	movq   $0x1106d0,(%r10)
  10408c:	48 01 c8             	add    %rcx,%rax
  10408f:	49 89 4a 08          	mov    %rcx,0x8(%r10)
  104093:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  10409a:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  1040a0:	83 fa 07             	cmp    $0x7,%edx
  1040a3:	0f 8f 53 01 00 00    	jg     1041fc <_vfprintf_r+0x2b1c>
  1040a9:	48 8b 8d 38 fe ff ff 	mov    -0x1c8(%rbp),%rcx
  1040b0:	49 83 c2 10          	add    $0x10,%r10
  1040b4:	48 0f be 11          	movsbq (%rcx),%rdx
  1040b8:	e9 e3 fe ff ff       	jmpq   103fa0 <_vfprintf_r+0x28c0>
  1040bd:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  1040c4:	4c 89 e6             	mov    %r12,%rsi
  1040c7:	4c 89 ff             	mov    %r15,%rdi
  1040ca:	e8 41 3b 00 00       	callq  107c10 <__sprint_r>
  1040cf:	85 c0                	test   %eax,%eax
  1040d1:	0f 85 d2 00 00 00    	jne    1041a9 <_vfprintf_r+0x2ac9>
  1040d7:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  1040de:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  1040e5:	e9 37 fe ff ff       	jmpq   103f21 <_vfprintf_r+0x2841>
  1040ea:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  1040f1:	4c 89 e6             	mov    %r12,%rsi
  1040f4:	4c 89 ff             	mov    %r15,%rdi
  1040f7:	e8 14 3b 00 00       	callq  107c10 <__sprint_r>
  1040fc:	85 c0                	test   %eax,%eax
  1040fe:	0f 85 a5 00 00 00    	jne    1041a9 <_vfprintf_r+0x2ac9>
  104104:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  10410b:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  104112:	48 0f be 08          	movsbq (%rax),%rcx
  104116:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  10411d:	48 89 ca             	mov    %rcx,%rdx
  104120:	e9 64 fe ff ff       	jmpq   103f89 <_vfprintf_r+0x28a9>
  104125:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  10412c:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  104133:	4c 89 f7             	mov    %r14,%rdi
  104136:	48 89 8d 80 fe ff ff 	mov    %rcx,-0x180(%rbp)
  10413d:	e8 ce 3a 00 00       	callq  107c10 <__sprint_r>
  104142:	85 c0                	test   %eax,%eax
  104144:	0f 85 49 da ff ff    	jne    101b93 <_vfprintf_r+0x4b3>
  10414a:	8b b5 a8 fe ff ff    	mov    -0x158(%rbp),%esi
  104150:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  104157:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  10415e:	48 8b 8d 80 fe ff ff 	mov    -0x180(%rbp),%rcx
  104165:	e9 00 ec ff ff       	jmpq   102d6a <_vfprintf_r+0x168a>
  10416a:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  104171:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  104178:	4c 89 f7             	mov    %r14,%rdi
  10417b:	48 89 8d 80 fe ff ff 	mov    %rcx,-0x180(%rbp)
  104182:	e8 89 3a 00 00       	callq  107c10 <__sprint_r>
  104187:	85 c0                	test   %eax,%eax
  104189:	0f 85 04 da ff ff    	jne    101b93 <_vfprintf_r+0x4b3>
  10418f:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  104196:	48 8b 8d 80 fe ff ff 	mov    -0x180(%rbp),%rcx
  10419d:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  1041a4:	e9 2a e8 ff ff       	jmpq   1029d3 <_vfprintf_r+0x12f3>
  1041a9:	4d 89 fe             	mov    %r15,%r14
  1041ac:	e9 e2 d9 ff ff       	jmpq   101b93 <_vfprintf_r+0x4b3>
  1041b1:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  1041b8:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  1041bf:	4c 89 f7             	mov    %r14,%rdi
  1041c2:	48 89 8d 80 fe ff ff 	mov    %rcx,-0x180(%rbp)
  1041c9:	e8 42 3a 00 00       	callq  107c10 <__sprint_r>
  1041ce:	85 c0                	test   %eax,%eax
  1041d0:	0f 85 bd d9 ff ff    	jne    101b93 <_vfprintf_r+0x4b3>
  1041d6:	8b b5 a8 fe ff ff    	mov    -0x158(%rbp),%esi
  1041dc:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  1041e3:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  1041ea:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  1041f0:	48 8b 8d 80 fe ff ff 	mov    -0x180(%rbp),%rcx
  1041f7:	e9 b8 eb ff ff       	jmpq   102db4 <_vfprintf_r+0x16d4>
  1041fc:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  104203:	4c 89 e6             	mov    %r12,%rsi
  104206:	4c 89 ff             	mov    %r15,%rdi
  104209:	e8 02 3a 00 00       	callq  107c10 <__sprint_r>
  10420e:	85 c0                	test   %eax,%eax
  104210:	75 97                	jne    1041a9 <_vfprintf_r+0x2ac9>
  104212:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  104219:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  104220:	48 0f be 10          	movsbq (%rax),%rdx
  104224:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  10422b:	e9 70 fd ff ff       	jmpq   103fa0 <_vfprintf_r+0x28c0>
  104230:	41 f6 c7 01          	test   $0x1,%r15b
  104234:	0f 84 2d d8 ff ff    	je     101a67 <_vfprintf_r+0x387>
  10423a:	48 8b bd 30 fe ff ff 	mov    -0x1d0(%rbp),%rdi
  104241:	49 89 3a             	mov    %rdi,(%r10)
  104244:	48 8b bd 40 fe ff ff 	mov    -0x1c0(%rbp),%rdi
  10424b:	48 01 f8             	add    %rdi,%rax
  10424e:	49 89 7a 08          	mov    %rdi,0x8(%r10)
  104252:	8b bd c8 fe ff ff    	mov    -0x138(%rbp),%edi
  104258:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  10425f:	8d 57 01             	lea    0x1(%rdi),%edx
  104262:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  104268:	83 fa 07             	cmp    $0x7,%edx
  10426b:	0f 8f 40 ff ff ff    	jg     1041b1 <_vfprintf_r+0x2ad1>
  104271:	49 83 c2 10          	add    $0x10,%r10
  104275:	e9 42 eb ff ff       	jmpq   102dbc <_vfprintf_r+0x16dc>
  10427a:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  104281:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  104288:	4c 89 f7             	mov    %r14,%rdi
  10428b:	48 89 8d 80 fe ff ff 	mov    %rcx,-0x180(%rbp)
  104292:	e8 79 39 00 00       	callq  107c10 <__sprint_r>
  104297:	85 c0                	test   %eax,%eax
  104299:	0f 85 f4 d8 ff ff    	jne    101b93 <_vfprintf_r+0x4b3>
  10429f:	8b b5 a8 fe ff ff    	mov    -0x158(%rbp),%esi
  1042a5:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  1042ac:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  1042b3:	48 8b 8d 80 fe ff ff 	mov    -0x180(%rbp),%rcx
  1042ba:	e9 99 e7 ff ff       	jmpq   102a58 <_vfprintf_r+0x1378>
  1042bf:	89 9d 98 fe ff ff    	mov    %ebx,-0x168(%rbp)
  1042c5:	0f b6 85 a5 fe ff ff 	movzbl -0x15b(%rbp),%eax
  1042cc:	89 9d 80 fe ff ff    	mov    %ebx,-0x180(%rbp)
  1042d2:	31 db                	xor    %ebx,%ebx
  1042d4:	c7 85 50 fe ff ff 00 	movl   $0x0,-0x1b0(%rbp)
  1042db:	00 00 00 
  1042de:	c7 85 5c fe ff ff 00 	movl   $0x0,-0x1a4(%rbp)
  1042e5:	00 00 00 
  1042e8:	c7 85 60 fe ff ff 00 	movl   $0x0,-0x1a0(%rbp)
  1042ef:	00 00 00 
  1042f2:	e9 8a dd ff ff       	jmpq   102081 <_vfprintf_r+0x9a1>
  1042f7:	41 83 fc 45          	cmp    $0x45,%r12d
  1042fb:	0f 85 7f 06 00 00    	jne    104980 <_vfprintf_r+0x32a0>
  104301:	8d 53 01             	lea    0x1(%rbx),%edx
  104304:	be 02 00 00 00       	mov    $0x2,%esi
  104309:	4c 89 f7             	mov    %r14,%rdi
  10430c:	4c 89 95 60 fe ff ff 	mov    %r10,-0x1a0(%rbp)
  104313:	48 8d 8d a8 fe ff ff 	lea    -0x158(%rbp),%rcx
  10431a:	4c 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%r9
  104321:	44 89 9d 78 fe ff ff 	mov    %r11d,-0x188(%rbp)
  104328:	4c 8d 85 ac fe ff ff 	lea    -0x154(%rbp),%r8
  10432f:	89 95 80 fe ff ff    	mov    %edx,-0x180(%rbp)
  104335:	f2 0f 11 85 98 fe ff 	movsd  %xmm0,-0x168(%rbp)
  10433c:	ff 
  10433d:	e8 5e 0a 00 00       	callq  104da0 <_dtoa_r>
  104342:	f2 0f 10 85 98 fe ff 	movsd  -0x168(%rbp),%xmm0
  104349:	ff 
  10434a:	8b 95 80 fe ff ff    	mov    -0x180(%rbp),%edx
  104350:	44 8b 9d 78 fe ff ff 	mov    -0x188(%rbp),%r11d
  104357:	4c 8b 95 60 fe ff ff 	mov    -0x1a0(%rbp),%r10
  10435e:	48 89 c1             	mov    %rax,%rcx
  104361:	48 63 c2             	movslq %edx,%rax
  104364:	48 01 c8             	add    %rcx,%rax
  104367:	e9 9c f9 ff ff       	jmpq   103d08 <_vfprintf_r+0x2628>
  10436c:	48 8b 95 28 fe ff ff 	mov    -0x1d8(%rbp),%rdx
  104373:	48 8b b5 08 fe ff ff 	mov    -0x1f8(%rbp),%rsi
  10437a:	44 89 85 5c fe ff ff 	mov    %r8d,-0x1a4(%rbp)
  104381:	4c 89 95 60 fe ff ff 	mov    %r10,-0x1a0(%rbp)
  104388:	48 29 d1             	sub    %rdx,%rcx
  10438b:	4c 89 8d 68 fe ff ff 	mov    %r9,-0x198(%rbp)
  104392:	48 89 cf             	mov    %rcx,%rdi
  104395:	48 89 8d 78 fe ff ff 	mov    %rcx,-0x188(%rbp)
  10439c:	e8 3f d2 ff ff       	callq  1015e0 <strncpy>
  1043a1:	4c 8b 8d 68 fe ff ff 	mov    -0x198(%rbp),%r9
  1043a8:	4c 89 e2             	mov    %r12,%rdx
  1043ab:	48 8b 8d 78 fe ff ff 	mov    -0x188(%rbp),%rcx
  1043b2:	4c 8b 95 60 fe ff ff 	mov    -0x1a0(%rbp),%r10
  1043b9:	44 8b 85 5c fe ff ff 	mov    -0x1a4(%rbp),%r8d
  1043c0:	41 80 79 01 01       	cmpb   $0x1,0x1(%r9)
  1043c5:	49 83 d9 ff          	sbb    $0xffffffffffffffff,%r9
  1043c9:	45 31 db             	xor    %r11d,%r11d
  1043cc:	e9 96 f0 ff ff       	jmpq   103467 <_vfprintf_r+0x1d87>
  1043d1:	8b bd 60 fe ff ff    	mov    -0x1a0(%rbp),%edi
  1043d7:	03 85 40 fe ff ff    	add    -0x1c0(%rbp),%eax
  1043dd:	41 bb 67 00 00 00    	mov    $0x67,%r11d
  1043e3:	89 85 80 fe ff ff    	mov    %eax,-0x180(%rbp)
  1043e9:	85 ff                	test   %edi,%edi
  1043eb:	0f 8f d8 f9 ff ff    	jg     103dc9 <_vfprintf_r+0x26e9>
  1043f1:	29 f8                	sub    %edi,%eax
  1043f3:	89 c6                	mov    %eax,%esi
  1043f5:	b8 00 00 00 00       	mov    $0x0,%eax
  1043fa:	83 c6 01             	add    $0x1,%esi
  1043fd:	0f 49 c6             	cmovns %esi,%eax
  104400:	89 b5 80 fe ff ff    	mov    %esi,-0x180(%rbp)
  104406:	89 85 98 fe ff ff    	mov    %eax,-0x168(%rbp)
  10440c:	e9 d7 f9 ff ff       	jmpq   103de8 <_vfprintf_r+0x2708>
  104411:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  104418:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  10441f:	4c 89 f7             	mov    %r14,%rdi
  104422:	e8 e9 37 00 00       	callq  107c10 <__sprint_r>
  104427:	85 c0                	test   %eax,%eax
  104429:	0f 85 64 d7 ff ff    	jne    101b93 <_vfprintf_r+0x4b3>
  10442f:	8b 95 58 fe ff ff    	mov    -0x1a8(%rbp),%edx
  104435:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  10443c:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  104443:	2b 95 a8 fe ff ff    	sub    -0x158(%rbp),%edx
  104449:	e9 5a e6 ff ff       	jmpq   102aa8 <_vfprintf_r+0x13c8>
  10444e:	89 f3                	mov    %esi,%ebx
  104450:	f7 db                	neg    %ebx
  104452:	83 fe f0             	cmp    $0xfffffff0,%esi
  104455:	0f 8d f7 00 00 00    	jge    104552 <_vfprintf_r+0x2e72>
  10445b:	48 89 8d 80 fe ff ff 	mov    %rcx,-0x180(%rbp)
  104462:	4c 89 f1             	mov    %r14,%rcx
  104465:	4c 8b a5 90 fe ff ff 	mov    -0x170(%rbp),%r12
  10446c:	41 89 de             	mov    %ebx,%r14d
  10446f:	48 89 cb             	mov    %rcx,%rbx
  104472:	eb 12                	jmp    104486 <_vfprintf_r+0x2da6>
  104474:	0f 1f 40 00          	nopl   0x0(%rax)
  104478:	41 83 ee 10          	sub    $0x10,%r14d
  10447c:	41 83 fe 10          	cmp    $0x10,%r14d
  104480:	0f 8e bc 00 00 00    	jle    104542 <_vfprintf_r+0x2e62>
  104486:	48 83 c0 10          	add    $0x10,%rax
  10448a:	83 c2 01             	add    $0x1,%edx
  10448d:	49 83 c2 10          	add    $0x10,%r10
  104491:	49 c7 42 f0 d0 06 11 	movq   $0x1106d0,-0x10(%r10)
  104498:	00 
  104499:	49 c7 42 f8 10 00 00 	movq   $0x10,-0x8(%r10)
  1044a0:	00 
  1044a1:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  1044a8:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  1044ae:	83 fa 07             	cmp    $0x7,%edx
  1044b1:	7e c5                	jle    104478 <_vfprintf_r+0x2d98>
  1044b3:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  1044ba:	4c 89 e6             	mov    %r12,%rsi
  1044bd:	48 89 df             	mov    %rbx,%rdi
  1044c0:	e8 4b 37 00 00       	callq  107c10 <__sprint_r>
  1044c5:	85 c0                	test   %eax,%eax
  1044c7:	75 39                	jne    104502 <_vfprintf_r+0x2e22>
  1044c9:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  1044d0:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  1044d6:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  1044dd:	eb 99                	jmp    104478 <_vfprintf_r+0x2d98>
  1044df:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  1044e6:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  1044ed:	4c 89 f7             	mov    %r14,%rdi
  1044f0:	e8 1b 37 00 00       	callq  107c10 <__sprint_r>
  1044f5:	85 c0                	test   %eax,%eax
  1044f7:	0f 84 0c f0 ff ff    	je     103509 <_vfprintf_r+0x1e29>
  1044fd:	e9 a8 d6 ff ff       	jmpq   101baa <_vfprintf_r+0x4ca>
  104502:	49 89 de             	mov    %rbx,%r14
  104505:	e9 89 d6 ff ff       	jmpq   101b93 <_vfprintf_r+0x4b3>
  10450a:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
  104511:	f6 80 b0 00 00 00 01 	testb  $0x1,0xb0(%rax)
  104518:	75 19                	jne    104533 <_vfprintf_r+0x2e53>
  10451a:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
  104521:	f6 40 11 02          	testb  $0x2,0x11(%rax)
  104525:	75 0c                	jne    104533 <_vfprintf_r+0x2e53>
  104527:	48 8b b8 a0 00 00 00 	mov    0xa0(%rax),%rdi
  10452e:	e8 d4 87 00 00       	callq  10cd07 <__retarget_lock_release_recursive>
  104533:	c7 85 88 fe ff ff ff 	movl   $0xffffffff,-0x178(%rbp)
  10453a:	ff ff ff 
  10453d:	e9 88 d6 ff ff       	jmpq   101bca <_vfprintf_r+0x4ea>
  104542:	48 89 de             	mov    %rbx,%rsi
  104545:	48 8b 8d 80 fe ff ff 	mov    -0x180(%rbp),%rcx
  10454c:	44 89 f3             	mov    %r14d,%ebx
  10454f:	49 89 f6             	mov    %rsi,%r14
  104552:	48 63 db             	movslq %ebx,%rbx
  104555:	83 c2 01             	add    $0x1,%edx
  104558:	49 c7 02 d0 06 11 00 	movq   $0x1106d0,(%r10)
  10455f:	48 01 d8             	add    %rbx,%rax
  104562:	49 89 5a 08          	mov    %rbx,0x8(%r10)
  104566:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  10456d:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  104573:	83 fa 07             	cmp    $0x7,%edx
  104576:	0f 8e f5 fc ff ff    	jle    104271 <_vfprintf_r+0x2b91>
  10457c:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  104583:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  10458a:	4c 89 f7             	mov    %r14,%rdi
  10458d:	48 89 8d 80 fe ff ff 	mov    %rcx,-0x180(%rbp)
  104594:	e8 77 36 00 00       	callq  107c10 <__sprint_r>
  104599:	85 c0                	test   %eax,%eax
  10459b:	0f 85 f2 d5 ff ff    	jne    101b93 <_vfprintf_r+0x4b3>
  1045a1:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  1045a8:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  1045ae:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  1045b5:	48 8b 8d 80 fe ff ff 	mov    -0x180(%rbp),%rcx
  1045bc:	e9 fb e7 ff ff       	jmpq   102dbc <_vfprintf_r+0x16dc>
  1045c1:	48 8b bd 70 fe ff ff 	mov    -0x190(%rbp),%rdi
  1045c8:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  1045cc:	48 8d 42 08          	lea    0x8(%rdx),%rax
  1045d0:	48 89 47 08          	mov    %rax,0x8(%rdi)
  1045d4:	e9 fe f0 ff ff       	jmpq   1036d7 <_vfprintf_r+0x1ff7>
  1045d9:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  1045e0:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  1045e4:	48 8d 42 08          	lea    0x8(%rdx),%rax
  1045e8:	48 89 41 08          	mov    %rax,0x8(%rcx)
  1045ec:	8b 32                	mov    (%rdx),%esi
  1045ee:	e9 f9 e9 ff ff       	jmpq   102fec <_vfprintf_r+0x190c>
  1045f3:	48 8b b5 70 fe ff ff 	mov    -0x190(%rbp),%rsi
  1045fa:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  1045fe:	48 8d 42 08          	lea    0x8(%rdx),%rax
  104602:	48 89 46 08          	mov    %rax,0x8(%rsi)
  104606:	8b 32                	mov    (%rdx),%esi
  104608:	e9 e6 e6 ff ff       	jmpq   102cf3 <_vfprintf_r+0x1613>
  10460d:	48 8b b5 70 fe ff ff 	mov    -0x190(%rbp),%rsi
  104614:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  104618:	48 8d 42 08          	lea    0x8(%rdx),%rax
  10461c:	48 89 46 08          	mov    %rax,0x8(%rsi)
  104620:	e9 ca f5 ff ff       	jmpq   103bef <_vfprintf_r+0x250f>
  104625:	48 8b b5 70 fe ff ff 	mov    -0x190(%rbp),%rsi
  10462c:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  104630:	48 8d 42 08          	lea    0x8(%rdx),%rax
  104634:	48 89 46 08          	mov    %rax,0x8(%rsi)
  104638:	e9 e7 f0 ff ff       	jmpq   103724 <_vfprintf_r+0x2044>
  10463d:	83 f8 2f             	cmp    $0x2f,%eax
  104640:	0f 87 a0 02 00 00    	ja     1048e6 <_vfprintf_r+0x3206>
  104646:	48 8b b5 70 fe ff ff 	mov    -0x190(%rbp),%rsi
  10464d:	89 c2                	mov    %eax,%edx
  10464f:	83 c0 08             	add    $0x8,%eax
  104652:	89 06                	mov    %eax,(%rsi)
  104654:	48 03 56 10          	add    0x10(%rsi),%rdx
  104658:	48 8b 02             	mov    (%rdx),%rax
  10465b:	8b 8d 88 fe ff ff    	mov    -0x178(%rbp),%ecx
  104661:	89 08                	mov    %ecx,(%rax)
  104663:	e9 91 d1 ff ff       	jmpq   1017f9 <_vfprintf_r+0x119>
  104668:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  10466f:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  104673:	48 8d 42 08          	lea    0x8(%rdx),%rax
  104677:	48 89 41 08          	mov    %rax,0x8(%rcx)
  10467b:	e9 23 f0 ff ff       	jmpq   1036a3 <_vfprintf_r+0x1fc3>
  104680:	41 bb 67 00 00 00    	mov    $0x67,%r11d
  104686:	48 8b b5 38 fe ff ff 	mov    -0x1c8(%rbp),%rsi
  10468d:	c7 85 50 fe ff ff 00 	movl   $0x0,-0x1b0(%rbp)
  104694:	00 00 00 
  104697:	c7 85 5c fe ff ff 00 	movl   $0x0,-0x1a4(%rbp)
  10469e:	00 00 00 
  1046a1:	0f be 06             	movsbl (%rsi),%eax
  1046a4:	3c 7f                	cmp    $0x7f,%al
  1046a6:	74 3e                	je     1046e6 <_vfprintf_r+0x3006>
  1046a8:	8b 95 60 fe ff ff    	mov    -0x1a0(%rbp),%edx
  1046ae:	eb 0f                	jmp    1046bf <_vfprintf_r+0x2fdf>
  1046b0:	83 85 5c fe ff ff 01 	addl   $0x1,-0x1a4(%rbp)
  1046b7:	48 83 c6 01          	add    $0x1,%rsi
  1046bb:	3c 7f                	cmp    $0x7f,%al
  1046bd:	74 1a                	je     1046d9 <_vfprintf_r+0x2ff9>
  1046bf:	39 d0                	cmp    %edx,%eax
  1046c1:	7d 16                	jge    1046d9 <_vfprintf_r+0x2ff9>
  1046c3:	29 c2                	sub    %eax,%edx
  1046c5:	0f be 46 01          	movsbl 0x1(%rsi),%eax
  1046c9:	84 c0                	test   %al,%al
  1046cb:	75 e3                	jne    1046b0 <_vfprintf_r+0x2fd0>
  1046cd:	83 85 50 fe ff ff 01 	addl   $0x1,-0x1b0(%rbp)
  1046d4:	0f be 06             	movsbl (%rsi),%eax
  1046d7:	eb e2                	jmp    1046bb <_vfprintf_r+0x2fdb>
  1046d9:	48 89 b5 38 fe ff ff 	mov    %rsi,-0x1c8(%rbp)
  1046e0:	89 95 60 fe ff ff    	mov    %edx,-0x1a0(%rbp)
  1046e6:	8b 85 5c fe ff ff    	mov    -0x1a4(%rbp),%eax
  1046ec:	03 85 50 fe ff ff    	add    -0x1b0(%rbp),%eax
  1046f2:	48 c7 85 78 fe ff ff 	movq   $0x0,-0x188(%rbp)
  1046f9:	00 00 00 00 
  1046fd:	0f af 85 28 fe ff ff 	imul   -0x1d8(%rbp),%eax
  104704:	01 85 80 fe ff ff    	add    %eax,-0x180(%rbp)
  10470a:	b8 00 00 00 00       	mov    $0x0,%eax
  10470f:	8b bd 80 fe ff ff    	mov    -0x180(%rbp),%edi
  104715:	0f 49 c7             	cmovns %edi,%eax
  104718:	89 85 98 fe ff ff    	mov    %eax,-0x168(%rbp)
  10471e:	e9 00 f3 ff ff       	jmpq   103a23 <_vfprintf_r+0x2343>
  104723:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  10472a:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  10472e:	48 8d 42 08          	lea    0x8(%rdx),%rax
  104732:	48 89 41 08          	mov    %rax,0x8(%rcx)
  104736:	e9 8e f4 ff ff       	jmpq   103bc9 <_vfprintf_r+0x24e9>
  10473b:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  104742:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  104746:	48 8d 42 08          	lea    0x8(%rdx),%rax
  10474a:	48 89 41 08          	mov    %rax,0x8(%rcx)
  10474e:	e9 5c f0 ff ff       	jmpq   1037af <_vfprintf_r+0x20cf>
  104753:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  10475a:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  10475e:	48 8d 42 08          	lea    0x8(%rdx),%rax
  104762:	48 89 41 08          	mov    %rax,0x8(%rcx)
  104766:	e9 ab f4 ff ff       	jmpq   103c16 <_vfprintf_r+0x2536>
  10476b:	8b 85 40 fe ff ff    	mov    -0x1c0(%rbp),%eax
  104771:	41 bb 66 00 00 00    	mov    $0x66,%r11d
  104777:	01 f0                	add    %esi,%eax
  104779:	01 d8                	add    %ebx,%eax
  10477b:	89 85 80 fe ff ff    	mov    %eax,-0x180(%rbp)
  104781:	e9 43 f6 ff ff       	jmpq   103dc9 <_vfprintf_r+0x26e9>
  104786:	bb 01 00 00 00       	mov    $0x1,%ebx
  10478b:	f2 0f 10 85 48 fe ff 	movsd  -0x1b8(%rbp),%xmm0
  104792:	ff 
  104793:	c6 85 68 fe ff ff 2d 	movb   $0x2d,-0x198(%rbp)
  10479a:	66 0f 57 05 5e bf 00 	xorpd  0xbf5e(%rip),%xmm0        # 110700 <blanks.1+0x20>
  1047a1:	00 
  1047a2:	e9 d3 f4 ff ff       	jmpq   103c7a <_vfprintf_r+0x259a>
  1047a7:	48 8d bd b3 fe ff ff 	lea    -0x14d(%rbp),%rdi
  1047ae:	83 fe 41             	cmp    $0x41,%esi
  1047b1:	74 0e                	je     1047c1 <_vfprintf_r+0x30e1>
  1047b3:	c6 85 b3 fe ff ff 30 	movb   $0x30,-0x14d(%rbp)
  1047ba:	48 8d bd b4 fe ff ff 	lea    -0x14c(%rbp),%rdi
  1047c1:	83 c0 30             	add    $0x30,%eax
  1047c4:	88 07                	mov    %al,(%rdi)
  1047c6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  1047ca:	48 29 c7             	sub    %rax,%rdi
  1047cd:	8d 87 20 01 00 00    	lea    0x120(%rdi),%eax
  1047d3:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%rbp)
  1047d9:	e9 d9 f1 ff ff       	jmpq   1039b7 <_vfprintf_r+0x22d7>
  1047de:	f2 0f 10 bd 48 fe ff 	movsd  -0x1b8(%rbp),%xmm7
  1047e5:	ff 
  1047e6:	66 0f 50 c7          	movmskpd %xmm7,%eax
  1047ea:	a8 01                	test   $0x1,%al
  1047ec:	0f 85 94 00 00 00    	jne    104886 <_vfprintf_r+0x31a6>
  1047f2:	0f b6 85 a5 fe ff ff 	movzbl -0x15b(%rbp),%eax
  1047f9:	41 83 fb 48          	cmp    $0x48,%r11d
  1047fd:	b9 f9 14 11 00       	mov    $0x1114f9,%ecx
  104802:	ba fd 14 11 00       	mov    $0x1114fd,%edx
  104807:	e9 58 d4 ff ff       	jmpq   101c64 <_vfprintf_r+0x584>
  10480c:	8b b5 80 fe ff ff    	mov    -0x180(%rbp),%esi
  104812:	41 bb 67 00 00 00    	mov    $0x67,%r11d
  104818:	85 f6                	test   %esi,%esi
  10481a:	0f 49 c6             	cmovns %esi,%eax
  10481d:	89 85 98 fe ff ff    	mov    %eax,-0x168(%rbp)
  104823:	e9 c0 f5 ff ff       	jmpq   103de8 <_vfprintf_r+0x2708>
  104828:	4c 89 85 b8 fe ff ff 	mov    %r8,-0x148(%rbp)
  10482f:	44 0f b6 47 0f       	movzbl 0xf(%rdi),%r8d
  104834:	48 89 c2             	mov    %rax,%rdx
  104837:	0f b6 70 ff          	movzbl -0x1(%rax),%esi
  10483b:	44 38 c6             	cmp    %r8b,%sil
  10483e:	75 1f                	jne    10485f <_vfprintf_r+0x317f>
  104840:	c6 42 ff 30          	movb   $0x30,-0x1(%rdx)
  104844:	48 8b 95 b8 fe ff ff 	mov    -0x148(%rbp),%rdx
  10484b:	48 8d 72 ff          	lea    -0x1(%rdx),%rsi
  10484f:	48 89 b5 b8 fe ff ff 	mov    %rsi,-0x148(%rbp)
  104856:	0f b6 72 ff          	movzbl -0x1(%rdx),%esi
  10485a:	41 38 f0             	cmp    %sil,%r8b
  10485d:	74 e1                	je     104840 <_vfprintf_r+0x3160>
  10485f:	44 8d 46 01          	lea    0x1(%rsi),%r8d
  104863:	40 80 fe 39          	cmp    $0x39,%sil
  104867:	75 05                	jne    10486e <_vfprintf_r+0x318e>
  104869:	44 0f b6 47 0a       	movzbl 0xa(%rdi),%r8d
  10486e:	44 88 42 ff          	mov    %r8b,-0x1(%rdx)
  104872:	e9 44 eb ff ff       	jmpq   1033bb <_vfprintf_r+0x1cdb>
  104877:	41 f6 c7 01          	test   $0x1,%r15b
  10487b:	0f 84 5f f1 ff ff    	je     1039e0 <_vfprintf_r+0x2300>
  104881:	e9 4e f1 ff ff       	jmpq   1039d4 <_vfprintf_r+0x22f4>
  104886:	c6 85 a5 fe ff ff 2d 	movb   $0x2d,-0x15b(%rbp)
  10488d:	b8 2d 00 00 00       	mov    $0x2d,%eax
  104892:	e9 62 ff ff ff       	jmpq   1047f9 <_vfprintf_r+0x3119>
  104897:	85 c0                	test   %eax,%eax
  104899:	75 1f                	jne    1048ba <_vfprintf_r+0x31da>
  10489b:	c7 85 98 fe ff ff 01 	movl   $0x1,-0x168(%rbp)
  1048a2:	00 00 00 
  1048a5:	41 bb 66 00 00 00    	mov    $0x66,%r11d
  1048ab:	c7 85 80 fe ff ff 01 	movl   $0x1,-0x180(%rbp)
  1048b2:	00 00 00 
  1048b5:	e9 2e f5 ff ff       	jmpq   103de8 <_vfprintf_r+0x2708>
  1048ba:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
  1048c1:	41 bb 66 00 00 00    	mov    $0x66,%r11d
  1048c7:	8d 74 03 01          	lea    0x1(%rbx,%rax,1),%esi
  1048cb:	b8 00 00 00 00       	mov    $0x0,%eax
  1048d0:	85 f6                	test   %esi,%esi
  1048d2:	89 b5 80 fe ff ff    	mov    %esi,-0x180(%rbp)
  1048d8:	0f 49 c6             	cmovns %esi,%eax
  1048db:	89 85 98 fe ff ff    	mov    %eax,-0x168(%rbp)
  1048e1:	e9 02 f5 ff ff       	jmpq   103de8 <_vfprintf_r+0x2708>
  1048e6:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  1048ed:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  1048f1:	48 8d 42 08          	lea    0x8(%rdx),%rax
  1048f5:	48 89 41 08          	mov    %rax,0x8(%rcx)
  1048f9:	e9 5a fd ff ff       	jmpq   104658 <_vfprintf_r+0x2f78>
  1048fe:	b8 01 00 00 00       	mov    $0x1,%eax
  104903:	29 d8                	sub    %ebx,%eax
  104905:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%rbp)
  10490b:	e9 f0 f3 ff ff       	jmpq   103d00 <_vfprintf_r+0x2620>
  104910:	48 8b bd 70 fe ff ff 	mov    -0x190(%rbp),%rdi
  104917:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  10491b:	48 8d 42 08          	lea    0x8(%rdx),%rax
  10491f:	48 89 47 08          	mov    %rax,0x8(%rdi)
  104923:	e9 36 ee ff ff       	jmpq   10375e <_vfprintf_r+0x207e>
  104928:	48 8b b5 70 fe ff ff 	mov    -0x190(%rbp),%rsi
  10492f:	8b 0e                	mov    (%rsi),%ecx
  104931:	83 f9 2f             	cmp    $0x2f,%ecx
  104934:	77 24                	ja     10495a <_vfprintf_r+0x327a>
  104936:	89 c8                	mov    %ecx,%eax
  104938:	83 c1 08             	add    $0x8,%ecx
  10493b:	48 03 46 10          	add    0x10(%rsi),%rax
  10493f:	89 0e                	mov    %ecx,(%rsi)
  104941:	8b 18                	mov    (%rax),%ebx
  104943:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  104948:	45 0f be 5d 01       	movsbl 0x1(%r13),%r11d
  10494d:	49 89 d5             	mov    %rdx,%r13
  104950:	85 db                	test   %ebx,%ebx
  104952:	0f 48 d8             	cmovs  %eax,%ebx
  104955:	e9 3c cf ff ff       	jmpq   101896 <_vfprintf_r+0x1b6>
  10495a:	48 8b b5 70 fe ff ff 	mov    -0x190(%rbp),%rsi
  104961:	48 8b 46 08          	mov    0x8(%rsi),%rax
  104965:	48 8d 48 08          	lea    0x8(%rax),%rcx
  104969:	48 89 4e 08          	mov    %rcx,0x8(%rsi)
  10496d:	eb d2                	jmp    104941 <_vfprintf_r+0x3261>
  10496f:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
  104976:	66 83 48 10 40       	orw    $0x40,0x10(%rax)
  10497b:	e9 2a d2 ff ff       	jmpq   101baa <_vfprintf_r+0x4ca>
  104980:	89 da                	mov    %ebx,%edx
  104982:	e9 99 ee ff ff       	jmpq   103820 <_vfprintf_r+0x2140>
  104987:	48 63 95 58 fe ff ff 	movslq -0x1a8(%rbp),%rdx
  10498e:	48 8d 3c 11          	lea    (%rcx,%rdx,1),%rdi
  104992:	48 89 bd 80 fe ff ff 	mov    %rdi,-0x180(%rbp)
  104999:	e9 34 f6 ff ff       	jmpq   103fd2 <_vfprintf_r+0x28f2>
  10499e:	c7 85 14 fe ff ff 02 	movl   $0x2,-0x1ec(%rbp)
  1049a5:	00 00 00 
  1049a8:	e9 0a f0 ff ff       	jmpq   1039b7 <_vfprintf_r+0x22d7>
  1049ad:	48 c7 85 78 fe ff ff 	movq   $0x0,-0x188(%rbp)
  1049b4:	00 00 00 00 
  1049b8:	e9 19 ef ff ff       	jmpq   1038d6 <_vfprintf_r+0x21f6>
  1049bd:	0f 1f 00             	nopl   (%rax)

00000000001049c0 <__sbprintf>:
  1049c0:	55                   	push   %rbp
  1049c1:	48 89 e5             	mov    %rsp,%rbp
  1049c4:	41 56                	push   %r14
  1049c6:	49 89 ce             	mov    %rcx,%r14
  1049c9:	41 55                	push   %r13
  1049cb:	49 89 fd             	mov    %rdi,%r13
  1049ce:	48 8d bd c0 fb ff ff 	lea    -0x440(%rbp),%rdi
  1049d5:	41 54                	push   %r12
  1049d7:	49 89 d4             	mov    %rdx,%r12
  1049da:	53                   	push   %rbx
  1049db:	48 89 f3             	mov    %rsi,%rbx
  1049de:	48 81 ec c0 04 00 00 	sub    $0x4c0,%rsp
  1049e5:	0f b7 46 10          	movzwl 0x10(%rsi),%eax
  1049e9:	c7 85 2c fb ff ff 00 	movl   $0x400,-0x4d4(%rbp)
  1049f0:	04 00 00 
  1049f3:	c7 85 40 fb ff ff 00 	movl   $0x400,-0x4c0(%rbp)
  1049fa:	04 00 00 
  1049fd:	c7 85 48 fb ff ff 00 	movl   $0x0,-0x4b8(%rbp)
  104a04:	00 00 00 
  104a07:	83 e0 fd             	and    $0xfffffffd,%eax
  104a0a:	66 89 85 30 fb ff ff 	mov    %ax,-0x4d0(%rbp)
  104a11:	8b 86 b0 00 00 00    	mov    0xb0(%rsi),%eax
  104a17:	89 85 d0 fb ff ff    	mov    %eax,-0x430(%rbp)
  104a1d:	0f b7 46 12          	movzwl 0x12(%rsi),%eax
  104a21:	66 89 85 32 fb ff ff 	mov    %ax,-0x4ce(%rbp)
  104a28:	48 8b 46 30          	mov    0x30(%rsi),%rax
  104a2c:	48 89 85 50 fb ff ff 	mov    %rax,-0x4b0(%rbp)
  104a33:	48 8b 46 40          	mov    0x40(%rsi),%rax
  104a37:	48 89 85 60 fb ff ff 	mov    %rax,-0x4a0(%rbp)
  104a3e:	48 8d 85 e0 fb ff ff 	lea    -0x420(%rbp),%rax
  104a45:	48 89 85 20 fb ff ff 	mov    %rax,-0x4e0(%rbp)
  104a4c:	48 89 85 38 fb ff ff 	mov    %rax,-0x4c8(%rbp)
  104a53:	e8 80 82 00 00       	callq  10ccd8 <__retarget_lock_init_recursive>
  104a58:	4c 89 e2             	mov    %r12,%rdx
  104a5b:	4c 89 f1             	mov    %r14,%rcx
  104a5e:	4c 89 ef             	mov    %r13,%rdi
  104a61:	48 8d b5 20 fb ff ff 	lea    -0x4e0(%rbp),%rsi
  104a68:	e8 73 cc ff ff       	callq  1016e0 <_vfprintf_r>
  104a6d:	41 89 c4             	mov    %eax,%r12d
  104a70:	85 c0                	test   %eax,%eax
  104a72:	78 1a                	js     104a8e <__sbprintf+0xce>
  104a74:	48 8d b5 20 fb ff ff 	lea    -0x4e0(%rbp),%rsi
  104a7b:	4c 89 ef             	mov    %r13,%rdi
  104a7e:	e8 7d 1a 00 00       	callq  106500 <_fflush_r>
  104a83:	85 c0                	test   %eax,%eax
  104a85:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  104a8a:	44 0f 45 e0          	cmovne %eax,%r12d
  104a8e:	f6 85 30 fb ff ff 40 	testb  $0x40,-0x4d0(%rbp)
  104a95:	74 05                	je     104a9c <__sbprintf+0xdc>
  104a97:	66 83 4b 10 40       	orw    $0x40,0x10(%rbx)
  104a9c:	48 8b bd c0 fb ff ff 	mov    -0x440(%rbp),%rdi
  104aa3:	e8 51 82 00 00       	callq  10ccf9 <__retarget_lock_close_recursive>
  104aa8:	48 81 c4 c0 04 00 00 	add    $0x4c0,%rsp
  104aaf:	44 89 e0             	mov    %r12d,%eax
  104ab2:	5b                   	pop    %rbx
  104ab3:	41 5c                	pop    %r12
  104ab5:	41 5d                	pop    %r13
  104ab7:	41 5e                	pop    %r14
  104ab9:	5d                   	pop    %rbp
  104aba:	c3                   	retq   
  104abb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000104ac0 <__swsetup_r>:
  104ac0:	55                   	push   %rbp
  104ac1:	48 89 e5             	mov    %rsp,%rbp
  104ac4:	41 54                	push   %r12
  104ac6:	49 89 fc             	mov    %rdi,%r12
  104ac9:	48 8b 3d 28 39 04 00 	mov    0x43928(%rip),%rdi        # 1483f8 <_impure_ptr>
  104ad0:	53                   	push   %rbx
  104ad1:	48 89 f3             	mov    %rsi,%rbx
  104ad4:	48 85 ff             	test   %rdi,%rdi
  104ad7:	74 07                	je     104ae0 <__swsetup_r+0x20>
  104ad9:	8b 47 50             	mov    0x50(%rdi),%eax
  104adc:	85 c0                	test   %eax,%eax
  104ade:	74 68                	je     104b48 <__swsetup_r+0x88>
  104ae0:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  104ae4:	a8 08                	test   $0x8,%al
  104ae6:	74 6d                	je     104b55 <__swsetup_r+0x95>
  104ae8:	48 8b 53 18          	mov    0x18(%rbx),%rdx
  104aec:	48 85 d2             	test   %rdx,%rdx
  104aef:	0f 84 7c 00 00 00    	je     104b71 <__swsetup_r+0xb1>
  104af5:	a8 01                	test   $0x1,%al
  104af7:	75 1f                	jne    104b18 <__swsetup_r+0x58>
  104af9:	31 c9                	xor    %ecx,%ecx
  104afb:	a8 02                	test   $0x2,%al
  104afd:	75 03                	jne    104b02 <__swsetup_r+0x42>
  104aff:	8b 4b 20             	mov    0x20(%rbx),%ecx
  104b02:	89 4b 0c             	mov    %ecx,0xc(%rbx)
  104b05:	45 31 c0             	xor    %r8d,%r8d
  104b08:	48 85 d2             	test   %rdx,%rdx
  104b0b:	74 22                	je     104b2f <__swsetup_r+0x6f>
  104b0d:	5b                   	pop    %rbx
  104b0e:	44 89 c0             	mov    %r8d,%eax
  104b11:	41 5c                	pop    %r12
  104b13:	5d                   	pop    %rbp
  104b14:	c3                   	retq   
  104b15:	0f 1f 00             	nopl   (%rax)
  104b18:	8b 4b 20             	mov    0x20(%rbx),%ecx
  104b1b:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%rbx)
  104b22:	45 31 c0             	xor    %r8d,%r8d
  104b25:	f7 d9                	neg    %ecx
  104b27:	89 4b 28             	mov    %ecx,0x28(%rbx)
  104b2a:	48 85 d2             	test   %rdx,%rdx
  104b2d:	75 de                	jne    104b0d <__swsetup_r+0x4d>
  104b2f:	a8 80                	test   $0x80,%al
  104b31:	74 da                	je     104b0d <__swsetup_r+0x4d>
  104b33:	83 c8 40             	or     $0x40,%eax
  104b36:	41 b8 ff ff ff ff    	mov    $0xffffffff,%r8d
  104b3c:	66 89 43 10          	mov    %ax,0x10(%rbx)
  104b40:	eb cb                	jmp    104b0d <__swsetup_r+0x4d>
  104b42:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  104b48:	e8 63 1a 00 00       	callq  1065b0 <__sinit>
  104b4d:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  104b51:	a8 08                	test   $0x8,%al
  104b53:	75 93                	jne    104ae8 <__swsetup_r+0x28>
  104b55:	a8 10                	test   $0x10,%al
  104b57:	0f 84 7c 00 00 00    	je     104bd9 <__swsetup_r+0x119>
  104b5d:	a8 04                	test   $0x4,%al
  104b5f:	75 3f                	jne    104ba0 <__swsetup_r+0xe0>
  104b61:	48 8b 53 18          	mov    0x18(%rbx),%rdx
  104b65:	83 c8 08             	or     $0x8,%eax
  104b68:	66 89 43 10          	mov    %ax,0x10(%rbx)
  104b6c:	48 85 d2             	test   %rdx,%rdx
  104b6f:	75 84                	jne    104af5 <__swsetup_r+0x35>
  104b71:	89 c1                	mov    %eax,%ecx
  104b73:	66 81 e1 80 02       	and    $0x280,%cx
  104b78:	66 81 f9 00 02       	cmp    $0x200,%cx
  104b7d:	0f 84 72 ff ff ff    	je     104af5 <__swsetup_r+0x35>
  104b83:	48 89 de             	mov    %rbx,%rsi
  104b86:	4c 89 e7             	mov    %r12,%rdi
  104b89:	e8 32 21 00 00       	callq  106cc0 <__smakebuf_r>
  104b8e:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  104b92:	48 8b 53 18          	mov    0x18(%rbx),%rdx
  104b96:	e9 5a ff ff ff       	jmpq   104af5 <__swsetup_r+0x35>
  104b9b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  104ba0:	48 8b 73 58          	mov    0x58(%rbx),%rsi
  104ba4:	48 85 f6             	test   %rsi,%rsi
  104ba7:	74 1d                	je     104bc6 <__swsetup_r+0x106>
  104ba9:	48 8d 53 74          	lea    0x74(%rbx),%rdx
  104bad:	48 39 d6             	cmp    %rdx,%rsi
  104bb0:	74 0c                	je     104bbe <__swsetup_r+0xfe>
  104bb2:	4c 89 e7             	mov    %r12,%rdi
  104bb5:	e8 e6 1c 00 00       	callq  1068a0 <_free_r>
  104bba:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  104bbe:	48 c7 43 58 00 00 00 	movq   $0x0,0x58(%rbx)
  104bc5:	00 
  104bc6:	48 8b 53 18          	mov    0x18(%rbx),%rdx
  104bca:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%rbx)
  104bd1:	83 e0 db             	and    $0xffffffdb,%eax
  104bd4:	48 89 13             	mov    %rdx,(%rbx)
  104bd7:	eb 8c                	jmp    104b65 <__swsetup_r+0xa5>
  104bd9:	83 c8 40             	or     $0x40,%eax
  104bdc:	41 c7 04 24 09 00 00 	movl   $0x9,(%r12)
  104be3:	00 
  104be4:	41 b8 ff ff ff ff    	mov    $0xffffffff,%r8d
  104bea:	66 89 43 10          	mov    %ax,0x10(%rbx)
  104bee:	e9 1a ff ff ff       	jmpq   104b0d <__swsetup_r+0x4d>
  104bf3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  104bfa:	00 00 00 
  104bfd:	0f 1f 00             	nopl   (%rax)

0000000000104c00 <quorem>:
  104c00:	55                   	push   %rbp
  104c01:	31 c0                	xor    %eax,%eax
  104c03:	48 89 e5             	mov    %rsp,%rbp
  104c06:	41 57                	push   %r15
  104c08:	41 56                	push   %r14
  104c0a:	41 55                	push   %r13
  104c0c:	41 54                	push   %r12
  104c0e:	53                   	push   %rbx
  104c0f:	48 83 ec 18          	sub    $0x18,%rsp
  104c13:	44 8b 66 14          	mov    0x14(%rsi),%r12d
  104c17:	44 39 67 14          	cmp    %r12d,0x14(%rdi)
  104c1b:	0f 8c 29 01 00 00    	jl     104d4a <quorem+0x14a>
  104c21:	41 83 ec 01          	sub    $0x1,%r12d
  104c25:	48 8d 5e 18          	lea    0x18(%rsi),%rbx
  104c29:	4c 8d 7f 18          	lea    0x18(%rdi),%r15
  104c2d:	49 89 f1             	mov    %rsi,%r9
  104c30:	49 63 c4             	movslq %r12d,%rax
  104c33:	31 d2                	xor    %edx,%edx
  104c35:	49 89 f8             	mov    %rdi,%r8
  104c38:	48 c1 e0 02          	shl    $0x2,%rax
  104c3c:	4c 8d 2c 03          	lea    (%rbx,%rax,1),%r13
  104c40:	4c 01 f8             	add    %r15,%rax
  104c43:	8b 30                	mov    (%rax),%esi
  104c45:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  104c49:	41 8b 45 00          	mov    0x0(%r13),%eax
  104c4d:	8d 48 01             	lea    0x1(%rax),%ecx
  104c50:	89 f0                	mov    %esi,%eax
  104c52:	f7 f1                	div    %ecx
  104c54:	89 45 cc             	mov    %eax,-0x34(%rbp)
  104c57:	41 89 c6             	mov    %eax,%r14d
  104c5a:	39 ce                	cmp    %ecx,%esi
  104c5c:	72 7b                	jb     104cd9 <quorem+0xd9>
  104c5e:	49 89 da             	mov    %rbx,%r10
  104c61:	4c 89 ff             	mov    %r15,%rdi
  104c64:	45 31 db             	xor    %r11d,%r11d
  104c67:	31 f6                	xor    %esi,%esi
  104c69:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  104c70:	41 8b 0a             	mov    (%r10),%ecx
  104c73:	49 83 c2 04          	add    $0x4,%r10
  104c77:	48 83 c7 04          	add    $0x4,%rdi
  104c7b:	0f b7 d1             	movzwl %cx,%edx
  104c7e:	c1 e9 10             	shr    $0x10,%ecx
  104c81:	41 0f af d6          	imul   %r14d,%edx
  104c85:	41 0f af ce          	imul   %r14d,%ecx
  104c89:	44 01 da             	add    %r11d,%edx
  104c8c:	89 d0                	mov    %edx,%eax
  104c8e:	0f b7 d2             	movzwl %dx,%edx
  104c91:	c1 e8 10             	shr    $0x10,%eax
  104c94:	29 d6                	sub    %edx,%esi
  104c96:	01 c1                	add    %eax,%ecx
  104c98:	8b 47 fc             	mov    -0x4(%rdi),%eax
  104c9b:	41 89 cb             	mov    %ecx,%r11d
  104c9e:	0f b7 c9             	movzwl %cx,%ecx
  104ca1:	0f b7 d0             	movzwl %ax,%edx
  104ca4:	c1 e8 10             	shr    $0x10,%eax
  104ca7:	01 f2                	add    %esi,%edx
  104ca9:	29 c8                	sub    %ecx,%eax
  104cab:	41 c1 eb 10          	shr    $0x10,%r11d
  104caf:	89 d1                	mov    %edx,%ecx
  104cb1:	0f b7 d2             	movzwl %dx,%edx
  104cb4:	c1 f9 10             	sar    $0x10,%ecx
  104cb7:	01 c8                	add    %ecx,%eax
  104cb9:	89 c6                	mov    %eax,%esi
  104cbb:	c1 e0 10             	shl    $0x10,%eax
  104cbe:	09 d0                	or     %edx,%eax
  104cc0:	c1 fe 10             	sar    $0x10,%esi
  104cc3:	89 47 fc             	mov    %eax,-0x4(%rdi)
  104cc6:	4d 39 d5             	cmp    %r10,%r13
  104cc9:	73 a5                	jae    104c70 <quorem+0x70>
  104ccb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  104ccf:	8b 38                	mov    (%rax),%edi
  104cd1:	85 ff                	test   %edi,%edi
  104cd3:	0f 84 b1 00 00 00    	je     104d8a <quorem+0x18a>
  104cd9:	4c 89 ce             	mov    %r9,%rsi
  104cdc:	4c 89 c7             	mov    %r8,%rdi
  104cdf:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
  104ce3:	e8 08 2a 00 00       	callq  1076f0 <__mcmp>
  104ce8:	85 c0                	test   %eax,%eax
  104cea:	78 5b                	js     104d47 <quorem+0x147>
  104cec:	41 8d 46 01          	lea    0x1(%r14),%eax
  104cf0:	4c 8b 45 c0          	mov    -0x40(%rbp),%r8
  104cf4:	4c 89 f9             	mov    %r15,%rcx
  104cf7:	31 f6                	xor    %esi,%esi
  104cf9:	89 45 cc             	mov    %eax,-0x34(%rbp)
  104cfc:	0f 1f 40 00          	nopl   0x0(%rax)
  104d00:	8b 3b                	mov    (%rbx),%edi
  104d02:	8b 01                	mov    (%rcx),%eax
  104d04:	48 83 c3 04          	add    $0x4,%rbx
  104d08:	48 83 c1 04          	add    $0x4,%rcx
  104d0c:	0f b7 d7             	movzwl %di,%edx
  104d0f:	c1 ef 10             	shr    $0x10,%edi
  104d12:	29 d6                	sub    %edx,%esi
  104d14:	0f b7 d0             	movzwl %ax,%edx
  104d17:	c1 e8 10             	shr    $0x10,%eax
  104d1a:	01 f2                	add    %esi,%edx
  104d1c:	29 f8                	sub    %edi,%eax
  104d1e:	89 d6                	mov    %edx,%esi
  104d20:	0f b7 d2             	movzwl %dx,%edx
  104d23:	c1 fe 10             	sar    $0x10,%esi
  104d26:	01 f0                	add    %esi,%eax
  104d28:	89 c6                	mov    %eax,%esi
  104d2a:	c1 e0 10             	shl    $0x10,%eax
  104d2d:	09 d0                	or     %edx,%eax
  104d2f:	c1 fe 10             	sar    $0x10,%esi
  104d32:	89 41 fc             	mov    %eax,-0x4(%rcx)
  104d35:	49 39 dd             	cmp    %rbx,%r13
  104d38:	73 c6                	jae    104d00 <quorem+0x100>
  104d3a:	49 63 c4             	movslq %r12d,%rax
  104d3d:	49 8d 04 87          	lea    (%r15,%rax,4),%rax
  104d41:	8b 08                	mov    (%rax),%ecx
  104d43:	85 c9                	test   %ecx,%ecx
  104d45:	74 23                	je     104d6a <quorem+0x16a>
  104d47:	8b 45 cc             	mov    -0x34(%rbp),%eax
  104d4a:	48 83 c4 18          	add    $0x18,%rsp
  104d4e:	5b                   	pop    %rbx
  104d4f:	41 5c                	pop    %r12
  104d51:	41 5d                	pop    %r13
  104d53:	41 5e                	pop    %r14
  104d55:	41 5f                	pop    %r15
  104d57:	5d                   	pop    %rbp
  104d58:	c3                   	retq   
  104d59:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  104d60:	8b 10                	mov    (%rax),%edx
  104d62:	85 d2                	test   %edx,%edx
  104d64:	75 0d                	jne    104d73 <quorem+0x173>
  104d66:	41 83 ec 01          	sub    $0x1,%r12d
  104d6a:	48 83 e8 04          	sub    $0x4,%rax
  104d6e:	49 39 c7             	cmp    %rax,%r15
  104d71:	72 ed                	jb     104d60 <quorem+0x160>
  104d73:	45 89 60 14          	mov    %r12d,0x14(%r8)
  104d77:	eb ce                	jmp    104d47 <quorem+0x147>
  104d79:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  104d80:	8b 30                	mov    (%rax),%esi
  104d82:	85 f6                	test   %esi,%esi
  104d84:	75 0d                	jne    104d93 <quorem+0x193>
  104d86:	41 83 ec 01          	sub    $0x1,%r12d
  104d8a:	48 83 e8 04          	sub    $0x4,%rax
  104d8e:	49 39 c7             	cmp    %rax,%r15
  104d91:	72 ed                	jb     104d80 <quorem+0x180>
  104d93:	45 89 60 14          	mov    %r12d,0x14(%r8)
  104d97:	e9 3d ff ff ff       	jmpq   104cd9 <quorem+0xd9>
  104d9c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000104da0 <_dtoa_r>:
  104da0:	55                   	push   %rbp
  104da1:	48 89 e5             	mov    %rsp,%rbp
  104da4:	41 57                	push   %r15
  104da6:	41 56                	push   %r14
  104da8:	4d 89 c6             	mov    %r8,%r14
  104dab:	41 55                	push   %r13
  104dad:	49 89 fd             	mov    %rdi,%r13
  104db0:	41 54                	push   %r12
  104db2:	66 49 0f 7e c4       	movq   %xmm0,%r12
  104db7:	53                   	push   %rbx
  104db8:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  104dbf:	89 75 b8             	mov    %esi,-0x48(%rbp)
  104dc2:	48 8b 77 60          	mov    0x60(%rdi),%rsi
  104dc6:	89 55 88             	mov    %edx,-0x78(%rbp)
  104dc9:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  104dcd:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
  104dd1:	66 0f d6 45 b0       	movq   %xmm0,-0x50(%rbp)
  104dd6:	48 85 f6             	test   %rsi,%rsi
  104dd9:	74 1d                	je     104df8 <_dtoa_r+0x58>
  104ddb:	8b 4f 68             	mov    0x68(%rdi),%ecx
  104dde:	b8 01 00 00 00       	mov    $0x1,%eax
  104de3:	d3 e0                	shl    %cl,%eax
  104de5:	89 4e 08             	mov    %ecx,0x8(%rsi)
  104de8:	89 46 0c             	mov    %eax,0xc(%rsi)
  104deb:	e8 80 21 00 00       	callq  106f70 <_Bfree>
  104df0:	49 c7 45 60 00 00 00 	movq   $0x0,0x60(%r13)
  104df7:	00 
  104df8:	4c 89 e0             	mov    %r12,%rax
  104dfb:	48 c1 e8 20          	shr    $0x20,%rax
  104dff:	89 c3                	mov    %eax,%ebx
  104e01:	85 c0                	test   %eax,%eax
  104e03:	0f 88 3f 04 00 00    	js     105248 <_dtoa_r+0x4a8>
  104e09:	89 d8                	mov    %ebx,%eax
  104e0b:	41 c7 06 00 00 00 00 	movl   $0x0,(%r14)
  104e12:	66 49 0f 6e d4       	movq   %r12,%xmm2
  104e17:	25 00 00 f0 7f       	and    $0x7ff00000,%eax
  104e1c:	3d 00 00 f0 7f       	cmp    $0x7ff00000,%eax
  104e21:	0f 84 56 04 00 00    	je     10527d <_dtoa_r+0x4dd>
  104e27:	66 0f ef f6          	pxor   %xmm6,%xmm6
  104e2b:	66 0f 2e d6          	ucomisd %xmm6,%xmm2
  104e2f:	7a 3f                	jp     104e70 <_dtoa_r+0xd0>
  104e31:	75 3d                	jne    104e70 <_dtoa_r+0xd0>
  104e33:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  104e37:	41 be 9f 14 11 00    	mov    $0x11149f,%r14d
  104e3d:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  104e43:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  104e47:	48 85 c0             	test   %rax,%rax
  104e4a:	74 07                	je     104e53 <_dtoa_r+0xb3>
  104e4c:	48 c7 00 a0 14 11 00 	movq   $0x1114a0,(%rax)
  104e53:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  104e5a:	4c 89 f0             	mov    %r14,%rax
  104e5d:	5b                   	pop    %rbx
  104e5e:	41 5c                	pop    %r12
  104e60:	41 5d                	pop    %r13
  104e62:	41 5e                	pop    %r14
  104e64:	41 5f                	pop    %r15
  104e66:	5d                   	pop    %rbp
  104e67:	c3                   	retq   
  104e68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  104e6f:	00 
  104e70:	48 8d 75 cc          	lea    -0x34(%rbp),%rsi
  104e74:	66 0f 28 c2          	movapd %xmm2,%xmm0
  104e78:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  104e7c:	4c 89 ef             	mov    %r13,%rdi
  104e7f:	f2 0f 11 55 a8       	movsd  %xmm2,-0x58(%rbp)
  104e84:	e8 d7 2a 00 00       	callq  107960 <__d2b>
  104e89:	89 de                	mov    %ebx,%esi
  104e8b:	f2 0f 10 55 a8       	movsd  -0x58(%rbp),%xmm2
  104e90:	c1 ee 14             	shr    $0x14,%esi
  104e93:	49 89 c7             	mov    %rax,%r15
  104e96:	0f 85 24 04 00 00    	jne    1052c0 <_dtoa_r+0x520>
  104e9c:	8b 55 c8             	mov    -0x38(%rbp),%edx
  104e9f:	8b 75 cc             	mov    -0x34(%rbp),%esi
  104ea2:	01 d6                	add    %edx,%esi
  104ea4:	8d 86 32 04 00 00    	lea    0x432(%rsi),%eax
  104eaa:	83 f8 20             	cmp    $0x20,%eax
  104ead:	0f 8e 55 06 00 00    	jle    105508 <_dtoa_r+0x768>
  104eb3:	b9 40 00 00 00       	mov    $0x40,%ecx
  104eb8:	29 c1                	sub    %eax,%ecx
  104eba:	d3 e3                	shl    %cl,%ebx
  104ebc:	8d 8e 12 04 00 00    	lea    0x412(%rsi),%ecx
  104ec2:	41 d3 ec             	shr    %cl,%r12d
  104ec5:	44 09 e3             	or     %r12d,%ebx
  104ec8:	66 0f ef ff          	pxor   %xmm7,%xmm7
  104ecc:	83 ee 01             	sub    $0x1,%esi
  104ecf:	c7 85 5c ff ff ff 01 	movl   $0x1,-0xa4(%rbp)
  104ed6:	00 00 00 
  104ed9:	f2 48 0f 2a fb       	cvtsi2sd %rbx,%xmm7
  104ede:	66 48 0f 7e f9       	movq   %xmm7,%rcx
  104ee3:	66 48 0f 7e f8       	movq   %xmm7,%rax
  104ee8:	48 c1 e9 20          	shr    $0x20,%rcx
  104eec:	89 c0                	mov    %eax,%eax
  104eee:	81 e9 00 00 f0 01    	sub    $0x1f00000,%ecx
  104ef4:	48 c1 e1 20          	shl    $0x20,%rcx
  104ef8:	48 09 c8             	or     %rcx,%rax
  104efb:	66 48 0f 6e c0       	movq   %rax,%xmm0
  104f00:	f2 0f 5c 05 b0 be 00 	subsd  0xbeb0(%rip),%xmm0        # 110db8 <uart_ns16550_dev_cfg_0+0x448>
  104f07:	00 
  104f08:	f2 0f 10 0d b8 be 00 	movsd  0xbeb8(%rip),%xmm1        # 110dc8 <uart_ns16550_dev_cfg_0+0x458>
  104f0f:	00 
  104f10:	66 0f ef ff          	pxor   %xmm7,%xmm7
  104f14:	f2 0f 59 05 a4 be 00 	mulsd  0xbea4(%rip),%xmm0        # 110dc0 <uart_ns16550_dev_cfg_0+0x450>
  104f1b:	00 
  104f1c:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  104f20:	66 0f ef c0          	pxor   %xmm0,%xmm0
  104f24:	f2 0f 2a c6          	cvtsi2sd %esi,%xmm0
  104f28:	f2 0f 59 05 a0 be 00 	mulsd  0xbea0(%rip),%xmm0        # 110dd0 <uart_ns16550_dev_cfg_0+0x460>
  104f2f:	00 
  104f30:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  104f34:	66 0f 2f f8          	comisd %xmm0,%xmm7
  104f38:	f2 44 0f 2c f0       	cvttsd2si %xmm0,%r14d
  104f3d:	0f 87 9d 05 00 00    	ja     1054e0 <_dtoa_r+0x740>
  104f43:	29 f2                	sub    %esi,%edx
  104f45:	44 8d 42 ff          	lea    -0x1(%rdx),%r8d
  104f49:	41 83 fe 16          	cmp    $0x16,%r14d
  104f4d:	0f 87 2d 05 00 00    	ja     105480 <_dtoa_r+0x6e0>
  104f53:	49 63 c6             	movslq %r14d,%rax
  104f56:	f2 0f 10 04 c5 c0 05 	movsd  0x1105c0(,%rax,8),%xmm0
  104f5d:	11 00 
  104f5f:	66 0f 2f c2          	comisd %xmm2,%xmm0
  104f63:	0f 86 af 04 00 00    	jbe    105418 <_dtoa_r+0x678>
  104f69:	c7 45 80 00 00 00 00 	movl   $0x0,-0x80(%rbp)
  104f70:	41 83 ee 01          	sub    $0x1,%r14d
  104f74:	45 31 c9             	xor    %r9d,%r9d
  104f77:	45 85 c0             	test   %r8d,%r8d
  104f7a:	0f 88 13 05 00 00    	js     105493 <_dtoa_r+0x6f3>
  104f80:	45 85 f6             	test   %r14d,%r14d
  104f83:	0f 89 9e 04 00 00    	jns    105427 <_dtoa_r+0x687>
  104f89:	8b 45 b8             	mov    -0x48(%rbp),%eax
  104f8c:	45 89 f4             	mov    %r14d,%r12d
  104f8f:	44 89 75 84          	mov    %r14d,-0x7c(%rbp)
  104f93:	45 29 f1             	sub    %r14d,%r9d
  104f96:	41 f7 dc             	neg    %r12d
  104f99:	45 31 f6             	xor    %r14d,%r14d
  104f9c:	bb 01 00 00 00       	mov    $0x1,%ebx
  104fa1:	83 f8 09             	cmp    $0x9,%eax
  104fa4:	0f 87 98 04 00 00    	ja     105442 <_dtoa_r+0x6a2>
  104faa:	83 f8 05             	cmp    $0x5,%eax
  104fad:	7e 08                	jle    104fb7 <_dtoa_r+0x217>
  104faf:	83 e8 04             	sub    $0x4,%eax
  104fb2:	31 db                	xor    %ebx,%ebx
  104fb4:	89 45 b8             	mov    %eax,-0x48(%rbp)
  104fb7:	8b 45 b8             	mov    -0x48(%rbp),%eax
  104fba:	83 f8 04             	cmp    $0x4,%eax
  104fbd:	0f 84 d5 0d 00 00    	je     105d98 <_dtoa_r+0xff8>
  104fc3:	83 f8 05             	cmp    $0x5,%eax
  104fc6:	0f 84 ec 09 00 00    	je     1059b8 <_dtoa_r+0xc18>
  104fcc:	83 f8 02             	cmp    $0x2,%eax
  104fcf:	0f 85 d3 04 00 00    	jne    1054a8 <_dtoa_r+0x708>
  104fd5:	c7 85 78 ff ff ff 00 	movl   $0x0,-0x88(%rbp)
  104fdc:	00 00 00 
  104fdf:	8b 45 88             	mov    -0x78(%rbp),%eax
  104fe2:	85 c0                	test   %eax,%eax
  104fe4:	0f 8e 66 0a 00 00    	jle    105a50 <_dtoa_r+0xcb0>
  104fea:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%rbp)
  104ff0:	89 45 98             	mov    %eax,-0x68(%rbp)
  104ff3:	41 c7 45 68 00 00 00 	movl   $0x0,0x68(%r13)
  104ffa:	00 
  104ffb:	48 63 f8             	movslq %eax,%rdi
  104ffe:	83 f8 1f             	cmp    $0x1f,%eax
  105001:	0f 8e fe 12 00 00    	jle    106305 <_dtoa_r+0x1565>
  105007:	b9 01 00 00 00       	mov    $0x1,%ecx
  10500c:	ba 04 00 00 00       	mov    $0x4,%edx
  105011:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  105018:	01 d2                	add    %edx,%edx
  10501a:	89 ce                	mov    %ecx,%esi
  10501c:	8d 49 01             	lea    0x1(%rcx),%ecx
  10501f:	48 63 c2             	movslq %edx,%rax
  105022:	48 83 c0 1c          	add    $0x1c,%rax
  105026:	48 39 c7             	cmp    %rax,%rdi
  105029:	73 ed                	jae    105018 <_dtoa_r+0x278>
  10502b:	41 89 75 68          	mov    %esi,0x68(%r13)
  10502f:	4c 89 ef             	mov    %r13,%rdi
  105032:	44 89 85 68 ff ff ff 	mov    %r8d,-0x98(%rbp)
  105039:	44 89 8d 70 ff ff ff 	mov    %r9d,-0x90(%rbp)
  105040:	f2 0f 11 95 60 ff ff 	movsd  %xmm2,-0xa0(%rbp)
  105047:	ff 
  105048:	e8 83 1e 00 00       	callq  106ed0 <_Balloc>
  10504d:	44 8b 8d 70 ff ff ff 	mov    -0x90(%rbp),%r9d
  105054:	44 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%r8d
  10505b:	48 85 c0             	test   %rax,%rax
  10505e:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  105062:	f2 0f 10 95 60 ff ff 	movsd  -0xa0(%rbp),%xmm2
  105069:	ff 
  10506a:	0f 84 14 12 00 00    	je     106284 <_dtoa_r+0x14e4>
  105070:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  105074:	49 89 45 60          	mov    %rax,0x60(%r13)
  105078:	8b 45 98             	mov    -0x68(%rbp),%eax
  10507b:	83 f8 0e             	cmp    $0xe,%eax
  10507e:	41 89 c3             	mov    %eax,%r11d
  105081:	0f 96 c0             	setbe  %al
  105084:	20 c3                	and    %al,%bl
  105086:	0f 84 ea 02 00 00    	je     105376 <_dtoa_r+0x5d6>
  10508c:	8b 7d 84             	mov    -0x7c(%rbp),%edi
  10508f:	85 ff                	test   %edi,%edi
  105091:	0f 8e f1 07 00 00    	jle    105888 <_dtoa_r+0xae8>
  105097:	89 f8                	mov    %edi,%eax
  105099:	89 fa                	mov    %edi,%edx
  10509b:	83 e0 0f             	and    $0xf,%eax
  10509e:	c1 fa 04             	sar    $0x4,%edx
  1050a1:	81 e7 00 01 00 00    	and    $0x100,%edi
  1050a7:	f2 0f 10 0c c5 c0 05 	movsd  0x1105c0(,%rax,8),%xmm1
  1050ae:	11 00 
  1050b0:	0f 84 8a 09 00 00    	je     105a40 <_dtoa_r+0xca0>
  1050b6:	83 e2 0f             	and    $0xf,%edx
  1050b9:	b8 03 00 00 00       	mov    $0x3,%eax
  1050be:	66 0f 28 c2          	movapd %xmm2,%xmm0
  1050c2:	f2 0f 5e 05 d6 b4 00 	divsd  0xb4d6(%rip),%xmm0        # 1105a0 <__mprec_bigtens+0x20>
  1050c9:	00 
  1050ca:	85 d2                	test   %edx,%edx
  1050cc:	74 1e                	je     1050ec <_dtoa_r+0x34c>
  1050ce:	b9 80 05 11 00       	mov    $0x110580,%ecx
  1050d3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  1050d8:	f6 c2 01             	test   $0x1,%dl
  1050db:	74 07                	je     1050e4 <_dtoa_r+0x344>
  1050dd:	f2 0f 59 09          	mulsd  (%rcx),%xmm1
  1050e1:	83 c0 01             	add    $0x1,%eax
  1050e4:	48 83 c1 08          	add    $0x8,%rcx
  1050e8:	d1 fa                	sar    %edx
  1050ea:	75 ec                	jne    1050d8 <_dtoa_r+0x338>
  1050ec:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
  1050f0:	8b 5d 80             	mov    -0x80(%rbp),%ebx
  1050f3:	85 db                	test   %ebx,%ebx
  1050f5:	74 12                	je     105109 <_dtoa_r+0x369>
  1050f7:	f2 0f 10 2d e1 b8 00 	movsd  0xb8e1(%rip),%xmm5        # 1109e0 <uart_ns16550_dev_cfg_0+0x70>
  1050fe:	00 
  1050ff:	66 0f 2f e8          	comisd %xmm0,%xmm5
  105103:	0f 87 d7 0c 00 00    	ja     105de0 <_dtoa_r+0x1040>
  105109:	66 0f ef c9          	pxor   %xmm1,%xmm1
  10510d:	8b 7d 98             	mov    -0x68(%rbp),%edi
  105110:	f2 0f 2a c8          	cvtsi2sd %eax,%xmm1
  105114:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  105118:	f2 0f 58 0d c0 bc 00 	addsd  0xbcc0(%rip),%xmm1        # 110de0 <uart_ns16550_dev_cfg_0+0x470>
  10511f:	00 
  105120:	66 48 0f 7e ca       	movq   %xmm1,%rdx
  105125:	66 48 0f 7e c8       	movq   %xmm1,%rax
  10512a:	48 c1 ea 20          	shr    $0x20,%rdx
  10512e:	89 c0                	mov    %eax,%eax
  105130:	81 ea 00 00 40 03    	sub    $0x3400000,%edx
  105136:	48 c1 e2 20          	shl    $0x20,%rdx
  10513a:	48 09 d0             	or     %rdx,%rax
  10513d:	85 ff                	test   %edi,%edi
  10513f:	0f 84 03 02 00 00    	je     105348 <_dtoa_r+0x5a8>
  105145:	8b 5d 84             	mov    -0x7c(%rbp),%ebx
  105148:	8b 4d 98             	mov    -0x68(%rbp),%ecx
  10514b:	f2 0f 2c f0          	cvttsd2si %xmm0,%esi
  10514f:	66 0f ef c9          	pxor   %xmm1,%xmm1
  105153:	4c 8b 55 a8          	mov    -0x58(%rbp),%r10
  105157:	66 48 0f 6e d8       	movq   %rax,%xmm3
  10515c:	8d 41 ff             	lea    -0x1(%rcx),%eax
  10515f:	48 98                	cltq   
  105161:	49 8d 52 01          	lea    0x1(%r10),%rdx
  105165:	f2 0f 10 24 c5 c0 05 	movsd  0x1105c0(,%rax,8),%xmm4
  10516c:	11 00 
  10516e:	f2 0f 2a ce          	cvtsi2sd %esi,%xmm1
  105172:	8d 7e 30             	lea    0x30(%rsi),%edi
  105175:	8b b5 78 ff ff ff    	mov    -0x88(%rbp),%esi
  10517b:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  10517f:	85 f6                	test   %esi,%esi
  105181:	0f 84 e1 08 00 00    	je     105a68 <_dtoa_r+0xcc8>
  105187:	f2 0f 10 0d 89 b8 00 	movsd  0xb889(%rip),%xmm1        # 110a18 <uart_ns16550_dev_cfg_0+0xa8>
  10518e:	00 
  10518f:	41 88 3a             	mov    %dil,(%r10)
  105192:	f2 0f 5e cc          	divsd  %xmm4,%xmm1
  105196:	f2 0f 5c cb          	subsd  %xmm3,%xmm1
  10519a:	66 0f 2f c8          	comisd %xmm0,%xmm1
  10519e:	0f 87 9c 10 00 00    	ja     106240 <_dtoa_r+0x14a0>
  1051a4:	be 01 00 00 00       	mov    $0x1,%esi
  1051a9:	f2 0f 10 2d 2f b8 00 	movsd  0xb82f(%rip),%xmm5        # 1109e0 <uart_ns16550_dev_cfg_0+0x70>
  1051b0:	00 
  1051b1:	f2 0f 10 25 1f bc 00 	movsd  0xbc1f(%rip),%xmm4        # 110dd8 <uart_ns16550_dev_cfg_0+0x468>
  1051b8:	00 
  1051b9:	48 89 d0             	mov    %rdx,%rax
  1051bc:	29 d6                	sub    %edx,%esi
  1051be:	eb 37                	jmp    1051f7 <_dtoa_r+0x457>
  1051c0:	8d 14 06             	lea    (%rsi,%rax,1),%edx
  1051c3:	39 ca                	cmp    %ecx,%edx
  1051c5:	0f 8d a6 01 00 00    	jge    105371 <_dtoa_r+0x5d1>
  1051cb:	f2 0f 59 c4          	mulsd  %xmm4,%xmm0
  1051cf:	66 0f ef db          	pxor   %xmm3,%xmm3
  1051d3:	48 83 c0 01          	add    $0x1,%rax
  1051d7:	f2 0f 59 cc          	mulsd  %xmm4,%xmm1
  1051db:	f2 0f 2c d0          	cvttsd2si %xmm0,%edx
  1051df:	f2 0f 2a da          	cvtsi2sd %edx,%xmm3
  1051e3:	83 c2 30             	add    $0x30,%edx
  1051e6:	88 50 ff             	mov    %dl,-0x1(%rax)
  1051e9:	f2 0f 5c c3          	subsd  %xmm3,%xmm0
  1051ed:	66 0f 2f c8          	comisd %xmm0,%xmm1
  1051f1:	0f 87 af 0e 00 00    	ja     1060a6 <_dtoa_r+0x1306>
  1051f7:	66 0f 28 dd          	movapd %xmm5,%xmm3
  1051fb:	f2 0f 5c d8          	subsd  %xmm0,%xmm3
  1051ff:	66 0f 2f cb          	comisd %xmm3,%xmm1
  105203:	76 bb                	jbe    1051c0 <_dtoa_r+0x420>
  105205:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  105209:	eb 0e                	jmp    105219 <_dtoa_r+0x479>
  10520b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  105210:	48 39 c6             	cmp    %rax,%rsi
  105213:	0f 84 94 0d 00 00    	je     105fad <_dtoa_r+0x120d>
  105219:	48 89 c1             	mov    %rax,%rcx
  10521c:	0f b6 50 ff          	movzbl -0x1(%rax),%edx
  105220:	48 83 e8 01          	sub    $0x1,%rax
  105224:	80 fa 39             	cmp    $0x39,%dl
  105227:	74 e7                	je     105210 <_dtoa_r+0x470>
  105229:	48 89 75 a8          	mov    %rsi,-0x58(%rbp)
  10522d:	83 c2 01             	add    $0x1,%edx
  105230:	4c 8b 75 a8          	mov    -0x58(%rbp),%r14
  105234:	88 10                	mov    %dl,(%rax)
  105236:	83 c3 01             	add    $0x1,%ebx
  105239:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
  10523d:	e9 4f 04 00 00       	jmpq   105691 <_dtoa_r+0x8f1>
  105242:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  105248:	81 e3 ff ff ff 7f    	and    $0x7fffffff,%ebx
  10524e:	8b 55 b0             	mov    -0x50(%rbp),%edx
  105251:	41 c7 06 01 00 00 00 	movl   $0x1,(%r14)
  105258:	48 89 d8             	mov    %rbx,%rax
  10525b:	48 c1 e0 20          	shl    $0x20,%rax
  10525f:	48 09 c2             	or     %rax,%rdx
  105262:	89 d8                	mov    %ebx,%eax
  105264:	25 00 00 f0 7f       	and    $0x7ff00000,%eax
  105269:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
  10526d:	66 48 0f 6e d2       	movq   %rdx,%xmm2
  105272:	3d 00 00 f0 7f       	cmp    $0x7ff00000,%eax
  105277:	0f 85 aa fb ff ff    	jne    104e27 <_dtoa_r+0x87>
  10527d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  105281:	66 48 0f 7e d3       	movq   %xmm2,%rbx
  105286:	c7 00 0f 27 00 00    	movl   $0x270f,(%rax)
  10528c:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffff,%rax
  105293:	ff 0f 00 
  105296:	48 85 c3             	test   %rax,%rbx
  105299:	74 65                	je     105300 <_dtoa_r+0x560>
  10529b:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
  1052a0:	41 be 33 15 11 00    	mov    $0x111533,%r14d
  1052a6:	b8 36 15 11 00       	mov    $0x111536,%eax
  1052ab:	0f 84 a2 fb ff ff    	je     104e53 <_dtoa_r+0xb3>
  1052b1:	48 8b 5d a0          	mov    -0x60(%rbp),%rbx
  1052b5:	48 89 03             	mov    %rax,(%rbx)
  1052b8:	e9 96 fb ff ff       	jmpq   104e53 <_dtoa_r+0xb3>
  1052bd:	0f 1f 00             	nopl   (%rax)
  1052c0:	66 48 0f 7e d2       	movq   %xmm2,%rdx
  1052c5:	66 48 0f 7e d0       	movq   %xmm2,%rax
  1052ca:	c7 85 5c ff ff ff 00 	movl   $0x0,-0xa4(%rbp)
  1052d1:	00 00 00 
  1052d4:	81 ee ff 03 00 00    	sub    $0x3ff,%esi
  1052da:	48 c1 ea 20          	shr    $0x20,%rdx
  1052de:	89 c0                	mov    %eax,%eax
  1052e0:	81 e2 ff ff 0f 00    	and    $0xfffff,%edx
  1052e6:	48 81 ca 00 00 f0 3f 	or     $0x3ff00000,%rdx
  1052ed:	48 c1 e2 20          	shl    $0x20,%rdx
  1052f1:	48 09 d0             	or     %rdx,%rax
  1052f4:	8b 55 c8             	mov    -0x38(%rbp),%edx
  1052f7:	e9 ff fb ff ff       	jmpq   104efb <_dtoa_r+0x15b>
  1052fc:	0f 1f 40 00          	nopl   0x0(%rax)
  105300:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
  105305:	41 be 2a 15 11 00    	mov    $0x11152a,%r14d
  10530b:	b8 32 15 11 00       	mov    $0x111532,%eax
  105310:	75 9f                	jne    1052b1 <_dtoa_r+0x511>
  105312:	e9 3c fb ff ff       	jmpq   104e53 <_dtoa_r+0xb3>
  105317:	66 0f ef c9          	pxor   %xmm1,%xmm1
  10531b:	f2 0f 2a c8          	cvtsi2sd %eax,%xmm1
  10531f:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  105323:	f2 0f 58 0d b5 ba 00 	addsd  0xbab5(%rip),%xmm1        # 110de0 <uart_ns16550_dev_cfg_0+0x470>
  10532a:	00 
  10532b:	66 48 0f 7e ca       	movq   %xmm1,%rdx
  105330:	66 48 0f 7e c8       	movq   %xmm1,%rax
  105335:	48 c1 ea 20          	shr    $0x20,%rdx
  105339:	89 c0                	mov    %eax,%eax
  10533b:	81 ea 00 00 40 03    	sub    $0x3400000,%edx
  105341:	48 c1 e2 20          	shl    $0x20,%rdx
  105345:	48 09 d0             	or     %rdx,%rax
  105348:	f2 0f 5c 05 98 ba 00 	subsd  0xba98(%rip),%xmm0        # 110de8 <uart_ns16550_dev_cfg_0+0x478>
  10534f:	00 
  105350:	66 48 0f 6e c8       	movq   %rax,%xmm1
  105355:	66 0f 2f c1          	comisd %xmm1,%xmm0
  105359:	0f 87 4b 0b 00 00    	ja     105eaa <_dtoa_r+0x110a>
  10535f:	66 0f 57 0d 99 b3 00 	xorpd  0xb399(%rip),%xmm1        # 110700 <blanks.1+0x20>
  105366:	00 
  105367:	66 0f 2f c8          	comisd %xmm0,%xmm1
  10536b:	0f 87 4f 09 00 00    	ja     105cc0 <_dtoa_r+0xf20>
  105371:	66 0f d6 55 b0       	movq   %xmm2,-0x50(%rbp)
  105376:	8b 45 cc             	mov    -0x34(%rbp),%eax
  105379:	85 c0                	test   %eax,%eax
  10537b:	78 0c                	js     105389 <_dtoa_r+0x5e9>
  10537d:	8b 5d 84             	mov    -0x7c(%rbp),%ebx
  105380:	83 fb 0e             	cmp    $0xe,%ebx
  105383:	0f 8e 67 05 00 00    	jle    1058f0 <_dtoa_r+0xb50>
  105389:	8b 95 78 ff ff ff    	mov    -0x88(%rbp),%edx
  10538f:	85 d2                	test   %edx,%edx
  105391:	0f 84 89 01 00 00    	je     105520 <_dtoa_r+0x780>
  105397:	83 7d b8 01          	cmpl   $0x1,-0x48(%rbp)
  10539b:	0f 8e af 0a 00 00    	jle    105e50 <_dtoa_r+0x10b0>
  1053a1:	8b 45 98             	mov    -0x68(%rbp),%eax
  1053a4:	83 e8 01             	sub    $0x1,%eax
  1053a7:	41 39 c4             	cmp    %eax,%r12d
  1053aa:	0f 8d 8f 09 00 00    	jge    105d3f <_dtoa_r+0xf9f>
  1053b0:	89 c2                	mov    %eax,%edx
  1053b2:	31 c9                	xor    %ecx,%ecx
  1053b4:	44 29 e2             	sub    %r12d,%edx
  1053b7:	41 89 c4             	mov    %eax,%r12d
  1053ba:	41 01 d6             	add    %edx,%r14d
  1053bd:	8b 45 98             	mov    -0x68(%rbp),%eax
  1053c0:	44 89 cb             	mov    %r9d,%ebx
  1053c3:	29 c3                	sub    %eax,%ebx
  1053c5:	85 c0                	test   %eax,%eax
  1053c7:	78 09                	js     1053d2 <_dtoa_r+0x632>
  1053c9:	44 89 cb             	mov    %r9d,%ebx
  1053cc:	41 01 c0             	add    %eax,%r8d
  1053cf:	41 01 c1             	add    %eax,%r9d
  1053d2:	be 01 00 00 00       	mov    $0x1,%esi
  1053d7:	4c 89 ef             	mov    %r13,%rdi
  1053da:	44 89 85 5c ff ff ff 	mov    %r8d,-0xa4(%rbp)
  1053e1:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%rbp)
  1053e7:	44 89 8d 68 ff ff ff 	mov    %r9d,-0x98(%rbp)
  1053ee:	e8 7d 1d 00 00       	callq  107170 <__i2b>
  1053f3:	44 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%r9d
  1053fa:	8b 8d 60 ff ff ff    	mov    -0xa0(%rbp),%ecx
  105400:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  105407:	44 8b 85 5c ff ff ff 	mov    -0xa4(%rbp),%r8d
  10540e:	e9 1e 01 00 00       	jmpq   105531 <_dtoa_r+0x791>
  105413:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  105418:	c7 45 80 00 00 00 00 	movl   $0x0,-0x80(%rbp)
  10541f:	45 31 c9             	xor    %r9d,%r9d
  105422:	45 85 c0             	test   %r8d,%r8d
  105425:	78 6c                	js     105493 <_dtoa_r+0x6f3>
  105427:	8b 45 b8             	mov    -0x48(%rbp),%eax
  10542a:	44 89 75 84          	mov    %r14d,-0x7c(%rbp)
  10542e:	45 01 f0             	add    %r14d,%r8d
  105431:	45 31 e4             	xor    %r12d,%r12d
  105434:	bb 01 00 00 00       	mov    $0x1,%ebx
  105439:	83 f8 09             	cmp    $0x9,%eax
  10543c:	0f 86 68 fb ff ff    	jbe    104faa <_dtoa_r+0x20a>
  105442:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%rbp)
  105449:	c7 85 78 ff ff ff 01 	movl   $0x1,-0x88(%rbp)
  105450:	00 00 00 
  105453:	c7 45 98 ff ff ff ff 	movl   $0xffffffff,-0x68(%rbp)
  10545a:	c7 45 88 00 00 00 00 	movl   $0x0,-0x78(%rbp)
  105461:	8b 45 98             	mov    -0x68(%rbp),%eax
  105464:	41 c7 45 68 00 00 00 	movl   $0x0,0x68(%r13)
  10546b:	00 
  10546c:	31 f6                	xor    %esi,%esi
  10546e:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%rbp)
  105474:	e9 b6 fb ff ff       	jmpq   10502f <_dtoa_r+0x28f>
  105479:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  105480:	c7 45 80 01 00 00 00 	movl   $0x1,-0x80(%rbp)
  105487:	45 31 c9             	xor    %r9d,%r9d
  10548a:	45 85 c0             	test   %r8d,%r8d
  10548d:	0f 89 ed fa ff ff    	jns    104f80 <_dtoa_r+0x1e0>
  105493:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  105499:	45 31 c0             	xor    %r8d,%r8d
  10549c:	41 29 d1             	sub    %edx,%r9d
  10549f:	e9 dc fa ff ff       	jmpq   104f80 <_dtoa_r+0x1e0>
  1054a4:	0f 1f 40 00          	nopl   0x0(%rax)
  1054a8:	83 f8 03             	cmp    $0x3,%eax
  1054ab:	0f 85 e9 0d 00 00    	jne    10629a <_dtoa_r+0x14fa>
  1054b1:	c7 85 78 ff ff ff 00 	movl   $0x0,-0x88(%rbp)
  1054b8:	00 00 00 
  1054bb:	8b 45 88             	mov    -0x78(%rbp),%eax
  1054be:	03 45 84             	add    -0x7c(%rbp),%eax
  1054c1:	8d 78 01             	lea    0x1(%rax),%edi
  1054c4:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%rbp)
  1054ca:	b8 01 00 00 00       	mov    $0x1,%eax
  1054cf:	85 ff                	test   %edi,%edi
  1054d1:	89 7d 98             	mov    %edi,-0x68(%rbp)
  1054d4:	0f 4f c7             	cmovg  %edi,%eax
  1054d7:	e9 17 fb ff ff       	jmpq   104ff3 <_dtoa_r+0x253>
  1054dc:	0f 1f 40 00          	nopl   0x0(%rax)
  1054e0:	66 0f ef c9          	pxor   %xmm1,%xmm1
  1054e4:	f2 41 0f 2a ce       	cvtsi2sd %r14d,%xmm1
  1054e9:	66 0f 2e c8          	ucomisd %xmm0,%xmm1
  1054ed:	7a 0a                	jp     1054f9 <_dtoa_r+0x759>
  1054ef:	66 0f 2f c8          	comisd %xmm0,%xmm1
  1054f3:	0f 84 4a fa ff ff    	je     104f43 <_dtoa_r+0x1a3>
  1054f9:	41 83 ee 01          	sub    $0x1,%r14d
  1054fd:	e9 41 fa ff ff       	jmpq   104f43 <_dtoa_r+0x1a3>
  105502:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  105508:	b9 20 00 00 00       	mov    $0x20,%ecx
  10550d:	44 89 e3             	mov    %r12d,%ebx
  105510:	29 c1                	sub    %eax,%ecx
  105512:	d3 e3                	shl    %cl,%ebx
  105514:	e9 af f9 ff ff       	jmpq   104ec8 <_dtoa_r+0x128>
  105519:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  105520:	48 c7 85 70 ff ff ff 	movq   $0x0,-0x90(%rbp)
  105527:	00 00 00 00 
  10552b:	44 89 e1             	mov    %r12d,%ecx
  10552e:	44 89 cb             	mov    %r9d,%ebx
  105531:	85 db                	test   %ebx,%ebx
  105533:	7e 16                	jle    10554b <_dtoa_r+0x7ab>
  105535:	45 85 c0             	test   %r8d,%r8d
  105538:	7e 11                	jle    10554b <_dtoa_r+0x7ab>
  10553a:	44 39 c3             	cmp    %r8d,%ebx
  10553d:	44 89 c0             	mov    %r8d,%eax
  105540:	0f 4e c3             	cmovle %ebx,%eax
  105543:	41 29 c1             	sub    %eax,%r9d
  105546:	29 c3                	sub    %eax,%ebx
  105548:	41 29 c0             	sub    %eax,%r8d
  10554b:	45 85 e4             	test   %r12d,%r12d
  10554e:	74 21                	je     105571 <_dtoa_r+0x7d1>
  105550:	44 8b 9d 78 ff ff ff 	mov    -0x88(%rbp),%r11d
  105557:	45 85 db             	test   %r11d,%r11d
  10555a:	0f 84 18 09 00 00    	je     105e78 <_dtoa_r+0x10d8>
  105560:	85 c9                	test   %ecx,%ecx
  105562:	0f 8f 6b 07 00 00    	jg     105cd3 <_dtoa_r+0xf33>
  105568:	41 29 cc             	sub    %ecx,%r12d
  10556b:	0f 85 d8 07 00 00    	jne    105d49 <_dtoa_r+0xfa9>
  105571:	be 01 00 00 00       	mov    $0x1,%esi
  105576:	4c 89 ef             	mov    %r13,%rdi
  105579:	44 89 85 60 ff ff ff 	mov    %r8d,-0xa0(%rbp)
  105580:	44 89 8d 68 ff ff ff 	mov    %r9d,-0x98(%rbp)
  105587:	e8 e4 1b 00 00       	callq  107170 <__i2b>
  10558c:	45 85 f6             	test   %r14d,%r14d
  10558f:	44 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%r9d
  105596:	44 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%r8d
  10559d:	49 89 c4             	mov    %rax,%r12
  1055a0:	0f 8f 9a 03 00 00    	jg     105940 <_dtoa_r+0xba0>
  1055a6:	c7 85 68 ff ff ff 00 	movl   $0x0,-0x98(%rbp)
  1055ad:	00 00 00 
  1055b0:	83 7d b8 01          	cmpl   $0x1,-0x48(%rbp)
  1055b4:	0f 8e f6 07 00 00    	jle    105db0 <_dtoa_r+0x1010>
  1055ba:	45 85 f6             	test   %r14d,%r14d
  1055bd:	0f 85 b0 03 00 00    	jne    105973 <_dtoa_r+0xbd3>
  1055c3:	b8 01 00 00 00       	mov    $0x1,%eax
  1055c8:	44 01 c0             	add    %r8d,%eax
  1055cb:	83 e0 1f             	and    $0x1f,%eax
  1055ce:	0f 84 ec 00 00 00    	je     1056c0 <_dtoa_r+0x920>
  1055d4:	ba 20 00 00 00       	mov    $0x20,%edx
  1055d9:	29 c2                	sub    %eax,%edx
  1055db:	83 fa 04             	cmp    $0x4,%edx
  1055de:	0f 8e 6b 0c 00 00    	jle    10624f <_dtoa_r+0x14af>
  1055e4:	ba 1c 00 00 00       	mov    $0x1c,%edx
  1055e9:	29 c2                	sub    %eax,%edx
  1055eb:	41 01 d1             	add    %edx,%r9d
  1055ee:	01 d3                	add    %edx,%ebx
  1055f0:	41 01 d0             	add    %edx,%r8d
  1055f3:	45 85 c9             	test   %r9d,%r9d
  1055f6:	7e 1f                	jle    105617 <_dtoa_r+0x877>
  1055f8:	4c 89 fe             	mov    %r15,%rsi
  1055fb:	44 89 ca             	mov    %r9d,%edx
  1055fe:	4c 89 ef             	mov    %r13,%rdi
  105601:	44 89 85 60 ff ff ff 	mov    %r8d,-0xa0(%rbp)
  105608:	e8 83 1f 00 00       	callq  107590 <__lshift>
  10560d:	44 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%r8d
  105614:	49 89 c7             	mov    %rax,%r15
  105617:	45 85 c0             	test   %r8d,%r8d
  10561a:	7e 11                	jle    10562d <_dtoa_r+0x88d>
  10561c:	4c 89 e6             	mov    %r12,%rsi
  10561f:	44 89 c2             	mov    %r8d,%edx
  105622:	4c 89 ef             	mov    %r13,%rdi
  105625:	e8 66 1f 00 00       	callq  107590 <__lshift>
  10562a:	49 89 c4             	mov    %rax,%r12
  10562d:	44 8b 55 80          	mov    -0x80(%rbp),%r10d
  105631:	83 7d b8 02          	cmpl   $0x2,-0x48(%rbp)
  105635:	41 0f 9f c6          	setg   %r14b
  105639:	45 85 d2             	test   %r10d,%r10d
  10563c:	0f 85 8e 03 00 00    	jne    1059d0 <_dtoa_r+0xc30>
  105642:	8b 7d 98             	mov    -0x68(%rbp),%edi
  105645:	85 ff                	test   %edi,%edi
  105647:	0f 8f 8b 00 00 00    	jg     1056d8 <_dtoa_r+0x938>
  10564d:	45 84 f6             	test   %r14b,%r14b
  105650:	0f 84 82 00 00 00    	je     1056d8 <_dtoa_r+0x938>
  105656:	8b 75 98             	mov    -0x68(%rbp),%esi
  105659:	85 f6                	test   %esi,%esi
  10565b:	0f 84 9f 04 00 00    	je     105b00 <_dtoa_r+0xd60>
  105661:	8b 5d 88             	mov    -0x78(%rbp),%ebx
  105664:	4c 8b 75 a8          	mov    -0x58(%rbp),%r14
  105668:	f7 d3                	not    %ebx
  10566a:	4c 89 e6             	mov    %r12,%rsi
  10566d:	4c 89 ef             	mov    %r13,%rdi
  105670:	83 c3 01             	add    $0x1,%ebx
  105673:	e8 f8 18 00 00       	callq  106f70 <_Bfree>
  105678:	48 83 bd 70 ff ff ff 	cmpq   $0x0,-0x90(%rbp)
  10567f:	00 
  105680:	74 0f                	je     105691 <_dtoa_r+0x8f1>
  105682:	48 8b b5 70 ff ff ff 	mov    -0x90(%rbp),%rsi
  105689:	4c 89 ef             	mov    %r13,%rdi
  10568c:	e8 df 18 00 00       	callq  106f70 <_Bfree>
  105691:	4c 89 ef             	mov    %r13,%rdi
  105694:	4c 89 fe             	mov    %r15,%rsi
  105697:	e8 d4 18 00 00       	callq  106f70 <_Bfree>
  10569c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  1056a0:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  1056a4:	c6 00 00             	movb   $0x0,(%rax)
  1056a7:	89 1f                	mov    %ebx,(%rdi)
  1056a9:	48 8b 5d a0          	mov    -0x60(%rbp),%rbx
  1056ad:	48 85 db             	test   %rbx,%rbx
  1056b0:	0f 84 9d f7 ff ff    	je     104e53 <_dtoa_r+0xb3>
  1056b6:	48 89 03             	mov    %rax,(%rbx)
  1056b9:	e9 95 f7 ff ff       	jmpq   104e53 <_dtoa_r+0xb3>
  1056be:	66 90                	xchg   %ax,%ax
  1056c0:	ba 1c 00 00 00       	mov    $0x1c,%edx
  1056c5:	41 01 d1             	add    %edx,%r9d
  1056c8:	01 d3                	add    %edx,%ebx
  1056ca:	41 01 d0             	add    %edx,%r8d
  1056cd:	e9 21 ff ff ff       	jmpq   1055f3 <_dtoa_r+0x853>
  1056d2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  1056d8:	8b 8d 78 ff ff ff    	mov    -0x88(%rbp),%ecx
  1056de:	85 c9                	test   %ecx,%ecx
  1056e0:	0f 84 62 04 00 00    	je     105b48 <_dtoa_r+0xda8>
  1056e6:	85 db                	test   %ebx,%ebx
  1056e8:	7e 18                	jle    105702 <_dtoa_r+0x962>
  1056ea:	48 8b b5 70 ff ff ff 	mov    -0x90(%rbp),%rsi
  1056f1:	89 da                	mov    %ebx,%edx
  1056f3:	4c 89 ef             	mov    %r13,%rdi
  1056f6:	e8 95 1e 00 00       	callq  107590 <__lshift>
  1056fb:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  105702:	8b 95 68 ff ff ff    	mov    -0x98(%rbp),%edx
  105708:	4c 8b b5 70 ff ff ff 	mov    -0x90(%rbp),%r14
  10570f:	85 d2                	test   %edx,%edx
  105711:	0f 85 3f 09 00 00    	jne    106056 <_dtoa_r+0x12b6>
  105717:	8b 45 98             	mov    -0x68(%rbp),%eax
  10571a:	48 8b 5d a8          	mov    -0x58(%rbp),%rbx
  10571e:	4c 89 65 98          	mov    %r12,-0x68(%rbp)
  105722:	4c 8b a5 70 ff ff ff 	mov    -0x90(%rbp),%r12
  105729:	83 e8 01             	sub    $0x1,%eax
  10572c:	48 89 9d 78 ff ff ff 	mov    %rbx,-0x88(%rbp)
  105733:	48 8d 44 03 01       	lea    0x1(%rbx,%rax,1),%rax
  105738:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  10573f:	e9 ed 00 00 00       	jmpq   105831 <_dtoa_r+0xa91>
  105744:	0f 1f 40 00          	nopl   0x0(%rax)
  105748:	4c 89 ff             	mov    %r15,%rdi
  10574b:	48 89 b5 68 ff ff ff 	mov    %rsi,-0x98(%rbp)
  105752:	e8 99 1f 00 00       	callq  1076f0 <__mcmp>
  105757:	48 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%rsi
  10575e:	4c 89 ef             	mov    %r13,%rdi
  105761:	89 85 70 ff ff ff    	mov    %eax,-0x90(%rbp)
  105767:	e8 04 18 00 00       	callq  106f70 <_Bfree>
  10576c:	8b 4d b0             	mov    -0x50(%rbp),%ecx
  10576f:	8b 45 b8             	mov    -0x48(%rbp),%eax
  105772:	8b 95 70 ff ff ff    	mov    -0x90(%rbp),%edx
  105778:	83 e1 01             	and    $0x1,%ecx
  10577b:	09 d0                	or     %edx,%eax
  10577d:	09 c1                	or     %eax,%ecx
  10577f:	0f 84 ff 09 00 00    	je     106184 <_dtoa_r+0x13e4>
  105785:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  10578c:	4c 8d 40 01          	lea    0x1(%rax),%r8
  105790:	4c 89 c1             	mov    %r8,%rcx
  105793:	85 db                	test   %ebx,%ebx
  105795:	0f 88 3c 08 00 00    	js     105fd7 <_dtoa_r+0x1237>
  10579b:	8b 45 b0             	mov    -0x50(%rbp),%eax
  10579e:	0b 5d b8             	or     -0x48(%rbp),%ebx
  1057a1:	83 e0 01             	and    $0x1,%eax
  1057a4:	09 d8                	or     %ebx,%eax
  1057a6:	0f 84 2b 08 00 00    	je     105fd7 <_dtoa_r+0x1237>
  1057ac:	85 d2                	test   %edx,%edx
  1057ae:	0f 8f 37 09 00 00    	jg     1060eb <_dtoa_r+0x134b>
  1057b4:	0f b6 45 88          	movzbl -0x78(%rbp),%eax
  1057b8:	4c 39 85 60 ff ff ff 	cmp    %r8,-0xa0(%rbp)
  1057bf:	4c 89 85 78 ff ff ff 	mov    %r8,-0x88(%rbp)
  1057c6:	41 88 40 ff          	mov    %al,-0x1(%r8)
  1057ca:	0f 84 55 09 00 00    	je     106125 <_dtoa_r+0x1385>
  1057d0:	31 c9                	xor    %ecx,%ecx
  1057d2:	4c 89 fe             	mov    %r15,%rsi
  1057d5:	ba 0a 00 00 00       	mov    $0xa,%edx
  1057da:	4c 89 ef             	mov    %r13,%rdi
  1057dd:	e8 ae 17 00 00       	callq  106f90 <__multadd>
  1057e2:	4d 39 f4             	cmp    %r14,%r12
  1057e5:	b9 00 00 00 00       	mov    $0x0,%ecx
  1057ea:	4c 89 e6             	mov    %r12,%rsi
  1057ed:	4c 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%r8
  1057f4:	49 89 c7             	mov    %rax,%r15
  1057f7:	ba 0a 00 00 00       	mov    $0xa,%edx
  1057fc:	4c 89 ef             	mov    %r13,%rdi
  1057ff:	4c 89 45 88          	mov    %r8,-0x78(%rbp)
  105803:	0f 84 77 05 00 00    	je     105d80 <_dtoa_r+0xfe0>
  105809:	e8 82 17 00 00       	callq  106f90 <__multadd>
  10580e:	4c 89 f6             	mov    %r14,%rsi
  105811:	31 c9                	xor    %ecx,%ecx
  105813:	ba 0a 00 00 00       	mov    $0xa,%edx
  105818:	4c 89 ef             	mov    %r13,%rdi
  10581b:	49 89 c4             	mov    %rax,%r12
  10581e:	e8 6d 17 00 00       	callq  106f90 <__multadd>
  105823:	4c 8b 45 88          	mov    -0x78(%rbp),%r8
  105827:	49 89 c6             	mov    %rax,%r14
  10582a:	4c 89 85 78 ff ff ff 	mov    %r8,-0x88(%rbp)
  105831:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  105835:	4c 89 ff             	mov    %r15,%rdi
  105838:	e8 c3 f3 ff ff       	callq  104c00 <quorem>
  10583d:	4c 89 e6             	mov    %r12,%rsi
  105840:	4c 89 ff             	mov    %r15,%rdi
  105843:	89 45 80             	mov    %eax,-0x80(%rbp)
  105846:	83 c0 30             	add    $0x30,%eax
  105849:	89 45 88             	mov    %eax,-0x78(%rbp)
  10584c:	e8 9f 1e 00 00       	callq  1076f0 <__mcmp>
  105851:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  105855:	4c 89 f2             	mov    %r14,%rdx
  105858:	4c 89 ef             	mov    %r13,%rdi
  10585b:	89 c3                	mov    %eax,%ebx
  10585d:	e8 de 1e 00 00       	callq  107740 <__mdiff>
  105862:	48 89 c6             	mov    %rax,%rsi
  105865:	8b 40 10             	mov    0x10(%rax),%eax
  105868:	85 c0                	test   %eax,%eax
  10586a:	0f 84 d8 fe ff ff    	je     105748 <_dtoa_r+0x9a8>
  105870:	4c 89 ef             	mov    %r13,%rdi
  105873:	e8 f8 16 00 00       	callq  106f70 <_Bfree>
  105878:	ba 01 00 00 00       	mov    $0x1,%edx
  10587d:	e9 03 ff ff ff       	jmpq   105785 <_dtoa_r+0x9e5>
  105882:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  105888:	0f 84 e2 03 00 00    	je     105c70 <_dtoa_r+0xed0>
  10588e:	8b 55 84             	mov    -0x7c(%rbp),%edx
  105891:	f7 da                	neg    %edx
  105893:	89 d0                	mov    %edx,%eax
  105895:	83 e0 0f             	and    $0xf,%eax
  105898:	c1 fa 04             	sar    $0x4,%edx
  10589b:	f2 0f 10 0c c5 c0 05 	movsd  0x1105c0(,%rax,8),%xmm1
  1058a2:	11 00 
  1058a4:	f2 0f 59 ca          	mulsd  %xmm2,%xmm1
  1058a8:	0f 84 6f 09 00 00    	je     10621d <_dtoa_r+0x147d>
  1058ae:	b9 80 05 11 00       	mov    $0x110580,%ecx
  1058b3:	66 0f 28 c1          	movapd %xmm1,%xmm0
  1058b7:	31 f6                	xor    %esi,%esi
  1058b9:	b8 02 00 00 00       	mov    $0x2,%eax
  1058be:	66 90                	xchg   %ax,%ax
  1058c0:	f6 c2 01             	test   $0x1,%dl
  1058c3:	74 09                	je     1058ce <_dtoa_r+0xb2e>
  1058c5:	f2 0f 59 01          	mulsd  (%rcx),%xmm0
  1058c9:	83 c0 01             	add    $0x1,%eax
  1058cc:	89 de                	mov    %ebx,%esi
  1058ce:	48 83 c1 08          	add    $0x8,%rcx
  1058d2:	d1 fa                	sar    %edx
  1058d4:	75 ea                	jne    1058c0 <_dtoa_r+0xb20>
  1058d6:	40 84 f6             	test   %sil,%sil
  1058d9:	0f 85 11 f8 ff ff    	jne    1050f0 <_dtoa_r+0x350>
  1058df:	66 0f 28 c1          	movapd %xmm1,%xmm0
  1058e3:	e9 08 f8 ff ff       	jmpq   1050f0 <_dtoa_r+0x350>
  1058e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  1058ef:	00 
  1058f0:	8b 4d 88             	mov    -0x78(%rbp),%ecx
  1058f3:	48 63 c3             	movslq %ebx,%rax
  1058f6:	f2 0f 10 14 c5 c0 05 	movsd  0x1105c0(,%rax,8),%xmm2
  1058fd:	11 00 
  1058ff:	85 c9                	test   %ecx,%ecx
  105901:	0f 89 ce 05 00 00    	jns    105ed5 <_dtoa_r+0x1135>
  105907:	8b 45 98             	mov    -0x68(%rbp),%eax
  10590a:	85 c0                	test   %eax,%eax
  10590c:	0f 8f c3 05 00 00    	jg     105ed5 <_dtoa_r+0x1135>
  105912:	0f 85 a8 03 00 00    	jne    105cc0 <_dtoa_r+0xf20>
  105918:	f2 0f 59 15 c8 b4 00 	mulsd  0xb4c8(%rip),%xmm2        # 110de8 <uart_ns16550_dev_cfg_0+0x478>
  10591f:	00 
  105920:	45 31 e4             	xor    %r12d,%r12d
  105923:	48 c7 85 70 ff ff ff 	movq   $0x0,-0x90(%rbp)
  10592a:	00 00 00 00 
  10592e:	66 0f 2f 55 b0       	comisd -0x50(%rbp),%xmm2
  105933:	0f 83 28 fd ff ff    	jae    105661 <_dtoa_r+0x8c1>
  105939:	e9 ea 01 00 00       	jmpq   105b28 <_dtoa_r+0xd88>
  10593e:	66 90                	xchg   %ax,%ax
  105940:	44 89 f2             	mov    %r14d,%edx
  105943:	48 89 c6             	mov    %rax,%rsi
  105946:	4c 89 ef             	mov    %r13,%rdi
  105949:	e8 12 1b 00 00       	callq  107460 <__pow5mult>
  10594e:	83 7d b8 01          	cmpl   $0x1,-0x48(%rbp)
  105952:	44 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%r9d
  105959:	44 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%r8d
  105960:	49 89 c4             	mov    %rax,%r12
  105963:	0f 8e 15 03 00 00    	jle    105c7e <_dtoa_r+0xede>
  105969:	c7 85 68 ff ff ff 00 	movl   $0x0,-0x98(%rbp)
  105970:	00 00 00 
  105973:	41 8b 44 24 14       	mov    0x14(%r12),%eax
  105978:	44 89 85 5c ff ff ff 	mov    %r8d,-0xa4(%rbp)
  10597f:	44 89 8d 60 ff ff ff 	mov    %r9d,-0xa0(%rbp)
  105986:	83 e8 01             	sub    $0x1,%eax
  105989:	48 98                	cltq   
  10598b:	41 8b 7c 84 18       	mov    0x18(%r12,%rax,4),%edi
  105990:	e8 fb 16 00 00       	callq  107090 <__hi0bits>
  105995:	44 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%r9d
  10599c:	44 8b 85 5c ff ff ff 	mov    -0xa4(%rbp),%r8d
  1059a3:	41 89 c3             	mov    %eax,%r11d
  1059a6:	b8 20 00 00 00       	mov    $0x20,%eax
  1059ab:	44 29 d8             	sub    %r11d,%eax
  1059ae:	e9 15 fc ff ff       	jmpq   1055c8 <_dtoa_r+0x828>
  1059b3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  1059b8:	c7 85 78 ff ff ff 01 	movl   $0x1,-0x88(%rbp)
  1059bf:	00 00 00 
  1059c2:	e9 f4 fa ff ff       	jmpq   1054bb <_dtoa_r+0x71b>
  1059c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  1059ce:	00 00 
  1059d0:	4c 89 e6             	mov    %r12,%rsi
  1059d3:	4c 89 ff             	mov    %r15,%rdi
  1059d6:	e8 15 1d 00 00       	callq  1076f0 <__mcmp>
  1059db:	85 c0                	test   %eax,%eax
  1059dd:	0f 89 5f fc ff ff    	jns    105642 <_dtoa_r+0x8a2>
  1059e3:	8b 45 84             	mov    -0x7c(%rbp),%eax
  1059e6:	31 c9                	xor    %ecx,%ecx
  1059e8:	4c 89 fe             	mov    %r15,%rsi
  1059eb:	ba 0a 00 00 00       	mov    $0xa,%edx
  1059f0:	4c 89 ef             	mov    %r13,%rdi
  1059f3:	83 e8 01             	sub    $0x1,%eax
  1059f6:	89 45 98             	mov    %eax,-0x68(%rbp)
  1059f9:	e8 92 15 00 00       	callq  106f90 <__multadd>
  1059fe:	44 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%r8d
  105a05:	44 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%r9d
  105a0c:	49 89 c7             	mov    %rax,%r15
  105a0f:	45 85 c0             	test   %r8d,%r8d
  105a12:	0f 9e c0             	setle  %al
  105a15:	41 21 c6             	and    %eax,%r14d
  105a18:	45 85 c9             	test   %r9d,%r9d
  105a1b:	0f 85 c2 07 00 00    	jne    1061e3 <_dtoa_r+0x1443>
  105a21:	45 84 f6             	test   %r14b,%r14b
  105a24:	0f 85 a5 07 00 00    	jne    1061cf <_dtoa_r+0x142f>
  105a2a:	8b 85 58 ff ff ff    	mov    -0xa8(%rbp),%eax
  105a30:	8b 5d 84             	mov    -0x7c(%rbp),%ebx
  105a33:	89 45 98             	mov    %eax,-0x68(%rbp)
  105a36:	e9 13 01 00 00       	jmpq   105b4e <_dtoa_r+0xdae>
  105a3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  105a40:	66 0f 28 c2          	movapd %xmm2,%xmm0
  105a44:	b8 02 00 00 00       	mov    $0x2,%eax
  105a49:	e9 7c f6 ff ff       	jmpq   1050ca <_dtoa_r+0x32a>
  105a4e:	66 90                	xchg   %ax,%ax
  105a50:	c7 45 98 01 00 00 00 	movl   $0x1,-0x68(%rbp)
  105a57:	c7 45 88 01 00 00 00 	movl   $0x1,-0x78(%rbp)
  105a5e:	e9 fe f9 ff ff       	jmpq   105461 <_dtoa_r+0x6c1>
  105a63:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  105a68:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  105a6c:	f2 0f 59 e3          	mulsd  %xmm3,%xmm4
  105a70:	89 c8                	mov    %ecx,%eax
  105a72:	f2 0f 10 1d 5e b3 00 	movsd  0xb35e(%rip),%xmm3        # 110dd8 <uart_ns16550_dev_cfg_0+0x468>
  105a79:	00 
  105a7a:	40 88 3e             	mov    %dil,(%rsi)
  105a7d:	48 01 f0             	add    %rsi,%rax
  105a80:	83 f9 01             	cmp    $0x1,%ecx
  105a83:	0f 84 3e 07 00 00    	je     1061c7 <_dtoa_r+0x1427>
  105a89:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  105a90:	f2 0f 59 c3          	mulsd  %xmm3,%xmm0
  105a94:	66 0f ef c9          	pxor   %xmm1,%xmm1
  105a98:	48 83 c2 01          	add    $0x1,%rdx
  105a9c:	f2 0f 2c c8          	cvttsd2si %xmm0,%ecx
  105aa0:	f2 0f 2a c9          	cvtsi2sd %ecx,%xmm1
  105aa4:	83 c1 30             	add    $0x30,%ecx
  105aa7:	88 4a ff             	mov    %cl,-0x1(%rdx)
  105aaa:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  105aae:	48 39 c2             	cmp    %rax,%rdx
  105ab1:	75 dd                	jne    105a90 <_dtoa_r+0xcf0>
  105ab3:	f2 0f 10 0d 5d af 00 	movsd  0xaf5d(%rip),%xmm1        # 110a18 <uart_ns16550_dev_cfg_0+0xa8>
  105aba:	00 
  105abb:	66 0f 28 dc          	movapd %xmm4,%xmm3
  105abf:	f2 0f 58 d9          	addsd  %xmm1,%xmm3
  105ac3:	66 0f 2f c3          	comisd %xmm3,%xmm0
  105ac7:	0f 87 38 f7 ff ff    	ja     105205 <_dtoa_r+0x465>
  105acd:	f2 0f 5c cc          	subsd  %xmm4,%xmm1
  105ad1:	66 0f 2f c8          	comisd %xmm0,%xmm1
  105ad5:	0f 86 96 f8 ff ff    	jbe    105371 <_dtoa_r+0x5d1>
  105adb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  105ae0:	48 89 c2             	mov    %rax,%rdx
  105ae3:	48 83 e8 01          	sub    $0x1,%rax
  105ae7:	80 38 30             	cmpb   $0x30,(%rax)
  105aea:	74 f4                	je     105ae0 <_dtoa_r+0xd40>
  105aec:	4c 8b 75 a8          	mov    -0x58(%rbp),%r14
  105af0:	83 c3 01             	add    $0x1,%ebx
  105af3:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  105af7:	e9 95 fb ff ff       	jmpq   105691 <_dtoa_r+0x8f1>
  105afc:	0f 1f 40 00          	nopl   0x0(%rax)
  105b00:	4c 89 e6             	mov    %r12,%rsi
  105b03:	31 c9                	xor    %ecx,%ecx
  105b05:	4c 89 ef             	mov    %r13,%rdi
  105b08:	ba 05 00 00 00       	mov    $0x5,%edx
  105b0d:	e8 7e 14 00 00       	callq  106f90 <__multadd>
  105b12:	4c 89 ff             	mov    %r15,%rdi
  105b15:	48 89 c6             	mov    %rax,%rsi
  105b18:	49 89 c4             	mov    %rax,%r12
  105b1b:	e8 d0 1b 00 00       	callq  1076f0 <__mcmp>
  105b20:	85 c0                	test   %eax,%eax
  105b22:	0f 8e 39 fb ff ff    	jle    105661 <_dtoa_r+0x8c1>
  105b28:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  105b2c:	8b 5d 84             	mov    -0x7c(%rbp),%ebx
  105b2f:	c6 00 31             	movb   $0x31,(%rax)
  105b32:	49 89 c6             	mov    %rax,%r14
  105b35:	48 83 c0 01          	add    $0x1,%rax
  105b39:	83 c3 01             	add    $0x1,%ebx
  105b3c:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  105b40:	e9 25 fb ff ff       	jmpq   10566a <_dtoa_r+0x8ca>
  105b45:	0f 1f 00             	nopl   (%rax)
  105b48:	8b 5d 84             	mov    -0x7c(%rbp),%ebx
  105b4b:	83 c3 01             	add    $0x1,%ebx
  105b4e:	89 5d b8             	mov    %ebx,-0x48(%rbp)
  105b51:	45 31 f6             	xor    %r14d,%r14d
  105b54:	48 8b 5d a8          	mov    -0x58(%rbp),%rbx
  105b58:	eb 1b                	jmp    105b75 <_dtoa_r+0xdd5>
  105b5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  105b60:	4c 89 fe             	mov    %r15,%rsi
  105b63:	31 c9                	xor    %ecx,%ecx
  105b65:	ba 0a 00 00 00       	mov    $0xa,%edx
  105b6a:	4c 89 ef             	mov    %r13,%rdi
  105b6d:	e8 1e 14 00 00       	callq  106f90 <__multadd>
  105b72:	49 89 c7             	mov    %rax,%r15
  105b75:	4c 89 e6             	mov    %r12,%rsi
  105b78:	4c 89 ff             	mov    %r15,%rdi
  105b7b:	e8 80 f0 ff ff       	callq  104c00 <quorem>
  105b80:	83 c0 30             	add    $0x30,%eax
  105b83:	42 88 04 33          	mov    %al,(%rbx,%r14,1)
  105b87:	49 83 c6 01          	add    $0x1,%r14
  105b8b:	44 39 75 98          	cmp    %r14d,-0x68(%rbp)
  105b8f:	7f cf                	jg     105b60 <_dtoa_r+0xdc0>
  105b91:	89 45 88             	mov    %eax,-0x78(%rbp)
  105b94:	8b 45 98             	mov    -0x68(%rbp),%eax
  105b97:	8b 5d b8             	mov    -0x48(%rbp),%ebx
  105b9a:	8d 48 ff             	lea    -0x1(%rax),%ecx
  105b9d:	48 83 c1 01          	add    $0x1,%rcx
  105ba1:	85 c0                	test   %eax,%eax
  105ba3:	b8 01 00 00 00       	mov    $0x1,%eax
  105ba8:	48 0f 4e c8          	cmovle %rax,%rcx
  105bac:	45 31 c0             	xor    %r8d,%r8d
  105baf:	48 03 4d a8          	add    -0x58(%rbp),%rcx
  105bb3:	4c 89 fe             	mov    %r15,%rsi
  105bb6:	ba 01 00 00 00       	mov    $0x1,%edx
  105bbb:	4c 89 ef             	mov    %r13,%rdi
  105bbe:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  105bc2:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  105bc6:	e8 c5 19 00 00       	callq  107590 <__lshift>
  105bcb:	4c 89 e6             	mov    %r12,%rsi
  105bce:	48 89 c7             	mov    %rax,%rdi
  105bd1:	49 89 c7             	mov    %rax,%r15
  105bd4:	e8 17 1b 00 00       	callq  1076f0 <__mcmp>
  105bd9:	4c 8b 45 b8          	mov    -0x48(%rbp),%r8
  105bdd:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  105be1:	85 c0                	test   %eax,%eax
  105be3:	0f 8e 87 03 00 00    	jle    105f70 <_dtoa_r+0x11d0>
  105be9:	0f b6 51 ff          	movzbl -0x1(%rcx),%edx
  105bed:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  105bf1:	eb 15                	jmp    105c08 <_dtoa_r+0xe68>
  105bf3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  105bf8:	48 39 f0             	cmp    %rsi,%rax
  105bfb:	0f 84 90 03 00 00    	je     105f91 <_dtoa_r+0x11f1>
  105c01:	0f b6 50 ff          	movzbl -0x1(%rax),%edx
  105c05:	48 89 c1             	mov    %rax,%rcx
  105c08:	48 8d 41 ff          	lea    -0x1(%rcx),%rax
  105c0c:	80 fa 39             	cmp    $0x39,%dl
  105c0f:	74 e7                	je     105bf8 <_dtoa_r+0xe58>
  105c11:	83 c2 01             	add    $0x1,%edx
  105c14:	88 10                	mov    %dl,(%rax)
  105c16:	4c 89 e6             	mov    %r12,%rsi
  105c19:	4c 89 ef             	mov    %r13,%rdi
  105c1c:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
  105c20:	4c 89 45 b0          	mov    %r8,-0x50(%rbp)
  105c24:	e8 47 13 00 00       	callq  106f70 <_Bfree>
  105c29:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  105c30:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  105c34:	48 85 c0             	test   %rax,%rax
  105c37:	0f 84 63 03 00 00    	je     105fa0 <_dtoa_r+0x1200>
  105c3d:	4c 8b 45 b0          	mov    -0x50(%rbp),%r8
  105c41:	4d 85 c0             	test   %r8,%r8
  105c44:	0f 84 2d 06 00 00    	je     106277 <_dtoa_r+0x14d7>
  105c4a:	49 39 c0             	cmp    %rax,%r8
  105c4d:	0f 84 24 06 00 00    	je     106277 <_dtoa_r+0x14d7>
  105c53:	4c 89 c6             	mov    %r8,%rsi
  105c56:	4c 89 ef             	mov    %r13,%rdi
  105c59:	e8 12 13 00 00       	callq  106f70 <_Bfree>
  105c5e:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  105c62:	4c 8b 75 a8          	mov    -0x58(%rbp),%r14
  105c66:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
  105c6a:	e9 13 fa ff ff       	jmpq   105682 <_dtoa_r+0x8e2>
  105c6f:	90                   	nop
  105c70:	66 0f 28 c2          	movapd %xmm2,%xmm0
  105c74:	b8 02 00 00 00       	mov    $0x2,%eax
  105c79:	e9 72 f4 ff ff       	jmpq   1050f0 <_dtoa_r+0x350>
  105c7e:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffff,%rax
  105c85:	ff 0f 00 
  105c88:	48 85 45 b0          	test   %rax,-0x50(%rbp)
  105c8c:	0f 85 d7 fc ff ff    	jne    105969 <_dtoa_r+0xbc9>
  105c92:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  105c96:	48 c1 e8 20          	shr    $0x20,%rax
  105c9a:	a9 00 00 f0 7f       	test   $0x7ff00000,%eax
  105c9f:	0f 84 c4 fc ff ff    	je     105969 <_dtoa_r+0xbc9>
  105ca5:	c7 85 68 ff ff ff 01 	movl   $0x1,-0x98(%rbp)
  105cac:	00 00 00 
  105caf:	41 83 c1 01          	add    $0x1,%r9d
  105cb3:	41 83 c0 01          	add    $0x1,%r8d
  105cb7:	e9 fe f8 ff ff       	jmpq   1055ba <_dtoa_r+0x81a>
  105cbc:	0f 1f 40 00          	nopl   0x0(%rax)
  105cc0:	48 c7 85 70 ff ff ff 	movq   $0x0,-0x90(%rbp)
  105cc7:	00 00 00 00 
  105ccb:	45 31 e4             	xor    %r12d,%r12d
  105cce:	e9 8e f9 ff ff       	jmpq   105661 <_dtoa_r+0x8c1>
  105cd3:	48 8b b5 70 ff ff ff 	mov    -0x90(%rbp),%rsi
  105cda:	89 ca                	mov    %ecx,%edx
  105cdc:	4c 89 ef             	mov    %r13,%rdi
  105cdf:	44 89 85 54 ff ff ff 	mov    %r8d,-0xac(%rbp)
  105ce6:	44 89 8d 5c ff ff ff 	mov    %r9d,-0xa4(%rbp)
  105ced:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%rbp)
  105cf3:	e8 68 17 00 00       	callq  107460 <__pow5mult>
  105cf8:	4c 89 fa             	mov    %r15,%rdx
  105cfb:	4c 89 ef             	mov    %r13,%rdi
  105cfe:	48 89 c6             	mov    %rax,%rsi
  105d01:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  105d08:	e8 13 15 00 00       	callq  107220 <__multiply>
  105d0d:	4c 89 fe             	mov    %r15,%rsi
  105d10:	4c 89 ef             	mov    %r13,%rdi
  105d13:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  105d1a:	e8 51 12 00 00       	callq  106f70 <_Bfree>
  105d1f:	4c 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%r15
  105d26:	44 8b 85 54 ff ff ff 	mov    -0xac(%rbp),%r8d
  105d2d:	44 8b 8d 5c ff ff ff 	mov    -0xa4(%rbp),%r9d
  105d34:	8b 8d 60 ff ff ff    	mov    -0xa0(%rbp),%ecx
  105d3a:	e9 29 f8 ff ff       	jmpq   105568 <_dtoa_r+0x7c8>
  105d3f:	44 89 e1             	mov    %r12d,%ecx
  105d42:	29 c1                	sub    %eax,%ecx
  105d44:	e9 74 f6 ff ff       	jmpq   1053bd <_dtoa_r+0x61d>
  105d49:	4c 89 fe             	mov    %r15,%rsi
  105d4c:	44 89 e2             	mov    %r12d,%edx
  105d4f:	4c 89 ef             	mov    %r13,%rdi
  105d52:	44 89 85 60 ff ff ff 	mov    %r8d,-0xa0(%rbp)
  105d59:	44 89 8d 68 ff ff ff 	mov    %r9d,-0x98(%rbp)
  105d60:	e8 fb 16 00 00       	callq  107460 <__pow5mult>
  105d65:	44 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%r9d
  105d6c:	44 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%r8d
  105d73:	49 89 c7             	mov    %rax,%r15
  105d76:	e9 f6 f7 ff ff       	jmpq   105571 <_dtoa_r+0x7d1>
  105d7b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  105d80:	e8 0b 12 00 00       	callq  106f90 <__multadd>
  105d85:	4c 8b 45 88          	mov    -0x78(%rbp),%r8
  105d89:	49 89 c4             	mov    %rax,%r12
  105d8c:	49 89 c6             	mov    %rax,%r14
  105d8f:	e9 96 fa ff ff       	jmpq   10582a <_dtoa_r+0xa8a>
  105d94:	0f 1f 40 00          	nopl   0x0(%rax)
  105d98:	c7 85 78 ff ff ff 01 	movl   $0x1,-0x88(%rbp)
  105d9f:	00 00 00 
  105da2:	e9 38 f2 ff ff       	jmpq   104fdf <_dtoa_r+0x23f>
  105da7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  105dae:	00 00 
  105db0:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffff,%rax
  105db7:	ff 0f 00 
  105dba:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  105dbe:	48 85 c7             	test   %rax,%rdi
  105dc1:	0f 85 f3 f7 ff ff    	jne    1055ba <_dtoa_r+0x81a>
  105dc7:	48 89 f8             	mov    %rdi,%rax
  105dca:	48 c1 e8 20          	shr    $0x20,%rax
  105dce:	a9 00 00 f0 7f       	test   $0x7ff00000,%eax
  105dd3:	0f 84 e1 f7 ff ff    	je     1055ba <_dtoa_r+0x81a>
  105dd9:	e9 c7 fe ff ff       	jmpq   105ca5 <_dtoa_r+0xf05>
  105dde:	66 90                	xchg   %ax,%ax
  105de0:	44 8b 55 98          	mov    -0x68(%rbp),%r10d
  105de4:	45 85 d2             	test   %r10d,%r10d
  105de7:	0f 84 2a f5 ff ff    	je     105317 <_dtoa_r+0x577>
  105ded:	8b 8d 58 ff ff ff    	mov    -0xa8(%rbp),%ecx
  105df3:	85 c9                	test   %ecx,%ecx
  105df5:	0f 8e 76 f5 ff ff    	jle    105371 <_dtoa_r+0x5d1>
  105dfb:	f2 0f 10 1d d5 af 00 	movsd  0xafd5(%rip),%xmm3        # 110dd8 <uart_ns16550_dev_cfg_0+0x468>
  105e02:	00 
  105e03:	83 c0 01             	add    $0x1,%eax
  105e06:	66 0f ef c9          	pxor   %xmm1,%xmm1
  105e0a:	8b 7d 84             	mov    -0x7c(%rbp),%edi
  105e0d:	f2 0f 2a c8          	cvtsi2sd %eax,%xmm1
  105e11:	f2 0f 59 c3          	mulsd  %xmm3,%xmm0
  105e15:	8d 5f ff             	lea    -0x1(%rdi),%ebx
  105e18:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  105e1c:	f2 0f 58 0d bc af 00 	addsd  0xafbc(%rip),%xmm1        # 110de0 <uart_ns16550_dev_cfg_0+0x470>
  105e23:	00 
  105e24:	66 48 0f 7e ca       	movq   %xmm1,%rdx
  105e29:	66 48 0f 7e c8       	movq   %xmm1,%rax
  105e2e:	48 c1 ea 20          	shr    $0x20,%rdx
  105e32:	89 c0                	mov    %eax,%eax
  105e34:	81 ea 00 00 40 03    	sub    $0x3400000,%edx
  105e3a:	48 c1 e2 20          	shl    $0x20,%rdx
  105e3e:	48 09 d0             	or     %rdx,%rax
  105e41:	e9 05 f3 ff ff       	jmpq   10514b <_dtoa_r+0x3ab>
  105e46:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  105e4d:	00 00 00 
  105e50:	8b 9d 5c ff ff ff    	mov    -0xa4(%rbp),%ebx
  105e56:	85 db                	test   %ebx,%ebx
  105e58:	0f 84 60 01 00 00    	je     105fbe <_dtoa_r+0x121e>
  105e5e:	05 33 04 00 00       	add    $0x433,%eax
  105e63:	44 89 cb             	mov    %r9d,%ebx
  105e66:	44 89 e1             	mov    %r12d,%ecx
  105e69:	41 01 c0             	add    %eax,%r8d
  105e6c:	41 01 c1             	add    %eax,%r9d
  105e6f:	e9 5e f5 ff ff       	jmpq   1053d2 <_dtoa_r+0x632>
  105e74:	0f 1f 40 00          	nopl   0x0(%rax)
  105e78:	4c 89 fe             	mov    %r15,%rsi
  105e7b:	44 89 e2             	mov    %r12d,%edx
  105e7e:	4c 89 ef             	mov    %r13,%rdi
  105e81:	44 89 85 60 ff ff ff 	mov    %r8d,-0xa0(%rbp)
  105e88:	44 89 8d 68 ff ff ff 	mov    %r9d,-0x98(%rbp)
  105e8f:	e8 cc 15 00 00       	callq  107460 <__pow5mult>
  105e94:	44 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%r8d
  105e9b:	44 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%r9d
  105ea2:	49 89 c7             	mov    %rax,%r15
  105ea5:	e9 c7 f6 ff ff       	jmpq   105571 <_dtoa_r+0x7d1>
  105eaa:	48 c7 85 70 ff ff ff 	movq   $0x0,-0x90(%rbp)
  105eb1:	00 00 00 00 
  105eb5:	45 31 e4             	xor    %r12d,%r12d
  105eb8:	e9 6b fc ff ff       	jmpq   105b28 <_dtoa_r+0xd88>
  105ebd:	48 63 45 84          	movslq -0x7c(%rbp),%rax
  105ec1:	c7 45 98 ff ff ff ff 	movl   $0xffffffff,-0x68(%rbp)
  105ec8:	41 83 cb ff          	or     $0xffffffff,%r11d
  105ecc:	f2 0f 10 14 c5 c0 05 	movsd  0x1105c0(,%rax,8),%xmm2
  105ed3:	11 00 
  105ed5:	f2 0f 10 45 b0       	movsd  -0x50(%rbp),%xmm0
  105eda:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
  105ede:	83 7d 98 01          	cmpl   $0x1,-0x68(%rbp)
  105ee2:	66 0f 28 c8          	movapd %xmm0,%xmm1
  105ee6:	48 8d 57 01          	lea    0x1(%rdi),%rdx
  105eea:	f2 0f 5e ca          	divsd  %xmm2,%xmm1
  105eee:	f2 0f 2c c9          	cvttsd2si %xmm1,%ecx
  105ef2:	66 0f ef c9          	pxor   %xmm1,%xmm1
  105ef6:	f2 0f 2a c9          	cvtsi2sd %ecx,%xmm1
  105efa:	8d 41 30             	lea    0x30(%rcx),%eax
  105efd:	88 07                	mov    %al,(%rdi)
  105eff:	f2 0f 59 ca          	mulsd  %xmm2,%xmm1
  105f03:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  105f07:	0f 84 a9 01 00 00    	je     1060b6 <_dtoa_r+0x1316>
  105f0d:	48 8b 5d a8          	mov    -0x58(%rbp),%rbx
  105f11:	41 8d 43 fe          	lea    -0x2(%r11),%eax
  105f15:	f2 0f 10 1d bb ae 00 	movsd  0xaebb(%rip),%xmm3        # 110dd8 <uart_ns16550_dev_cfg_0+0x468>
  105f1c:	00 
  105f1d:	48 8d 44 03 02       	lea    0x2(%rbx,%rax,1),%rax
  105f22:	eb 34                	jmp    105f58 <_dtoa_r+0x11b8>
  105f24:	0f 1f 40 00          	nopl   0x0(%rax)
  105f28:	66 0f 28 c8          	movapd %xmm0,%xmm1
  105f2c:	48 83 c2 01          	add    $0x1,%rdx
  105f30:	f2 0f 5e ca          	divsd  %xmm2,%xmm1
  105f34:	f2 0f 2c c9          	cvttsd2si %xmm1,%ecx
  105f38:	66 0f ef c9          	pxor   %xmm1,%xmm1
  105f3c:	f2 0f 2a c9          	cvtsi2sd %ecx,%xmm1
  105f40:	8d 71 30             	lea    0x30(%rcx),%esi
  105f43:	40 88 72 ff          	mov    %sil,-0x1(%rdx)
  105f47:	f2 0f 59 ca          	mulsd  %xmm2,%xmm1
  105f4b:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  105f4f:	48 39 c2             	cmp    %rax,%rdx
  105f52:	0f 84 61 01 00 00    	je     1060b9 <_dtoa_r+0x1319>
  105f58:	f2 0f 59 c3          	mulsd  %xmm3,%xmm0
  105f5c:	66 0f ef ed          	pxor   %xmm5,%xmm5
  105f60:	66 0f 2e c5          	ucomisd %xmm5,%xmm0
  105f64:	7a c2                	jp     105f28 <_dtoa_r+0x1188>
  105f66:	75 c0                	jne    105f28 <_dtoa_r+0x1188>
  105f68:	8b 5d 84             	mov    -0x7c(%rbp),%ebx
  105f6b:	e9 7c fb ff ff       	jmpq   105aec <_dtoa_r+0xd4c>
  105f70:	75 0a                	jne    105f7c <_dtoa_r+0x11dc>
  105f72:	f6 45 88 01          	testb  $0x1,-0x78(%rbp)
  105f76:	0f 85 6d fc ff ff    	jne    105be9 <_dtoa_r+0xe49>
  105f7c:	48 89 c8             	mov    %rcx,%rax
  105f7f:	90                   	nop
  105f80:	48 89 c1             	mov    %rax,%rcx
  105f83:	48 83 e8 01          	sub    $0x1,%rax
  105f87:	80 38 30             	cmpb   $0x30,(%rax)
  105f8a:	74 f4                	je     105f80 <_dtoa_r+0x11e0>
  105f8c:	e9 85 fc ff ff       	jmpq   105c16 <_dtoa_r+0xe76>
  105f91:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  105f95:	83 c3 01             	add    $0x1,%ebx
  105f98:	c6 00 31             	movb   $0x31,(%rax)
  105f9b:	e9 76 fc ff ff       	jmpq   105c16 <_dtoa_r+0xe76>
  105fa0:	4c 8b 75 a8          	mov    -0x58(%rbp),%r14
  105fa4:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
  105fa8:	e9 e4 f6 ff ff       	jmpq   105691 <_dtoa_r+0x8f1>
  105fad:	48 89 75 a8          	mov    %rsi,-0x58(%rbp)
  105fb1:	83 c3 01             	add    $0x1,%ebx
  105fb4:	ba 31 00 00 00       	mov    $0x31,%edx
  105fb9:	e9 72 f2 ff ff       	jmpq   105230 <_dtoa_r+0x490>
  105fbe:	b8 36 00 00 00       	mov    $0x36,%eax
  105fc3:	2b 45 c8             	sub    -0x38(%rbp),%eax
  105fc6:	44 89 cb             	mov    %r9d,%ebx
  105fc9:	44 89 e1             	mov    %r12d,%ecx
  105fcc:	41 01 c0             	add    %eax,%r8d
  105fcf:	41 01 c1             	add    %eax,%r9d
  105fd2:	e9 fb f3 ff ff       	jmpq   1053d2 <_dtoa_r+0x632>
  105fd7:	4c 89 a5 70 ff ff ff 	mov    %r12,-0x90(%rbp)
  105fde:	4c 8b 65 98          	mov    -0x68(%rbp),%r12
  105fe2:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  105fe6:	85 d2                	test   %edx,%edx
  105fe8:	7e 45                	jle    10602f <_dtoa_r+0x128f>
  105fea:	4c 89 fe             	mov    %r15,%rsi
  105fed:	ba 01 00 00 00       	mov    $0x1,%edx
  105ff2:	4c 89 ef             	mov    %r13,%rdi
  105ff5:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  105ff9:	e8 92 15 00 00       	callq  107590 <__lshift>
  105ffe:	4c 89 e6             	mov    %r12,%rsi
  106001:	48 89 c7             	mov    %rax,%rdi
  106004:	49 89 c7             	mov    %rax,%r15
  106007:	e8 e4 16 00 00       	callq  1076f0 <__mcmp>
  10600c:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  106010:	4c 8b 45 b8          	mov    -0x48(%rbp),%r8
  106014:	85 c0                	test   %eax,%eax
  106016:	0f 8e 0f 02 00 00    	jle    10622b <_dtoa_r+0x148b>
  10601c:	83 7d 88 39          	cmpl   $0x39,-0x78(%rbp)
  106020:	0f 84 23 01 00 00    	je     106149 <_dtoa_r+0x13a9>
  106026:	8b 45 80             	mov    -0x80(%rbp),%eax
  106029:	83 c0 31             	add    $0x31,%eax
  10602c:	89 45 88             	mov    %eax,-0x78(%rbp)
  10602f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  106036:	0f b6 7d 88          	movzbl -0x78(%rbp),%edi
  10603a:	8b 5d 84             	mov    -0x7c(%rbp),%ebx
  10603d:	4c 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%r8
  106044:	4c 89 b5 70 ff ff ff 	mov    %r14,-0x90(%rbp)
  10604b:	40 88 38             	mov    %dil,(%rax)
  10604e:	83 c3 01             	add    $0x1,%ebx
  106051:	e9 c0 fb ff ff       	jmpq   105c16 <_dtoa_r+0xe76>
  106056:	41 8b 76 08          	mov    0x8(%r14),%esi
  10605a:	4c 89 ef             	mov    %r13,%rdi
  10605d:	e8 6e 0e 00 00       	callq  106ed0 <_Balloc>
  106062:	49 89 c6             	mov    %rax,%r14
  106065:	48 85 c0             	test   %rax,%rax
  106068:	0f 84 f3 01 00 00    	je     106261 <_dtoa_r+0x14c1>
  10606e:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
  106075:	48 63 47 14          	movslq 0x14(%rdi),%rax
  106079:	48 8d 77 10          	lea    0x10(%rdi),%rsi
  10607d:	49 8d 7e 10          	lea    0x10(%r14),%rdi
  106081:	48 8d 14 85 08 00 00 	lea    0x8(,%rax,4),%rdx
  106088:	00 
  106089:	e8 72 9f ff ff       	callq  100000 <__rom_region_start>
  10608e:	4c 89 f6             	mov    %r14,%rsi
  106091:	ba 01 00 00 00       	mov    $0x1,%edx
  106096:	4c 89 ef             	mov    %r13,%rdi
  106099:	e8 f2 14 00 00       	callq  107590 <__lshift>
  10609e:	49 89 c6             	mov    %rax,%r14
  1060a1:	e9 71 f6 ff ff       	jmpq   105717 <_dtoa_r+0x977>
  1060a6:	4c 8b 75 a8          	mov    -0x58(%rbp),%r14
  1060aa:	83 c3 01             	add    $0x1,%ebx
  1060ad:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  1060b1:	e9 db f5 ff ff       	jmpq   105691 <_dtoa_r+0x8f1>
  1060b6:	48 89 d0             	mov    %rdx,%rax
  1060b9:	f2 0f 58 c0          	addsd  %xmm0,%xmm0
  1060bd:	8b 5d 84             	mov    -0x7c(%rbp),%ebx
  1060c0:	83 c3 01             	add    $0x1,%ebx
  1060c3:	66 0f 2f c2          	comisd %xmm2,%xmm0
  1060c7:	0f 87 ab 00 00 00    	ja     106178 <_dtoa_r+0x13d8>
  1060cd:	66 0f 2e c2          	ucomisd %xmm2,%xmm0
  1060d1:	7a 0b                	jp     1060de <_dtoa_r+0x133e>
  1060d3:	75 09                	jne    1060de <_dtoa_r+0x133e>
  1060d5:	83 e1 01             	and    $0x1,%ecx
  1060d8:	0f 85 9a 00 00 00    	jne    106178 <_dtoa_r+0x13d8>
  1060de:	4c 8b 75 a8          	mov    -0x58(%rbp),%r14
  1060e2:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  1060e6:	e9 a6 f5 ff ff       	jmpq   105691 <_dtoa_r+0x8f1>
  1060eb:	83 7d 88 39          	cmpl   $0x39,-0x78(%rbp)
  1060ef:	4c 89 a5 70 ff ff ff 	mov    %r12,-0x90(%rbp)
  1060f6:	4c 8b 65 98          	mov    -0x68(%rbp),%r12
  1060fa:	74 4d                	je     106149 <_dtoa_r+0x13a9>
  1060fc:	0f b6 45 88          	movzbl -0x78(%rbp),%eax
  106100:	8b 5d 84             	mov    -0x7c(%rbp),%ebx
  106103:	48 8b bd 78 ff ff ff 	mov    -0x88(%rbp),%rdi
  10610a:	4c 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%r8
  106111:	4c 89 b5 70 ff ff ff 	mov    %r14,-0x90(%rbp)
  106118:	83 c0 01             	add    $0x1,%eax
  10611b:	83 c3 01             	add    $0x1,%ebx
  10611e:	88 07                	mov    %al,(%rdi)
  106120:	e9 f1 fa ff ff       	jmpq   105c16 <_dtoa_r+0xe76>
  106125:	8b 5d 84             	mov    -0x7c(%rbp),%ebx
  106128:	4d 89 e0             	mov    %r12,%r8
  10612b:	4c 89 b5 70 ff ff ff 	mov    %r14,-0x90(%rbp)
  106132:	4c 8b 65 98          	mov    -0x68(%rbp),%r12
  106136:	83 c3 01             	add    $0x1,%ebx
  106139:	e9 75 fa ff ff       	jmpq   105bb3 <_dtoa_r+0xe13>
  10613e:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  106145:	4c 8d 40 01          	lea    0x1(%rax),%r8
  106149:	8b 5d 84             	mov    -0x7c(%rbp),%ebx
  10614c:	4c 89 c1             	mov    %r8,%rcx
  10614f:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  106153:	ba 39 00 00 00       	mov    $0x39,%edx
  106158:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  10615f:	4c 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%r8
  106166:	4c 89 b5 70 ff ff ff 	mov    %r14,-0x90(%rbp)
  10616d:	83 c3 01             	add    $0x1,%ebx
  106170:	c6 00 39             	movb   $0x39,(%rax)
  106173:	e9 90 fa ff ff       	jmpq   105c08 <_dtoa_r+0xe68>
  106178:	8b 5d 84             	mov    -0x7c(%rbp),%ebx
  10617b:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  10617f:	e9 95 f0 ff ff       	jmpq   105219 <_dtoa_r+0x479>
  106184:	83 7d 88 39          	cmpl   $0x39,-0x78(%rbp)
  106188:	4c 89 a5 70 ff ff ff 	mov    %r12,-0x90(%rbp)
  10618f:	4c 8b 65 98          	mov    -0x68(%rbp),%r12
  106193:	74 a9                	je     10613e <_dtoa_r+0x139e>
  106195:	8b 45 80             	mov    -0x80(%rbp),%eax
  106198:	48 8b bd 78 ff ff ff 	mov    -0x88(%rbp),%rdi
  10619f:	4c 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%r8
  1061a6:	4c 89 b5 70 ff ff ff 	mov    %r14,-0x90(%rbp)
  1061ad:	83 c0 31             	add    $0x31,%eax
  1061b0:	85 db                	test   %ebx,%ebx
  1061b2:	8b 5d 84             	mov    -0x7c(%rbp),%ebx
  1061b5:	0f 4e 45 88          	cmovle -0x78(%rbp),%eax
  1061b9:	48 8d 4f 01          	lea    0x1(%rdi),%rcx
  1061bd:	88 07                	mov    %al,(%rdi)
  1061bf:	83 c3 01             	add    $0x1,%ebx
  1061c2:	e9 4f fa ff ff       	jmpq   105c16 <_dtoa_r+0xe76>
  1061c7:	48 89 d0             	mov    %rdx,%rax
  1061ca:	e9 e4 f8 ff ff       	jmpq   105ab3 <_dtoa_r+0xd13>
  1061cf:	8b 45 98             	mov    -0x68(%rbp),%eax
  1061d2:	89 45 84             	mov    %eax,-0x7c(%rbp)
  1061d5:	8b 85 58 ff ff ff    	mov    -0xa8(%rbp),%eax
  1061db:	89 45 98             	mov    %eax,-0x68(%rbp)
  1061de:	e9 73 f4 ff ff       	jmpq   105656 <_dtoa_r+0x8b6>
  1061e3:	48 8b b5 70 ff ff ff 	mov    -0x90(%rbp),%rsi
  1061ea:	31 c9                	xor    %ecx,%ecx
  1061ec:	ba 0a 00 00 00       	mov    $0xa,%edx
  1061f1:	4c 89 ef             	mov    %r13,%rdi
  1061f4:	e8 97 0d 00 00       	callq  106f90 <__multadd>
  1061f9:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  106200:	8b 45 98             	mov    -0x68(%rbp),%eax
  106203:	89 45 84             	mov    %eax,-0x7c(%rbp)
  106206:	8b 85 58 ff ff ff    	mov    -0xa8(%rbp),%eax
  10620c:	89 45 98             	mov    %eax,-0x68(%rbp)
  10620f:	45 84 f6             	test   %r14b,%r14b
  106212:	0f 84 ce f4 ff ff    	je     1056e6 <_dtoa_r+0x946>
  106218:	e9 39 f4 ff ff       	jmpq   105656 <_dtoa_r+0x8b6>
  10621d:	66 0f 28 c1          	movapd %xmm1,%xmm0
  106221:	b8 02 00 00 00       	mov    $0x2,%eax
  106226:	e9 c5 ee ff ff       	jmpq   1050f0 <_dtoa_r+0x350>
  10622b:	0f 85 fe fd ff ff    	jne    10602f <_dtoa_r+0x128f>
  106231:	f6 45 88 01          	testb  $0x1,-0x78(%rbp)
  106235:	0f 85 e1 fd ff ff    	jne    10601c <_dtoa_r+0x127c>
  10623b:	e9 ef fd ff ff       	jmpq   10602f <_dtoa_r+0x128f>
  106240:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  106244:	83 c3 01             	add    $0x1,%ebx
  106247:	4d 89 d6             	mov    %r10,%r14
  10624a:	e9 42 f4 ff ff       	jmpq   105691 <_dtoa_r+0x8f1>
  10624f:	0f 84 9e f3 ff ff    	je     1055f3 <_dtoa_r+0x853>
  106255:	ba 3c 00 00 00       	mov    $0x3c,%edx
  10625a:	29 c2                	sub    %eax,%edx
  10625c:	e9 64 f4 ff ff       	jmpq   1056c5 <_dtoa_r+0x925>
  106261:	b9 37 15 11 00       	mov    $0x111537,%ecx
  106266:	31 d2                	xor    %edx,%edx
  106268:	be ea 02 00 00       	mov    $0x2ea,%esi
  10626d:	bf 50 0d 11 00       	mov    $0x110d50,%edi
  106272:	e8 d9 36 00 00       	callq  109950 <__assert_func>
  106277:	4c 8b 75 a8          	mov    -0x58(%rbp),%r14
  10627b:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
  10627f:	e9 fe f3 ff ff       	jmpq   105682 <_dtoa_r+0x8e2>
  106284:	b9 37 15 11 00       	mov    $0x111537,%ecx
  106289:	31 d2                	xor    %edx,%edx
  10628b:	be aa 01 00 00       	mov    $0x1aa,%esi
  106290:	bf 50 0d 11 00       	mov    $0x110d50,%edi
  106295:	e8 b6 36 00 00       	callq  109950 <__assert_func>
  10629a:	41 c7 45 68 00 00 00 	movl   $0x0,0x68(%r13)
  1062a1:	00 
  1062a2:	31 f6                	xor    %esi,%esi
  1062a4:	4c 89 ef             	mov    %r13,%rdi
  1062a7:	44 89 45 88          	mov    %r8d,-0x78(%rbp)
  1062ab:	44 89 4d 98          	mov    %r9d,-0x68(%rbp)
  1062af:	e8 1c 0c 00 00       	callq  106ed0 <_Balloc>
  1062b4:	44 8b 4d 98          	mov    -0x68(%rbp),%r9d
  1062b8:	44 8b 45 88          	mov    -0x78(%rbp),%r8d
  1062bc:	48 85 c0             	test   %rax,%rax
  1062bf:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  1062c3:	74 bf                	je     106284 <_dtoa_r+0x14e4>
  1062c5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  1062c9:	83 7d 84 0e          	cmpl   $0xe,-0x7c(%rbp)
  1062cd:	49 89 45 60          	mov    %rax,0x60(%r13)
  1062d1:	8b 45 cc             	mov    -0x34(%rbp),%eax
  1062d4:	7f 08                	jg     1062de <_dtoa_r+0x153e>
  1062d6:	85 c0                	test   %eax,%eax
  1062d8:	0f 89 df fb ff ff    	jns    105ebd <_dtoa_r+0x111d>
  1062de:	c7 45 98 ff ff ff ff 	movl   $0xffffffff,-0x68(%rbp)
  1062e5:	c7 85 58 ff ff ff ff 	movl   $0xffffffff,-0xa8(%rbp)
  1062ec:	ff ff ff 
  1062ef:	c7 45 88 00 00 00 00 	movl   $0x0,-0x78(%rbp)
  1062f6:	c7 85 78 ff ff ff 01 	movl   $0x1,-0x88(%rbp)
  1062fd:	00 00 00 
  106300:	e9 92 f0 ff ff       	jmpq   105397 <_dtoa_r+0x5f7>
  106305:	31 f6                	xor    %esi,%esi
  106307:	e9 23 ed ff ff       	jmpq   10502f <_dtoa_r+0x28f>
  10630c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000106310 <__sflush_r>:
  106310:	55                   	push   %rbp
  106311:	48 89 e5             	mov    %rsp,%rbp
  106314:	41 56                	push   %r14
  106316:	49 89 fe             	mov    %rdi,%r14
  106319:	41 55                	push   %r13
  10631b:	41 54                	push   %r12
  10631d:	53                   	push   %rbx
  10631e:	0f b7 46 10          	movzwl 0x10(%rsi),%eax
  106322:	48 89 f3             	mov    %rsi,%rbx
  106325:	a8 08                	test   $0x8,%al
  106327:	0f 85 a3 00 00 00    	jne    1063d0 <__sflush_r+0xc0>
  10632d:	8b 4e 08             	mov    0x8(%rsi),%ecx
  106330:	85 c9                	test   %ecx,%ecx
  106332:	0f 8e 50 01 00 00    	jle    106488 <__sflush_r+0x178>
  106338:	4c 8b 43 48          	mov    0x48(%rbx),%r8
  10633c:	4d 85 c0             	test   %r8,%r8
  10633f:	0f 84 33 01 00 00    	je     106478 <__sflush_r+0x168>
  106345:	45 8b 26             	mov    (%r14),%r12d
  106348:	41 c7 06 00 00 00 00 	movl   $0x0,(%r14)
  10634f:	f6 c4 10             	test   $0x10,%ah
  106352:	0f 85 40 01 00 00    	jne    106498 <__sflush_r+0x188>
  106358:	31 d2                	xor    %edx,%edx
  10635a:	48 8b 73 30          	mov    0x30(%rbx),%rsi
  10635e:	b9 01 00 00 00       	mov    $0x1,%ecx
  106363:	4c 89 f7             	mov    %r14,%rdi
  106366:	41 ff d0             	callq  *%r8
  106369:	48 89 c2             	mov    %rax,%rdx
  10636c:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  106370:	0f 84 62 01 00 00    	je     1064d8 <__sflush_r+0x1c8>
  106376:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  10637a:	4c 8b 43 48          	mov    0x48(%rbx),%r8
  10637e:	a8 04                	test   $0x4,%al
  106380:	74 15                	je     106397 <__sflush_r+0x87>
  106382:	48 63 43 08          	movslq 0x8(%rbx),%rax
  106386:	48 29 c2             	sub    %rax,%rdx
  106389:	48 83 7b 58 00       	cmpq   $0x0,0x58(%rbx)
  10638e:	74 07                	je     106397 <__sflush_r+0x87>
  106390:	48 63 43 70          	movslq 0x70(%rbx),%rax
  106394:	48 29 c2             	sub    %rax,%rdx
  106397:	31 c9                	xor    %ecx,%ecx
  106399:	48 8b 73 30          	mov    0x30(%rbx),%rsi
  10639d:	4c 89 f7             	mov    %r14,%rdi
  1063a0:	41 ff d0             	callq  *%r8
  1063a3:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  1063a7:	0f 85 8b 00 00 00    	jne    106438 <__sflush_r+0x128>
  1063ad:	41 8b 16             	mov    (%r14),%edx
  1063b0:	0f b7 4b 10          	movzwl 0x10(%rbx),%ecx
  1063b4:	83 fa 1d             	cmp    $0x1d,%edx
  1063b7:	0f 86 eb 00 00 00    	jbe    1064a8 <__sflush_r+0x198>
  1063bd:	83 c9 40             	or     $0x40,%ecx
  1063c0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  1063c5:	66 89 4b 10          	mov    %cx,0x10(%rbx)
  1063c9:	e9 ac 00 00 00       	jmpq   10647a <__sflush_r+0x16a>
  1063ce:	66 90                	xchg   %ax,%ax
  1063d0:	4c 8b 6e 18          	mov    0x18(%rsi),%r13
  1063d4:	4d 85 ed             	test   %r13,%r13
  1063d7:	0f 84 9b 00 00 00    	je     106478 <__sflush_r+0x168>
  1063dd:	48 8b 16             	mov    (%rsi),%rdx
  1063e0:	31 c9                	xor    %ecx,%ecx
  1063e2:	4c 89 2e             	mov    %r13,(%rsi)
  1063e5:	4c 29 ea             	sub    %r13,%rdx
  1063e8:	41 89 d4             	mov    %edx,%r12d
  1063eb:	a8 03                	test   $0x3,%al
  1063ed:	75 03                	jne    1063f2 <__sflush_r+0xe2>
  1063ef:	8b 4e 20             	mov    0x20(%rsi),%ecx
  1063f2:	89 4b 0c             	mov    %ecx,0xc(%rbx)
  1063f5:	85 d2                	test   %edx,%edx
  1063f7:	7f 15                	jg     10640e <__sflush_r+0xfe>
  1063f9:	eb 7d                	jmp    106478 <__sflush_r+0x168>
  1063fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  106400:	48 63 d0             	movslq %eax,%rdx
  106403:	41 29 c4             	sub    %eax,%r12d
  106406:	49 01 d5             	add    %rdx,%r13
  106409:	45 85 e4             	test   %r12d,%r12d
  10640c:	7e 6a                	jle    106478 <__sflush_r+0x168>
  10640e:	48 8b 73 30          	mov    0x30(%rbx),%rsi
  106412:	44 89 e1             	mov    %r12d,%ecx
  106415:	4c 89 ea             	mov    %r13,%rdx
  106418:	4c 89 f7             	mov    %r14,%rdi
  10641b:	ff 53 40             	callq  *0x40(%rbx)
  10641e:	85 c0                	test   %eax,%eax
  106420:	7f de                	jg     106400 <__sflush_r+0xf0>
  106422:	66 83 4b 10 40       	orw    $0x40,0x10(%rbx)
  106427:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  10642c:	5b                   	pop    %rbx
  10642d:	41 5c                	pop    %r12
  10642f:	41 5d                	pop    %r13
  106431:	41 5e                	pop    %r14
  106433:	5d                   	pop    %rbp
  106434:	c3                   	retq   
  106435:	0f 1f 00             	nopl   (%rax)
  106438:	48 8b 53 18          	mov    0x18(%rbx),%rdx
  10643c:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%rbx)
  106443:	48 89 13             	mov    %rdx,(%rbx)
  106446:	f6 43 11 10          	testb  $0x10,0x11(%rbx)
  10644a:	74 07                	je     106453 <__sflush_r+0x143>
  10644c:	48 89 83 90 00 00 00 	mov    %rax,0x90(%rbx)
  106453:	48 8b 73 58          	mov    0x58(%rbx),%rsi
  106457:	45 89 26             	mov    %r12d,(%r14)
  10645a:	48 85 f6             	test   %rsi,%rsi
  10645d:	74 19                	je     106478 <__sflush_r+0x168>
  10645f:	48 8d 43 74          	lea    0x74(%rbx),%rax
  106463:	48 39 c6             	cmp    %rax,%rsi
  106466:	74 08                	je     106470 <__sflush_r+0x160>
  106468:	4c 89 f7             	mov    %r14,%rdi
  10646b:	e8 30 04 00 00       	callq  1068a0 <_free_r>
  106470:	48 c7 43 58 00 00 00 	movq   $0x0,0x58(%rbx)
  106477:	00 
  106478:	31 c0                	xor    %eax,%eax
  10647a:	5b                   	pop    %rbx
  10647b:	41 5c                	pop    %r12
  10647d:	41 5d                	pop    %r13
  10647f:	41 5e                	pop    %r14
  106481:	5d                   	pop    %rbp
  106482:	c3                   	retq   
  106483:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  106488:	8b 56 70             	mov    0x70(%rsi),%edx
  10648b:	85 d2                	test   %edx,%edx
  10648d:	0f 8f a5 fe ff ff    	jg     106338 <__sflush_r+0x28>
  106493:	eb e3                	jmp    106478 <__sflush_r+0x168>
  106495:	0f 1f 00             	nopl   (%rax)
  106498:	48 8b 93 90 00 00 00 	mov    0x90(%rbx),%rdx
  10649f:	e9 da fe ff ff       	jmpq   10637e <__sflush_r+0x6e>
  1064a4:	0f 1f 40 00          	nopl   0x0(%rax)
  1064a8:	be 01 00 40 20       	mov    $0x20400001,%esi
  1064ad:	48 0f a3 d6          	bt     %rdx,%rsi
  1064b1:	0f 83 06 ff ff ff    	jae    1063bd <__sflush_r+0xad>
  1064b7:	48 8b 73 18          	mov    0x18(%rbx),%rsi
  1064bb:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%rbx)
  1064c2:	48 89 33             	mov    %rsi,(%rbx)
  1064c5:	80 e5 10             	and    $0x10,%ch
  1064c8:	74 89                	je     106453 <__sflush_r+0x143>
  1064ca:	85 d2                	test   %edx,%edx
  1064cc:	75 85                	jne    106453 <__sflush_r+0x143>
  1064ce:	e9 79 ff ff ff       	jmpq   10644c <__sflush_r+0x13c>
  1064d3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  1064d8:	41 8b 06             	mov    (%r14),%eax
  1064db:	85 c0                	test   %eax,%eax
  1064dd:	0f 84 93 fe ff ff    	je     106376 <__sflush_r+0x66>
  1064e3:	83 f8 1d             	cmp    $0x1d,%eax
  1064e6:	74 09                	je     1064f1 <__sflush_r+0x1e1>
  1064e8:	83 f8 16             	cmp    $0x16,%eax
  1064eb:	0f 85 31 ff ff ff    	jne    106422 <__sflush_r+0x112>
  1064f1:	45 89 26             	mov    %r12d,(%r14)
  1064f4:	31 c0                	xor    %eax,%eax
  1064f6:	eb 82                	jmp    10647a <__sflush_r+0x16a>
  1064f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  1064ff:	00 

0000000000106500 <_fflush_r>:
  106500:	55                   	push   %rbp
  106501:	48 89 e5             	mov    %rsp,%rbp
  106504:	41 54                	push   %r12
  106506:	49 89 fc             	mov    %rdi,%r12
  106509:	53                   	push   %rbx
  10650a:	48 89 f3             	mov    %rsi,%rbx
  10650d:	48 83 ec 10          	sub    $0x10,%rsp
  106511:	48 85 ff             	test   %rdi,%rdi
  106514:	74 07                	je     10651d <_fflush_r+0x1d>
  106516:	8b 47 50             	mov    0x50(%rdi),%eax
  106519:	85 c0                	test   %eax,%eax
  10651b:	74 43                	je     106560 <_fflush_r+0x60>
  10651d:	0f b7 53 10          	movzwl 0x10(%rbx),%edx
  106521:	31 c0                	xor    %eax,%eax
  106523:	66 85 d2             	test   %dx,%dx
  106526:	74 28                	je     106550 <_fflush_r+0x50>
  106528:	f6 83 b0 00 00 00 01 	testb  $0x1,0xb0(%rbx)
  10652f:	75 05                	jne    106536 <_fflush_r+0x36>
  106531:	80 e6 02             	and    $0x2,%dh
  106534:	74 3a                	je     106570 <_fflush_r+0x70>
  106536:	48 89 de             	mov    %rbx,%rsi
  106539:	4c 89 e7             	mov    %r12,%rdi
  10653c:	e8 cf fd ff ff       	callq  106310 <__sflush_r>
  106541:	f6 83 b0 00 00 00 01 	testb  $0x1,0xb0(%rbx)
  106548:	75 06                	jne    106550 <_fflush_r+0x50>
  10654a:	f6 43 11 02          	testb  $0x2,0x11(%rbx)
  10654e:	74 30                	je     106580 <_fflush_r+0x80>
  106550:	48 83 c4 10          	add    $0x10,%rsp
  106554:	5b                   	pop    %rbx
  106555:	41 5c                	pop    %r12
  106557:	5d                   	pop    %rbp
  106558:	c3                   	retq   
  106559:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  106560:	e8 4b 00 00 00       	callq  1065b0 <__sinit>
  106565:	eb b6                	jmp    10651d <_fflush_r+0x1d>
  106567:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  10656e:	00 00 
  106570:	48 8b bb a0 00 00 00 	mov    0xa0(%rbx),%rdi
  106577:	e8 82 67 00 00       	callq  10ccfe <__retarget_lock_acquire_recursive>
  10657c:	eb b8                	jmp    106536 <_fflush_r+0x36>
  10657e:	66 90                	xchg   %ax,%ax
  106580:	48 8b bb a0 00 00 00 	mov    0xa0(%rbx),%rdi
  106587:	89 45 ec             	mov    %eax,-0x14(%rbp)
  10658a:	e8 78 67 00 00       	callq  10cd07 <__retarget_lock_release_recursive>
  10658f:	8b 45 ec             	mov    -0x14(%rbp),%eax
  106592:	48 83 c4 10          	add    $0x10,%rsp
  106596:	5b                   	pop    %rbx
  106597:	41 5c                	pop    %r12
  106599:	5d                   	pop    %rbp
  10659a:	c3                   	retq   
  10659b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000001065a0 <_cleanup_r>:
  1065a0:	be 00 65 10 00       	mov    $0x106500,%esi
  1065a5:	e9 66 06 00 00       	jmpq   106c10 <_fwalk_reent>
  1065aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000001065b0 <__sinit>:
  1065b0:	55                   	push   %rbp
  1065b1:	48 89 e5             	mov    %rsp,%rbp
  1065b4:	41 54                	push   %r12
  1065b6:	49 89 fc             	mov    %rdi,%r12
  1065b9:	bf 40 84 14 00       	mov    $0x148440,%edi
  1065be:	53                   	push   %rbx
  1065bf:	e8 3a 67 00 00       	callq  10ccfe <__retarget_lock_acquire_recursive>
  1065c4:	41 8b 44 24 50       	mov    0x50(%r12),%eax
  1065c9:	85 c0                	test   %eax,%eax
  1065cb:	0f 85 b4 01 00 00    	jne    106785 <__sinit+0x1d5>
  1065d1:	49 8b 5c 24 08       	mov    0x8(%r12),%rbx
  1065d6:	31 f6                	xor    %esi,%esi
  1065d8:	49 8d 84 24 18 02 00 	lea    0x218(%r12),%rax
  1065df:	00 
  1065e0:	49 c7 44 24 58 a0 65 	movq   $0x1065a0,0x58(%r12)
  1065e7:	10 00 
  1065e9:	49 89 84 24 10 02 00 	mov    %rax,0x210(%r12)
  1065f0:	00 
  1065f1:	ba 08 00 00 00       	mov    $0x8,%edx
  1065f6:	49 c7 84 24 00 02 00 	movq   $0x0,0x200(%r12)
  1065fd:	00 00 00 00 00 
  106602:	48 8d bb a8 00 00 00 	lea    0xa8(%rbx),%rdi
  106609:	41 c7 84 24 08 02 00 	movl   $0x3,0x208(%r12)
  106610:	00 03 00 00 00 
  106615:	c7 83 b0 00 00 00 00 	movl   $0x0,0xb0(%rbx)
  10661c:	00 00 00 
  10661f:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  106626:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  10662d:	00 
  10662e:	c7 43 10 04 00 00 00 	movl   $0x4,0x10(%rbx)
  106635:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
  10663c:	00 
  10663d:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%rbx)
  106644:	c7 43 28 00 00 00 00 	movl   $0x0,0x28(%rbx)
  10664b:	e8 e0 9a ff ff       	callq  100130 <memset>
  106650:	48 89 5b 30          	mov    %rbx,0x30(%rbx)
  106654:	48 8d bb a0 00 00 00 	lea    0xa0(%rbx),%rdi
  10665b:	48 c7 43 38 20 7b 10 	movq   $0x107b20,0x38(%rbx)
  106662:	00 
  106663:	48 c7 43 40 60 7b 10 	movq   $0x107b60,0x40(%rbx)
  10666a:	00 
  10666b:	48 c7 43 48 c0 7b 10 	movq   $0x107bc0,0x48(%rbx)
  106672:	00 
  106673:	48 c7 43 50 00 7c 10 	movq   $0x107c00,0x50(%rbx)
  10667a:	00 
  10667b:	e8 58 66 00 00       	callq  10ccd8 <__retarget_lock_init_recursive>
  106680:	49 8b 5c 24 10       	mov    0x10(%r12),%rbx
  106685:	ba 08 00 00 00       	mov    $0x8,%edx
  10668a:	31 f6                	xor    %esi,%esi
  10668c:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  106693:	48 8d bb a8 00 00 00 	lea    0xa8(%rbx),%rdi
  10669a:	c7 83 b0 00 00 00 00 	movl   $0x0,0xb0(%rbx)
  1066a1:	00 00 00 
  1066a4:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  1066ab:	00 
  1066ac:	c7 43 10 09 00 01 00 	movl   $0x10009,0x10(%rbx)
  1066b3:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
  1066ba:	00 
  1066bb:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%rbx)
  1066c2:	c7 43 28 00 00 00 00 	movl   $0x0,0x28(%rbx)
  1066c9:	e8 62 9a ff ff       	callq  100130 <memset>
  1066ce:	48 89 5b 30          	mov    %rbx,0x30(%rbx)
  1066d2:	48 8d bb a0 00 00 00 	lea    0xa0(%rbx),%rdi
  1066d9:	48 c7 43 38 20 7b 10 	movq   $0x107b20,0x38(%rbx)
  1066e0:	00 
  1066e1:	48 c7 43 40 60 7b 10 	movq   $0x107b60,0x40(%rbx)
  1066e8:	00 
  1066e9:	48 c7 43 48 c0 7b 10 	movq   $0x107bc0,0x48(%rbx)
  1066f0:	00 
  1066f1:	48 c7 43 50 00 7c 10 	movq   $0x107c00,0x50(%rbx)
  1066f8:	00 
  1066f9:	e8 da 65 00 00       	callq  10ccd8 <__retarget_lock_init_recursive>
  1066fe:	49 8b 5c 24 18       	mov    0x18(%r12),%rbx
  106703:	ba 08 00 00 00       	mov    $0x8,%edx
  106708:	31 f6                	xor    %esi,%esi
  10670a:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  106711:	48 8d bb a8 00 00 00 	lea    0xa8(%rbx),%rdi
  106718:	c7 83 b0 00 00 00 00 	movl   $0x0,0xb0(%rbx)
  10671f:	00 00 00 
  106722:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  106729:	00 
  10672a:	c7 43 10 12 00 02 00 	movl   $0x20012,0x10(%rbx)
  106731:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
  106738:	00 
  106739:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%rbx)
  106740:	c7 43 28 00 00 00 00 	movl   $0x0,0x28(%rbx)
  106747:	e8 e4 99 ff ff       	callq  100130 <memset>
  10674c:	48 89 5b 30          	mov    %rbx,0x30(%rbx)
  106750:	48 8d bb a0 00 00 00 	lea    0xa0(%rbx),%rdi
  106757:	48 c7 43 38 20 7b 10 	movq   $0x107b20,0x38(%rbx)
  10675e:	00 
  10675f:	48 c7 43 40 60 7b 10 	movq   $0x107b60,0x40(%rbx)
  106766:	00 
  106767:	48 c7 43 48 c0 7b 10 	movq   $0x107bc0,0x48(%rbx)
  10676e:	00 
  10676f:	48 c7 43 50 00 7c 10 	movq   $0x107c00,0x50(%rbx)
  106776:	00 
  106777:	e8 5c 65 00 00       	callq  10ccd8 <__retarget_lock_init_recursive>
  10677c:	41 c7 44 24 50 01 00 	movl   $0x1,0x50(%r12)
  106783:	00 00 
  106785:	5b                   	pop    %rbx
  106786:	bf 40 84 14 00       	mov    $0x148440,%edi
  10678b:	41 5c                	pop    %r12
  10678d:	5d                   	pop    %rbp
  10678e:	e9 74 65 00 00       	jmpq   10cd07 <__retarget_lock_release_recursive>
  106793:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10679a:	00 00 00 
  10679d:	0f 1f 00             	nopl   (%rax)

00000000001067a0 <_malloc_trim_r>:
  1067a0:	55                   	push   %rbp
  1067a1:	48 89 e5             	mov    %rsp,%rbp
  1067a4:	41 55                	push   %r13
  1067a6:	49 89 f5             	mov    %rsi,%r13
  1067a9:	41 54                	push   %r12
  1067ab:	49 89 fc             	mov    %rdi,%r12
  1067ae:	53                   	push   %rbx
  1067af:	48 83 ec 08          	sub    $0x8,%rsp
  1067b3:	e8 98 ac ff ff       	callq  101450 <__malloc_lock>
  1067b8:	48 8b 05 d1 0d 04 00 	mov    0x40dd1(%rip),%rax        # 147590 <__malloc_av_+0x10>
  1067bf:	48 8b 58 08          	mov    0x8(%rax),%rbx
  1067c3:	48 83 e3 fc          	and    $0xfffffffffffffffc,%rbx
  1067c7:	48 89 d8             	mov    %rbx,%rax
  1067ca:	4c 29 e8             	sub    %r13,%rax
  1067cd:	48 05 df 0f 00 00    	add    $0xfdf,%rax
  1067d3:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  1067d9:	4c 8d a8 00 f0 ff ff 	lea    -0x1000(%rax),%r13
  1067e0:	49 81 fd ff 0f 00 00 	cmp    $0xfff,%r13
  1067e7:	7e 1c                	jle    106805 <_malloc_trim_r+0x65>
  1067e9:	31 f6                	xor    %esi,%esi
  1067eb:	4c 89 e7             	mov    %r12,%rdi
  1067ee:	e8 1d ad ff ff       	callq  101510 <_sbrk_r>
  1067f3:	49 89 c0             	mov    %rax,%r8
  1067f6:	48 8b 05 93 0d 04 00 	mov    0x40d93(%rip),%rax        # 147590 <__malloc_av_+0x10>
  1067fd:	48 01 d8             	add    %rbx,%rax
  106800:	49 39 c0             	cmp    %rax,%r8
  106803:	74 1b                	je     106820 <_malloc_trim_r+0x80>
  106805:	4c 89 e7             	mov    %r12,%rdi
  106808:	e8 53 ac ff ff       	callq  101460 <__malloc_unlock>
  10680d:	48 83 c4 08          	add    $0x8,%rsp
  106811:	31 c0                	xor    %eax,%eax
  106813:	5b                   	pop    %rbx
  106814:	41 5c                	pop    %r12
  106816:	41 5d                	pop    %r13
  106818:	5d                   	pop    %rbp
  106819:	c3                   	retq   
  10681a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  106820:	4c 89 ee             	mov    %r13,%rsi
  106823:	4c 89 e7             	mov    %r12,%rdi
  106826:	48 f7 de             	neg    %rsi
  106829:	e8 e2 ac ff ff       	callq  101510 <_sbrk_r>
  10682e:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  106832:	74 34                	je     106868 <_malloc_trim_r+0xc8>
  106834:	48 8b 05 55 0d 04 00 	mov    0x40d55(%rip),%rax        # 147590 <__malloc_av_+0x10>
  10683b:	4c 29 eb             	sub    %r13,%rbx
  10683e:	4c 89 e7             	mov    %r12,%rdi
  106841:	44 29 2d 98 9a 01 00 	sub    %r13d,0x19a98(%rip)        # 1202e0 <__malloc_current_mallinfo>
  106848:	48 83 cb 01          	or     $0x1,%rbx
  10684c:	48 89 58 08          	mov    %rbx,0x8(%rax)
  106850:	e8 0b ac ff ff       	callq  101460 <__malloc_unlock>
  106855:	48 83 c4 08          	add    $0x8,%rsp
  106859:	b8 01 00 00 00       	mov    $0x1,%eax
  10685e:	5b                   	pop    %rbx
  10685f:	41 5c                	pop    %r12
  106861:	41 5d                	pop    %r13
  106863:	5d                   	pop    %rbp
  106864:	c3                   	retq   
  106865:	0f 1f 00             	nopl   (%rax)
  106868:	31 f6                	xor    %esi,%esi
  10686a:	4c 89 e7             	mov    %r12,%rdi
  10686d:	e8 9e ac ff ff       	callq  101510 <_sbrk_r>
  106872:	48 8b 0d 17 0d 04 00 	mov    0x40d17(%rip),%rcx        # 147590 <__malloc_av_+0x10>
  106879:	48 89 c2             	mov    %rax,%rdx
  10687c:	48 29 ca             	sub    %rcx,%rdx
  10687f:	48 83 fa 1f          	cmp    $0x1f,%rdx
  106883:	7e 80                	jle    106805 <_malloc_trim_r+0x65>
  106885:	48 2b 05 5c 1b 04 00 	sub    0x41b5c(%rip),%rax        # 1483e8 <__malloc_sbrk_base>
  10688c:	48 83 ca 01          	or     $0x1,%rdx
  106890:	89 05 4a 9a 01 00    	mov    %eax,0x19a4a(%rip)        # 1202e0 <__malloc_current_mallinfo>
  106896:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  10689a:	e9 66 ff ff ff       	jmpq   106805 <_malloc_trim_r+0x65>
  10689f:	90                   	nop

00000000001068a0 <_free_r>:
  1068a0:	48 85 f6             	test   %rsi,%rsi
  1068a3:	0f 84 27 01 00 00    	je     1069d0 <_free_r+0x130>
  1068a9:	55                   	push   %rbp
  1068aa:	48 89 e5             	mov    %rsp,%rbp
  1068ad:	41 54                	push   %r12
  1068af:	49 89 fc             	mov    %rdi,%r12
  1068b2:	53                   	push   %rbx
  1068b3:	48 89 f3             	mov    %rsi,%rbx
  1068b6:	e8 95 ab ff ff       	callq  101450 <__malloc_lock>
  1068bb:	48 8b 7b f8          	mov    -0x8(%rbx),%rdi
  1068bf:	48 8d 53 f0          	lea    -0x10(%rbx),%rdx
  1068c3:	48 89 f8             	mov    %rdi,%rax
  1068c6:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  1068ca:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
  1068ce:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  1068d2:	48 83 e1 fc          	and    $0xfffffffffffffffc,%rcx
  1068d6:	48 39 35 b3 0c 04 00 	cmp    %rsi,0x40cb3(%rip)        # 147590 <__malloc_av_+0x10>
  1068dd:	0f 84 cd 01 00 00    	je     106ab0 <_free_r+0x210>
  1068e3:	83 e7 01             	and    $0x1,%edi
  1068e6:	48 89 4e 08          	mov    %rcx,0x8(%rsi)
  1068ea:	4c 8d 04 0e          	lea    (%rsi,%rcx,1),%r8
  1068ee:	0f 85 9c 00 00 00    	jne    106990 <_free_r+0xf0>
  1068f4:	48 8b 7b f0          	mov    -0x10(%rbx),%rdi
  1068f8:	48 29 fa             	sub    %rdi,%rdx
  1068fb:	48 01 f8             	add    %rdi,%rax
  1068fe:	49 8b 78 08          	mov    0x8(%r8),%rdi
  106902:	4c 8b 4a 10          	mov    0x10(%rdx),%r9
  106906:	83 e7 01             	and    $0x1,%edi
  106909:	49 81 f9 90 75 14 00 	cmp    $0x147590,%r9
  106910:	0f 84 5a 01 00 00    	je     106a70 <_free_r+0x1d0>
  106916:	4c 8b 42 18          	mov    0x18(%rdx),%r8
  10691a:	4d 89 41 18          	mov    %r8,0x18(%r9)
  10691e:	4d 89 48 10          	mov    %r9,0x10(%r8)
  106922:	48 85 ff             	test   %rdi,%rdi
  106925:	74 70                	je     106997 <_free_r+0xf7>
  106927:	48 89 c1             	mov    %rax,%rcx
  10692a:	48 83 c9 01          	or     $0x1,%rcx
  10692e:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  106932:	48 89 06             	mov    %rax,(%rsi)
  106935:	48 3d ff 01 00 00    	cmp    $0x1ff,%rax
  10693b:	0f 87 b1 00 00 00    	ja     1069f2 <_free_r+0x152>
  106941:	48 c1 e8 03          	shr    $0x3,%rax
  106945:	be 01 00 00 00       	mov    $0x1,%esi
  10694a:	89 c1                	mov    %eax,%ecx
  10694c:	8d 44 00 02          	lea    0x2(%rax,%rax,1),%eax
  106950:	48 98                	cltq   
  106952:	c1 f9 02             	sar    $0x2,%ecx
  106955:	48 d3 e6             	shl    %cl,%rsi
  106958:	48 8b 0c c5 80 75 14 	mov    0x147580(,%rax,8),%rcx
  10695f:	00 
  106960:	48 09 35 21 0c 04 00 	or     %rsi,0x40c21(%rip)        # 147588 <__malloc_av_+0x8>
  106967:	48 8d 34 c5 70 75 14 	lea    0x147570(,%rax,8),%rsi
  10696e:	00 
  10696f:	48 89 72 18          	mov    %rsi,0x18(%rdx)
  106973:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
  106977:	48 89 14 c5 80 75 14 	mov    %rdx,0x147580(,%rax,8)
  10697e:	00 
  10697f:	48 89 51 18          	mov    %rdx,0x18(%rcx)
  106983:	5b                   	pop    %rbx
  106984:	4c 89 e7             	mov    %r12,%rdi
  106987:	41 5c                	pop    %r12
  106989:	5d                   	pop    %rbp
  10698a:	e9 d1 aa ff ff       	jmpq   101460 <__malloc_unlock>
  10698f:	90                   	nop
  106990:	41 f6 40 08 01       	testb  $0x1,0x8(%r8)
  106995:	75 41                	jne    1069d8 <_free_r+0x138>
  106997:	48 01 c8             	add    %rcx,%rax
  10699a:	48 8b 4e 10          	mov    0x10(%rsi),%rcx
  10699e:	49 89 c0             	mov    %rax,%r8
  1069a1:	48 8d 3c 02          	lea    (%rdx,%rax,1),%rdi
  1069a5:	49 83 c8 01          	or     $0x1,%r8
  1069a9:	48 81 f9 90 75 14 00 	cmp    $0x147590,%rcx
  1069b0:	0f 84 9a 01 00 00    	je     106b50 <_free_r+0x2b0>
  1069b6:	48 8b 76 18          	mov    0x18(%rsi),%rsi
  1069ba:	48 89 71 18          	mov    %rsi,0x18(%rcx)
  1069be:	48 89 4e 10          	mov    %rcx,0x10(%rsi)
  1069c2:	4c 89 42 08          	mov    %r8,0x8(%rdx)
  1069c6:	48 89 07             	mov    %rax,(%rdi)
  1069c9:	e9 67 ff ff ff       	jmpq   106935 <_free_r+0x95>
  1069ce:	66 90                	xchg   %ax,%ax
  1069d0:	c3                   	retq   
  1069d1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  1069d8:	48 89 c1             	mov    %rax,%rcx
  1069db:	48 83 c9 01          	or     $0x1,%rcx
  1069df:	48 89 4b f8          	mov    %rcx,-0x8(%rbx)
  1069e3:	48 89 06             	mov    %rax,(%rsi)
  1069e6:	48 3d ff 01 00 00    	cmp    $0x1ff,%rax
  1069ec:	0f 86 4f ff ff ff    	jbe    106941 <_free_r+0xa1>
  1069f2:	48 89 c6             	mov    %rax,%rsi
  1069f5:	48 c1 ee 09          	shr    $0x9,%rsi
  1069f9:	48 3d ff 09 00 00    	cmp    $0x9ff,%rax
  1069ff:	0f 87 03 01 00 00    	ja     106b08 <_free_r+0x268>
  106a05:	48 89 c6             	mov    %rax,%rsi
  106a08:	48 c1 ee 06          	shr    $0x6,%rsi
  106a0c:	8d 4e 38             	lea    0x38(%rsi),%ecx
  106a0f:	8d 74 36 72          	lea    0x72(%rsi,%rsi,1),%esi
  106a13:	48 63 f6             	movslq %esi,%rsi
  106a16:	48 c1 e6 03          	shl    $0x3,%rsi
  106a1a:	48 8d be 70 75 14 00 	lea    0x147570(%rsi),%rdi
  106a21:	48 8b b6 80 75 14 00 	mov    0x147580(%rsi),%rsi
  106a28:	48 39 f7             	cmp    %rsi,%rdi
  106a2b:	0f 84 4f 01 00 00    	je     106b80 <_free_r+0x2e0>
  106a31:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  106a38:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  106a3c:	48 83 e1 fc          	and    $0xfffffffffffffffc,%rcx
  106a40:	48 39 c1             	cmp    %rax,%rcx
  106a43:	76 09                	jbe    106a4e <_free_r+0x1ae>
  106a45:	48 8b 76 10          	mov    0x10(%rsi),%rsi
  106a49:	48 39 f7             	cmp    %rsi,%rdi
  106a4c:	75 ea                	jne    106a38 <_free_r+0x198>
  106a4e:	48 8b 7e 18          	mov    0x18(%rsi),%rdi
  106a52:	48 89 7a 18          	mov    %rdi,0x18(%rdx)
  106a56:	48 89 72 10          	mov    %rsi,0x10(%rdx)
  106a5a:	48 89 57 10          	mov    %rdx,0x10(%rdi)
  106a5e:	4c 89 e7             	mov    %r12,%rdi
  106a61:	48 89 56 18          	mov    %rdx,0x18(%rsi)
  106a65:	5b                   	pop    %rbx
  106a66:	41 5c                	pop    %r12
  106a68:	5d                   	pop    %rbp
  106a69:	e9 f2 a9 ff ff       	jmpq   101460 <__malloc_unlock>
  106a6e:	66 90                	xchg   %ax,%ax
  106a70:	48 85 ff             	test   %rdi,%rdi
  106a73:	0f 85 82 01 00 00    	jne    106bfb <_free_r+0x35b>
  106a79:	48 01 c8             	add    %rcx,%rax
  106a7c:	48 8b 4e 18          	mov    0x18(%rsi),%rcx
  106a80:	48 8b 76 10          	mov    0x10(%rsi),%rsi
  106a84:	4c 89 e7             	mov    %r12,%rdi
  106a87:	48 89 4e 18          	mov    %rcx,0x18(%rsi)
  106a8b:	48 89 71 10          	mov    %rsi,0x10(%rcx)
  106a8f:	48 89 c1             	mov    %rax,%rcx
  106a92:	48 83 c9 01          	or     $0x1,%rcx
  106a96:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  106a9a:	48 89 04 02          	mov    %rax,(%rdx,%rax,1)
  106a9e:	5b                   	pop    %rbx
  106a9f:	41 5c                	pop    %r12
  106aa1:	5d                   	pop    %rbp
  106aa2:	e9 b9 a9 ff ff       	jmpq   101460 <__malloc_unlock>
  106aa7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  106aae:	00 00 
  106ab0:	48 01 c8             	add    %rcx,%rax
  106ab3:	83 e7 01             	and    $0x1,%edi
  106ab6:	75 1a                	jne    106ad2 <_free_r+0x232>
  106ab8:	48 8b 4b f0          	mov    -0x10(%rbx),%rcx
  106abc:	48 29 ca             	sub    %rcx,%rdx
  106abf:	48 01 c8             	add    %rcx,%rax
  106ac2:	48 8b 72 10          	mov    0x10(%rdx),%rsi
  106ac6:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  106aca:	48 89 4e 18          	mov    %rcx,0x18(%rsi)
  106ace:	48 89 71 10          	mov    %rsi,0x10(%rcx)
  106ad2:	48 89 c1             	mov    %rax,%rcx
  106ad5:	48 83 c9 01          	or     $0x1,%rcx
  106ad9:	48 39 05 10 19 04 00 	cmp    %rax,0x41910(%rip)        # 1483f0 <__malloc_trim_threshold>
  106ae0:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  106ae4:	48 89 15 a5 0a 04 00 	mov    %rdx,0x40aa5(%rip)        # 147590 <__malloc_av_+0x10>
  106aeb:	0f 87 92 fe ff ff    	ja     106983 <_free_r+0xe3>
  106af1:	48 8b 35 10 99 01 00 	mov    0x19910(%rip),%rsi        # 120408 <__malloc_top_pad>
  106af8:	4c 89 e7             	mov    %r12,%rdi
  106afb:	e8 a0 fc ff ff       	callq  1067a0 <_malloc_trim_r>
  106b00:	e9 7e fe ff ff       	jmpq   106983 <_free_r+0xe3>
  106b05:	0f 1f 00             	nopl   (%rax)
  106b08:	48 83 fe 14          	cmp    $0x14,%rsi
  106b0c:	76 2a                	jbe    106b38 <_free_r+0x298>
  106b0e:	48 83 fe 54          	cmp    $0x54,%rsi
  106b12:	0f 87 88 00 00 00    	ja     106ba0 <_free_r+0x300>
  106b18:	48 89 c6             	mov    %rax,%rsi
  106b1b:	48 c1 ee 0c          	shr    $0xc,%rsi
  106b1f:	8d 4e 6e             	lea    0x6e(%rsi),%ecx
  106b22:	8d b4 36 de 00 00 00 	lea    0xde(%rsi,%rsi,1),%esi
  106b29:	48 63 f6             	movslq %esi,%rsi
  106b2c:	48 c1 e6 03          	shl    $0x3,%rsi
  106b30:	e9 e5 fe ff ff       	jmpq   106a1a <_free_r+0x17a>
  106b35:	0f 1f 00             	nopl   (%rax)
  106b38:	8d 4e 5b             	lea    0x5b(%rsi),%ecx
  106b3b:	8d b4 36 b8 00 00 00 	lea    0xb8(%rsi,%rsi,1),%esi
  106b42:	48 63 f6             	movslq %esi,%rsi
  106b45:	48 c1 e6 03          	shl    $0x3,%rsi
  106b49:	e9 cc fe ff ff       	jmpq   106a1a <_free_r+0x17a>
  106b4e:	66 90                	xchg   %ax,%ax
  106b50:	48 89 15 51 0a 04 00 	mov    %rdx,0x40a51(%rip)        # 1475a8 <__malloc_av_+0x28>
  106b57:	48 89 15 42 0a 04 00 	mov    %rdx,0x40a42(%rip)        # 1475a0 <__malloc_av_+0x20>
  106b5e:	48 c7 42 18 90 75 14 	movq   $0x147590,0x18(%rdx)
  106b65:	00 
  106b66:	48 c7 42 10 90 75 14 	movq   $0x147590,0x10(%rdx)
  106b6d:	00 
  106b6e:	4c 89 42 08          	mov    %r8,0x8(%rdx)
  106b72:	48 89 07             	mov    %rax,(%rdi)
  106b75:	e9 09 fe ff ff       	jmpq   106983 <_free_r+0xe3>
  106b7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  106b80:	c1 f9 02             	sar    $0x2,%ecx
  106b83:	b8 01 00 00 00       	mov    $0x1,%eax
  106b88:	48 d3 e0             	shl    %cl,%rax
  106b8b:	48 09 05 f6 09 04 00 	or     %rax,0x409f6(%rip)        # 147588 <__malloc_av_+0x8>
  106b92:	e9 bb fe ff ff       	jmpq   106a52 <_free_r+0x1b2>
  106b97:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  106b9e:	00 00 
  106ba0:	48 81 fe 54 01 00 00 	cmp    $0x154,%rsi
  106ba7:	77 1d                	ja     106bc6 <_free_r+0x326>
  106ba9:	48 89 c6             	mov    %rax,%rsi
  106bac:	48 c1 ee 0f          	shr    $0xf,%rsi
  106bb0:	8d 4e 77             	lea    0x77(%rsi),%ecx
  106bb3:	8d b4 36 f0 00 00 00 	lea    0xf0(%rsi,%rsi,1),%esi
  106bba:	48 63 f6             	movslq %esi,%rsi
  106bbd:	48 c1 e6 03          	shl    $0x3,%rsi
  106bc1:	e9 54 fe ff ff       	jmpq   106a1a <_free_r+0x17a>
  106bc6:	48 81 fe 54 05 00 00 	cmp    $0x554,%rsi
  106bcd:	77 1d                	ja     106bec <_free_r+0x34c>
  106bcf:	48 89 c6             	mov    %rax,%rsi
  106bd2:	48 c1 ee 12          	shr    $0x12,%rsi
  106bd6:	8d 4e 7c             	lea    0x7c(%rsi),%ecx
  106bd9:	8d b4 36 fa 00 00 00 	lea    0xfa(%rsi,%rsi,1),%esi
  106be0:	48 63 f6             	movslq %esi,%rsi
  106be3:	48 c1 e6 03          	shl    $0x3,%rsi
  106be7:	e9 2e fe ff ff       	jmpq   106a1a <_free_r+0x17a>
  106bec:	be f0 07 00 00       	mov    $0x7f0,%esi
  106bf1:	b9 7e 00 00 00       	mov    $0x7e,%ecx
  106bf6:	e9 1f fe ff ff       	jmpq   106a1a <_free_r+0x17a>
  106bfb:	48 89 c1             	mov    %rax,%rcx
  106bfe:	48 83 c9 01          	or     $0x1,%rcx
  106c02:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  106c06:	48 89 06             	mov    %rax,(%rsi)
  106c09:	e9 75 fd ff ff       	jmpq   106983 <_free_r+0xe3>
  106c0e:	66 90                	xchg   %ax,%ax

0000000000106c10 <_fwalk_reent>:
  106c10:	55                   	push   %rbp
  106c11:	48 89 e5             	mov    %rsp,%rbp
  106c14:	41 57                	push   %r15
  106c16:	41 56                	push   %r14
  106c18:	49 89 fe             	mov    %rdi,%r14
  106c1b:	41 55                	push   %r13
  106c1d:	4c 8d af 00 02 00 00 	lea    0x200(%rdi),%r13
  106c24:	41 54                	push   %r12
  106c26:	45 31 e4             	xor    %r12d,%r12d
  106c29:	53                   	push   %rbx
  106c2a:	48 83 ec 18          	sub    $0x18,%rsp
  106c2e:	48 89 75 c8          	mov    %rsi,-0x38(%rbp)
  106c32:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  106c38:	41 8b 45 08          	mov    0x8(%r13),%eax
  106c3c:	49 8b 5d 10          	mov    0x10(%r13),%rbx
  106c40:	85 c0                	test   %eax,%eax
  106c42:	7e 45                	jle    106c89 <_fwalk_reent+0x79>
  106c44:	8d 50 ff             	lea    -0x1(%rax),%edx
  106c47:	48 83 c2 01          	add    $0x1,%rdx
  106c4b:	48 69 d2 b8 00 00 00 	imul   $0xb8,%rdx,%rdx
  106c52:	4c 8d 3c 13          	lea    (%rbx,%rdx,1),%r15
  106c56:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  106c5d:	00 00 00 
  106c60:	66 83 7b 10 01       	cmpw   $0x1,0x10(%rbx)
  106c65:	76 16                	jbe    106c7d <_fwalk_reent+0x6d>
  106c67:	66 83 7b 12 ff       	cmpw   $0xffff,0x12(%rbx)
  106c6c:	74 0f                	je     106c7d <_fwalk_reent+0x6d>
  106c6e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  106c72:	48 89 de             	mov    %rbx,%rsi
  106c75:	4c 89 f7             	mov    %r14,%rdi
  106c78:	ff d0                	callq  *%rax
  106c7a:	41 09 c4             	or     %eax,%r12d
  106c7d:	48 81 c3 b8 00 00 00 	add    $0xb8,%rbx
  106c84:	49 39 df             	cmp    %rbx,%r15
  106c87:	75 d7                	jne    106c60 <_fwalk_reent+0x50>
  106c89:	4d 8b 6d 00          	mov    0x0(%r13),%r13
  106c8d:	4d 85 ed             	test   %r13,%r13
  106c90:	75 a6                	jne    106c38 <_fwalk_reent+0x28>
  106c92:	48 83 c4 18          	add    $0x18,%rsp
  106c96:	44 89 e0             	mov    %r12d,%eax
  106c99:	5b                   	pop    %rbx
  106c9a:	41 5c                	pop    %r12
  106c9c:	41 5d                	pop    %r13
  106c9e:	41 5e                	pop    %r14
  106ca0:	41 5f                	pop    %r15
  106ca2:	5d                   	pop    %rbp
  106ca3:	c3                   	retq   
  106ca4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  106cab:	00 00 00 
  106cae:	66 90                	xchg   %ax,%ax

0000000000106cb0 <_localeconv_r>:
  106cb0:	b8 e0 82 14 00       	mov    $0x1482e0,%eax
  106cb5:	c3                   	retq   
  106cb6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  106cbd:	00 00 00 

0000000000106cc0 <__smakebuf_r>:
  106cc0:	55                   	push   %rbp
  106cc1:	48 89 e5             	mov    %rsp,%rbp
  106cc4:	41 56                	push   %r14
  106cc6:	41 55                	push   %r13
  106cc8:	41 54                	push   %r12
  106cca:	53                   	push   %rbx
  106ccb:	48 89 f3             	mov    %rsi,%rbx
  106cce:	48 83 ec 70          	sub    $0x70,%rsp
  106cd2:	0f b7 46 10          	movzwl 0x10(%rsi),%eax
  106cd6:	a8 02                	test   $0x2,%al
  106cd8:	74 26                	je     106d00 <__smakebuf_r+0x40>
  106cda:	48 8d 43 77          	lea    0x77(%rbx),%rax
  106cde:	c7 43 20 01 00 00 00 	movl   $0x1,0x20(%rbx)
  106ce5:	48 89 03             	mov    %rax,(%rbx)
  106ce8:	48 89 43 18          	mov    %rax,0x18(%rbx)
  106cec:	48 83 c4 70          	add    $0x70,%rsp
  106cf0:	5b                   	pop    %rbx
  106cf1:	41 5c                	pop    %r12
  106cf3:	41 5d                	pop    %r13
  106cf5:	41 5e                	pop    %r14
  106cf7:	5d                   	pop    %rbp
  106cf8:	c3                   	retq   
  106cf9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  106d00:	0f bf 76 12          	movswl 0x12(%rsi),%esi
  106d04:	49 89 fc             	mov    %rdi,%r12
  106d07:	66 85 f6             	test   %si,%si
  106d0a:	0f 88 8c 00 00 00    	js     106d9c <__smakebuf_r+0xdc>
  106d10:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
  106d17:	e8 44 2e 00 00       	callq  109b60 <_fstat_r>
  106d1c:	85 c0                	test   %eax,%eax
  106d1e:	78 78                	js     106d98 <__smakebuf_r+0xd8>
  106d20:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
  106d26:	41 be 00 04 00 00    	mov    $0x400,%r14d
  106d2c:	45 31 ed             	xor    %r13d,%r13d
  106d2f:	4c 89 e7             	mov    %r12,%rdi
  106d32:	4c 89 f6             	mov    %r14,%rsi
  106d35:	25 00 f0 00 00       	and    $0xf000,%eax
  106d3a:	3d 00 20 00 00       	cmp    $0x2000,%eax
  106d3f:	41 0f 94 c5          	sete   %r13b
  106d43:	e8 18 9e ff ff       	callq  100b60 <_malloc_r>
  106d48:	48 85 c0             	test   %rax,%rax
  106d4b:	74 78                	je     106dc5 <__smakebuf_r+0x105>
  106d4d:	49 c7 44 24 58 a0 65 	movq   $0x1065a0,0x58(%r12)
  106d54:	10 00 
  106d56:	66 81 4b 10 80 00    	orw    $0x80,0x10(%rbx)
  106d5c:	48 89 03             	mov    %rax,(%rbx)
  106d5f:	48 89 43 18          	mov    %rax,0x18(%rbx)
  106d63:	44 89 73 20          	mov    %r14d,0x20(%rbx)
  106d67:	45 85 ed             	test   %r13d,%r13d
  106d6a:	74 80                	je     106cec <__smakebuf_r+0x2c>
  106d6c:	0f bf 73 12          	movswl 0x12(%rbx),%esi
  106d70:	4c 89 e7             	mov    %r12,%rdi
  106d73:	e8 68 33 00 00       	callq  10a0e0 <_isatty_r>
  106d78:	85 c0                	test   %eax,%eax
  106d7a:	0f 84 6c ff ff ff    	je     106cec <__smakebuf_r+0x2c>
  106d80:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  106d84:	83 e0 fc             	and    $0xfffffffc,%eax
  106d87:	83 c8 01             	or     $0x1,%eax
  106d8a:	66 89 43 10          	mov    %ax,0x10(%rbx)
  106d8e:	e9 59 ff ff ff       	jmpq   106cec <__smakebuf_r+0x2c>
  106d93:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  106d98:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  106d9c:	66 25 80 00          	and    $0x80,%ax
  106da0:	45 31 ed             	xor    %r13d,%r13d
  106da3:	4c 89 e7             	mov    %r12,%rdi
  106da6:	66 83 f8 01          	cmp    $0x1,%ax
  106daa:	4d 19 f6             	sbb    %r14,%r14
  106dad:	41 81 e6 c0 03 00 00 	and    $0x3c0,%r14d
  106db4:	49 83 c6 40          	add    $0x40,%r14
  106db8:	4c 89 f6             	mov    %r14,%rsi
  106dbb:	e8 a0 9d ff ff       	callq  100b60 <_malloc_r>
  106dc0:	48 85 c0             	test   %rax,%rax
  106dc3:	75 88                	jne    106d4d <__smakebuf_r+0x8d>
  106dc5:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  106dc9:	f6 c4 02             	test   $0x2,%ah
  106dcc:	0f 85 1a ff ff ff    	jne    106cec <__smakebuf_r+0x2c>
  106dd2:	83 e0 fc             	and    $0xfffffffc,%eax
  106dd5:	83 c8 02             	or     $0x2,%eax
  106dd8:	66 89 43 10          	mov    %ax,0x10(%rbx)
  106ddc:	e9 f9 fe ff ff       	jmpq   106cda <__smakebuf_r+0x1a>
  106de1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  106de8:	00 00 00 
  106deb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000106df0 <memchr>:
  106df0:	89 f1                	mov    %esi,%ecx
  106df2:	40 f6 c7 07          	test   $0x7,%dil
  106df6:	74 2b                	je     106e23 <memchr+0x33>
  106df8:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
  106dfc:	48 85 d2             	test   %rdx,%rdx
  106dff:	75 17                	jne    106e18 <memchr+0x28>
  106e01:	eb 1d                	jmp    106e20 <memchr+0x30>
  106e03:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  106e08:	48 83 c7 01          	add    $0x1,%rdi
  106e0c:	40 f6 c7 07          	test   $0x7,%dil
  106e10:	74 1e                	je     106e30 <memchr+0x40>
  106e12:	48 83 e8 01          	sub    $0x1,%rax
  106e16:	72 08                	jb     106e20 <memchr+0x30>
  106e18:	38 0f                	cmp    %cl,(%rdi)
  106e1a:	75 ec                	jne    106e08 <memchr+0x18>
  106e1c:	48 89 f8             	mov    %rdi,%rax
  106e1f:	c3                   	retq   
  106e20:	31 c0                	xor    %eax,%eax
  106e22:	c3                   	retq   
  106e23:	48 89 d0             	mov    %rdx,%rax
  106e26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  106e2d:	00 00 00 
  106e30:	48 83 f8 07          	cmp    $0x7,%rax
  106e34:	77 2a                	ja     106e60 <memchr+0x70>
  106e36:	48 85 c0             	test   %rax,%rax
  106e39:	0f 84 89 00 00 00    	je     106ec8 <memchr+0xd8>
  106e3f:	48 8d 14 07          	lea    (%rdi,%rax,1),%rdx
  106e43:	48 89 f8             	mov    %rdi,%rax
  106e46:	eb 11                	jmp    106e59 <memchr+0x69>
  106e48:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  106e4f:	00 
  106e50:	48 83 c0 01          	add    $0x1,%rax
  106e54:	48 39 c2             	cmp    %rax,%rdx
  106e57:	74 c7                	je     106e20 <memchr+0x30>
  106e59:	38 08                	cmp    %cl,(%rax)
  106e5b:	75 f3                	jne    106e50 <memchr+0x60>
  106e5d:	c3                   	retq   
  106e5e:	66 90                	xchg   %ax,%ax
  106e60:	49 ba ff fe fe fe fe 	movabs $0xfefefefefefefeff,%r10
  106e67:	fe fe fe 
  106e6a:	40 0f b6 f6          	movzbl %sil,%esi
  106e6e:	49 b9 80 80 80 80 80 	movabs $0x8080808080808080,%r9
  106e75:	80 80 80 
  106e78:	41 89 f0             	mov    %esi,%r8d
  106e7b:	41 c1 e0 08          	shl    $0x8,%r8d
  106e7f:	44 09 c6             	or     %r8d,%esi
  106e82:	48 63 f6             	movslq %esi,%rsi
  106e85:	49 89 f0             	mov    %rsi,%r8
  106e88:	49 c1 e0 10          	shl    $0x10,%r8
  106e8c:	4c 09 c6             	or     %r8,%rsi
  106e8f:	49 89 f0             	mov    %rsi,%r8
  106e92:	49 c1 e0 20          	shl    $0x20,%r8
  106e96:	49 09 f0             	or     %rsi,%r8
  106e99:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  106ea0:	48 8b 17             	mov    (%rdi),%rdx
  106ea3:	4c 31 c2             	xor    %r8,%rdx
  106ea6:	4a 8d 34 12          	lea    (%rdx,%r10,1),%rsi
  106eaa:	48 f7 d2             	not    %rdx
  106ead:	48 21 f2             	and    %rsi,%rdx
  106eb0:	4c 85 ca             	test   %r9,%rdx
  106eb3:	75 8a                	jne    106e3f <memchr+0x4f>
  106eb5:	48 83 e8 08          	sub    $0x8,%rax
  106eb9:	48 83 c7 08          	add    $0x8,%rdi
  106ebd:	48 83 f8 07          	cmp    $0x7,%rax
  106ec1:	77 dd                	ja     106ea0 <memchr+0xb0>
  106ec3:	e9 6e ff ff ff       	jmpq   106e36 <memchr+0x46>
  106ec8:	c3                   	retq   
  106ec9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000106ed0 <_Balloc>:
  106ed0:	55                   	push   %rbp
  106ed1:	48 89 e5             	mov    %rsp,%rbp
  106ed4:	41 55                	push   %r13
  106ed6:	53                   	push   %rbx
  106ed7:	89 f3                	mov    %esi,%ebx
  106ed9:	48 83 ec 10          	sub    $0x10,%rsp
  106edd:	48 8b 47 78          	mov    0x78(%rdi),%rax
  106ee1:	48 85 c0             	test   %rax,%rax
  106ee4:	74 2a                	je     106f10 <_Balloc+0x40>
  106ee6:	48 63 d3             	movslq %ebx,%rdx
  106ee9:	48 8d 14 d0          	lea    (%rax,%rdx,8),%rdx
  106eed:	48 8b 02             	mov    (%rdx),%rax
  106ef0:	48 85 c0             	test   %rax,%rax
  106ef3:	74 43                	je     106f38 <_Balloc+0x68>
  106ef5:	48 8b 08             	mov    (%rax),%rcx
  106ef8:	48 89 0a             	mov    %rcx,(%rdx)
  106efb:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  106f02:	00 
  106f03:	48 83 c4 10          	add    $0x10,%rsp
  106f07:	5b                   	pop    %rbx
  106f08:	41 5d                	pop    %r13
  106f0a:	5d                   	pop    %rbp
  106f0b:	c3                   	retq   
  106f0c:	0f 1f 40 00          	nopl   0x0(%rax)
  106f10:	ba 41 00 00 00       	mov    $0x41,%edx
  106f15:	be 08 00 00 00       	mov    $0x8,%esi
  106f1a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  106f1e:	e8 7d 2a 00 00       	callq  1099a0 <_calloc_r>
  106f23:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  106f27:	48 89 47 78          	mov    %rax,0x78(%rdi)
  106f2b:	48 85 c0             	test   %rax,%rax
  106f2e:	75 b6                	jne    106ee6 <_Balloc+0x16>
  106f30:	31 c0                	xor    %eax,%eax
  106f32:	eb cf                	jmp    106f03 <_Balloc+0x33>
  106f34:	0f 1f 40 00          	nopl   0x0(%rax)
  106f38:	41 bd 01 00 00 00    	mov    $0x1,%r13d
  106f3e:	89 d9                	mov    %ebx,%ecx
  106f40:	be 01 00 00 00       	mov    $0x1,%esi
  106f45:	41 d3 e5             	shl    %cl,%r13d
  106f48:	49 63 c5             	movslq %r13d,%rax
  106f4b:	48 8d 14 85 1c 00 00 	lea    0x1c(,%rax,4),%rdx
  106f52:	00 
  106f53:	e8 48 2a 00 00       	callq  1099a0 <_calloc_r>
  106f58:	48 85 c0             	test   %rax,%rax
  106f5b:	74 d3                	je     106f30 <_Balloc+0x60>
  106f5d:	89 58 08             	mov    %ebx,0x8(%rax)
  106f60:	44 89 68 0c          	mov    %r13d,0xc(%rax)
  106f64:	eb 95                	jmp    106efb <_Balloc+0x2b>
  106f66:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  106f6d:	00 00 00 

0000000000106f70 <_Bfree>:
  106f70:	48 85 f6             	test   %rsi,%rsi
  106f73:	74 15                	je     106f8a <_Bfree+0x1a>
  106f75:	48 63 56 08          	movslq 0x8(%rsi),%rdx
  106f79:	48 8b 47 78          	mov    0x78(%rdi),%rax
  106f7d:	48 8d 04 d0          	lea    (%rax,%rdx,8),%rax
  106f81:	48 8b 10             	mov    (%rax),%rdx
  106f84:	48 89 16             	mov    %rdx,(%rsi)
  106f87:	48 89 30             	mov    %rsi,(%rax)
  106f8a:	c3                   	retq   
  106f8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000106f90 <__multadd>:
  106f90:	55                   	push   %rbp
  106f91:	48 89 e5             	mov    %rsp,%rbp
  106f94:	41 57                	push   %r15
  106f96:	41 56                	push   %r14
  106f98:	41 55                	push   %r13
  106f9a:	41 54                	push   %r12
  106f9c:	49 89 f4             	mov    %rsi,%r12
  106f9f:	89 d6                	mov    %edx,%esi
  106fa1:	53                   	push   %rbx
  106fa2:	48 89 fb             	mov    %rdi,%rbx
  106fa5:	89 cf                	mov    %ecx,%edi
  106fa7:	31 c9                	xor    %ecx,%ecx
  106fa9:	48 83 ec 08          	sub    $0x8,%rsp
  106fad:	45 8b 6c 24 14       	mov    0x14(%r12),%r13d
  106fb2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  106fb8:	41 8b 44 8c 18       	mov    0x18(%r12,%rcx,4),%eax
  106fbd:	0f b7 d0             	movzwl %ax,%edx
  106fc0:	c1 e8 10             	shr    $0x10,%eax
  106fc3:	0f af d6             	imul   %esi,%edx
  106fc6:	0f af c6             	imul   %esi,%eax
  106fc9:	01 fa                	add    %edi,%edx
  106fcb:	89 d7                	mov    %edx,%edi
  106fcd:	0f b7 d2             	movzwl %dx,%edx
  106fd0:	c1 ef 10             	shr    $0x10,%edi
  106fd3:	01 f8                	add    %edi,%eax
  106fd5:	41 89 c6             	mov    %eax,%r14d
  106fd8:	c1 e0 10             	shl    $0x10,%eax
  106fdb:	01 d0                	add    %edx,%eax
  106fdd:	41 c1 ee 10          	shr    $0x10,%r14d
  106fe1:	41 89 44 8c 18       	mov    %eax,0x18(%r12,%rcx,4)
  106fe6:	48 83 c1 01          	add    $0x1,%rcx
  106fea:	44 89 f7             	mov    %r14d,%edi
  106fed:	41 39 cd             	cmp    %ecx,%r13d
  106ff0:	7f c6                	jg     106fb8 <__multadd+0x28>
  106ff2:	45 85 f6             	test   %r14d,%r14d
  106ff5:	74 18                	je     10700f <__multadd+0x7f>
  106ff7:	45 39 6c 24 0c       	cmp    %r13d,0xc(%r12)
  106ffc:	7e 2a                	jle    107028 <__multadd+0x98>
  106ffe:	49 63 c5             	movslq %r13d,%rax
  107001:	41 83 c5 01          	add    $0x1,%r13d
  107005:	45 89 74 84 18       	mov    %r14d,0x18(%r12,%rax,4)
  10700a:	45 89 6c 24 14       	mov    %r13d,0x14(%r12)
  10700f:	48 83 c4 08          	add    $0x8,%rsp
  107013:	4c 89 e0             	mov    %r12,%rax
  107016:	5b                   	pop    %rbx
  107017:	41 5c                	pop    %r12
  107019:	41 5d                	pop    %r13
  10701b:	41 5e                	pop    %r14
  10701d:	41 5f                	pop    %r15
  10701f:	5d                   	pop    %rbp
  107020:	c3                   	retq   
  107021:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  107028:	41 8b 44 24 08       	mov    0x8(%r12),%eax
  10702d:	48 89 df             	mov    %rbx,%rdi
  107030:	8d 70 01             	lea    0x1(%rax),%esi
  107033:	e8 98 fe ff ff       	callq  106ed0 <_Balloc>
  107038:	49 89 c7             	mov    %rax,%r15
  10703b:	48 85 c0             	test   %rax,%rax
  10703e:	74 37                	je     107077 <__multadd+0xe7>
  107040:	49 63 44 24 14       	movslq 0x14(%r12),%rax
  107045:	49 8d 74 24 10       	lea    0x10(%r12),%rsi
  10704a:	49 8d 7f 10          	lea    0x10(%r15),%rdi
  10704e:	48 8d 14 85 08 00 00 	lea    0x8(,%rax,4),%rdx
  107055:	00 
  107056:	e8 a5 8f ff ff       	callq  100000 <__rom_region_start>
  10705b:	49 63 54 24 08       	movslq 0x8(%r12),%rdx
  107060:	48 8b 43 78          	mov    0x78(%rbx),%rax
  107064:	48 8d 04 d0          	lea    (%rax,%rdx,8),%rax
  107068:	48 8b 10             	mov    (%rax),%rdx
  10706b:	49 89 14 24          	mov    %rdx,(%r12)
  10706f:	4c 89 20             	mov    %r12,(%rax)
  107072:	4d 89 fc             	mov    %r15,%r12
  107075:	eb 87                	jmp    106ffe <__multadd+0x6e>
  107077:	b9 37 15 11 00       	mov    $0x111537,%ecx
  10707c:	31 d2                	xor    %edx,%edx
  10707e:	be b5 00 00 00       	mov    $0xb5,%esi
  107083:	bf f0 0d 11 00       	mov    $0x110df0,%edi
  107088:	e8 c3 28 00 00       	callq  109950 <__assert_func>
  10708d:	0f 1f 00             	nopl   (%rax)

0000000000107090 <__hi0bits>:
  107090:	31 c0                	xor    %eax,%eax
  107092:	f7 c7 00 00 ff ff    	test   $0xffff0000,%edi
  107098:	75 08                	jne    1070a2 <__hi0bits+0x12>
  10709a:	c1 e7 10             	shl    $0x10,%edi
  10709d:	b8 10 00 00 00       	mov    $0x10,%eax
  1070a2:	f7 c7 00 00 00 ff    	test   $0xff000000,%edi
  1070a8:	75 06                	jne    1070b0 <__hi0bits+0x20>
  1070aa:	83 c0 08             	add    $0x8,%eax
  1070ad:	c1 e7 08             	shl    $0x8,%edi
  1070b0:	f7 c7 00 00 00 f0    	test   $0xf0000000,%edi
  1070b6:	75 06                	jne    1070be <__hi0bits+0x2e>
  1070b8:	83 c0 04             	add    $0x4,%eax
  1070bb:	c1 e7 04             	shl    $0x4,%edi
  1070be:	f7 c7 00 00 00 c0    	test   $0xc0000000,%edi
  1070c4:	75 06                	jne    1070cc <__hi0bits+0x3c>
  1070c6:	83 c0 02             	add    $0x2,%eax
  1070c9:	c1 e7 02             	shl    $0x2,%edi
  1070cc:	85 ff                	test   %edi,%edi
  1070ce:	78 11                	js     1070e1 <__hi0bits+0x51>
  1070d0:	83 c0 01             	add    $0x1,%eax
  1070d3:	ba 20 00 00 00       	mov    $0x20,%edx
  1070d8:	81 e7 00 00 00 40    	and    $0x40000000,%edi
  1070de:	0f 44 c2             	cmove  %edx,%eax
  1070e1:	c3                   	retq   
  1070e2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1070e9:	00 00 00 
  1070ec:	0f 1f 40 00          	nopl   0x0(%rax)

00000000001070f0 <__lo0bits>:
  1070f0:	8b 07                	mov    (%rdi),%eax
  1070f2:	45 31 c0             	xor    %r8d,%r8d
  1070f5:	a8 07                	test   $0x7,%al
  1070f7:	74 17                	je     107110 <__lo0bits+0x20>
  1070f9:	a8 01                	test   $0x1,%al
  1070fb:	75 0e                	jne    10710b <__lo0bits+0x1b>
  1070fd:	a8 02                	test   $0x2,%al
  1070ff:	74 5f                	je     107160 <__lo0bits+0x70>
  107101:	d1 e8                	shr    %eax
  107103:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  107109:	89 07                	mov    %eax,(%rdi)
  10710b:	44 89 c0             	mov    %r8d,%eax
  10710e:	c3                   	retq   
  10710f:	90                   	nop
  107110:	66 85 c0             	test   %ax,%ax
  107113:	75 09                	jne    10711e <__lo0bits+0x2e>
  107115:	c1 e8 10             	shr    $0x10,%eax
  107118:	41 b8 10 00 00 00    	mov    $0x10,%r8d
  10711e:	84 c0                	test   %al,%al
  107120:	75 07                	jne    107129 <__lo0bits+0x39>
  107122:	41 83 c0 08          	add    $0x8,%r8d
  107126:	c1 e8 08             	shr    $0x8,%eax
  107129:	a8 0f                	test   $0xf,%al
  10712b:	75 07                	jne    107134 <__lo0bits+0x44>
  10712d:	41 83 c0 04          	add    $0x4,%r8d
  107131:	c1 e8 04             	shr    $0x4,%eax
  107134:	a8 03                	test   $0x3,%al
  107136:	75 07                	jne    10713f <__lo0bits+0x4f>
  107138:	41 83 c0 02          	add    $0x2,%r8d
  10713c:	c1 e8 02             	shr    $0x2,%eax
  10713f:	a8 01                	test   $0x1,%al
  107141:	75 08                	jne    10714b <__lo0bits+0x5b>
  107143:	41 83 c0 01          	add    $0x1,%r8d
  107147:	d1 e8                	shr    %eax
  107149:	74 0d                	je     107158 <__lo0bits+0x68>
  10714b:	89 07                	mov    %eax,(%rdi)
  10714d:	44 89 c0             	mov    %r8d,%eax
  107150:	c3                   	retq   
  107151:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  107158:	41 b8 20 00 00 00    	mov    $0x20,%r8d
  10715e:	eb ab                	jmp    10710b <__lo0bits+0x1b>
  107160:	c1 e8 02             	shr    $0x2,%eax
  107163:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  107169:	89 07                	mov    %eax,(%rdi)
  10716b:	44 89 c0             	mov    %r8d,%eax
  10716e:	c3                   	retq   
  10716f:	90                   	nop

0000000000107170 <__i2b>:
  107170:	55                   	push   %rbp
  107171:	48 89 e5             	mov    %rsp,%rbp
  107174:	53                   	push   %rbx
  107175:	89 f3                	mov    %esi,%ebx
  107177:	48 83 ec 18          	sub    $0x18,%rsp
  10717b:	48 8b 57 78          	mov    0x78(%rdi),%rdx
  10717f:	48 85 d2             	test   %rdx,%rdx
  107182:	74 2c                	je     1071b0 <__i2b+0x40>
  107184:	48 8b 42 08          	mov    0x8(%rdx),%rax
  107188:	48 85 c0             	test   %rax,%rax
  10718b:	74 63                	je     1071f0 <__i2b+0x80>
  10718d:	48 8b 08             	mov    (%rax),%rcx
  107190:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  107194:	48 b9 00 00 00 00 01 	movabs $0x100000000,%rcx
  10719b:	00 00 00 
  10719e:	89 58 18             	mov    %ebx,0x18(%rax)
  1071a1:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  1071a5:	48 89 48 10          	mov    %rcx,0x10(%rax)
  1071a9:	c9                   	leaveq 
  1071aa:	c3                   	retq   
  1071ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  1071b0:	ba 41 00 00 00       	mov    $0x41,%edx
  1071b5:	be 08 00 00 00       	mov    $0x8,%esi
  1071ba:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  1071be:	e8 dd 27 00 00       	callq  1099a0 <_calloc_r>
  1071c3:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  1071c7:	48 89 c2             	mov    %rax,%rdx
  1071ca:	48 89 47 78          	mov    %rax,0x78(%rdi)
  1071ce:	48 85 c0             	test   %rax,%rax
  1071d1:	75 b1                	jne    107184 <__i2b+0x14>
  1071d3:	b9 37 15 11 00       	mov    $0x111537,%ecx
  1071d8:	31 d2                	xor    %edx,%edx
  1071da:	be 40 01 00 00       	mov    $0x140,%esi
  1071df:	bf f0 0d 11 00       	mov    $0x110df0,%edi
  1071e4:	e8 67 27 00 00       	callq  109950 <__assert_func>
  1071e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  1071f0:	ba 24 00 00 00       	mov    $0x24,%edx
  1071f5:	be 01 00 00 00       	mov    $0x1,%esi
  1071fa:	e8 a1 27 00 00       	callq  1099a0 <_calloc_r>
  1071ff:	48 85 c0             	test   %rax,%rax
  107202:	74 cf                	je     1071d3 <__i2b+0x63>
  107204:	48 be 01 00 00 00 02 	movabs $0x200000001,%rsi
  10720b:	00 00 00 
  10720e:	48 89 70 08          	mov    %rsi,0x8(%rax)
  107212:	eb 80                	jmp    107194 <__i2b+0x24>
  107214:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10721b:	00 00 00 
  10721e:	66 90                	xchg   %ax,%ax

0000000000107220 <__multiply>:
  107220:	55                   	push   %rbp
  107221:	49 89 f2             	mov    %rsi,%r10
  107224:	48 89 e5             	mov    %rsp,%rbp
  107227:	41 57                	push   %r15
  107229:	41 56                	push   %r14
  10722b:	41 55                	push   %r13
  10722d:	41 54                	push   %r12
  10722f:	53                   	push   %rbx
  107230:	48 89 d3             	mov    %rdx,%rbx
  107233:	48 83 ec 28          	sub    $0x28,%rsp
  107237:	4c 63 7e 14          	movslq 0x14(%rsi),%r15
  10723b:	8b 52 14             	mov    0x14(%rdx),%edx
  10723e:	41 39 d7             	cmp    %edx,%r15d
  107241:	7c 11                	jl     107254 <__multiply+0x34>
  107243:	89 d0                	mov    %edx,%eax
  107245:	44 89 fa             	mov    %r15d,%edx
  107248:	4c 63 f8             	movslq %eax,%r15
  10724b:	48 89 d8             	mov    %rbx,%rax
  10724e:	48 89 f3             	mov    %rsi,%rbx
  107251:	49 89 c2             	mov    %rax,%r10
  107254:	46 8d 24 3a          	lea    (%rdx,%r15,1),%r12d
  107258:	31 f6                	xor    %esi,%esi
  10725a:	44 39 63 0c          	cmp    %r12d,0xc(%rbx)
  10725e:	4c 89 55 b8          	mov    %r10,-0x48(%rbp)
  107262:	40 0f 9c c6          	setl   %sil
  107266:	03 73 08             	add    0x8(%rbx),%esi
  107269:	89 55 c0             	mov    %edx,-0x40(%rbp)
  10726c:	e8 5f fc ff ff       	callq  106ed0 <_Balloc>
  107271:	48 63 55 c0          	movslq -0x40(%rbp),%rdx
  107275:	4c 8b 55 b8          	mov    -0x48(%rbp),%r10
  107279:	48 85 c0             	test   %rax,%rax
  10727c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  107280:	0f 84 c3 01 00 00    	je     107449 <__multiply+0x229>
  107286:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  10728a:	4c 8d 70 18          	lea    0x18(%rax),%r14
  10728e:	49 63 c4             	movslq %r12d,%rax
  107291:	4d 8d 2c 86          	lea    (%r14,%rax,4),%r13
  107295:	4c 89 f0             	mov    %r14,%rax
  107298:	4d 39 ee             	cmp    %r13,%r14
  10729b:	73 12                	jae    1072af <__multiply+0x8f>
  10729d:	0f 1f 00             	nopl   (%rax)
  1072a0:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  1072a6:	48 83 c0 04          	add    $0x4,%rax
  1072aa:	49 39 c5             	cmp    %rax,%r13
  1072ad:	77 f1                	ja     1072a0 <__multiply+0x80>
  1072af:	49 83 c2 18          	add    $0x18,%r10
  1072b3:	48 8d 43 18          	lea    0x18(%rbx),%rax
  1072b7:	4f 8d 3c ba          	lea    (%r10,%r15,4),%r15
  1072bb:	48 89 c6             	mov    %rax,%rsi
  1072be:	4c 8d 1c 90          	lea    (%rax,%rdx,4),%r11
  1072c2:	4d 39 fa             	cmp    %r15,%r10
  1072c5:	0f 83 46 01 00 00    	jae    107411 <__multiply+0x1f1>
  1072cb:	4c 89 d8             	mov    %r11,%rax
  1072ce:	4c 89 6d c0          	mov    %r13,-0x40(%rbp)
  1072d2:	48 29 d8             	sub    %rbx,%rax
  1072d5:	48 83 c3 19          	add    $0x19,%rbx
  1072d9:	44 89 65 b8          	mov    %r12d,-0x48(%rbp)
  1072dd:	49 89 f4             	mov    %rsi,%r12
  1072e0:	48 83 e8 19          	sub    $0x19,%rax
  1072e4:	48 c1 e8 02          	shr    $0x2,%rax
  1072e8:	49 39 db             	cmp    %rbx,%r11
  1072eb:	48 8d 14 85 04 00 00 	lea    0x4(,%rax,4),%rdx
  1072f2:	00 
  1072f3:	b8 04 00 00 00       	mov    $0x4,%eax
  1072f8:	48 0f 43 c2          	cmovae %rdx,%rax
  1072fc:	49 89 c5             	mov    %rax,%r13
  1072ff:	eb 24                	jmp    107325 <__multiply+0x105>
  107301:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  107308:	c1 e8 10             	shr    $0x10,%eax
  10730b:	41 89 c0             	mov    %eax,%r8d
  10730e:	0f 85 85 00 00 00    	jne    107399 <__multiply+0x179>
  107314:	49 83 c2 04          	add    $0x4,%r10
  107318:	49 83 c6 04          	add    $0x4,%r14
  10731c:	4d 39 d7             	cmp    %r10,%r15
  10731f:	0f 86 e4 00 00 00    	jbe    107409 <__multiply+0x1e9>
  107325:	41 8b 02             	mov    (%r10),%eax
  107328:	41 89 c0             	mov    %eax,%r8d
  10732b:	41 81 e0 ff ff 00 00 	and    $0xffff,%r8d
  107332:	74 d4                	je     107308 <__multiply+0xe8>
  107334:	4c 89 f7             	mov    %r14,%rdi
  107337:	4c 89 e6             	mov    %r12,%rsi
  10733a:	45 31 c9             	xor    %r9d,%r9d
  10733d:	0f 1f 00             	nopl   (%rax)
  107340:	8b 16                	mov    (%rsi),%edx
  107342:	8b 1f                	mov    (%rdi),%ebx
  107344:	48 83 c6 04          	add    $0x4,%rsi
  107348:	48 83 c7 04          	add    $0x4,%rdi
  10734c:	0f b7 ca             	movzwl %dx,%ecx
  10734f:	c1 ea 10             	shr    $0x10,%edx
  107352:	0f b7 c3             	movzwl %bx,%eax
  107355:	41 0f af c8          	imul   %r8d,%ecx
  107359:	c1 eb 10             	shr    $0x10,%ebx
  10735c:	41 0f af d0          	imul   %r8d,%edx
  107360:	01 c1                	add    %eax,%ecx
  107362:	44 01 c9             	add    %r9d,%ecx
  107365:	8d 04 1a             	lea    (%rdx,%rbx,1),%eax
  107368:	89 ca                	mov    %ecx,%edx
  10736a:	0f b7 c9             	movzwl %cx,%ecx
  10736d:	c1 ea 10             	shr    $0x10,%edx
  107370:	01 d0                	add    %edx,%eax
  107372:	41 89 c1             	mov    %eax,%r9d
  107375:	c1 e0 10             	shl    $0x10,%eax
  107378:	09 c8                	or     %ecx,%eax
  10737a:	41 c1 e9 10          	shr    $0x10,%r9d
  10737e:	89 47 fc             	mov    %eax,-0x4(%rdi)
  107381:	49 39 f3             	cmp    %rsi,%r11
  107384:	77 ba                	ja     107340 <__multiply+0x120>
  107386:	47 89 0c 2e          	mov    %r9d,(%r14,%r13,1)
  10738a:	41 8b 02             	mov    (%r10),%eax
  10738d:	c1 e8 10             	shr    $0x10,%eax
  107390:	41 89 c0             	mov    %eax,%r8d
  107393:	0f 84 7b ff ff ff    	je     107314 <__multiply+0xf4>
  107399:	41 8b 16             	mov    (%r14),%edx
  10739c:	31 db                	xor    %ebx,%ebx
  10739e:	4d 89 f1             	mov    %r14,%r9
  1073a1:	4c 89 e6             	mov    %r12,%rsi
  1073a4:	89 d9                	mov    %ebx,%ecx
  1073a6:	89 d7                	mov    %edx,%edi
  1073a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  1073af:	00 
  1073b0:	0f b7 06             	movzwl (%rsi),%eax
  1073b3:	c1 ef 10             	shr    $0x10,%edi
  1073b6:	0f b7 d2             	movzwl %dx,%edx
  1073b9:	49 83 c1 04          	add    $0x4,%r9
  1073bd:	48 83 c6 04          	add    $0x4,%rsi
  1073c1:	41 0f af c0          	imul   %r8d,%eax
  1073c5:	01 c7                	add    %eax,%edi
  1073c7:	8d 1c 0f             	lea    (%rdi,%rcx,1),%ebx
  1073ca:	41 8b 39             	mov    (%r9),%edi
  1073cd:	89 d8                	mov    %ebx,%eax
  1073cf:	c1 eb 10             	shr    $0x10,%ebx
  1073d2:	c1 e0 10             	shl    $0x10,%eax
  1073d5:	09 c2                	or     %eax,%edx
  1073d7:	0f b7 c7             	movzwl %di,%eax
  1073da:	41 89 51 fc          	mov    %edx,-0x4(%r9)
  1073de:	0f b7 56 fe          	movzwl -0x2(%rsi),%edx
  1073e2:	41 0f af d0          	imul   %r8d,%edx
  1073e6:	01 c2                	add    %eax,%edx
  1073e8:	01 da                	add    %ebx,%edx
  1073ea:	89 d1                	mov    %edx,%ecx
  1073ec:	c1 e9 10             	shr    $0x10,%ecx
  1073ef:	49 39 f3             	cmp    %rsi,%r11
  1073f2:	77 bc                	ja     1073b0 <__multiply+0x190>
  1073f4:	49 83 c2 04          	add    $0x4,%r10
  1073f8:	43 89 14 2e          	mov    %edx,(%r14,%r13,1)
  1073fc:	49 83 c6 04          	add    $0x4,%r14
  107400:	4d 39 d7             	cmp    %r10,%r15
  107403:	0f 87 1c ff ff ff    	ja     107325 <__multiply+0x105>
  107409:	4c 8b 6d c0          	mov    -0x40(%rbp),%r13
  10740d:	44 8b 65 b8          	mov    -0x48(%rbp),%r12d
  107411:	45 85 e4             	test   %r12d,%r12d
  107414:	7f 10                	jg     107426 <__multiply+0x206>
  107416:	eb 1a                	jmp    107432 <__multiply+0x212>
  107418:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10741f:	00 
  107420:	41 83 ec 01          	sub    $0x1,%r12d
  107424:	74 0c                	je     107432 <__multiply+0x212>
  107426:	41 8b 45 fc          	mov    -0x4(%r13),%eax
  10742a:	49 83 ed 04          	sub    $0x4,%r13
  10742e:	85 c0                	test   %eax,%eax
  107430:	74 ee                	je     107420 <__multiply+0x200>
  107432:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  107436:	44 89 60 14          	mov    %r12d,0x14(%rax)
  10743a:	48 83 c4 28          	add    $0x28,%rsp
  10743e:	5b                   	pop    %rbx
  10743f:	41 5c                	pop    %r12
  107441:	41 5d                	pop    %r13
  107443:	41 5e                	pop    %r14
  107445:	41 5f                	pop    %r15
  107447:	5d                   	pop    %rbp
  107448:	c3                   	retq   
  107449:	b9 37 15 11 00       	mov    $0x111537,%ecx
  10744e:	31 d2                	xor    %edx,%edx
  107450:	be 5d 01 00 00       	mov    $0x15d,%esi
  107455:	bf f0 0d 11 00       	mov    $0x110df0,%edi
  10745a:	e8 f1 24 00 00       	callq  109950 <__assert_func>
  10745f:	90                   	nop

0000000000107460 <__pow5mult>:
  107460:	55                   	push   %rbp
  107461:	89 d0                	mov    %edx,%eax
  107463:	48 89 e5             	mov    %rsp,%rbp
  107466:	41 56                	push   %r14
  107468:	49 89 fe             	mov    %rdi,%r14
  10746b:	41 55                	push   %r13
  10746d:	49 89 f5             	mov    %rsi,%r13
  107470:	41 54                	push   %r12
  107472:	53                   	push   %rbx
  107473:	89 d3                	mov    %edx,%ebx
  107475:	83 e0 03             	and    $0x3,%eax
  107478:	0f 85 9a 00 00 00    	jne    107518 <__pow5mult+0xb8>
  10747e:	c1 fb 02             	sar    $0x2,%ebx
  107481:	74 5a                	je     1074dd <__pow5mult+0x7d>
  107483:	4d 8b 66 70          	mov    0x70(%r14),%r12
  107487:	4d 85 e4             	test   %r12,%r12
  10748a:	75 1c                	jne    1074a8 <__pow5mult+0x48>
  10748c:	e9 a7 00 00 00       	jmpq   107538 <__pow5mult+0xd8>
  107491:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  107498:	d1 fb                	sar    %ebx
  10749a:	74 41                	je     1074dd <__pow5mult+0x7d>
  10749c:	49 8b 04 24          	mov    (%r12),%rax
  1074a0:	48 85 c0             	test   %rax,%rax
  1074a3:	74 4b                	je     1074f0 <__pow5mult+0x90>
  1074a5:	49 89 c4             	mov    %rax,%r12
  1074a8:	f6 c3 01             	test   $0x1,%bl
  1074ab:	74 eb                	je     107498 <__pow5mult+0x38>
  1074ad:	4c 89 e2             	mov    %r12,%rdx
  1074b0:	4c 89 ee             	mov    %r13,%rsi
  1074b3:	4c 89 f7             	mov    %r14,%rdi
  1074b6:	e8 65 fd ff ff       	callq  107220 <__multiply>
  1074bb:	4d 85 ed             	test   %r13,%r13
  1074be:	74 50                	je     107510 <__pow5mult+0xb0>
  1074c0:	49 63 4d 08          	movslq 0x8(%r13),%rcx
  1074c4:	49 8b 56 78          	mov    0x78(%r14),%rdx
  1074c8:	d1 fb                	sar    %ebx
  1074ca:	48 8d 14 ca          	lea    (%rdx,%rcx,8),%rdx
  1074ce:	48 8b 0a             	mov    (%rdx),%rcx
  1074d1:	49 89 4d 00          	mov    %rcx,0x0(%r13)
  1074d5:	4c 89 2a             	mov    %r13,(%rdx)
  1074d8:	49 89 c5             	mov    %rax,%r13
  1074db:	75 bf                	jne    10749c <__pow5mult+0x3c>
  1074dd:	5b                   	pop    %rbx
  1074de:	4c 89 e8             	mov    %r13,%rax
  1074e1:	41 5c                	pop    %r12
  1074e3:	41 5d                	pop    %r13
  1074e5:	41 5e                	pop    %r14
  1074e7:	5d                   	pop    %rbp
  1074e8:	c3                   	retq   
  1074e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  1074f0:	4c 89 e2             	mov    %r12,%rdx
  1074f3:	4c 89 e6             	mov    %r12,%rsi
  1074f6:	4c 89 f7             	mov    %r14,%rdi
  1074f9:	e8 22 fd ff ff       	callq  107220 <__multiply>
  1074fe:	49 89 04 24          	mov    %rax,(%r12)
  107502:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  107509:	eb 9a                	jmp    1074a5 <__pow5mult+0x45>
  10750b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  107510:	49 89 c5             	mov    %rax,%r13
  107513:	eb 83                	jmp    107498 <__pow5mult+0x38>
  107515:	0f 1f 00             	nopl   (%rax)
  107518:	83 e8 01             	sub    $0x1,%eax
  10751b:	31 c9                	xor    %ecx,%ecx
  10751d:	48 98                	cltq   
  10751f:	8b 14 85 58 0e 11 00 	mov    0x110e58(,%rax,4),%edx
  107526:	e8 65 fa ff ff       	callq  106f90 <__multadd>
  10752b:	49 89 c5             	mov    %rax,%r13
  10752e:	e9 4b ff ff ff       	jmpq   10747e <__pow5mult+0x1e>
  107533:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  107538:	be 01 00 00 00       	mov    $0x1,%esi
  10753d:	4c 89 f7             	mov    %r14,%rdi
  107540:	e8 8b f9 ff ff       	callq  106ed0 <_Balloc>
  107545:	49 89 c4             	mov    %rax,%r12
  107548:	48 85 c0             	test   %rax,%rax
  10754b:	74 20                	je     10756d <__pow5mult+0x10d>
  10754d:	48 b8 01 00 00 00 71 	movabs $0x27100000001,%rax
  107554:	02 00 00 
  107557:	49 89 44 24 14       	mov    %rax,0x14(%r12)
  10755c:	4d 89 66 70          	mov    %r12,0x70(%r14)
  107560:	49 c7 04 24 00 00 00 	movq   $0x0,(%r12)
  107567:	00 
  107568:	e9 3b ff ff ff       	jmpq   1074a8 <__pow5mult+0x48>
  10756d:	b9 37 15 11 00       	mov    $0x111537,%ecx
  107572:	31 d2                	xor    %edx,%edx
  107574:	be 40 01 00 00       	mov    $0x140,%esi
  107579:	bf f0 0d 11 00       	mov    $0x110df0,%edi
  10757e:	e8 cd 23 00 00       	callq  109950 <__assert_func>
  107583:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10758a:	00 00 00 
  10758d:	0f 1f 00             	nopl   (%rax)

0000000000107590 <__lshift>:
  107590:	55                   	push   %rbp
  107591:	48 89 e5             	mov    %rsp,%rbp
  107594:	41 57                	push   %r15
  107596:	41 89 d7             	mov    %edx,%r15d
  107599:	c1 fa 05             	sar    $0x5,%edx
  10759c:	41 56                	push   %r14
  10759e:	41 55                	push   %r13
  1075a0:	49 89 fd             	mov    %rdi,%r13
  1075a3:	41 54                	push   %r12
  1075a5:	53                   	push   %rbx
  1075a6:	48 89 f3             	mov    %rsi,%rbx
  1075a9:	48 83 ec 18          	sub    $0x18,%rsp
  1075ad:	44 8b 73 14          	mov    0x14(%rbx),%r14d
  1075b1:	8b 43 0c             	mov    0xc(%rbx),%eax
  1075b4:	8b 76 08             	mov    0x8(%rsi),%esi
  1075b7:	41 01 d6             	add    %edx,%r14d
  1075ba:	45 8d 66 01          	lea    0x1(%r14),%r12d
  1075be:	41 39 c4             	cmp    %eax,%r12d
  1075c1:	7e 0f                	jle    1075d2 <__lshift+0x42>
  1075c3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  1075c8:	01 c0                	add    %eax,%eax
  1075ca:	83 c6 01             	add    $0x1,%esi
  1075cd:	41 39 c4             	cmp    %eax,%r12d
  1075d0:	7f f6                	jg     1075c8 <__lshift+0x38>
  1075d2:	4c 89 ef             	mov    %r13,%rdi
  1075d5:	89 55 cc             	mov    %edx,-0x34(%rbp)
  1075d8:	e8 f3 f8 ff ff       	callq  106ed0 <_Balloc>
  1075dd:	8b 55 cc             	mov    -0x34(%rbp),%edx
  1075e0:	48 85 c0             	test   %rax,%rax
  1075e3:	49 89 c0             	mov    %rax,%r8
  1075e6:	0f 84 e2 00 00 00    	je     1076ce <__lshift+0x13e>
  1075ec:	48 8d 78 18          	lea    0x18(%rax),%rdi
  1075f0:	85 d2                	test   %edx,%edx
  1075f2:	7e 22                	jle    107616 <__lshift+0x86>
  1075f4:	8d 42 06             	lea    0x6(%rdx),%eax
  1075f7:	49 8d 0c 80          	lea    (%r8,%rax,4),%rcx
  1075fb:	48 89 f8             	mov    %rdi,%rax
  1075fe:	66 90                	xchg   %ax,%ax
  107600:	48 83 c0 04          	add    $0x4,%rax
  107604:	c7 40 fc 00 00 00 00 	movl   $0x0,-0x4(%rax)
  10760b:	48 39 c8             	cmp    %rcx,%rax
  10760e:	75 f0                	jne    107600 <__lshift+0x70>
  107610:	89 d2                	mov    %edx,%edx
  107612:	48 8d 3c 97          	lea    (%rdi,%rdx,4),%rdi
  107616:	48 63 43 14          	movslq 0x14(%rbx),%rax
  10761a:	48 8d 73 18          	lea    0x18(%rbx),%rsi
  10761e:	45 89 fa             	mov    %r15d,%r10d
  107621:	4c 8d 0c 86          	lea    (%rsi,%rax,4),%r9
  107625:	41 83 e2 1f          	and    $0x1f,%r10d
  107629:	0f 84 91 00 00 00    	je     1076c0 <__lshift+0x130>
  10762f:	41 bb 20 00 00 00    	mov    $0x20,%r11d
  107635:	48 89 fa             	mov    %rdi,%rdx
  107638:	45 31 ff             	xor    %r15d,%r15d
  10763b:	45 29 d3             	sub    %r10d,%r11d
  10763e:	66 90                	xchg   %ax,%ax
  107640:	8b 06                	mov    (%rsi),%eax
  107642:	44 89 d1             	mov    %r10d,%ecx
  107645:	48 83 c2 04          	add    $0x4,%rdx
  107649:	48 83 c6 04          	add    $0x4,%rsi
  10764d:	d3 e0                	shl    %cl,%eax
  10764f:	44 89 d9             	mov    %r11d,%ecx
  107652:	44 09 f8             	or     %r15d,%eax
  107655:	89 42 fc             	mov    %eax,-0x4(%rdx)
  107658:	44 8b 7e fc          	mov    -0x4(%rsi),%r15d
  10765c:	41 d3 ef             	shr    %cl,%r15d
  10765f:	49 39 f1             	cmp    %rsi,%r9
  107662:	77 dc                	ja     107640 <__lshift+0xb0>
  107664:	4c 89 c8             	mov    %r9,%rax
  107667:	48 8d 53 19          	lea    0x19(%rbx),%rdx
  10766b:	48 29 d8             	sub    %rbx,%rax
  10766e:	48 83 e8 19          	sub    $0x19,%rax
  107672:	48 c1 e8 02          	shr    $0x2,%rax
  107676:	49 39 d1             	cmp    %rdx,%r9
  107679:	ba 04 00 00 00       	mov    $0x4,%edx
  10767e:	48 8d 04 85 04 00 00 	lea    0x4(,%rax,4),%rax
  107685:	00 
  107686:	48 0f 42 c2          	cmovb  %rdx,%rax
  10768a:	45 85 ff             	test   %r15d,%r15d
  10768d:	45 0f 45 f4          	cmovne %r12d,%r14d
  107691:	44 89 3c 07          	mov    %r15d,(%rdi,%rax,1)
  107695:	48 63 53 08          	movslq 0x8(%rbx),%rdx
  107699:	49 8b 45 78          	mov    0x78(%r13),%rax
  10769d:	45 89 70 14          	mov    %r14d,0x14(%r8)
  1076a1:	48 8d 04 d0          	lea    (%rax,%rdx,8),%rax
  1076a5:	48 8b 10             	mov    (%rax),%rdx
  1076a8:	48 89 13             	mov    %rdx,(%rbx)
  1076ab:	48 89 18             	mov    %rbx,(%rax)
  1076ae:	48 83 c4 18          	add    $0x18,%rsp
  1076b2:	4c 89 c0             	mov    %r8,%rax
  1076b5:	5b                   	pop    %rbx
  1076b6:	41 5c                	pop    %r12
  1076b8:	41 5d                	pop    %r13
  1076ba:	41 5e                	pop    %r14
  1076bc:	41 5f                	pop    %r15
  1076be:	5d                   	pop    %rbp
  1076bf:	c3                   	retq   
  1076c0:	a5                   	movsl  %ds:(%rsi),%es:(%rdi)
  1076c1:	49 39 f1             	cmp    %rsi,%r9
  1076c4:	76 cf                	jbe    107695 <__lshift+0x105>
  1076c6:	a5                   	movsl  %ds:(%rsi),%es:(%rdi)
  1076c7:	49 39 f1             	cmp    %rsi,%r9
  1076ca:	77 f4                	ja     1076c0 <__lshift+0x130>
  1076cc:	eb c7                	jmp    107695 <__lshift+0x105>
  1076ce:	b9 37 15 11 00       	mov    $0x111537,%ecx
  1076d3:	31 d2                	xor    %edx,%edx
  1076d5:	be d9 01 00 00       	mov    $0x1d9,%esi
  1076da:	bf f0 0d 11 00       	mov    $0x110df0,%edi
  1076df:	e8 6c 22 00 00       	callq  109950 <__assert_func>
  1076e4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1076eb:	00 00 00 
  1076ee:	66 90                	xchg   %ax,%ax

00000000001076f0 <__mcmp>:
  1076f0:	48 63 46 14          	movslq 0x14(%rsi),%rax
  1076f4:	44 8b 47 14          	mov    0x14(%rdi),%r8d
  1076f8:	41 29 c0             	sub    %eax,%r8d
  1076fb:	75 35                	jne    107732 <__mcmp+0x42>
  1076fd:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  107704:	00 
  107705:	48 83 c7 18          	add    $0x18,%rdi
  107709:	48 8d 04 17          	lea    (%rdi,%rdx,1),%rax
  10770d:	48 8d 54 16 18       	lea    0x18(%rsi,%rdx,1),%rdx
  107712:	eb 09                	jmp    10771d <__mcmp+0x2d>
  107714:	0f 1f 40 00          	nopl   0x0(%rax)
  107718:	48 39 c7             	cmp    %rax,%rdi
  10771b:	73 15                	jae    107732 <__mcmp+0x42>
  10771d:	48 83 e8 04          	sub    $0x4,%rax
  107721:	48 83 ea 04          	sub    $0x4,%rdx
  107725:	8b 0a                	mov    (%rdx),%ecx
  107727:	39 08                	cmp    %ecx,(%rax)
  107729:	74 ed                	je     107718 <__mcmp+0x28>
  10772b:	45 19 c0             	sbb    %r8d,%r8d
  10772e:	41 83 c8 01          	or     $0x1,%r8d
  107732:	44 89 c0             	mov    %r8d,%eax
  107735:	c3                   	retq   
  107736:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10773d:	00 00 00 

0000000000107740 <__mdiff>:
  107740:	55                   	push   %rbp
  107741:	48 89 e5             	mov    %rsp,%rbp
  107744:	41 57                	push   %r15
  107746:	41 56                	push   %r14
  107748:	41 55                	push   %r13
  10774a:	41 54                	push   %r12
  10774c:	49 89 d4             	mov    %rdx,%r12
  10774f:	53                   	push   %rbx
  107750:	48 89 f3             	mov    %rsi,%rbx
  107753:	48 83 ec 08          	sub    $0x8,%rsp
  107757:	48 63 42 14          	movslq 0x14(%rdx),%rax
  10775b:	44 8b 6e 14          	mov    0x14(%rsi),%r13d
  10775f:	41 29 c5             	sub    %eax,%r13d
  107762:	0f 85 88 01 00 00    	jne    1078f0 <__mdiff+0x1b0>
  107768:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  10776f:	00 
  107770:	48 8d 4e 18          	lea    0x18(%rsi),%rcx
  107774:	48 8d 04 11          	lea    (%rcx,%rdx,1),%rax
  107778:	49 8d 54 14 18       	lea    0x18(%r12,%rdx,1),%rdx
  10777d:	eb 0a                	jmp    107789 <__mdiff+0x49>
  10777f:	90                   	nop
  107780:	48 39 c1             	cmp    %rax,%rcx
  107783:	0f 83 87 01 00 00    	jae    107910 <__mdiff+0x1d0>
  107789:	48 83 e8 04          	sub    $0x4,%rax
  10778d:	48 83 ea 04          	sub    $0x4,%rdx
  107791:	8b 32                	mov    (%rdx),%esi
  107793:	39 30                	cmp    %esi,(%rax)
  107795:	74 e9                	je     107780 <__mdiff+0x40>
  107797:	0f 82 5f 01 00 00    	jb     1078fc <__mdiff+0x1bc>
  10779d:	8b 73 08             	mov    0x8(%rbx),%esi
  1077a0:	e8 2b f7 ff ff       	callq  106ed0 <_Balloc>
  1077a5:	49 89 c0             	mov    %rax,%r8
  1077a8:	48 85 c0             	test   %rax,%rax
  1077ab:	0f 84 78 01 00 00    	je     107929 <__mdiff+0x1e9>
  1077b1:	44 89 68 10          	mov    %r13d,0x10(%rax)
  1077b5:	48 63 43 14          	movslq 0x14(%rbx),%rax
  1077b9:	4c 8d 5b 18          	lea    0x18(%rbx),%r11
  1077bd:	4d 8d 68 18          	lea    0x18(%r8),%r13
  1077c1:	49 8d 54 24 18       	lea    0x18(%r12),%rdx
  1077c6:	b9 18 00 00 00       	mov    $0x18,%ecx
  1077cb:	31 f6                	xor    %esi,%esi
  1077cd:	48 89 c7             	mov    %rax,%rdi
  1077d0:	4d 8d 0c 83          	lea    (%r11,%rax,4),%r9
  1077d4:	49 63 44 24 14       	movslq 0x14(%r12),%rax
  1077d9:	4c 8d 14 82          	lea    (%rdx,%rax,4),%r10
  1077dd:	0f 1f 00             	nopl   (%rax)
  1077e0:	8b 04 0b             	mov    (%rbx,%rcx,1),%eax
  1077e3:	44 8b 3a             	mov    (%rdx),%r15d
  1077e6:	48 83 c2 04          	add    $0x4,%rdx
  1077ea:	44 0f b7 f0          	movzwl %ax,%r14d
  1077ee:	c1 e8 10             	shr    $0x10,%eax
  1077f1:	41 01 f6             	add    %esi,%r14d
  1077f4:	41 0f b7 f7          	movzwl %r15w,%esi
  1077f8:	41 c1 ef 10          	shr    $0x10,%r15d
  1077fc:	41 29 f6             	sub    %esi,%r14d
  1077ff:	44 29 f8             	sub    %r15d,%eax
  107802:	44 89 f6             	mov    %r14d,%esi
  107805:	45 0f b7 f6          	movzwl %r14w,%r14d
  107809:	c1 fe 10             	sar    $0x10,%esi
  10780c:	01 f0                	add    %esi,%eax
  10780e:	89 c6                	mov    %eax,%esi
  107810:	c1 e0 10             	shl    $0x10,%eax
  107813:	44 09 f0             	or     %r14d,%eax
  107816:	c1 fe 10             	sar    $0x10,%esi
  107819:	41 89 04 08          	mov    %eax,(%r8,%rcx,1)
  10781d:	48 83 c1 04          	add    $0x4,%rcx
  107821:	49 39 d2             	cmp    %rdx,%r10
  107824:	77 ba                	ja     1077e0 <__mdiff+0xa0>
  107826:	4c 89 d2             	mov    %r10,%rdx
  107829:	49 8d 5c 24 19       	lea    0x19(%r12),%rbx
  10782e:	4c 29 e2             	sub    %r12,%rdx
  107831:	41 bc 00 00 00 00    	mov    $0x0,%r12d
  107837:	48 83 ea 19          	sub    $0x19,%rdx
  10783b:	48 89 d1             	mov    %rdx,%rcx
  10783e:	48 83 e2 fc          	and    $0xfffffffffffffffc,%rdx
  107842:	48 c1 e9 02          	shr    $0x2,%rcx
  107846:	49 39 da             	cmp    %rbx,%r10
  107849:	49 0f 42 d4          	cmovb  %r12,%rdx
  10784d:	48 8d 0c 8d 04 00 00 	lea    0x4(,%rcx,4),%rcx
  107854:	00 
  107855:	4c 01 ea             	add    %r13,%rdx
  107858:	49 39 da             	cmp    %rbx,%r10
  10785b:	41 ba 04 00 00 00    	mov    $0x4,%r10d
  107861:	49 0f 42 ca          	cmovb  %r10,%rcx
  107865:	49 01 cb             	add    %rcx,%r11
  107868:	49 01 cd             	add    %rcx,%r13
  10786b:	4d 39 d9             	cmp    %r11,%r9
  10786e:	76 4d                	jbe    1078bd <__mdiff+0x17d>
  107870:	4d 89 ea             	mov    %r13,%r10
  107873:	4c 89 d9             	mov    %r11,%rcx
  107876:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10787d:	00 00 00 
  107880:	8b 01                	mov    (%rcx),%eax
  107882:	49 83 c2 04          	add    $0x4,%r10
  107886:	48 83 c1 04          	add    $0x4,%rcx
  10788a:	0f b7 d0             	movzwl %ax,%edx
  10788d:	c1 e8 10             	shr    $0x10,%eax
  107890:	01 f2                	add    %esi,%edx
  107892:	89 d6                	mov    %edx,%esi
  107894:	0f b7 d2             	movzwl %dx,%edx
  107897:	c1 fe 10             	sar    $0x10,%esi
  10789a:	01 f0                	add    %esi,%eax
  10789c:	89 c6                	mov    %eax,%esi
  10789e:	c1 e0 10             	shl    $0x10,%eax
  1078a1:	09 d0                	or     %edx,%eax
  1078a3:	c1 fe 10             	sar    $0x10,%esi
  1078a6:	41 89 42 fc          	mov    %eax,-0x4(%r10)
  1078aa:	49 39 c9             	cmp    %rcx,%r9
  1078ad:	77 d1                	ja     107880 <__mdiff+0x140>
  1078af:	49 8d 51 ff          	lea    -0x1(%r9),%rdx
  1078b3:	4c 29 da             	sub    %r11,%rdx
  1078b6:	48 83 e2 fc          	and    $0xfffffffffffffffc,%rdx
  1078ba:	4c 01 ea             	add    %r13,%rdx
  1078bd:	85 c0                	test   %eax,%eax
  1078bf:	75 15                	jne    1078d6 <__mdiff+0x196>
  1078c1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  1078c8:	8b 42 fc             	mov    -0x4(%rdx),%eax
  1078cb:	48 83 ea 04          	sub    $0x4,%rdx
  1078cf:	83 ef 01             	sub    $0x1,%edi
  1078d2:	85 c0                	test   %eax,%eax
  1078d4:	74 f2                	je     1078c8 <__mdiff+0x188>
  1078d6:	41 89 78 14          	mov    %edi,0x14(%r8)
  1078da:	48 83 c4 08          	add    $0x8,%rsp
  1078de:	4c 89 c0             	mov    %r8,%rax
  1078e1:	5b                   	pop    %rbx
  1078e2:	41 5c                	pop    %r12
  1078e4:	41 5d                	pop    %r13
  1078e6:	41 5e                	pop    %r14
  1078e8:	41 5f                	pop    %r15
  1078ea:	5d                   	pop    %rbp
  1078eb:	c3                   	retq   
  1078ec:	0f 1f 40 00          	nopl   0x0(%rax)
  1078f0:	41 bd 00 00 00 00    	mov    $0x0,%r13d
  1078f6:	0f 89 a1 fe ff ff    	jns    10779d <__mdiff+0x5d>
  1078fc:	48 89 d8             	mov    %rbx,%rax
  1078ff:	41 bd 01 00 00 00    	mov    $0x1,%r13d
  107905:	4c 89 e3             	mov    %r12,%rbx
  107908:	49 89 c4             	mov    %rax,%r12
  10790b:	e9 8d fe ff ff       	jmpq   10779d <__mdiff+0x5d>
  107910:	31 f6                	xor    %esi,%esi
  107912:	e8 b9 f5 ff ff       	callq  106ed0 <_Balloc>
  107917:	49 89 c0             	mov    %rax,%r8
  10791a:	48 85 c0             	test   %rax,%rax
  10791d:	74 20                	je     10793f <__mdiff+0x1ff>
  10791f:	49 c7 40 14 01 00 00 	movq   $0x1,0x14(%r8)
  107926:	00 
  107927:	eb b1                	jmp    1078da <__mdiff+0x19a>
  107929:	b9 37 15 11 00       	mov    $0x111537,%ecx
  10792e:	31 d2                	xor    %edx,%edx
  107930:	be 40 02 00 00       	mov    $0x240,%esi
  107935:	bf f0 0d 11 00       	mov    $0x110df0,%edi
  10793a:	e8 11 20 00 00       	callq  109950 <__assert_func>
  10793f:	b9 37 15 11 00       	mov    $0x111537,%ecx
  107944:	31 d2                	xor    %edx,%edx
  107946:	be 32 02 00 00       	mov    $0x232,%esi
  10794b:	bf f0 0d 11 00       	mov    $0x110df0,%edi
  107950:	e8 fb 1f 00 00       	callq  109950 <__assert_func>
  107955:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10795c:	00 00 00 
  10795f:	90                   	nop

0000000000107960 <__d2b>:
  107960:	55                   	push   %rbp
  107961:	48 89 e5             	mov    %rsp,%rbp
  107964:	41 55                	push   %r13
  107966:	66 49 0f 7e c5       	movq   %xmm0,%r13
  10796b:	41 54                	push   %r12
  10796d:	49 89 f4             	mov    %rsi,%r12
  107970:	be 01 00 00 00       	mov    $0x1,%esi
  107975:	53                   	push   %rbx
  107976:	48 89 d3             	mov    %rdx,%rbx
  107979:	48 83 ec 18          	sub    $0x18,%rsp
  10797d:	e8 4e f5 ff ff       	callq  106ed0 <_Balloc>
  107982:	48 85 c0             	test   %rax,%rax
  107985:	0f 84 f9 00 00 00    	je     107a84 <__d2b+0x124>
  10798b:	49 89 c1             	mov    %rax,%r9
  10798e:	4c 89 e8             	mov    %r13,%rax
  107991:	48 c1 e8 20          	shr    $0x20,%rax
  107995:	89 c6                	mov    %eax,%esi
  107997:	c1 e8 14             	shr    $0x14,%eax
  10799a:	81 e6 ff ff 0f 00    	and    $0xfffff,%esi
  1079a0:	89 f7                	mov    %esi,%edi
  1079a2:	81 cf 00 00 10 00    	or     $0x100000,%edi
  1079a8:	25 ff 07 00 00       	and    $0x7ff,%eax
  1079ad:	0f 45 f7             	cmovne %edi,%esi
  1079b0:	89 c2                	mov    %eax,%edx
  1079b2:	89 75 dc             	mov    %esi,-0x24(%rbp)
  1079b5:	45 85 ed             	test   %r13d,%r13d
  1079b8:	75 46                	jne    107a00 <__d2b+0xa0>
  1079ba:	48 8d 7d dc          	lea    -0x24(%rbp),%rdi
  1079be:	e8 2d f7 ff ff       	callq  1070f0 <__lo0bits>
  1079c3:	8b 4d dc             	mov    -0x24(%rbp),%ecx
  1079c6:	41 c7 41 14 01 00 00 	movl   $0x1,0x14(%r9)
  1079cd:	00 
  1079ce:	83 c0 20             	add    $0x20,%eax
  1079d1:	41 89 49 18          	mov    %ecx,0x18(%r9)
  1079d5:	b9 01 00 00 00       	mov    $0x1,%ecx
  1079da:	85 d2                	test   %edx,%edx
  1079dc:	74 6a                	je     107a48 <__d2b+0xe8>
  1079de:	8d 94 02 cd fb ff ff 	lea    -0x433(%rdx,%rax,1),%edx
  1079e5:	41 89 14 24          	mov    %edx,(%r12)
  1079e9:	ba 35 00 00 00       	mov    $0x35,%edx
  1079ee:	29 c2                	sub    %eax,%edx
  1079f0:	4c 89 c8             	mov    %r9,%rax
  1079f3:	89 13                	mov    %edx,(%rbx)
  1079f5:	48 83 c4 18          	add    $0x18,%rsp
  1079f9:	5b                   	pop    %rbx
  1079fa:	41 5c                	pop    %r12
  1079fc:	41 5d                	pop    %r13
  1079fe:	5d                   	pop    %rbp
  1079ff:	c3                   	retq   
  107a00:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
  107a04:	44 89 6d d8          	mov    %r13d,-0x28(%rbp)
  107a08:	e8 e3 f6 ff ff       	callq  1070f0 <__lo0bits>
  107a0d:	85 c0                	test   %eax,%eax
  107a0f:	74 67                	je     107a78 <__d2b+0x118>
  107a11:	8b 75 dc             	mov    -0x24(%rbp),%esi
  107a14:	b9 20 00 00 00       	mov    $0x20,%ecx
  107a19:	29 c1                	sub    %eax,%ecx
  107a1b:	89 f7                	mov    %esi,%edi
  107a1d:	d3 e7                	shl    %cl,%edi
  107a1f:	8b 4d d8             	mov    -0x28(%rbp),%ecx
  107a22:	09 f9                	or     %edi,%ecx
  107a24:	41 89 49 18          	mov    %ecx,0x18(%r9)
  107a28:	89 c1                	mov    %eax,%ecx
  107a2a:	d3 ee                	shr    %cl,%esi
  107a2c:	89 75 dc             	mov    %esi,-0x24(%rbp)
  107a2f:	89 f1                	mov    %esi,%ecx
  107a31:	83 f9 01             	cmp    $0x1,%ecx
  107a34:	41 89 49 1c          	mov    %ecx,0x1c(%r9)
  107a38:	b9 01 00 00 00       	mov    $0x1,%ecx
  107a3d:	83 d9 ff             	sbb    $0xffffffff,%ecx
  107a40:	41 89 49 14          	mov    %ecx,0x14(%r9)
  107a44:	85 d2                	test   %edx,%edx
  107a46:	75 96                	jne    1079de <__d2b+0x7e>
  107a48:	2d 32 04 00 00       	sub    $0x432,%eax
  107a4d:	41 89 04 24          	mov    %eax,(%r12)
  107a51:	48 63 c1             	movslq %ecx,%rax
  107a54:	c1 e1 05             	shl    $0x5,%ecx
  107a57:	41 8b 7c 81 14       	mov    0x14(%r9,%rax,4),%edi
  107a5c:	e8 2f f6 ff ff       	callq  107090 <__hi0bits>
  107a61:	29 c1                	sub    %eax,%ecx
  107a63:	4c 89 c8             	mov    %r9,%rax
  107a66:	89 0b                	mov    %ecx,(%rbx)
  107a68:	48 83 c4 18          	add    $0x18,%rsp
  107a6c:	5b                   	pop    %rbx
  107a6d:	41 5c                	pop    %r12
  107a6f:	41 5d                	pop    %r13
  107a71:	5d                   	pop    %rbp
  107a72:	c3                   	retq   
  107a73:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  107a78:	8b 4d d8             	mov    -0x28(%rbp),%ecx
  107a7b:	41 89 49 18          	mov    %ecx,0x18(%r9)
  107a7f:	8b 4d dc             	mov    -0x24(%rbp),%ecx
  107a82:	eb ad                	jmp    107a31 <__d2b+0xd1>
  107a84:	b9 37 15 11 00       	mov    $0x111537,%ecx
  107a89:	31 d2                	xor    %edx,%edx
  107a8b:	be 0a 03 00 00       	mov    $0x30a,%esi
  107a90:	bf f0 0d 11 00       	mov    $0x110df0,%edi
  107a95:	e8 b6 1e 00 00       	callq  109950 <__assert_func>
  107a9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000107aa0 <frexp>:
  107aa0:	66 48 0f 7e c1       	movq   %xmm0,%rcx
  107aa5:	c7 07 00 00 00 00    	movl   $0x0,(%rdi)
  107aab:	66 48 0f 7e c6       	movq   %xmm0,%rsi
  107ab0:	48 c1 e9 20          	shr    $0x20,%rcx
  107ab4:	89 c8                	mov    %ecx,%eax
  107ab6:	89 ca                	mov    %ecx,%edx
  107ab8:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
  107abd:	3d ff ff ef 7f       	cmp    $0x7fefffff,%eax
  107ac2:	7f 56                	jg     107b1a <frexp+0x7a>
  107ac4:	09 c6                	or     %eax,%esi
  107ac6:	74 52                	je     107b1a <frexp+0x7a>
  107ac8:	31 f6                	xor    %esi,%esi
  107aca:	f7 c1 00 00 f0 7f    	test   $0x7ff00000,%ecx
  107ad0:	75 1d                	jne    107aef <frexp+0x4f>
  107ad2:	f2 0f 59 05 2e 8f 00 	mulsd  0x8f2e(%rip),%xmm0        # 110a08 <uart_ns16550_dev_cfg_0+0x98>
  107ad9:	00 
  107ada:	be ca ff ff ff       	mov    $0xffffffca,%esi
  107adf:	66 48 0f 7e c0       	movq   %xmm0,%rax
  107ae4:	48 c1 e8 20          	shr    $0x20,%rax
  107ae8:	89 c2                	mov    %eax,%edx
  107aea:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
  107aef:	c1 f8 14             	sar    $0x14,%eax
  107af2:	81 e2 ff ff 0f 80    	and    $0x800fffff,%edx
  107af8:	8d 84 06 02 fc ff ff 	lea    -0x3fe(%rsi,%rax,1),%eax
  107aff:	81 ca 00 00 e0 3f    	or     $0x3fe00000,%edx
  107b05:	89 07                	mov    %eax,(%rdi)
  107b07:	66 48 0f 7e c0       	movq   %xmm0,%rax
  107b0c:	48 c1 e2 20          	shl    $0x20,%rdx
  107b10:	89 c0                	mov    %eax,%eax
  107b12:	48 09 d0             	or     %rdx,%rax
  107b15:	66 48 0f 6e c0       	movq   %rax,%xmm0
  107b1a:	c3                   	retq   
  107b1b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000107b20 <__sread>:
  107b20:	55                   	push   %rbp
  107b21:	48 63 c9             	movslq %ecx,%rcx
  107b24:	48 89 e5             	mov    %rsp,%rbp
  107b27:	53                   	push   %rbx
  107b28:	48 89 f3             	mov    %rsi,%rbx
  107b2b:	48 83 ec 08          	sub    $0x8,%rsp
  107b2f:	0f bf 76 12          	movswl 0x12(%rsi),%esi
  107b33:	e8 b8 27 00 00       	callq  10a2f0 <_read_r>
  107b38:	48 85 c0             	test   %rax,%rax
  107b3b:	78 13                	js     107b50 <__sread+0x30>
  107b3d:	48 01 83 90 00 00 00 	add    %rax,0x90(%rbx)
  107b44:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  107b48:	c9                   	leaveq 
  107b49:	c3                   	retq   
  107b4a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  107b50:	66 81 63 10 ff ef    	andw   $0xefff,0x10(%rbx)
  107b56:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  107b5a:	c9                   	leaveq 
  107b5b:	c3                   	retq   
  107b5c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000107b60 <__swrite>:
  107b60:	55                   	push   %rbp
  107b61:	48 89 e5             	mov    %rsp,%rbp
  107b64:	41 56                	push   %r14
  107b66:	49 89 d6             	mov    %rdx,%r14
  107b69:	41 54                	push   %r12
  107b6b:	41 89 cc             	mov    %ecx,%r12d
  107b6e:	53                   	push   %rbx
  107b6f:	48 89 f3             	mov    %rsi,%rbx
  107b72:	48 83 ec 18          	sub    $0x18,%rsp
  107b76:	0f b7 46 10          	movzwl 0x10(%rsi),%eax
  107b7a:	f6 c4 01             	test   $0x1,%ah
  107b7d:	75 21                	jne    107ba0 <__swrite+0x40>
  107b7f:	80 e4 ef             	and    $0xef,%ah
  107b82:	0f bf 73 12          	movswl 0x12(%rbx),%esi
  107b86:	49 63 cc             	movslq %r12d,%rcx
  107b89:	4c 89 f2             	mov    %r14,%rdx
  107b8c:	66 89 43 10          	mov    %ax,0x10(%rbx)
  107b90:	e8 5b 1d 00 00       	callq  1098f0 <_write_r>
  107b95:	48 83 c4 18          	add    $0x18,%rsp
  107b99:	5b                   	pop    %rbx
  107b9a:	41 5c                	pop    %r12
  107b9c:	41 5e                	pop    %r14
  107b9e:	5d                   	pop    %rbp
  107b9f:	c3                   	retq   
  107ba0:	0f bf 76 12          	movswl 0x12(%rsi),%esi
  107ba4:	b9 02 00 00 00       	mov    $0x2,%ecx
  107ba9:	31 d2                	xor    %edx,%edx
  107bab:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  107baf:	e8 7c 25 00 00       	callq  10a130 <_lseek_r>
  107bb4:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  107bb8:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  107bbc:	eb c1                	jmp    107b7f <__swrite+0x1f>
  107bbe:	66 90                	xchg   %ax,%ax

0000000000107bc0 <__sseek>:
  107bc0:	55                   	push   %rbp
  107bc1:	48 89 e5             	mov    %rsp,%rbp
  107bc4:	53                   	push   %rbx
  107bc5:	48 89 f3             	mov    %rsi,%rbx
  107bc8:	48 83 ec 08          	sub    $0x8,%rsp
  107bcc:	0f bf 76 12          	movswl 0x12(%rsi),%esi
  107bd0:	e8 5b 25 00 00       	callq  10a130 <_lseek_r>
  107bd5:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  107bd9:	74 15                	je     107bf0 <__sseek+0x30>
  107bdb:	66 81 4b 10 00 10    	orw    $0x1000,0x10(%rbx)
  107be1:	48 89 83 90 00 00 00 	mov    %rax,0x90(%rbx)
  107be8:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  107bec:	c9                   	leaveq 
  107bed:	c3                   	retq   
  107bee:	66 90                	xchg   %ax,%ax
  107bf0:	66 81 63 10 ff ef    	andw   $0xefff,0x10(%rbx)
  107bf6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  107bfa:	c9                   	leaveq 
  107bfb:	c3                   	retq   
  107bfc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000107c00 <__sclose>:
  107c00:	0f bf 76 12          	movswl 0x12(%rsi),%esi
  107c04:	e9 67 1e 00 00       	jmpq   109a70 <_close_r>
  107c09:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000107c10 <__sprint_r>:
  107c10:	55                   	push   %rbp
  107c11:	48 89 e5             	mov    %rsp,%rbp
  107c14:	53                   	push   %rbx
  107c15:	48 89 d3             	mov    %rdx,%rbx
  107c18:	48 83 ec 08          	sub    $0x8,%rsp
  107c1c:	48 83 7a 10 00       	cmpq   $0x0,0x10(%rdx)
  107c21:	75 15                	jne    107c38 <__sprint_r+0x28>
  107c23:	c7 42 08 00 00 00 00 	movl   $0x0,0x8(%rdx)
  107c2a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  107c2e:	31 c0                	xor    %eax,%eax
  107c30:	c9                   	leaveq 
  107c31:	c3                   	retq   
  107c32:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  107c38:	e8 73 1f 00 00       	callq  109bb0 <__sfvwrite_r>
  107c3d:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
  107c44:	00 
  107c45:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%rbx)
  107c4c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  107c50:	c9                   	leaveq 
  107c51:	c3                   	retq   
  107c52:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  107c59:	00 00 00 
  107c5c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000107c60 <_vfiprintf_r>:
  107c60:	55                   	push   %rbp
  107c61:	48 89 e5             	mov    %rsp,%rbp
  107c64:	41 57                	push   %r15
  107c66:	41 56                	push   %r14
  107c68:	49 89 d6             	mov    %rdx,%r14
  107c6b:	41 55                	push   %r13
  107c6d:	49 89 f5             	mov    %rsi,%r13
  107c70:	41 54                	push   %r12
  107c72:	53                   	push   %rbx
  107c73:	48 81 ec 98 01 00 00 	sub    $0x198,%rsp
  107c7a:	48 89 bd 98 fe ff ff 	mov    %rdi,-0x168(%rbp)
  107c81:	48 89 8d 90 fe ff ff 	mov    %rcx,-0x170(%rbp)
  107c88:	48 85 ff             	test   %rdi,%rdi
  107c8b:	74 0b                	je     107c98 <_vfiprintf_r+0x38>
  107c8d:	8b 57 50             	mov    0x50(%rdi),%edx
  107c90:	85 d2                	test   %edx,%edx
  107c92:	0f 84 91 05 00 00    	je     108229 <_vfiprintf_r+0x5c9>
  107c98:	41 0f b7 45 10       	movzwl 0x10(%r13),%eax
  107c9d:	41 f6 85 b0 00 00 00 	testb  $0x1,0xb0(%r13)
  107ca4:	01 
  107ca5:	75 09                	jne    107cb0 <_vfiprintf_r+0x50>
  107ca7:	f6 c4 02             	test   $0x2,%ah
  107caa:	0f 84 d8 12 00 00    	je     108f88 <_vfiprintf_r+0x1328>
  107cb0:	a8 08                	test   $0x8,%al
  107cb2:	0f 84 98 03 00 00    	je     108050 <_vfiprintf_r+0x3f0>
  107cb8:	49 83 7d 18 00       	cmpq   $0x0,0x18(%r13)
  107cbd:	0f 84 8d 03 00 00    	je     108050 <_vfiprintf_r+0x3f0>
  107cc3:	89 c2                	mov    %eax,%edx
  107cc5:	83 e2 1a             	and    $0x1a,%edx
  107cc8:	66 83 fa 0a          	cmp    $0xa,%dx
  107ccc:	0f 84 a9 03 00 00    	je     10807b <_vfiprintf_r+0x41b>
  107cd2:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  107cd9:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  107ce0:	00 00 00 00 
  107ce4:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
  107ceb:	49 89 c2             	mov    %rax,%r10
  107cee:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  107cf5:	00 00 00 
  107cf8:	48 c7 85 70 fe ff ff 	movq   $0x0,-0x190(%rbp)
  107cff:	00 00 00 00 
  107d03:	48 c7 85 68 fe ff ff 	movq   $0x0,-0x198(%rbp)
  107d0a:	00 00 00 00 
  107d0e:	48 c7 85 48 fe ff ff 	movq   $0x0,-0x1b8(%rbp)
  107d15:	00 00 00 00 
  107d19:	48 c7 85 50 fe ff ff 	movq   $0x0,-0x1b0(%rbp)
  107d20:	00 00 00 00 
  107d24:	c7 85 a0 fe ff ff 00 	movl   $0x0,-0x160(%rbp)
  107d2b:	00 00 00 
  107d2e:	4c 89 ad 88 fe ff ff 	mov    %r13,-0x178(%rbp)
  107d35:	0f 1f 00             	nopl   (%rax)
  107d38:	41 0f b6 06          	movzbl (%r14),%eax
  107d3c:	4c 89 f3             	mov    %r14,%rbx
  107d3f:	3c 25                	cmp    $0x25,%al
  107d41:	0f 84 7e 00 00 00    	je     107dc5 <_vfiprintf_r+0x165>
  107d47:	84 c0                	test   %al,%al
  107d49:	74 7a                	je     107dc5 <_vfiprintf_r+0x165>
  107d4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  107d50:	49 89 dc             	mov    %rbx,%r12
  107d53:	0f b6 43 01          	movzbl 0x1(%rbx),%eax
  107d57:	48 83 c3 01          	add    $0x1,%rbx
  107d5b:	84 c0                	test   %al,%al
  107d5d:	74 04                	je     107d63 <_vfiprintf_r+0x103>
  107d5f:	3c 25                	cmp    $0x25,%al
  107d61:	75 ed                	jne    107d50 <_vfiprintf_r+0xf0>
  107d63:	49 89 dd             	mov    %rbx,%r13
  107d66:	4d 29 f5             	sub    %r14,%r13
  107d69:	44 39 f3             	cmp    %r14d,%ebx
  107d6c:	74 57                	je     107dc5 <_vfiprintf_r+0x165>
  107d6e:	8b b5 c8 fe ff ff    	mov    -0x138(%rbp),%esi
  107d74:	49 63 c5             	movslq %r13d,%rax
  107d77:	4d 89 32             	mov    %r14,(%r10)
  107d7a:	49 83 c2 10          	add    $0x10,%r10
  107d7e:	49 89 42 f8          	mov    %rax,-0x8(%r10)
  107d82:	48 03 85 d0 fe ff ff 	add    -0x130(%rbp),%rax
  107d89:	8d 56 01             	lea    0x1(%rsi),%edx
  107d8c:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  107d93:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  107d99:	83 fa 07             	cmp    $0x7,%edx
  107d9c:	7e 1a                	jle    107db8 <_vfiprintf_r+0x158>
  107d9e:	48 85 c0             	test   %rax,%rax
  107da1:	0f 85 69 03 00 00    	jne    108110 <_vfiprintf_r+0x4b0>
  107da7:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  107dae:	00 00 00 
  107db1:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  107db8:	44 01 ad a0 fe ff ff 	add    %r13d,-0x160(%rbp)
  107dbf:	41 0f b6 44 24 01    	movzbl 0x1(%r12),%eax
  107dc5:	84 c0                	test   %al,%al
  107dc7:	0f 84 e2 14 00 00    	je     1092af <_vfiprintf_r+0x164f>
  107dcd:	0f be 43 01          	movsbl 0x1(%rbx),%eax
  107dd1:	4c 8d 73 01          	lea    0x1(%rbx),%r14
  107dd5:	45 31 ff             	xor    %r15d,%r15d
  107dd8:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
  107ddd:	c6 85 bd fe ff ff 00 	movb   $0x0,-0x143(%rbp)
  107de4:	4d 89 d4             	mov    %r10,%r12
  107de7:	c7 85 a4 fe ff ff 00 	movl   $0x0,-0x15c(%rbp)
  107dee:	00 00 00 
  107df1:	49 83 c6 01          	add    $0x1,%r14
  107df5:	8d 50 e0             	lea    -0x20(%rax),%edx
  107df8:	83 fa 5a             	cmp    $0x5a,%edx
  107dfb:	77 3b                	ja     107e38 <_vfiprintf_r+0x1d8>
  107dfd:	ff 24 d5 68 0e 11 00 	jmpq   *0x110e68(,%rdx,8)
  107e04:	0f 1f 40 00          	nopl   0x0(%rax)
  107e08:	31 c9                	xor    %ecx,%ecx
  107e0a:	8d 50 d0             	lea    -0x30(%rax),%edx
  107e0d:	8d 04 89             	lea    (%rcx,%rcx,4),%eax
  107e10:	49 83 c6 01          	add    $0x1,%r14
  107e14:	8d 0c 42             	lea    (%rdx,%rax,2),%ecx
  107e17:	41 0f be 46 ff       	movsbl -0x1(%r14),%eax
  107e1c:	8d 50 d0             	lea    -0x30(%rax),%edx
  107e1f:	83 fa 09             	cmp    $0x9,%edx
  107e22:	76 e9                	jbe    107e0d <_vfiprintf_r+0x1ad>
  107e24:	8d 50 e0             	lea    -0x20(%rax),%edx
  107e27:	89 8d a4 fe ff ff    	mov    %ecx,-0x15c(%rbp)
  107e2d:	83 fa 5a             	cmp    $0x5a,%edx
  107e30:	76 cb                	jbe    107dfd <_vfiprintf_r+0x19d>
  107e32:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  107e38:	4d 89 e2             	mov    %r12,%r10
  107e3b:	85 c0                	test   %eax,%eax
  107e3d:	0f 84 6c 14 00 00    	je     1092af <_vfiprintf_r+0x164f>
  107e43:	88 85 e0 fe ff ff    	mov    %al,-0x120(%rbp)
  107e49:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  107e4f:	4c 8d ad e0 fe ff ff 	lea    -0x120(%rbp),%r13
  107e56:	c6 85 bd fe ff ff 00 	movb   $0x0,-0x143(%rbp)
  107e5d:	c7 85 a8 fe ff ff 01 	movl   $0x1,-0x158(%rbp)
  107e64:	00 00 00 
  107e67:	31 db                	xor    %ebx,%ebx
  107e69:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  107e70:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  107e76:	45 89 f9             	mov    %r15d,%r9d
  107e79:	41 8d 44 24 02       	lea    0x2(%r12),%eax
  107e7e:	44 89 f9             	mov    %r15d,%ecx
  107e81:	41 83 e1 02          	and    $0x2,%r9d
  107e85:	44 0f 45 e0          	cmovne %eax,%r12d
  107e89:	8d 7a 01             	lea    0x1(%rdx),%edi
  107e8c:	81 e1 84 00 00 00    	and    $0x84,%ecx
  107e92:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  107e99:	89 8d 80 fe ff ff    	mov    %ecx,-0x180(%rbp)
  107e9f:	89 fe                	mov    %edi,%esi
  107ea1:	75 13                	jne    107eb6 <_vfiprintf_r+0x256>
  107ea3:	44 8b 85 a4 fe ff ff 	mov    -0x15c(%rbp),%r8d
  107eaa:	45 29 e0             	sub    %r12d,%r8d
  107ead:	45 85 c0             	test   %r8d,%r8d
  107eb0:	0f 8f 4a 0c 00 00    	jg     108b00 <_vfiprintf_r+0xea0>
  107eb6:	80 bd bd fe ff ff 00 	cmpb   $0x0,-0x143(%rbp)
  107ebd:	0f 84 e6 06 00 00    	je     1085a9 <_vfiprintf_r+0x949>
  107ec3:	48 8d 95 bd fe ff ff 	lea    -0x143(%rbp),%rdx
  107eca:	48 83 c0 01          	add    $0x1,%rax
  107ece:	49 c7 42 08 01 00 00 	movq   $0x1,0x8(%r10)
  107ed5:	00 
  107ed6:	49 89 12             	mov    %rdx,(%r10)
  107ed9:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  107ee0:	89 b5 c8 fe ff ff    	mov    %esi,-0x138(%rbp)
  107ee6:	83 fe 07             	cmp    $0x7,%esi
  107ee9:	0f 8e b1 06 00 00    	jle    1085a0 <_vfiprintf_r+0x940>
  107eef:	48 85 c0             	test   %rax,%rax
  107ef2:	74 45                	je     107f39 <_vfiprintf_r+0x2d9>
  107ef4:	48 8b b5 88 fe ff ff 	mov    -0x178(%rbp),%rsi
  107efb:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  107f02:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  107f09:	44 89 8d 78 fe ff ff 	mov    %r9d,-0x188(%rbp)
  107f10:	e8 9b 1c 00 00       	callq  109bb0 <__sfvwrite_r>
  107f15:	44 8b 8d 78 fe ff ff 	mov    -0x188(%rbp),%r9d
  107f1c:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  107f23:	00 00 00 00 
  107f27:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  107f2e:	00 00 00 
  107f31:	85 c0                	test   %eax,%eax
  107f33:	0f 85 76 0b 00 00    	jne    108aaf <_vfiprintf_r+0xe4f>
  107f39:	45 85 c9             	test   %r9d,%r9d
  107f3c:	0f 85 ce 0d 00 00    	jne    108d10 <_vfiprintf_r+0x10b0>
  107f42:	31 d2                	xor    %edx,%edx
  107f44:	be 01 00 00 00       	mov    $0x1,%esi
  107f49:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  107f50:	31 c0                	xor    %eax,%eax
  107f52:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  107f58:	81 bd 80 fe ff ff 80 	cmpl   $0x80,-0x180(%rbp)
  107f5f:	00 00 00 
  107f62:	0f 84 a0 06 00 00    	je     108608 <_vfiprintf_r+0x9a8>
  107f68:	2b 9d a8 fe ff ff    	sub    -0x158(%rbp),%ebx
  107f6e:	85 db                	test   %ebx,%ebx
  107f70:	0f 8f 8a 07 00 00    	jg     108700 <_vfiprintf_r+0xaa0>
  107f76:	48 63 95 a8 fe ff ff 	movslq -0x158(%rbp),%rdx
  107f7d:	4d 89 2a             	mov    %r13,(%r10)
  107f80:	89 b5 c8 fe ff ff    	mov    %esi,-0x138(%rbp)
  107f86:	48 01 d0             	add    %rdx,%rax
  107f89:	49 89 52 08          	mov    %rdx,0x8(%r10)
  107f8d:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  107f94:	83 fe 07             	cmp    $0x7,%esi
  107f97:	0f 8e 9c 08 00 00    	jle    108839 <_vfiprintf_r+0xbd9>
  107f9d:	48 85 c0             	test   %rax,%rax
  107fa0:	0f 85 d2 0a 00 00    	jne    108a78 <_vfiprintf_r+0xe18>
  107fa6:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  107fad:	00 00 00 
  107fb0:	41 83 e7 04          	and    $0x4,%r15d
  107fb4:	0f 84 56 09 00 00    	je     108910 <_vfiprintf_r+0xcb0>
  107fba:	8b 9d a4 fe ff ff    	mov    -0x15c(%rbp),%ebx
  107fc0:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  107fc7:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  107fce:	44 29 e3             	sub    %r12d,%ebx
  107fd1:	85 db                	test   %ebx,%ebx
  107fd3:	0f 8f 7f 08 00 00    	jg     108858 <_vfiprintf_r+0xbf8>
  107fd9:	8b bd a4 fe ff ff    	mov    -0x15c(%rbp),%edi
  107fdf:	44 39 e7             	cmp    %r12d,%edi
  107fe2:	89 f9                	mov    %edi,%ecx
  107fe4:	41 0f 4c cc          	cmovl  %r12d,%ecx
  107fe8:	01 8d a0 fe ff ff    	add    %ecx,-0x160(%rbp)
  107fee:	48 85 c0             	test   %rax,%rax
  107ff1:	74 37                	je     10802a <_vfiprintf_r+0x3ca>
  107ff3:	48 8b b5 88 fe ff ff 	mov    -0x178(%rbp),%rsi
  107ffa:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  108001:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  108008:	e8 a3 1b 00 00       	callq  109bb0 <__sfvwrite_r>
  10800d:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  108014:	00 00 00 00 
  108018:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  10801f:	00 00 00 
  108022:	85 c0                	test   %eax,%eax
  108024:	0f 85 85 0a 00 00    	jne    108aaf <_vfiprintf_r+0xe4f>
  10802a:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  108031:	00 00 00 
  108034:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  10803b:	e9 f8 fc ff ff       	jmpq   107d38 <_vfiprintf_r+0xd8>
  108040:	41 0f be 06          	movsbl (%r14),%eax
  108044:	41 83 cf 10          	or     $0x10,%r15d
  108048:	e9 a4 fd ff ff       	jmpq   107df1 <_vfiprintf_r+0x191>
  10804d:	0f 1f 00             	nopl   (%rax)
  108050:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  108057:	4c 89 ee             	mov    %r13,%rsi
  10805a:	e8 61 ca ff ff       	callq  104ac0 <__swsetup_r>
  10805f:	85 c0                	test   %eax,%eax
  108061:	0f 85 d8 16 00 00    	jne    10973f <_vfiprintf_r+0x1adf>
  108067:	41 0f b7 45 10       	movzwl 0x10(%r13),%eax
  10806c:	89 c2                	mov    %eax,%edx
  10806e:	83 e2 1a             	and    $0x1a,%edx
  108071:	66 83 fa 0a          	cmp    $0xa,%dx
  108075:	0f 85 57 fc ff ff    	jne    107cd2 <_vfiprintf_r+0x72>
  10807b:	66 41 83 7d 12 00    	cmpw   $0x0,0x12(%r13)
  108081:	0f 88 4b fc ff ff    	js     107cd2 <_vfiprintf_r+0x72>
  108087:	41 f6 85 b0 00 00 00 	testb  $0x1,0xb0(%r13)
  10808e:	01 
  10808f:	75 09                	jne    10809a <_vfiprintf_r+0x43a>
  108091:	f6 c4 02             	test   $0x2,%ah
  108094:	0f 84 31 15 00 00    	je     1095cb <_vfiprintf_r+0x196b>
  10809a:	48 8b 8d 90 fe ff ff 	mov    -0x170(%rbp),%rcx
  1080a1:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  1080a8:	4c 89 f2             	mov    %r14,%rdx
  1080ab:	4c 89 ee             	mov    %r13,%rsi
  1080ae:	48 81 c4 98 01 00 00 	add    $0x198,%rsp
  1080b5:	5b                   	pop    %rbx
  1080b6:	41 5c                	pop    %r12
  1080b8:	41 5d                	pop    %r13
  1080ba:	41 5e                	pop    %r14
  1080bc:	41 5f                	pop    %r15
  1080be:	5d                   	pop    %rbp
  1080bf:	e9 2c 17 00 00       	jmpq   1097f0 <__sbprintf>
  1080c4:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  1080cb:	8b 06                	mov    (%rsi),%eax
  1080cd:	83 f8 2f             	cmp    $0x2f,%eax
  1080d0:	0f 86 a2 0e 00 00    	jbe    108f78 <_vfiprintf_r+0x1318>
  1080d6:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  1080dd:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  1080e1:	48 8d 42 08          	lea    0x8(%rdx),%rax
  1080e5:	48 89 47 08          	mov    %rax,0x8(%rdi)
  1080e9:	8b 02                	mov    (%rdx),%eax
  1080eb:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%rbp)
  1080f1:	85 c0                	test   %eax,%eax
  1080f3:	0f 89 5d 04 00 00    	jns    108556 <_vfiprintf_r+0x8f6>
  1080f9:	f7 9d a4 fe ff ff    	negl   -0x15c(%rbp)
  1080ff:	41 0f be 06          	movsbl (%r14),%eax
  108103:	41 83 cf 04          	or     $0x4,%r15d
  108107:	e9 e5 fc ff ff       	jmpq   107df1 <_vfiprintf_r+0x191>
  10810c:	0f 1f 40 00          	nopl   0x0(%rax)
  108110:	48 8b b5 88 fe ff ff 	mov    -0x178(%rbp),%rsi
  108117:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  10811e:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  108125:	e8 86 1a 00 00       	callq  109bb0 <__sfvwrite_r>
  10812a:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  108131:	00 00 00 00 
  108135:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  10813c:	00 00 00 
  10813f:	85 c0                	test   %eax,%eax
  108141:	0f 85 68 09 00 00    	jne    108aaf <_vfiprintf_r+0xe4f>
  108147:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  10814e:	e9 65 fc ff ff       	jmpq   107db8 <_vfiprintf_r+0x158>
  108153:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  10815a:	4d 89 e2             	mov    %r12,%r10
  10815d:	8b 07                	mov    (%rdi),%eax
  10815f:	83 f8 2f             	cmp    $0x2f,%eax
  108162:	0f 87 70 0d 00 00    	ja     108ed8 <_vfiprintf_r+0x1278>
  108168:	89 c2                	mov    %eax,%edx
  10816a:	83 c0 08             	add    $0x8,%eax
  10816d:	48 03 57 10          	add    0x10(%rdi),%rdx
  108171:	89 07                	mov    %eax,(%rdi)
  108173:	4c 8b 2a             	mov    (%rdx),%r13
  108176:	c6 85 bd fe ff ff 00 	movb   $0x0,-0x143(%rbp)
  10817d:	4d 85 ed             	test   %r13,%r13
  108180:	0f 84 78 0d 00 00    	je     108efe <_vfiprintf_r+0x129e>
  108186:	83 fb ff             	cmp    $0xffffffff,%ebx
  108189:	0f 84 fd 10 00 00    	je     10928c <_vfiprintf_r+0x162c>
  10818f:	31 f6                	xor    %esi,%esi
  108191:	48 63 d3             	movslq %ebx,%rdx
  108194:	4c 89 ef             	mov    %r13,%rdi
  108197:	4c 89 95 a8 fe ff ff 	mov    %r10,-0x158(%rbp)
  10819e:	e8 4d ec ff ff       	callq  106df0 <memchr>
  1081a3:	4c 8b 95 a8 fe ff ff 	mov    -0x158(%rbp),%r10
  1081aa:	48 85 c0             	test   %rax,%rax
  1081ad:	0f 84 29 14 00 00    	je     1095dc <_vfiprintf_r+0x197c>
  1081b3:	44 29 e8             	sub    %r13d,%eax
  1081b6:	31 db                	xor    %ebx,%ebx
  1081b8:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%rbp)
  1081be:	e9 8d 02 00 00       	jmpq   108450 <_vfiprintf_r+0x7f0>
  1081c3:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  1081ca:	4d 89 e2             	mov    %r12,%r10
  1081cd:	8b 07                	mov    (%rdi),%eax
  1081cf:	83 f8 2f             	cmp    $0x2f,%eax
  1081d2:	0f 86 ee 0c 00 00    	jbe    108ec6 <_vfiprintf_r+0x1266>
  1081d8:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  1081df:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  1081e3:	48 8d 42 08          	lea    0x8(%rdx),%rax
  1081e7:	48 89 46 08          	mov    %rax,0x8(%rsi)
  1081eb:	8b 02                	mov    (%rdx),%eax
  1081ed:	e9 51 fc ff ff       	jmpq   107e43 <_vfiprintf_r+0x1e3>
  1081f2:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  1081f9:	4d 89 e2             	mov    %r12,%r10
  1081fc:	8b 06                	mov    (%rsi),%eax
  1081fe:	41 f6 c7 20          	test   $0x20,%r15b
  108202:	0f 84 46 01 00 00    	je     10834e <_vfiprintf_r+0x6ee>
  108208:	83 f8 2f             	cmp    $0x2f,%eax
  10820b:	0f 86 a5 0c 00 00    	jbe    108eb6 <_vfiprintf_r+0x1256>
  108211:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  108218:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  10821c:	48 8d 42 08          	lea    0x8(%rdx),%rax
  108220:	48 89 47 08          	mov    %rax,0x8(%rdi)
  108224:	e9 4f 01 00 00       	jmpq   108378 <_vfiprintf_r+0x718>
  108229:	e8 82 e3 ff ff       	callq  1065b0 <__sinit>
  10822e:	e9 65 fa ff ff       	jmpq   107c98 <_vfiprintf_r+0x38>
  108233:	41 0f be 06          	movsbl (%r14),%eax
  108237:	3c 6c                	cmp    $0x6c,%al
  108239:	0f 84 1e 10 00 00    	je     10925d <_vfiprintf_r+0x15fd>
  10823f:	41 83 cf 10          	or     $0x10,%r15d
  108243:	e9 a9 fb ff ff       	jmpq   107df1 <_vfiprintf_r+0x191>
  108248:	41 0f be 06          	movsbl (%r14),%eax
  10824c:	3c 68                	cmp    $0x68,%al
  10824e:	0f 84 1b 10 00 00    	je     10926f <_vfiprintf_r+0x160f>
  108254:	41 83 cf 40          	or     $0x40,%r15d
  108258:	e9 94 fb ff ff       	jmpq   107df1 <_vfiprintf_r+0x191>
  10825d:	41 0f be 06          	movsbl (%r14),%eax
  108261:	41 83 cf 20          	or     $0x20,%r15d
  108265:	e9 87 fb ff ff       	jmpq   107df1 <_vfiprintf_r+0x191>
  10826a:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  108271:	4d 89 e2             	mov    %r12,%r10
  108274:	8b 06                	mov    (%rsi),%eax
  108276:	83 f8 2f             	cmp    $0x2f,%eax
  108279:	0f 86 e9 0c 00 00    	jbe    108f68 <_vfiprintf_r+0x1308>
  10827f:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  108286:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  10828a:	48 8d 42 08          	lea    0x8(%rdx),%rax
  10828e:	48 89 47 08          	mov    %rax,0x8(%rdi)
  108292:	b8 30 78 00 00       	mov    $0x7830,%eax
  108297:	45 89 f8             	mov    %r15d,%r8d
  10829a:	48 8b 0a             	mov    (%rdx),%rcx
  10829d:	48 c7 85 70 fe ff ff 	movq   $0x111501,-0x190(%rbp)
  1082a4:	01 15 11 00 
  1082a8:	66 89 85 be fe ff ff 	mov    %ax,-0x142(%rbp)
  1082af:	41 83 c8 02          	or     $0x2,%r8d
  1082b3:	b8 02 00 00 00       	mov    $0x2,%eax
  1082b8:	e9 3f 01 00 00       	jmpq   1083fc <_vfiprintf_r+0x79c>
  1082bd:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  1082c4:	4d 89 e2             	mov    %r12,%r10
  1082c7:	8b 06                	mov    (%rsi),%eax
  1082c9:	41 f6 c7 20          	test   $0x20,%r15b
  1082cd:	0f 84 6a 0c 00 00    	je     108f3d <_vfiprintf_r+0x12dd>
  1082d3:	83 f8 2f             	cmp    $0x2f,%eax
  1082d6:	0f 87 4c 11 00 00    	ja     109428 <_vfiprintf_r+0x17c8>
  1082dc:	89 c2                	mov    %eax,%edx
  1082de:	83 c0 08             	add    $0x8,%eax
  1082e1:	48 03 56 10          	add    0x10(%rsi),%rdx
  1082e5:	89 06                	mov    %eax,(%rsi)
  1082e7:	48 8b 02             	mov    (%rdx),%rax
  1082ea:	48 63 95 a0 fe ff ff 	movslq -0x160(%rbp),%rdx
  1082f1:	48 89 10             	mov    %rdx,(%rax)
  1082f4:	e9 3f fa ff ff       	jmpq   107d38 <_vfiprintf_r+0xd8>
  1082f9:	4d 89 e2             	mov    %r12,%r10
  1082fc:	41 83 cf 10          	or     $0x10,%r15d
  108300:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  108307:	8b 06                	mov    (%rsi),%eax
  108309:	41 f6 c7 20          	test   $0x20,%r15b
  10830d:	0f 84 87 0a 00 00    	je     108d9a <_vfiprintf_r+0x113a>
  108313:	83 f8 2f             	cmp    $0x2f,%eax
  108316:	0f 86 11 0c 00 00    	jbe    108f2d <_vfiprintf_r+0x12cd>
  10831c:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  108323:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  108327:	48 8d 42 08          	lea    0x8(%rdx),%rax
  10832b:	48 89 46 08          	mov    %rax,0x8(%rsi)
  10832f:	e9 8c 0a 00 00       	jmpq   108dc0 <_vfiprintf_r+0x1160>
  108334:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  10833b:	41 83 cf 10          	or     $0x10,%r15d
  10833f:	4d 89 e2             	mov    %r12,%r10
  108342:	8b 06                	mov    (%rsi),%eax
  108344:	41 f6 c7 20          	test   $0x20,%r15b
  108348:	0f 85 ba fe ff ff    	jne    108208 <_vfiprintf_r+0x5a8>
  10834e:	41 f6 c7 10          	test   $0x10,%r15b
  108352:	0f 84 ce 0a 00 00    	je     108e26 <_vfiprintf_r+0x11c6>
  108358:	83 f8 2f             	cmp    $0x2f,%eax
  10835b:	0f 87 f3 0f 00 00    	ja     109354 <_vfiprintf_r+0x16f4>
  108361:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  108368:	89 c2                	mov    %eax,%edx
  10836a:	83 c0 08             	add    $0x8,%eax
  10836d:	89 07                	mov    %eax,(%rdi)
  10836f:	48 03 57 10          	add    0x10(%rdi),%rdx
  108373:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  108378:	48 8b 02             	mov    (%rdx),%rax
  10837b:	48 89 c1             	mov    %rax,%rcx
  10837e:	48 85 c0             	test   %rax,%rax
  108381:	0f 88 ce 0d 00 00    	js     109155 <_vfiprintf_r+0x14f5>
  108387:	83 fb ff             	cmp    $0xffffffff,%ebx
  10838a:	0f 84 08 09 00 00    	je     108c98 <_vfiprintf_r+0x1038>
  108390:	41 80 e7 7f          	and    $0x7f,%r15b
  108394:	48 85 c9             	test   %rcx,%rcx
  108397:	0f 85 fb 08 00 00    	jne    108c98 <_vfiprintf_r+0x1038>
  10839d:	85 db                	test   %ebx,%ebx
  10839f:	0f 85 f3 08 00 00    	jne    108c98 <_vfiprintf_r+0x1038>
  1083a5:	c7 85 a8 fe ff ff 00 	movl   $0x0,-0x158(%rbp)
  1083ac:	00 00 00 
  1083af:	4c 8d ad 44 ff ff ff 	lea    -0xbc(%rbp),%r13
  1083b6:	e9 95 00 00 00       	jmpq   108450 <_vfiprintf_r+0x7f0>
  1083bb:	45 89 f8             	mov    %r15d,%r8d
  1083be:	4d 89 e2             	mov    %r12,%r10
  1083c1:	41 83 c8 10          	or     $0x10,%r8d
  1083c5:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  1083cc:	8b 06                	mov    (%rsi),%eax
  1083ce:	41 f6 c0 20          	test   $0x20,%r8b
  1083d2:	0f 84 fc 09 00 00    	je     108dd4 <_vfiprintf_r+0x1174>
  1083d8:	83 f8 2f             	cmp    $0x2f,%eax
  1083db:	0f 86 3c 0b 00 00    	jbe    108f1d <_vfiprintf_r+0x12bd>
  1083e1:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  1083e8:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  1083ec:	48 8d 42 08          	lea    0x8(%rdx),%rax
  1083f0:	48 89 47 08          	mov    %rax,0x8(%rdi)
  1083f4:	48 8b 0a             	mov    (%rdx),%rcx
  1083f7:	b8 01 00 00 00       	mov    $0x1,%eax
  1083fc:	c6 85 bd fe ff ff 00 	movb   $0x0,-0x143(%rbp)
  108403:	83 fb ff             	cmp    $0xffffffff,%ebx
  108406:	0f 84 b4 05 00 00    	je     1089c0 <_vfiprintf_r+0xd60>
  10840c:	45 89 c7             	mov    %r8d,%r15d
  10840f:	41 80 e7 7f          	and    $0x7f,%r15b
  108413:	48 85 c9             	test   %rcx,%rcx
  108416:	0f 85 a0 05 00 00    	jne    1089bc <_vfiprintf_r+0xd5c>
  10841c:	85 db                	test   %ebx,%ebx
  10841e:	0f 85 98 05 00 00    	jne    1089bc <_vfiprintf_r+0xd5c>
  108424:	85 c0                	test   %eax,%eax
  108426:	0f 85 54 08 00 00    	jne    108c80 <_vfiprintf_r+0x1020>
  10842c:	41 83 e0 01          	and    $0x1,%r8d
  108430:	44 89 85 a8 fe ff ff 	mov    %r8d,-0x158(%rbp)
  108437:	0f 84 4f 09 00 00    	je     108d8c <_vfiprintf_r+0x112c>
  10843d:	c6 85 43 ff ff ff 30 	movb   $0x30,-0xbd(%rbp)
  108444:	31 db                	xor    %ebx,%ebx
  108446:	4c 8d ad 43 ff ff ff 	lea    -0xbd(%rbp),%r13
  10844d:	0f 1f 00             	nopl   (%rax)
  108450:	8b 85 a8 fe ff ff    	mov    -0x158(%rbp),%eax
  108456:	39 c3                	cmp    %eax,%ebx
  108458:	41 89 c4             	mov    %eax,%r12d
  10845b:	44 0f 4d e3          	cmovge %ebx,%r12d
  10845f:	80 bd bd fe ff ff 01 	cmpb   $0x1,-0x143(%rbp)
  108466:	41 83 dc ff          	sbb    $0xffffffff,%r12d
  10846a:	e9 01 fa ff ff       	jmpq   107e70 <_vfiprintf_r+0x210>
  10846f:	41 0f be 06          	movsbl (%r14),%eax
  108473:	41 80 cf 80          	or     $0x80,%r15b
  108477:	e9 75 f9 ff ff       	jmpq   107df1 <_vfiprintf_r+0x191>
  10847c:	41 0f be 06          	movsbl (%r14),%eax
  108480:	49 8d 4e 01          	lea    0x1(%r14),%rcx
  108484:	83 f8 2a             	cmp    $0x2a,%eax
  108487:	0f 84 0e 13 00 00    	je     10979b <_vfiprintf_r+0x1b3b>
  10848d:	8d 50 d0             	lea    -0x30(%rax),%edx
  108490:	49 89 ce             	mov    %rcx,%r14
  108493:	31 db                	xor    %ebx,%ebx
  108495:	83 fa 09             	cmp    $0x9,%edx
  108498:	0f 87 57 f9 ff ff    	ja     107df5 <_vfiprintf_r+0x195>
  10849e:	66 90                	xchg   %ax,%ax
  1084a0:	8d 04 9b             	lea    (%rbx,%rbx,4),%eax
  1084a3:	49 83 c6 01          	add    $0x1,%r14
  1084a7:	8d 1c 42             	lea    (%rdx,%rax,2),%ebx
  1084aa:	41 0f be 46 ff       	movsbl -0x1(%r14),%eax
  1084af:	8d 50 d0             	lea    -0x30(%rax),%edx
  1084b2:	83 fa 09             	cmp    $0x9,%edx
  1084b5:	76 e9                	jbe    1084a0 <_vfiprintf_r+0x840>
  1084b7:	e9 39 f9 ff ff       	jmpq   107df5 <_vfiprintf_r+0x195>
  1084bc:	c6 85 bd fe ff ff 2b 	movb   $0x2b,-0x143(%rbp)
  1084c3:	41 0f be 06          	movsbl (%r14),%eax
  1084c7:	e9 25 f9 ff ff       	jmpq   107df1 <_vfiprintf_r+0x191>
  1084cc:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  1084d3:	e8 d8 e7 ff ff       	callq  106cb0 <_localeconv_r>
  1084d8:	48 8b 40 08          	mov    0x8(%rax),%rax
  1084dc:	48 89 c7             	mov    %rax,%rdi
  1084df:	48 89 85 50 fe ff ff 	mov    %rax,-0x1b0(%rbp)
  1084e6:	e8 75 90 ff ff       	callq  101560 <strlen>
  1084eb:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  1084f2:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
  1084f9:	49 89 c5             	mov    %rax,%r13
  1084fc:	e8 af e7 ff ff       	callq  106cb0 <_localeconv_r>
  108501:	48 8b 78 10          	mov    0x10(%rax),%rdi
  108505:	48 89 bd 68 fe ff ff 	mov    %rdi,-0x198(%rbp)
  10850c:	4d 85 ed             	test   %r13,%r13
  10850f:	74 45                	je     108556 <_vfiprintf_r+0x8f6>
  108511:	48 85 ff             	test   %rdi,%rdi
  108514:	74 40                	je     108556 <_vfiprintf_r+0x8f6>
  108516:	44 89 fa             	mov    %r15d,%edx
  108519:	41 0f be 06          	movsbl (%r14),%eax
  10851d:	80 ce 04             	or     $0x4,%dh
  108520:	80 3f 00             	cmpb   $0x0,(%rdi)
  108523:	44 0f 45 fa          	cmovne %edx,%r15d
  108527:	e9 c5 f8 ff ff       	jmpq   107df1 <_vfiprintf_r+0x191>
  10852c:	41 0f be 06          	movsbl (%r14),%eax
  108530:	41 83 cf 01          	or     $0x1,%r15d
  108534:	e9 b8 f8 ff ff       	jmpq   107df1 <_vfiprintf_r+0x191>
  108539:	80 bd bd fe ff ff 00 	cmpb   $0x0,-0x143(%rbp)
  108540:	41 0f be 06          	movsbl (%r14),%eax
  108544:	0f 85 a7 f8 ff ff    	jne    107df1 <_vfiprintf_r+0x191>
  10854a:	c6 85 bd fe ff ff 20 	movb   $0x20,-0x143(%rbp)
  108551:	e9 9b f8 ff ff       	jmpq   107df1 <_vfiprintf_r+0x191>
  108556:	41 0f be 06          	movsbl (%r14),%eax
  10855a:	e9 92 f8 ff ff       	jmpq   107df1 <_vfiprintf_r+0x191>
  10855f:	48 85 c0             	test   %rax,%rax
  108562:	0f 85 54 0a 00 00    	jne    108fbc <_vfiprintf_r+0x135c>
  108568:	80 bd bd fe ff ff 00 	cmpb   $0x0,-0x143(%rbp)
  10856f:	0f 84 29 0a 00 00    	je     108f9e <_vfiprintf_r+0x133e>
  108575:	48 c7 85 58 ff ff ff 	movq   $0x1,-0xa8(%rbp)
  10857c:	01 00 00 00 
  108580:	48 8d 85 bd fe ff ff 	lea    -0x143(%rbp),%rax
  108587:	be 01 00 00 00       	mov    $0x1,%esi
  10858c:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  108593:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  10859a:	b8 01 00 00 00       	mov    $0x1,%eax
  10859f:	90                   	nop
  1085a0:	89 f2                	mov    %esi,%edx
  1085a2:	49 83 c2 10          	add    $0x10,%r10
  1085a6:	83 c6 01             	add    $0x1,%esi
  1085a9:	45 85 c9             	test   %r9d,%r9d
  1085ac:	0f 84 a6 f9 ff ff    	je     107f58 <_vfiprintf_r+0x2f8>
  1085b2:	48 8d 95 be fe ff ff 	lea    -0x142(%rbp),%rdx
  1085b9:	48 83 c0 02          	add    $0x2,%rax
  1085bd:	49 c7 42 08 02 00 00 	movq   $0x2,0x8(%r10)
  1085c4:	00 
  1085c5:	49 89 12             	mov    %rdx,(%r10)
  1085c8:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  1085cf:	89 b5 c8 fe ff ff    	mov    %esi,-0x138(%rbp)
  1085d5:	83 fe 07             	cmp    $0x7,%esi
  1085d8:	0f 8e 1a 07 00 00    	jle    108cf8 <_vfiprintf_r+0x1098>
  1085de:	48 85 c0             	test   %rax,%rax
  1085e1:	0f 85 59 07 00 00    	jne    108d40 <_vfiprintf_r+0x10e0>
  1085e7:	31 d2                	xor    %edx,%edx
  1085e9:	be 01 00 00 00       	mov    $0x1,%esi
  1085ee:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  1085f5:	81 bd 80 fe ff ff 80 	cmpl   $0x80,-0x180(%rbp)
  1085fc:	00 00 00 
  1085ff:	0f 85 63 f9 ff ff    	jne    107f68 <_vfiprintf_r+0x308>
  108605:	0f 1f 00             	nopl   (%rax)
  108608:	44 8b 85 a4 fe ff ff 	mov    -0x15c(%rbp),%r8d
  10860f:	45 29 e0             	sub    %r12d,%r8d
  108612:	45 85 c0             	test   %r8d,%r8d
  108615:	0f 8e 4d f9 ff ff    	jle    107f68 <_vfiprintf_r+0x308>
  10861b:	41 83 f8 10          	cmp    $0x10,%r8d
  10861f:	0f 8e 0c 10 00 00    	jle    109631 <_vfiprintf_r+0x19d1>
  108625:	4c 89 ad 80 fe ff ff 	mov    %r13,-0x180(%rbp)
  10862c:	4c 8b ad 88 fe ff ff 	mov    -0x178(%rbp),%r13
  108633:	89 9d 78 fe ff ff    	mov    %ebx,-0x188(%rbp)
  108639:	44 89 c3             	mov    %r8d,%ebx
  10863c:	44 89 a5 60 fe ff ff 	mov    %r12d,-0x1a0(%rbp)
  108643:	4c 8b a5 98 fe ff ff 	mov    -0x168(%rbp),%r12
  10864a:	eb 15                	jmp    108661 <_vfiprintf_r+0xa01>
  10864c:	0f 1f 40 00          	nopl   0x0(%rax)
  108650:	8d 7a 02             	lea    0x2(%rdx),%edi
  108653:	49 83 c2 10          	add    $0x10,%r10
  108657:	89 ca                	mov    %ecx,%edx
  108659:	83 eb 10             	sub    $0x10,%ebx
  10865c:	83 fb 10             	cmp    $0x10,%ebx
  10865f:	7e 47                	jle    1086a8 <_vfiprintf_r+0xa48>
  108661:	48 83 c0 10          	add    $0x10,%rax
  108665:	8d 4a 01             	lea    0x1(%rdx),%ecx
  108668:	49 c7 02 10 07 11 00 	movq   $0x110710,(%r10)
  10866f:	49 c7 42 08 10 00 00 	movq   $0x10,0x8(%r10)
  108676:	00 
  108677:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  10867e:	89 8d c8 fe ff ff    	mov    %ecx,-0x138(%rbp)
  108684:	83 f9 07             	cmp    $0x7,%ecx
  108687:	7e c7                	jle    108650 <_vfiprintf_r+0x9f0>
  108689:	48 85 c0             	test   %rax,%rax
  10868c:	0f 85 e6 02 00 00    	jne    108978 <_vfiprintf_r+0xd18>
  108692:	83 eb 10             	sub    $0x10,%ebx
  108695:	bf 01 00 00 00       	mov    $0x1,%edi
  10869a:	31 d2                	xor    %edx,%edx
  10869c:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  1086a3:	83 fb 10             	cmp    $0x10,%ebx
  1086a6:	7f b9                	jg     108661 <_vfiprintf_r+0xa01>
  1086a8:	41 89 d8             	mov    %ebx,%r8d
  1086ab:	4c 8b ad 80 fe ff ff 	mov    -0x180(%rbp),%r13
  1086b2:	44 8b a5 60 fe ff ff 	mov    -0x1a0(%rbp),%r12d
  1086b9:	8b 9d 78 fe ff ff    	mov    -0x188(%rbp),%ebx
  1086bf:	4d 63 c0             	movslq %r8d,%r8
  1086c2:	49 c7 02 10 07 11 00 	movq   $0x110710,(%r10)
  1086c9:	4c 01 c0             	add    %r8,%rax
  1086cc:	4d 89 42 08          	mov    %r8,0x8(%r10)
  1086d0:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  1086d7:	89 bd c8 fe ff ff    	mov    %edi,-0x138(%rbp)
  1086dd:	83 ff 07             	cmp    $0x7,%edi
  1086e0:	0f 8f 14 07 00 00    	jg     108dfa <_vfiprintf_r+0x119a>
  1086e6:	2b 9d a8 fe ff ff    	sub    -0x158(%rbp),%ebx
  1086ec:	49 83 c2 10          	add    $0x10,%r10
  1086f0:	8d 77 01             	lea    0x1(%rdi),%esi
  1086f3:	89 fa                	mov    %edi,%edx
  1086f5:	85 db                	test   %ebx,%ebx
  1086f7:	0f 8e 79 f8 ff ff    	jle    107f76 <_vfiprintf_r+0x316>
  1086fd:	0f 1f 00             	nopl   (%rax)
  108700:	83 fb 10             	cmp    $0x10,%ebx
  108703:	0f 8e 94 00 00 00    	jle    10879d <_vfiprintf_r+0xb3d>
  108709:	4c 89 ad 80 fe ff ff 	mov    %r13,-0x180(%rbp)
  108710:	4c 8b ad 88 fe ff ff 	mov    -0x178(%rbp),%r13
  108717:	44 89 a5 78 fe ff ff 	mov    %r12d,-0x188(%rbp)
  10871e:	41 89 dc             	mov    %ebx,%r12d
  108721:	48 8b 9d 98 fe ff ff 	mov    -0x168(%rbp),%rbx
  108728:	eb 19                	jmp    108743 <_vfiprintf_r+0xae3>
  10872a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  108730:	8d 72 02             	lea    0x2(%rdx),%esi
  108733:	49 83 c2 10          	add    $0x10,%r10
  108737:	89 ca                	mov    %ecx,%edx
  108739:	41 83 ec 10          	sub    $0x10,%r12d
  10873d:	41 83 fc 10          	cmp    $0x10,%r12d
  108741:	7e 49                	jle    10878c <_vfiprintf_r+0xb2c>
  108743:	48 83 c0 10          	add    $0x10,%rax
  108747:	8d 4a 01             	lea    0x1(%rdx),%ecx
  10874a:	49 c7 02 10 07 11 00 	movq   $0x110710,(%r10)
  108751:	49 c7 42 08 10 00 00 	movq   $0x10,0x8(%r10)
  108758:	00 
  108759:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  108760:	89 8d c8 fe ff ff    	mov    %ecx,-0x138(%rbp)
  108766:	83 f9 07             	cmp    $0x7,%ecx
  108769:	7e c5                	jle    108730 <_vfiprintf_r+0xad0>
  10876b:	48 85 c0             	test   %rax,%rax
  10876e:	0f 85 bc 01 00 00    	jne    108930 <_vfiprintf_r+0xcd0>
  108774:	41 83 ec 10          	sub    $0x10,%r12d
  108778:	be 01 00 00 00       	mov    $0x1,%esi
  10877d:	31 d2                	xor    %edx,%edx
  10877f:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  108786:	41 83 fc 10          	cmp    $0x10,%r12d
  10878a:	7f b7                	jg     108743 <_vfiprintf_r+0xae3>
  10878c:	44 89 e3             	mov    %r12d,%ebx
  10878f:	4c 8b ad 80 fe ff ff 	mov    -0x180(%rbp),%r13
  108796:	44 8b a5 78 fe ff ff 	mov    -0x188(%rbp),%r12d
  10879d:	48 63 db             	movslq %ebx,%rbx
  1087a0:	49 c7 02 10 07 11 00 	movq   $0x110710,(%r10)
  1087a7:	48 01 d8             	add    %rbx,%rax
  1087aa:	49 89 5a 08          	mov    %rbx,0x8(%r10)
  1087ae:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  1087b5:	89 b5 c8 fe ff ff    	mov    %esi,-0x138(%rbp)
  1087bb:	83 fe 07             	cmp    $0x7,%esi
  1087be:	7f 10                	jg     1087d0 <_vfiprintf_r+0xb70>
  1087c0:	49 83 c2 10          	add    $0x10,%r10
  1087c4:	83 c6 01             	add    $0x1,%esi
  1087c7:	e9 aa f7 ff ff       	jmpq   107f76 <_vfiprintf_r+0x316>
  1087cc:	0f 1f 40 00          	nopl   0x0(%rax)
  1087d0:	48 85 c0             	test   %rax,%rax
  1087d3:	74 37                	je     10880c <_vfiprintf_r+0xbac>
  1087d5:	48 8b b5 88 fe ff ff 	mov    -0x178(%rbp),%rsi
  1087dc:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  1087e3:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  1087ea:	e8 c1 13 00 00       	callq  109bb0 <__sfvwrite_r>
  1087ef:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  1087f6:	00 00 00 00 
  1087fa:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  108801:	00 00 00 
  108804:	85 c0                	test   %eax,%eax
  108806:	0f 85 a3 02 00 00    	jne    108aaf <_vfiprintf_r+0xe4f>
  10880c:	48 63 85 a8 fe ff ff 	movslq -0x158(%rbp),%rax
  108813:	4c 89 ad 50 ff ff ff 	mov    %r13,-0xb0(%rbp)
  10881a:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  108821:	c7 85 c8 fe ff ff 01 	movl   $0x1,-0x138(%rbp)
  108828:	00 00 00 
  10882b:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  108832:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  108839:	41 83 e7 04          	and    $0x4,%r15d
  10883d:	0f 84 96 f7 ff ff    	je     107fd9 <_vfiprintf_r+0x379>
  108843:	8b 9d a4 fe ff ff    	mov    -0x15c(%rbp),%ebx
  108849:	49 83 c2 10          	add    $0x10,%r10
  10884d:	44 29 e3             	sub    %r12d,%ebx
  108850:	85 db                	test   %ebx,%ebx
  108852:	0f 8e 81 f7 ff ff    	jle    107fd9 <_vfiprintf_r+0x379>
  108858:	8b b5 c8 fe ff ff    	mov    -0x138(%rbp),%esi
  10885e:	83 fb 10             	cmp    $0x10,%ebx
  108861:	0f 8e 8a 0d 00 00    	jle    1095f1 <_vfiprintf_r+0x1991>
  108867:	4c 8b ad 98 fe ff ff 	mov    -0x168(%rbp),%r13
  10886e:	4c 8b bd 88 fe ff ff 	mov    -0x178(%rbp),%r15
  108875:	eb 1a                	jmp    108891 <_vfiprintf_r+0xc31>
  108877:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  10887e:	00 00 
  108880:	8d 7e 02             	lea    0x2(%rsi),%edi
  108883:	49 83 c2 10          	add    $0x10,%r10
  108887:	89 d6                	mov    %edx,%esi
  108889:	83 eb 10             	sub    $0x10,%ebx
  10888c:	83 fb 10             	cmp    $0x10,%ebx
  10888f:	7e 47                	jle    1088d8 <_vfiprintf_r+0xc78>
  108891:	48 83 c0 10          	add    $0x10,%rax
  108895:	8d 56 01             	lea    0x1(%rsi),%edx
  108898:	49 c7 02 20 07 11 00 	movq   $0x110720,(%r10)
  10889f:	49 c7 42 08 10 00 00 	movq   $0x10,0x8(%r10)
  1088a6:	00 
  1088a7:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  1088ae:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  1088b4:	83 fa 07             	cmp    $0x7,%edx
  1088b7:	7e c7                	jle    108880 <_vfiprintf_r+0xc20>
  1088b9:	48 85 c0             	test   %rax,%rax
  1088bc:	0f 85 76 03 00 00    	jne    108c38 <_vfiprintf_r+0xfd8>
  1088c2:	83 eb 10             	sub    $0x10,%ebx
  1088c5:	bf 01 00 00 00       	mov    $0x1,%edi
  1088ca:	31 f6                	xor    %esi,%esi
  1088cc:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  1088d3:	83 fb 10             	cmp    $0x10,%ebx
  1088d6:	7f b9                	jg     108891 <_vfiprintf_r+0xc31>
  1088d8:	48 63 db             	movslq %ebx,%rbx
  1088db:	49 c7 02 20 07 11 00 	movq   $0x110720,(%r10)
  1088e2:	48 01 d8             	add    %rbx,%rax
  1088e5:	49 89 5a 08          	mov    %rbx,0x8(%r10)
  1088e9:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  1088f0:	89 bd c8 fe ff ff    	mov    %edi,-0x138(%rbp)
  1088f6:	83 ff 07             	cmp    $0x7,%edi
  1088f9:	0f 8e da f6 ff ff    	jle    107fd9 <_vfiprintf_r+0x379>
  1088ff:	48 85 c0             	test   %rax,%rax
  108902:	0f 85 08 07 00 00    	jne    109010 <_vfiprintf_r+0x13b0>
  108908:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10890f:	00 
  108910:	8b 85 a4 fe ff ff    	mov    -0x15c(%rbp),%eax
  108916:	44 39 e0             	cmp    %r12d,%eax
  108919:	89 c1                	mov    %eax,%ecx
  10891b:	41 0f 4c cc          	cmovl  %r12d,%ecx
  10891f:	01 8d a0 fe ff ff    	add    %ecx,-0x160(%rbp)
  108925:	e9 00 f7 ff ff       	jmpq   10802a <_vfiprintf_r+0x3ca>
  10892a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  108930:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  108937:	4c 89 ee             	mov    %r13,%rsi
  10893a:	48 89 df             	mov    %rbx,%rdi
  10893d:	e8 6e 12 00 00       	callq  109bb0 <__sfvwrite_r>
  108942:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  108949:	00 00 00 00 
  10894d:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  108954:	00 00 00 
  108957:	89 c2                	mov    %eax,%edx
  108959:	85 c0                	test   %eax,%eax
  10895b:	0f 85 5f 01 00 00    	jne    108ac0 <_vfiprintf_r+0xe60>
  108961:	be 01 00 00 00       	mov    $0x1,%esi
  108966:	31 c0                	xor    %eax,%eax
  108968:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  10896f:	e9 c5 fd ff ff       	jmpq   108739 <_vfiprintf_r+0xad9>
  108974:	0f 1f 40 00          	nopl   0x0(%rax)
  108978:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  10897f:	4c 89 ee             	mov    %r13,%rsi
  108982:	4c 89 e7             	mov    %r12,%rdi
  108985:	e8 26 12 00 00       	callq  109bb0 <__sfvwrite_r>
  10898a:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  108991:	00 00 00 00 
  108995:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  10899c:	00 00 00 
  10899f:	89 c2                	mov    %eax,%edx
  1089a1:	85 c0                	test   %eax,%eax
  1089a3:	0f 85 17 01 00 00    	jne    108ac0 <_vfiprintf_r+0xe60>
  1089a9:	bf 01 00 00 00       	mov    $0x1,%edi
  1089ae:	31 c0                	xor    %eax,%eax
  1089b0:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  1089b7:	e9 9d fc ff ff       	jmpq   108659 <_vfiprintf_r+0x9f9>
  1089bc:	45 89 f8             	mov    %r15d,%r8d
  1089bf:	90                   	nop
  1089c0:	83 f8 01             	cmp    $0x1,%eax
  1089c3:	0f 84 d2 02 00 00    	je     108c9b <_vfiprintf_r+0x103b>
  1089c9:	4c 8d ad 44 ff ff ff 	lea    -0xbc(%rbp),%r13
  1089d0:	83 f8 02             	cmp    $0x2,%eax
  1089d3:	75 4b                	jne    108a20 <_vfiprintf_r+0xdc0>
  1089d5:	48 8b 95 70 fe ff ff 	mov    -0x190(%rbp),%rdx
  1089dc:	0f 1f 40 00          	nopl   0x0(%rax)
  1089e0:	48 89 c8             	mov    %rcx,%rax
  1089e3:	49 83 ed 01          	sub    $0x1,%r13
  1089e7:	83 e0 0f             	and    $0xf,%eax
  1089ea:	48 c1 e9 04          	shr    $0x4,%rcx
  1089ee:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  1089f2:	41 88 45 00          	mov    %al,0x0(%r13)
  1089f6:	75 e8                	jne    1089e0 <_vfiprintf_r+0xd80>
  1089f8:	48 8d 85 44 ff ff ff 	lea    -0xbc(%rbp),%rax
  1089ff:	45 89 c7             	mov    %r8d,%r15d
  108a02:	48 89 85 a8 fe ff ff 	mov    %rax,-0x158(%rbp)
  108a09:	8b 85 a8 fe ff ff    	mov    -0x158(%rbp),%eax
  108a0f:	44 29 e8             	sub    %r13d,%eax
  108a12:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%rbp)
  108a18:	e9 33 fa ff ff       	jmpq   108450 <_vfiprintf_r+0x7f0>
  108a1d:	0f 1f 00             	nopl   (%rax)
  108a20:	89 c8                	mov    %ecx,%eax
  108a22:	4c 89 ea             	mov    %r13,%rdx
  108a25:	49 83 ed 01          	sub    $0x1,%r13
  108a29:	83 e0 07             	and    $0x7,%eax
  108a2c:	83 c0 30             	add    $0x30,%eax
  108a2f:	48 c1 e9 03          	shr    $0x3,%rcx
  108a33:	41 88 45 00          	mov    %al,0x0(%r13)
  108a37:	75 e7                	jne    108a20 <_vfiprintf_r+0xdc0>
  108a39:	3c 30                	cmp    $0x30,%al
  108a3b:	74 bb                	je     1089f8 <_vfiprintf_r+0xd98>
  108a3d:	41 f6 c0 01          	test   $0x1,%r8b
  108a41:	74 b5                	je     1089f8 <_vfiprintf_r+0xd98>
  108a43:	48 8d 85 44 ff ff ff 	lea    -0xbc(%rbp),%rax
  108a4a:	48 83 ea 02          	sub    $0x2,%rdx
  108a4e:	41 c6 45 ff 30       	movb   $0x30,-0x1(%r13)
  108a53:	45 89 c7             	mov    %r8d,%r15d
  108a56:	48 89 85 a8 fe ff ff 	mov    %rax,-0x158(%rbp)
  108a5d:	8b 85 a8 fe ff ff    	mov    -0x158(%rbp),%eax
  108a63:	49 89 d5             	mov    %rdx,%r13
  108a66:	29 d0                	sub    %edx,%eax
  108a68:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%rbp)
  108a6e:	e9 dd f9 ff ff       	jmpq   108450 <_vfiprintf_r+0x7f0>
  108a73:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  108a78:	48 8b b5 88 fe ff ff 	mov    -0x178(%rbp),%rsi
  108a7f:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  108a86:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  108a8d:	e8 1e 11 00 00       	callq  109bb0 <__sfvwrite_r>
  108a92:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  108a99:	00 00 00 00 
  108a9d:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  108aa4:	00 00 00 
  108aa7:	85 c0                	test   %eax,%eax
  108aa9:	0f 84 01 f5 ff ff    	je     107fb0 <_vfiprintf_r+0x350>
  108aaf:	4c 8b ad 88 fe ff ff 	mov    -0x178(%rbp),%r13
  108ab6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  108abd:	00 00 00 
  108ac0:	41 0f b7 45 10       	movzwl 0x10(%r13),%eax
  108ac5:	41 f6 85 b0 00 00 00 	testb  $0x1,0xb0(%r13)
  108acc:	01 
  108acd:	75 09                	jne    108ad8 <_vfiprintf_r+0xe78>
  108acf:	f6 c4 02             	test   $0x2,%ah
  108ad2:	0f 84 6f 07 00 00    	je     109247 <_vfiprintf_r+0x15e7>
  108ad8:	a8 40                	test   $0x40,%al
  108ada:	0f 85 7c 0c 00 00    	jne    10975c <_vfiprintf_r+0x1afc>
  108ae0:	8b 85 a0 fe ff ff    	mov    -0x160(%rbp),%eax
  108ae6:	48 81 c4 98 01 00 00 	add    $0x198,%rsp
  108aed:	5b                   	pop    %rbx
  108aee:	41 5c                	pop    %r12
  108af0:	41 5d                	pop    %r13
  108af2:	41 5e                	pop    %r14
  108af4:	41 5f                	pop    %r15
  108af6:	5d                   	pop    %rbp
  108af7:	c3                   	retq   
  108af8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  108aff:	00 
  108b00:	41 83 f8 10          	cmp    $0x10,%r8d
  108b04:	0f 8e df 0a 00 00    	jle    1095e9 <_vfiprintf_r+0x1989>
  108b0a:	4c 89 ad 60 fe ff ff 	mov    %r13,-0x1a0(%rbp)
  108b11:	4c 8b ad 88 fe ff ff 	mov    -0x178(%rbp),%r13
  108b18:	89 9d 5c fe ff ff    	mov    %ebx,-0x1a4(%rbp)
  108b1e:	44 89 c3             	mov    %r8d,%ebx
  108b21:	44 89 a5 58 fe ff ff 	mov    %r12d,-0x1a8(%rbp)
  108b28:	4c 8b a5 98 fe ff ff 	mov    -0x168(%rbp),%r12
  108b2f:	44 89 8d 78 fe ff ff 	mov    %r9d,-0x188(%rbp)
  108b36:	eb 1d                	jmp    108b55 <_vfiprintf_r+0xef5>
  108b38:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  108b3f:	00 
  108b40:	44 8d 5a 02          	lea    0x2(%rdx),%r11d
  108b44:	49 83 c2 10          	add    $0x10,%r10
  108b48:	89 fa                	mov    %edi,%edx
  108b4a:	83 eb 10             	sub    $0x10,%ebx
  108b4d:	83 fb 10             	cmp    $0x10,%ebx
  108b50:	7e 44                	jle    108b96 <_vfiprintf_r+0xf36>
  108b52:	8d 7a 01             	lea    0x1(%rdx),%edi
  108b55:	48 83 c0 10          	add    $0x10,%rax
  108b59:	49 c7 02 20 07 11 00 	movq   $0x110720,(%r10)
  108b60:	49 c7 42 08 10 00 00 	movq   $0x10,0x8(%r10)
  108b67:	00 
  108b68:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  108b6f:	89 bd c8 fe ff ff    	mov    %edi,-0x138(%rbp)
  108b75:	83 ff 07             	cmp    $0x7,%edi
  108b78:	7e c6                	jle    108b40 <_vfiprintf_r+0xee0>
  108b7a:	48 85 c0             	test   %rax,%rax
  108b7d:	75 71                	jne    108bf0 <_vfiprintf_r+0xf90>
  108b7f:	83 eb 10             	sub    $0x10,%ebx
  108b82:	31 d2                	xor    %edx,%edx
  108b84:	41 bb 01 00 00 00    	mov    $0x1,%r11d
  108b8a:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  108b91:	83 fb 10             	cmp    $0x10,%ebx
  108b94:	7f bc                	jg     108b52 <_vfiprintf_r+0xef2>
  108b96:	41 89 d8             	mov    %ebx,%r8d
  108b99:	44 8b 8d 78 fe ff ff 	mov    -0x188(%rbp),%r9d
  108ba0:	4c 8b ad 60 fe ff ff 	mov    -0x1a0(%rbp),%r13
  108ba7:	44 8b a5 58 fe ff ff 	mov    -0x1a8(%rbp),%r12d
  108bae:	8b 9d 5c fe ff ff    	mov    -0x1a4(%rbp),%ebx
  108bb4:	4d 63 c0             	movslq %r8d,%r8
  108bb7:	49 c7 02 20 07 11 00 	movq   $0x110720,(%r10)
  108bbe:	4c 01 c0             	add    %r8,%rax
  108bc1:	4d 89 42 08          	mov    %r8,0x8(%r10)
  108bc5:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  108bcc:	44 89 9d c8 fe ff ff 	mov    %r11d,-0x138(%rbp)
  108bd3:	41 83 fb 07          	cmp    $0x7,%r11d
  108bd7:	0f 8f 82 f9 ff ff    	jg     10855f <_vfiprintf_r+0x8ff>
  108bdd:	49 83 c2 10          	add    $0x10,%r10
  108be1:	41 8d 73 01          	lea    0x1(%r11),%esi
  108be5:	44 89 da             	mov    %r11d,%edx
  108be8:	e9 c9 f2 ff ff       	jmpq   107eb6 <_vfiprintf_r+0x256>
  108bed:	0f 1f 00             	nopl   (%rax)
  108bf0:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  108bf7:	4c 89 ee             	mov    %r13,%rsi
  108bfa:	4c 89 e7             	mov    %r12,%rdi
  108bfd:	e8 ae 0f 00 00       	callq  109bb0 <__sfvwrite_r>
  108c02:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  108c09:	00 00 00 00 
  108c0d:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  108c14:	00 00 00 
  108c17:	89 c2                	mov    %eax,%edx
  108c19:	85 c0                	test   %eax,%eax
  108c1b:	0f 85 9f fe ff ff    	jne    108ac0 <_vfiprintf_r+0xe60>
  108c21:	41 bb 01 00 00 00    	mov    $0x1,%r11d
  108c27:	31 c0                	xor    %eax,%eax
  108c29:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  108c30:	e9 15 ff ff ff       	jmpq   108b4a <_vfiprintf_r+0xeea>
  108c35:	0f 1f 00             	nopl   (%rax)
  108c38:	4c 89 fe             	mov    %r15,%rsi
  108c3b:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  108c42:	4c 89 ef             	mov    %r13,%rdi
  108c45:	e8 66 0f 00 00       	callq  109bb0 <__sfvwrite_r>
  108c4a:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  108c51:	00 00 00 00 
  108c55:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  108c5c:	00 00 00 
  108c5f:	89 c6                	mov    %eax,%esi
  108c61:	85 c0                	test   %eax,%eax
  108c63:	0f 85 1b 06 00 00    	jne    109284 <_vfiprintf_r+0x1624>
  108c69:	bf 01 00 00 00       	mov    $0x1,%edi
  108c6e:	31 c0                	xor    %eax,%eax
  108c70:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  108c77:	e9 0d fc ff ff       	jmpq   108889 <_vfiprintf_r+0xc29>
  108c7c:	0f 1f 40 00          	nopl   0x0(%rax)
  108c80:	c7 85 a8 fe ff ff 00 	movl   $0x0,-0x158(%rbp)
  108c87:	00 00 00 
  108c8a:	31 db                	xor    %ebx,%ebx
  108c8c:	4c 8d ad 44 ff ff ff 	lea    -0xbc(%rbp),%r13
  108c93:	e9 b8 f7 ff ff       	jmpq   108450 <_vfiprintf_r+0x7f0>
  108c98:	45 89 f8             	mov    %r15d,%r8d
  108c9b:	48 83 f9 09          	cmp    $0x9,%rcx
  108c9f:	0f 87 0c 05 00 00    	ja     1091b1 <_vfiprintf_r+0x1551>
  108ca5:	83 c1 30             	add    $0x30,%ecx
  108ca8:	45 89 c7             	mov    %r8d,%r15d
  108cab:	c7 85 a8 fe ff ff 01 	movl   $0x1,-0x158(%rbp)
  108cb2:	00 00 00 
  108cb5:	4c 8d ad 43 ff ff ff 	lea    -0xbd(%rbp),%r13
  108cbc:	88 8d 43 ff ff ff    	mov    %cl,-0xbd(%rbp)
  108cc2:	e9 89 f7 ff ff       	jmpq   108450 <_vfiprintf_r+0x7f0>
  108cc7:	48 c7 85 58 ff ff ff 	movq   $0x2,-0xa8(%rbp)
  108cce:	02 00 00 00 
  108cd2:	48 8d 85 be fe ff ff 	lea    -0x142(%rbp),%rax
  108cd9:	be 01 00 00 00       	mov    $0x1,%esi
  108cde:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  108ce5:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  108cec:	b8 02 00 00 00       	mov    $0x2,%eax
  108cf1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  108cf8:	89 f2                	mov    %esi,%edx
  108cfa:	49 83 c2 10          	add    $0x10,%r10
  108cfe:	8d 72 01             	lea    0x1(%rdx),%esi
  108d01:	e9 52 f2 ff ff       	jmpq   107f58 <_vfiprintf_r+0x2f8>
  108d06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  108d0d:	00 00 00 
  108d10:	48 8d 85 be fe ff ff 	lea    -0x142(%rbp),%rax
  108d17:	ba 01 00 00 00       	mov    $0x1,%edx
  108d1c:	48 c7 85 58 ff ff ff 	movq   $0x2,-0xa8(%rbp)
  108d23:	02 00 00 00 
  108d27:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  108d2e:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  108d35:	b8 02 00 00 00       	mov    $0x2,%eax
  108d3a:	eb be                	jmp    108cfa <_vfiprintf_r+0x109a>
  108d3c:	0f 1f 40 00          	nopl   0x0(%rax)
  108d40:	48 8b b5 88 fe ff ff 	mov    -0x178(%rbp),%rsi
  108d47:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  108d4e:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  108d55:	e8 56 0e 00 00       	callq  109bb0 <__sfvwrite_r>
  108d5a:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  108d61:	00 00 00 00 
  108d65:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  108d6c:	00 00 00 
  108d6f:	89 c2                	mov    %eax,%edx
  108d71:	85 c0                	test   %eax,%eax
  108d73:	0f 85 36 fd ff ff    	jne    108aaf <_vfiprintf_r+0xe4f>
  108d79:	be 01 00 00 00       	mov    $0x1,%esi
  108d7e:	31 c0                	xor    %eax,%eax
  108d80:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  108d87:	e9 cc f1 ff ff       	jmpq   107f58 <_vfiprintf_r+0x2f8>
  108d8c:	31 db                	xor    %ebx,%ebx
  108d8e:	4c 8d ad 44 ff ff ff 	lea    -0xbc(%rbp),%r13
  108d95:	e9 b6 f6 ff ff       	jmpq   108450 <_vfiprintf_r+0x7f0>
  108d9a:	41 f6 c7 10          	test   $0x10,%r15b
  108d9e:	0f 84 e5 00 00 00    	je     108e89 <_vfiprintf_r+0x1229>
  108da4:	83 f8 2f             	cmp    $0x2f,%eax
  108da7:	0f 87 26 05 00 00    	ja     1092d3 <_vfiprintf_r+0x1673>
  108dad:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  108db4:	89 c2                	mov    %eax,%edx
  108db6:	83 c0 08             	add    $0x8,%eax
  108db9:	89 06                	mov    %eax,(%rsi)
  108dbb:	48 03 56 10          	add    0x10(%rsi),%rdx
  108dbf:	90                   	nop
  108dc0:	48 8b 0a             	mov    (%rdx),%rcx
  108dc3:	45 89 f8             	mov    %r15d,%r8d
  108dc6:	31 c0                	xor    %eax,%eax
  108dc8:	41 81 e0 ff fb ff ff 	and    $0xfffffbff,%r8d
  108dcf:	e9 28 f6 ff ff       	jmpq   1083fc <_vfiprintf_r+0x79c>
  108dd4:	41 f6 c0 10          	test   $0x10,%r8b
  108dd8:	74 7d                	je     108e57 <_vfiprintf_r+0x11f7>
  108dda:	83 f8 2f             	cmp    $0x2f,%eax
  108ddd:	0f 87 fe f5 ff ff    	ja     1083e1 <_vfiprintf_r+0x781>
  108de3:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  108dea:	89 c2                	mov    %eax,%edx
  108dec:	83 c0 08             	add    $0x8,%eax
  108def:	89 06                	mov    %eax,(%rsi)
  108df1:	48 03 56 10          	add    0x10(%rsi),%rdx
  108df5:	e9 fa f5 ff ff       	jmpq   1083f4 <_vfiprintf_r+0x794>
  108dfa:	48 85 c0             	test   %rax,%rax
  108dfd:	0f 85 08 03 00 00    	jne    10910b <_vfiprintf_r+0x14ab>
  108e03:	2b 9d a8 fe ff ff    	sub    -0x158(%rbp),%ebx
  108e09:	85 db                	test   %ebx,%ebx
  108e0b:	0f 8e fb f9 ff ff    	jle    10880c <_vfiprintf_r+0xbac>
  108e11:	be 01 00 00 00       	mov    $0x1,%esi
  108e16:	31 d2                	xor    %edx,%edx
  108e18:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  108e1f:	31 c0                	xor    %eax,%eax
  108e21:	e9 da f8 ff ff       	jmpq   108700 <_vfiprintf_r+0xaa0>
  108e26:	41 f6 c7 40          	test   $0x40,%r15b
  108e2a:	0f 84 f0 04 00 00    	je     109320 <_vfiprintf_r+0x16c0>
  108e30:	83 f8 2f             	cmp    $0x2f,%eax
  108e33:	0f 87 7a 07 00 00    	ja     1095b3 <_vfiprintf_r+0x1953>
  108e39:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  108e40:	89 c2                	mov    %eax,%edx
  108e42:	83 c0 08             	add    $0x8,%eax
  108e45:	89 07                	mov    %eax,(%rdi)
  108e47:	48 03 57 10          	add    0x10(%rdi),%rdx
  108e4b:	48 0f bf 0a          	movswq (%rdx),%rcx
  108e4f:	48 89 c8             	mov    %rcx,%rax
  108e52:	e9 27 f5 ff ff       	jmpq   10837e <_vfiprintf_r+0x71e>
  108e57:	41 f6 c0 40          	test   $0x40,%r8b
  108e5b:	0f 84 8a 04 00 00    	je     1092eb <_vfiprintf_r+0x168b>
  108e61:	83 f8 2f             	cmp    $0x2f,%eax
  108e64:	0f 87 31 07 00 00    	ja     10959b <_vfiprintf_r+0x193b>
  108e6a:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  108e71:	89 c2                	mov    %eax,%edx
  108e73:	83 c0 08             	add    $0x8,%eax
  108e76:	89 07                	mov    %eax,(%rdi)
  108e78:	48 03 57 10          	add    0x10(%rdi),%rdx
  108e7c:	0f b7 0a             	movzwl (%rdx),%ecx
  108e7f:	b8 01 00 00 00       	mov    $0x1,%eax
  108e84:	e9 73 f5 ff ff       	jmpq   1083fc <_vfiprintf_r+0x79c>
  108e89:	41 f6 c7 40          	test   $0x40,%r15b
  108e8d:	0f 84 65 05 00 00    	je     1093f8 <_vfiprintf_r+0x1798>
  108e93:	83 f8 2f             	cmp    $0x2f,%eax
  108e96:	0f 87 e7 06 00 00    	ja     109583 <_vfiprintf_r+0x1923>
  108e9c:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  108ea3:	89 c2                	mov    %eax,%edx
  108ea5:	83 c0 08             	add    $0x8,%eax
  108ea8:	89 07                	mov    %eax,(%rdi)
  108eaa:	48 03 57 10          	add    0x10(%rdi),%rdx
  108eae:	0f b7 0a             	movzwl (%rdx),%ecx
  108eb1:	e9 0d ff ff ff       	jmpq   108dc3 <_vfiprintf_r+0x1163>
  108eb6:	89 c2                	mov    %eax,%edx
  108eb8:	83 c0 08             	add    $0x8,%eax
  108ebb:	48 03 56 10          	add    0x10(%rsi),%rdx
  108ebf:	89 06                	mov    %eax,(%rsi)
  108ec1:	e9 b2 f4 ff ff       	jmpq   108378 <_vfiprintf_r+0x718>
  108ec6:	89 c2                	mov    %eax,%edx
  108ec8:	83 c0 08             	add    $0x8,%eax
  108ecb:	48 03 57 10          	add    0x10(%rdi),%rdx
  108ecf:	89 07                	mov    %eax,(%rdi)
  108ed1:	8b 02                	mov    (%rdx),%eax
  108ed3:	e9 6b ef ff ff       	jmpq   107e43 <_vfiprintf_r+0x1e3>
  108ed8:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  108edf:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  108ee3:	48 8d 42 08          	lea    0x8(%rdx),%rax
  108ee7:	48 89 46 08          	mov    %rax,0x8(%rsi)
  108eeb:	4c 8b 2a             	mov    (%rdx),%r13
  108eee:	c6 85 bd fe ff ff 00 	movb   $0x0,-0x143(%rbp)
  108ef5:	4d 85 ed             	test   %r13,%r13
  108ef8:	0f 85 88 f2 ff ff    	jne    108186 <_vfiprintf_r+0x526>
  108efe:	83 fb 06             	cmp    $0x6,%ebx
  108f01:	41 bc 06 00 00 00    	mov    $0x6,%r12d
  108f07:	41 bd 23 15 11 00    	mov    $0x111523,%r13d
  108f0d:	44 0f 46 e3          	cmovbe %ebx,%r12d
  108f11:	44 89 a5 a8 fe ff ff 	mov    %r12d,-0x158(%rbp)
  108f18:	e9 4a ef ff ff       	jmpq   107e67 <_vfiprintf_r+0x207>
  108f1d:	89 c2                	mov    %eax,%edx
  108f1f:	83 c0 08             	add    $0x8,%eax
  108f22:	48 03 56 10          	add    0x10(%rsi),%rdx
  108f26:	89 06                	mov    %eax,(%rsi)
  108f28:	e9 c7 f4 ff ff       	jmpq   1083f4 <_vfiprintf_r+0x794>
  108f2d:	89 c2                	mov    %eax,%edx
  108f2f:	83 c0 08             	add    $0x8,%eax
  108f32:	48 03 56 10          	add    0x10(%rsi),%rdx
  108f36:	89 06                	mov    %eax,(%rsi)
  108f38:	e9 83 fe ff ff       	jmpq   108dc0 <_vfiprintf_r+0x1160>
  108f3d:	41 f6 c7 10          	test   $0x10,%r15b
  108f41:	0f 84 3d 04 00 00    	je     109384 <_vfiprintf_r+0x1724>
  108f47:	83 f8 2f             	cmp    $0x2f,%eax
  108f4a:	0f 86 1c 06 00 00    	jbe    10956c <_vfiprintf_r+0x190c>
  108f50:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  108f57:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  108f5b:	48 8d 42 08          	lea    0x8(%rdx),%rax
  108f5f:	48 89 46 08          	mov    %rax,0x8(%rsi)
  108f63:	e9 7f f3 ff ff       	jmpq   1082e7 <_vfiprintf_r+0x687>
  108f68:	89 c2                	mov    %eax,%edx
  108f6a:	83 c0 08             	add    $0x8,%eax
  108f6d:	48 03 56 10          	add    0x10(%rsi),%rdx
  108f71:	89 06                	mov    %eax,(%rsi)
  108f73:	e9 1a f3 ff ff       	jmpq   108292 <_vfiprintf_r+0x632>
  108f78:	89 c2                	mov    %eax,%edx
  108f7a:	83 c0 08             	add    $0x8,%eax
  108f7d:	48 03 56 10          	add    0x10(%rsi),%rdx
  108f81:	89 06                	mov    %eax,(%rsi)
  108f83:	e9 61 f1 ff ff       	jmpq   1080e9 <_vfiprintf_r+0x489>
  108f88:	49 8b bd a0 00 00 00 	mov    0xa0(%r13),%rdi
  108f8f:	e8 6a 3d 00 00       	callq  10ccfe <__retarget_lock_acquire_recursive>
  108f94:	41 0f b7 45 10       	movzwl 0x10(%r13),%eax
  108f99:	e9 12 ed ff ff       	jmpq   107cb0 <_vfiprintf_r+0x50>
  108f9e:	45 85 c9             	test   %r9d,%r9d
  108fa1:	0f 85 20 fd ff ff    	jne    108cc7 <_vfiprintf_r+0x1067>
  108fa7:	31 d2                	xor    %edx,%edx
  108fa9:	be 01 00 00 00       	mov    $0x1,%esi
  108fae:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  108fb5:	31 c0                	xor    %eax,%eax
  108fb7:	e9 ac ef ff ff       	jmpq   107f68 <_vfiprintf_r+0x308>
  108fbc:	48 8b b5 88 fe ff ff 	mov    -0x178(%rbp),%rsi
  108fc3:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  108fca:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  108fd1:	44 89 8d 78 fe ff ff 	mov    %r9d,-0x188(%rbp)
  108fd8:	e8 d3 0b 00 00       	callq  109bb0 <__sfvwrite_r>
  108fdd:	44 8b 8d 78 fe ff ff 	mov    -0x188(%rbp),%r9d
  108fe4:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  108feb:	00 00 00 00 
  108fef:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  108ff6:	00 00 00 
  108ff9:	85 c0                	test   %eax,%eax
  108ffb:	0f 85 ae fa ff ff    	jne    108aaf <_vfiprintf_r+0xe4f>
  109001:	80 bd bd fe ff ff 00 	cmpb   $0x0,-0x143(%rbp)
  109008:	0f 85 67 f5 ff ff    	jne    108575 <_vfiprintf_r+0x915>
  10900e:	eb 8e                	jmp    108f9e <_vfiprintf_r+0x133e>
  109010:	48 8b b5 88 fe ff ff 	mov    -0x178(%rbp),%rsi
  109017:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  10901e:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  109025:	e8 86 0b 00 00       	callq  109bb0 <__sfvwrite_r>
  10902a:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  109031:	00 00 00 00 
  109035:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  10903c:	00 00 00 
  10903f:	85 c0                	test   %eax,%eax
  109041:	0f 84 c9 f8 ff ff    	je     108910 <_vfiprintf_r+0xcb0>
  109047:	e9 63 fa ff ff       	jmpq   108aaf <_vfiprintf_r+0xe4f>
  10904c:	0f 1f 40 00          	nopl   0x0(%rax)
  109050:	4d 89 e2             	mov    %r12,%r10
  109053:	45 89 f8             	mov    %r15d,%r8d
  109056:	e9 6a f3 ff ff       	jmpq   1083c5 <_vfiprintf_r+0x765>
  10905b:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  109062:	4d 89 e2             	mov    %r12,%r10
  109065:	48 c7 85 70 fe ff ff 	movq   $0x111512,-0x190(%rbp)
  10906c:	12 15 11 00 
  109070:	8b 16                	mov    (%rsi),%edx
  109072:	41 f6 c7 20          	test   $0x20,%r15b
  109076:	74 64                	je     1090dc <_vfiprintf_r+0x147c>
  109078:	83 fa 2f             	cmp    $0x2f,%edx
  10907b:	0f 87 eb 00 00 00    	ja     10916c <_vfiprintf_r+0x150c>
  109081:	89 d1                	mov    %edx,%ecx
  109083:	83 c2 08             	add    $0x8,%edx
  109086:	48 03 4e 10          	add    0x10(%rsi),%rcx
  10908a:	89 16                	mov    %edx,(%rsi)
  10908c:	48 8b 09             	mov    (%rcx),%rcx
  10908f:	48 85 c9             	test   %rcx,%rcx
  109092:	74 17                	je     1090ab <_vfiprintf_r+0x144b>
  109094:	41 f6 c7 01          	test   $0x1,%r15b
  109098:	74 11                	je     1090ab <_vfiprintf_r+0x144b>
  10909a:	c6 85 be fe ff ff 30 	movb   $0x30,-0x142(%rbp)
  1090a1:	41 83 cf 02          	or     $0x2,%r15d
  1090a5:	88 85 bf fe ff ff    	mov    %al,-0x141(%rbp)
  1090ab:	45 89 f8             	mov    %r15d,%r8d
  1090ae:	b8 02 00 00 00       	mov    $0x2,%eax
  1090b3:	41 81 e0 ff fb ff ff 	and    $0xfffffbff,%r8d
  1090ba:	e9 3d f3 ff ff       	jmpq   1083fc <_vfiprintf_r+0x79c>
  1090bf:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  1090c6:	4d 89 e2             	mov    %r12,%r10
  1090c9:	48 c7 85 70 fe ff ff 	movq   $0x111501,-0x190(%rbp)
  1090d0:	01 15 11 00 
  1090d4:	8b 16                	mov    (%rsi),%edx
  1090d6:	41 f6 c7 20          	test   $0x20,%r15b
  1090da:	75 9c                	jne    109078 <_vfiprintf_r+0x1418>
  1090dc:	41 f6 c7 10          	test   $0x10,%r15b
  1090e0:	0f 84 9e 00 00 00    	je     109184 <_vfiprintf_r+0x1524>
  1090e6:	83 fa 2f             	cmp    $0x2f,%edx
  1090e9:	0f 87 7d 02 00 00    	ja     10936c <_vfiprintf_r+0x170c>
  1090ef:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  1090f6:	89 d1                	mov    %edx,%ecx
  1090f8:	83 c2 08             	add    $0x8,%edx
  1090fb:	89 16                	mov    %edx,(%rsi)
  1090fd:	48 03 4e 10          	add    0x10(%rsi),%rcx
  109101:	eb 89                	jmp    10908c <_vfiprintf_r+0x142c>
  109103:	4d 89 e2             	mov    %r12,%r10
  109106:	e9 f5 f1 ff ff       	jmpq   108300 <_vfiprintf_r+0x6a0>
  10910b:	48 8b b5 88 fe ff ff 	mov    -0x178(%rbp),%rsi
  109112:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  109119:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  109120:	e8 8b 0a 00 00       	callq  109bb0 <__sfvwrite_r>
  109125:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  10912c:	00 00 00 00 
  109130:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  109137:	00 00 00 
  10913a:	85 c0                	test   %eax,%eax
  10913c:	0f 85 6d f9 ff ff    	jne    108aaf <_vfiprintf_r+0xe4f>
  109142:	2b 9d a8 fe ff ff    	sub    -0x158(%rbp),%ebx
  109148:	85 db                	test   %ebx,%ebx
  10914a:	0f 8e bc f6 ff ff    	jle    10880c <_vfiprintf_r+0xbac>
  109150:	e9 bc fc ff ff       	jmpq   108e11 <_vfiprintf_r+0x11b1>
  109155:	c6 85 bd fe ff ff 2d 	movb   $0x2d,-0x143(%rbp)
  10915c:	48 f7 d9             	neg    %rcx
  10915f:	45 89 f8             	mov    %r15d,%r8d
  109162:	b8 01 00 00 00       	mov    $0x1,%eax
  109167:	e9 97 f2 ff ff       	jmpq   108403 <_vfiprintf_r+0x7a3>
  10916c:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  109173:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  109177:	48 8d 51 08          	lea    0x8(%rcx),%rdx
  10917b:	48 89 56 08          	mov    %rdx,0x8(%rsi)
  10917f:	e9 08 ff ff ff       	jmpq   10908c <_vfiprintf_r+0x142c>
  109184:	41 f6 c7 40          	test   $0x40,%r15b
  109188:	0f 84 3a 02 00 00    	je     1093c8 <_vfiprintf_r+0x1768>
  10918e:	83 fa 2f             	cmp    $0x2f,%edx
  109191:	0f 87 bd 03 00 00    	ja     109554 <_vfiprintf_r+0x18f4>
  109197:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  10919e:	89 d1                	mov    %edx,%ecx
  1091a0:	83 c2 08             	add    $0x8,%edx
  1091a3:	89 17                	mov    %edx,(%rdi)
  1091a5:	48 03 4f 10          	add    0x10(%rdi),%rcx
  1091a9:	0f b7 09             	movzwl (%rcx),%ecx
  1091ac:	e9 de fe ff ff       	jmpq   10908f <_vfiprintf_r+0x142f>
  1091b1:	45 89 c7             	mov    %r8d,%r15d
  1091b4:	4c 8b ad 68 fe ff ff 	mov    -0x198(%rbp),%r13
  1091bb:	31 ff                	xor    %edi,%edi
  1091bd:	48 8d b5 44 ff ff ff 	lea    -0xbc(%rbp),%rsi
  1091c4:	41 81 e7 00 04 00 00 	and    $0x400,%r15d
  1091cb:	eb 20                	jmp    1091ed <_vfiprintf_r+0x158d>
  1091cd:	0f 1f 00             	nopl   (%rax)
  1091d0:	48 b8 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rax
  1091d7:	cc cc cc 
  1091da:	48 f7 e1             	mul    %rcx
  1091dd:	48 c1 ea 03          	shr    $0x3,%rdx
  1091e1:	48 83 f9 09          	cmp    $0x9,%rcx
  1091e5:	76 51                	jbe    109238 <_vfiprintf_r+0x15d8>
  1091e7:	48 89 d1             	mov    %rdx,%rcx
  1091ea:	4c 89 ce             	mov    %r9,%rsi
  1091ed:	48 b8 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rax
  1091f4:	cc cc cc 
  1091f7:	4c 8d 4e ff          	lea    -0x1(%rsi),%r9
  1091fb:	83 c7 01             	add    $0x1,%edi
  1091fe:	48 f7 e1             	mul    %rcx
  109201:	48 89 c8             	mov    %rcx,%rax
  109204:	48 c1 ea 03          	shr    $0x3,%rdx
  109208:	49 89 d4             	mov    %rdx,%r12
  10920b:	48 8d 14 92          	lea    (%rdx,%rdx,4),%rdx
  10920f:	48 01 d2             	add    %rdx,%rdx
  109212:	48 29 d0             	sub    %rdx,%rax
  109215:	83 c0 30             	add    $0x30,%eax
  109218:	88 46 ff             	mov    %al,-0x1(%rsi)
  10921b:	45 85 ff             	test   %r15d,%r15d
  10921e:	74 b0                	je     1091d0 <_vfiprintf_r+0x1570>
  109220:	41 0f be 55 00       	movsbl 0x0(%r13),%edx
  109225:	39 fa                	cmp    %edi,%edx
  109227:	75 a7                	jne    1091d0 <_vfiprintf_r+0x1570>
  109229:	80 fa 7f             	cmp    $0x7f,%dl
  10922c:	74 a2                	je     1091d0 <_vfiprintf_r+0x1570>
  10922e:	48 83 f9 09          	cmp    $0x9,%rcx
  109232:	0f 87 08 02 00 00    	ja     109440 <_vfiprintf_r+0x17e0>
  109238:	4c 89 ad 68 fe ff ff 	mov    %r13,-0x198(%rbp)
  10923f:	4d 89 cd             	mov    %r9,%r13
  109242:	e9 b1 f7 ff ff       	jmpq   1089f8 <_vfiprintf_r+0xd98>
  109247:	49 8b bd a0 00 00 00 	mov    0xa0(%r13),%rdi
  10924e:	e8 b4 3a 00 00       	callq  10cd07 <__retarget_lock_release_recursive>
  109253:	41 0f b7 45 10       	movzwl 0x10(%r13),%eax
  109258:	e9 7b f8 ff ff       	jmpq   108ad8 <_vfiprintf_r+0xe78>
  10925d:	41 0f be 46 01       	movsbl 0x1(%r14),%eax
  109262:	41 83 cf 20          	or     $0x20,%r15d
  109266:	49 83 c6 01          	add    $0x1,%r14
  10926a:	e9 82 eb ff ff       	jmpq   107df1 <_vfiprintf_r+0x191>
  10926f:	41 0f be 46 01       	movsbl 0x1(%r14),%eax
  109274:	41 81 cf 00 02 00 00 	or     $0x200,%r15d
  10927b:	49 83 c6 01          	add    $0x1,%r14
  10927f:	e9 6d eb ff ff       	jmpq   107df1 <_vfiprintf_r+0x191>
  109284:	4d 89 fd             	mov    %r15,%r13
  109287:	e9 34 f8 ff ff       	jmpq   108ac0 <_vfiprintf_r+0xe60>
  10928c:	4c 89 ef             	mov    %r13,%rdi
  10928f:	4c 89 95 80 fe ff ff 	mov    %r10,-0x180(%rbp)
  109296:	31 db                	xor    %ebx,%ebx
  109298:	e8 c3 82 ff ff       	callq  101560 <strlen>
  10929d:	4c 8b 95 80 fe ff ff 	mov    -0x180(%rbp),%r10
  1092a4:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%rbp)
  1092aa:	e9 a1 f1 ff ff       	jmpq   108450 <_vfiprintf_r+0x7f0>
  1092af:	48 83 bd d0 fe ff ff 	cmpq   $0x0,-0x130(%rbp)
  1092b6:	00 
  1092b7:	4c 8b ad 88 fe ff ff 	mov    -0x178(%rbp),%r13
  1092be:	0f 85 35 03 00 00    	jne    1095f9 <_vfiprintf_r+0x1999>
  1092c4:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  1092cb:	00 00 00 
  1092ce:	e9 ed f7 ff ff       	jmpq   108ac0 <_vfiprintf_r+0xe60>
  1092d3:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  1092da:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  1092de:	48 8d 42 08          	lea    0x8(%rdx),%rax
  1092e2:	48 89 47 08          	mov    %rax,0x8(%rdi)
  1092e6:	e9 d5 fa ff ff       	jmpq   108dc0 <_vfiprintf_r+0x1160>
  1092eb:	41 f7 c0 00 02 00 00 	test   $0x200,%r8d
  1092f2:	0f 84 35 02 00 00    	je     10952d <_vfiprintf_r+0x18cd>
  1092f8:	83 f8 2f             	cmp    $0x2f,%eax
  1092fb:	0f 87 7f 03 00 00    	ja     109680 <_vfiprintf_r+0x1a20>
  109301:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  109308:	89 c2                	mov    %eax,%edx
  10930a:	83 c0 08             	add    $0x8,%eax
  10930d:	89 07                	mov    %eax,(%rdi)
  10930f:	48 03 57 10          	add    0x10(%rdi),%rdx
  109313:	0f b6 0a             	movzbl (%rdx),%ecx
  109316:	b8 01 00 00 00       	mov    $0x1,%eax
  10931b:	e9 dc f0 ff ff       	jmpq   1083fc <_vfiprintf_r+0x79c>
  109320:	41 f7 c7 00 02 00 00 	test   $0x200,%r15d
  109327:	0f 84 da 01 00 00    	je     109507 <_vfiprintf_r+0x18a7>
  10932d:	83 f8 2f             	cmp    $0x2f,%eax
  109330:	0f 87 02 03 00 00    	ja     109638 <_vfiprintf_r+0x19d8>
  109336:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  10933d:	89 c2                	mov    %eax,%edx
  10933f:	83 c0 08             	add    $0x8,%eax
  109342:	89 07                	mov    %eax,(%rdi)
  109344:	48 03 57 10          	add    0x10(%rdi),%rdx
  109348:	48 0f be 0a          	movsbq (%rdx),%rcx
  10934c:	48 89 c8             	mov    %rcx,%rax
  10934f:	e9 2a f0 ff ff       	jmpq   10837e <_vfiprintf_r+0x71e>
  109354:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  10935b:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  10935f:	48 8d 42 08          	lea    0x8(%rdx),%rax
  109363:	48 89 46 08          	mov    %rax,0x8(%rsi)
  109367:	e9 0c f0 ff ff       	jmpq   108378 <_vfiprintf_r+0x718>
  10936c:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  109373:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
  109377:	48 8d 51 08          	lea    0x8(%rcx),%rdx
  10937b:	48 89 57 08          	mov    %rdx,0x8(%rdi)
  10937f:	e9 08 fd ff ff       	jmpq   10908c <_vfiprintf_r+0x142c>
  109384:	41 f6 c7 40          	test   $0x40,%r15b
  109388:	0f 85 4c 01 00 00    	jne    1094da <_vfiprintf_r+0x187a>
  10938e:	41 81 e7 00 02 00 00 	and    $0x200,%r15d
  109395:	0f 84 fd 02 00 00    	je     109698 <_vfiprintf_r+0x1a38>
  10939b:	83 f8 2f             	cmp    $0x2f,%eax
  10939e:	0f 87 c7 03 00 00    	ja     10976b <_vfiprintf_r+0x1b0b>
  1093a4:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  1093ab:	89 c2                	mov    %eax,%edx
  1093ad:	83 c0 08             	add    $0x8,%eax
  1093b0:	89 07                	mov    %eax,(%rdi)
  1093b2:	48 03 57 10          	add    0x10(%rdi),%rdx
  1093b6:	48 8b 02             	mov    (%rdx),%rax
  1093b9:	0f b6 b5 a0 fe ff ff 	movzbl -0x160(%rbp),%esi
  1093c0:	40 88 30             	mov    %sil,(%rax)
  1093c3:	e9 70 e9 ff ff       	jmpq   107d38 <_vfiprintf_r+0xd8>
  1093c8:	41 f7 c7 00 02 00 00 	test   $0x200,%r15d
  1093cf:	0f 84 e3 00 00 00    	je     1094b8 <_vfiprintf_r+0x1858>
  1093d5:	83 fa 2f             	cmp    $0x2f,%edx
  1093d8:	0f 87 49 03 00 00    	ja     109727 <_vfiprintf_r+0x1ac7>
  1093de:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  1093e5:	89 d1                	mov    %edx,%ecx
  1093e7:	83 c2 08             	add    $0x8,%edx
  1093ea:	89 17                	mov    %edx,(%rdi)
  1093ec:	48 03 4f 10          	add    0x10(%rdi),%rcx
  1093f0:	0f b6 09             	movzbl (%rcx),%ecx
  1093f3:	e9 97 fc ff ff       	jmpq   10908f <_vfiprintf_r+0x142f>
  1093f8:	41 f7 c7 00 02 00 00 	test   $0x200,%r15d
  1093ff:	0f 84 91 00 00 00    	je     109496 <_vfiprintf_r+0x1836>
  109405:	83 f8 2f             	cmp    $0x2f,%eax
  109408:	0f 87 01 03 00 00    	ja     10970f <_vfiprintf_r+0x1aaf>
  10940e:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  109415:	89 c2                	mov    %eax,%edx
  109417:	83 c0 08             	add    $0x8,%eax
  10941a:	89 07                	mov    %eax,(%rdi)
  10941c:	48 03 57 10          	add    0x10(%rdi),%rdx
  109420:	0f b6 0a             	movzbl (%rdx),%ecx
  109423:	e9 9b f9 ff ff       	jmpq   108dc3 <_vfiprintf_r+0x1163>
  109428:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  10942f:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  109433:	48 8d 42 08          	lea    0x8(%rdx),%rax
  109437:	48 89 47 08          	mov    %rax,0x8(%rdi)
  10943b:	e9 a7 ee ff ff       	jmpq   1082e7 <_vfiprintf_r+0x687>
  109440:	48 8b 95 48 fe ff ff 	mov    -0x1b8(%rbp),%rdx
  109447:	48 8b b5 50 fe ff ff 	mov    -0x1b0(%rbp),%rsi
  10944e:	4c 89 95 78 fe ff ff 	mov    %r10,-0x188(%rbp)
  109455:	44 89 85 80 fe ff ff 	mov    %r8d,-0x180(%rbp)
  10945c:	49 29 d1             	sub    %rdx,%r9
  10945f:	4c 89 cf             	mov    %r9,%rdi
  109462:	4c 89 8d a8 fe ff ff 	mov    %r9,-0x158(%rbp)
  109469:	e8 72 81 ff ff       	callq  1015e0 <strncpy>
  10946e:	41 80 7d 01 01       	cmpb   $0x1,0x1(%r13)
  109473:	4c 89 e2             	mov    %r12,%rdx
  109476:	4c 8b 8d a8 fe ff ff 	mov    -0x158(%rbp),%r9
  10947d:	49 83 dd ff          	sbb    $0xffffffffffffffff,%r13
  109481:	44 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%r8d
  109488:	4c 8b 95 78 fe ff ff 	mov    -0x188(%rbp),%r10
  10948f:	31 ff                	xor    %edi,%edi
  109491:	e9 51 fd ff ff       	jmpq   1091e7 <_vfiprintf_r+0x1587>
  109496:	83 f8 2f             	cmp    $0x2f,%eax
  109499:	0f 87 3c 02 00 00    	ja     1096db <_vfiprintf_r+0x1a7b>
  10949f:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  1094a6:	89 c2                	mov    %eax,%edx
  1094a8:	83 c0 08             	add    $0x8,%eax
  1094ab:	48 03 57 10          	add    0x10(%rdi),%rdx
  1094af:	89 07                	mov    %eax,(%rdi)
  1094b1:	8b 0a                	mov    (%rdx),%ecx
  1094b3:	e9 0b f9 ff ff       	jmpq   108dc3 <_vfiprintf_r+0x1163>
  1094b8:	83 fa 2f             	cmp    $0x2f,%edx
  1094bb:	0f 87 34 02 00 00    	ja     1096f5 <_vfiprintf_r+0x1a95>
  1094c1:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  1094c8:	89 d1                	mov    %edx,%ecx
  1094ca:	83 c2 08             	add    $0x8,%edx
  1094cd:	48 03 4f 10          	add    0x10(%rdi),%rcx
  1094d1:	89 17                	mov    %edx,(%rdi)
  1094d3:	8b 09                	mov    (%rcx),%ecx
  1094d5:	e9 b5 fb ff ff       	jmpq   10908f <_vfiprintf_r+0x142f>
  1094da:	83 f8 2f             	cmp    $0x2f,%eax
  1094dd:	0f 87 85 01 00 00    	ja     109668 <_vfiprintf_r+0x1a08>
  1094e3:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  1094ea:	89 c2                	mov    %eax,%edx
  1094ec:	83 c0 08             	add    $0x8,%eax
  1094ef:	89 07                	mov    %eax,(%rdi)
  1094f1:	48 03 57 10          	add    0x10(%rdi),%rdx
  1094f5:	48 8b 02             	mov    (%rdx),%rax
  1094f8:	0f b7 bd a0 fe ff ff 	movzwl -0x160(%rbp),%edi
  1094ff:	66 89 38             	mov    %di,(%rax)
  109502:	e9 31 e8 ff ff       	jmpq   107d38 <_vfiprintf_r+0xd8>
  109507:	83 f8 2f             	cmp    $0x2f,%eax
  10950a:	0f 87 b3 01 00 00    	ja     1096c3 <_vfiprintf_r+0x1a63>
  109510:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  109517:	89 c2                	mov    %eax,%edx
  109519:	83 c0 08             	add    $0x8,%eax
  10951c:	89 07                	mov    %eax,(%rdi)
  10951e:	48 03 57 10          	add    0x10(%rdi),%rdx
  109522:	48 63 0a             	movslq (%rdx),%rcx
  109525:	48 89 c8             	mov    %rcx,%rax
  109528:	e9 51 ee ff ff       	jmpq   10837e <_vfiprintf_r+0x71e>
  10952d:	83 f8 2f             	cmp    $0x2f,%eax
  109530:	0f 87 1a 01 00 00    	ja     109650 <_vfiprintf_r+0x19f0>
  109536:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  10953d:	89 c2                	mov    %eax,%edx
  10953f:	83 c0 08             	add    $0x8,%eax
  109542:	89 07                	mov    %eax,(%rdi)
  109544:	48 03 57 10          	add    0x10(%rdi),%rdx
  109548:	8b 0a                	mov    (%rdx),%ecx
  10954a:	b8 01 00 00 00       	mov    $0x1,%eax
  10954f:	e9 a8 ee ff ff       	jmpq   1083fc <_vfiprintf_r+0x79c>
  109554:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  10955b:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  10955f:	48 8d 51 08          	lea    0x8(%rcx),%rdx
  109563:	48 89 56 08          	mov    %rdx,0x8(%rsi)
  109567:	e9 3d fc ff ff       	jmpq   1091a9 <_vfiprintf_r+0x1549>
  10956c:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  109573:	89 c2                	mov    %eax,%edx
  109575:	83 c0 08             	add    $0x8,%eax
  109578:	89 07                	mov    %eax,(%rdi)
  10957a:	48 03 57 10          	add    0x10(%rdi),%rdx
  10957e:	e9 64 ed ff ff       	jmpq   1082e7 <_vfiprintf_r+0x687>
  109583:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  10958a:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  10958e:	48 8d 42 08          	lea    0x8(%rdx),%rax
  109592:	48 89 46 08          	mov    %rax,0x8(%rsi)
  109596:	e9 13 f9 ff ff       	jmpq   108eae <_vfiprintf_r+0x124e>
  10959b:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  1095a2:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  1095a6:	48 8d 42 08          	lea    0x8(%rdx),%rax
  1095aa:	48 89 46 08          	mov    %rax,0x8(%rsi)
  1095ae:	e9 c9 f8 ff ff       	jmpq   108e7c <_vfiprintf_r+0x121c>
  1095b3:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  1095ba:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  1095be:	48 8d 42 08          	lea    0x8(%rdx),%rax
  1095c2:	48 89 46 08          	mov    %rax,0x8(%rsi)
  1095c6:	e9 80 f8 ff ff       	jmpq   108e4b <_vfiprintf_r+0x11eb>
  1095cb:	49 8b bd a0 00 00 00 	mov    0xa0(%r13),%rdi
  1095d2:	e8 30 37 00 00       	callq  10cd07 <__retarget_lock_release_recursive>
  1095d7:	e9 be ea ff ff       	jmpq   10809a <_vfiprintf_r+0x43a>
  1095dc:	89 9d a8 fe ff ff    	mov    %ebx,-0x158(%rbp)
  1095e2:	31 db                	xor    %ebx,%ebx
  1095e4:	e9 67 ee ff ff       	jmpq   108450 <_vfiprintf_r+0x7f0>
  1095e9:	41 89 fb             	mov    %edi,%r11d
  1095ec:	e9 c3 f5 ff ff       	jmpq   108bb4 <_vfiprintf_r+0xf54>
  1095f1:	8d 7e 01             	lea    0x1(%rsi),%edi
  1095f4:	e9 df f2 ff ff       	jmpq   1088d8 <_vfiprintf_r+0xc78>
  1095f9:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  109600:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  109607:	4c 89 ee             	mov    %r13,%rsi
  10960a:	e8 a1 05 00 00       	callq  109bb0 <__sfvwrite_r>
  10960f:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  109616:	00 00 00 00 
  10961a:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  109621:	00 00 00 
  109624:	85 c0                	test   %eax,%eax
  109626:	0f 84 98 fc ff ff    	je     1092c4 <_vfiprintf_r+0x1664>
  10962c:	e9 8f f4 ff ff       	jmpq   108ac0 <_vfiprintf_r+0xe60>
  109631:	89 f7                	mov    %esi,%edi
  109633:	e9 87 f0 ff ff       	jmpq   1086bf <_vfiprintf_r+0xa5f>
  109638:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  10963f:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  109643:	48 8d 42 08          	lea    0x8(%rdx),%rax
  109647:	48 89 46 08          	mov    %rax,0x8(%rsi)
  10964b:	e9 f8 fc ff ff       	jmpq   109348 <_vfiprintf_r+0x16e8>
  109650:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  109657:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  10965b:	48 8d 42 08          	lea    0x8(%rdx),%rax
  10965f:	48 89 46 08          	mov    %rax,0x8(%rsi)
  109663:	e9 e0 fe ff ff       	jmpq   109548 <_vfiprintf_r+0x18e8>
  109668:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  10966f:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  109673:	48 8d 42 08          	lea    0x8(%rdx),%rax
  109677:	48 89 46 08          	mov    %rax,0x8(%rsi)
  10967b:	e9 75 fe ff ff       	jmpq   1094f5 <_vfiprintf_r+0x1895>
  109680:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  109687:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  10968b:	48 8d 42 08          	lea    0x8(%rdx),%rax
  10968f:	48 89 46 08          	mov    %rax,0x8(%rsi)
  109693:	e9 7b fc ff ff       	jmpq   109313 <_vfiprintf_r+0x16b3>
  109698:	83 f8 2f             	cmp    $0x2f,%eax
  10969b:	0f 87 e2 00 00 00    	ja     109783 <_vfiprintf_r+0x1b23>
  1096a1:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  1096a8:	89 c2                	mov    %eax,%edx
  1096aa:	83 c0 08             	add    $0x8,%eax
  1096ad:	89 07                	mov    %eax,(%rdi)
  1096af:	48 03 57 10          	add    0x10(%rdi),%rdx
  1096b3:	48 8b 02             	mov    (%rdx),%rax
  1096b6:	8b bd a0 fe ff ff    	mov    -0x160(%rbp),%edi
  1096bc:	89 38                	mov    %edi,(%rax)
  1096be:	e9 75 e6 ff ff       	jmpq   107d38 <_vfiprintf_r+0xd8>
  1096c3:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  1096ca:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  1096ce:	48 8d 42 08          	lea    0x8(%rdx),%rax
  1096d2:	48 89 46 08          	mov    %rax,0x8(%rsi)
  1096d6:	e9 47 fe ff ff       	jmpq   109522 <_vfiprintf_r+0x18c2>
  1096db:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  1096e2:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  1096e6:	48 8d 42 08          	lea    0x8(%rdx),%rax
  1096ea:	48 89 46 08          	mov    %rax,0x8(%rsi)
  1096ee:	8b 0a                	mov    (%rdx),%ecx
  1096f0:	e9 ce f6 ff ff       	jmpq   108dc3 <_vfiprintf_r+0x1163>
  1096f5:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  1096fc:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  109700:	48 8d 51 08          	lea    0x8(%rcx),%rdx
  109704:	48 89 56 08          	mov    %rdx,0x8(%rsi)
  109708:	8b 09                	mov    (%rcx),%ecx
  10970a:	e9 80 f9 ff ff       	jmpq   10908f <_vfiprintf_r+0x142f>
  10970f:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  109716:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  10971a:	48 8d 42 08          	lea    0x8(%rdx),%rax
  10971e:	48 89 46 08          	mov    %rax,0x8(%rsi)
  109722:	e9 f9 fc ff ff       	jmpq   109420 <_vfiprintf_r+0x17c0>
  109727:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  10972e:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  109732:	48 8d 51 08          	lea    0x8(%rcx),%rdx
  109736:	48 89 56 08          	mov    %rdx,0x8(%rsi)
  10973a:	e9 b1 fc ff ff       	jmpq   1093f0 <_vfiprintf_r+0x1790>
  10973f:	41 f6 85 b0 00 00 00 	testb  $0x1,0xb0(%r13)
  109746:	01 
  109747:	75 13                	jne    10975c <_vfiprintf_r+0x1afc>
  109749:	41 f6 45 11 02       	testb  $0x2,0x11(%r13)
  10974e:	75 0c                	jne    10975c <_vfiprintf_r+0x1afc>
  109750:	49 8b bd a0 00 00 00 	mov    0xa0(%r13),%rdi
  109757:	e8 ab 35 00 00       	callq  10cd07 <__retarget_lock_release_recursive>
  10975c:	c7 85 a0 fe ff ff ff 	movl   $0xffffffff,-0x160(%rbp)
  109763:	ff ff ff 
  109766:	e9 75 f3 ff ff       	jmpq   108ae0 <_vfiprintf_r+0xe80>
  10976b:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  109772:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  109776:	48 8d 42 08          	lea    0x8(%rdx),%rax
  10977a:	48 89 46 08          	mov    %rax,0x8(%rsi)
  10977e:	e9 33 fc ff ff       	jmpq   1093b6 <_vfiprintf_r+0x1756>
  109783:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  10978a:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  10978e:	48 8d 42 08          	lea    0x8(%rdx),%rax
  109792:	48 89 46 08          	mov    %rax,0x8(%rsi)
  109796:	e9 18 ff ff ff       	jmpq   1096b3 <_vfiprintf_r+0x1a53>
  10979b:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  1097a2:	8b 17                	mov    (%rdi),%edx
  1097a4:	83 fa 2f             	cmp    $0x2f,%edx
  1097a7:	77 24                	ja     1097cd <_vfiprintf_r+0x1b6d>
  1097a9:	89 d0                	mov    %edx,%eax
  1097ab:	83 c2 08             	add    $0x8,%edx
  1097ae:	48 03 47 10          	add    0x10(%rdi),%rax
  1097b2:	89 17                	mov    %edx,(%rdi)
  1097b4:	8b 18                	mov    (%rax),%ebx
  1097b6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  1097bb:	85 db                	test   %ebx,%ebx
  1097bd:	0f 48 d8             	cmovs  %eax,%ebx
  1097c0:	41 0f be 46 01       	movsbl 0x1(%r14),%eax
  1097c5:	49 89 ce             	mov    %rcx,%r14
  1097c8:	e9 24 e6 ff ff       	jmpq   107df1 <_vfiprintf_r+0x191>
  1097cd:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  1097d4:	48 8b 46 08          	mov    0x8(%rsi),%rax
  1097d8:	48 8d 50 08          	lea    0x8(%rax),%rdx
  1097dc:	48 89 56 08          	mov    %rdx,0x8(%rsi)
  1097e0:	eb d2                	jmp    1097b4 <_vfiprintf_r+0x1b54>
  1097e2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1097e9:	00 00 00 
  1097ec:	0f 1f 40 00          	nopl   0x0(%rax)

00000000001097f0 <__sbprintf>:
  1097f0:	55                   	push   %rbp
  1097f1:	48 89 e5             	mov    %rsp,%rbp
  1097f4:	41 56                	push   %r14
  1097f6:	49 89 ce             	mov    %rcx,%r14
  1097f9:	41 55                	push   %r13
  1097fb:	49 89 fd             	mov    %rdi,%r13
  1097fe:	48 8d bd c0 fb ff ff 	lea    -0x440(%rbp),%rdi
  109805:	41 54                	push   %r12
  109807:	49 89 d4             	mov    %rdx,%r12
  10980a:	53                   	push   %rbx
  10980b:	48 89 f3             	mov    %rsi,%rbx
  10980e:	48 81 ec c0 04 00 00 	sub    $0x4c0,%rsp
  109815:	0f b7 46 10          	movzwl 0x10(%rsi),%eax
  109819:	c7 85 2c fb ff ff 00 	movl   $0x400,-0x4d4(%rbp)
  109820:	04 00 00 
  109823:	c7 85 40 fb ff ff 00 	movl   $0x400,-0x4c0(%rbp)
  10982a:	04 00 00 
  10982d:	c7 85 48 fb ff ff 00 	movl   $0x0,-0x4b8(%rbp)
  109834:	00 00 00 
  109837:	83 e0 fd             	and    $0xfffffffd,%eax
  10983a:	66 89 85 30 fb ff ff 	mov    %ax,-0x4d0(%rbp)
  109841:	8b 86 b0 00 00 00    	mov    0xb0(%rsi),%eax
  109847:	89 85 d0 fb ff ff    	mov    %eax,-0x430(%rbp)
  10984d:	0f b7 46 12          	movzwl 0x12(%rsi),%eax
  109851:	66 89 85 32 fb ff ff 	mov    %ax,-0x4ce(%rbp)
  109858:	48 8b 46 30          	mov    0x30(%rsi),%rax
  10985c:	48 89 85 50 fb ff ff 	mov    %rax,-0x4b0(%rbp)
  109863:	48 8b 46 40          	mov    0x40(%rsi),%rax
  109867:	48 89 85 60 fb ff ff 	mov    %rax,-0x4a0(%rbp)
  10986e:	48 8d 85 e0 fb ff ff 	lea    -0x420(%rbp),%rax
  109875:	48 89 85 20 fb ff ff 	mov    %rax,-0x4e0(%rbp)
  10987c:	48 89 85 38 fb ff ff 	mov    %rax,-0x4c8(%rbp)
  109883:	e8 50 34 00 00       	callq  10ccd8 <__retarget_lock_init_recursive>
  109888:	4c 89 e2             	mov    %r12,%rdx
  10988b:	4c 89 f1             	mov    %r14,%rcx
  10988e:	4c 89 ef             	mov    %r13,%rdi
  109891:	48 8d b5 20 fb ff ff 	lea    -0x4e0(%rbp),%rsi
  109898:	e8 c3 e3 ff ff       	callq  107c60 <_vfiprintf_r>
  10989d:	41 89 c4             	mov    %eax,%r12d
  1098a0:	85 c0                	test   %eax,%eax
  1098a2:	78 1a                	js     1098be <__sbprintf+0xce>
  1098a4:	48 8d b5 20 fb ff ff 	lea    -0x4e0(%rbp),%rsi
  1098ab:	4c 89 ef             	mov    %r13,%rdi
  1098ae:	e8 4d cc ff ff       	callq  106500 <_fflush_r>
  1098b3:	85 c0                	test   %eax,%eax
  1098b5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  1098ba:	44 0f 45 e0          	cmovne %eax,%r12d
  1098be:	f6 85 30 fb ff ff 40 	testb  $0x40,-0x4d0(%rbp)
  1098c5:	74 05                	je     1098cc <__sbprintf+0xdc>
  1098c7:	66 83 4b 10 40       	orw    $0x40,0x10(%rbx)
  1098cc:	48 8b bd c0 fb ff ff 	mov    -0x440(%rbp),%rdi
  1098d3:	e8 21 34 00 00       	callq  10ccf9 <__retarget_lock_close_recursive>
  1098d8:	48 81 c4 c0 04 00 00 	add    $0x4c0,%rsp
  1098df:	44 89 e0             	mov    %r12d,%eax
  1098e2:	5b                   	pop    %rbx
  1098e3:	41 5c                	pop    %r12
  1098e5:	41 5d                	pop    %r13
  1098e7:	41 5e                	pop    %r14
  1098e9:	5d                   	pop    %rbp
  1098ea:	c3                   	retq   
  1098eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000001098f0 <_write_r>:
  1098f0:	55                   	push   %rbp
  1098f1:	31 c0                	xor    %eax,%eax
  1098f3:	48 89 e5             	mov    %rsp,%rbp
  1098f6:	53                   	push   %rbx
  1098f7:	48 89 fb             	mov    %rdi,%rbx
  1098fa:	89 f7                	mov    %esi,%edi
  1098fc:	48 89 d6             	mov    %rdx,%rsi
  1098ff:	48 89 ca             	mov    %rcx,%rdx
  109902:	48 83 ec 08          	sub    $0x8,%rsp
  109906:	c7 05 24 6b 01 00 00 	movl   $0x0,0x16b24(%rip)        # 120434 <errno>
  10990d:	00 00 00 
  109910:	e8 fd 1c 00 00       	callq  10b612 <_write>
  109915:	4c 63 c0             	movslq %eax,%r8
  109918:	83 f8 ff             	cmp    $0xffffffff,%eax
  10991b:	74 13                	je     109930 <_write_r+0x40>
  10991d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  109921:	4c 89 c0             	mov    %r8,%rax
  109924:	c9                   	leaveq 
  109925:	c3                   	retq   
  109926:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10992d:	00 00 00 
  109930:	8b 05 fe 6a 01 00    	mov    0x16afe(%rip),%eax        # 120434 <errno>
  109936:	85 c0                	test   %eax,%eax
  109938:	74 e3                	je     10991d <_write_r+0x2d>
  10993a:	89 03                	mov    %eax,(%rbx)
  10993c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  109940:	4c 89 c0             	mov    %r8,%rax
  109943:	c9                   	leaveq 
  109944:	c3                   	retq   
  109945:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10994c:	00 00 00 
  10994f:	90                   	nop

0000000000109950 <__assert_func>:
  109950:	55                   	push   %rbp
  109951:	49 89 fb             	mov    %rdi,%r11
  109954:	41 89 f0             	mov    %esi,%r8d
  109957:	49 89 ca             	mov    %rcx,%r10
  10995a:	41 b9 48 15 11 00    	mov    $0x111548,%r9d
  109960:	48 89 e5             	mov    %rsp,%rbp
  109963:	48 85 d2             	test   %rdx,%rdx
  109966:	74 27                	je     10998f <__assert_func+0x3f>
  109968:	48 8b 05 89 ea 03 00 	mov    0x3ea89(%rip),%rax        # 1483f8 <_impure_ptr>
  10996f:	48 83 ec 08          	sub    $0x8,%rsp
  109973:	4c 89 d9             	mov    %r11,%rcx
  109976:	be 40 11 11 00       	mov    $0x111140,%esi
  10997b:	48 8b 78 18          	mov    0x18(%rax),%rdi
  10997f:	52                   	push   %rdx
  109980:	31 c0                	xor    %eax,%eax
  109982:	4c 89 d2             	mov    %r10,%rdx
  109985:	e8 36 01 00 00       	callq  109ac0 <fiprintf>
  10998a:	e8 41 0f 00 00       	callq  10a8d0 <abort>
  10998f:	ba f3 13 11 00       	mov    $0x1113f3,%edx
  109994:	49 89 d1             	mov    %rdx,%r9
  109997:	eb cf                	jmp    109968 <__assert_func+0x18>
  109999:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000001099a0 <_calloc_r>:
  1099a0:	55                   	push   %rbp
  1099a1:	48 0f af f2          	imul   %rdx,%rsi
  1099a5:	48 89 e5             	mov    %rsp,%rbp
  1099a8:	41 54                	push   %r12
  1099aa:	48 83 ec 08          	sub    $0x8,%rsp
  1099ae:	e8 ad 71 ff ff       	callq  100b60 <_malloc_r>
  1099b3:	49 89 c4             	mov    %rax,%r12
  1099b6:	48 85 c0             	test   %rax,%rax
  1099b9:	74 33                	je     1099ee <_calloc_r+0x4e>
  1099bb:	48 8b 50 f8          	mov    -0x8(%rax),%rdx
  1099bf:	48 83 e2 fc          	and    $0xfffffffffffffffc,%rdx
  1099c3:	48 83 ea 08          	sub    $0x8,%rdx
  1099c7:	48 83 fa 48          	cmp    $0x48,%rdx
  1099cb:	0f 87 7f 00 00 00    	ja     109a50 <_calloc_r+0xb0>
  1099d1:	48 83 fa 27          	cmp    $0x27,%rdx
  1099d5:	77 29                	ja     109a00 <_calloc_r+0x60>
  1099d7:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  1099de:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  1099e5:	00 
  1099e6:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  1099ed:	00 
  1099ee:	4c 89 e0             	mov    %r12,%rax
  1099f1:	4c 8b 65 f8          	mov    -0x8(%rbp),%r12
  1099f5:	c9                   	leaveq 
  1099f6:	c3                   	retq   
  1099f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  1099fe:	00 00 
  109a00:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  109a07:	48 8d 40 10          	lea    0x10(%rax),%rax
  109a0b:	48 c7 40 f8 00 00 00 	movq   $0x0,-0x8(%rax)
  109a12:	00 
  109a13:	48 83 fa 37          	cmp    $0x37,%rdx
  109a17:	76 be                	jbe    1099d7 <_calloc_r+0x37>
  109a19:	49 c7 44 24 10 00 00 	movq   $0x0,0x10(%r12)
  109a20:	00 00 
  109a22:	49 8d 44 24 20       	lea    0x20(%r12),%rax
  109a27:	49 c7 44 24 18 00 00 	movq   $0x0,0x18(%r12)
  109a2e:	00 00 
  109a30:	48 83 fa 48          	cmp    $0x48,%rdx
  109a34:	75 a1                	jne    1099d7 <_calloc_r+0x37>
  109a36:	49 c7 44 24 20 00 00 	movq   $0x0,0x20(%r12)
  109a3d:	00 00 
  109a3f:	49 8d 44 24 30       	lea    0x30(%r12),%rax
  109a44:	49 c7 44 24 28 00 00 	movq   $0x0,0x28(%r12)
  109a4b:	00 00 
  109a4d:	eb 88                	jmp    1099d7 <_calloc_r+0x37>
  109a4f:	90                   	nop
  109a50:	31 f6                	xor    %esi,%esi
  109a52:	48 89 c7             	mov    %rax,%rdi
  109a55:	e8 d6 66 ff ff       	callq  100130 <memset>
  109a5a:	4c 89 e0             	mov    %r12,%rax
  109a5d:	4c 8b 65 f8          	mov    -0x8(%rbp),%r12
  109a61:	c9                   	leaveq 
  109a62:	c3                   	retq   
  109a63:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  109a6a:	00 00 00 
  109a6d:	0f 1f 00             	nopl   (%rax)

0000000000109a70 <_close_r>:
  109a70:	55                   	push   %rbp
  109a71:	31 c0                	xor    %eax,%eax
  109a73:	48 89 e5             	mov    %rsp,%rbp
  109a76:	53                   	push   %rbx
  109a77:	48 89 fb             	mov    %rdi,%rbx
  109a7a:	89 f7                	mov    %esi,%edi
  109a7c:	48 83 ec 08          	sub    $0x8,%rsp
  109a80:	c7 05 aa 69 01 00 00 	movl   $0x0,0x169aa(%rip)        # 120434 <errno>
  109a87:	00 00 00 
  109a8a:	e8 d3 1b 00 00       	callq  10b662 <_close>
  109a8f:	83 f8 ff             	cmp    $0xffffffff,%eax
  109a92:	74 0c                	je     109aa0 <_close_r+0x30>
  109a94:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  109a98:	c9                   	leaveq 
  109a99:	c3                   	retq   
  109a9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  109aa0:	8b 15 8e 69 01 00    	mov    0x1698e(%rip),%edx        # 120434 <errno>
  109aa6:	85 d2                	test   %edx,%edx
  109aa8:	74 ea                	je     109a94 <_close_r+0x24>
  109aaa:	89 13                	mov    %edx,(%rbx)
  109aac:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  109ab0:	c9                   	leaveq 
  109ab1:	c3                   	retq   
  109ab2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  109ab9:	00 00 00 
  109abc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000109ac0 <fiprintf>:
  109ac0:	55                   	push   %rbp
  109ac1:	49 89 fa             	mov    %rdi,%r10
  109ac4:	49 89 f3             	mov    %rsi,%r11
  109ac7:	48 89 e5             	mov    %rsp,%rbp
  109aca:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  109ad1:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  109ad8:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  109adf:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  109ae6:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  109aed:	84 c0                	test   %al,%al
  109aef:	74 20                	je     109b11 <fiprintf+0x51>
  109af1:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  109af5:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  109af9:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  109afd:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  109b01:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  109b05:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  109b09:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  109b0d:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  109b11:	48 8d 45 10          	lea    0x10(%rbp),%rax
  109b15:	48 8b 3d dc e8 03 00 	mov    0x3e8dc(%rip),%rdi        # 1483f8 <_impure_ptr>
  109b1c:	4c 89 da             	mov    %r11,%rdx
  109b1f:	4c 89 d6             	mov    %r10,%rsi
  109b22:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  109b29:	48 8d 8d 38 ff ff ff 	lea    -0xc8(%rbp),%rcx
  109b30:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  109b37:	c7 85 38 ff ff ff 10 	movl   $0x10,-0xc8(%rbp)
  109b3e:	00 00 00 
  109b41:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  109b48:	00 00 00 
  109b4b:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  109b52:	e8 09 e1 ff ff       	callq  107c60 <_vfiprintf_r>
  109b57:	c9                   	leaveq 
  109b58:	c3                   	retq   
  109b59:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000109b60 <_fstat_r>:
  109b60:	55                   	push   %rbp
  109b61:	31 c0                	xor    %eax,%eax
  109b63:	48 89 e5             	mov    %rsp,%rbp
  109b66:	53                   	push   %rbx
  109b67:	48 89 fb             	mov    %rdi,%rbx
  109b6a:	89 f7                	mov    %esi,%edi
  109b6c:	48 89 d6             	mov    %rdx,%rsi
  109b6f:	48 83 ec 08          	sub    $0x8,%rsp
  109b73:	c7 05 b7 68 01 00 00 	movl   $0x0,0x168b7(%rip)        # 120434 <errno>
  109b7a:	00 00 00 
  109b7d:	e8 09 31 00 00       	callq  10cc8b <_fstat>
  109b82:	83 f8 ff             	cmp    $0xffffffff,%eax
  109b85:	74 09                	je     109b90 <_fstat_r+0x30>
  109b87:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  109b8b:	c9                   	leaveq 
  109b8c:	c3                   	retq   
  109b8d:	0f 1f 00             	nopl   (%rax)
  109b90:	8b 15 9e 68 01 00    	mov    0x1689e(%rip),%edx        # 120434 <errno>
  109b96:	85 d2                	test   %edx,%edx
  109b98:	74 ed                	je     109b87 <_fstat_r+0x27>
  109b9a:	89 13                	mov    %edx,(%rbx)
  109b9c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  109ba0:	c9                   	leaveq 
  109ba1:	c3                   	retq   
  109ba2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  109ba9:	00 00 00 
  109bac:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000109bb0 <__sfvwrite_r>:
  109bb0:	55                   	push   %rbp
  109bb1:	48 89 e5             	mov    %rsp,%rbp
  109bb4:	41 57                	push   %r15
  109bb6:	41 56                	push   %r14
  109bb8:	41 55                	push   %r13
  109bba:	41 54                	push   %r12
  109bbc:	53                   	push   %rbx
  109bbd:	48 83 ec 38          	sub    $0x38,%rsp
  109bc1:	48 83 7a 10 00       	cmpq   $0x0,0x10(%rdx)
  109bc6:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  109bca:	74 71                	je     109c3d <__sfvwrite_r+0x8d>
  109bcc:	48 89 f3             	mov    %rsi,%rbx
  109bcf:	0f b7 76 10          	movzwl 0x10(%rsi),%esi
  109bd3:	49 89 d6             	mov    %rdx,%r14
  109bd6:	40 f6 c6 08          	test   $0x8,%sil
  109bda:	74 74                	je     109c50 <__sfvwrite_r+0xa0>
  109bdc:	48 83 7b 18 00       	cmpq   $0x0,0x18(%rbx)
  109be1:	74 6d                	je     109c50 <__sfvwrite_r+0xa0>
  109be3:	4d 8b 26             	mov    (%r14),%r12
  109be6:	40 f6 c6 02          	test   $0x2,%sil
  109bea:	0f 84 85 00 00 00    	je     109c75 <__sfvwrite_r+0xc5>
  109bf0:	45 31 ed             	xor    %r13d,%r13d
  109bf3:	45 31 ff             	xor    %r15d,%r15d
  109bf6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  109bfd:	00 00 00 
  109c00:	4d 85 ff             	test   %r15,%r15
  109c03:	0f 84 07 01 00 00    	je     109d10 <__sfvwrite_r+0x160>
  109c09:	b9 00 fc ff 7f       	mov    $0x7ffffc00,%ecx
  109c0e:	48 8b 73 30          	mov    0x30(%rbx),%rsi
  109c12:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  109c16:	4c 89 ea             	mov    %r13,%rdx
  109c19:	49 81 ff 00 fc ff 7f 	cmp    $0x7ffffc00,%r15
  109c20:	49 0f 46 cf          	cmovbe %r15,%rcx
  109c24:	ff 53 40             	callq  *0x40(%rbx)
  109c27:	85 c0                	test   %eax,%eax
  109c29:	0f 8e 21 01 00 00    	jle    109d50 <__sfvwrite_r+0x1a0>
  109c2f:	48 98                	cltq   
  109c31:	49 01 c5             	add    %rax,%r13
  109c34:	49 29 c7             	sub    %rax,%r15
  109c37:	49 29 46 10          	sub    %rax,0x10(%r14)
  109c3b:	75 c3                	jne    109c00 <__sfvwrite_r+0x50>
  109c3d:	31 c0                	xor    %eax,%eax
  109c3f:	48 83 c4 38          	add    $0x38,%rsp
  109c43:	5b                   	pop    %rbx
  109c44:	41 5c                	pop    %r12
  109c46:	41 5d                	pop    %r13
  109c48:	41 5e                	pop    %r14
  109c4a:	41 5f                	pop    %r15
  109c4c:	5d                   	pop    %rbp
  109c4d:	c3                   	retq   
  109c4e:	66 90                	xchg   %ax,%ax
  109c50:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  109c54:	48 89 de             	mov    %rbx,%rsi
  109c57:	e8 64 ae ff ff       	callq  104ac0 <__swsetup_r>
  109c5c:	85 c0                	test   %eax,%eax
  109c5e:	0f 85 65 04 00 00    	jne    10a0c9 <__sfvwrite_r+0x519>
  109c64:	0f b7 73 10          	movzwl 0x10(%rbx),%esi
  109c68:	4d 8b 26             	mov    (%r14),%r12
  109c6b:	40 f6 c6 02          	test   $0x2,%sil
  109c6f:	0f 85 7b ff ff ff    	jne    109bf0 <__sfvwrite_r+0x40>
  109c75:	40 f6 c6 01          	test   $0x1,%sil
  109c79:	0f 85 f1 00 00 00    	jne    109d70 <__sfvwrite_r+0x1c0>
  109c7f:	45 31 ff             	xor    %r15d,%r15d
  109c82:	45 31 ed             	xor    %r13d,%r13d
  109c85:	0f 1f 00             	nopl   (%rax)
  109c88:	4d 85 ed             	test   %r13,%r13
  109c8b:	74 70                	je     109cfd <__sfvwrite_r+0x14d>
  109c8d:	48 8b 3b             	mov    (%rbx),%rdi
  109c90:	4c 63 53 0c          	movslq 0xc(%rbx),%r10
  109c94:	49 89 f8             	mov    %rdi,%r8
  109c97:	66 f7 c6 00 02       	test   $0x200,%si
  109c9c:	0f 84 ae 01 00 00    	je     109e50 <__sfvwrite_r+0x2a0>
  109ca2:	49 63 d2             	movslq %r10d,%rdx
  109ca5:	4c 39 ea             	cmp    %r13,%rdx
  109ca8:	0f 86 52 02 00 00    	jbe    109f00 <__sfvwrite_r+0x350>
  109cae:	49 63 d5             	movslq %r13d,%rdx
  109cb1:	45 89 ea             	mov    %r13d,%r10d
  109cb4:	48 89 d1             	mov    %rdx,%rcx
  109cb7:	49 89 f8             	mov    %rdi,%r8
  109cba:	4c 89 fe             	mov    %r15,%rsi
  109cbd:	4c 89 c7             	mov    %r8,%rdi
  109cc0:	44 89 55 b0          	mov    %r10d,-0x50(%rbp)
  109cc4:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
  109cc8:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  109ccc:	e8 ef 04 00 00       	callq  10a1c0 <memmove>
  109cd1:	44 8b 55 b0          	mov    -0x50(%rbp),%r10d
  109cd5:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  109cd9:	44 29 53 0c          	sub    %r10d,0xc(%rbx)
  109cdd:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  109ce1:	48 01 13             	add    %rdx,(%rbx)
  109ce4:	49 01 cf             	add    %rcx,%r15
  109ce7:	49 29 cd             	sub    %rcx,%r13
  109cea:	49 29 4e 10          	sub    %rcx,0x10(%r14)
  109cee:	0f 84 49 ff ff ff    	je     109c3d <__sfvwrite_r+0x8d>
  109cf4:	0f b7 73 10          	movzwl 0x10(%rbx),%esi
  109cf8:	4d 85 ed             	test   %r13,%r13
  109cfb:	75 90                	jne    109c8d <__sfvwrite_r+0xdd>
  109cfd:	4d 8b 3c 24          	mov    (%r12),%r15
  109d01:	4d 8b 6c 24 08       	mov    0x8(%r12),%r13
  109d06:	49 83 c4 10          	add    $0x10,%r12
  109d0a:	e9 79 ff ff ff       	jmpq   109c88 <__sfvwrite_r+0xd8>
  109d0f:	90                   	nop
  109d10:	4d 8b 2c 24          	mov    (%r12),%r13
  109d14:	4d 8b 7c 24 08       	mov    0x8(%r12),%r15
  109d19:	49 83 c4 10          	add    $0x10,%r12
  109d1d:	e9 de fe ff ff       	jmpq   109c00 <__sfvwrite_r+0x50>
  109d22:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  109d28:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  109d2c:	48 89 de             	mov    %rbx,%rsi
  109d2f:	44 89 4d b8          	mov    %r9d,-0x48(%rbp)
  109d33:	4c 89 55 c0          	mov    %r10,-0x40(%rbp)
  109d37:	e8 c4 c7 ff ff       	callq  106500 <_fflush_r>
  109d3c:	4c 8b 55 c0          	mov    -0x40(%rbp),%r10
  109d40:	44 8b 4d b8          	mov    -0x48(%rbp),%r9d
  109d44:	85 c0                	test   %eax,%eax
  109d46:	89 c2                	mov    %eax,%edx
  109d48:	0f 84 a4 00 00 00    	je     109df2 <__sfvwrite_r+0x242>
  109d4e:	66 90                	xchg   %ax,%ax
  109d50:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  109d54:	83 c8 40             	or     $0x40,%eax
  109d57:	66 89 43 10          	mov    %ax,0x10(%rbx)
  109d5b:	48 83 c4 38          	add    $0x38,%rsp
  109d5f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  109d64:	5b                   	pop    %rbx
  109d65:	41 5c                	pop    %r12
  109d67:	41 5d                	pop    %r13
  109d69:	41 5e                	pop    %r14
  109d6b:	41 5f                	pop    %r15
  109d6d:	5d                   	pop    %rbp
  109d6e:	c3                   	retq   
  109d6f:	90                   	nop
  109d70:	45 31 c9             	xor    %r9d,%r9d
  109d73:	31 d2                	xor    %edx,%edx
  109d75:	45 31 d2             	xor    %r10d,%r10d
  109d78:	45 31 ff             	xor    %r15d,%r15d
  109d7b:	e9 85 00 00 00       	jmpq   109e05 <__sfvwrite_r+0x255>
  109d80:	85 d2                	test   %edx,%edx
  109d82:	0f 84 98 00 00 00    	je     109e20 <__sfvwrite_r+0x270>
  109d88:	49 63 c9             	movslq %r9d,%rcx
  109d8b:	44 8b 5b 20          	mov    0x20(%rbx),%r11d
  109d8f:	44 8b 6b 0c          	mov    0xc(%rbx),%r13d
  109d93:	4c 39 f9             	cmp    %r15,%rcx
  109d96:	48 8b 3b             	mov    (%rbx),%rdi
  109d99:	49 0f 47 cf          	cmova  %r15,%rcx
  109d9d:	45 01 dd             	add    %r11d,%r13d
  109da0:	48 3b 7b 18          	cmp    0x18(%rbx),%rdi
  109da4:	76 09                	jbe    109daf <__sfvwrite_r+0x1ff>
  109da6:	41 39 cd             	cmp    %ecx,%r13d
  109da9:	0f 8c 79 02 00 00    	jl     10a028 <__sfvwrite_r+0x478>
  109daf:	41 39 cb             	cmp    %ecx,%r11d
  109db2:	0f 8f 38 02 00 00    	jg     109ff0 <__sfvwrite_r+0x440>
  109db8:	44 89 4d b8          	mov    %r9d,-0x48(%rbp)
  109dbc:	4c 89 d2             	mov    %r10,%rdx
  109dbf:	48 8b 73 30          	mov    0x30(%rbx),%rsi
  109dc3:	44 89 d9             	mov    %r11d,%ecx
  109dc6:	4c 89 55 c0          	mov    %r10,-0x40(%rbp)
  109dca:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  109dce:	ff 53 40             	callq  *0x40(%rbx)
  109dd1:	4c 8b 55 c0          	mov    -0x40(%rbp),%r10
  109dd5:	44 8b 4d b8          	mov    -0x48(%rbp),%r9d
  109dd9:	85 c0                	test   %eax,%eax
  109ddb:	41 89 c5             	mov    %eax,%r13d
  109dde:	0f 8e 6c ff ff ff    	jle    109d50 <__sfvwrite_r+0x1a0>
  109de4:	ba 01 00 00 00       	mov    $0x1,%edx
  109de9:	45 29 e9             	sub    %r13d,%r9d
  109dec:	0f 84 36 ff ff ff    	je     109d28 <__sfvwrite_r+0x178>
  109df2:	4d 63 ed             	movslq %r13d,%r13
  109df5:	4d 01 ea             	add    %r13,%r10
  109df8:	4d 29 ef             	sub    %r13,%r15
  109dfb:	4d 29 6e 10          	sub    %r13,0x10(%r14)
  109dff:	0f 84 38 fe ff ff    	je     109c3d <__sfvwrite_r+0x8d>
  109e05:	4d 85 ff             	test   %r15,%r15
  109e08:	0f 85 72 ff ff ff    	jne    109d80 <__sfvwrite_r+0x1d0>
  109e0e:	4d 8b 7c 24 08       	mov    0x8(%r12),%r15
  109e13:	4d 8b 14 24          	mov    (%r12),%r10
  109e17:	49 83 c4 10          	add    $0x10,%r12
  109e1b:	4d 85 ff             	test   %r15,%r15
  109e1e:	74 ee                	je     109e0e <__sfvwrite_r+0x25e>
  109e20:	4c 89 fa             	mov    %r15,%rdx
  109e23:	4c 89 d7             	mov    %r10,%rdi
  109e26:	be 0a 00 00 00       	mov    $0xa,%esi
  109e2b:	4c 89 55 c0          	mov    %r10,-0x40(%rbp)
  109e2f:	e8 bc cf ff ff       	callq  106df0 <memchr>
  109e34:	4c 8b 55 c0          	mov    -0x40(%rbp),%r10
  109e38:	41 8d 57 01          	lea    0x1(%r15),%edx
  109e3c:	4c 8d 48 01          	lea    0x1(%rax),%r9
  109e40:	4d 29 d1             	sub    %r10,%r9
  109e43:	48 85 c0             	test   %rax,%rax
  109e46:	44 0f 44 ca          	cmove  %edx,%r9d
  109e4a:	e9 39 ff ff ff       	jmpq   109d88 <__sfvwrite_r+0x1d8>
  109e4f:	90                   	nop
  109e50:	48 39 7b 18          	cmp    %rdi,0x18(%rbx)
  109e54:	72 4a                	jb     109ea0 <__sfvwrite_r+0x2f0>
  109e56:	48 63 43 20          	movslq 0x20(%rbx),%rax
  109e5a:	48 89 c1             	mov    %rax,%rcx
  109e5d:	4c 39 e8             	cmp    %r13,%rax
  109e60:	77 3e                	ja     109ea0 <__sfvwrite_r+0x2f0>
  109e62:	49 81 fd ff ff ff 7f 	cmp    $0x7fffffff,%r13
  109e69:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
  109e6e:	48 8b 73 30          	mov    0x30(%rbx),%rsi
  109e72:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  109e76:	49 0f 42 c5          	cmovb  %r13,%rax
  109e7a:	99                   	cltd   
  109e7b:	f7 f9                	idiv   %ecx
  109e7d:	4c 89 fa             	mov    %r15,%rdx
  109e80:	0f af c8             	imul   %eax,%ecx
  109e83:	ff 53 40             	callq  *0x40(%rbx)
  109e86:	85 c0                	test   %eax,%eax
  109e88:	0f 8e c2 fe ff ff    	jle    109d50 <__sfvwrite_r+0x1a0>
  109e8e:	48 63 c8             	movslq %eax,%rcx
  109e91:	e9 4e fe ff ff       	jmpq   109ce4 <__sfvwrite_r+0x134>
  109e96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  109e9d:	00 00 00 
  109ea0:	4d 39 ea             	cmp    %r13,%r10
  109ea3:	4c 89 fe             	mov    %r15,%rsi
  109ea6:	4d 0f 47 d5          	cmova  %r13,%r10
  109eaa:	49 63 ca             	movslq %r10d,%rcx
  109ead:	4c 89 55 b8          	mov    %r10,-0x48(%rbp)
  109eb1:	48 89 ca             	mov    %rcx,%rdx
  109eb4:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  109eb8:	e8 03 03 00 00       	callq  10a1c0 <memmove>
  109ebd:	8b 43 0c             	mov    0xc(%rbx),%eax
  109ec0:	4c 8b 55 b8          	mov    -0x48(%rbp),%r10
  109ec4:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  109ec8:	48 01 0b             	add    %rcx,(%rbx)
  109ecb:	44 29 d0             	sub    %r10d,%eax
  109ece:	89 43 0c             	mov    %eax,0xc(%rbx)
  109ed1:	85 c0                	test   %eax,%eax
  109ed3:	0f 85 0b fe ff ff    	jne    109ce4 <__sfvwrite_r+0x134>
  109ed9:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  109edd:	48 89 de             	mov    %rbx,%rsi
  109ee0:	e8 1b c6 ff ff       	callq  106500 <_fflush_r>
  109ee5:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  109ee9:	85 c0                	test   %eax,%eax
  109eeb:	0f 84 f3 fd ff ff    	je     109ce4 <__sfvwrite_r+0x134>
  109ef1:	e9 5a fe ff ff       	jmpq   109d50 <__sfvwrite_r+0x1a0>
  109ef6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  109efd:	00 00 00 
  109f00:	49 63 cd             	movslq %r13d,%rcx
  109f03:	66 f7 c6 80 04       	test   $0x480,%si
  109f08:	0f 84 ac fd ff ff    	je     109cba <__sfvwrite_r+0x10a>
  109f0e:	8b 53 20             	mov    0x20(%rbx),%edx
  109f11:	4c 8b 4b 18          	mov    0x18(%rbx),%r9
  109f15:	8d 14 52             	lea    (%rdx,%rdx,2),%edx
  109f18:	4c 29 cf             	sub    %r9,%rdi
  109f1b:	41 89 d3             	mov    %edx,%r11d
  109f1e:	4c 63 c7             	movslq %edi,%r8
  109f21:	48 89 f9             	mov    %rdi,%rcx
  109f24:	41 c1 eb 1f          	shr    $0x1f,%r11d
  109f28:	4b 8d 7c 28 01       	lea    0x1(%r8,%r13,1),%rdi
  109f2d:	41 01 d3             	add    %edx,%r11d
  109f30:	41 d1 fb             	sar    %r11d
  109f33:	49 63 d3             	movslq %r11d,%rdx
  109f36:	48 39 fa             	cmp    %rdi,%rdx
  109f39:	73 08                	jae    109f43 <__sfvwrite_r+0x393>
  109f3b:	46 8d 5c 29 01       	lea    0x1(%rcx,%r13,1),%r11d
  109f40:	49 63 d3             	movslq %r11d,%rdx
  109f43:	44 89 5d b0          	mov    %r11d,-0x50(%rbp)
  109f47:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  109f4b:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  109f4f:	66 f7 c6 00 04       	test   $0x400,%si
  109f54:	0f 84 16 01 00 00    	je     10a070 <__sfvwrite_r+0x4c0>
  109f5a:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  109f5e:	48 89 d6             	mov    %rdx,%rsi
  109f61:	e8 fa 6b ff ff       	callq  100b60 <_malloc_r>
  109f66:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  109f6a:	4c 8b 45 b8          	mov    -0x48(%rbp),%r8
  109f6e:	48 85 c0             	test   %rax,%rax
  109f71:	44 8b 5d b0          	mov    -0x50(%rbp),%r11d
  109f75:	48 89 c7             	mov    %rax,%rdi
  109f78:	0f 84 38 01 00 00    	je     10a0b6 <__sfvwrite_r+0x506>
  109f7e:	48 8b 73 18          	mov    0x18(%rbx),%rsi
  109f82:	4c 89 c2             	mov    %r8,%rdx
  109f85:	44 89 5d ac          	mov    %r11d,-0x54(%rbp)
  109f89:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  109f8d:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  109f91:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  109f95:	e8 66 60 ff ff       	callq  100000 <__rom_region_start>
  109f9a:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  109f9e:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  109fa2:	4c 8b 45 b8          	mov    -0x48(%rbp),%r8
  109fa6:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  109faa:	66 25 7f fb          	and    $0xfb7f,%ax
  109fae:	44 8b 5d ac          	mov    -0x54(%rbp),%r11d
  109fb2:	0c 80                	or     $0x80,%al
  109fb4:	66 89 43 10          	mov    %ax,0x10(%rbx)
  109fb8:	44 89 5b 20          	mov    %r11d,0x20(%rbx)
  109fbc:	49 01 f8             	add    %rdi,%r8
  109fbf:	41 29 cb             	sub    %ecx,%r11d
  109fc2:	49 63 cd             	movslq %r13d,%rcx
  109fc5:	48 89 7b 18          	mov    %rdi,0x18(%rbx)
  109fc9:	45 89 ea             	mov    %r13d,%r10d
  109fcc:	48 89 ca             	mov    %rcx,%rdx
  109fcf:	4c 89 03             	mov    %r8,(%rbx)
  109fd2:	44 89 5b 0c          	mov    %r11d,0xc(%rbx)
  109fd6:	4c 39 e9             	cmp    %r13,%rcx
  109fd9:	0f 86 db fc ff ff    	jbe    109cba <__sfvwrite_r+0x10a>
  109fdf:	4c 89 c7             	mov    %r8,%rdi
  109fe2:	e9 ca fc ff ff       	jmpq   109cb1 <__sfvwrite_r+0x101>
  109fe7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  109fee:	00 00 
  109ff0:	4c 63 e9             	movslq %ecx,%r13
  109ff3:	4c 89 d6             	mov    %r10,%rsi
  109ff6:	44 89 4d b0          	mov    %r9d,-0x50(%rbp)
  109ffa:	4c 89 ea             	mov    %r13,%rdx
  109ffd:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
  10a001:	4c 89 55 c0          	mov    %r10,-0x40(%rbp)
  10a005:	e8 b6 01 00 00       	callq  10a1c0 <memmove>
  10a00a:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  10a00e:	4c 01 2b             	add    %r13,(%rbx)
  10a011:	29 4b 0c             	sub    %ecx,0xc(%rbx)
  10a014:	44 8b 4d b0          	mov    -0x50(%rbp),%r9d
  10a018:	4c 8b 55 c0          	mov    -0x40(%rbp),%r10
  10a01c:	41 89 cd             	mov    %ecx,%r13d
  10a01f:	e9 c0 fd ff ff       	jmpq   109de4 <__sfvwrite_r+0x234>
  10a024:	0f 1f 40 00          	nopl   0x0(%rax)
  10a028:	4c 89 d6             	mov    %r10,%rsi
  10a02b:	49 63 d5             	movslq %r13d,%rdx
  10a02e:	44 89 4d b0          	mov    %r9d,-0x50(%rbp)
  10a032:	4c 89 55 c0          	mov    %r10,-0x40(%rbp)
  10a036:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  10a03a:	e8 81 01 00 00       	callq  10a1c0 <memmove>
  10a03f:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  10a043:	48 01 13             	add    %rdx,(%rbx)
  10a046:	48 89 de             	mov    %rbx,%rsi
  10a049:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  10a04d:	e8 ae c4 ff ff       	callq  106500 <_fflush_r>
  10a052:	4c 8b 55 c0          	mov    -0x40(%rbp),%r10
  10a056:	44 8b 4d b0          	mov    -0x50(%rbp),%r9d
  10a05a:	85 c0                	test   %eax,%eax
  10a05c:	0f 84 82 fd ff ff    	je     109de4 <__sfvwrite_r+0x234>
  10a062:	e9 e9 fc ff ff       	jmpq   109d50 <__sfvwrite_r+0x1a0>
  10a067:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  10a06e:	00 00 
  10a070:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  10a074:	4c 89 ce             	mov    %r9,%rsi
  10a077:	e8 d4 02 00 00       	callq  10a350 <_realloc_r>
  10a07c:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  10a080:	4c 8b 45 b8          	mov    -0x48(%rbp),%r8
  10a084:	48 85 c0             	test   %rax,%rax
  10a087:	44 8b 5d b0          	mov    -0x50(%rbp),%r11d
  10a08b:	48 89 c7             	mov    %rax,%rdi
  10a08e:	0f 85 24 ff ff ff    	jne    109fb8 <__sfvwrite_r+0x408>
  10a094:	4c 8b 75 c8          	mov    -0x38(%rbp),%r14
  10a098:	48 8b 73 18          	mov    0x18(%rbx),%rsi
  10a09c:	4c 89 f7             	mov    %r14,%rdi
  10a09f:	e8 fc c7 ff ff       	callq  1068a0 <_free_r>
  10a0a4:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  10a0a8:	41 c7 06 0c 00 00 00 	movl   $0xc,(%r14)
  10a0af:	24 7f                	and    $0x7f,%al
  10a0b1:	e9 9e fc ff ff       	jmpq   109d54 <__sfvwrite_r+0x1a4>
  10a0b6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  10a0ba:	c7 00 0c 00 00 00    	movl   $0xc,(%rax)
  10a0c0:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  10a0c4:	e9 8b fc ff ff       	jmpq   109d54 <__sfvwrite_r+0x1a4>
  10a0c9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  10a0ce:	e9 6c fb ff ff       	jmpq   109c3f <__sfvwrite_r+0x8f>
  10a0d3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10a0da:	00 00 00 
  10a0dd:	0f 1f 00             	nopl   (%rax)

000000000010a0e0 <_isatty_r>:
  10a0e0:	55                   	push   %rbp
  10a0e1:	31 c0                	xor    %eax,%eax
  10a0e3:	48 89 e5             	mov    %rsp,%rbp
  10a0e6:	53                   	push   %rbx
  10a0e7:	48 89 fb             	mov    %rdi,%rbx
  10a0ea:	89 f7                	mov    %esi,%edi
  10a0ec:	48 83 ec 08          	sub    $0x8,%rsp
  10a0f0:	c7 05 3a 63 01 00 00 	movl   $0x0,0x1633a(%rip)        # 120434 <errno>
  10a0f7:	00 00 00 
  10a0fa:	e8 7d 2b 00 00       	callq  10cc7c <_isatty>
  10a0ff:	83 f8 ff             	cmp    $0xffffffff,%eax
  10a102:	74 0c                	je     10a110 <_isatty_r+0x30>
  10a104:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  10a108:	c9                   	leaveq 
  10a109:	c3                   	retq   
  10a10a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  10a110:	8b 15 1e 63 01 00    	mov    0x1631e(%rip),%edx        # 120434 <errno>
  10a116:	85 d2                	test   %edx,%edx
  10a118:	74 ea                	je     10a104 <_isatty_r+0x24>
  10a11a:	89 13                	mov    %edx,(%rbx)
  10a11c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  10a120:	c9                   	leaveq 
  10a121:	c3                   	retq   
  10a122:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10a129:	00 00 00 
  10a12c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000010a130 <_lseek_r>:
  10a130:	55                   	push   %rbp
  10a131:	31 c0                	xor    %eax,%eax
  10a133:	48 89 e5             	mov    %rsp,%rbp
  10a136:	53                   	push   %rbx
  10a137:	48 89 fb             	mov    %rdi,%rbx
  10a13a:	89 f7                	mov    %esi,%edi
  10a13c:	48 89 d6             	mov    %rdx,%rsi
  10a13f:	89 ca                	mov    %ecx,%edx
  10a141:	48 83 ec 08          	sub    $0x8,%rsp
  10a145:	c7 05 e5 62 01 00 00 	movl   $0x0,0x162e5(%rip)        # 120434 <errno>
  10a14c:	00 00 00 
  10a14f:	e8 50 15 00 00       	callq  10b6a4 <_lseek>
  10a154:	4c 63 c0             	movslq %eax,%r8
  10a157:	83 f8 ff             	cmp    $0xffffffff,%eax
  10a15a:	74 0c                	je     10a168 <_lseek_r+0x38>
  10a15c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  10a160:	4c 89 c0             	mov    %r8,%rax
  10a163:	c9                   	leaveq 
  10a164:	c3                   	retq   
  10a165:	0f 1f 00             	nopl   (%rax)
  10a168:	8b 05 c6 62 01 00    	mov    0x162c6(%rip),%eax        # 120434 <errno>
  10a16e:	85 c0                	test   %eax,%eax
  10a170:	74 ea                	je     10a15c <_lseek_r+0x2c>
  10a172:	89 03                	mov    %eax,(%rbx)
  10a174:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  10a178:	4c 89 c0             	mov    %r8,%rax
  10a17b:	c9                   	leaveq 
  10a17c:	c3                   	retq   
  10a17d:	0f 1f 00             	nopl   (%rax)

000000000010a180 <__ascii_mbtowc>:
  10a180:	55                   	push   %rbp
  10a181:	48 85 f6             	test   %rsi,%rsi
  10a184:	48 89 e5             	mov    %rsp,%rbp
  10a187:	48 8d 45 fc          	lea    -0x4(%rbp),%rax
  10a18b:	48 0f 44 f0          	cmove  %rax,%rsi
  10a18f:	48 85 d2             	test   %rdx,%rdx
  10a192:	74 1c                	je     10a1b0 <__ascii_mbtowc+0x30>
  10a194:	48 85 c9             	test   %rcx,%rcx
  10a197:	74 1b                	je     10a1b4 <__ascii_mbtowc+0x34>
  10a199:	0f b6 02             	movzbl (%rdx),%eax
  10a19c:	89 06                	mov    %eax,(%rsi)
  10a19e:	31 c0                	xor    %eax,%eax
  10a1a0:	80 3a 00             	cmpb   $0x0,(%rdx)
  10a1a3:	0f 95 c0             	setne  %al
  10a1a6:	5d                   	pop    %rbp
  10a1a7:	c3                   	retq   
  10a1a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10a1af:	00 
  10a1b0:	31 c0                	xor    %eax,%eax
  10a1b2:	5d                   	pop    %rbp
  10a1b3:	c3                   	retq   
  10a1b4:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  10a1b9:	5d                   	pop    %rbp
  10a1ba:	c3                   	retq   
  10a1bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000010a1c0 <memmove>:
  10a1c0:	49 89 f8             	mov    %rdi,%r8
  10a1c3:	48 89 d1             	mov    %rdx,%rcx
  10a1c6:	48 39 f7             	cmp    %rsi,%rdi
  10a1c9:	76 2d                	jbe    10a1f8 <memmove+0x38>
  10a1cb:	48 8d 04 16          	lea    (%rsi,%rdx,1),%rax
  10a1cf:	48 39 c7             	cmp    %rax,%rdi
  10a1d2:	73 24                	jae    10a1f8 <memmove+0x38>
  10a1d4:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
  10a1d8:	48 85 d2             	test   %rdx,%rdx
  10a1db:	74 11                	je     10a1ee <memmove+0x2e>
  10a1dd:	0f 1f 00             	nopl   (%rax)
  10a1e0:	0f b6 14 06          	movzbl (%rsi,%rax,1),%edx
  10a1e4:	41 88 14 00          	mov    %dl,(%r8,%rax,1)
  10a1e8:	48 83 e8 01          	sub    $0x1,%rax
  10a1ec:	73 f2                	jae    10a1e0 <memmove+0x20>
  10a1ee:	4c 89 c0             	mov    %r8,%rax
  10a1f1:	c3                   	retq   
  10a1f2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  10a1f8:	48 83 f9 1f          	cmp    $0x1f,%rcx
  10a1fc:	77 32                	ja     10a230 <memmove+0x70>
  10a1fe:	4c 89 c2             	mov    %r8,%rdx
  10a201:	48 8d 79 ff          	lea    -0x1(%rcx),%rdi
  10a205:	48 85 c9             	test   %rcx,%rcx
  10a208:	74 e4                	je     10a1ee <memmove+0x2e>
  10a20a:	31 c0                	xor    %eax,%eax
  10a20c:	0f 1f 40 00          	nopl   0x0(%rax)
  10a210:	0f b6 0c 06          	movzbl (%rsi,%rax,1),%ecx
  10a214:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
  10a217:	48 89 c1             	mov    %rax,%rcx
  10a21a:	48 83 c0 01          	add    $0x1,%rax
  10a21e:	48 39 cf             	cmp    %rcx,%rdi
  10a221:	75 ed                	jne    10a210 <memmove+0x50>
  10a223:	4c 89 c0             	mov    %r8,%rax
  10a226:	c3                   	retq   
  10a227:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  10a22e:	00 00 
  10a230:	48 89 f7             	mov    %rsi,%rdi
  10a233:	4c 09 c7             	or     %r8,%rdi
  10a236:	83 e7 07             	and    $0x7,%edi
  10a239:	0f 85 91 00 00 00    	jne    10a2d0 <memmove+0x110>
  10a23f:	48 8d 41 e0          	lea    -0x20(%rcx),%rax
  10a243:	4c 89 c2             	mov    %r8,%rdx
  10a246:	48 83 e0 e0          	and    $0xffffffffffffffe0,%rax
  10a24a:	4c 8d 58 20          	lea    0x20(%rax),%r11
  10a24e:	48 89 f0             	mov    %rsi,%rax
  10a251:	4f 8d 14 18          	lea    (%r8,%r11,1),%r10
  10a255:	0f 1f 00             	nopl   (%rax)
  10a258:	4c 8b 08             	mov    (%rax),%r9
  10a25b:	48 83 c0 20          	add    $0x20,%rax
  10a25f:	48 83 c2 20          	add    $0x20,%rdx
  10a263:	4c 89 4a e0          	mov    %r9,-0x20(%rdx)
  10a267:	4c 8b 48 e8          	mov    -0x18(%rax),%r9
  10a26b:	4c 89 4a e8          	mov    %r9,-0x18(%rdx)
  10a26f:	4c 8b 48 f0          	mov    -0x10(%rax),%r9
  10a273:	4c 89 4a f0          	mov    %r9,-0x10(%rdx)
  10a277:	4c 8b 48 f8          	mov    -0x8(%rax),%r9
  10a27b:	4c 89 4a f8          	mov    %r9,-0x8(%rdx)
  10a27f:	49 39 d2             	cmp    %rdx,%r10
  10a282:	75 d4                	jne    10a258 <memmove+0x98>
  10a284:	48 89 c8             	mov    %rcx,%rax
  10a287:	4c 01 de             	add    %r11,%rsi
  10a28a:	83 e0 1f             	and    $0x1f,%eax
  10a28d:	f6 c1 18             	test   $0x18,%cl
  10a290:	74 4a                	je     10a2dc <memmove+0x11c>
  10a292:	4c 8b 0c 3e          	mov    (%rsi,%rdi,1),%r9
  10a296:	4c 89 0c 3a          	mov    %r9,(%rdx,%rdi,1)
  10a29a:	48 83 c7 08          	add    $0x8,%rdi
  10a29e:	49 89 c1             	mov    %rax,%r9
  10a2a1:	49 29 f9             	sub    %rdi,%r9
  10a2a4:	49 83 f9 07          	cmp    $0x7,%r9
  10a2a8:	77 e8                	ja     10a292 <memmove+0xd2>
  10a2aa:	48 83 e8 08          	sub    $0x8,%rax
  10a2ae:	83 e1 07             	and    $0x7,%ecx
  10a2b1:	48 c1 e8 03          	shr    $0x3,%rax
  10a2b5:	48 8d 04 c5 08 00 00 	lea    0x8(,%rax,8),%rax
  10a2bc:	00 
  10a2bd:	48 01 c2             	add    %rax,%rdx
  10a2c0:	48 01 c6             	add    %rax,%rsi
  10a2c3:	e9 39 ff ff ff       	jmpq   10a201 <memmove+0x41>
  10a2c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10a2cf:	00 
  10a2d0:	48 8d 79 ff          	lea    -0x1(%rcx),%rdi
  10a2d4:	4c 89 c2             	mov    %r8,%rdx
  10a2d7:	e9 2e ff ff ff       	jmpq   10a20a <memmove+0x4a>
  10a2dc:	48 89 c1             	mov    %rax,%rcx
  10a2df:	e9 1d ff ff ff       	jmpq   10a201 <memmove+0x41>
  10a2e4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10a2eb:	00 00 00 
  10a2ee:	66 90                	xchg   %ax,%ax

000000000010a2f0 <_read_r>:
  10a2f0:	55                   	push   %rbp
  10a2f1:	31 c0                	xor    %eax,%eax
  10a2f3:	48 89 e5             	mov    %rsp,%rbp
  10a2f6:	53                   	push   %rbx
  10a2f7:	48 89 fb             	mov    %rdi,%rbx
  10a2fa:	89 f7                	mov    %esi,%edi
  10a2fc:	48 89 d6             	mov    %rdx,%rsi
  10a2ff:	48 89 ca             	mov    %rcx,%rdx
  10a302:	48 83 ec 08          	sub    $0x8,%rsp
  10a306:	c7 05 24 61 01 00 00 	movl   $0x0,0x16124(%rip)        # 120434 <errno>
  10a30d:	00 00 00 
  10a310:	e8 ae 12 00 00       	callq  10b5c3 <_read>
  10a315:	4c 63 c0             	movslq %eax,%r8
  10a318:	83 f8 ff             	cmp    $0xffffffff,%eax
  10a31b:	74 13                	je     10a330 <_read_r+0x40>
  10a31d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  10a321:	4c 89 c0             	mov    %r8,%rax
  10a324:	c9                   	leaveq 
  10a325:	c3                   	retq   
  10a326:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10a32d:	00 00 00 
  10a330:	8b 05 fe 60 01 00    	mov    0x160fe(%rip),%eax        # 120434 <errno>
  10a336:	85 c0                	test   %eax,%eax
  10a338:	74 e3                	je     10a31d <_read_r+0x2d>
  10a33a:	89 03                	mov    %eax,(%rbx)
  10a33c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  10a340:	4c 89 c0             	mov    %r8,%rax
  10a343:	c9                   	leaveq 
  10a344:	c3                   	retq   
  10a345:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10a34c:	00 00 00 
  10a34f:	90                   	nop

000000000010a350 <_realloc_r>:
  10a350:	55                   	push   %rbp
  10a351:	48 89 e5             	mov    %rsp,%rbp
  10a354:	41 57                	push   %r15
  10a356:	41 56                	push   %r14
  10a358:	49 89 fe             	mov    %rdi,%r14
  10a35b:	41 55                	push   %r13
  10a35d:	49 89 d5             	mov    %rdx,%r13
  10a360:	41 54                	push   %r12
  10a362:	53                   	push   %rbx
  10a363:	48 83 ec 18          	sub    $0x18,%rsp
  10a367:	48 85 f6             	test   %rsi,%rsi
  10a36a:	0f 84 c0 01 00 00    	je     10a530 <_realloc_r+0x1e0>
  10a370:	49 89 f4             	mov    %rsi,%r12
  10a373:	49 8d 5d 17          	lea    0x17(%r13),%rbx
  10a377:	e8 d4 70 ff ff       	callq  101450 <__malloc_lock>
  10a37c:	49 8b 54 24 f8       	mov    -0x8(%r12),%rdx
  10a381:	49 8d 4c 24 f0       	lea    -0x10(%r12),%rcx
  10a386:	49 89 d7             	mov    %rdx,%r15
  10a389:	49 83 e7 fc          	and    $0xfffffffffffffffc,%r15
  10a38d:	48 83 fb 2e          	cmp    $0x2e,%rbx
  10a391:	0f 87 09 01 00 00    	ja     10a4a0 <_realloc_r+0x150>
  10a397:	31 c0                	xor    %eax,%eax
  10a399:	bb 20 00 00 00       	mov    $0x20,%ebx
  10a39e:	4c 39 eb             	cmp    %r13,%rbx
  10a3a1:	0f 82 d9 01 00 00    	jb     10a580 <_realloc_r+0x230>
  10a3a7:	84 c0                	test   %al,%al
  10a3a9:	0f 85 d1 01 00 00    	jne    10a580 <_realloc_r+0x230>
  10a3af:	49 39 df             	cmp    %rbx,%r15
  10a3b2:	0f 8d 18 01 00 00    	jge    10a4d0 <_realloc_r+0x180>
  10a3b8:	4a 8d 34 39          	lea    (%rcx,%r15,1),%rsi
  10a3bc:	48 39 35 cd d1 03 00 	cmp    %rsi,0x3d1cd(%rip)        # 147590 <__malloc_av_+0x10>
  10a3c3:	48 8b 46 08          	mov    0x8(%rsi),%rax
  10a3c7:	0f 84 4b 02 00 00    	je     10a618 <_realloc_r+0x2c8>
  10a3cd:	48 89 c7             	mov    %rax,%rdi
  10a3d0:	48 83 e7 fe          	and    $0xfffffffffffffffe,%rdi
  10a3d4:	f6 44 3e 08 01       	testb  $0x1,0x8(%rsi,%rdi,1)
  10a3d9:	0f 85 31 01 00 00    	jne    10a510 <_realloc_r+0x1c0>
  10a3df:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
  10a3e3:	49 8d 3c 07          	lea    (%r15,%rax,1),%rdi
  10a3e7:	48 39 fb             	cmp    %rdi,%rbx
  10a3ea:	0f 8e c8 00 00 00    	jle    10a4b8 <_realloc_r+0x168>
  10a3f0:	83 e2 01             	and    $0x1,%edx
  10a3f3:	75 2d                	jne    10a422 <_realloc_r+0xd2>
  10a3f5:	49 89 c9             	mov    %rcx,%r9
  10a3f8:	4d 2b 4c 24 f0       	sub    -0x10(%r12),%r9
  10a3fd:	49 8b 51 08          	mov    0x8(%r9),%rdx
  10a401:	48 83 e2 fc          	and    $0xfffffffffffffffc,%rdx
  10a405:	48 01 d0             	add    %rdx,%rax
  10a408:	4e 8d 04 38          	lea    (%rax,%r15,1),%r8
  10a40c:	4c 39 c3             	cmp    %r8,%rbx
  10a40f:	0f 8e 7b 01 00 00    	jle    10a590 <_realloc_r+0x240>
  10a415:	4d 8d 04 17          	lea    (%r15,%rdx,1),%r8
  10a419:	4c 39 c3             	cmp    %r8,%rbx
  10a41c:	0f 8e 7e 01 00 00    	jle    10a5a0 <_realloc_r+0x250>
  10a422:	4c 89 ee             	mov    %r13,%rsi
  10a425:	4c 89 f7             	mov    %r14,%rdi
  10a428:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  10a42c:	e8 2f 67 ff ff       	callq  100b60 <_malloc_r>
  10a431:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  10a435:	48 85 c0             	test   %rax,%rax
  10a438:	49 89 c5             	mov    %rax,%r13
  10a43b:	74 58                	je     10a495 <_realloc_r+0x145>
  10a43d:	49 8b 44 24 f8       	mov    -0x8(%r12),%rax
  10a442:	49 8d 55 f0          	lea    -0x10(%r13),%rdx
  10a446:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  10a44a:	48 01 c8             	add    %rcx,%rax
  10a44d:	48 39 d0             	cmp    %rdx,%rax
  10a450:	0f 84 9a 02 00 00    	je     10a6f0 <_realloc_r+0x3a0>
  10a456:	49 8d 57 f8          	lea    -0x8(%r15),%rdx
  10a45a:	48 83 fa 48          	cmp    $0x48,%rdx
  10a45e:	0f 87 c4 02 00 00    	ja     10a728 <_realloc_r+0x3d8>
  10a464:	48 83 fa 27          	cmp    $0x27,%rdx
  10a468:	0f 87 92 02 00 00    	ja     10a700 <_realloc_r+0x3b0>
  10a46e:	4c 89 e8             	mov    %r13,%rax
  10a471:	4c 89 e2             	mov    %r12,%rdx
  10a474:	48 8b 0a             	mov    (%rdx),%rcx
  10a477:	48 89 08             	mov    %rcx,(%rax)
  10a47a:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  10a47e:	48 89 48 08          	mov    %rcx,0x8(%rax)
  10a482:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  10a486:	48 89 50 10          	mov    %rdx,0x10(%rax)
  10a48a:	4c 89 e6             	mov    %r12,%rsi
  10a48d:	4c 89 f7             	mov    %r14,%rdi
  10a490:	e8 0b c4 ff ff       	callq  1068a0 <_free_r>
  10a495:	4c 89 f7             	mov    %r14,%rdi
  10a498:	e8 c3 6f ff ff       	callq  101460 <__malloc_unlock>
  10a49d:	eb 5f                	jmp    10a4fe <_realloc_r+0x1ae>
  10a49f:	90                   	nop
  10a4a0:	48 83 e3 f0          	and    $0xfffffffffffffff0,%rbx
  10a4a4:	48 81 fb ff ff ff 7f 	cmp    $0x7fffffff,%rbx
  10a4ab:	0f 97 c0             	seta   %al
  10a4ae:	e9 eb fe ff ff       	jmpq   10a39e <_realloc_r+0x4e>
  10a4b3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10a4b8:	48 8b 46 18          	mov    0x18(%rsi),%rax
  10a4bc:	48 8b 56 10          	mov    0x10(%rsi),%rdx
  10a4c0:	49 89 ff             	mov    %rdi,%r15
  10a4c3:	48 89 42 18          	mov    %rax,0x18(%rdx)
  10a4c7:	48 89 50 10          	mov    %rdx,0x10(%rax)
  10a4cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10a4d0:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  10a4d4:	4c 89 fe             	mov    %r15,%rsi
  10a4d7:	4a 8d 04 39          	lea    (%rcx,%r15,1),%rax
  10a4db:	48 29 de             	sub    %rbx,%rsi
  10a4de:	83 e2 01             	and    $0x1,%edx
  10a4e1:	48 83 fe 1f          	cmp    $0x1f,%rsi
  10a4e5:	77 69                	ja     10a550 <_realloc_r+0x200>
  10a4e7:	4c 09 fa             	or     %r15,%rdx
  10a4ea:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  10a4ee:	48 83 48 08 01       	orq    $0x1,0x8(%rax)
  10a4f3:	4c 89 f7             	mov    %r14,%rdi
  10a4f6:	4d 89 e5             	mov    %r12,%r13
  10a4f9:	e8 62 6f ff ff       	callq  101460 <__malloc_unlock>
  10a4fe:	48 83 c4 18          	add    $0x18,%rsp
  10a502:	4c 89 e8             	mov    %r13,%rax
  10a505:	5b                   	pop    %rbx
  10a506:	41 5c                	pop    %r12
  10a508:	41 5d                	pop    %r13
  10a50a:	41 5e                	pop    %r14
  10a50c:	41 5f                	pop    %r15
  10a50e:	5d                   	pop    %rbp
  10a50f:	c3                   	retq   
  10a510:	83 e2 01             	and    $0x1,%edx
  10a513:	0f 85 09 ff ff ff    	jne    10a422 <_realloc_r+0xd2>
  10a519:	49 89 c9             	mov    %rcx,%r9
  10a51c:	4d 2b 4c 24 f0       	sub    -0x10(%r12),%r9
  10a521:	49 8b 51 08          	mov    0x8(%r9),%rdx
  10a525:	48 83 e2 fc          	and    $0xfffffffffffffffc,%rdx
  10a529:	e9 e7 fe ff ff       	jmpq   10a415 <_realloc_r+0xc5>
  10a52e:	66 90                	xchg   %ax,%ax
  10a530:	48 83 c4 18          	add    $0x18,%rsp
  10a534:	48 89 d6             	mov    %rdx,%rsi
  10a537:	5b                   	pop    %rbx
  10a538:	41 5c                	pop    %r12
  10a53a:	41 5d                	pop    %r13
  10a53c:	41 5e                	pop    %r14
  10a53e:	41 5f                	pop    %r15
  10a540:	5d                   	pop    %rbp
  10a541:	e9 1a 66 ff ff       	jmpq   100b60 <_malloc_r>
  10a546:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10a54d:	00 00 00 
  10a550:	48 8d 3c 19          	lea    (%rcx,%rbx,1),%rdi
  10a554:	48 83 ce 01          	or     $0x1,%rsi
  10a558:	48 09 da             	or     %rbx,%rdx
  10a55b:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  10a55f:	48 89 77 08          	mov    %rsi,0x8(%rdi)
  10a563:	48 8d 77 10          	lea    0x10(%rdi),%rsi
  10a567:	4c 89 f7             	mov    %r14,%rdi
  10a56a:	48 83 48 08 01       	orq    $0x1,0x8(%rax)
  10a56f:	e8 2c c3 ff ff       	callq  1068a0 <_free_r>
  10a574:	e9 7a ff ff ff       	jmpq   10a4f3 <_realloc_r+0x1a3>
  10a579:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  10a580:	41 c7 06 0c 00 00 00 	movl   $0xc,(%r14)
  10a587:	45 31 ed             	xor    %r13d,%r13d
  10a58a:	e9 6f ff ff ff       	jmpq   10a4fe <_realloc_r+0x1ae>
  10a58f:	90                   	nop
  10a590:	48 8b 46 18          	mov    0x18(%rsi),%rax
  10a594:	48 8b 56 10          	mov    0x10(%rsi),%rdx
  10a598:	48 89 42 18          	mov    %rax,0x18(%rdx)
  10a59c:	48 89 50 10          	mov    %rdx,0x10(%rax)
  10a5a0:	49 8b 51 10          	mov    0x10(%r9),%rdx
  10a5a4:	49 8b 41 18          	mov    0x18(%r9),%rax
  10a5a8:	4d 8d 69 10          	lea    0x10(%r9),%r13
  10a5ac:	48 89 42 18          	mov    %rax,0x18(%rdx)
  10a5b0:	48 89 50 10          	mov    %rdx,0x10(%rax)
  10a5b4:	49 8d 57 f8          	lea    -0x8(%r15),%rdx
  10a5b8:	48 83 fa 48          	cmp    $0x48,%rdx
  10a5bc:	0f 87 7e 01 00 00    	ja     10a740 <_realloc_r+0x3f0>
  10a5c2:	4c 89 e8             	mov    %r13,%rax
  10a5c5:	48 83 fa 27          	cmp    $0x27,%rdx
  10a5c9:	76 23                	jbe    10a5ee <_realloc_r+0x29e>
  10a5cb:	49 8b 04 24          	mov    (%r12),%rax
  10a5cf:	49 89 41 10          	mov    %rax,0x10(%r9)
  10a5d3:	49 8b 44 24 08       	mov    0x8(%r12),%rax
  10a5d8:	49 89 41 18          	mov    %rax,0x18(%r9)
  10a5dc:	48 83 fa 37          	cmp    $0x37,%rdx
  10a5e0:	0f 87 f2 01 00 00    	ja     10a7d8 <_realloc_r+0x488>
  10a5e6:	49 83 c4 10          	add    $0x10,%r12
  10a5ea:	49 8d 41 20          	lea    0x20(%r9),%rax
  10a5ee:	49 8b 14 24          	mov    (%r12),%rdx
  10a5f2:	4d 89 c7             	mov    %r8,%r15
  10a5f5:	4c 89 c9             	mov    %r9,%rcx
  10a5f8:	48 89 10             	mov    %rdx,(%rax)
  10a5fb:	49 8b 54 24 08       	mov    0x8(%r12),%rdx
  10a600:	48 89 50 08          	mov    %rdx,0x8(%rax)
  10a604:	49 8b 54 24 10       	mov    0x10(%r12),%rdx
  10a609:	4d 89 ec             	mov    %r13,%r12
  10a60c:	48 89 50 10          	mov    %rdx,0x10(%rax)
  10a610:	e9 bb fe ff ff       	jmpq   10a4d0 <_realloc_r+0x180>
  10a615:	0f 1f 00             	nopl   (%rax)
  10a618:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
  10a61c:	48 8d 7b 20          	lea    0x20(%rbx),%rdi
  10a620:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  10a624:	48 39 fe             	cmp    %rdi,%rsi
  10a627:	0f 8d 73 01 00 00    	jge    10a7a0 <_realloc_r+0x450>
  10a62d:	83 e2 01             	and    $0x1,%edx
  10a630:	0f 85 ec fd ff ff    	jne    10a422 <_realloc_r+0xd2>
  10a636:	49 89 c9             	mov    %rcx,%r9
  10a639:	4d 2b 4c 24 f0       	sub    -0x10(%r12),%r9
  10a63e:	49 8b 51 08          	mov    0x8(%r9),%rdx
  10a642:	48 83 e2 fc          	and    $0xfffffffffffffffc,%rdx
  10a646:	48 01 d0             	add    %rdx,%rax
  10a649:	4e 8d 04 38          	lea    (%rax,%r15,1),%r8
  10a64d:	4c 39 c7             	cmp    %r8,%rdi
  10a650:	0f 8f bf fd ff ff    	jg     10a415 <_realloc_r+0xc5>
  10a656:	49 8b 51 10          	mov    0x10(%r9),%rdx
  10a65a:	49 8b 41 18          	mov    0x18(%r9),%rax
  10a65e:	4d 8d 69 10          	lea    0x10(%r9),%r13
  10a662:	48 89 42 18          	mov    %rax,0x18(%rdx)
  10a666:	48 89 50 10          	mov    %rdx,0x10(%rax)
  10a66a:	49 8d 57 f8          	lea    -0x8(%r15),%rdx
  10a66e:	48 83 fa 48          	cmp    $0x48,%rdx
  10a672:	0f 87 c4 01 00 00    	ja     10a83c <_realloc_r+0x4ec>
  10a678:	4c 89 e8             	mov    %r13,%rax
  10a67b:	48 83 fa 27          	cmp    $0x27,%rdx
  10a67f:	76 23                	jbe    10a6a4 <_realloc_r+0x354>
  10a681:	49 8b 04 24          	mov    (%r12),%rax
  10a685:	49 89 41 10          	mov    %rax,0x10(%r9)
  10a689:	49 8b 44 24 08       	mov    0x8(%r12),%rax
  10a68e:	49 89 41 18          	mov    %rax,0x18(%r9)
  10a692:	48 83 fa 37          	cmp    $0x37,%rdx
  10a696:	0f 87 c0 01 00 00    	ja     10a85c <_realloc_r+0x50c>
  10a69c:	49 83 c4 10          	add    $0x10,%r12
  10a6a0:	49 8d 41 20          	lea    0x20(%r9),%rax
  10a6a4:	49 8b 14 24          	mov    (%r12),%rdx
  10a6a8:	48 89 10             	mov    %rdx,(%rax)
  10a6ab:	49 8b 54 24 08       	mov    0x8(%r12),%rdx
  10a6b0:	48 89 50 08          	mov    %rdx,0x8(%rax)
  10a6b4:	49 8b 54 24 10       	mov    0x10(%r12),%rdx
  10a6b9:	48 89 50 10          	mov    %rdx,0x10(%rax)
  10a6bd:	49 29 d8             	sub    %rbx,%r8
  10a6c0:	49 8d 04 19          	lea    (%r9,%rbx,1),%rax
  10a6c4:	4c 89 f7             	mov    %r14,%rdi
  10a6c7:	49 83 c8 01          	or     $0x1,%r8
  10a6cb:	48 89 05 be ce 03 00 	mov    %rax,0x3cebe(%rip)        # 147590 <__malloc_av_+0x10>
  10a6d2:	4c 89 40 08          	mov    %r8,0x8(%rax)
  10a6d6:	49 8b 41 08          	mov    0x8(%r9),%rax
  10a6da:	83 e0 01             	and    $0x1,%eax
  10a6dd:	48 09 c3             	or     %rax,%rbx
  10a6e0:	49 89 59 08          	mov    %rbx,0x8(%r9)
  10a6e4:	e8 77 6d ff ff       	callq  101460 <__malloc_unlock>
  10a6e9:	e9 10 fe ff ff       	jmpq   10a4fe <_realloc_r+0x1ae>
  10a6ee:	66 90                	xchg   %ax,%ax
  10a6f0:	49 8b 45 f8          	mov    -0x8(%r13),%rax
  10a6f4:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
  10a6f8:	49 01 c7             	add    %rax,%r15
  10a6fb:	e9 d0 fd ff ff       	jmpq   10a4d0 <_realloc_r+0x180>
  10a700:	49 8b 04 24          	mov    (%r12),%rax
  10a704:	49 89 45 00          	mov    %rax,0x0(%r13)
  10a708:	49 8b 44 24 08       	mov    0x8(%r12),%rax
  10a70d:	49 89 45 08          	mov    %rax,0x8(%r13)
  10a711:	48 83 fa 37          	cmp    $0x37,%rdx
  10a715:	77 59                	ja     10a770 <_realloc_r+0x420>
  10a717:	49 8d 54 24 10       	lea    0x10(%r12),%rdx
  10a71c:	49 8d 45 10          	lea    0x10(%r13),%rax
  10a720:	e9 4f fd ff ff       	jmpq   10a474 <_realloc_r+0x124>
  10a725:	0f 1f 00             	nopl   (%rax)
  10a728:	4c 89 e6             	mov    %r12,%rsi
  10a72b:	4c 89 ef             	mov    %r13,%rdi
  10a72e:	e8 8d fa ff ff       	callq  10a1c0 <memmove>
  10a733:	e9 52 fd ff ff       	jmpq   10a48a <_realloc_r+0x13a>
  10a738:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10a73f:	00 
  10a740:	4c 89 e6             	mov    %r12,%rsi
  10a743:	4c 89 ef             	mov    %r13,%rdi
  10a746:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
  10a74a:	4d 89 ec             	mov    %r13,%r12
  10a74d:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
  10a751:	e8 6a fa ff ff       	callq  10a1c0 <memmove>
  10a756:	4c 8b 45 c8          	mov    -0x38(%rbp),%r8
  10a75a:	4c 8b 4d c0          	mov    -0x40(%rbp),%r9
  10a75e:	4d 89 c7             	mov    %r8,%r15
  10a761:	4c 89 c9             	mov    %r9,%rcx
  10a764:	e9 67 fd ff ff       	jmpq   10a4d0 <_realloc_r+0x180>
  10a769:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  10a770:	49 8b 44 24 10       	mov    0x10(%r12),%rax
  10a775:	49 89 45 10          	mov    %rax,0x10(%r13)
  10a779:	49 8b 44 24 18       	mov    0x18(%r12),%rax
  10a77e:	49 89 45 18          	mov    %rax,0x18(%r13)
  10a782:	48 83 fa 48          	cmp    $0x48,%rdx
  10a786:	74 75                	je     10a7fd <_realloc_r+0x4ad>
  10a788:	49 8d 54 24 20       	lea    0x20(%r12),%rdx
  10a78d:	49 8d 45 20          	lea    0x20(%r13),%rax
  10a791:	e9 de fc ff ff       	jmpq   10a474 <_realloc_r+0x124>
  10a796:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10a79d:	00 00 00 
  10a7a0:	48 29 de             	sub    %rbx,%rsi
  10a7a3:	48 01 d9             	add    %rbx,%rcx
  10a7a6:	4c 89 f7             	mov    %r14,%rdi
  10a7a9:	4d 89 e5             	mov    %r12,%r13
  10a7ac:	48 83 ce 01          	or     $0x1,%rsi
  10a7b0:	48 89 0d d9 cd 03 00 	mov    %rcx,0x3cdd9(%rip)        # 147590 <__malloc_av_+0x10>
  10a7b7:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  10a7bb:	49 8b 44 24 f8       	mov    -0x8(%r12),%rax
  10a7c0:	83 e0 01             	and    $0x1,%eax
  10a7c3:	48 09 c3             	or     %rax,%rbx
  10a7c6:	49 89 5c 24 f8       	mov    %rbx,-0x8(%r12)
  10a7cb:	e8 90 6c ff ff       	callq  101460 <__malloc_unlock>
  10a7d0:	e9 29 fd ff ff       	jmpq   10a4fe <_realloc_r+0x1ae>
  10a7d5:	0f 1f 00             	nopl   (%rax)
  10a7d8:	49 8b 44 24 10       	mov    0x10(%r12),%rax
  10a7dd:	49 89 41 20          	mov    %rax,0x20(%r9)
  10a7e1:	49 8b 44 24 18       	mov    0x18(%r12),%rax
  10a7e6:	49 89 41 28          	mov    %rax,0x28(%r9)
  10a7ea:	48 83 fa 48          	cmp    $0x48,%rdx
  10a7ee:	74 2d                	je     10a81d <_realloc_r+0x4cd>
  10a7f0:	49 83 c4 20          	add    $0x20,%r12
  10a7f4:	49 8d 41 30          	lea    0x30(%r9),%rax
  10a7f8:	e9 f1 fd ff ff       	jmpq   10a5ee <_realloc_r+0x29e>
  10a7fd:	49 8b 44 24 20       	mov    0x20(%r12),%rax
  10a802:	49 8d 54 24 30       	lea    0x30(%r12),%rdx
  10a807:	49 89 45 20          	mov    %rax,0x20(%r13)
  10a80b:	49 8b 4c 24 28       	mov    0x28(%r12),%rcx
  10a810:	49 8d 45 30          	lea    0x30(%r13),%rax
  10a814:	49 89 4d 28          	mov    %rcx,0x28(%r13)
  10a818:	e9 57 fc ff ff       	jmpq   10a474 <_realloc_r+0x124>
  10a81d:	49 8b 44 24 20       	mov    0x20(%r12),%rax
  10a822:	49 83 c4 30          	add    $0x30,%r12
  10a826:	49 89 41 30          	mov    %rax,0x30(%r9)
  10a82a:	49 8b 54 24 f8       	mov    -0x8(%r12),%rdx
  10a82f:	49 8d 41 40          	lea    0x40(%r9),%rax
  10a833:	49 89 51 38          	mov    %rdx,0x38(%r9)
  10a837:	e9 b2 fd ff ff       	jmpq   10a5ee <_realloc_r+0x29e>
  10a83c:	4c 89 e6             	mov    %r12,%rsi
  10a83f:	4c 89 ef             	mov    %r13,%rdi
  10a842:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
  10a846:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
  10a84a:	e8 71 f9 ff ff       	callq  10a1c0 <memmove>
  10a84f:	4c 8b 4d c0          	mov    -0x40(%rbp),%r9
  10a853:	4c 8b 45 c8          	mov    -0x38(%rbp),%r8
  10a857:	e9 61 fe ff ff       	jmpq   10a6bd <_realloc_r+0x36d>
  10a85c:	49 8b 44 24 10       	mov    0x10(%r12),%rax
  10a861:	49 89 41 20          	mov    %rax,0x20(%r9)
  10a865:	49 8b 44 24 18       	mov    0x18(%r12),%rax
  10a86a:	49 89 41 28          	mov    %rax,0x28(%r9)
  10a86e:	48 83 fa 48          	cmp    $0x48,%rdx
  10a872:	74 0d                	je     10a881 <_realloc_r+0x531>
  10a874:	49 83 c4 20          	add    $0x20,%r12
  10a878:	49 8d 41 30          	lea    0x30(%r9),%rax
  10a87c:	e9 23 fe ff ff       	jmpq   10a6a4 <_realloc_r+0x354>
  10a881:	49 8b 44 24 20       	mov    0x20(%r12),%rax
  10a886:	49 83 c4 30          	add    $0x30,%r12
  10a88a:	49 89 41 30          	mov    %rax,0x30(%r9)
  10a88e:	49 8b 54 24 f8       	mov    -0x8(%r12),%rdx
  10a893:	49 8d 41 40          	lea    0x40(%r9),%rax
  10a897:	49 89 51 38          	mov    %rdx,0x38(%r9)
  10a89b:	e9 04 fe ff ff       	jmpq   10a6a4 <_realloc_r+0x354>

000000000010a8a0 <__ascii_wctomb>:
  10a8a0:	48 85 f6             	test   %rsi,%rsi
  10a8a3:	74 23                	je     10a8c8 <__ascii_wctomb+0x28>
  10a8a5:	81 fa ff 00 00 00    	cmp    $0xff,%edx
  10a8ab:	77 0b                	ja     10a8b8 <__ascii_wctomb+0x18>
  10a8ad:	88 16                	mov    %dl,(%rsi)
  10a8af:	b8 01 00 00 00       	mov    $0x1,%eax
  10a8b4:	c3                   	retq   
  10a8b5:	0f 1f 00             	nopl   (%rax)
  10a8b8:	c7 07 8a 00 00 00    	movl   $0x8a,(%rdi)
  10a8be:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  10a8c3:	c3                   	retq   
  10a8c4:	0f 1f 40 00          	nopl   0x0(%rax)
  10a8c8:	31 c0                	xor    %eax,%eax
  10a8ca:	c3                   	retq   
  10a8cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000010a8d0 <abort>:
  10a8d0:	55                   	push   %rbp
  10a8d1:	bf 06 00 00 00       	mov    $0x6,%edi
  10a8d6:	48 89 e5             	mov    %rsp,%rbp
  10a8d9:	e8 12 00 00 00       	callq  10a8f0 <raise>
  10a8de:	bf 01 00 00 00       	mov    $0x1,%edi
  10a8e3:	e8 ad 23 00 00       	callq  10cc95 <_exit>
  10a8e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10a8ef:	00 

000000000010a8f0 <raise>:
  10a8f0:	55                   	push   %rbp
  10a8f1:	48 89 e5             	mov    %rsp,%rbp
  10a8f4:	41 55                	push   %r13
  10a8f6:	4c 8b 2d fb da 03 00 	mov    0x3dafb(%rip),%r13        # 1483f8 <_impure_ptr>
  10a8fd:	41 54                	push   %r12
  10a8ff:	83 ff 1f             	cmp    $0x1f,%edi
  10a902:	77 7c                	ja     10a980 <raise+0x90>
  10a904:	49 8b 85 f8 01 00 00 	mov    0x1f8(%r13),%rax
  10a90b:	41 89 fc             	mov    %edi,%r12d
  10a90e:	48 85 c0             	test   %rax,%rax
  10a911:	74 2d                	je     10a940 <raise+0x50>
  10a913:	48 63 d7             	movslq %edi,%rdx
  10a916:	48 8d 14 d0          	lea    (%rax,%rdx,8),%rdx
  10a91a:	48 8b 02             	mov    (%rdx),%rax
  10a91d:	48 85 c0             	test   %rax,%rax
  10a920:	74 1e                	je     10a940 <raise+0x50>
  10a922:	48 83 f8 01          	cmp    $0x1,%rax
  10a926:	74 50                	je     10a978 <raise+0x88>
  10a928:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  10a92c:	74 32                	je     10a960 <raise+0x70>
  10a92e:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
  10a935:	ff d0                	callq  *%rax
  10a937:	31 c0                	xor    %eax,%eax
  10a939:	41 5c                	pop    %r12
  10a93b:	41 5d                	pop    %r13
  10a93d:	5d                   	pop    %rbp
  10a93e:	c3                   	retq   
  10a93f:	90                   	nop
  10a940:	4c 89 ef             	mov    %r13,%rdi
  10a943:	e8 98 00 00 00       	callq  10a9e0 <_getpid_r>
  10a948:	44 89 e2             	mov    %r12d,%edx
  10a94b:	4c 89 ef             	mov    %r13,%rdi
  10a94e:	41 5c                	pop    %r12
  10a950:	89 c6                	mov    %eax,%esi
  10a952:	41 5d                	pop    %r13
  10a954:	5d                   	pop    %rbp
  10a955:	e9 36 00 00 00       	jmpq   10a990 <_kill_r>
  10a95a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  10a960:	41 c7 45 00 16 00 00 	movl   $0x16,0x0(%r13)
  10a967:	00 
  10a968:	b8 01 00 00 00       	mov    $0x1,%eax
  10a96d:	41 5c                	pop    %r12
  10a96f:	41 5d                	pop    %r13
  10a971:	5d                   	pop    %rbp
  10a972:	c3                   	retq   
  10a973:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10a978:	41 5c                	pop    %r12
  10a97a:	31 c0                	xor    %eax,%eax
  10a97c:	41 5d                	pop    %r13
  10a97e:	5d                   	pop    %rbp
  10a97f:	c3                   	retq   
  10a980:	41 c7 45 00 16 00 00 	movl   $0x16,0x0(%r13)
  10a987:	00 
  10a988:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  10a98d:	eb aa                	jmp    10a939 <raise+0x49>
  10a98f:	90                   	nop

000000000010a990 <_kill_r>:
  10a990:	55                   	push   %rbp
  10a991:	31 c0                	xor    %eax,%eax
  10a993:	48 89 e5             	mov    %rsp,%rbp
  10a996:	53                   	push   %rbx
  10a997:	48 89 fb             	mov    %rdi,%rbx
  10a99a:	89 f7                	mov    %esi,%edi
  10a99c:	89 d6                	mov    %edx,%esi
  10a99e:	48 83 ec 08          	sub    $0x8,%rsp
  10a9a2:	c7 05 88 5a 01 00 00 	movl   $0x0,0x15a88(%rip)        # 120434 <errno>
  10a9a9:	00 00 00 
  10a9ac:	e8 d4 22 00 00       	callq  10cc85 <_kill>
  10a9b1:	83 f8 ff             	cmp    $0xffffffff,%eax
  10a9b4:	74 0a                	je     10a9c0 <_kill_r+0x30>
  10a9b6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  10a9ba:	c9                   	leaveq 
  10a9bb:	c3                   	retq   
  10a9bc:	0f 1f 40 00          	nopl   0x0(%rax)
  10a9c0:	8b 15 6e 5a 01 00    	mov    0x15a6e(%rip),%edx        # 120434 <errno>
  10a9c6:	85 d2                	test   %edx,%edx
  10a9c8:	74 ec                	je     10a9b6 <_kill_r+0x26>
  10a9ca:	89 13                	mov    %edx,(%rbx)
  10a9cc:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  10a9d0:	c9                   	leaveq 
  10a9d1:	c3                   	retq   
  10a9d2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10a9d9:	00 00 00 
  10a9dc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000010a9e0 <_getpid_r>:
  10a9e0:	31 c0                	xor    %eax,%eax
  10a9e2:	e9 a1 22 00 00       	jmpq   10cc88 <_getpid>

000000000010a9e7 <_OffsetAbsSyms>:
#include "ia32_offsets.c"
#endif

GEN_OFFSET_SYM(_thread_arch_t, flags);

GEN_ABS_SYM_END
  10a9e7:	c3                   	retq   

000000000010a9e8 <CNDF>:
#define inv_sqrt_2xPI 0.39894228040143270286



fptype CNDF ( fptype InputX ) 
{
  10a9e8:	55                   	push   %rbp
  10a9e9:	0f 28 c8             	movaps %xmm0,%xmm1
    fptype xK2_4, xK2_5;
    fptype xLocal, xLocal_1;
    fptype xLocal_2, xLocal_3;

    // Check for negative value of InputX
    if (InputX < 0.0) {
  10a9ec:	0f 57 c0             	xorps  %xmm0,%xmm0
{
  10a9ef:	48 89 e5             	mov    %rsp,%rbp
  10a9f2:	53                   	push   %rbx
        InputX = -InputX;
        sign = 1;
    } else 
        sign = 0;
  10a9f3:	31 db                	xor    %ebx,%ebx
{
  10a9f5:	48 83 ec 18          	sub    $0x18,%rsp
    if (InputX < 0.0) {
  10a9f9:	0f 2f c1             	comiss %xmm1,%xmm0
  10a9fc:	76 0c                	jbe    10aa0a <CNDF+0x22>
        InputX = -InputX;
  10a9fe:	0f 57 0d 8b 5c 00 00 	xorps  0x5c8b(%rip),%xmm1        # 110690 <__mprec_tens+0xd0>
        sign = 1;
  10aa05:	bb 01 00 00 00       	mov    $0x1,%ebx

    xInput = InputX;
 
    // Compute NPrimeX term common to both four & six decimal accuracy calcs
    expValues = exp(-0.5f * InputX * InputX);
  10aa0a:	f3 0f 10 05 5e 67 00 	movss  0x675e(%rip),%xmm0        # 111170 <p05.0+0x318>
  10aa11:	00 
  10aa12:	f3 0f 11 4d ec       	movss  %xmm1,-0x14(%rbp)
  10aa17:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
  10aa1b:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
  10aa1f:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
  10aa23:	e8 f8 57 ff ff       	callq  100220 <exp>
    xNPrimeofX = expValues;
    xNPrimeofX = xNPrimeofX * inv_sqrt_2xPI;

    xK2 = 0.2316419 * xInput;
  10aa28:	f3 0f 10 4d ec       	movss  -0x14(%rbp),%xmm1
    xK2 = 1.0 + xK2;
  10aa2d:	f3 0f 10 15 3f 67 00 	movss  0x673f(%rip),%xmm2        # 111174 <p05.0+0x31c>
  10aa34:	00 
    expValues = exp(-0.5f * InputX * InputX);
  10aa35:	0f 28 d8             	movaps %xmm0,%xmm3
    xK2 = 0.2316419 * xInput;
  10aa38:	f3 0f 5a c9          	cvtss2sd %xmm1,%xmm1
  10aa3c:	f2 0f 59 0d ec 5c 00 	mulsd  0x5cec(%rip),%xmm1        # 110730 <blanks.1+0x10>
  10aa43:	00 
    xK2 = 1.0 / xK2;
  10aa44:	0f 28 c2             	movaps %xmm2,%xmm0
    xK2 = 0.2316419 * xInput;
  10aa47:	f2 0f 5a c9          	cvtsd2ss %xmm1,%xmm1
    xK2 = 1.0 + xK2;
  10aa4b:	f3 0f 58 ca          	addss  %xmm2,%xmm1
    xK2 = 1.0 / xK2;
  10aa4f:	f3 0f 5e c1          	divss  %xmm1,%xmm0
    xK2_2 = xK2 * xK2;
  10aa53:	0f 28 e0             	movaps %xmm0,%xmm4
    xK2_3 = xK2_2 * xK2;
  10aa56:	0f 28 c8             	movaps %xmm0,%xmm1
    xK2_4 = xK2_3 * xK2;
  10aa59:	0f 28 f0             	movaps %xmm0,%xmm6
    xK2_5 = xK2_4 * xK2;
    
    xLocal_1 = xK2 * 0.319381530;
  10aa5c:	f3 0f 5a e8          	cvtss2sd %xmm0,%xmm5
    xK2_2 = xK2 * xK2;
  10aa60:	f3 0f 59 e0          	mulss  %xmm0,%xmm4
    xLocal_1 = xK2 * 0.319381530;
  10aa64:	f2 0f 59 2d cc 5c 00 	mulsd  0x5ccc(%rip),%xmm5        # 110738 <blanks.1+0x18>
  10aa6b:	00 
    xK2_3 = xK2_2 * xK2;
  10aa6c:	f3 0f 59 cc          	mulss  %xmm4,%xmm1
    xLocal_2 = xK2_2 * (-0.356563782);
  10aa70:	f3 0f 5a e4          	cvtss2sd %xmm4,%xmm4
  10aa74:	f2 0f 59 25 c4 5c 00 	mulsd  0x5cc4(%rip),%xmm4        # 110740 <blanks.1+0x20>
  10aa7b:	00 
    xLocal_1 = xK2 * 0.319381530;
  10aa7c:	f2 0f 5a ed          	cvtsd2ss %xmm5,%xmm5
    xK2_4 = xK2_3 * xK2;
  10aa80:	f3 0f 59 f1          	mulss  %xmm1,%xmm6
    xLocal_3 = xK2_3 * 1.781477937;
  10aa84:	f3 0f 5a c9          	cvtss2sd %xmm1,%xmm1
  10aa88:	f2 0f 59 0d b8 5c 00 	mulsd  0x5cb8(%rip),%xmm1        # 110748 <blanks.1+0x28>
  10aa8f:	00 
    xLocal_2 = xK2_2 * (-0.356563782);
  10aa90:	f2 0f 5a e4          	cvtsd2ss %xmm4,%xmm4
    xK2_5 = xK2_4 * xK2;
  10aa94:	f3 0f 59 c6          	mulss  %xmm6,%xmm0
    xLocal_3 = xK2_3 * 1.781477937;
  10aa98:	f2 0f 5a c9          	cvtsd2ss %xmm1,%xmm1
    xLocal_2 = xLocal_2 + xLocal_3;
  10aa9c:	f3 0f 58 cc          	addss  %xmm4,%xmm1
    xLocal_3 = xK2_4 * (-1.821255978);
  10aaa0:	f3 0f 5a e6          	cvtss2sd %xmm6,%xmm4
  10aaa4:	f2 0f 59 25 a4 5c 00 	mulsd  0x5ca4(%rip),%xmm4        # 110750 <blanks.1+0x30>
  10aaab:	00 
    xLocal_2 = xLocal_2 + xLocal_3;
    xLocal_3 = xK2_5 * 1.330274429;
  10aaac:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
  10aab0:	f2 0f 59 05 a0 5c 00 	mulsd  0x5ca0(%rip),%xmm0        # 110758 <blanks.1+0x38>
  10aab7:	00 
    xLocal_3 = xK2_4 * (-1.821255978);
  10aab8:	f2 0f 5a e4          	cvtsd2ss %xmm4,%xmm4
    xLocal_2 = xLocal_2 + xLocal_3;
  10aabc:	f3 0f 58 cc          	addss  %xmm4,%xmm1
    xLocal_3 = xK2_5 * 1.330274429;
  10aac0:	f2 0f 5a c0          	cvtsd2ss %xmm0,%xmm0
    xLocal_2 = xLocal_2 + xLocal_3;
  10aac4:	f3 0f 58 c1          	addss  %xmm1,%xmm0
    expValues = exp(-0.5f * InputX * InputX);
  10aac8:	f2 0f 5a cb          	cvtsd2ss %xmm3,%xmm1
    xNPrimeofX = xNPrimeofX * inv_sqrt_2xPI;
  10aacc:	f3 0f 5a c9          	cvtss2sd %xmm1,%xmm1
  10aad0:	f2 0f 59 0d 88 5c 00 	mulsd  0x5c88(%rip),%xmm1        # 110760 <blanks.1+0x40>
  10aad7:	00 

    xLocal_1 = xLocal_2 + xLocal_1;
  10aad8:	f3 0f 58 c5          	addss  %xmm5,%xmm0
    xNPrimeofX = xNPrimeofX * inv_sqrt_2xPI;
  10aadc:	f2 0f 5a c9          	cvtsd2ss %xmm1,%xmm1
    xLocal   = xLocal_1 * xNPrimeofX;
  10aae0:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
    xLocal   = 1.0 - xLocal;
  10aae4:	0f 28 ca             	movaps %xmm2,%xmm1
  10aae7:	f3 0f 5c c8          	subss  %xmm0,%xmm1

    OutputX  = xLocal;
    
    if (sign) {
  10aaeb:	85 db                	test   %ebx,%ebx
  10aaed:	74 07                	je     10aaf6 <CNDF+0x10e>
        OutputX = 1.0 - OutputX;
  10aaef:	f3 0f 5c d1          	subss  %xmm1,%xmm2
  10aaf3:	0f 28 ca             	movaps %xmm2,%xmm1
    }
    
    return OutputX;
} 
  10aaf6:	48 83 c4 18          	add    $0x18,%rsp
  10aafa:	0f 28 c1             	movaps %xmm1,%xmm0
  10aafd:	5b                   	pop    %rbx
  10aafe:	5d                   	pop    %rbp
  10aaff:	c3                   	retq   

000000000010ab00 <BlkSchlsEqEuroNoDiv>:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
fptype BlkSchlsEqEuroNoDiv( fptype sptprice,
                            fptype strike, fptype rate, fptype volatility,
                            fptype time, int otype, float timet )
{
  10ab00:	55                   	push   %rbp
  10ab01:	48 89 e5             	mov    %rsp,%rbp
  10ab04:	53                   	push   %rbx
  10ab05:	89 fb                	mov    %edi,%ebx
  10ab07:	48 83 ec 28          	sub    $0x28,%rsp
  10ab0b:	f3 0f 11 55 e0       	movss  %xmm2,-0x20(%rbp)
  10ab10:	f3 0f 11 4d e4       	movss  %xmm1,-0x1c(%rbp)
  10ab15:	f3 0f 11 5d d4       	movss  %xmm3,-0x2c(%rbp)
  10ab1a:	f3 0f 11 65 e8       	movss  %xmm4,-0x18(%rbp)
  10ab1f:	f3 0f 11 45 ec       	movss  %xmm0,-0x14(%rbp)
    xStrikePrice = strike;
    xRiskFreeRate = rate;
    xVolatility = volatility;

    xTime = time;
    xSqrtTime = sqrt(xTime);
  10ab24:	f3 0f 5a c4          	cvtss2sd %xmm4,%xmm0
  10ab28:	e8 f3 57 ff ff       	callq  100320 <sqrt>
  10ab2d:	f2 0f 11 45 d8       	movsd  %xmm0,-0x28(%rbp)

    logValues = log( sptprice / strike );
  10ab32:	f3 0f 10 45 ec       	movss  -0x14(%rbp),%xmm0
  10ab37:	f3 0f 5e 45 e4       	divss  -0x1c(%rbp),%xmm0
  10ab3c:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
  10ab40:	e8 6b 57 ff ff       	callq  1002b0 <log>
        
    xLogTerm = logValues;
        
    
    xPowerTerm = xVolatility * xVolatility;
  10ab45:	f3 0f 10 6d d4       	movss  -0x2c(%rbp),%xmm5
    xPowerTerm = xPowerTerm * 0.5;
        
    xD1 = xRiskFreeRate + xPowerTerm;
    xD1 = xD1 * xTime;
  10ab4a:	f3 0f 10 65 e8       	movss  -0x18(%rbp),%xmm4
    logValues = log( sptprice / strike );
  10ab4f:	0f 28 c8             	movaps %xmm0,%xmm1
    xSqrtTime = sqrt(xTime);
  10ab52:	f2 0f 10 5d d8       	movsd  -0x28(%rbp),%xmm3
    xPowerTerm = xVolatility * xVolatility;
  10ab57:	0f 28 c5             	movaps %xmm5,%xmm0
  10ab5a:	f3 0f 59 c5          	mulss  %xmm5,%xmm0
    xSqrtTime = sqrt(xTime);
  10ab5e:	f2 0f 5a db          	cvtsd2ss %xmm3,%xmm3
    xPowerTerm = xPowerTerm * 0.5;
  10ab62:	f3 0f 59 05 0e 66 00 	mulss  0x660e(%rip),%xmm0        # 111178 <p05.0+0x320>
  10ab69:	00 
    xD1 = xRiskFreeRate + xPowerTerm;
  10ab6a:	f3 0f 58 45 e0       	addss  -0x20(%rbp),%xmm0
    xD1 = xD1 + xLogTerm;

    xDen = xVolatility * xSqrtTime;
  10ab6f:	f3 0f 59 dd          	mulss  %xmm5,%xmm3
    xD1 = xD1 * xTime;
  10ab73:	f3 0f 59 e0          	mulss  %xmm0,%xmm4
    logValues = log( sptprice / strike );
  10ab77:	f2 0f 5a c1          	cvtsd2ss %xmm1,%xmm0
    xD1 = xD1 + xLogTerm;
  10ab7b:	f3 0f 58 c4          	addss  %xmm4,%xmm0
    xD1 = xD1 / xDen;
  10ab7f:	f3 0f 5e c3          	divss  %xmm3,%xmm0
    xD2 = xD1 -  xDen;
  10ab83:	0f 28 c8             	movaps %xmm0,%xmm1
  10ab86:	f3 0f 5c cb          	subss  %xmm3,%xmm1
  10ab8a:	f3 0f 11 4d d8       	movss  %xmm1,-0x28(%rbp)

    d1 = xD1;
    d2 = xD2;
    
    NofXd1 = CNDF( d1 );
  10ab8f:	e8 54 fe ff ff       	callq  10a9e8 <CNDF>
    NofXd2 = CNDF( d2 );
  10ab94:	f3 0f 10 4d d8       	movss  -0x28(%rbp),%xmm1
    NofXd1 = CNDF( d1 );
  10ab99:	f3 0f 11 45 d4       	movss  %xmm0,-0x2c(%rbp)
    NofXd2 = CNDF( d2 );
  10ab9e:	0f 28 c1             	movaps %xmm1,%xmm0
  10aba1:	e8 42 fe ff ff       	callq  10a9e8 <CNDF>
  10aba6:	f3 0f 11 45 d8       	movss  %xmm0,-0x28(%rbp)

    FutureValueX = strike * ( exp( -(rate)*(time) ) );        
  10abab:	f3 0f 10 45 e0       	movss  -0x20(%rbp),%xmm0
  10abb0:	0f 57 05 d9 5a 00 00 	xorps  0x5ad9(%rip),%xmm0        # 110690 <__mprec_tens+0xd0>
  10abb7:	f3 0f 59 45 e8       	mulss  -0x18(%rbp),%xmm0
  10abbc:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
  10abc0:	e8 5b 56 ff ff       	callq  100220 <exp>
    if (otype == 0) {            
  10abc5:	85 db                	test   %ebx,%ebx
  10abc7:	f3 0f 10 65 d8       	movss  -0x28(%rbp),%xmm4
    FutureValueX = strike * ( exp( -(rate)*(time) ) );        
  10abcc:	0f 28 c8             	movaps %xmm0,%xmm1
  10abcf:	f3 0f 5a 45 e4       	cvtss2sd -0x1c(%rbp),%xmm0
    if (otype == 0) {            
  10abd4:	f3 0f 10 5d d4       	movss  -0x2c(%rbp),%xmm3
    FutureValueX = strike * ( exp( -(rate)*(time) ) );        
  10abd9:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
  10abdd:	f2 0f 5a c0          	cvtsd2ss %xmm0,%xmm0
    if (otype == 0) {            
  10abe1:	75 12                	jne    10abf5 <BlkSchlsEqEuroNoDiv+0xf5>
        OptionPrice = (sptprice * NofXd1) - (FutureValueX * NofXd2);
  10abe3:	f3 0f 59 e0          	mulss  %xmm0,%xmm4
  10abe7:	f3 0f 59 5d ec       	mulss  -0x14(%rbp),%xmm3
  10abec:	f3 0f 5c dc          	subss  %xmm4,%xmm3
  10abf0:	0f 28 c3             	movaps %xmm3,%xmm0
  10abf3:	eb 20                	jmp    10ac15 <BlkSchlsEqEuroNoDiv+0x115>
    } else { 
        NegNofXd1 = (1.0 - NofXd1);
        NegNofXd2 = (1.0 - NofXd2);
  10abf5:	f3 0f 10 15 77 65 00 	movss  0x6577(%rip),%xmm2        # 111174 <p05.0+0x31c>
  10abfc:	00 
  10abfd:	0f 28 ca             	movaps %xmm2,%xmm1
        NegNofXd1 = (1.0 - NofXd1);
  10ac00:	f3 0f 5c d3          	subss  %xmm3,%xmm2
        NegNofXd2 = (1.0 - NofXd2);
  10ac04:	f3 0f 5c cc          	subss  %xmm4,%xmm1
        OptionPrice = (FutureValueX * NegNofXd2) - (sptprice * NegNofXd1);
  10ac08:	f3 0f 59 55 ec       	mulss  -0x14(%rbp),%xmm2
  10ac0d:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
  10ac11:	f3 0f 5c c2          	subss  %xmm2,%xmm0
    }
    
    return OptionPrice;
}
  10ac15:	48 83 c4 28          	add    $0x28,%rsp
  10ac19:	5b                   	pop    %rbx
  10ac1a:	5d                   	pop    %rbp
  10ac1b:	c3                   	retq   

000000000010ac1c <bs_thread>:
#else // !ENABLE_TBB

#ifdef WIN32
DWORD WINAPI bs_thread(LPVOID tid_ptr){
#else
int bs_thread(void *tid_ptr) {
  10ac1c:	55                   	push   %rbp
  10ac1d:	48 89 e5             	mov    %rsp,%rbp
  10ac20:	41 57                	push   %r15
    fptype priceDelta;
    int tid = *(int *)tid_ptr;
    int start = tid * (numOptions / nThreads);
    int end = start + (numOptions / nThreads);
    
	printf("Thread %d/%d %d %d\n", tid, nThreads, start, end);
  10ac22:	41 bf f4 01 00 00    	mov    $0x1f4,%r15d
int bs_thread(void *tid_ptr) {
  10ac28:	41 56                	push   %r14
  10ac2a:	41 55                	push   %r13
  10ac2c:	41 54                	push   %r12
  10ac2e:	49 89 fc             	mov    %rdi,%r12
  10ac31:	53                   	push   %rbx
  10ac32:	48 83 ec 28          	sub    $0x28,%rsp
    int start = tid * (numOptions / nThreads);
  10ac36:	8b 05 dc 57 01 00    	mov    0x157dc(%rip),%eax        # 120418 <numOptions>
  10ac3c:	44 8b 0d cd 57 01 00 	mov    0x157cd(%rip),%r9d        # 120410 <nThreads>
    int tid = *(int *)tid_ptr;
  10ac43:	8b 37                	mov    (%rdi),%esi
	printf("Thread %d/%d %d %d\n", tid, nThreads, start, end);
  10ac45:	bf 80 11 11 00       	mov    $0x111180,%edi
    int start = tid * (numOptions / nThreads);
  10ac4a:	99                   	cltd   
  10ac4b:	41 f7 f9             	idiv   %r9d
	printf("Thread %d/%d %d %d\n", tid, nThreads, start, end);
  10ac4e:	44 89 ca             	mov    %r9d,%edx
    int start = tid * (numOptions / nThreads);
  10ac51:	41 89 c6             	mov    %eax,%r14d
  10ac54:	44 0f af f6          	imul   %esi,%r14d
    int end = start + (numOptions / nThreads);
  10ac58:	44 01 f0             	add    %r14d,%eax
	printf("Thread %d/%d %d %d\n", tid, nThreads, start, end);
  10ac5b:	44 89 f1             	mov    %r14d,%ecx
    int end = start + (numOptions / nThreads);
  10ac5e:	89 45 cc             	mov    %eax,-0x34(%rbp)
	printf("Thread %d/%d %d %d\n", tid, nThreads, start, end);
  10ac61:	41 89 c0             	mov    %eax,%r8d
  10ac64:	31 c0                	xor    %eax,%eax
  10ac66:	e8 05 68 ff ff       	callq  101470 <printf>

//	__bsHold = 1;
//	while (__bsHold)
//	  ;

    for (j=0; j<NUM_RUNS; j++) {
  10ac6b:	49 63 c6             	movslq %r14d,%rax
  10ac6e:	48 c1 e0 02          	shl    $0x2,%rax
  10ac72:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
int bs_thread(void *tid_ptr) {
  10ac76:	48 8b 5d c0          	mov    -0x40(%rbp),%rbx
#ifdef ENABLE_OPENMP
#pragma omp parallel for private(i, price, priceDelta)
        for (i=0; i<numOptions; i++) {
#else  //ENABLE_OPENMP
        for (i=start; i<end; i++) {
  10ac7a:	45 89 f5             	mov    %r14d,%r13d
  10ac7d:	44 3b 6d cc          	cmp    -0x34(%rbp),%r13d
  10ac81:	0f 8d d3 00 00 00    	jge    10ad5a <bs_thread+0x13e>
#endif //ENABLE_OPENMP
            /* Calling main function to calculate option value based on 
             * Black & Scholes's equation.
             */
            price = BlkSchlsEqEuroNoDiv( sptprice[i], strike[i],
  10ac87:	48 8b 05 fa 56 01 00 	mov    0x156fa(%rip),%rax        # 120388 <otype>
  10ac8e:	0f 57 ed             	xorps  %xmm5,%xmm5
  10ac91:	8b 3c 18             	mov    (%rax,%rbx,1),%edi
  10ac94:	48 8b 05 e5 56 01 00 	mov    0x156e5(%rip),%rax        # 120380 <sptprice>
  10ac9b:	f3 0f 10 04 18       	movss  (%rax,%rbx,1),%xmm0
  10aca0:	48 8b 05 b9 56 01 00 	mov    0x156b9(%rip),%rax        # 120360 <otime>
  10aca7:	f3 0f 10 24 18       	movss  (%rax,%rbx,1),%xmm4
  10acac:	48 8b 05 b5 56 01 00 	mov    0x156b5(%rip),%rax        # 120368 <volatility>
  10acb3:	f3 0f 10 1c 18       	movss  (%rax,%rbx,1),%xmm3
  10acb8:	48 8b 05 b1 56 01 00 	mov    0x156b1(%rip),%rax        # 120370 <rate>
  10acbf:	f3 0f 10 14 18       	movss  (%rax,%rbx,1),%xmm2
  10acc4:	48 8b 05 ad 56 01 00 	mov    0x156ad(%rip),%rax        # 120378 <strike>
  10accb:	f3 0f 10 0c 18       	movss  (%rax,%rbx,1),%xmm1
  10acd0:	e8 2b fe ff ff       	callq  10ab00 <BlkSchlsEqEuroNoDiv>
                                         rate[i], volatility[i], otime[i], 
                                         otype[i], 0);
           prices[i] = price;
  10acd5:	48 8b 05 b4 56 01 00 	mov    0x156b4(%rip),%rax        # 120390 <prices>
	    
#ifdef ERR_CHK
            priceDelta = data[i].DGrefval - price;
  10acdc:	48 8b 0d b5 56 01 00 	mov    0x156b5(%rip),%rcx        # 120398 <data>
  10ace3:	f3 0f 11 45 c8       	movss  %xmm0,-0x38(%rbp)
           prices[i] = price;
  10ace8:	f3 0f 11 04 18       	movss  %xmm0,(%rax,%rbx,1)
            priceDelta = data[i].DGrefval - price;
  10aced:	48 8d 04 db          	lea    (%rbx,%rbx,8),%rax
  10acf1:	f3 0f 10 54 01 20    	movss  0x20(%rcx,%rax,1),%xmm2
  10acf7:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  10acfb:	f3 0f 5c d0          	subss  %xmm0,%xmm2
            if( fabs(priceDelta) >= 1e-4 ){
  10acff:	f3 0f 5a d2          	cvtss2sd %xmm2,%xmm2
  10ad03:	0f 28 c2             	movaps %xmm2,%xmm0
  10ad06:	f2 0f 11 55 b8       	movsd  %xmm2,-0x48(%rbp)
  10ad0b:	e8 00 55 ff ff       	callq  100210 <fabs>
  10ad10:	f2 0f 10 55 b8       	movsd  -0x48(%rbp),%xmm2
  10ad15:	f3 0f 10 4d c8       	movss  -0x38(%rbp),%xmm1
  10ad1a:	66 0f 2f 05 46 5a 00 	comisd 0x5a46(%rip),%xmm0        # 110768 <blanks.1+0x48>
  10ad21:	00 
  10ad22:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10ad26:	72 26                	jb     10ad4e <bs_thread+0x132>
                printf("Error on %d. Computed=%.5f, Ref=%.5f, Delta=%.5f\n",
  10ad28:	48 8b 0d 69 56 01 00 	mov    0x15669(%rip),%rcx        # 120398 <data>
  10ad2f:	f3 0f 5a c1          	cvtss2sd %xmm1,%xmm0
  10ad33:	44 89 ee             	mov    %r13d,%esi
  10ad36:	bf 94 11 11 00       	mov    $0x111194,%edi
  10ad3b:	f3 0f 5a 4c 01 20    	cvtss2sd 0x20(%rcx,%rax,1),%xmm1
  10ad41:	b0 03                	mov    $0x3,%al
  10ad43:	e8 28 67 ff ff       	callq  101470 <printf>
                       i, price, data[i].DGrefval, priceDelta);
                numError ++;
  10ad48:	ff 05 c6 56 01 00    	incl   0x156c6(%rip)        # 120414 <numError>
        for (i=start; i<end; i++) {
  10ad4e:	41 ff c5             	inc    %r13d
  10ad51:	48 83 c3 04          	add    $0x4,%rbx
  10ad55:	e9 23 ff ff ff       	jmpq   10ac7d <bs_thread+0x61>
    for (j=0; j<NUM_RUNS; j++) {
  10ad5a:	41 ff cf             	dec    %r15d
  10ad5d:	0f 85 13 ff ff ff    	jne    10ac76 <bs_thread+0x5a>
#endif
        }
    }

//	if (tid % 2) migrate(0, NULL, NULL);
	pthread_exit(tid_ptr);
  10ad63:	4c 89 e7             	mov    %r12,%rdi
  10ad66:	e8 db 23 00 00       	callq  10d146 <pthread_exit>
    return 0;
}
  10ad6b:	48 83 c4 28          	add    $0x28,%rsp
  10ad6f:	31 c0                	xor    %eax,%eax
  10ad71:	5b                   	pop    %rbx
  10ad72:	41 5c                	pop    %r12
  10ad74:	41 5d                	pop    %r13
  10ad76:	41 5e                	pop    %r14
  10ad78:	41 5f                	pop    %r15
  10ad7a:	5d                   	pop    %rbp
  10ad7b:	c3                   	retq   

000000000010ad7c <blackscholes_main>:
#endif //ENABLE_TBB
OptionData data_compute[1000];
int blackscholes_main ()
{
  10ad7c:	55                   	push   %rbp
    int i;
    int loopnum;
    fptype * buffer;
    int * buffer2;
    int rv;
    init_data_init();
  10ad7d:	31 c0                	xor    %eax,%eax
{
  10ad7f:	48 89 e5             	mov    %rsp,%rbp
  10ad82:	41 57                	push   %r15
  10ad84:	41 56                	push   %r14
  10ad86:	41 55                	push   %r13
  10ad88:	41 54                	push   %r12
  10ad8a:	53                   	push   %rbx
  10ad8b:	bb 00 20 11 00       	mov    $0x112000,%ebx
  10ad90:	48 83 ec 28          	sub    $0x28,%rsp
    init_data_init();
  10ad94:	e8 1e 06 00 00       	callq  10b3b7 <init_data_init>
#ifdef PARSEC_VERSION
#define __PARSEC_STRING(x) #x
#define __PARSEC_XSTRING(x) __PARSEC_STRING(x)
        printf("PARSEC Benchmark Suite Version "__PARSEC_XSTRING(PARSEC_VERSION)"\n");
#else
        printf("PARSEC Benchmark Suite\n");
  10ad99:	bf c6 11 11 00       	mov    $0x1111c6,%edi
  10ad9e:	31 c0                	xor    %eax,%eax
  10ada0:	e8 cb 66 ff ff       	callq  101470 <printf>
  10ada5:	48 89 d8             	mov    %rbx,%rax
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
  10ada8:	ba a0 b2 11 00       	mov    $0x11b2a0,%edx
  10adad:	48 89 c7             	mov    %rax,%rdi
#endif //PARSEC_VERSION
#ifdef ENABLE_PARSEC_HOOKS
   __parsec_bench_begin(__parsec_blackscholes);
#endif
	for(int i = 0 ; i < 250 ; i++)
  10adb0:	48 05 90 00 00 00    	add    $0x90,%rax
  10adb6:	b9 24 00 00 00       	mov    $0x24,%ecx
  10adbb:	48 89 d6             	mov    %rdx,%rsi
  10adbe:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  10adc0:	48 3d a0 ac 11 00    	cmp    $0x11aca0,%rax
  10adc6:	75 e5                	jne    10adad <blackscholes_main+0x31>
	}
//	data = data_compute;
//	memcpy((void*)0x30000000, (void*)datainit , 1000*sizeof(OptionData));
	for(int loopnum = 0 ; loopnum<4; loopnum++)
        {
        printf("i copied %f %f %f %f %f %f %c %f %f\n", data_compute[loopnum].s, data_compute[loopnum].strike, data_compute[loopnum].r, data_compute[loopnum].divq, data_compute[loopnum].v, data_compute[loopnum].t, data_compute[loopnum].OptionType, data_compute[loopnum].divs, data_compute[loopnum].DGrefval);
  10adc8:	0f be 73 18          	movsbl 0x18(%rbx),%esi
  10adcc:	f3 0f 5a 03          	cvtss2sd (%rbx),%xmm0
  10add0:	f3 0f 5a 7b 20       	cvtss2sd 0x20(%rbx),%xmm7
  10add5:	f3 0f 5a 73 1c       	cvtss2sd 0x1c(%rbx),%xmm6
  10adda:	f3 0f 5a 6b 14       	cvtss2sd 0x14(%rbx),%xmm5
  10addf:	f3 0f 5a 63 10       	cvtss2sd 0x10(%rbx),%xmm4
  10ade4:	f3 0f 5a 5b 0c       	cvtss2sd 0xc(%rbx),%xmm3
  10ade9:	f3 0f 5a 53 08       	cvtss2sd 0x8(%rbx),%xmm2
  10adee:	f3 0f 5a 4b 04       	cvtss2sd 0x4(%rbx),%xmm1
  10adf3:	bf de 11 11 00       	mov    $0x1111de,%edi
  10adf8:	b0 08                	mov    $0x8,%al
	for(int loopnum = 0 ; loopnum<4; loopnum++)
  10adfa:	48 83 c3 24          	add    $0x24,%rbx
        printf("i copied %f %f %f %f %f %f %c %f %f\n", data_compute[loopnum].s, data_compute[loopnum].strike, data_compute[loopnum].r, data_compute[loopnum].divq, data_compute[loopnum].v, data_compute[loopnum].t, data_compute[loopnum].OptionType, data_compute[loopnum].divs, data_compute[loopnum].DGrefval);
  10adfe:	e8 6d 66 ff ff       	callq  101470 <printf>
	for(int loopnum = 0 ; loopnum<4; loopnum++)
  10ae03:	48 81 fb 90 20 11 00 	cmp    $0x112090,%rbx
  10ae0a:	75 bc                	jne    10adc8 <blackscholes_main+0x4c>
        {
                printf("Usage:\n\t%s <nthreads> <inputFile> <outputFile>\n", argv[0]);
                exit(1);
        }
*/
    nThreads = 4;
  10ae0c:	c7 05 fa 55 01 00 04 	movl   $0x4,0x155fa(%rip)        # 120410 <nThreads>
  10ae13:	00 00 00 
    }
#endif

    // alloc spaces for the option data
	data = data_compute;
    prices = (fptype*)malloc(numOptions*sizeof(fptype));
  10ae16:	bf 50 00 00 00       	mov    $0x50,%edi
    numOptions = 20;
  10ae1b:	c7 05 f3 55 01 00 14 	movl   $0x14,0x155f3(%rip)        # 120418 <numOptions>
  10ae22:	00 00 00 
	data = data_compute;
  10ae25:	48 c7 05 68 55 01 00 	movq   $0x112000,0x15568(%rip)        # 120398 <data>
  10ae2c:	00 20 11 00 
    prices = (fptype*)malloc(numOptions*sizeof(fptype));
  10ae30:	e8 0b 5d ff ff       	callq  100b40 <malloc>
  10ae35:	48 89 05 54 55 01 00 	mov    %rax,0x15554(%rip)        # 120390 <prices>

#ifdef ENABLE_THREADS
    
    pthread_mutexattr_init( &_M4_normalMutexAttr);
//    pthread_mutexattr_settype( &_M4_normalMutexAttr, PTHREAD_MUTEX_NORMAL);
    _M4_numThreads = nThreads;
  10ae3c:	8b 05 ce 55 01 00    	mov    0x155ce(%rip),%eax        # 120410 <nThreads>
  10ae42:	89 05 b8 d5 03 00    	mov    %eax,0x3d5b8(%rip)        # 148400 <_M4_numThreads>
  10ae48:	31 c0                	xor    %eax,%eax
    {
        int _M4_i;
        for ( _M4_i = 0; _M4_i < MAX_THREADS; _M4_i++) {
            _M4_threadsTableAllocated[_M4_i] = 0;
  10ae4a:	c7 04 85 a0 ac 11 00 	movl   $0x0,0x11aca0(,%rax,4)
  10ae51:	00 00 00 00 
        for ( _M4_i = 0; _M4_i < MAX_THREADS; _M4_i++) {
  10ae55:	48 ff c0             	inc    %rax
  10ae58:	48 3d 80 00 00 00    	cmp    $0x80,%rax
  10ae5e:	75 ea                	jne    10ae4a <blackscholes_main+0xce>
        }
    }
;
#endif
    printf("Num of Options: %d\n", numOptions);
  10ae60:	8b 35 b2 55 01 00    	mov    0x155b2(%rip),%esi        # 120418 <numOptions>
  10ae66:	bf 03 12 11 00       	mov    $0x111203,%edi
  10ae6b:	31 c0                	xor    %eax,%eax
  10ae6d:	e8 fe 65 ff ff       	callq  101470 <printf>
    printf("Num of Runs: %d\n", NUM_RUNS);
  10ae72:	be f4 01 00 00       	mov    $0x1f4,%esi
  10ae77:	bf 17 12 11 00       	mov    $0x111217,%edi
  10ae7c:	31 c0                	xor    %eax,%eax
  10ae7e:	e8 ed 65 ff ff       	callq  101470 <printf>

#define PAD 256
#define LINESIZE 64

    buffer = (fptype *) malloc(5 * numOptions * sizeof(fptype) + PAD);
  10ae83:	6b 05 8e 55 01 00 05 	imul   $0x5,0x1558e(%rip),%eax        # 120418 <numOptions>
  10ae8a:	48 98                	cltq   
  10ae8c:	48 8d 3c 85 00 01 00 	lea    0x100(,%rax,4),%rdi
  10ae93:	00 
  10ae94:	e8 a7 5c ff ff       	callq  100b40 <malloc>
    sptprice = (fptype *) (((unsigned long long)buffer + PAD) & ~(LINESIZE - 1));
    strike = sptprice + numOptions;
  10ae99:	48 63 3d 78 55 01 00 	movslq 0x15578(%rip),%rdi        # 120418 <numOptions>
    sptprice = (fptype *) (((unsigned long long)buffer + PAD) & ~(LINESIZE - 1));
  10aea0:	48 05 00 01 00 00    	add    $0x100,%rax
    strike = sptprice + numOptions;
  10aea6:	48 c1 e7 02          	shl    $0x2,%rdi
    sptprice = (fptype *) (((unsigned long long)buffer + PAD) & ~(LINESIZE - 1));
  10aeaa:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
  10aeae:	48 89 05 cb 54 01 00 	mov    %rax,0x154cb(%rip)        # 120380 <sptprice>
    strike = sptprice + numOptions;
  10aeb5:	48 01 f8             	add    %rdi,%rax
  10aeb8:	48 89 05 b9 54 01 00 	mov    %rax,0x154b9(%rip)        # 120378 <strike>
    rate = strike + numOptions;
  10aebf:	48 01 f8             	add    %rdi,%rax
  10aec2:	48 89 05 a7 54 01 00 	mov    %rax,0x154a7(%rip)        # 120370 <rate>
    volatility = rate + numOptions;
  10aec9:	48 01 f8             	add    %rdi,%rax
  10aecc:	48 89 05 95 54 01 00 	mov    %rax,0x15495(%rip)        # 120368 <volatility>
    otime = volatility + numOptions;
  10aed3:	48 01 f8             	add    %rdi,%rax

    buffer2 = (int *) malloc(numOptions * sizeof(fptype) + PAD);
  10aed6:	48 81 c7 00 01 00 00 	add    $0x100,%rdi
    otime = volatility + numOptions;
  10aedd:	48 89 05 7c 54 01 00 	mov    %rax,0x1547c(%rip)        # 120360 <otime>
    buffer2 = (int *) malloc(numOptions * sizeof(fptype) + PAD);
  10aee4:	e8 57 5c ff ff       	callq  100b40 <malloc>
    otype = (int *) (((unsigned long long)buffer2 + PAD) & ~(LINESIZE - 1));

    for (i=0; i<numOptions; i++) {
        otype[i]      = (data[i].OptionType == 'P') ? 1 : 0;
  10aee9:	4c 8b 05 a8 54 01 00 	mov    0x154a8(%rip),%r8        # 120398 <data>
    for (i=0; i<numOptions; i++) {
  10aef0:	31 ff                	xor    %edi,%edi
        sptprice[i]   = data[i].s;
  10aef2:	4c 8b 0d 87 54 01 00 	mov    0x15487(%rip),%r9        # 120380 <sptprice>
    otype = (int *) (((unsigned long long)buffer2 + PAD) & ~(LINESIZE - 1));
  10aef9:	48 8d 88 00 01 00 00 	lea    0x100(%rax),%rcx
        strike[i]     = data[i].strike;
  10af00:	4c 8b 15 71 54 01 00 	mov    0x15471(%rip),%r10        # 120378 <strike>
        rate[i]       = data[i].r;
  10af07:	4c 8b 1d 62 54 01 00 	mov    0x15462(%rip),%r11        # 120370 <rate>
    otype = (int *) (((unsigned long long)buffer2 + PAD) & ~(LINESIZE - 1));
  10af0e:	48 83 e1 c0          	and    $0xffffffffffffffc0,%rcx
        volatility[i] = data[i].v;    
  10af12:	48 8b 1d 4f 54 01 00 	mov    0x1544f(%rip),%rbx        # 120368 <volatility>
        otime[i]      = data[i].t;
  10af19:	4c 8b 25 40 54 01 00 	mov    0x15440(%rip),%r12        # 120360 <otime>
    otype = (int *) (((unsigned long long)buffer2 + PAD) & ~(LINESIZE - 1));
  10af20:	48 89 0d 61 54 01 00 	mov    %rcx,0x15461(%rip)        # 120388 <otype>
    for (i=0; i<numOptions; i++) {
  10af27:	48 63 35 ea 54 01 00 	movslq 0x154ea(%rip),%rsi        # 120418 <numOptions>
  10af2e:	39 fe                	cmp    %edi,%esi
  10af30:	7e 50                	jle    10af82 <blackscholes_main+0x206>
        otype[i]      = (data[i].OptionType == 'P') ? 1 : 0;
  10af32:	48 63 d7             	movslq %edi,%rdx
  10af35:	31 f6                	xor    %esi,%esi
  10af37:	48 6b c2 24          	imul   $0x24,%rdx,%rax
  10af3b:	4c 01 c0             	add    %r8,%rax
  10af3e:	80 78 18 50          	cmpb   $0x50,0x18(%rax)
        sptprice[i]   = data[i].s;
  10af42:	f3 0f 10 00          	movss  (%rax),%xmm0
        otype[i]      = (data[i].OptionType == 'P') ? 1 : 0;
  10af46:	40 0f 94 c6          	sete   %sil
    for (i=0; i<numOptions; i++) {
  10af4a:	ff c7                	inc    %edi
        otype[i]      = (data[i].OptionType == 'P') ? 1 : 0;
  10af4c:	89 34 91             	mov    %esi,(%rcx,%rdx,4)
        sptprice[i]   = data[i].s;
  10af4f:	f3 41 0f 11 04 91    	movss  %xmm0,(%r9,%rdx,4)
        strike[i]     = data[i].strike;
  10af55:	f3 0f 10 40 04       	movss  0x4(%rax),%xmm0
  10af5a:	f3 41 0f 11 04 92    	movss  %xmm0,(%r10,%rdx,4)
        rate[i]       = data[i].r;
  10af60:	f3 0f 10 40 08       	movss  0x8(%rax),%xmm0
  10af65:	f3 41 0f 11 04 93    	movss  %xmm0,(%r11,%rdx,4)
        volatility[i] = data[i].v;    
  10af6b:	f3 0f 10 40 10       	movss  0x10(%rax),%xmm0
  10af70:	f3 0f 11 04 93       	movss  %xmm0,(%rbx,%rdx,4)
        otime[i]      = data[i].t;
  10af75:	f3 0f 10 40 14       	movss  0x14(%rax),%xmm0
  10af7a:	f3 41 0f 11 04 94    	movss  %xmm0,(%r12,%rdx,4)
    for (i=0; i<numOptions; i++) {
  10af80:	eb a5                	jmp    10af27 <blackscholes_main+0x1ab>
    }

    printf("Size of data: %d\n", numOptions * (sizeof(OptionData) + sizeof(int)));
  10af82:	48 6b f6 28          	imul   $0x28,%rsi,%rsi
  10af86:	bf 28 12 11 00       	mov    $0x111228,%edi
  10af8b:	31 c0                	xor    %eax,%eax
    free(nums);
#else
    int *tids;
    tids = (int *) malloc (nThreads * sizeof(int));
    pthread_attr_t attr[nThreads];
    for(i=0; i<nThreads; i++) {
  10af8d:	45 31 e4             	xor    %r12d,%r12d
    printf("Size of data: %d\n", numOptions * (sizeof(OptionData) + sizeof(int)));
  10af90:	e8 db 64 ff ff       	callq  101470 <printf>
    tids = (int *) malloc (nThreads * sizeof(int));
  10af95:	48 63 3d 74 54 01 00 	movslq 0x15474(%rip),%rdi        # 120410 <nThreads>
  10af9c:	48 c1 e7 02          	shl    $0x2,%rdi
  10afa0:	e8 9b 5b ff ff       	callq  100b40 <malloc>
  10afa5:	49 89 c6             	mov    %rax,%r14
    pthread_attr_t attr[nThreads];
  10afa8:	48 63 05 61 54 01 00 	movslq 0x15461(%rip),%rax        # 120410 <nThreads>
  10afaf:	48 6b c0 30          	imul   $0x30,%rax,%rax
  10afb3:	48 29 c4             	sub    %rax,%rsp
  10afb6:	48 89 65 b8          	mov    %rsp,-0x48(%rbp)
    for(i=0; i<nThreads; i++) {
  10afba:	44 3b 25 4f 54 01 00 	cmp    0x1544f(%rip),%r12d        # 120410 <nThreads>
  10afc1:	0f 8d a8 00 00 00    	jge    10b06f <blackscholes_main+0x2f3>
        tids[i]=i;
  10afc7:	49 63 dc             	movslq %r12d,%rbx
	pthread_attr_init(&attr[i]);
  10afca:	4c 6b eb 30          	imul   $0x30,%rbx,%r13
        tids[i]=i;
  10afce:	4d 8d 3c 9e          	lea    (%r14,%rbx,4),%r15
	pthread_attr_init(&attr[i]);
  10afd2:	4c 03 6d b8          	add    -0x48(%rbp),%r13
        tids[i]=i;
  10afd6:	45 89 27             	mov    %r12d,(%r15)
	pthread_attr_init(&attr[i]);
  10afd9:	4c 89 ef             	mov    %r13,%rdi
  10afdc:	e8 47 21 00 00       	callq  10d128 <pthread_attr_init>
	pthread_attr_setstack(&attr[i], &blasch_stacks[i][0], STACKSIZ);
  10afe1:	48 69 f3 00 c0 00 00 	imul   $0xc000,%rbx,%rsi
  10afe8:	ba 00 c0 00 00       	mov    $0xc000,%edx
  10afed:	4c 89 ef             	mov    %r13,%rdi
  10aff0:	48 81 c6 40 04 12 00 	add    $0x120440,%rsi
  10aff7:	e8 59 1f 00 00       	callq  10cf55 <pthread_attr_setstack>
  10affc:	31 c0                	xor    %eax,%eax
        
    {
        int _M4_i;
        for ( _M4_i = 0; _M4_i < MAX_THREADS; _M4_i++) {
            if ( _M4_threadsTableAllocated[_M4_i] == 0)    break;
  10affe:	83 3c 85 a0 ac 11 00 	cmpl   $0x0,0x11aca0(,%rax,4)
  10b005:	00 
  10b006:	48 63 d8             	movslq %eax,%rbx
  10b009:	74 10                	je     10b01b <blackscholes_main+0x29f>
        for ( _M4_i = 0; _M4_i < MAX_THREADS; _M4_i++) {
  10b00b:	48 ff c0             	inc    %rax
  10b00e:	48 3d 80 00 00 00    	cmp    $0x80,%rax
  10b014:	75 e8                	jne    10affe <blackscholes_main+0x282>
  10b016:	bb 80 00 00 00       	mov    $0x80,%ebx
        }
	if(i%2)
  10b01b:	41 f6 c4 01          	test   $0x1,%r12b
  10b01f:	74 1a                	je     10b03b <blackscholes_main+0x2bf>
	//if(1)
        	pthread_create(&_M4_threadsTable[_M4_i],&attr[i],(void *(*)(void *))bs_thread,(void *)&tids[i]);
  10b021:	48 8d 3c dd a0 ae 11 	lea    0x11aea0(,%rbx,8),%rdi
  10b028:	00 
  10b029:	4c 89 f9             	mov    %r15,%rcx
  10b02c:	ba 1c ac 10 00       	mov    $0x10ac1c,%edx
  10b031:	4c 89 ee             	mov    %r13,%rsi
  10b034:	e8 31 1f 00 00       	callq  10cf6a <pthread_create>
  10b039:	eb 21                	jmp    10b05c <blackscholes_main+0x2e0>
	else{
		printf("Send to other core Arg1 : %lu and ARg 4 : %d \n", _M4_threadsTable[_M4_i] , tids[i]);
  10b03b:	48 8b 34 dd a0 ae 11 	mov    0x11aea0(,%rbx,8),%rsi
  10b042:	00 
  10b043:	41 8b 17             	mov    (%r15),%edx
  10b046:	bf 3a 12 11 00       	mov    $0x11123a,%edi
  10b04b:	31 c0                	xor    %eax,%eax
  10b04d:	e8 1e 64 ff ff       	callq  101470 <printf>
		bs_dist(tids[i]);
  10b052:	41 8b 3f             	mov    (%r15),%edi
  10b055:	31 c0                	xor    %eax,%eax
  10b057:	e8 b0 00 00 00       	callq  10b10c <bs_dist>
       		}
		 _M4_threadsTableAllocated[_M4_i] = 1;
  10b05c:	c7 04 9d a0 ac 11 00 	movl   $0x1,0x11aca0(,%rbx,4)
  10b063:	01 00 00 00 
    for(i=0; i<nThreads; i++) {
  10b067:	41 ff c4             	inc    %r12d
  10b06a:	e9 4b ff ff ff       	jmpq   10afba <blackscholes_main+0x23e>
    }
;
    }
   	usleep(USEC_PER_MSEC * 100U); 
  10b06f:	bf a0 86 01 00       	mov    $0x186a0,%edi
  10b074:	31 db                	xor    %ebx,%ebx
  10b076:	e8 08 23 00 00       	callq  10d383 <usleep>
    {
        int _M4_i;
        void *_M4_ret;
        for ( _M4_i = 0; _M4_i < MAX_THREADS;_M4_i++) {
            if ( _M4_threadsTableAllocated[_M4_i] == 0)    break;
  10b07b:	83 3c 9d a0 ac 11 00 	cmpl   $0x0,0x11aca0(,%rbx,4)
  10b082:	00 
  10b083:	75 1e                	jne    10b0a3 <blackscholes_main+0x327>
            pthread_join( _M4_threadsTable[_M4_i], &_M4_ret);
        }
    }
;
    free(tids);
  10b085:	4c 89 f7             	mov    %r14,%rdi
    __parsec_roi_end();
#endif

    //Write prices to output file
    printf("%d\n", numOptions);
    for(i=0; i<numOptions; i++) {
  10b088:	31 db                	xor    %ebx,%ebx
    free(tids);
  10b08a:	e8 c1 5a ff ff       	callq  100b50 <free>
    printf("%d\n", numOptions);
  10b08f:	8b 35 83 53 01 00    	mov    0x15383(%rip),%esi        # 120418 <numOptions>
  10b095:	bf 36 12 11 00       	mov    $0x111236,%edi
  10b09a:	31 c0                	xor    %eax,%eax
  10b09c:	e8 cf 63 ff ff       	callq  101470 <printf>
    for(i=0; i<numOptions; i++) {
  10b0a1:	eb 1f                	jmp    10b0c2 <blackscholes_main+0x346>
            pthread_join( _M4_threadsTable[_M4_i], &_M4_ret);
  10b0a3:	48 8b 3c dd a0 ae 11 	mov    0x11aea0(,%rbx,8),%rdi
  10b0aa:	00 
  10b0ab:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
        for ( _M4_i = 0; _M4_i < MAX_THREADS;_M4_i++) {
  10b0af:	48 ff c3             	inc    %rbx
            pthread_join( _M4_threadsTable[_M4_i], &_M4_ret);
  10b0b2:	e8 66 21 00 00       	callq  10d21d <pthread_join>
        for ( _M4_i = 0; _M4_i < MAX_THREADS;_M4_i++) {
  10b0b7:	48 81 fb 80 00 00 00 	cmp    $0x80,%rbx
  10b0be:	75 bb                	jne    10b07b <blackscholes_main+0x2ff>
  10b0c0:	eb c3                	jmp    10b085 <blackscholes_main+0x309>
    for(i=0; i<numOptions; i++) {
  10b0c2:	3b 1d 50 53 01 00    	cmp    0x15350(%rip),%ebx        # 120418 <numOptions>
  10b0c8:	7d 1f                	jge    10b0e9 <blackscholes_main+0x36d>
      printf("%.18f\n", prices[i]);
  10b0ca:	48 8b 05 bf 52 01 00 	mov    0x152bf(%rip),%rax        # 120390 <prices>
  10b0d1:	48 63 d3             	movslq %ebx,%rdx
  10b0d4:	bf 69 12 11 00       	mov    $0x111269,%edi
    for(i=0; i<numOptions; i++) {
  10b0d9:	ff c3                	inc    %ebx
      printf("%.18f\n", prices[i]);
  10b0db:	f3 0f 5a 04 90       	cvtss2sd (%rax,%rdx,4),%xmm0
  10b0e0:	b0 01                	mov    $0x1,%al
  10b0e2:	e8 89 63 ff ff       	callq  101470 <printf>
    for(i=0; i<numOptions; i++) {
  10b0e7:	eb d9                	jmp    10b0c2 <blackscholes_main+0x346>
    }

#ifdef ERR_CHK
    printf("Num Errors: %d\n", numError);
  10b0e9:	8b 35 25 53 01 00    	mov    0x15325(%rip),%esi        # 120414 <numError>
  10b0ef:	bf 70 12 11 00       	mov    $0x111270,%edi
  10b0f4:	31 c0                	xor    %eax,%eax
  10b0f6:	e8 75 63 ff ff       	callq  101470 <printf>
#ifdef ENABLE_PARSEC_HOOKS
    __parsec_bench_end();
#endif

    return 0;
}
  10b0fb:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
  10b0ff:	31 c0                	xor    %eax,%eax
  10b101:	5b                   	pop    %rbx
  10b102:	41 5c                	pop    %r12
  10b104:	41 5d                	pop    %r13
  10b106:	41 5e                	pop    %r14
  10b108:	41 5f                	pop    %r15
  10b10a:	5d                   	pop    %rbp
  10b10b:	c3                   	retq   

000000000010b10c <bs_dist>:
        char arch[10];
};
volatile struct shared_area rw_buf; 


void bs_dist(  int tid ){
  10b10c:	55                   	push   %rbp
  10b10d:	48 63 d7             	movslq %edi,%rdx
  10b110:	b9 22 00 00 00       	mov    $0x22,%ecx
  10b115:	48 89 e5             	mov    %rsp,%rbp
  10b118:	41 54                	push   %r12
  10b11a:	49 89 d4             	mov    %rdx,%r12
  10b11d:	48 8d b5 68 ff ff ff 	lea    -0x98(%rbp),%rsi
  10b124:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp


	struct offload_struct  ofld_vranlc ;
	ofld_vranlc.new_request = 0xF00F0FF0;
	void * write_pointer = (void*)((char*)rw_buf.write_area + 0x1000);
  10b12b:	48 8b 05 de 51 01 00 	mov    0x151de(%rip),%rax        # 120310 <rw_buf>
	ofld_vranlc.new_request = 0xF00F0FF0;
  10b132:	c7 85 68 ff ff ff f0 	movl   $0xf00f0ff0,-0x98(%rbp)
  10b139:	0f 0f f0 
	*((pthread_t*)write_pointer)  = tid; 
	ofld_vranlc.args[0].location =  (uint32_t*)((char*)write_pointer + 0x40000000);
	write_pointer =  (void*)((char*)write_pointer +  sizeof(int));
	
		
	ofld_vranlc.type = BLACKSCHOLES_REQ;
  10b13c:	c7 85 6c ff ff ff 04 	movl   $0x4,-0x94(%rbp)
  10b143:	00 00 00 
	*((pthread_t*)write_pointer)  = tid; 
  10b146:	48 89 90 00 10 00 00 	mov    %rdx,0x1000(%rax)
	ofld_vranlc.args[0].location =  (uint32_t*)((char*)write_pointer + 0x40000000);
  10b14d:	48 05 00 10 00 40    	add    $0x40001000,%rax
  10b153:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
	
	memcpy((void*)rw_buf.write_area , (void*)&ofld_vranlc , sizeof(struct offload_struct) );
  10b15a:	48 8b 05 af 51 01 00 	mov    0x151af(%rip),%rax        # 120310 <rw_buf>
  10b161:	48 89 c7             	mov    %rax,%rdi
	printf("Copied the sturct details\n");
  10b164:	31 c0                	xor    %eax,%eax
  10b166:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  10b168:	bf 80 12 11 00       	mov    $0x111280,%edi
  10b16d:	e8 fe 62 ff ff       	callq  101470 <printf>
	printf("Args are %d. TID alone needs to be sent\n", tid);	
  10b172:	44 89 e6             	mov    %r12d,%esi
  10b175:	bf 9b 12 11 00       	mov    $0x11129b,%edi
  10b17a:	31 c0                	xor    %eax,%eax
  10b17c:	e8 ef 62 ff ff       	callq  101470 <printf>
	int request_feedback = 1;
  10b181:	b8 01 00 00 00       	mov    $0x1,%eax
	while(1)
	{
		if((*((uint32_t*)rw_buf.write_area) == ~(0xF00F0FF0) ) && request_feedback )
  10b186:	48 8b 15 83 51 01 00 	mov    0x15183(%rip),%rdx        # 120310 <rw_buf>
  10b18d:	81 3a 0f f0 f0 0f    	cmpl   $0xff0f00f,(%rdx)
  10b193:	75 14                	jne    10b1a9 <bs_dist+0x9d>
  10b195:	85 c0                	test   %eax,%eax
  10b197:	74 10                	je     10b1a9 <bs_dist+0x9d>
		{
			printf("ARM has started calculating blackscholes\n");
  10b199:	bf c4 12 11 00       	mov    $0x1112c4,%edi
  10b19e:	31 c0                	xor    %eax,%eax
  10b1a0:	e8 cb 62 ff ff       	callq  101470 <printf>
			request_feedback = 0;
  10b1a5:	31 c0                	xor    %eax,%eax
  10b1a7:	eb dd                	jmp    10b186 <bs_dist+0x7a>
		}
		else
		{
			struct offload_struct *  outp = (struct offload_struct *)rw_buf.read_area ;
  10b1a9:	48 8b 15 68 51 01 00 	mov    0x15168(%rip),%rdx        # 120318 <rw_buf+0x8>
			if(outp->new_request == 0xF00F0FF0)
  10b1b0:	81 3a f0 0f 0f f0    	cmpl   $0xf00f0ff0,(%rdx)
  10b1b6:	75 ce                	jne    10b186 <bs_dist+0x7a>
			}
			
		}

	}	
}
  10b1b8:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
				printf("retrived values from ARM machine \n");
  10b1bf:	bf ee 12 11 00       	mov    $0x1112ee,%edi
  10b1c4:	31 c0                	xor    %eax,%eax
}
  10b1c6:	41 5c                	pop    %r12
  10b1c8:	5d                   	pop    %rbp
				printf("retrived values from ARM machine \n");
  10b1c9:	e9 a2 62 ff ff       	jmpq   101470 <printf>

000000000010b1ce <main>:
		}

	}	
}
int main() 
{
  10b1ce:	55                   	push   %rbp
  int    np;
  int    i, ik, kk, l, k, nit;
  int    k_offset, j;
  logical verified, timers_enabled;

  printf("x86 kernel started\n");
  10b1cf:	bf 11 13 11 00       	mov    $0x111311,%edi
  10b1d4:	31 c0                	xor    %eax,%eax
{
  10b1d6:	48 89 e5             	mov    %rsp,%rbp
  10b1d9:	53                   	push   %rbx
  10b1da:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  printf("x86 kernel started\n");
  10b1e1:	e8 8a 62 ff ff       	callq  101470 <printf>
  rw_buf.write_area = (void*)0x50000000;
  10b1e6:	48 c7 05 1f 51 01 00 	movq   $0x50000000,0x1511f(%rip)        # 120310 <rw_buf>
  10b1ed:	00 00 00 50 
  rw_buf.read_area  = (void*)0x5f000000;
  10b1f1:	48 c7 05 1c 51 01 00 	movq   $0x5f000000,0x1511c(%rip)        # 120318 <rw_buf+0x8>
  10b1f8:	00 00 00 5f 
	{
		printf("char at %p is %c\n",((char *)rw_buf.read_area + li) , *((char *)rw_buf.read_area + li));
	}
*/	
        struct handshake in_hnsk;
        *((uint32_t*)rw_buf.write_area) = 0x00000000 ;
  10b1fc:	48 8b 05 0d 51 01 00 	mov    0x1510d(%rip),%rax        # 120310 <rw_buf>
        memcpy(hnsk.arch, "x86",4);
        memcpy((void*)&in_hnsk,rw_buf.read_area,sizeof(struct shared_area));
  10b203:	48 8b 15 0e 51 01 00 	mov    0x1510e(%rip),%rdx        # 120318 <rw_buf+0x8>
  struct handshake hnsk = {
  10b20a:	48 c7 85 50 ff ff ff 	movq   $0x0,-0xb0(%rbp)
  10b211:	00 00 00 00 
        *((uint32_t*)rw_buf.write_area) = 0x00000000 ;
  10b215:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  struct handshake hnsk = {
  10b21b:	c7 85 48 ff ff ff 1f 	movl   $0x1ff1f11f,-0xb8(%rbp)
  10b222:	f1 f1 1f 
        memcpy(hnsk.arch, "x86",4);
  10b225:	48 8b 02             	mov    (%rdx),%rax
  10b228:	c7 85 4c ff ff ff 78 	movl   $0x363878,-0xb4(%rbp)
  10b22f:	38 36 00 
        memcpy((void*)&in_hnsk,rw_buf.read_area,sizeof(struct shared_area));
  10b232:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  10b236:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  10b23d:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
        if(in_hnsk.present == 0xE00E0EE0)
  10b244:	3d e0 0e 0e e0       	cmp    $0xe00e0ee0,%eax
  10b249:	75 26                	jne    10b271 <main+0xa3>
        {
                printf("Already other core %s present in memory.\n",in_hnsk.arch);
  10b24b:	48 8d b5 5c ff ff ff 	lea    -0xa4(%rbp),%rsi
  10b252:	bf 25 13 11 00       	mov    $0x111325,%edi
  10b257:	31 c0                	xor    %eax,%eax
  10b259:	e8 12 62 ff ff       	callq  101470 <printf>
                memcpy(rw_buf.write_area,(void*)&hnsk,sizeof(struct shared_area));
  10b25e:	48 8b 05 ab 50 01 00 	mov    0x150ab(%rip),%rax        # 120310 <rw_buf>
  10b265:	0f 10 85 48 ff ff ff 	movups -0xb8(%rbp),%xmm0
  10b26c:	0f 11 00             	movups %xmm0,(%rax)
  10b26f:	eb 6a                	jmp    10b2db <main+0x10d>
        }
	else{
                printf("Attempting connection with other core ::\n");
  10b271:	bf 4f 13 11 00       	mov    $0x11134f,%edi
  10b276:	31 c0                	xor    %eax,%eax
                {
                        volatile struct handshake * other = (struct handshake*)rw_buf.read_area;
                        if(other->present == 0xE00E0EE0)
                        {
                                printf("Other core of type %s conected \n",other->arch);
                                break;
  10b278:	bb 40 54 89 00       	mov    $0x895440,%ebx
                printf("Attempting connection with other core ::\n");
  10b27d:	e8 ee 61 ff ff       	callq  101470 <printf>
                        volatile struct handshake * other = (struct handshake*)rw_buf.read_area;
  10b282:	48 8b 35 8f 50 01 00 	mov    0x1508f(%rip),%rsi        # 120318 <rw_buf+0x8>
                        if(other->present == 0xE00E0EE0)
  10b289:	8b 06                	mov    (%rsi),%eax
  10b28b:	3d e0 0e 0e e0       	cmp    $0xe00e0ee0,%eax
  10b290:	75 12                	jne    10b2a4 <main+0xd6>
                                printf("Other core of type %s conected \n",other->arch);
  10b292:	48 83 c6 04          	add    $0x4,%rsi
  10b296:	bf 79 13 11 00       	mov    $0x111379,%edi
  10b29b:	31 c0                	xor    %eax,%eax
  10b29d:	e8 ce 61 ff ff       	callq  101470 <printf>
                                break;
  10b2a2:	eb 37                	jmp    10b2db <main+0x10d>
  10b2a4:	48 8b 05 f5 50 01 00 	mov    0x150f5(%rip),%rax        # 1203a0 <l.0>
  10b2ab:	31 d2                	xor    %edx,%edx
  10b2ad:	48 f7 f3             	div    %rbx
                        }
                        else
                        {
                                if(l % 9000000 == 0)
  10b2b0:	48 85 d2             	test   %rdx,%rdx
  10b2b3:	75 1d                	jne    10b2d2 <main+0x104>
                                {
                                        printf("waiting for other core\n");
  10b2b5:	bf 9a 13 11 00       	mov    $0x11139a,%edi
  10b2ba:	31 c0                	xor    %eax,%eax
  10b2bc:	e8 af 61 ff ff       	callq  101470 <printf>
                                        memcpy(rw_buf.write_area,(void*)&hnsk,sizeof(struct shared_area));
  10b2c1:	48 8b 05 48 50 01 00 	mov    0x15048(%rip),%rax        # 120310 <rw_buf>
  10b2c8:	0f 10 8d 48 ff ff ff 	movups -0xb8(%rbp),%xmm1
  10b2cf:	0f 11 08             	movups %xmm1,(%rax)
                                }
                                l++;
  10b2d2:	48 ff 05 c7 50 01 00 	incq   0x150c7(%rip)        # 1203a0 <l.0>
                {
  10b2d9:	eb a7                	jmp    10b282 <main+0xb4>
                        }
                }
        }
	*((uint32_t*)rw_buf.read_area) = 0x00000000 ;
  10b2db:	48 8b 05 36 50 01 00 	mov    0x15036(%rip),%rax        # 120318 <rw_buf+0x8>
        *((uint32_t*)rw_buf.write_area) = 0x00000000 ;
	printf("x86_kernel_ shraed memory area exiting\n");
  10b2e2:	bf b2 13 11 00       	mov    $0x1113b2,%edi
	*((uint32_t*)rw_buf.read_area) = 0x00000000 ;
  10b2e7:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
        *((uint32_t*)rw_buf.write_area) = 0x00000000 ;
  10b2ed:	48 8b 05 1c 50 01 00 	mov    0x1501c(%rip),%rax        # 120310 <rw_buf>
  10b2f4:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
	printf("x86_kernel_ shraed memory area exiting\n");
  10b2fa:	31 c0                	xor    %eax,%eax
  10b2fc:	e8 6f 61 ff ff       	callq  101470 <printf>
	struct timeval tv;
  gettimeofday(&tv,(void *)0);
  10b301:	48 8d bd 38 ff ff ff 	lea    -0xc8(%rbp),%rdi
  10b308:	31 f6                	xor    %esi,%esi
  10b30a:	e8 34 20 00 00       	callq  10d343 <gettimeofday>
  printf("Seconds recorded is %d \n\n",tv.tv_sec);
  10b30f:	48 8b b5 38 ff ff ff 	mov    -0xc8(%rbp),%rsi
  10b316:	bf da 13 11 00       	mov    $0x1113da,%edi
  10b31b:	31 c0                	xor    %eax,%eax
  10b31d:	e8 4e 61 ff ff       	callq  101470 <printf>

  blackscholes_main();
  10b322:	31 c0                	xor    %eax,%eax
  10b324:	e8 53 fa ff ff       	callq  10ad7c <blackscholes_main>
    
  printf("Requesting the ARM kernel to shutdown\n");
  10b329:	bf f4 13 11 00       	mov    $0x1113f4,%edi
  10b32e:	31 c0                	xor    %eax,%eax
  10b330:	e8 3b 61 ff ff       	callq  101470 <printf>
  10b335:	48 8b 05 74 d0 03 00 	mov    0x3d074(%rip),%rax        # 1483b0 <linear_shmem>
  10b33c:	b9 22 00 00 00       	mov    $0x22,%ecx
  10b341:	48 8d b5 68 ff ff ff 	lea    -0x98(%rbp),%rsi
  10b348:	c7 00 41 73 68 77    	movl   $0x77687341,(%rax)
  10b34e:	66 c7 40 04 69 6e    	movw   $0x6e69,0x4(%rax)
  memcpy((void*)linear_shmem,"Ashwin",6);
  struct offload_struct shutdown;
  shutdown.new_request = 0xF00F0FF0;
  10b354:	48 b8 f0 0f 0f f0 de 	movabs $0xdef00f0ff0,%rax
  10b35b:	00 00 00 
  10b35e:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  shutdown.type = 0xDE;
  memcpy((void*)rw_buf.write_area , (void*)&shutdown , sizeof(struct offload_struct) );
  10b365:	48 8b 05 a4 4f 01 00 	mov    0x14fa4(%rip),%rax        # 120310 <rw_buf>
  10b36c:	48 89 c7             	mov    %rax,%rdi
  10b36f:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)

  gettimeofday(&tv,(void *)0);
  10b371:	48 8d bd 38 ff ff ff 	lea    -0xc8(%rbp),%rdi
  10b378:	31 f6                	xor    %esi,%esi
  10b37a:	e8 c4 1f 00 00       	callq  10d343 <gettimeofday>
  printf("Seconds recorded is %d \n",tv.tv_sec);
  10b37f:	48 8b b5 38 ff ff ff 	mov    -0xc8(%rbp),%rsi
  10b386:	bf 1b 14 11 00       	mov    $0x11141b,%edi
  10b38b:	31 c0                	xor    %eax,%eax
  10b38d:	e8 de 60 ff ff       	callq  101470 <printf>
  
  printf("x86_kernel_exiting\n");
  10b392:	bf 34 14 11 00       	mov    $0x111434,%edi
  10b397:	31 c0                	xor    %eax,%eax
  10b399:	e8 d2 60 ff ff       	callq  101470 <printf>
        *((uint32_t*)rw_buf.read_area) = 0x00000000 ;
  10b39e:	48 8b 05 73 4f 01 00 	mov    0x14f73(%rip),%rax        # 120318 <rw_buf+0x8>
  10b3a5:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
//        *((uint32_t*)rw_buf.write_area) = 0x00000000 ;
  return 0;
}
  10b3ab:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
  10b3b2:	31 c0                	xor    %eax,%eax
  10b3b4:	5b                   	pop    %rbx
  10b3b5:	5d                   	pop    %rbp
  10b3b6:	c3                   	retq   

000000000010b3b7 <init_data_init>:
void init_data_init(){
datainit[0].s            = 42.0;
datainit[0].strike       = 40.00;
datainit[0].r            = 0.1000;
datainit[0].divq         = 0.00;
datainit[0].v            = 0.20;
  10b3b7:	48 b8 cd cc 4c 3e 00 	movabs $0x3f0000003e4ccccd,%rax
  10b3be:	00 00 3f 
datainit[0].t            = 0.50;
datainit[0].OptionType   = 'C';
datainit[0].divs         = 0.00;
  10b3c1:	b9 99 26 4c 20       	mov    $0x204c2699,%ecx
datainit[0].s            = 42.0;
  10b3c6:	48 ba 00 00 28 42 00 	movabs $0x4220000042280000,%rdx
  10b3cd:	00 20 42 
datainit[2].r		= 0.0500;
datainit[2].divq	= 0.00;
datainit[2].v		= 0.15;
datainit[2].t		= 1.00;
datainit[2].OptionType	= 'P';
datainit[2].divs	= 0.00;
  10b3d0:	be 05 de 36 20       	mov    $0x2036de05,%esi
datainit[0].v            = 0.20;
  10b3d5:	48 89 05 d4 fe 00 00 	mov    %rax,0xfed4(%rip)        # 11b2b0 <datainit+0x10>
datainit[0].divs         = 0.00;
  10b3dc:	48 c1 e1 21          	shl    $0x21,%rcx
datainit[2].divs	= 0.00;
  10b3e0:	48 c1 e6 21          	shl    $0x21,%rsi
datainit[1].v		= 0.20;
  10b3e4:	48 89 05 e9 fe 00 00 	mov    %rax,0xfee9(%rip)        # 11b2d4 <datainit+0x34>
datainit[1].divs	= 0.00; 
  10b3eb:	b8 69 00 4f 3f       	mov    $0x3f4f0069,%eax
  10b3f0:	48 c1 e0 20          	shl    $0x20,%rax
datainit[0].s            = 42.0;
  10b3f4:	48 89 15 a5 fe 00 00 	mov    %rdx,0xfea5(%rip)        # 11b2a0 <datainit>
datainit[1].divs	= 0.00; 
  10b3fb:	48 89 05 de fe 00 00 	mov    %rax,0xfede(%rip)        # 11b2e0 <datainit+0x40>
datainit[2].v		= 0.15;
  10b402:	48 b8 9a 99 19 3e 00 	movabs $0x3f8000003e19999a,%rax
  10b409:	00 80 3f 
  10b40c:	48 89 05 e5 fe 00 00 	mov    %rax,0xfee5(%rip)        # 11b2f8 <datainit+0x58>

datainit[3].s		= 100.00;
datainit[3].strike	= 100.00;
datainit[3].r		= 0.0500;
datainit[3].divq	= 0.00;
datainit[3].v		= 0.15;
  10b413:	48 89 05 02 ff 00 00 	mov    %rax,0xff02(%rip)        # 11b31c <datainit+0x7c>
datainit[3].t		= 1.00;
datainit[3].OptionType	= 'C';
datainit[3].divs	= 0.00;
  10b41a:	b8 77 97 10 04       	mov    $0x4109777,%eax
datainit[1].s		= 42.00;
  10b41f:	48 89 15 9e fe 00 00 	mov    %rdx,0xfe9e(%rip)        # 11b2c4 <datainit+0x24>
datainit[3].divs	= 0.00;
  10b426:	48 c1 e0 24          	shl    $0x24,%rax
datainit[2].s		= 100.00 ;
  10b42a:	48 ba 00 00 c8 42 00 	movabs $0x42c8000042c80000,%rdx
  10b431:	00 c8 42 
datainit[0].r            = 0.1000;
  10b434:	48 c7 05 69 fe 00 00 	movq   $0x3dcccccd,0xfe69(%rip)        # 11b2a8 <datainit+0x8>
  10b43b:	cd cc cc 3d 
datainit[0].OptionType   = 'C';
  10b43f:	c6 05 72 fe 00 00 43 	movb   $0x43,0xfe72(%rip)        # 11b2b8 <datainit+0x18>
datainit[0].divs         = 0.00;
  10b446:	48 89 0d 6f fe 00 00 	mov    %rcx,0xfe6f(%rip)        # 11b2bc <datainit+0x1c>
datainit[1].r		= 0.1000;
  10b44d:	48 c7 05 74 fe 00 00 	movq   $0x3dcccccd,0xfe74(%rip)        # 11b2cc <datainit+0x2c>
  10b454:	cd cc cc 3d 
datainit[1].OptionType	= 'P';
  10b458:	c6 05 7d fe 00 00 50 	movb   $0x50,0xfe7d(%rip)        # 11b2dc <datainit+0x3c>
datainit[2].s		= 100.00 ;
  10b45f:	48 89 15 82 fe 00 00 	mov    %rdx,0xfe82(%rip)        # 11b2e8 <datainit+0x48>
datainit[2].r		= 0.0500;
  10b466:	48 c7 05 7f fe 00 00 	movq   $0x3d4ccccd,0xfe7f(%rip)        # 11b2f0 <datainit+0x50>
  10b46d:	cd cc 4c 3d 
datainit[2].OptionType	= 'P';
  10b471:	c6 05 88 fe 00 00 50 	movb   $0x50,0xfe88(%rip)        # 11b300 <datainit+0x60>
datainit[2].divs	= 0.00;
  10b478:	48 89 35 85 fe 00 00 	mov    %rsi,0xfe85(%rip)        # 11b304 <datainit+0x64>
datainit[3].s		= 100.00;
  10b47f:	48 89 15 86 fe 00 00 	mov    %rdx,0xfe86(%rip)        # 11b30c <datainit+0x6c>
datainit[3].r		= 0.0500;
  10b486:	48 c7 05 83 fe 00 00 	movq   $0x3d4ccccd,0xfe83(%rip)        # 11b314 <datainit+0x74>
  10b48d:	cd cc 4c 3d 
datainit[3].OptionType	= 'C';
  10b491:	c6 05 8c fe 00 00 43 	movb   $0x43,0xfe8c(%rip)        # 11b324 <datainit+0x84>
datainit[3].divs	= 0.00;
  10b498:	48 89 05 89 fe 00 00 	mov    %rax,0xfe89(%rip)        # 11b328 <datainit+0x88>
datainit[3].DGrefval	= 8.591659601309890704;
}
  10b49f:	c3                   	retq   

000000000010b4a0 <stdinout_read_vmeth>:
int z_impl_zephyr_write_stdout(const char *buf, int nbytes);

static ssize_t stdinout_read_vmeth(void *obj, void *buffer, size_t count)
{
	return 0;
}
  10b4a0:	31 c0                	xor    %eax,%eax
  10b4a2:	c3                   	retq   

000000000010b4a3 <stdinout_ioctl_vmeth>:
	return 0;
#endif
}

static int stdinout_ioctl_vmeth(void *obj, unsigned int request, va_list args)
{
  10b4a3:	55                   	push   %rbp
  10b4a4:	48 89 e5             	mov    %rsp,%rbp
	errno = EINVAL;
  10b4a7:	e8 60 18 00 00       	callq  10cd0c <__errno>
  10b4ac:	c7 00 16 00 00 00    	movl   $0x16,(%rax)
	return -1;
}
  10b4b2:	83 c8 ff             	or     $0xffffffff,%eax
  10b4b5:	5d                   	pop    %rbp
  10b4b6:	c3                   	retq   

000000000010b4b7 <stdinout_write_vmeth>:
{
  10b4b7:	55                   	push   %rbp
  10b4b8:	48 89 f7             	mov    %rsi,%rdi
  10b4bb:	48 89 d6             	mov    %rdx,%rsi
  10b4be:	48 89 e5             	mov    %rsp,%rbp
	return z_impl_zephyr_write_stdout(buffer, count);
  10b4c1:	e8 70 17 00 00       	callq  10cc36 <z_impl_zephyr_write_stdout>
}
  10b4c6:	5d                   	pop    %rbp
	return z_impl_zephyr_write_stdout(buffer, count);
  10b4c7:	48 98                	cltq   
}
  10b4c9:	c3                   	retq   

000000000010b4ca <z_fdtable_call_ioctl>:
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
				       unsigned long request, ...)
{
  10b4ca:	55                   	push   %rbp
  10b4cb:	49 89 fa             	mov    %rdi,%r10
  10b4ce:	48 89 f7             	mov    %rsi,%rdi
  10b4d1:	48 89 d6             	mov    %rdx,%rsi
  10b4d4:	48 89 e5             	mov    %rsp,%rbp
  10b4d7:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  10b4de:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  10b4e5:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  10b4ec:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  10b4f3:	84 c0                	test   %al,%al
  10b4f5:	74 20                	je     10b517 <z_fdtable_call_ioctl+0x4d>
  10b4f7:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  10b4fb:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  10b4ff:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  10b503:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  10b507:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  10b50b:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  10b50f:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  10b513:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
	va_list args;
	int res;

	va_start(args, request);
  10b517:	48 8d 45 10          	lea    0x10(%rbp),%rax
	res = vtable->ioctl(obj, request, args);
  10b51b:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
	va_start(args, request);
  10b522:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  10b529:	00 00 00 
  10b52c:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  10b533:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  10b53a:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  10b541:	00 00 00 
  10b544:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
	res = vtable->ioctl(obj, request, args);
  10b54b:	41 ff 52 18          	callq  *0x18(%r10)
	va_end(args);

	return res;
}
  10b54f:	c9                   	leaveq 
  10b550:	c3                   	retq   

000000000010b551 <_check_fd>:
{
  10b551:	55                   	push   %rbp
  10b552:	48 89 e5             	mov    %rsp,%rbp
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
  10b555:	83 ff 03             	cmp    $0x3,%edi
  10b558:	77 15                	ja     10b56f <_check_fd+0x1e>
	if (!atomic_get(&fdtable[fd].refcount)) {
  10b55a:	48 63 ff             	movslq %edi,%rdi
	return 0;
  10b55d:	31 c0                	xor    %eax,%eax
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
  10b55f:	48 6b ff 38          	imul   $0x38,%rdi,%rdi
  10b563:	48 8b 97 50 74 14 00 	mov    0x147450(%rdi),%rdx
	if (!atomic_get(&fdtable[fd].refcount)) {
  10b56a:	48 85 d2             	test   %rdx,%rdx
  10b56d:	75 0e                	jne    10b57d <_check_fd+0x2c>
		errno = EBADF;
  10b56f:	e8 98 17 00 00       	callq  10cd0c <__errno>
  10b574:	c7 00 09 00 00 00    	movl   $0x9,(%rax)
  10b57a:	83 c8 ff             	or     $0xffffffff,%eax
}
  10b57d:	5d                   	pop    %rbp
  10b57e:	c3                   	retq   

000000000010b57f <z_fd_unref.isra.0>:
		old_rc = atomic_get(&fdtable[fd].refcount);
  10b57f:	48 63 ff             	movslq %edi,%rdi
  10b582:	48 6b d7 38          	imul   $0x38,%rdi,%rdx
  10b586:	48 81 c2 50 74 14 00 	add    $0x147450,%rdx
  10b58d:	48 8b 0a             	mov    (%rdx),%rcx
		if (!old_rc) {
  10b590:	48 85 c9             	test   %rcx,%rcx
  10b593:	74 2d                	je     10b5c2 <z_fd_unref.isra.0+0x43>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
  10b595:	48 8d 71 ff          	lea    -0x1(%rcx),%rsi
	return __atomic_compare_exchange_n(target, &old_value, new_value,
  10b599:	48 89 c8             	mov    %rcx,%rax
  10b59c:	f0 48 0f b1 32       	lock cmpxchg %rsi,(%rdx)
  10b5a1:	75 ea                	jne    10b58d <z_fd_unref.isra.0+0xe>
	if (old_rc != 1) {
  10b5a3:	48 ff c9             	dec    %rcx
  10b5a6:	75 1a                	jne    10b5c2 <z_fd_unref.isra.0+0x43>
	fdtable[fd].obj = NULL;
  10b5a8:	48 6b ff 38          	imul   $0x38,%rdi,%rdi
  10b5ac:	48 c7 87 40 74 14 00 	movq   $0x0,0x147440(%rdi)
  10b5b3:	00 00 00 00 
	fdtable[fd].vtable = NULL;
  10b5b7:	48 c7 87 48 74 14 00 	movq   $0x0,0x147448(%rdi)
  10b5be:	00 00 00 00 
}
  10b5c2:	c3                   	retq   

000000000010b5c3 <_read>:
{
  10b5c3:	55                   	push   %rbp
  10b5c4:	48 89 e5             	mov    %rsp,%rbp
  10b5c7:	53                   	push   %rbx
  10b5c8:	48 63 df             	movslq %edi,%rbx
	if (_check_fd(fd) < 0) {
  10b5cb:	89 df                	mov    %ebx,%edi
{
  10b5cd:	48 83 ec 18          	sub    $0x18,%rsp
  10b5d1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10b5d5:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (_check_fd(fd) < 0) {
  10b5d9:	e8 73 ff ff ff       	callq  10b551 <_check_fd>
  10b5de:	85 c0                	test   %eax,%eax
  10b5e0:	78 25                	js     10b607 <_read+0x44>
	return fdtable[fd].vtable->read(fdtable[fd].obj, buf, sz);
  10b5e2:	48 6b db 38          	imul   $0x38,%rbx,%rbx
  10b5e6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10b5ea:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  10b5ee:	48 8b 83 48 74 14 00 	mov    0x147448(%rbx),%rax
  10b5f5:	48 8b bb 40 74 14 00 	mov    0x147440(%rbx),%rdi
  10b5fc:	48 8b 00             	mov    (%rax),%rax
}
  10b5ff:	48 83 c4 18          	add    $0x18,%rsp
  10b603:	5b                   	pop    %rbx
  10b604:	5d                   	pop    %rbp
	return fdtable[fd].vtable->read(fdtable[fd].obj, buf, sz);
  10b605:	ff e0                	jmpq   *%rax
}
  10b607:	48 83 c4 18          	add    $0x18,%rsp
  10b60b:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
  10b60f:	5b                   	pop    %rbx
  10b610:	5d                   	pop    %rbp
  10b611:	c3                   	retq   

000000000010b612 <_write>:
{
  10b612:	55                   	push   %rbp
  10b613:	48 89 e5             	mov    %rsp,%rbp
  10b616:	53                   	push   %rbx
  10b617:	48 63 df             	movslq %edi,%rbx
	if (_check_fd(fd) < 0) {
  10b61a:	89 df                	mov    %ebx,%edi
{
  10b61c:	48 83 ec 18          	sub    $0x18,%rsp
  10b620:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10b624:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (_check_fd(fd) < 0) {
  10b628:	e8 24 ff ff ff       	callq  10b551 <_check_fd>
  10b62d:	85 c0                	test   %eax,%eax
  10b62f:	78 26                	js     10b657 <_write+0x45>
	return fdtable[fd].vtable->write(fdtable[fd].obj, buf, sz);
  10b631:	48 6b db 38          	imul   $0x38,%rbx,%rbx
  10b635:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10b639:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  10b63d:	48 8b 83 48 74 14 00 	mov    0x147448(%rbx),%rax
  10b644:	48 8b bb 40 74 14 00 	mov    0x147440(%rbx),%rdi
  10b64b:	48 8b 40 08          	mov    0x8(%rax),%rax
}
  10b64f:	48 83 c4 18          	add    $0x18,%rsp
  10b653:	5b                   	pop    %rbx
  10b654:	5d                   	pop    %rbp
	return fdtable[fd].vtable->write(fdtable[fd].obj, buf, sz);
  10b655:	ff e0                	jmpq   *%rax
}
  10b657:	48 83 c4 18          	add    $0x18,%rsp
  10b65b:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
  10b65f:	5b                   	pop    %rbx
  10b660:	5d                   	pop    %rbp
  10b661:	c3                   	retq   

000000000010b662 <_close>:
{
  10b662:	55                   	push   %rbp
  10b663:	48 89 e5             	mov    %rsp,%rbp
  10b666:	41 54                	push   %r12
  10b668:	41 89 fc             	mov    %edi,%r12d
  10b66b:	51                   	push   %rcx
	if (_check_fd(fd) < 0) {
  10b66c:	e8 e0 fe ff ff       	callq  10b551 <_check_fd>
  10b671:	41 83 c8 ff          	or     $0xffffffff,%r8d
  10b675:	85 c0                	test   %eax,%eax
  10b677:	78 23                	js     10b69c <_close+0x3a>
	res = fdtable[fd].vtable->close(fdtable[fd].obj);
  10b679:	49 63 c4             	movslq %r12d,%rax
  10b67c:	48 6b c0 38          	imul   $0x38,%rax,%rax
  10b680:	48 8b 90 48 74 14 00 	mov    0x147448(%rax),%rdx
  10b687:	48 8b b8 40 74 14 00 	mov    0x147440(%rax),%rdi
  10b68e:	ff 52 10             	callq  *0x10(%rdx)
	(void)z_fd_unref(fd);
  10b691:	44 89 e7             	mov    %r12d,%edi
	res = fdtable[fd].vtable->close(fdtable[fd].obj);
  10b694:	41 89 c0             	mov    %eax,%r8d
	(void)z_fd_unref(fd);
  10b697:	e8 e3 fe ff ff       	callq  10b57f <z_fd_unref.isra.0>
}
  10b69c:	5a                   	pop    %rdx
  10b69d:	44 89 c0             	mov    %r8d,%eax
  10b6a0:	41 5c                	pop    %r12
  10b6a2:	5d                   	pop    %rbp
  10b6a3:	c3                   	retq   

000000000010b6a4 <_lseek>:
{
  10b6a4:	55                   	push   %rbp
  10b6a5:	48 89 e5             	mov    %rsp,%rbp
  10b6a8:	41 54                	push   %r12
  10b6aa:	49 89 f4             	mov    %rsi,%r12
  10b6ad:	53                   	push   %rbx
  10b6ae:	89 fb                	mov    %edi,%ebx
  10b6b0:	48 83 ec 10          	sub    $0x10,%rsp
  10b6b4:	89 55 ec             	mov    %edx,-0x14(%rbp)
	if (_check_fd(fd) < 0) {
  10b6b7:	e8 95 fe ff ff       	callq  10b551 <_check_fd>
  10b6bc:	41 89 c1             	mov    %eax,%r9d
  10b6bf:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
  10b6c3:	45 85 c9             	test   %r9d,%r9d
  10b6c6:	78 2a                	js     10b6f2 <_lseek+0x4e>
	return z_fdtable_call_ioctl(fdtable[fd].vtable, fdtable[fd].obj, ZFD_IOCTL_LSEEK,
  10b6c8:	48 63 fb             	movslq %ebx,%rdi
  10b6cb:	44 8b 45 ec          	mov    -0x14(%rbp),%r8d
  10b6cf:	4c 89 e1             	mov    %r12,%rcx
  10b6d2:	ba 01 01 00 00       	mov    $0x101,%edx
  10b6d7:	48 6b ff 38          	imul   $0x38,%rdi,%rdi
  10b6db:	31 c0                	xor    %eax,%eax
  10b6dd:	48 8b b7 40 74 14 00 	mov    0x147440(%rdi),%rsi
  10b6e4:	48 8b bf 48 74 14 00 	mov    0x147448(%rdi),%rdi
  10b6eb:	e8 da fd ff ff       	callq  10b4ca <z_fdtable_call_ioctl>
  10b6f0:	48 98                	cltq   
}
  10b6f2:	5a                   	pop    %rdx
  10b6f3:	59                   	pop    %rcx
  10b6f4:	5b                   	pop    %rbx
  10b6f5:	41 5c                	pop    %r12
  10b6f7:	5d                   	pop    %rbp
  10b6f8:	c3                   	retq   

000000000010b6f9 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
  10b6f9:	ff 06                	incl   (%rsi)
	return _char_out(c);
  10b6fb:	ff 25 b7 cc 03 00    	jmpq   *0x3ccb7(%rip)        # 1483b8 <_char_out>

000000000010b701 <__printk_hook_install>:
	_char_out = fn;
  10b701:	48 89 3d b0 cc 03 00 	mov    %rdi,0x3ccb0(%rip)        # 1483b8 <_char_out>
}
  10b708:	c3                   	retq   

000000000010b709 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
  10b709:	55                   	push   %rbp
  10b70a:	48 89 fa             	mov    %rdi,%rdx
  10b70d:	48 89 f1             	mov    %rsi,%rcx
  10b710:	48 89 e5             	mov    %rsp,%rbp
  10b713:	53                   	push   %rbx
  10b714:	48 83 ec 18          	sub    $0x18,%rsp
	struct out_context ctx = { 0 };
  10b718:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)

static ALWAYS_INLINE unsigned int arch_irq_lock(void)
{
	unsigned long key;

	__asm__ volatile ("pushfq; cli; popq %0" : "=g" (key) : : "memory");
  10b71f:	9c                   	pushfq 
  10b720:	fa                   	cli    
  10b721:	5b                   	pop    %rbx
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
  10b722:	bf f9 b6 10 00       	mov    $0x10b6f9,%edi
  10b727:	48 8d 75 ec          	lea    -0x14(%rbp),%rsi
  10b72b:	e8 af 06 00 00       	callq  10bddf <cbvprintf>

#endif /* CONFIG_PCIE_MSI */

static ALWAYS_INLINE void arch_irq_unlock(unsigned int key)
{
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10b730:	0f ba e3 09          	bt     $0x9,%ebx
  10b734:	73 01                	jae    10b737 <vprintk+0x2e>
		__asm__ volatile ("sti" ::: "memory");
  10b736:	fb                   	sti    

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
  10b737:	48 83 c4 18          	add    $0x18,%rsp
  10b73b:	5b                   	pop    %rbx
  10b73c:	5d                   	pop    %rbp
  10b73d:	c3                   	retq   

000000000010b73e <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
  10b73e:	55                   	push   %rbp
  10b73f:	48 89 e5             	mov    %rsp,%rbp
  10b742:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  10b749:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)
  10b750:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  10b757:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  10b75e:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  10b765:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  10b76c:	84 c0                	test   %al,%al
  10b76e:	74 20                	je     10b790 <printk+0x52>
  10b770:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  10b774:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  10b778:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  10b77c:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  10b780:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  10b784:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  10b788:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  10b78c:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
	va_list ap;

	va_start(ap, fmt);
  10b790:	48 8d 45 10          	lea    0x10(%rbp),%rax

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
  10b794:	48 8d b5 38 ff ff ff 	lea    -0xc8(%rbp),%rsi
	va_start(ap, fmt);
  10b79b:	c7 85 38 ff ff ff 08 	movl   $0x8,-0xc8(%rbp)
  10b7a2:	00 00 00 
  10b7a5:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  10b7ac:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  10b7b3:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  10b7ba:	00 00 00 
  10b7bd:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
		vprintk(fmt, ap);
  10b7c4:	e8 40 ff ff ff       	callq  10b709 <vprintk>
	}
	va_end(ap);
}
  10b7c9:	c9                   	leaveq 
  10b7ca:	c3                   	retq   

000000000010b7cb <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
  10b7cb:	55                   	push   %rbp
  10b7cc:	49 89 f8             	mov    %rdi,%r8
  10b7cf:	48 89 f7             	mov    %rsi,%rdi
  10b7d2:	48 89 d6             	mov    %rdx,%rsi
  10b7d5:	48 89 ca             	mov    %rcx,%rdx
  10b7d8:	48 89 e5             	mov    %rsp,%rbp
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
  10b7db:	41 ff d0             	callq  *%r8
		/* coverity[OVERRUN] */
		return (k_tid_t) arch_syscall_invoke0(K_SYSCALL_Z_CURRENT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_z_current_get();
  10b7de:	e8 0c 33 00 00       	callq  10eaef <z_impl_z_current_get>
  10b7e3:	48 89 c7             	mov    %rax,%rdi
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_ABORT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_abort(thread);
  10b7e6:	e8 f4 33 00 00       	callq  10ebdf <z_impl_k_thread_abort>

000000000010b7eb <chunk_size>:

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
  10b7eb:	89 f6                	mov    %esi,%esi
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
  10b7ed:	8b 44 f7 04          	mov    0x4(%rdi,%rsi,8),%eax
  10b7f1:	d1 e8                	shr    %eax
}
  10b7f3:	c3                   	retq   

000000000010b7f4 <set_chunk_used>:

static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
  10b7f4:	89 f6                	mov    %esi,%esi
{
  10b7f6:	41 89 d0             	mov    %edx,%r8d
	void *cmem = &buf[c];
  10b7f9:	48 8d 04 f7          	lea    (%rdi,%rsi,8),%rax

	if (big_heap(h)) {
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
  10b7fd:	8b 48 04             	mov    0x4(%rax),%ecx
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
  10b800:	89 ca                	mov    %ecx,%edx
  10b802:	83 e2 fe             	and    $0xfffffffe,%edx
		if (used) {
  10b805:	45 84 c0             	test   %r8b,%r8b
  10b808:	74 05                	je     10b80f <set_chunk_used+0x1b>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
  10b80a:	83 c9 01             	or     $0x1,%ecx
  10b80d:	89 ca                	mov    %ecx,%edx
  10b80f:	89 50 04             	mov    %edx,0x4(%rax)
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
		}
	}
}
  10b812:	c3                   	retq   

000000000010b813 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
  10b813:	55                   	push   %rbp
  10b814:	89 f2                	mov    %esi,%edx
  10b816:	48 89 e5             	mov    %rsp,%rbp
	chunk_set(h, c, LEFT_SIZE, size);
}

static inline bool solo_free_header(struct z_heap *h, chunkid_t c)
{
	return big_heap(h) && chunk_size(h, c) == 1U;
  10b819:	e8 cd ff ff ff       	callq  10b7eb <chunk_size>
	if (!solo_free_header(h, c)) {
  10b81e:	83 f8 01             	cmp    $0x1,%eax
  10b821:	74 5b                	je     10b87e <free_list_add+0x6b>
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
  10b823:	ff c8                	dec    %eax
	return 31 - __builtin_clz(usable_sz);
  10b825:	b9 1f 00 00 00       	mov    $0x1f,%ecx
	void *cmem = &buf[c];
  10b82a:	41 89 d0             	mov    %edx,%r8d
	return 31 - __builtin_clz(usable_sz);
  10b82d:	0f bd c0             	bsr    %eax,%eax
  10b830:	4e 8d 04 c5 08 00 00 	lea    0x8(,%r8,8),%r8
  10b837:	00 
  10b838:	83 f0 1f             	xor    $0x1f,%eax
		((uint32_t *)cmem)[f] = val;
  10b83b:	4e 8d 0c 07          	lea    (%rdi,%r8,1),%r9
  10b83f:	4e 8d 44 07 04       	lea    0x4(%rdi,%r8,1),%r8
	return 31 - __builtin_clz(usable_sz);
  10b844:	29 c1                	sub    %eax,%ecx
	if (b->next == 0U) {
  10b846:	48 63 c1             	movslq %ecx,%rax
  10b849:	48 83 c0 04          	add    $0x4,%rax
  10b84d:	8b 34 87             	mov    (%rdi,%rax,4),%esi
  10b850:	85 f6                	test   %esi,%esi
  10b852:	75 15                	jne    10b869 <free_list_add+0x56>
		h->avail_buckets |= (1 << bidx);
  10b854:	be 01 00 00 00       	mov    $0x1,%esi
  10b859:	d3 e6                	shl    %cl,%esi
  10b85b:	09 77 0c             	or     %esi,0xc(%rdi)
		b->next = c;
  10b85e:	89 14 87             	mov    %edx,(%rdi,%rax,4)
		((uint32_t *)cmem)[f] = val;
  10b861:	41 89 11             	mov    %edx,(%r9)
  10b864:	41 89 10             	mov    %edx,(%r8)
}
  10b867:	eb 15                	jmp    10b87e <free_list_add+0x6b>
	void *cmem = &buf[c];
  10b869:	89 f0                	mov    %esi,%eax
		return ((uint32_t *)cmem)[f];
  10b86b:	48 8d 4c c7 08       	lea    0x8(%rdi,%rax,8),%rcx
  10b870:	8b 01                	mov    (%rcx),%eax
		((uint32_t *)cmem)[f] = val;
  10b872:	41 89 01             	mov    %eax,(%r9)
  10b875:	41 89 30             	mov    %esi,(%r8)
  10b878:	89 54 c7 0c          	mov    %edx,0xc(%rdi,%rax,8)
  10b87c:	89 11                	mov    %edx,(%rcx)
		int bidx = bucket_idx(h, chunk_size(h, c));
		free_list_add_bidx(h, c, bidx);
	}
}
  10b87e:	5d                   	pop    %rbp
  10b87f:	c3                   	retq   

000000000010b880 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
  10b880:	49 89 f8             	mov    %rdi,%r8
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
  10b883:	4c 8d 4c 16 f8       	lea    -0x8(%rsi,%rdx,1),%r9
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
  10b888:	48 8d 7e 07          	lea    0x7(%rsi),%rdi
{
  10b88c:	55                   	push   %rbp
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
  10b88d:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
  10b891:	49 83 e1 f8          	and    $0xfffffffffffffff8,%r9
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
  10b895:	ba 24 00 00 00       	mov    $0x24,%edx
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
  10b89a:	b9 20 00 00 00       	mov    $0x20,%ecx
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
  10b89f:	49 29 f9             	sub    %rdi,%r9
	heap->heap = h;
  10b8a2:	49 89 38             	mov    %rdi,(%r8)
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
  10b8a5:	49 c1 e9 03          	shr    $0x3,%r9
	h->avail_buckets = 0;
  10b8a9:	c7 47 0c 00 00 00 00 	movl   $0x0,0xc(%rdi)
{
  10b8b0:	48 89 e5             	mov    %rsp,%rbp
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
  10b8b3:	41 8d 41 ff          	lea    -0x1(%r9),%eax
	h->end_chunk = heap_sz;
  10b8b7:	44 89 4f 08          	mov    %r9d,0x8(%rdi)
	return 31 - __builtin_clz(usable_sz);
  10b8bb:	0f bd c0             	bsr    %eax,%eax
  10b8be:	83 f0 1f             	xor    $0x1f,%eax
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
  10b8c1:	29 c2                	sub    %eax,%edx
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
  10b8c3:	29 c1                	sub    %eax,%ecx
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
  10b8c5:	48 63 c2             	movslq %edx,%rax
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
  10b8c8:	4c 8d 14 85 07 00 00 	lea    0x7(,%rax,4),%r10
  10b8cf:	00 
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
  10b8d0:	31 c0                	xor    %eax,%eax
  10b8d2:	49 c1 ea 03          	shr    $0x3,%r10
  10b8d6:	39 c1                	cmp    %eax,%ecx
  10b8d8:	7e 0d                	jle    10b8e7 <sys_heap_init+0x67>
		h->buckets[i].next = 0;
  10b8da:	c7 44 87 10 00 00 00 	movl   $0x0,0x10(%rdi,%rax,4)
  10b8e1:	00 
	for (int i = 0; i < nb_buckets; i++) {
  10b8e2:	48 ff c0             	inc    %rax
  10b8e5:	eb ef                	jmp    10b8d6 <sys_heap_init+0x56>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
  10b8e7:	43 8d 04 12          	lea    (%r10,%r10,1),%eax
		((uint32_t *)cmem)[f] = val;
  10b8eb:	c7 07 00 00 00 00    	movl   $0x0,(%rdi)
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);
  10b8f1:	ba 01 00 00 00       	mov    $0x1,%edx
  10b8f6:	31 f6                	xor    %esi,%esi
	chunk_set(h, c, SIZE_AND_USED, size << 1);
  10b8f8:	89 47 04             	mov    %eax,0x4(%rdi)
  10b8fb:	e8 f4 fe ff ff       	callq  10b7f4 <set_chunk_used>

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
  10b900:	44 89 ca             	mov    %r9d,%edx
		((uint32_t *)cmem)[f] = val;
  10b903:	46 89 14 d7          	mov    %r10d,(%rdi,%r10,8)
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
  10b907:	44 89 ce             	mov    %r9d,%esi
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
  10b90a:	44 29 d2             	sub    %r10d,%edx
	chunk_set(h, c, SIZE_AND_USED, size << 1);
  10b90d:	8d 04 12             	lea    (%rdx,%rdx,1),%eax
  10b910:	42 89 44 d7 04       	mov    %eax,0x4(%rdi,%r10,8)
	void *cmem = &buf[c];
  10b915:	44 89 c8             	mov    %r9d,%eax
		((uint32_t *)cmem)[f] = val;
  10b918:	89 14 c7             	mov    %edx,(%rdi,%rax,8)
	set_chunk_used(h, heap_sz, true);
  10b91b:	ba 01 00 00 00       	mov    $0x1,%edx
  10b920:	c7 44 c7 04 00 00 00 	movl   $0x0,0x4(%rdi,%rax,8)
  10b927:	00 
  10b928:	e8 c7 fe ff ff       	callq  10b7f4 <set_chunk_used>

	free_list_add(h, chunk0_size);
  10b92d:	44 89 d6             	mov    %r10d,%esi
}
  10b930:	5d                   	pop    %rbp
	free_list_add(h, chunk0_size);
  10b931:	e9 dd fe ff ff       	jmpq   10b813 <free_list_add>

000000000010b936 <setup_bundle_data.constprop.0>:

static void setup_bundle_data(sys_bitarray_t *bitarray,
			      struct bundle_data *bd,
			      size_t offset, size_t num_bits)
{
	bd->sidx = offset / bundle_bitness(bitarray);
  10b936:	49 89 f1             	mov    %rsi,%r9
	bd->soff = offset % bundle_bitness(bitarray);
  10b939:	48 89 f1             	mov    %rsi,%rcx

	bd->eidx = (offset + num_bits - 1) / bundle_bitness(bitarray);
  10b93c:	48 8d 74 16 ff       	lea    -0x1(%rsi,%rdx,1),%rsi
	bd->eoff = (offset + num_bits - 1) % bundle_bitness(bitarray);

	bd->smask = ~(BIT(bd->soff) - 1);
  10b941:	ba 01 00 00 00       	mov    $0x1,%edx
	bd->soff = offset % bundle_bitness(bitarray);
  10b946:	83 e1 1f             	and    $0x1f,%ecx
	bd->eidx = (offset + num_bits - 1) / bundle_bitness(bitarray);
  10b949:	49 89 f0             	mov    %rsi,%r8
	bd->smask = ~(BIT(bd->soff) - 1);
  10b94c:	48 89 d0             	mov    %rdx,%rax
	bd->eoff = (offset + num_bits - 1) % bundle_bitness(bitarray);
  10b94f:	83 e6 1f             	and    $0x1f,%esi
	bd->smask = ~(BIT(bd->soff) - 1);
  10b952:	48 d3 e0             	shl    %cl,%rax
	bd->soff = offset % bundle_bitness(bitarray);
  10b955:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
	bd->emask = (BIT(bd->eoff) - 1) | BIT(bd->eoff);
  10b959:	89 f1                	mov    %esi,%ecx
	bd->sidx = offset / bundle_bitness(bitarray);
  10b95b:	49 c1 e9 05          	shr    $0x5,%r9
	bd->emask = (BIT(bd->eoff) - 1) | BIT(bd->eoff);
  10b95f:	48 d3 e2             	shl    %cl,%rdx
	bd->eidx = (offset + num_bits - 1) / bundle_bitness(bitarray);
  10b962:	49 c1 e8 05          	shr    $0x5,%r8
	bd->smask = ~(BIT(bd->soff) - 1);
  10b966:	f7 d8                	neg    %eax
	bd->sidx = offset / bundle_bitness(bitarray);
  10b968:	4c 89 0f             	mov    %r9,(%rdi)
	bd->emask = (BIT(bd->eoff) - 1) | BIT(bd->eoff);
  10b96b:	8d 4a ff             	lea    -0x1(%rdx),%ecx
	bd->eidx = (offset + num_bits - 1) / bundle_bitness(bitarray);
  10b96e:	4c 89 47 08          	mov    %r8,0x8(%rdi)
	bd->emask = (BIT(bd->eoff) - 1) | BIT(bd->eoff);
  10b972:	09 ca                	or     %ecx,%edx
	bd->eoff = (offset + num_bits - 1) % bundle_bitness(bitarray);
  10b974:	48 89 77 18          	mov    %rsi,0x18(%rdi)
	bd->smask = ~(BIT(bd->soff) - 1);
  10b978:	89 47 20             	mov    %eax,0x20(%rdi)
	bd->emask = (BIT(bd->eoff) - 1) | BIT(bd->eoff);
  10b97b:	89 57 24             	mov    %edx,0x24(%rdi)

	if (bd->sidx == bd->eidx) {
  10b97e:	4d 39 c1             	cmp    %r8,%r9
  10b981:	75 05                	jne    10b988 <setup_bundle_data.constprop.0+0x52>
		/* The region lies within the same bundle. So combine the masks. */
		bd->smask &= bd->emask;
  10b983:	21 d0                	and    %edx,%eax
  10b985:	89 47 20             	mov    %eax,0x20(%rdi)
	}
}
  10b988:	c3                   	retq   

000000000010b989 <set_region>:
 *                 prior call to match_region().
 */
static void set_region(sys_bitarray_t *bitarray, size_t offset,
		       size_t num_bits, bool to_set,
		       struct bundle_data *bd)
{
  10b989:	55                   	push   %rbp
  10b98a:	49 89 fa             	mov    %rdi,%r10
  10b98d:	41 89 cb             	mov    %ecx,%r11d
  10b990:	48 89 e5             	mov    %rsp,%rbp
  10b993:	48 83 ec 30          	sub    $0x30,%rsp
	int idx;
	struct bundle_data bdata;

	if (bd == NULL) {
  10b997:	4d 85 c0             	test   %r8,%r8
  10b99a:	75 0c                	jne    10b9a8 <set_region+0x1f>
		bd = &bdata;
		setup_bundle_data(bitarray, bd, offset, num_bits);
  10b99c:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
  10b9a0:	e8 91 ff ff ff       	callq  10b936 <setup_bundle_data.constprop.0>
		bd = &bdata;
  10b9a5:	49 89 f8             	mov    %rdi,%r8
	}

	if (bd->sidx == bd->eidx) {
  10b9a8:	49 8b 00             	mov    (%r8),%rax
		/* Start/end at same bundle */
		if (to_set) {
			bitarray->bundles[bd->sidx] |= bd->smask;
  10b9ab:	49 8b 7a 08          	mov    0x8(%r10),%rdi
	if (bd->sidx == bd->eidx) {
  10b9af:	49 8b 70 08          	mov    0x8(%r8),%rsi
			bitarray->bundles[bd->sidx] |= bd->smask;
  10b9b3:	41 8b 48 20          	mov    0x20(%r8),%ecx
  10b9b7:	4c 8d 14 87          	lea    (%rdi,%rax,4),%r10
  10b9bb:	41 8b 12             	mov    (%r10),%edx
	if (bd->sidx == bd->eidx) {
  10b9be:	48 39 f0             	cmp    %rsi,%rax
  10b9c1:	75 13                	jne    10b9d6 <set_region+0x4d>
			bitarray->bundles[bd->sidx] |= bd->smask;
  10b9c3:	89 c8                	mov    %ecx,%eax
  10b9c5:	f7 d0                	not    %eax
  10b9c7:	21 d0                	and    %edx,%eax
  10b9c9:	09 ca                	or     %ecx,%edx
  10b9cb:	45 84 db             	test   %r11b,%r11b
  10b9ce:	0f 44 d0             	cmove  %eax,%edx
  10b9d1:	41 89 12             	mov    %edx,(%r10)
  10b9d4:	eb 4d                	jmp    10ba23 <set_region+0x9a>
		 * separately. For in-between bundles,
		 * set/clear all bits.
		 */
		if (to_set) {
			bitarray->bundles[bd->sidx] |= bd->smask;
			bitarray->bundles[bd->eidx] |= bd->emask;
  10b9d6:	4c 8d 0c b7          	lea    (%rdi,%rsi,4),%r9
			for (idx = bd->sidx + 1; idx < bd->eidx; idx++) {
  10b9da:	ff c0                	inc    %eax
		if (to_set) {
  10b9dc:	45 84 db             	test   %r11b,%r11b
  10b9df:	74 1f                	je     10ba00 <set_region+0x77>
			bitarray->bundles[bd->sidx] |= bd->smask;
  10b9e1:	09 ca                	or     %ecx,%edx
  10b9e3:	41 89 12             	mov    %edx,(%r10)
			bitarray->bundles[bd->eidx] |= bd->emask;
  10b9e6:	41 8b 50 24          	mov    0x24(%r8),%edx
  10b9ea:	41 09 11             	or     %edx,(%r9)
			for (idx = bd->sidx + 1; idx < bd->eidx; idx++) {
  10b9ed:	48 63 d0             	movslq %eax,%rdx
  10b9f0:	48 39 d6             	cmp    %rdx,%rsi
  10b9f3:	76 2e                	jbe    10ba23 <set_region+0x9a>
				bitarray->bundles[idx] = ~0U;
  10b9f5:	c7 04 97 ff ff ff ff 	movl   $0xffffffff,(%rdi,%rdx,4)
			for (idx = bd->sidx + 1; idx < bd->eidx; idx++) {
  10b9fc:	ff c0                	inc    %eax
  10b9fe:	eb ed                	jmp    10b9ed <set_region+0x64>
			}
		} else {
			bitarray->bundles[bd->sidx] &= ~bd->smask;
  10ba00:	f7 d1                	not    %ecx
  10ba02:	21 ca                	and    %ecx,%edx
  10ba04:	41 89 12             	mov    %edx,(%r10)
			bitarray->bundles[bd->eidx] &= ~bd->emask;
  10ba07:	41 8b 50 24          	mov    0x24(%r8),%edx
  10ba0b:	f7 d2                	not    %edx
  10ba0d:	41 21 11             	and    %edx,(%r9)
			for (idx = bd->sidx + 1; idx < bd->eidx; idx++) {
  10ba10:	48 63 d0             	movslq %eax,%rdx
  10ba13:	48 39 d6             	cmp    %rdx,%rsi
  10ba16:	76 0b                	jbe    10ba23 <set_region+0x9a>
				bitarray->bundles[idx] = 0U;
  10ba18:	c7 04 97 00 00 00 00 	movl   $0x0,(%rdi,%rdx,4)
			for (idx = bd->sidx + 1; idx < bd->eidx; idx++) {
  10ba1f:	ff c0                	inc    %eax
  10ba21:	eb ed                	jmp    10ba10 <set_region+0x87>
			}
		}
	}
}
  10ba23:	c9                   	leaveq 
  10ba24:	c3                   	retq   

000000000010ba25 <set_clear_region>:
	return is_region_set_clear(bitarray, num_bits, offset, false);
}

static int set_clear_region(sys_bitarray_t *bitarray, size_t num_bits,
			    size_t offset, bool to_set)
{
  10ba25:	55                   	push   %rbp
  10ba26:	49 89 f1             	mov    %rsi,%r9
  10ba29:	48 89 d6             	mov    %rdx,%rsi
	int ret;
	size_t off_end = offset + num_bits - 1;
  10ba2c:	49 8d 54 11 ff       	lea    -0x1(%r9,%rdx,1),%rdx
{
  10ba31:	48 89 e5             	mov    %rsp,%rbp
  10ba34:	53                   	push   %rbx
  10ba35:	41 50                	push   %r8
  10ba37:	9c                   	pushfq 
  10ba38:	fa                   	cli    
  10ba39:	5b                   	pop    %rbx

	if ((num_bits == 0)
	    || (num_bits > bitarray->num_bits)
	    || (offset >= bitarray->num_bits)
	    || (off_end >= bitarray->num_bits)) {
		ret = -EINVAL;
  10ba3a:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
	if ((num_bits == 0)
  10ba3f:	4d 85 c9             	test   %r9,%r9
  10ba42:	74 31                	je     10ba75 <set_clear_region+0x50>
	    || (num_bits > bitarray->num_bits)
  10ba44:	8b 07                	mov    (%rdi),%eax
  10ba46:	4c 39 c8             	cmp    %r9,%rax
  10ba49:	41 0f 92 c2          	setb   %r10b
	    || (offset >= bitarray->num_bits)
  10ba4d:	48 39 f0             	cmp    %rsi,%rax
  10ba50:	41 0f 96 c0          	setbe  %r8b
	    || (off_end >= bitarray->num_bits)) {
  10ba54:	45 08 c2             	or     %r8b,%r10b
  10ba57:	75 17                	jne    10ba70 <set_clear_region+0x4b>
  10ba59:	48 39 d0             	cmp    %rdx,%rax
  10ba5c:	76 12                	jbe    10ba70 <set_clear_region+0x4b>
		goto out;
	}

	set_region(bitarray, offset, num_bits, to_set, NULL);
  10ba5e:	0f b6 c9             	movzbl %cl,%ecx
  10ba61:	45 31 c0             	xor    %r8d,%r8d
  10ba64:	4c 89 ca             	mov    %r9,%rdx
  10ba67:	e8 1d ff ff ff       	callq  10b989 <set_region>
	ret = 0;
  10ba6c:	31 c0                	xor    %eax,%eax
  10ba6e:	eb 05                	jmp    10ba75 <set_clear_region+0x50>
		ret = -EINVAL;
  10ba70:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10ba75:	0f ba e3 09          	bt     $0x9,%ebx
  10ba79:	73 01                	jae    10ba7c <set_clear_region+0x57>
		__asm__ volatile ("sti" ::: "memory");
  10ba7b:	fb                   	sti    

out:
	k_spin_unlock(&bitarray->lock, key);
	return ret;
}
  10ba7c:	5a                   	pop    %rdx
  10ba7d:	5b                   	pop    %rbx
  10ba7e:	5d                   	pop    %rbp
  10ba7f:	c3                   	retq   

000000000010ba80 <match_region>:
{
  10ba80:	55                   	push   %rbp
  10ba81:	41 89 ca             	mov    %ecx,%r10d
  10ba84:	4d 89 cb             	mov    %r9,%r11
  10ba87:	48 89 e5             	mov    %rsp,%rbp
  10ba8a:	41 54                	push   %r12
  10ba8c:	49 89 fc             	mov    %rdi,%r12
  10ba8f:	4c 89 c7             	mov    %r8,%rdi
  10ba92:	53                   	push   %rbx
  10ba93:	89 cb                	mov    %ecx,%ebx
	setup_bundle_data(bitarray, bd, offset, num_bits);
  10ba95:	e8 9c fe ff ff       	callq  10b936 <setup_bundle_data.constprop.0>
	if (bd->sidx == bd->eidx) {
  10ba9a:	48 8b 17             	mov    (%rdi),%rdx
  10ba9d:	48 8b 77 08          	mov    0x8(%rdi),%rsi
  10baa1:	4d 8b 44 24 08       	mov    0x8(%r12),%r8
  10baa6:	8b 47 20             	mov    0x20(%rdi),%eax
  10baa9:	48 39 f2             	cmp    %rsi,%rdx
		bundle = bitarray->bundles[bd->sidx];
  10baac:	41 8b 0c 90          	mov    (%r8,%rdx,4),%ecx
	if (bd->sidx == bd->eidx) {
  10bab0:	75 14                	jne    10bac6 <match_region+0x46>
		if (!match_set) {
  10bab2:	45 84 d2             	test   %r10b,%r10b
  10bab5:	75 02                	jne    10bab9 <match_region+0x39>
			bundle = ~bundle;
  10bab7:	f7 d1                	not    %ecx
		if ((bundle & bd->smask) != bd->smask) {
  10bab9:	89 c6                	mov    %eax,%esi
	return true;
  10babb:	41 b0 01             	mov    $0x1,%r8b
		if ((bundle & bd->smask) != bd->smask) {
  10babe:	21 ce                	and    %ecx,%esi
  10bac0:	39 f0                	cmp    %esi,%eax
  10bac2:	75 14                	jne    10bad8 <match_region+0x58>
  10bac4:	eb 79                	jmp    10bb3f <match_region+0xbf>
	if (!match_set) {
  10bac6:	45 84 d2             	test   %r10b,%r10b
  10bac9:	75 02                	jne    10bacd <match_region+0x4d>
		bundle = ~bundle;
  10bacb:	f7 d1                	not    %ecx
	if ((bundle & bd->smask) != bd->smask) {
  10bacd:	41 89 c1             	mov    %eax,%r9d
  10bad0:	41 21 c9             	and    %ecx,%r9d
  10bad3:	44 39 c8             	cmp    %r9d,%eax
  10bad6:	74 06                	je     10bade <match_region+0x5e>
		mismatch_bundle = ~bundle & bd->smask;
  10bad8:	f7 d1                	not    %ecx
  10bada:	21 c8                	and    %ecx,%eax
		goto mismatch;
  10badc:	eb 45                	jmp    10bb23 <match_region+0xa3>
	bundle = bitarray->bundles[bd->eidx];
  10bade:	41 8b 04 b0          	mov    (%r8,%rsi,4),%eax
	if (!match_set) {
  10bae2:	45 84 d2             	test   %r10b,%r10b
  10bae5:	75 02                	jne    10bae9 <match_region+0x69>
		bundle = ~bundle;
  10bae7:	f7 d0                	not    %eax
	if ((bundle & bd->emask) != bd->emask) {
  10bae9:	8b 4f 24             	mov    0x24(%rdi),%ecx
  10baec:	89 cf                	mov    %ecx,%edi
  10baee:	21 c7                	and    %eax,%edi
  10baf0:	39 f9                	cmp    %edi,%ecx
  10baf2:	74 09                	je     10bafd <match_region+0x7d>
		mismatch_bundle = ~bundle & bd->emask;
  10baf4:	f7 d0                	not    %eax
		goto mismatch;
  10baf6:	48 89 f2             	mov    %rsi,%rdx
		mismatch_bundle = ~bundle & bd->emask;
  10baf9:	21 c8                	and    %ecx,%eax
		goto mismatch;
  10bafb:	eb 26                	jmp    10bb23 <match_region+0xa3>
	for (idx = bd->sidx + 1; idx < bd->eidx; idx++) {
  10bafd:	8d 4a 01             	lea    0x1(%rdx),%ecx
  10bb00:	48 63 d1             	movslq %ecx,%rdx
  10bb03:	48 39 d6             	cmp    %rdx,%rsi
  10bb06:	76 16                	jbe    10bb1e <match_region+0x9e>
		bundle = bitarray->bundles[idx];
  10bb08:	41 8b 04 90          	mov    (%r8,%rdx,4),%eax
		if (match_set) {
  10bb0c:	84 db                	test   %bl,%bl
  10bb0e:	74 02                	je     10bb12 <match_region+0x92>
			bundle = ~bundle;
  10bb10:	f7 d0                	not    %eax
		if (bundle != 0U) {
  10bb12:	85 c0                	test   %eax,%eax
  10bb14:	74 04                	je     10bb1a <match_region+0x9a>
			mismatch_bundle = ~bundle;
  10bb16:	f7 d0                	not    %eax
			goto mismatch;
  10bb18:	eb 09                	jmp    10bb23 <match_region+0xa3>
	for (idx = bd->sidx + 1; idx < bd->eidx; idx++) {
  10bb1a:	ff c1                	inc    %ecx
  10bb1c:	eb e2                	jmp    10bb00 <match_region+0x80>
	return true;
  10bb1e:	41 b0 01             	mov    $0x1,%r8b
  10bb21:	eb 1c                	jmp    10bb3f <match_region+0xbf>
	return false;
  10bb23:	45 31 c0             	xor    %r8d,%r8d
	if (mismatch != NULL) {
  10bb26:	4d 85 db             	test   %r11,%r11
  10bb29:	74 14                	je     10bb3f <match_region+0xbf>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
  10bb2b:	0f bc c0             	bsf    %eax,%eax
		mismatch_bit_off = find_lsb_set(mismatch_bundle) - 1;
  10bb2e:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  10bb33:	0f 44 c1             	cmove  %ecx,%eax
		mismatch_bit_off += mismatch_bundle_idx *
  10bb36:	48 c1 e2 05          	shl    $0x5,%rdx
		*mismatch = (uint32_t)mismatch_bit_off;
  10bb3a:	01 c2                	add    %eax,%edx
  10bb3c:	49 89 13             	mov    %rdx,(%r11)
}
  10bb3f:	5b                   	pop    %rbx
  10bb40:	44 89 c0             	mov    %r8d,%eax
  10bb43:	41 5c                	pop    %r12
  10bb45:	5d                   	pop    %rbp
  10bb46:	c3                   	retq   

000000000010bb47 <sys_bitarray_alloc>:
{
  10bb47:	55                   	push   %rbp
  10bb48:	48 89 e5             	mov    %rsp,%rbp
  10bb4b:	41 57                	push   %r15
  10bb4d:	41 56                	push   %r14
  10bb4f:	41 55                	push   %r13
  10bb51:	41 54                	push   %r12
  10bb53:	53                   	push   %rbx
  10bb54:	48 83 ec 48          	sub    $0x48,%rsp
  10bb58:	9c                   	pushfq 
  10bb59:	fa                   	cli    
  10bb5a:	41 5d                	pop    %r13
	if ((num_bits == 0) || (num_bits > bitarray->num_bits)) {
  10bb5c:	48 85 f6             	test   %rsi,%rsi
  10bb5f:	0f 84 ab 00 00 00    	je     10bc10 <sys_bitarray_alloc+0xc9>
  10bb65:	48 89 d3             	mov    %rdx,%rbx
  10bb68:	48 85 d2             	test   %rdx,%rdx
  10bb6b:	0f 84 9f 00 00 00    	je     10bc10 <sys_bitarray_alloc+0xc9>
  10bb71:	44 8b 3f             	mov    (%rdi),%r15d
  10bb74:	49 89 f6             	mov    %rsi,%r14
		ret = -EINVAL;
  10bb77:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
	if ((num_bits == 0) || (num_bits > bitarray->num_bits)) {
  10bb7c:	49 39 f7             	cmp    %rsi,%r15
  10bb7f:	0f 82 90 00 00 00    	jb     10bc15 <sys_bitarray_alloc+0xce>
  10bb85:	8b 4f 04             	mov    0x4(%rdi),%ecx
	for (ret = 0; ret < bitarray->num_bundles; ret++) {
  10bb88:	31 d2                	xor    %edx,%edx
  10bb8a:	89 d6                	mov    %edx,%esi
  10bb8c:	c1 e6 05             	shl    $0x5,%esi
  10bb8f:	39 ca                	cmp    %ecx,%edx
  10bb91:	74 27                	je     10bbba <sys_bitarray_alloc+0x73>
		if (~bitarray->bundles[ret] == 0U) {
  10bb93:	4c 8b 47 08          	mov    0x8(%rdi),%r8
  10bb97:	48 63 c2             	movslq %edx,%rax
  10bb9a:	41 8b 04 80          	mov    (%r8,%rax,4),%eax
  10bb9e:	83 f8 ff             	cmp    $0xffffffff,%eax
  10bba1:	75 04                	jne    10bba7 <sys_bitarray_alloc+0x60>
	for (ret = 0; ret < bitarray->num_bundles; ret++) {
  10bba3:	ff c2                	inc    %edx
  10bba5:	eb e3                	jmp    10bb8a <sys_bitarray_alloc+0x43>
		if (bitarray->bundles[ret] != 0U) {
  10bba7:	85 c0                	test   %eax,%eax
  10bba9:	74 0f                	je     10bbba <sys_bitarray_alloc+0x73>
			off_start = find_lsb_set(~bitarray->bundles[ret]) - 1;
  10bbab:	f7 d0                	not    %eax
  10bbad:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  10bbb2:	0f bc c0             	bsf    %eax,%eax
  10bbb5:	0f 44 c2             	cmove  %edx,%eax
			bit_idx += off_start;
  10bbb8:	01 c6                	add    %eax,%esi
	off_end = bitarray->num_bits - num_bits;
  10bbba:	4d 29 f7             	sub    %r14,%r15
	while (bit_idx <= off_end) {
  10bbbd:	41 89 f4             	mov    %esi,%r12d
  10bbc0:	4d 39 fc             	cmp    %r15,%r12
  10bbc3:	77 44                	ja     10bc09 <sys_bitarray_alloc+0xc2>
		if (match_region(bitarray, bit_idx, num_bits, false,
  10bbc5:	31 c9                	xor    %ecx,%ecx
  10bbc7:	4c 8d 4d a0          	lea    -0x60(%rbp),%r9
  10bbcb:	4c 8d 45 a8          	lea    -0x58(%rbp),%r8
  10bbcf:	4c 89 f2             	mov    %r14,%rdx
  10bbd2:	4c 89 e6             	mov    %r12,%rsi
  10bbd5:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  10bbd9:	e8 a2 fe ff ff       	callq  10ba80 <match_region>
  10bbde:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  10bbe2:	84 c0                	test   %al,%al
  10bbe4:	74 1b                	je     10bc01 <sys_bitarray_alloc+0xba>
			set_region(bitarray, bit_idx, num_bits, true, &bd);
  10bbe6:	4c 8d 45 a8          	lea    -0x58(%rbp),%r8
  10bbea:	b9 01 00 00 00       	mov    $0x1,%ecx
  10bbef:	4c 89 f2             	mov    %r14,%rdx
  10bbf2:	4c 89 e6             	mov    %r12,%rsi
  10bbf5:	e8 8f fd ff ff       	callq  10b989 <set_region>
			*offset = bit_idx;
  10bbfa:	4c 89 23             	mov    %r12,(%rbx)
			ret = 0;
  10bbfd:	31 c0                	xor    %eax,%eax
			break;
  10bbff:	eb 14                	jmp    10bc15 <sys_bitarray_alloc+0xce>
		bit_idx = mismatch + 1;
  10bc01:	8b 45 a0             	mov    -0x60(%rbp),%eax
  10bc04:	8d 70 01             	lea    0x1(%rax),%esi
  10bc07:	eb b4                	jmp    10bbbd <sys_bitarray_alloc+0x76>
	ret = -ENOSPC;
  10bc09:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
out:
  10bc0e:	eb 05                	jmp    10bc15 <sys_bitarray_alloc+0xce>
		ret = -EINVAL;
  10bc10:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10bc15:	41 0f ba e5 09       	bt     $0x9,%r13d
  10bc1a:	73 01                	jae    10bc1d <sys_bitarray_alloc+0xd6>
		__asm__ volatile ("sti" ::: "memory");
  10bc1c:	fb                   	sti    
}
  10bc1d:	48 83 c4 48          	add    $0x48,%rsp
  10bc21:	5b                   	pop    %rbx
  10bc22:	41 5c                	pop    %r12
  10bc24:	41 5d                	pop    %r13
  10bc26:	41 5e                	pop    %r14
  10bc28:	41 5f                	pop    %r15
  10bc2a:	5d                   	pop    %rbp
  10bc2b:	c3                   	retq   

000000000010bc2c <sys_bitarray_free>:
{
  10bc2c:	55                   	push   %rbp
  10bc2d:	48 89 e5             	mov    %rsp,%rbp
  10bc30:	41 55                	push   %r13
  10bc32:	49 89 d5             	mov    %rdx,%r13
	size_t off_end = offset + num_bits - 1;
  10bc35:	48 8d 54 16 ff       	lea    -0x1(%rsi,%rdx,1),%rdx
{
  10bc3a:	41 54                	push   %r12
  10bc3c:	53                   	push   %rbx
  10bc3d:	48 83 ec 48          	sub    $0x48,%rsp
  10bc41:	9c                   	pushfq 
  10bc42:	fa                   	cli    
  10bc43:	5b                   	pop    %rbx
		ret = -EINVAL;
  10bc44:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
	if ((num_bits == 0)
  10bc49:	48 85 f6             	test   %rsi,%rsi
  10bc4c:	74 62                	je     10bcb0 <sys_bitarray_free+0x84>
	    || (num_bits > bitarray->num_bits)
  10bc4e:	8b 07                	mov    (%rdi),%eax
  10bc50:	49 89 f4             	mov    %rsi,%r12
  10bc53:	48 39 f0             	cmp    %rsi,%rax
  10bc56:	40 0f 92 c6          	setb   %sil
	    || (offset >= bitarray->num_bits)
  10bc5a:	4c 39 e8             	cmp    %r13,%rax
  10bc5d:	0f 96 c1             	setbe  %cl
	    || (off_end >= bitarray->num_bits)) {
  10bc60:	40 08 ce             	or     %cl,%sil
  10bc63:	75 46                	jne    10bcab <sys_bitarray_free+0x7f>
  10bc65:	48 39 d0             	cmp    %rdx,%rax
  10bc68:	76 41                	jbe    10bcab <sys_bitarray_free+0x7f>
	if (match_region(bitarray, offset, num_bits, true, &bd, NULL)) {
  10bc6a:	4c 8d 45 b8          	lea    -0x48(%rbp),%r8
  10bc6e:	45 31 c9             	xor    %r9d,%r9d
  10bc71:	b9 01 00 00 00       	mov    $0x1,%ecx
  10bc76:	4c 89 e2             	mov    %r12,%rdx
  10bc79:	4c 89 ee             	mov    %r13,%rsi
  10bc7c:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  10bc80:	e8 fb fd ff ff       	callq  10ba80 <match_region>
  10bc85:	41 89 c0             	mov    %eax,%r8d
		ret = -EFAULT;
  10bc88:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
	if (match_region(bitarray, offset, num_bits, true, &bd, NULL)) {
  10bc8d:	45 84 c0             	test   %r8b,%r8b
  10bc90:	74 1e                	je     10bcb0 <sys_bitarray_free+0x84>
		set_region(bitarray, offset, num_bits, false, &bd);
  10bc92:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
  10bc96:	4c 8d 45 b8          	lea    -0x48(%rbp),%r8
  10bc9a:	31 c9                	xor    %ecx,%ecx
  10bc9c:	4c 89 e2             	mov    %r12,%rdx
  10bc9f:	4c 89 ee             	mov    %r13,%rsi
  10bca2:	e8 e2 fc ff ff       	callq  10b989 <set_region>
		ret = 0;
  10bca7:	31 c0                	xor    %eax,%eax
  10bca9:	eb 05                	jmp    10bcb0 <sys_bitarray_free+0x84>
		ret = -EINVAL;
  10bcab:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10bcb0:	0f ba e3 09          	bt     $0x9,%ebx
  10bcb4:	73 01                	jae    10bcb7 <sys_bitarray_free+0x8b>
		__asm__ volatile ("sti" ::: "memory");
  10bcb6:	fb                   	sti    
}
  10bcb7:	48 83 c4 48          	add    $0x48,%rsp
  10bcbb:	5b                   	pop    %rbx
  10bcbc:	41 5c                	pop    %r12
  10bcbe:	41 5d                	pop    %r13
  10bcc0:	5d                   	pop    %rbp
  10bcc1:	c3                   	retq   

000000000010bcc2 <sys_bitarray_set_region>:

int sys_bitarray_set_region(sys_bitarray_t *bitarray, size_t num_bits,
			    size_t offset)
{
	return set_clear_region(bitarray, num_bits, offset, true);
  10bcc2:	b9 01 00 00 00       	mov    $0x1,%ecx
  10bcc7:	e9 59 fd ff ff       	jmpq   10ba25 <set_clear_region>

000000000010bccc <extract_decimal>:
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
	const char *sp = *str;
  10bccc:	48 8b 17             	mov    (%rdi),%rdx
	size_t val = 0;
  10bccf:	31 c0                	xor    %eax,%eax

	while (isdigit((int)(unsigned char)*sp)) {
  10bcd1:	48 0f be 0a          	movsbq (%rdx),%rcx
  10bcd5:	0f b6 f1             	movzbl %cl,%esi
  10bcd8:	f6 86 e1 02 11 00 04 	testb  $0x4,0x1102e1(%rsi)
  10bcdf:	74 0e                	je     10bcef <extract_decimal+0x23>
		val = 10U * val + *sp++ - '0';
  10bce1:	48 6b c0 0a          	imul   $0xa,%rax,%rax
  10bce5:	48 ff c2             	inc    %rdx
  10bce8:	48 8d 44 08 d0       	lea    -0x30(%rax,%rcx,1),%rax
  10bced:	eb e2                	jmp    10bcd1 <extract_decimal+0x5>
	}
	*str = sp;
  10bcef:	48 89 17             	mov    %rdx,(%rdi)
	return val;
}
  10bcf2:	c3                   	retq   

000000000010bcf3 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
  10bcf3:	49 89 d1             	mov    %rdx,%r9
	bool upcase = isupper((int)conv->specifier);
  10bcf6:	0f b6 56 03          	movzbl 0x3(%rsi),%edx
{
  10bcfa:	49 89 c8             	mov    %rcx,%r8
	switch (specifier) {
  10bcfd:	b9 08 00 00 00       	mov    $0x8,%ecx
  10bd02:	44 8a 92 e1 02 11 00 	mov    0x1102e1(%rdx),%r10b
	bool upcase = isupper((int)conv->specifier);
  10bd09:	48 89 d0             	mov    %rdx,%rax
  10bd0c:	41 83 e2 03          	and    $0x3,%r10d
	switch (specifier) {
  10bd10:	80 fa 6f             	cmp    $0x6f,%dl
  10bd13:	74 3d                	je     10bd52 <encode_uint+0x5f>
  10bd15:	77 05                	ja     10bd1c <encode_uint+0x29>
		return 16;
  10bd17:	80 fa 58             	cmp    $0x58,%dl
  10bd1a:	eb 05                	jmp    10bd21 <encode_uint+0x2e>
	switch (specifier) {
  10bd1c:	83 e0 f7             	and    $0xfffffff7,%eax
		return 16;
  10bd1f:	3c 70                	cmp    $0x70,%al
  10bd21:	b9 0a 00 00 00       	mov    $0xa,%ecx
  10bd26:	b8 10 00 00 00       	mov    $0x10,%eax
  10bd2b:	48 0f 44 c8          	cmove  %rax,%rcx
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
  10bd2f:	eb 21                	jmp    10bd52 <encode_uint+0x5f>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
  10bd31:	44 8d 5a 57          	lea    0x57(%rdx),%r11d
		*--bp = (lsv <= 9) ? ('0' + lsv)
  10bd35:	41 80 fa 01          	cmp    $0x1,%r10b
  10bd39:	75 04                	jne    10bd3f <encode_uint+0x4c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
  10bd3b:	44 8d 5a 37          	lea    0x37(%rdx),%r11d
		*--bp = (lsv <= 9) ? ('0' + lsv)
  10bd3f:	49 ff c8             	dec    %r8
  10bd42:	45 88 18             	mov    %r11b,(%r8)
		value /= radix;
	} while ((value != 0) && (bps < bp));
  10bd45:	48 39 cf             	cmp    %rcx,%rdi
  10bd48:	72 1c                	jb     10bd66 <encode_uint+0x73>
  10bd4a:	4d 39 c8             	cmp    %r9,%r8
  10bd4d:	76 17                	jbe    10bd66 <encode_uint+0x73>
		value /= radix;
  10bd4f:	48 89 c7             	mov    %rax,%rdi
		unsigned int lsv = (unsigned int)(value % radix);
  10bd52:	48 89 f8             	mov    %rdi,%rax
  10bd55:	31 d2                	xor    %edx,%edx
  10bd57:	48 f7 f1             	div    %rcx
		*--bp = (lsv <= 9) ? ('0' + lsv)
  10bd5a:	44 8d 5a 30          	lea    0x30(%rdx),%r11d
  10bd5e:	48 83 fa 09          	cmp    $0x9,%rdx
  10bd62:	76 db                	jbe    10bd3f <encode_uint+0x4c>
  10bd64:	eb cb                	jmp    10bd31 <encode_uint+0x3e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
  10bd66:	f6 06 20             	testb  $0x20,(%rsi)
  10bd69:	74 16                	je     10bd81 <encode_uint+0x8e>
		if (radix == 8) {
  10bd6b:	48 83 f9 08          	cmp    $0x8,%rcx
  10bd6f:	75 06                	jne    10bd77 <encode_uint+0x84>
			conv->altform_0 = true;
  10bd71:	80 4e 02 08          	orb    $0x8,0x2(%rsi)
  10bd75:	eb 0a                	jmp    10bd81 <encode_uint+0x8e>
		} else if (radix == 16) {
  10bd77:	48 83 f9 10          	cmp    $0x10,%rcx
  10bd7b:	75 04                	jne    10bd81 <encode_uint+0x8e>
			conv->altform_0c = true;
  10bd7d:	80 4e 02 10          	orb    $0x10,0x2(%rsi)
			;
		}
	}

	return bp;
}
  10bd81:	4c 89 c0             	mov    %r8,%rax
  10bd84:	c3                   	retq   

000000000010bd85 <outs>:
/* Outline function to emit all characters in [sp, ep). */
static int outs(cbprintf_cb out,
		void *ctx,
		const char *sp,
		const char *ep)
{
  10bd85:	55                   	push   %rbp
  10bd86:	48 89 e5             	mov    %rsp,%rbp
  10bd89:	41 57                	push   %r15
  10bd8b:	49 89 f7             	mov    %rsi,%r15
  10bd8e:	41 56                	push   %r14
  10bd90:	49 89 fe             	mov    %rdi,%r14
  10bd93:	41 55                	push   %r13
  10bd95:	49 89 cd             	mov    %rcx,%r13
  10bd98:	41 54                	push   %r12
  10bd9a:	49 89 d4             	mov    %rdx,%r12
  10bd9d:	53                   	push   %rbx
	size_t count = 0;
  10bd9e:	31 db                	xor    %ebx,%ebx
{
  10bda0:	41 50                	push   %r8

	while ((sp < ep) || ((ep == NULL) && *sp)) {
  10bda2:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  10bda6:	49 39 c5             	cmp    %rax,%r13
  10bda9:	76 16                	jbe    10bdc1 <outs+0x3c>
		int rc = out((int)*sp++, ctx);
  10bdab:	31 c0                	xor    %eax,%eax
  10bdad:	41 0f be 3c 1c       	movsbl (%r12,%rbx,1),%edi
  10bdb2:	4c 89 fe             	mov    %r15,%rsi
  10bdb5:	41 ff d6             	callq  *%r14

		if (rc < 0) {
  10bdb8:	85 c0                	test   %eax,%eax
  10bdba:	78 17                	js     10bdd3 <outs+0x4e>
			return rc;
		}
		++count;
  10bdbc:	48 ff c3             	inc    %rbx
  10bdbf:	eb e1                	jmp    10bda2 <outs+0x1d>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
  10bdc1:	4d 85 ed             	test   %r13,%r13
  10bdc4:	74 04                	je     10bdca <outs+0x45>
	}

	return (int)count;
  10bdc6:	89 d8                	mov    %ebx,%eax
  10bdc8:	eb 09                	jmp    10bdd3 <outs+0x4e>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
  10bdca:	41 80 3c 1c 00       	cmpb   $0x0,(%r12,%rbx,1)
  10bdcf:	75 da                	jne    10bdab <outs+0x26>
  10bdd1:	eb f3                	jmp    10bdc6 <outs+0x41>
}
  10bdd3:	5a                   	pop    %rdx
  10bdd4:	5b                   	pop    %rbx
  10bdd5:	41 5c                	pop    %r12
  10bdd7:	41 5d                	pop    %r13
  10bdd9:	41 5e                	pop    %r14
  10bddb:	41 5f                	pop    %r15
  10bddd:	5d                   	pop    %rbp
  10bdde:	c3                   	retq   

000000000010bddf <cbvprintf>:

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
  10bddf:	55                   	push   %rbp
  10bde0:	49 89 d3             	mov    %rdx,%r11
  10bde3:	48 89 e5             	mov    %rsp,%rbp
  10bde6:	41 57                	push   %r15
  10bde8:	49 89 f7             	mov    %rsi,%r15
  10bdeb:	41 56                	push   %r14
  10bded:	49 89 ce             	mov    %rcx,%r14
  10bdf0:	41 55                	push   %r13
  10bdf2:	41 54                	push   %r12
  10bdf4:	53                   	push   %rbx
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
  10bdf5:	31 db                	xor    %ebx,%ebx
{
  10bdf7:	48 83 ec 68          	sub    $0x68,%rsp
  10bdfb:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
  10bdff:	41 0f be 3b          	movsbl (%r11),%edi
  10be03:	40 84 ff             	test   %dil,%dil
  10be06:	0f 84 02 09 00 00    	je     10c70e <cbvprintf+0x92f>
		if (*fp != '%') {
			OUTC(*fp++);
  10be0c:	4d 8d 63 01          	lea    0x1(%r11),%r12
  10be10:	4c 89 fe             	mov    %r15,%rsi
		if (*fp != '%') {
  10be13:	40 80 ff 25          	cmp    $0x25,%dil
  10be17:	0f 85 e4 05 00 00    	jne    10c401 <cbvprintf+0x622>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
  10be1d:	31 c0                	xor    %eax,%eax
  10be1f:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
  10be23:	b9 08 00 00 00       	mov    $0x8,%ecx
  10be28:	f3 ab                	rep stos %eax,%es:(%rdi)
	if (*sp == '%') {
  10be2a:	41 80 7b 01 25       	cmpb   $0x25,0x1(%r11)
  10be2f:	75 1a                	jne    10be4b <cbvprintf+0x6c>
		conv->specifier = *sp++;
  10be31:	c6 45 c3 25          	movb   $0x25,-0x3d(%rbp)
  10be35:	4d 8d 63 02          	lea    0x2(%r11),%r12
		return sp;
  10be39:	e9 91 02 00 00       	jmpq   10c0cf <cbvprintf+0x2f0>
		switch (*sp) {
  10be3e:	7e 15                	jle    10be55 <cbvprintf+0x76>
  10be40:	3c 2d                	cmp    $0x2d,%al
  10be42:	75 1b                	jne    10be5f <cbvprintf+0x80>
			conv->flag_dash = true;
  10be44:	80 4d c0 04          	orb    $0x4,-0x40(%rbp)
			++sp;
  10be48:	49 ff c4             	inc    %r12
		switch (*sp) {
  10be4b:	41 8a 04 24          	mov    (%r12),%al
  10be4f:	3c 2b                	cmp    $0x2b,%al
  10be51:	75 eb                	jne    10be3e <cbvprintf+0x5f>
  10be53:	eb 23                	jmp    10be78 <cbvprintf+0x99>
  10be55:	3c 20                	cmp    $0x20,%al
  10be57:	74 25                	je     10be7e <cbvprintf+0x9f>
  10be59:	3c 23                	cmp    $0x23,%al
  10be5b:	74 27                	je     10be84 <cbvprintf+0xa5>
  10be5d:	eb 04                	jmp    10be63 <cbvprintf+0x84>
  10be5f:	3c 30                	cmp    $0x30,%al
  10be61:	74 27                	je     10be8a <cbvprintf+0xab>
	if (conv->flag_zero && conv->flag_dash) {
  10be63:	8a 45 c0             	mov    -0x40(%rbp),%al
  10be66:	89 c2                	mov    %eax,%edx
  10be68:	83 e2 44             	and    $0x44,%edx
  10be6b:	80 fa 44             	cmp    $0x44,%dl
  10be6e:	75 20                	jne    10be90 <cbvprintf+0xb1>
		conv->flag_zero = false;
  10be70:	83 e0 bf             	and    $0xffffffbf,%eax
  10be73:	88 45 c0             	mov    %al,-0x40(%rbp)
  10be76:	eb 18                	jmp    10be90 <cbvprintf+0xb1>
			conv->flag_plus = true;
  10be78:	80 4d c0 08          	orb    $0x8,-0x40(%rbp)
			break;
  10be7c:	eb ca                	jmp    10be48 <cbvprintf+0x69>
			conv->flag_space = true;
  10be7e:	80 4d c0 10          	orb    $0x10,-0x40(%rbp)
			break;
  10be82:	eb c4                	jmp    10be48 <cbvprintf+0x69>
			conv->flag_hash = true;
  10be84:	80 4d c0 20          	orb    $0x20,-0x40(%rbp)
			break;
  10be88:	eb be                	jmp    10be48 <cbvprintf+0x69>
			conv->flag_zero = true;
  10be8a:	80 4d c0 40          	orb    $0x40,-0x40(%rbp)
			break;
  10be8e:	eb b8                	jmp    10be48 <cbvprintf+0x69>
	conv->width_present = true;
  10be90:	80 4d c0 80          	orb    $0x80,-0x40(%rbp)
  10be94:	4c 89 65 90          	mov    %r12,-0x70(%rbp)
	if (*sp == '*') {
  10be98:	41 80 3c 24 2a       	cmpb   $0x2a,(%r12)
  10be9d:	75 09                	jne    10bea8 <cbvprintf+0xc9>
		conv->width_star = true;
  10be9f:	80 4d c1 01          	orb    $0x1,-0x3f(%rbp)
		return ++sp;
  10bea3:	49 ff c4             	inc    %r12
  10bea6:	eb 4f                	jmp    10bef7 <cbvprintf+0x118>
	size_t width = extract_decimal(&sp);
  10bea8:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
  10beac:	e8 1b fe ff ff       	callq  10bccc <extract_decimal>
	if (sp != wp) {
  10beb1:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
	size_t width = extract_decimal(&sp);
  10beb5:	48 89 c2             	mov    %rax,%rdx
	if (sp != wp) {
  10beb8:	4c 39 e1             	cmp    %r12,%rcx
  10bebb:	74 3a                	je     10bef7 <cbvprintf+0x118>
		conv->width_present = true;
  10bebd:	8a 45 c0             	mov    -0x40(%rbp),%al
		conv->width_value = width;
  10bec0:	89 55 c4             	mov    %edx,-0x3c(%rbp)
				      || (width != (size_t)conv->width_value));
  10bec3:	be 01 00 00 00       	mov    $0x1,%esi
		conv->width_present = true;
  10bec8:	83 c8 80             	or     $0xffffff80,%eax
  10becb:	88 45 c0             	mov    %al,-0x40(%rbp)
		conv->unsupported |= ((conv->width_value < 0)
  10bece:	d0 e8                	shr    %al
  10bed0:	83 e0 01             	and    $0x1,%eax
				      || (width != (size_t)conv->width_value));
  10bed3:	85 d2                	test   %edx,%edx
  10bed5:	78 0e                	js     10bee5 <cbvprintf+0x106>
  10bed7:	48 63 f2             	movslq %edx,%rsi
  10beda:	48 39 d6             	cmp    %rdx,%rsi
  10bedd:	40 0f 95 c6          	setne  %sil
  10bee1:	40 0f b6 f6          	movzbl %sil,%esi
		conv->unsupported |= ((conv->width_value < 0)
  10bee5:	8a 55 c0             	mov    -0x40(%rbp),%dl
  10bee8:	09 f0                	or     %esi,%eax
  10beea:	49 89 cc             	mov    %rcx,%r12
  10beed:	01 c0                	add    %eax,%eax
  10beef:	83 e2 fd             	and    $0xfffffffd,%edx
  10bef2:	09 d0                	or     %edx,%eax
  10bef4:	88 45 c0             	mov    %al,-0x40(%rbp)
	sp = extract_prec(conv, sp);
  10bef7:	4c 89 65 90          	mov    %r12,-0x70(%rbp)
	conv->prec_present = (*sp == '.');
  10befb:	41 8a 0c 24          	mov    (%r12),%cl
  10beff:	80 f9 2e             	cmp    $0x2e,%cl
  10bf02:	0f 94 c0             	sete   %al
  10bf05:	8d 14 00             	lea    (%rax,%rax,1),%edx
  10bf08:	8a 45 c1             	mov    -0x3f(%rbp),%al
  10bf0b:	83 e0 fd             	and    $0xfffffffd,%eax
  10bf0e:	09 d0                	or     %edx,%eax
  10bf10:	88 45 c1             	mov    %al,-0x3f(%rbp)
	if (!conv->prec_present) {
  10bf13:	80 f9 2e             	cmp    $0x2e,%cl
  10bf16:	75 5c                	jne    10bf74 <cbvprintf+0x195>
	++sp;
  10bf18:	49 8d 54 24 01       	lea    0x1(%r12),%rdx
  10bf1d:	48 89 55 90          	mov    %rdx,-0x70(%rbp)
	if (*sp == '*') {
  10bf21:	41 80 7c 24 01 2a    	cmpb   $0x2a,0x1(%r12)
  10bf27:	75 0c                	jne    10bf35 <cbvprintf+0x156>
		conv->prec_star = true;
  10bf29:	83 c8 04             	or     $0x4,%eax
		return ++sp;
  10bf2c:	49 83 c4 02          	add    $0x2,%r12
		conv->prec_star = true;
  10bf30:	88 45 c1             	mov    %al,-0x3f(%rbp)
		return ++sp;
  10bf33:	eb 3f                	jmp    10bf74 <cbvprintf+0x195>
	size_t prec = extract_decimal(&sp);
  10bf35:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
  10bf39:	e8 8e fd ff ff       	callq  10bccc <extract_decimal>
			      || (prec != (size_t)conv->prec_value));
  10bf3e:	b9 01 00 00 00       	mov    $0x1,%ecx
	conv->prec_value = prec;
  10bf43:	89 45 c8             	mov    %eax,-0x38(%rbp)
	size_t prec = extract_decimal(&sp);
  10bf46:	48 89 c2             	mov    %rax,%rdx
	conv->unsupported |= ((conv->prec_value < 0)
  10bf49:	8a 45 c0             	mov    -0x40(%rbp),%al
  10bf4c:	d0 e8                	shr    %al
  10bf4e:	83 e0 01             	and    $0x1,%eax
			      || (prec != (size_t)conv->prec_value));
  10bf51:	85 d2                	test   %edx,%edx
  10bf53:	78 0c                	js     10bf61 <cbvprintf+0x182>
  10bf55:	48 63 ca             	movslq %edx,%rcx
  10bf58:	48 39 d1             	cmp    %rdx,%rcx
  10bf5b:	0f 95 c1             	setne  %cl
  10bf5e:	0f b6 c9             	movzbl %cl,%ecx
	conv->unsupported |= ((conv->prec_value < 0)
  10bf61:	8a 55 c0             	mov    -0x40(%rbp),%dl
  10bf64:	09 c8                	or     %ecx,%eax
	return sp;
  10bf66:	4c 8b 65 90          	mov    -0x70(%rbp),%r12
	conv->unsupported |= ((conv->prec_value < 0)
  10bf6a:	01 c0                	add    %eax,%eax
  10bf6c:	83 e2 fd             	and    $0xfffffffd,%edx
  10bf6f:	09 d0                	or     %edx,%eax
  10bf71:	88 45 c0             	mov    %al,-0x40(%rbp)
	switch (*sp) {
  10bf74:	41 8a 0c 24          	mov    (%r12),%cl
		if (*++sp == 'h') {
  10bf78:	49 8d 54 24 01       	lea    0x1(%r12),%rdx
	switch (*sp) {
  10bf7d:	80 f9 6c             	cmp    $0x6c,%cl
  10bf80:	74 52                	je     10bfd4 <cbvprintf+0x1f5>
  10bf82:	7f 20                	jg     10bfa4 <cbvprintf+0x1c5>
  10bf84:	80 f9 68             	cmp    $0x68,%cl
  10bf87:	74 30                	je     10bfb9 <cbvprintf+0x1da>
  10bf89:	80 f9 6a             	cmp    $0x6a,%cl
  10bf8c:	74 6c                	je     10bffa <cbvprintf+0x21b>
  10bf8e:	80 f9 4c             	cmp    $0x4c,%cl
  10bf91:	75 7a                	jne    10c00d <cbvprintf+0x22e>
		conv->unsupported = true;
  10bf93:	8b 45 c0             	mov    -0x40(%rbp),%eax
  10bf96:	66 25 fd 87          	and    $0x87fd,%ax
  10bf9a:	66 0d 02 40          	or     $0x4002,%ax
  10bf9e:	66 89 45 c0          	mov    %ax,-0x40(%rbp)
		break;
  10bfa2:	eb 70                	jmp    10c014 <cbvprintf+0x235>
	switch (*sp) {
  10bfa4:	80 f9 74             	cmp    $0x74,%cl
  10bfa7:	8a 45 c1             	mov    -0x3f(%rbp),%al
  10bfaa:	74 59                	je     10c005 <cbvprintf+0x226>
  10bfac:	80 f9 7a             	cmp    $0x7a,%cl
  10bfaf:	75 5c                	jne    10c00d <cbvprintf+0x22e>
		conv->length_mod = LENGTH_Z;
  10bfb1:	83 e0 87             	and    $0xffffff87,%eax
  10bfb4:	83 c8 30             	or     $0x30,%eax
  10bfb7:	eb 3c                	jmp    10bff5 <cbvprintf+0x216>
		if (*++sp == 'h') {
  10bfb9:	41 80 7c 24 01 68    	cmpb   $0x68,0x1(%r12)
  10bfbf:	8a 45 c1             	mov    -0x3f(%rbp),%al
  10bfc2:	75 08                	jne    10bfcc <cbvprintf+0x1ed>
			conv->length_mod = LENGTH_HH;
  10bfc4:	83 e0 87             	and    $0xffffff87,%eax
  10bfc7:	83 c8 08             	or     $0x8,%eax
  10bfca:	eb 19                	jmp    10bfe5 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
  10bfcc:	83 e0 87             	and    $0xffffff87,%eax
  10bfcf:	83 c8 10             	or     $0x10,%eax
  10bfd2:	eb 21                	jmp    10bff5 <cbvprintf+0x216>
		if (*++sp == 'l') {
  10bfd4:	41 80 7c 24 01 6c    	cmpb   $0x6c,0x1(%r12)
  10bfda:	8a 45 c1             	mov    -0x3f(%rbp),%al
  10bfdd:	75 10                	jne    10bfef <cbvprintf+0x210>
			conv->length_mod = LENGTH_LL;
  10bfdf:	83 e0 87             	and    $0xffffff87,%eax
  10bfe2:	83 c8 20             	or     $0x20,%eax
  10bfe5:	88 45 c1             	mov    %al,-0x3f(%rbp)
			++sp;
  10bfe8:	49 8d 54 24 02       	lea    0x2(%r12),%rdx
  10bfed:	eb 25                	jmp    10c014 <cbvprintf+0x235>
			conv->length_mod = LENGTH_L;
  10bfef:	83 e0 87             	and    $0xffffff87,%eax
  10bff2:	83 c8 18             	or     $0x18,%eax
  10bff5:	88 45 c1             	mov    %al,-0x3f(%rbp)
  10bff8:	eb 1a                	jmp    10c014 <cbvprintf+0x235>
		conv->length_mod = LENGTH_J;
  10bffa:	8a 45 c1             	mov    -0x3f(%rbp),%al
  10bffd:	83 e0 87             	and    $0xffffff87,%eax
  10c000:	83 c8 28             	or     $0x28,%eax
  10c003:	eb f0                	jmp    10bff5 <cbvprintf+0x216>
		conv->length_mod = LENGTH_T;
  10c005:	83 e0 87             	and    $0xffffff87,%eax
  10c008:	83 c8 38             	or     $0x38,%eax
  10c00b:	eb e8                	jmp    10bff5 <cbvprintf+0x216>
		conv->length_mod = LENGTH_NONE;
  10c00d:	80 65 c1 87          	andb   $0x87,-0x3f(%rbp)
		break;
  10c011:	4c 89 e2             	mov    %r12,%rdx
	conv->specifier = *sp++;
  10c014:	8a 02                	mov    (%rdx),%al
  10c016:	4c 8d 62 01          	lea    0x1(%rdx),%r12
		if (conv->length_mod == LENGTH_UPPER_L) {
  10c01a:	8a 55 c1             	mov    -0x3f(%rbp),%dl
	conv->specifier = *sp++;
  10c01d:	88 45 c3             	mov    %al,-0x3d(%rbp)
	switch (conv->specifier) {
  10c020:	3c 78                	cmp    $0x78,%al
  10c022:	0f 8f 8b 00 00 00    	jg     10c0b3 <cbvprintf+0x2d4>
  10c028:	3c 57                	cmp    $0x57,%al
  10c02a:	7f 0d                	jg     10c039 <cbvprintf+0x25a>
  10c02c:	3c 41                	cmp    $0x41,%al
  10c02e:	74 48                	je     10c078 <cbvprintf+0x299>
  10c030:	83 e8 45             	sub    $0x45,%eax
  10c033:	3c 02                	cmp    $0x2,%al
  10c035:	77 7c                	ja     10c0b3 <cbvprintf+0x2d4>
  10c037:	eb 3f                	jmp    10c078 <cbvprintf+0x299>
  10c039:	8d 48 a8             	lea    -0x58(%rax),%ecx
  10c03c:	80 f9 20             	cmp    $0x20,%cl
  10c03f:	77 72                	ja     10c0b3 <cbvprintf+0x2d4>
  10c041:	0f b6 c9             	movzbl %cl,%ecx
  10c044:	ff 24 cd 70 07 11 00 	jmpq   *0x110770(,%rcx,8)
		conv->specifier_cat = SPECIFIER_SINT;
  10c04b:	8a 4d c2             	mov    -0x3e(%rbp),%cl
  10c04e:	83 e1 f8             	and    $0xfffffff8,%ecx
  10c051:	83 c9 01             	or     $0x1,%ecx
  10c054:	eb 09                	jmp    10c05f <cbvprintf+0x280>
		conv->specifier_cat = SPECIFIER_UINT;
  10c056:	8a 4d c2             	mov    -0x3e(%rbp),%cl
  10c059:	83 e1 f8             	and    $0xfffffff8,%ecx
  10c05c:	83 c9 02             	or     $0x2,%ecx
		if (conv->length_mod == LENGTH_UPPER_L) {
  10c05f:	83 e2 78             	and    $0x78,%edx
		conv->specifier_cat = SPECIFIER_UINT;
  10c062:	88 4d c2             	mov    %cl,-0x3e(%rbp)
		if (conv->length_mod == LENGTH_UPPER_L) {
  10c065:	80 fa 40             	cmp    $0x40,%dl
  10c068:	75 04                	jne    10c06e <cbvprintf+0x28f>
			conv->invalid = true;
  10c06a:	80 4d c0 01          	orb    $0x1,-0x40(%rbp)
	bool unsupported = false;
  10c06e:	31 c9                	xor    %ecx,%ecx
		if (conv->specifier == 'c') {
  10c070:	3c 63                	cmp    $0x63,%al
  10c072:	75 45                	jne    10c0b9 <cbvprintf+0x2da>
			unsupported = (conv->length_mod != LENGTH_NONE);
  10c074:	84 d2                	test   %dl,%dl
  10c076:	eb 36                	jmp    10c0ae <cbvprintf+0x2cf>
		conv->specifier_cat = SPECIFIER_FP;
  10c078:	8a 45 c2             	mov    -0x3e(%rbp),%al
			unsupported = true;
  10c07b:	b1 01                	mov    $0x1,%cl
		conv->specifier_cat = SPECIFIER_FP;
  10c07d:	83 e0 f8             	and    $0xfffffff8,%eax
  10c080:	83 c8 04             	or     $0x4,%eax
  10c083:	88 45 c2             	mov    %al,-0x3e(%rbp)
			break;
  10c086:	eb 31                	jmp    10c0b9 <cbvprintf+0x2da>
		conv->specifier_cat = SPECIFIER_PTR;
  10c088:	8a 45 c2             	mov    -0x3e(%rbp),%al
		if (conv->length_mod == LENGTH_UPPER_L) {
  10c08b:	83 e2 78             	and    $0x78,%edx
		conv->specifier_cat = SPECIFIER_PTR;
  10c08e:	83 e0 f8             	and    $0xfffffff8,%eax
  10c091:	83 c8 03             	or     $0x3,%eax
		if (conv->length_mod == LENGTH_UPPER_L) {
  10c094:	80 fa 40             	cmp    $0x40,%dl
		conv->specifier_cat = SPECIFIER_PTR;
  10c097:	88 45 c2             	mov    %al,-0x3e(%rbp)
		if (conv->length_mod == LENGTH_UPPER_L) {
  10c09a:	0f 94 c1             	sete   %cl
  10c09d:	eb 1a                	jmp    10c0b9 <cbvprintf+0x2da>
		conv->specifier_cat = SPECIFIER_PTR;
  10c09f:	8a 45 c2             	mov    -0x3e(%rbp),%al
  10c0a2:	83 e0 f8             	and    $0xfffffff8,%eax
  10c0a5:	83 c8 03             	or     $0x3,%eax
		if (conv->length_mod != LENGTH_NONE) {
  10c0a8:	80 e2 78             	and    $0x78,%dl
		conv->specifier_cat = SPECIFIER_PTR;
  10c0ab:	88 45 c2             	mov    %al,-0x3e(%rbp)
		if (conv->length_mod != LENGTH_NONE) {
  10c0ae:	0f 95 c1             	setne  %cl
  10c0b1:	eb 06                	jmp    10c0b9 <cbvprintf+0x2da>
		conv->invalid = true;
  10c0b3:	80 4d c0 01          	orb    $0x1,-0x40(%rbp)
	bool unsupported = false;
  10c0b7:	31 c9                	xor    %ecx,%ecx
	conv->unsupported |= unsupported;
  10c0b9:	8a 55 c0             	mov    -0x40(%rbp),%dl
  10c0bc:	89 d0                	mov    %edx,%eax
  10c0be:	83 e2 fd             	and    $0xfffffffd,%edx
  10c0c1:	d0 e8                	shr    %al
  10c0c3:	83 e0 01             	and    $0x1,%eax
  10c0c6:	09 c8                	or     %ecx,%eax
  10c0c8:	01 c0                	add    %eax,%eax
  10c0ca:	09 d0                	or     %edx,%eax
  10c0cc:	88 45 c0             	mov    %al,-0x40(%rbp)
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
  10c0cf:	8a 4d c1             	mov    -0x3f(%rbp),%cl
  10c0d2:	f6 c1 01             	test   $0x1,%cl
  10c0d5:	74 34                	je     10c10b <cbvprintf+0x32c>
			width = va_arg(ap, int);
  10c0d7:	41 8b 16             	mov    (%r14),%edx
  10c0da:	83 fa 2f             	cmp    $0x2f,%edx
  10c0dd:	77 0e                	ja     10c0ed <cbvprintf+0x30e>
  10c0df:	89 d0                	mov    %edx,%eax
  10c0e1:	83 c2 08             	add    $0x8,%edx
  10c0e4:	49 03 46 10          	add    0x10(%r14),%rax
  10c0e8:	41 89 16             	mov    %edx,(%r14)
  10c0eb:	eb 0c                	jmp    10c0f9 <cbvprintf+0x31a>
  10c0ed:	49 8b 46 08          	mov    0x8(%r14),%rax
  10c0f1:	48 8d 50 08          	lea    0x8(%rax),%rdx
  10c0f5:	49 89 56 08          	mov    %rdx,0x8(%r14)
  10c0f9:	8b 00                	mov    (%rax),%eax
  10c0fb:	89 45 84             	mov    %eax,-0x7c(%rbp)

			if (width < 0) {
  10c0fe:	85 c0                	test   %eax,%eax
  10c100:	79 1c                	jns    10c11e <cbvprintf+0x33f>
				conv->flag_dash = true;
  10c102:	80 4d c0 04          	orb    $0x4,-0x40(%rbp)
				width = -width;
  10c106:	f7 5d 84             	negl   -0x7c(%rbp)
  10c109:	eb 13                	jmp    10c11e <cbvprintf+0x33f>
			}
		} else if (conv->width_present) {
  10c10b:	80 7d c0 00          	cmpb   $0x0,-0x40(%rbp)
		int width = -1;
  10c10f:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
		} else if (conv->width_present) {
  10c116:	79 06                	jns    10c11e <cbvprintf+0x33f>
			width = conv->width_value;
  10c118:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  10c11b:	89 45 84             	mov    %eax,-0x7c(%rbp)

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
  10c11e:	f6 c1 04             	test   $0x4,%cl
  10c121:	74 34                	je     10c157 <cbvprintf+0x378>
			int arg = va_arg(ap, int);
  10c123:	41 8b 16             	mov    (%r14),%edx
  10c126:	83 fa 2f             	cmp    $0x2f,%edx
  10c129:	77 0e                	ja     10c139 <cbvprintf+0x35a>
  10c12b:	89 d0                	mov    %edx,%eax
  10c12d:	83 c2 08             	add    $0x8,%edx
  10c130:	49 03 46 10          	add    0x10(%r14),%rax
  10c134:	41 89 16             	mov    %edx,(%r14)
  10c137:	eb 0c                	jmp    10c145 <cbvprintf+0x366>
  10c139:	49 8b 46 08          	mov    0x8(%r14),%rax
  10c13d:	48 8d 50 08          	lea    0x8(%rax),%rdx
  10c141:	49 89 56 08          	mov    %rdx,0x8(%r14)
  10c145:	44 8b 10             	mov    (%rax),%r10d

			if (arg < 0) {
  10c148:	45 85 d2             	test   %r10d,%r10d
  10c14b:	79 17                	jns    10c164 <cbvprintf+0x385>
				conv->prec_present = false;
  10c14d:	80 65 c1 fd          	andb   $0xfd,-0x3f(%rbp)
		int precision = -1;
  10c151:	41 83 ca ff          	or     $0xffffffff,%r10d
  10c155:	eb 0d                	jmp    10c164 <cbvprintf+0x385>
  10c157:	41 83 ca ff          	or     $0xffffffff,%r10d
			} else {
				precision = arg;
			}
		} else if (conv->prec_present) {
  10c15b:	80 e1 02             	and    $0x2,%cl
  10c15e:	74 04                	je     10c164 <cbvprintf+0x385>
			precision = conv->prec_value;
  10c160:	44 8b 55 c8          	mov    -0x38(%rbp),%r10d
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
  10c164:	8a 55 c1             	mov    -0x3f(%rbp),%dl
			= (enum specifier_cat_enum)conv->specifier_cat;
  10c167:	8a 45 c2             	mov    -0x3e(%rbp),%al
		conv->pad0_value = 0;
  10c16a:	48 c7 45 c4 00 00 00 	movq   $0x0,-0x3c(%rbp)
  10c171:	00 
			= (enum length_mod_enum)conv->length_mod;
  10c172:	c0 ea 03             	shr    $0x3,%dl
		enum specifier_cat_enum specifier_cat
  10c175:	83 e0 07             	and    $0x7,%eax
			= (enum length_mod_enum)conv->length_mod;
  10c178:	83 e2 0f             	and    $0xf,%edx
		enum length_mod_enum length_mod
  10c17b:	0f b6 ca             	movzbl %dl,%ecx
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
  10c17e:	83 f8 01             	cmp    $0x1,%eax
  10c181:	0f 85 c7 00 00 00    	jne    10c24e <cbvprintf+0x46f>
			switch (length_mod) {
			default:
			case LENGTH_NONE:
			case LENGTH_HH:
			case LENGTH_H:
				value->sint = va_arg(ap, int);
  10c187:	41 8b 06             	mov    (%r14),%eax
			switch (length_mod) {
  10c18a:	80 fa 05             	cmp    $0x5,%dl
  10c18d:	0f 84 09 01 00 00    	je     10c29c <cbvprintf+0x4bd>
  10c193:	77 10                	ja     10c1a5 <cbvprintf+0x3c6>
  10c195:	80 fa 03             	cmp    $0x3,%dl
  10c198:	74 3b                	je     10c1d5 <cbvprintf+0x3f6>
  10c19a:	80 fa 04             	cmp    $0x4,%dl
  10c19d:	0f 84 f9 00 00 00    	je     10c29c <cbvprintf+0x4bd>
  10c1a3:	eb 0c                	jmp    10c1b1 <cbvprintf+0x3d2>
  10c1a5:	8d 72 0a             	lea    0xa(%rdx),%esi
  10c1a8:	83 e6 0f             	and    $0xf,%esi
  10c1ab:	40 80 fe 01          	cmp    $0x1,%sil
  10c1af:	76 55                	jbe    10c206 <cbvprintf+0x427>
				value->sint = va_arg(ap, int);
  10c1b1:	83 f8 2f             	cmp    $0x2f,%eax
  10c1b4:	77 0e                	ja     10c1c4 <cbvprintf+0x3e5>
  10c1b6:	89 c6                	mov    %eax,%esi
  10c1b8:	83 c0 08             	add    $0x8,%eax
  10c1bb:	49 03 76 10          	add    0x10(%r14),%rsi
  10c1bf:	41 89 06             	mov    %eax,(%r14)
  10c1c2:	eb 0c                	jmp    10c1d0 <cbvprintf+0x3f1>
  10c1c4:	49 8b 76 08          	mov    0x8(%r14),%rsi
  10c1c8:	48 8d 46 08          	lea    0x8(%rsi),%rax
  10c1cc:	49 89 46 08          	mov    %rax,0x8(%r14)
  10c1d0:	48 63 06             	movslq (%rsi),%rax
  10c1d3:	eb 53                	jmp    10c228 <cbvprintf+0x449>
				break;
			case LENGTH_L:
				if (WCHAR_IS_SIGNED
  10c1d5:	80 7d c3 63          	cmpb   $0x63,-0x3d(%rbp)
  10c1d9:	0f 85 bd 00 00 00    	jne    10c29c <cbvprintf+0x4bd>
				    && (conv->specifier == 'c')) {
					value->sint = (wchar_t)va_arg(ap,
  10c1df:	83 f8 2f             	cmp    $0x2f,%eax
  10c1e2:	77 0e                	ja     10c1f2 <cbvprintf+0x413>
  10c1e4:	89 c1                	mov    %eax,%ecx
  10c1e6:	83 c0 08             	add    $0x8,%eax
  10c1e9:	49 03 4e 10          	add    0x10(%r14),%rcx
  10c1ed:	41 89 06             	mov    %eax,(%r14)
  10c1f0:	eb 0c                	jmp    10c1fe <cbvprintf+0x41f>
  10c1f2:	49 8b 4e 08          	mov    0x8(%r14),%rcx
  10c1f6:	48 8d 41 08          	lea    0x8(%rcx),%rax
  10c1fa:	49 89 46 08          	mov    %rax,0x8(%r14)
  10c1fe:	48 63 01             	movslq (%rcx),%rax
  10c201:	e9 8c 01 00 00       	jmpq   10c392 <cbvprintf+0x5b3>
				 * unsigned and signed equivalents of each
				 * other.  This can be checked in a platform
				 * test.
				 */
				value->sint =
					(sint_value_type)va_arg(ap, ptrdiff_t);
  10c206:	83 f8 2f             	cmp    $0x2f,%eax
  10c209:	77 0e                	ja     10c219 <cbvprintf+0x43a>
  10c20b:	89 c6                	mov    %eax,%esi
  10c20d:	83 c0 08             	add    $0x8,%eax
  10c210:	49 03 76 10          	add    0x10(%r14),%rsi
  10c214:	41 89 06             	mov    %eax,(%r14)
  10c217:	eb 0c                	jmp    10c225 <cbvprintf+0x446>
  10c219:	49 8b 76 08          	mov    0x8(%r14),%rsi
  10c21d:	48 8d 46 08          	lea    0x8(%rsi),%rax
  10c221:	49 89 46 08          	mov    %rax,0x8(%r14)
  10c225:	48 8b 06             	mov    (%rsi),%rax
				value->sint =
  10c228:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
				break;
			}
			if (length_mod == LENGTH_HH) {
  10c22c:	83 f9 01             	cmp    $0x1,%ecx
  10c22f:	75 0a                	jne    10c23b <cbvprintf+0x45c>
				value->sint = (char)value->sint;
  10c231:	48 0f be 45 b0       	movsbq -0x50(%rbp),%rax
  10c236:	e9 57 01 00 00       	jmpq   10c392 <cbvprintf+0x5b3>
			} else if (length_mod == LENGTH_H) {
  10c23b:	83 f9 02             	cmp    $0x2,%ecx
  10c23e:	0f 85 52 01 00 00    	jne    10c396 <cbvprintf+0x5b7>
				value->sint = (short)value->sint;
  10c244:	48 0f bf 45 b0       	movswq -0x50(%rbp),%rax
  10c249:	e9 44 01 00 00       	jmpq   10c392 <cbvprintf+0x5b3>
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
  10c24e:	83 f8 02             	cmp    $0x2,%eax
  10c251:	0f 85 ba 00 00 00    	jne    10c311 <cbvprintf+0x532>
				value->sint = va_arg(ap, int);
  10c257:	41 8b 06             	mov    (%r14),%eax
			switch (length_mod) {
  10c25a:	80 fa 05             	cmp    $0x5,%dl
  10c25d:	74 3d                	je     10c29c <cbvprintf+0x4bd>
  10c25f:	77 0c                	ja     10c26d <cbvprintf+0x48e>
  10c261:	80 fa 03             	cmp    $0x3,%dl
  10c264:	74 36                	je     10c29c <cbvprintf+0x4bd>
  10c266:	80 fa 04             	cmp    $0x4,%dl
  10c269:	74 31                	je     10c29c <cbvprintf+0x4bd>
  10c26b:	eb 0c                	jmp    10c279 <cbvprintf+0x49a>
  10c26d:	8d 72 0a             	lea    0xa(%rdx),%esi
  10c270:	83 e6 0f             	and    $0xf,%esi
  10c273:	40 80 fe 01          	cmp    $0x1,%sil
  10c277:	76 4a                	jbe    10c2c3 <cbvprintf+0x4e4>
			default:
			case LENGTH_NONE:
			case LENGTH_HH:
			case LENGTH_H:
				value->uint = va_arg(ap, unsigned int);
  10c279:	83 f8 2f             	cmp    $0x2f,%eax
  10c27c:	77 0e                	ja     10c28c <cbvprintf+0x4ad>
  10c27e:	89 c6                	mov    %eax,%esi
  10c280:	83 c0 08             	add    $0x8,%eax
  10c283:	49 03 76 10          	add    0x10(%r14),%rsi
  10c287:	41 89 06             	mov    %eax,(%r14)
  10c28a:	eb 0c                	jmp    10c298 <cbvprintf+0x4b9>
  10c28c:	49 8b 76 08          	mov    0x8(%r14),%rsi
  10c290:	48 8d 46 08          	lea    0x8(%rsi),%rax
  10c294:	49 89 46 08          	mov    %rax,0x8(%r14)
  10c298:	8b 06                	mov    (%rsi),%eax
  10c29a:	eb 49                	jmp    10c2e5 <cbvprintf+0x506>
					(uint_value_type)va_arg(ap,
						unsigned long long);
				break;
			case LENGTH_J:
				value->uint =
					(uint_value_type)va_arg(ap,
  10c29c:	83 f8 2f             	cmp    $0x2f,%eax
  10c29f:	77 0e                	ja     10c2af <cbvprintf+0x4d0>
  10c2a1:	89 c1                	mov    %eax,%ecx
  10c2a3:	83 c0 08             	add    $0x8,%eax
  10c2a6:	49 03 4e 10          	add    0x10(%r14),%rcx
  10c2aa:	41 89 06             	mov    %eax,(%r14)
  10c2ad:	eb 0c                	jmp    10c2bb <cbvprintf+0x4dc>
  10c2af:	49 8b 4e 08          	mov    0x8(%r14),%rcx
  10c2b3:	48 8d 41 08          	lea    0x8(%rcx),%rax
  10c2b7:	49 89 46 08          	mov    %rax,0x8(%r14)
  10c2bb:	48 8b 01             	mov    (%rcx),%rax
  10c2be:	e9 cf 00 00 00       	jmpq   10c392 <cbvprintf+0x5b3>
								uintmax_t);
				break;
			case LENGTH_Z:		/* size_t */
			case LENGTH_T:		/* ptrdiff_t */
				value->uint =
					(uint_value_type)va_arg(ap, size_t);
  10c2c3:	83 f8 2f             	cmp    $0x2f,%eax
  10c2c6:	77 0e                	ja     10c2d6 <cbvprintf+0x4f7>
  10c2c8:	89 c6                	mov    %eax,%esi
  10c2ca:	83 c0 08             	add    $0x8,%eax
  10c2cd:	49 03 76 10          	add    0x10(%r14),%rsi
  10c2d1:	41 89 06             	mov    %eax,(%r14)
  10c2d4:	eb 0c                	jmp    10c2e2 <cbvprintf+0x503>
  10c2d6:	49 8b 76 08          	mov    0x8(%r14),%rsi
  10c2da:	48 8d 46 08          	lea    0x8(%rsi),%rax
  10c2de:	49 89 46 08          	mov    %rax,0x8(%r14)
  10c2e2:	48 8b 06             	mov    (%rsi),%rax
				value->uint =
  10c2e5:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
				break;
			}
			if (length_mod == LENGTH_HH) {
  10c2e9:	83 f9 01             	cmp    $0x1,%ecx
  10c2ec:	75 0d                	jne    10c2fb <cbvprintf+0x51c>
				value->uint = (unsigned char)value->uint;
  10c2ee:	48 81 65 b0 ff 00 00 	andq   $0xff,-0x50(%rbp)
  10c2f5:	00 
  10c2f6:	e9 9b 00 00 00       	jmpq   10c396 <cbvprintf+0x5b7>
			} else if (length_mod == LENGTH_H) {
  10c2fb:	83 f9 02             	cmp    $0x2,%ecx
  10c2fe:	0f 85 92 00 00 00    	jne    10c396 <cbvprintf+0x5b7>
				value->uint = (unsigned short)value->uint;
  10c304:	48 81 65 b0 ff ff 00 	andq   $0xffff,-0x50(%rbp)
  10c30b:	00 
  10c30c:	e9 85 00 00 00       	jmpq   10c396 <cbvprintf+0x5b7>
			}
		} else if (specifier_cat == SPECIFIER_FP) {
  10c311:	83 f8 04             	cmp    $0x4,%eax
  10c314:	75 52                	jne    10c368 <cbvprintf+0x589>
			if (length_mod == LENGTH_UPPER_L) {
  10c316:	83 f9 08             	cmp    $0x8,%ecx
  10c319:	75 1b                	jne    10c336 <cbvprintf+0x557>
				value->ldbl = va_arg(ap, long double);
  10c31b:	49 8b 46 08          	mov    0x8(%r14),%rax
  10c31f:	48 83 c0 0f          	add    $0xf,%rax
  10c323:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  10c327:	48 8d 48 10          	lea    0x10(%rax),%rcx
  10c32b:	49 89 4e 08          	mov    %rcx,0x8(%r14)
  10c32f:	db 28                	fldt   (%rax)
  10c331:	db 7d b0             	fstpt  -0x50(%rbp)
  10c334:	eb 60                	jmp    10c396 <cbvprintf+0x5b7>
			} else {
				value->dbl = va_arg(ap, double);
  10c336:	41 8b 4e 04          	mov    0x4(%r14),%ecx
  10c33a:	81 f9 af 00 00 00    	cmp    $0xaf,%ecx
  10c340:	77 0f                	ja     10c351 <cbvprintf+0x572>
  10c342:	89 c8                	mov    %ecx,%eax
  10c344:	83 c1 10             	add    $0x10,%ecx
  10c347:	49 03 46 10          	add    0x10(%r14),%rax
  10c34b:	41 89 4e 04          	mov    %ecx,0x4(%r14)
  10c34f:	eb 0c                	jmp    10c35d <cbvprintf+0x57e>
  10c351:	49 8b 46 08          	mov    0x8(%r14),%rax
  10c355:	48 8d 48 08          	lea    0x8(%rax),%rcx
  10c359:	49 89 4e 08          	mov    %rcx,0x8(%r14)
  10c35d:	f2 0f 10 00          	movsd  (%rax),%xmm0
  10c361:	f2 0f 11 45 b0       	movsd  %xmm0,-0x50(%rbp)
  10c366:	eb 2e                	jmp    10c396 <cbvprintf+0x5b7>
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
  10c368:	83 f8 03             	cmp    $0x3,%eax
  10c36b:	75 29                	jne    10c396 <cbvprintf+0x5b7>
			value->ptr = va_arg(ap, void *);
  10c36d:	41 8b 0e             	mov    (%r14),%ecx
  10c370:	83 f9 2f             	cmp    $0x2f,%ecx
  10c373:	77 0e                	ja     10c383 <cbvprintf+0x5a4>
  10c375:	89 c8                	mov    %ecx,%eax
  10c377:	83 c1 08             	add    $0x8,%ecx
  10c37a:	49 03 46 10          	add    0x10(%r14),%rax
  10c37e:	41 89 0e             	mov    %ecx,(%r14)
  10c381:	eb 0c                	jmp    10c38f <cbvprintf+0x5b0>
  10c383:	49 8b 46 08          	mov    0x8(%r14),%rax
  10c387:	48 8d 48 08          	lea    0x8(%rax),%rcx
  10c38b:	49 89 4e 08          	mov    %rcx,0x8(%r14)
  10c38f:	48 8b 00             	mov    (%rax),%rax
  10c392:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
  10c396:	40 8a 7d c0          	mov    -0x40(%rbp),%dil
  10c39a:	40 f6 c7 03          	test   $0x3,%dil
  10c39e:	74 24                	je     10c3c4 <cbvprintf+0x5e5>
			OUTS(sp, fp);
  10c3a0:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
  10c3a4:	4c 89 e1             	mov    %r12,%rcx
  10c3a7:	4c 89 da             	mov    %r11,%rdx
  10c3aa:	4c 89 fe             	mov    %r15,%rsi
  10c3ad:	e8 d3 f9 ff ff       	callq  10bd85 <outs>
  10c3b2:	85 c0                	test   %eax,%eax
  10c3b4:	0f 88 56 03 00 00    	js     10c710 <cbvprintf+0x931>
  10c3ba:	48 98                	cltq   
  10c3bc:	48 01 c3             	add    %rax,%rbx
			continue;
  10c3bf:	e9 42 03 00 00       	jmpq   10c706 <cbvprintf+0x927>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
  10c3c4:	8a 45 c3             	mov    -0x3d(%rbp),%al
  10c3c7:	3c 78                	cmp    $0x78,%al
  10c3c9:	0f 87 37 03 00 00    	ja     10c706 <cbvprintf+0x927>
  10c3cf:	3c 62                	cmp    $0x62,%al
  10c3d1:	77 11                	ja     10c3e4 <cbvprintf+0x605>
  10c3d3:	3c 25                	cmp    $0x25,%al
  10c3d5:	74 22                	je     10c3f9 <cbvprintf+0x61a>
  10c3d7:	3c 58                	cmp    $0x58,%al
  10c3d9:	0f 84 ab 00 00 00    	je     10c48a <cbvprintf+0x6ab>
  10c3df:	e9 22 03 00 00       	jmpq   10c706 <cbvprintf+0x927>
  10c3e4:	83 e8 63             	sub    $0x63,%eax
  10c3e7:	3c 15                	cmp    $0x15,%al
  10c3e9:	0f 87 17 03 00 00    	ja     10c706 <cbvprintf+0x927>
  10c3ef:	0f b6 c0             	movzbl %al,%eax
  10c3f2:	ff 24 c5 78 08 11 00 	jmpq   *0x110878(,%rax,8)
		case '%':
			OUTC('%');
  10c3f9:	4c 89 fe             	mov    %r15,%rsi
  10c3fc:	bf 25 00 00 00       	mov    $0x25,%edi
  10c401:	31 c0                	xor    %eax,%eax
  10c403:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  10c407:	ff d2                	callq  *%rdx
  10c409:	85 c0                	test   %eax,%eax
  10c40b:	0f 88 ff 02 00 00    	js     10c710 <cbvprintf+0x931>
  10c411:	48 ff c3             	inc    %rbx
			break;
  10c414:	e9 ed 02 00 00       	jmpq   10c706 <cbvprintf+0x927>
		case 's': {
			bps = (const char *)value->ptr;
  10c419:	4c 8b 6d b0          	mov    -0x50(%rbp),%r13

			size_t len;

			if (precision >= 0) {
  10c41d:	45 85 d2             	test   %r10d,%r10d
  10c420:	78 0d                	js     10c42f <cbvprintf+0x650>
				len = strnlen(bps, precision);
  10c422:	49 63 f2             	movslq %r10d,%rsi
  10c425:	4c 89 ef             	mov    %r13,%rdi
  10c428:	e8 73 52 ff ff       	callq  1016a0 <strnlen>
  10c42d:	eb 08                	jmp    10c437 <cbvprintf+0x658>
			} else {
				len = strlen(bps);
  10c42f:	4c 89 ef             	mov    %r13,%rdi
  10c432:	e8 29 51 ff ff       	callq  101560 <strlen>
			}

			bpe = bps + len;
  10c437:	4c 01 e8             	add    %r13,%rax
		char sign = 0;
  10c43a:	45 31 c9             	xor    %r9d,%r9d
			bpe = bps + len;
  10c43d:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
			precision = -1;

			break;
  10c444:	e9 0f 01 00 00       	jmpq   10c558 <cbvprintf+0x779>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
  10c449:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
			bps = buf;
  10c44d:	4c 8d 6d 9a          	lea    -0x66(%rbp),%r13
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
  10c451:	88 45 9a             	mov    %al,-0x66(%rbp)
			bpe = buf + 1;
  10c454:	48 8d 45 9b          	lea    -0x65(%rbp),%rax
  10c458:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  10c45f:	e9 0f 01 00 00       	jmpq   10c573 <cbvprintf+0x794>
			break;
		case 'd':
		case 'i':
			if (conv->flag_plus) {
				sign = '+';
  10c464:	41 b1 2b             	mov    $0x2b,%r9b
			if (conv->flag_plus) {
  10c467:	40 f6 c7 08          	test   $0x8,%dil
  10c46b:	75 08                	jne    10c475 <cbvprintf+0x696>
			} else if (conv->flag_space) {
				sign = ' ';
  10c46d:	44 8d 0c 3f          	lea    (%rdi,%rdi,1),%r9d
  10c471:	41 83 e1 20          	and    $0x20,%r9d

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
  10c475:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
			if (sint < 0) {
  10c479:	48 85 c0             	test   %rax,%rax
  10c47c:	79 0f                	jns    10c48d <cbvprintf+0x6ae>
				sign = '-';
				value->uint = (uint_value_type)-sint;
  10c47e:	48 f7 d8             	neg    %rax
				sign = '-';
  10c481:	41 b1 2d             	mov    $0x2d,%r9b
				value->uint = (uint_value_type)-sint;
  10c484:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  10c488:	eb 03                	jmp    10c48d <cbvprintf+0x6ae>
		switch (conv->specifier) {
  10c48a:	45 31 c9             	xor    %r9d,%r9d
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
  10c48d:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  10c491:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
  10c495:	48 8d 55 9a          	lea    -0x66(%rbp),%rdx
  10c499:	44 88 4d 80          	mov    %r9b,-0x80(%rbp)
  10c49d:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
  10c4a1:	44 89 95 78 ff ff ff 	mov    %r10d,-0x88(%rbp)
  10c4a8:	e8 46 f8 ff ff       	callq  10bcf3 <encode_uint>
  10c4ad:	44 8a 4d 80          	mov    -0x80(%rbp),%r9b
  10c4b1:	49 89 c5             	mov    %rax,%r13
  10c4b4:	44 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%r10d
		const char *bpe = buf + sizeof(buf);
  10c4bb:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  10c4bf:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
  10c4c6:	45 85 d2             	test   %r10d,%r10d
  10c4c9:	0f 88 89 00 00 00    	js     10c558 <cbvprintf+0x779>
				size_t len = bpe - bps;
  10c4cf:	4c 29 e8             	sub    %r13,%rax
				 * conversions with precision.
				 */
				conv->flag_zero = false;

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
  10c4d2:	49 63 d2             	movslq %r10d,%rdx
				conv->flag_zero = false;
  10c4d5:	80 65 c0 bf          	andb   $0xbf,-0x40(%rbp)
				if (len < (size_t)precision) {
  10c4d9:	48 39 c2             	cmp    %rax,%rdx
  10c4dc:	76 7a                	jbe    10c558 <cbvprintf+0x779>
					conv->pad0_value = precision - (int)len;
  10c4de:	41 29 c2             	sub    %eax,%r10d
  10c4e1:	44 89 55 c4          	mov    %r10d,-0x3c(%rbp)
  10c4e5:	eb 71                	jmp    10c558 <cbvprintf+0x779>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
  10c4e7:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  10c4eb:	48 85 ff             	test   %rdi,%rdi
  10c4ee:	74 72                	je     10c562 <cbvprintf+0x783>
				bps = encode_uint((uintptr_t)value->ptr, conv,
  10c4f0:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
  10c4f4:	48 8d 55 9a          	lea    -0x66(%rbp),%rdx
  10c4f8:	44 89 95 78 ff ff ff 	mov    %r10d,-0x88(%rbp)
  10c4ff:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
  10c503:	e8 eb f7 ff ff       	callq  10bcf3 <encode_uint>
		char sign = 0;
  10c508:	45 31 c9             	xor    %r9d,%r9d
				bps = encode_uint((uintptr_t)value->ptr, conv,
  10c50b:	49 89 c5             	mov    %rax,%r13
						  buf, bpe);

				/* Use 0x prefix */
				conv->altform_0c = true;
  10c50e:	66 8b 45 c2          	mov    -0x3e(%rbp),%ax
  10c512:	66 25 ef 00          	and    $0xef,%ax
  10c516:	66 0d 10 78          	or     $0x7810,%ax
  10c51a:	66 89 45 c2          	mov    %ax,-0x3e(%rbp)
				conv->specifier = 'x';

				goto prec_int_pad0;
  10c51e:	eb 94                	jmp    10c4b4 <cbvprintf+0x6d5>
			bpe = bps + 5;

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
  10c520:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  10c524:	48 63 c3             	movslq %ebx,%rax
	switch ((enum length_mod_enum)conv->length_mod) {
  10c527:	80 fa 07             	cmp    $0x7,%dl
  10c52a:	0f 87 d6 01 00 00    	ja     10c706 <cbvprintf+0x927>
  10c530:	0f b6 d2             	movzbl %dl,%edx
  10c533:	ff 24 d5 28 09 11 00 	jmpq   *0x110928(,%rdx,8)
		*(int *)dp = count;
  10c53a:	89 01                	mov    %eax,(%rcx)
		break;
  10c53c:	e9 c5 01 00 00       	jmpq   10c706 <cbvprintf+0x927>
		*(signed char *)dp = (signed char)count;
  10c541:	88 19                	mov    %bl,(%rcx)
		break;
  10c543:	e9 be 01 00 00       	jmpq   10c706 <cbvprintf+0x927>
		*(short *)dp = (short)count;
  10c548:	66 89 19             	mov    %bx,(%rcx)
		break;
  10c54b:	e9 b6 01 00 00       	jmpq   10c706 <cbvprintf+0x927>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
  10c550:	48 89 01             	mov    %rax,(%rcx)
		break;
  10c553:	e9 ae 01 00 00       	jmpq   10c706 <cbvprintf+0x927>
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
  10c558:	4d 85 ed             	test   %r13,%r13
  10c55b:	75 19                	jne    10c576 <cbvprintf+0x797>
  10c55d:	e9 a4 01 00 00       	jmpq   10c706 <cbvprintf+0x927>
			bpe = bps + 5;
  10c562:	48 c7 85 78 ff ff ff 	movq   $0x11144d,-0x88(%rbp)
  10c569:	4d 14 11 00 
			bps = "(nil)";
  10c56d:	41 bd 48 14 11 00    	mov    $0x111448,%r13d
  10c573:	45 31 c9             	xor    %r9d,%r9d
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
  10c576:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax

		if (sign != 0) {
			nj_len += 1U;
		}

		if (conv->altform_0c) {
  10c57d:	8a 4d c2             	mov    -0x3e(%rbp),%cl
		size_t nj_len = (bpe - bps);
  10c580:	4c 29 e8             	sub    %r13,%rax
			nj_len += 1U;
  10c583:	41 80 f9 01          	cmp    $0x1,%r9b
  10c587:	48 83 d8 ff          	sbb    $0xffffffffffffffff,%rax
		if (conv->altform_0c) {
  10c58b:	f6 c1 10             	test   $0x10,%cl
  10c58e:	74 06                	je     10c596 <cbvprintf+0x7b7>
			nj_len += 2U;
  10c590:	48 83 c0 02          	add    $0x2,%rax
  10c594:	eb 0c                	jmp    10c5a2 <cbvprintf+0x7c3>
		} else if (conv->altform_0) {
  10c596:	89 ca                	mov    %ecx,%edx
  10c598:	83 e2 08             	and    $0x8,%edx
			nj_len += 1U;
  10c59b:	80 fa 01             	cmp    $0x1,%dl
  10c59e:	48 83 d8 ff          	sbb    $0xffffffffffffffff,%rax
		}

		nj_len += conv->pad0_value;
  10c5a2:	48 63 55 c4          	movslq -0x3c(%rbp),%rdx
  10c5a6:	48 01 d0             	add    %rdx,%rax
		if (conv->pad_fp) {
  10c5a9:	80 e1 40             	and    $0x40,%cl
  10c5ac:	74 07                	je     10c5b5 <cbvprintf+0x7d6>
			nj_len += conv->pad0_pre_exp;
  10c5ae:	48 63 55 c8          	movslq -0x38(%rbp),%rdx
  10c5b2:	48 01 d0             	add    %rdx,%rax
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
  10c5b5:	83 7d 84 00          	cmpl   $0x0,-0x7c(%rbp)
  10c5b9:	7e 78                	jle    10c633 <cbvprintf+0x854>
			width -= (int)nj_len;
  10c5bb:	29 45 84             	sub    %eax,-0x7c(%rbp)

			if (!conv->flag_dash) {
  10c5be:	8a 45 c0             	mov    -0x40(%rbp),%al
  10c5c1:	a8 04                	test   $0x4,%al
  10c5c3:	75 6e                	jne    10c633 <cbvprintf+0x854>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
  10c5c5:	a8 40                	test   $0x40,%al
  10c5c7:	74 26                	je     10c5ef <cbvprintf+0x810>
					if (sign != 0) {
  10c5c9:	45 84 c9             	test   %r9b,%r9b
  10c5cc:	74 25                	je     10c5f3 <cbvprintf+0x814>
						OUTC(sign);
  10c5ce:	31 c0                	xor    %eax,%eax
  10c5d0:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  10c5d4:	41 0f be f9          	movsbl %r9b,%edi
  10c5d8:	4c 89 fe             	mov    %r15,%rsi
  10c5db:	ff d2                	callq  *%rdx
  10c5dd:	85 c0                	test   %eax,%eax
  10c5df:	0f 88 2b 01 00 00    	js     10c710 <cbvprintf+0x931>
  10c5e5:	48 ff c3             	inc    %rbx
						sign = 0;
					}
					pad = '0';
  10c5e8:	b0 30                	mov    $0x30,%al
						sign = 0;
  10c5ea:	45 31 c9             	xor    %r9d,%r9d
  10c5ed:	eb 06                	jmp    10c5f5 <cbvprintf+0x816>
				char pad = ' ';
  10c5ef:	b0 20                	mov    $0x20,%al
  10c5f1:	eb 02                	jmp    10c5f5 <cbvprintf+0x816>
					pad = '0';
  10c5f3:	b0 30                	mov    $0x30,%al
  10c5f5:	8b 4d 84             	mov    -0x7c(%rbp),%ecx
				}

				while (width-- > 0) {
					OUTC(pad);
  10c5f8:	0f be d0             	movsbl %al,%edx
				while (width-- > 0) {
  10c5fb:	ff 4d 84             	decl   -0x7c(%rbp)
  10c5fe:	85 c9                	test   %ecx,%ecx
  10c600:	7e 31                	jle    10c633 <cbvprintf+0x854>
					OUTC(pad);
  10c602:	89 55 80             	mov    %edx,-0x80(%rbp)
  10c605:	89 d7                	mov    %edx,%edi
  10c607:	31 c0                	xor    %eax,%eax
  10c609:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  10c60d:	44 88 8d 77 ff ff ff 	mov    %r9b,-0x89(%rbp)
  10c614:	4c 89 fe             	mov    %r15,%rsi
  10c617:	ff d2                	callq  *%rdx
  10c619:	85 c0                	test   %eax,%eax
  10c61b:	0f 88 ef 00 00 00    	js     10c710 <cbvprintf+0x931>
				while (width-- > 0) {
  10c621:	8b 4d 84             	mov    -0x7c(%rbp),%ecx
  10c624:	8b 55 80             	mov    -0x80(%rbp),%edx
					OUTC(pad);
  10c627:	48 ff c3             	inc    %rbx
  10c62a:	44 8a 8d 77 ff ff ff 	mov    -0x89(%rbp),%r9b
  10c631:	eb c8                	jmp    10c5fb <cbvprintf+0x81c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
  10c633:	45 84 c9             	test   %r9b,%r9b
  10c636:	74 1a                	je     10c652 <cbvprintf+0x873>
			OUTC(sign);
  10c638:	31 c0                	xor    %eax,%eax
  10c63a:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  10c63e:	41 0f be f9          	movsbl %r9b,%edi
  10c642:	4c 89 fe             	mov    %r15,%rsi
  10c645:	ff d2                	callq  *%rdx
  10c647:	85 c0                	test   %eax,%eax
  10c649:	0f 88 c1 00 00 00    	js     10c710 <cbvprintf+0x931>
  10c64f:	48 ff c3             	inc    %rbx
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
  10c652:	8a 45 c2             	mov    -0x3e(%rbp),%al
  10c655:	a8 10                	test   $0x10,%al
  10c657:	75 04                	jne    10c65d <cbvprintf+0x87e>
  10c659:	a8 08                	test   $0x8,%al
  10c65b:	74 1b                	je     10c678 <cbvprintf+0x899>
				OUTC('0');
  10c65d:	31 c0                	xor    %eax,%eax
  10c65f:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  10c663:	4c 89 fe             	mov    %r15,%rsi
  10c666:	bf 30 00 00 00       	mov    $0x30,%edi
  10c66b:	ff d2                	callq  *%rdx
  10c66d:	85 c0                	test   %eax,%eax
  10c66f:	0f 88 9b 00 00 00    	js     10c710 <cbvprintf+0x931>
  10c675:	48 ff c3             	inc    %rbx
			}

			if (conv->altform_0c) {
  10c678:	f6 45 c2 10          	testb  $0x10,-0x3e(%rbp)
  10c67c:	74 16                	je     10c694 <cbvprintf+0x8b5>
				OUTC(conv->specifier);
  10c67e:	31 c0                	xor    %eax,%eax
  10c680:	0f b6 7d c3          	movzbl -0x3d(%rbp),%edi
  10c684:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  10c688:	4c 89 fe             	mov    %r15,%rsi
  10c68b:	ff d2                	callq  *%rdx
  10c68d:	85 c0                	test   %eax,%eax
  10c68f:	78 7f                	js     10c710 <cbvprintf+0x931>
  10c691:	48 ff c3             	inc    %rbx
			}

			pad_len = conv->pad0_value;
			while (pad_len-- > 0) {
  10c694:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  10c697:	01 d8                	add    %ebx,%eax
  10c699:	89 45 80             	mov    %eax,-0x80(%rbp)
  10c69c:	8b 45 80             	mov    -0x80(%rbp),%eax
  10c69f:	29 d8                	sub    %ebx,%eax
  10c6a1:	85 c0                	test   %eax,%eax
  10c6a3:	7e 19                	jle    10c6be <cbvprintf+0x8df>
				OUTC('0');
  10c6a5:	31 c0                	xor    %eax,%eax
  10c6a7:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  10c6ab:	4c 89 fe             	mov    %r15,%rsi
  10c6ae:	bf 30 00 00 00       	mov    $0x30,%edi
  10c6b3:	ff d2                	callq  *%rdx
  10c6b5:	85 c0                	test   %eax,%eax
  10c6b7:	78 57                	js     10c710 <cbvprintf+0x931>
  10c6b9:	48 ff c3             	inc    %rbx
  10c6bc:	eb de                	jmp    10c69c <cbvprintf+0x8bd>
			}

			OUTS(bps, bpe);
  10c6be:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
  10c6c5:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
  10c6c9:	4c 89 ea             	mov    %r13,%rdx
  10c6cc:	4c 89 fe             	mov    %r15,%rsi
  10c6cf:	e8 b1 f6 ff ff       	callq  10bd85 <outs>
  10c6d4:	85 c0                	test   %eax,%eax
  10c6d6:	78 38                	js     10c710 <cbvprintf+0x931>
  10c6d8:	44 8b 6d 84          	mov    -0x7c(%rbp),%r13d
  10c6dc:	48 98                	cltq   
  10c6de:	48 01 c3             	add    %rax,%rbx
  10c6e1:	41 01 dd             	add    %ebx,%r13d
		}

		/* Finish left justification */
		while (width > 0) {
  10c6e4:	44 89 e8             	mov    %r13d,%eax
  10c6e7:	29 d8                	sub    %ebx,%eax
  10c6e9:	85 c0                	test   %eax,%eax
  10c6eb:	7e 19                	jle    10c706 <cbvprintf+0x927>
			OUTC(' ');
  10c6ed:	31 c0                	xor    %eax,%eax
  10c6ef:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  10c6f3:	4c 89 fe             	mov    %r15,%rsi
  10c6f6:	bf 20 00 00 00       	mov    $0x20,%edi
  10c6fb:	ff d2                	callq  *%rdx
  10c6fd:	85 c0                	test   %eax,%eax
  10c6ff:	78 0f                	js     10c710 <cbvprintf+0x931>
  10c701:	48 ff c3             	inc    %rbx
			--width;
  10c704:	eb de                	jmp    10c6e4 <cbvprintf+0x905>
			OUTS(bps, bpe);
  10c706:	4d 89 e3             	mov    %r12,%r11
  10c709:	e9 f1 f6 ff ff       	jmpq   10bdff <cbvprintf+0x20>
		}
	}

	return count;
  10c70e:	89 d8                	mov    %ebx,%eax
#undef OUTS
#undef OUTC
}
  10c710:	48 83 c4 68          	add    $0x68,%rsp
  10c714:	5b                   	pop    %rbx
  10c715:	41 5c                	pop    %r12
  10c717:	41 5d                	pop    %r13
  10c719:	41 5e                	pop    %r14
  10c71b:	41 5f                	pop    %r15
  10c71d:	5d                   	pop    %rbp
  10c71e:	c3                   	retq   

000000000010c71f <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_STAT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
  10c71f:	c3                   	retq   

000000000010c720 <sys_trace_idle>:
  10c720:	c3                   	retq   

000000000010c721 <arch_cpu_idle>:
#include <tracing/tracing.h>
#include <arch/cpu.h>

__pinned_func
void arch_cpu_idle(void)
{
  10c721:	55                   	push   %rbp
  10c722:	48 89 e5             	mov    %rsp,%rbp
	sys_trace_idle();
  10c725:	e8 f6 ff ff ff       	callq  10c720 <sys_trace_idle>
	__asm__ volatile (
  10c72a:	fb                   	sti    
  10c72b:	f4                   	hlt    
	    "sti\n\t"
	    "hlt\n\t");
}
  10c72c:	5d                   	pop    %rbp
  10c72d:	c3                   	retq   

000000000010c72e <z_x86_prep_c>:
/* Early global initialization functions, C domain. This runs only on the first
 * CPU for SMP systems.
 */
__boot_func
FUNC_NORETURN void z_x86_prep_c(void *arg)
{
  10c72e:	55                   	push   %rbp
	struct multiboot_info *info = arg;

	_kernel.cpus[0].nested = 0;
  10c72f:	c7 05 07 13 01 00 00 	movl   $0x0,0x11307(%rip)        # 11da40 <_kernel>
  10c736:	00 00 00 
{
  10c739:	48 89 e5             	mov    %rsp,%rbp

#ifdef CONFIG_MMU
	z_x86_mmu_init();
  10c73c:	e8 bd 01 00 00       	callq  10c8fe <z_x86_mmu_init>
#endif

#if defined(CONFIG_LOAPIC)
	z_loapic_enable(0);
  10c741:	31 ff                	xor    %edi,%edi
  10c743:	e8 ae 0d 00 00       	callq  10d4f6 <z_loapic_enable>
#endif

#ifdef CONFIG_X86_VERY_EARLY_CONSOLE
	z_x86_early_serial_init();
  10c748:	e8 17 02 00 00       	callq  10c964 <z_x86_early_serial_init>
#endif

#ifdef CONFIG_X86_64
	x86_64_irq_init();
  10c74d:	e8 c4 02 00 00       	callq  10ca16 <x86_64_irq_init>

#if defined(CONFIG_SMP)
	z_x86_ipi_setup();
#endif

	z_cstart();
  10c752:	e8 83 15 00 00       	callq  10dcda <z_cstart>

000000000010c757 <arch_system_halt>:
	return ret;
}

static ALWAYS_INLINE void sys_out32(uint32_t data, io_port_t port)
{
	__asm__ volatile("outl %0, %w1" :: "a"(data), "Nd"(port));
  10c757:	89 f8                	mov    %edi,%eax
  10c759:	e7 f4                	out    %eax,$0xf4

000000000010c75b <z_x86_unhandled_cpu_exception>:
}

__pinned_func
FUNC_NORETURN void z_x86_unhandled_cpu_exception(uintptr_t vector,
						 const z_arch_esf_t *esf)
{
  10c75b:	55                   	push   %rbp
	z_fatal_error(reason, esf);
  10c75c:	31 ff                	xor    %edi,%edi
{
  10c75e:	48 89 e5             	mov    %rsp,%rbp
	z_fatal_error(reason, esf);
  10c761:	e8 81 14 00 00       	callq  10dbe7 <z_fatal_error>

000000000010c766 <z_x86_page_fault_handler>:
};
#endif

__pinned_func
void z_x86_page_fault_handler(z_arch_esf_t *esf)
{
  10c766:	55                   	push   %rbp
  10c767:	48 89 fe             	mov    %rdi,%rsi
	z_fatal_error(reason, esf);
  10c76a:	31 ff                	xor    %edi,%edi
{
  10c76c:	48 89 e5             	mov    %rsp,%rbp
	z_fatal_error(reason, esf);
  10c76f:	e8 73 14 00 00       	callq  10dbe7 <z_fatal_error>

000000000010c774 <z_x86_do_kernel_oops>:
	CODE_UNREACHABLE;
}

__pinned_func
void z_x86_do_kernel_oops(const z_arch_esf_t *esf)
{
  10c774:	55                   	push   %rbp
  10c775:	48 89 fe             	mov    %rdi,%rsi
				      reason == K_ERR_STACK_CHK_FAIL)) {
		reason = K_ERR_KERNEL_OOPS;
	}
#endif

	z_x86_fatal_error(reason, esf);
  10c778:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
{
  10c77c:	48 89 e5             	mov    %rsp,%rbp
	z_fatal_error(reason, esf);
  10c77f:	e8 63 14 00 00       	callq  10dbe7 <z_fatal_error>

000000000010c784 <arch_mem_map>:
}

/* map new region virt..virt+size to phys with provided arch-neutral flags */
__pinned_func
void arch_mem_map(void *virt, uintptr_t phys, size_t size, uint32_t flags)
{
  10c784:	55                   	push   %rbp
  10c785:	89 c8                	mov    %ecx,%eax
  10c787:	49 89 f3             	mov    %rsi,%r11
  10c78a:	49 89 d2             	mov    %rdx,%r10
  10c78d:	83 e0 07             	and    $0x7,%eax
  10c790:	be 09 00 00 00       	mov    $0x9,%esi
  10c795:	48 89 e5             	mov    %rsp,%rbp
  10c798:	41 56                	push   %r14
  10c79a:	41 55                	push   %r13
  10c79c:	41 54                	push   %r12
  10c79e:	53                   	push   %rbx
  10c79f:	48 89 fb             	mov    %rdi,%rbx
	switch (flags & K_MEM_CACHE_MASK) {
  10c7a2:	83 f8 01             	cmp    $0x1,%eax
  10c7a5:	74 11                	je     10c7b8 <arch_mem_map+0x34>
	pentry_t entry_flags = MMU_P;
  10c7a7:	83 f8 02             	cmp    $0x2,%eax
  10c7aa:	be 11 00 00 00       	mov    $0x11,%esi
  10c7af:	b8 01 00 00 00       	mov    $0x1,%eax
  10c7b4:	48 0f 45 f0          	cmovne %rax,%rsi
	if ((flags & K_MEM_PERM_RW) != 0U) {
  10c7b8:	f6 c1 08             	test   $0x8,%cl
  10c7bb:	74 07                	je     10c7c4 <arch_mem_map+0x40>
		entry_flags |= ENTRY_RW;
  10c7bd:	48 81 ce 02 02 00 00 	or     $0x202,%rsi
	if ((flags & K_MEM_PERM_USER) != 0U) {
  10c7c4:	f6 c1 20             	test   $0x20,%cl
  10c7c7:	74 07                	je     10c7d0 <arch_mem_map+0x4c>
		entry_flags |= ENTRY_US;
  10c7c9:	48 81 ce 04 04 00 00 	or     $0x404,%rsi
	if ((flags & K_MEM_PERM_EXEC) == 0U) {
  10c7d0:	80 e1 10             	and    $0x10,%cl
  10c7d3:	75 0d                	jne    10c7e2 <arch_mem_map+0x5e>
		entry_flags |= ENTRY_XD;
  10c7d5:	48 b8 00 08 00 00 00 	movabs $0x8000000000000800,%rax
  10c7dc:	00 00 80 
  10c7df:	48 09 c6             	or     %rax,%rsi
  10c7e2:	9c                   	pushfq 
  10c7e3:	fa                   	cli    
  10c7e4:	41 5d                	pop    %r13
	if ((size & (CONFIG_MMU_PAGE_SIZE - 1)) == 0U) {
  10c7e6:	4c 89 df             	mov    %r11,%rdi
  10c7e9:	4c 09 d7             	or     %r10,%rdi
  10c7ec:	81 e7 ff 0f 00 00    	and    $0xfff,%edi
  10c7f2:	74 50                	je     10c844 <arch_mem_map+0xc0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10c7f4:	41 0f ba e5 09       	bt     $0x9,%r13d
  10c7f9:	73 67                	jae    10c862 <arch_mem_map+0xde>
		__asm__ volatile ("sti" ::: "memory");
  10c7fb:	fb                   	sti    

	ret = range_map_unlocked(virt, phys, size, flags_to_entry(flags),
				 MASK_ALL, 0);
	__ASSERT_NO_MSG(ret == 0);
	ARG_UNUSED(ret);
}
  10c7fc:	eb 64                	jmp    10c862 <arch_mem_map+0xde>
		CHECKIF(!((*entryp & MMU_PS) == 0U)) {
  10c7fe:	4c 8b 0a             	mov    (%rdx),%r9
  10c801:	41 f6 c1 80          	test   $0x80,%r9b
  10c805:	75 36                	jne    10c83d <arch_mem_map+0xb9>

	/* TODO add assertion that this page frame is pinned to boot mapping,
	 * the above check won't be sufficient with demand paging
	 */

	return (void *)Z_MEM_VIRT_ADDR(phys);
  10c807:	4d 23 08             	and    (%r8),%r9
		CHECKIF(!(table != NULL)) {
  10c80a:	49 83 c0 18          	add    $0x18,%r8
  10c80e:	4d 85 c9             	test   %r9,%r9
  10c811:	74 2a                	je     10c83d <arch_mem_map+0xb9>
	return (((uintptr_t)virt >> paging_levels[level].shift) %
  10c813:	41 8b 48 10          	mov    0x10(%r8),%ecx
  10c817:	4c 89 f0             	mov    %r14,%rax
  10c81a:	31 d2                	xor    %edx,%edx
  10c81c:	48 d3 e8             	shr    %cl,%rax
  10c81f:	49 f7 70 08          	divq   0x8(%r8)
		entryp = &table[index];
  10c823:	48 63 d2             	movslq %edx,%rdx
  10c826:	49 8d 14 d1          	lea    (%r9,%rdx,8),%rdx
		if (level == PTE_LEVEL) {
  10c82a:	49 81 f8 08 02 11 00 	cmp    $0x110208,%r8
  10c831:	75 cb                	jne    10c7fe <arch_mem_map+0x7a>
 *
 * @return Value of @a target.
 */
static inline atomic_ptr_val_t atomic_ptr_get(const atomic_ptr_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
  10c833:	48 8b 02             	mov    (%rdx),%rax
	return __atomic_compare_exchange_n(target, &old_value, new_value,
  10c836:	f0 4c 0f b1 22       	lock cmpxchg %r12,(%rdx)
	} while (atomic_pte_cas(pte, old_val, new_val) == false);
  10c83b:	75 f6                	jne    10c833 <arch_mem_map+0xaf>
	for (size_t offset = 0; offset < size; offset += CONFIG_MMU_PAGE_SIZE) {
  10c83d:	48 81 c7 00 10 00 00 	add    $0x1000,%rdi
  10c844:	49 39 fa             	cmp    %rdi,%r10
  10c847:	76 ab                	jbe    10c7f4 <arch_mem_map+0x70>
			entry_val = (pentry_t)(phys + offset) | entry_flags;
  10c849:	4d 8d 24 3b          	lea    (%r11,%rdi,1),%r12
  10c84d:	41 b8 c0 01 11 00    	mov    $0x1101c0,%r8d
	pentry_t *table = ptables;
  10c853:	41 b9 00 60 15 00    	mov    $0x156000,%r9d
			entry_val = (pentry_t)(phys + offset) | entry_flags;
  10c859:	49 09 f4             	or     %rsi,%r12
	return (((uintptr_t)virt >> paging_levels[level].shift) %
  10c85c:	4c 8d 34 3b          	lea    (%rbx,%rdi,1),%r14
	for (int level = 0; level < NUM_LEVELS; level++) {
  10c860:	eb b1                	jmp    10c813 <arch_mem_map+0x8f>
}
  10c862:	5b                   	pop    %rbx
  10c863:	41 5c                	pop    %r12
  10c865:	41 5d                	pop    %r13
  10c867:	41 5e                	pop    %r14
  10c869:	5d                   	pop    %rbp
  10c86a:	c3                   	retq   

000000000010c86b <arch_mem_unmap>:

/* unmap region addr..addr+size, reset entries and flush TLB */
void arch_mem_unmap(void *addr, size_t size)
{
  10c86b:	55                   	push   %rbp
  10c86c:	48 89 e5             	mov    %rsp,%rbp
  10c86f:	41 55                	push   %r13
  10c871:	41 54                	push   %r12
  10c873:	53                   	push   %rbx
  10c874:	9c                   	pushfq 
  10c875:	fa                   	cli    
  10c876:	5b                   	pop    %rbx
	if ((size & (CONFIG_MMU_PAGE_SIZE - 1)) == 0U) {
  10c877:	49 89 f1             	mov    %rsi,%r9
  10c87a:	41 81 e1 ff 0f 00 00 	and    $0xfff,%r9d
  10c881:	75 11                	jne    10c894 <arch_mem_unmap+0x29>
  10c883:	49 89 fa             	mov    %rdi,%r10
  10c886:	49 89 f0             	mov    %rsi,%r8
  10c889:	41 bc 08 02 11 00    	mov    $0x110208,%r12d
  10c88f:	45 31 ed             	xor    %r13d,%r13d
  10c892:	eb 4e                	jmp    10c8e2 <arch_mem_unmap+0x77>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10c894:	0f ba e3 09          	bt     $0x9,%ebx
  10c898:	73 5d                	jae    10c8f7 <arch_mem_unmap+0x8c>
		__asm__ volatile ("sti" ::: "memory");
  10c89a:	fb                   	sti    

	ret = range_map_unlocked((void *)addr, 0, size, 0, 0,
				 OPTION_FLUSH | OPTION_CLEAR);
	__ASSERT_NO_MSG(ret == 0);
	ARG_UNUSED(ret);
}
  10c89b:	eb 5a                	jmp    10c8f7 <arch_mem_unmap+0x8c>
		CHECKIF(!((*entryp & MMU_PS) == 0U)) {
  10c89d:	48 8b 3a             	mov    (%rdx),%rdi
  10c8a0:	40 f6 c7 80          	test   $0x80,%dil
  10c8a4:	75 31                	jne    10c8d7 <arch_mem_unmap+0x6c>
  10c8a6:	48 23 3e             	and    (%rsi),%rdi
		CHECKIF(!(table != NULL)) {
  10c8a9:	48 83 c6 18          	add    $0x18,%rsi
  10c8ad:	48 85 ff             	test   %rdi,%rdi
  10c8b0:	74 25                	je     10c8d7 <arch_mem_unmap+0x6c>
	return (((uintptr_t)virt >> paging_levels[level].shift) %
  10c8b2:	8b 4e 10             	mov    0x10(%rsi),%ecx
  10c8b5:	4c 89 d8             	mov    %r11,%rax
  10c8b8:	31 d2                	xor    %edx,%edx
  10c8ba:	48 d3 e8             	shr    %cl,%rax
  10c8bd:	48 f7 76 08          	divq   0x8(%rsi)
		entryp = &table[index];
  10c8c1:	48 63 d2             	movslq %edx,%rdx
  10c8c4:	48 8d 14 d7          	lea    (%rdi,%rdx,8),%rdx
		if (level == PTE_LEVEL) {
  10c8c8:	49 39 f4             	cmp    %rsi,%r12
  10c8cb:	75 d0                	jne    10c89d <arch_mem_unmap+0x32>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
  10c8cd:	48 8b 02             	mov    (%rdx),%rax
	return __atomic_compare_exchange_n(target, &old_value, new_value,
  10c8d0:	f0 4c 0f b1 2a       	lock cmpxchg %r13,(%rdx)
	} while (atomic_pte_cas(pte, old_val, new_val) == false);
  10c8d5:	75 f6                	jne    10c8cd <arch_mem_unmap+0x62>
	__asm__ ("invlpg %0" :: "m" (*page));
  10c8d7:	41 0f 01 3b          	invlpg (%r11)
	for (size_t offset = 0; offset < size; offset += CONFIG_MMU_PAGE_SIZE) {
  10c8db:	49 81 c1 00 10 00 00 	add    $0x1000,%r9
  10c8e2:	4d 39 c8             	cmp    %r9,%r8
  10c8e5:	76 ad                	jbe    10c894 <arch_mem_unmap+0x29>
		uint8_t *dest_virt = (uint8_t *)virt + offset;
  10c8e7:	4f 8d 1c 0a          	lea    (%r10,%r9,1),%r11
	for (int level = 0; level < NUM_LEVELS; level++) {
  10c8eb:	be c0 01 11 00       	mov    $0x1101c0,%esi
	pentry_t *table = ptables;
  10c8f0:	bf 00 60 15 00       	mov    $0x156000,%edi
	for (int level = 0; level < NUM_LEVELS; level++) {
  10c8f5:	eb bb                	jmp    10c8b2 <arch_mem_unmap+0x47>
}
  10c8f7:	5b                   	pop    %rbx
  10c8f8:	41 5c                	pop    %r12
  10c8fa:	41 5d                	pop    %r13
  10c8fc:	5d                   	pop    %rbp
  10c8fd:	c3                   	retq   

000000000010c8fe <z_x86_mmu_init>:

#ifdef CONFIG_X86_PAE
	identity_map_remove(0);
#endif
#endif
}
  10c8fe:	c3                   	retq   

000000000010c8ff <arch_reserved_pages_update>:

#ifdef CONFIG_ARCH_HAS_RESERVED_PAGE_FRAMES
__boot_func
static void mark_addr_page_reserved(uintptr_t addr, size_t len)
{
	uintptr_t pos = ROUND_DOWN(addr, CONFIG_MMU_PAGE_SIZE);
  10c8ff:	31 c0                	xor    %eax,%eax
static inline struct z_page_frame *z_phys_to_page_frame(uintptr_t phys)
{
	__ASSERT(z_is_page_frame(phys),
		 "0x%lx not an SRAM physical address", phys);

	return &z_page_frames[(phys - Z_PHYS_RAM_START) /
  10c901:	48 89 c2             	mov    %rax,%rdx
	uintptr_t end = ROUND_UP(addr + len, CONFIG_MMU_PAGE_SIZE);

	for (; pos < end; pos += CONFIG_MMU_PAGE_SIZE) {
  10c904:	48 05 00 10 00 00    	add    $0x1000,%rax
  10c90a:	48 c1 ea 0c          	shr    $0xc,%rdx
			continue;
		}

		struct z_page_frame *pf = z_phys_to_page_frame(pos);

		pf->flags |= Z_PAGE_FRAME_RESERVED;
  10c90e:	48 8d 14 d2          	lea    (%rdx,%rdx,8),%rdx
  10c912:	80 8a 88 db 11 00 02 	orb    $0x2,0x11db88(%rdx)
	for (; pos < end; pos += CONFIG_MMU_PAGE_SIZE) {
  10c919:	48 3d 00 00 10 00    	cmp    $0x100000,%rax
  10c91f:	75 e0                	jne    10c901 <arch_reserved_pages_update+0x2>
		}

		mark_addr_page_reserved(entry->base, entry->length);
	}
#endif /* CONFIG_X86_MEMMAP */
}
  10c921:	c3                   	retq   

000000000010c922 <arch_printk_char_out>:
	OUT(REG_THR, c);
}

int arch_printk_char_out(int c)
{
	if (!early_serial_init_done) {
  10c922:	80 3d 0f 3b 01 00 00 	cmpb   $0x0,0x13b0f(%rip)        # 120438 <early_serial_init_done>
{
  10c929:	41 89 f8             	mov    %edi,%r8d
	if (!early_serial_init_done) {
  10c92c:	75 08                	jne    10c936 <arch_printk_char_out+0x14>
		suppressed_chars++;
  10c92e:	ff 05 e8 3a 01 00    	incl   0x13ae8(%rip)        # 12041c <suppressed_chars>
		return c;
  10c934:	eb 2a                	jmp    10c960 <arch_printk_char_out+0x3e>
	}

	if (c == '\n') {
  10c936:	83 ff 0a             	cmp    $0xa,%edi
  10c939:	75 12                	jne    10c94d <arch_printk_char_out+0x2b>
	__asm__ volatile("inb %w1, %b0" : "=a"(ret) : "Nd"(port));
  10c93b:	ba fd 03 00 00       	mov    $0x3fd,%edx
  10c940:	ec                   	in     (%dx),%al
	while ((IN(REG_LSR) & LSR_THRE) == 0) {
  10c941:	a8 20                	test   $0x20,%al
  10c943:	74 fb                	je     10c940 <arch_printk_char_out+0x1e>
	__asm__ volatile("outb %b0, %w1" :: "a"(data), "Nd"(port));
  10c945:	b0 0d                	mov    $0xd,%al
  10c947:	ba f8 03 00 00       	mov    $0x3f8,%edx
  10c94c:	ee                   	out    %al,(%dx)
	__asm__ volatile("inb %w1, %b0" : "=a"(ret) : "Nd"(port));
  10c94d:	ba fd 03 00 00       	mov    $0x3fd,%edx
  10c952:	ec                   	in     (%dx),%al
  10c953:	a8 20                	test   $0x20,%al
  10c955:	74 fb                	je     10c952 <arch_printk_char_out+0x30>
	__asm__ volatile("outb %b0, %w1" :: "a"(data), "Nd"(port));
  10c957:	ba f8 03 00 00       	mov    $0x3f8,%edx
  10c95c:	44 89 c0             	mov    %r8d,%eax
  10c95f:	ee                   	out    %al,(%dx)
		serout('\r');
	}
	serout(c);
	return c;
}
  10c960:	44 89 c0             	mov    %r8d,%eax
  10c963:	c3                   	retq   

000000000010c964 <z_x86_early_serial_init>:
  10c964:	31 f6                	xor    %esi,%esi
  10c966:	bf f9 03 00 00       	mov    $0x3f9,%edi
  10c96b:	89 f0                	mov    %esi,%eax
  10c96d:	89 fa                	mov    %edi,%edx
  10c96f:	ee                   	out    %al,(%dx)
  10c970:	b9 fb 03 00 00       	mov    $0x3fb,%ecx
  10c975:	b0 80                	mov    $0x80,%al
  10c977:	89 ca                	mov    %ecx,%edx
  10c979:	ee                   	out    %al,(%dx)
  10c97a:	b0 01                	mov    $0x1,%al
  10c97c:	ba f8 03 00 00       	mov    $0x3f8,%edx
  10c981:	ee                   	out    %al,(%dx)
  10c982:	89 f0                	mov    %esi,%eax
  10c984:	89 fa                	mov    %edi,%edx
  10c986:	ee                   	out    %al,(%dx)
  10c987:	b0 03                	mov    $0x3,%al
  10c989:	89 ca                	mov    %ecx,%edx
  10c98b:	ee                   	out    %al,(%dx)
  10c98c:	ba fc 03 00 00       	mov    $0x3fc,%edx
  10c991:	ee                   	out    %al,(%dx)
  10c992:	b0 07                	mov    $0x7,%al
  10c994:	ba fa 03 00 00       	mov    $0x3fa,%edx
  10c999:	ee                   	out    %al,(%dx)
	/* Turn on FIFO. Some hardware needs this before transmitting */
	OUT(REG_FCR, FCR_FIFO | FCR_FIFO_1 | FCR_RCVRCLR | FCR_XMITCLR);

	early_serial_init_done = true;

	if (suppressed_chars != 0U) {
  10c99a:	8b 35 7c 3a 01 00    	mov    0x13a7c(%rip),%esi        # 12041c <suppressed_chars>
	early_serial_init_done = true;
  10c9a0:	c6 05 91 3a 01 00 01 	movb   $0x1,0x13a91(%rip)        # 120438 <early_serial_init_done>
	if (suppressed_chars != 0U) {
  10c9a7:	85 f6                	test   %esi,%esi
  10c9a9:	74 0c                	je     10c9b7 <z_x86_early_serial_init+0x53>
		printk("WARNING: %u chars lost before early serial init\n",
  10c9ab:	bf 4e 14 11 00       	mov    $0x11144e,%edi
  10c9b0:	31 c0                	xor    %eax,%eax
  10c9b2:	e9 87 ed ff ff       	jmpq   10b73e <printk>
		       suppressed_chars);
	}
}
  10c9b7:	c3                   	retq   

000000000010c9b8 <z_x86_cpu_init>:

/* Per-CPU initialization, C domain. On the first CPU, z_x86_prep_c is the
 * next step. For other CPUs it is probably smp_init_top().
 */
FUNC_NORETURN void z_x86_cpu_init(struct x86_cpuboot *cpuboot)
{
  10c9b8:	55                   	push   %rbp
  10c9b9:	48 89 e5             	mov    %rsp,%rbp
  10c9bc:	41 54                	push   %r12
  10c9be:	49 89 fc             	mov    %rdi,%r12
	x86_sse_init(NULL);
  10c9c1:	31 ff                	xor    %edi,%edi
{
  10c9c3:	53                   	push   %rbx

	/* The internal cpu_number is the index to x86_cpuboot[] */
	unsigned char cpu_num = (unsigned char)(cpuboot - x86_cpuboot);
  10c9c4:	4c 89 e3             	mov    %r12,%rbx
  10c9c7:	48 81 eb 20 75 14 00 	sub    $0x147520,%rbx
  10c9ce:	48 c1 fb 04          	sar    $0x4,%rbx
	x86_sse_init(NULL);
  10c9d2:	e8 75 47 ef ff       	callq  114c <x86_sse_init>
	unsigned char cpu_num = (unsigned char)(cpuboot - x86_cpuboot);
  10c9d7:	48 bf ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdi
  10c9de:	aa aa aa 
  10c9e1:	48 0f af df          	imul   %rdi,%rbx

	if (cpu_num == 0U) {
  10c9e5:	84 db                	test   %bl,%bl
  10c9e7:	75 05                	jne    10c9ee <z_x86_cpu_init+0x36>
		/* Only need to do these once per boot */
		z_bss_zero();
  10c9e9:	e8 d3 12 00 00       	callq  10dcc1 <z_bss_zero>
#ifdef CONFIG_XIP
		z_data_copy();
#endif
	}

	z_loapic_enable(cpu_num);
  10c9ee:	0f b6 fb             	movzbl %bl,%edi
  10c9f1:	e8 00 0b 00 00       	callq  10d4f6 <z_loapic_enable>
	/* Mask applied to RFLAGS when making a syscall */
	z_x86_msr_write(X86_FMASK_MSR, EFLAGS_SYSCALL);
#endif

	/* Enter kernel, never return */
	cpuboot->ready++;
  10c9f6:	41 8b 04 24          	mov    (%r12),%eax
	cpuboot->fn(cpuboot->arg);
  10c9fa:	49 8b 7c 24 28       	mov    0x28(%r12),%rdi
	cpuboot->ready++;
  10c9ff:	ff c0                	inc    %eax
  10ca01:	41 89 04 24          	mov    %eax,(%r12)
	cpuboot->fn(cpuboot->arg);
  10ca05:	41 ff 54 24 20       	callq  *0x20(%r12)

000000000010ca0a <irq_spurious>:
const void *x86_irq_args[NR_IRQ_VECTORS];

static void irq_spurious(const void *arg)
{
	LOG_ERR("Spurious interrupt, vector %d\n", (uint32_t)(uint64_t)arg);
	z_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
  10ca0a:	31 f6                	xor    %esi,%esi
  10ca0c:	bf 01 00 00 00       	mov    $0x1,%edi
  10ca11:	e9 d1 11 00 00       	jmpq   10dbe7 <z_fatal_error>

000000000010ca16 <x86_64_irq_init>:
}

void x86_64_irq_init(void)
{
  10ca16:	b8 20 00 00 00       	mov    $0x20,%eax
	for (int i = 0; i < NR_IRQ_VECTORS; i++) {
		x86_irq_funcs[i] = irq_spurious;
  10ca1b:	48 c7 04 c5 40 b9 11 	movq   $0x10ca0a,0x11b940(,%rax,8)
  10ca22:	00 0a ca 10 00 
		x86_irq_args[i] = (const void *)(long)(i + IV_IRQS);
  10ca27:	48 89 04 c5 40 b2 11 	mov    %rax,0x11b240(,%rax,8)
  10ca2e:	00 
	for (int i = 0; i < NR_IRQ_VECTORS; i++) {
  10ca2f:	48 ff c0             	inc    %rax
  10ca32:	48 3d 00 01 00 00    	cmp    $0x100,%rax
  10ca38:	75 e1                	jne    10ca1b <x86_64_irq_init+0x5>
	}
}
  10ca3a:	c3                   	retq   

000000000010ca3b <z_x86_allocate_vector>:

	if (priority >= MAX_PRIORITY) {
		priority = MAX_PRIORITY;
	}

	if (vector == -1) {
  10ca3b:	89 f0                	mov    %esi,%eax
  10ca3d:	83 fe ff             	cmp    $0xffffffff,%esi
  10ca40:	75 11                	jne    10ca53 <z_x86_allocate_vector+0x18>
		vector = (priority * VECTORS_PER_PRIORITY) + IV_IRQS;
  10ca42:	83 ff 0d             	cmp    $0xd,%edi
  10ca45:	b8 0d 00 00 00       	mov    $0xd,%eax
  10ca4a:	0f 46 c7             	cmovbe %edi,%eax
  10ca4d:	83 c0 02             	add    $0x2,%eax
  10ca50:	c1 e0 04             	shl    $0x4,%eax
  10ca53:	8d 48 10             	lea    0x10(%rax),%ecx
	}

	for (i = 0; i < VECTORS_PER_PRIORITY; ++i, ++vector) {
		if (prev_vector != 1 && vector == prev_vector) {
  10ca56:	83 fe 01             	cmp    $0x1,%esi
  10ca59:	40 0f 95 c7          	setne  %dil
  10ca5d:	39 c6                	cmp    %eax,%esi
  10ca5f:	0f 94 c2             	sete   %dl
#ifdef CONFIG_IRQ_OFFLOAD
		if (vector == CONFIG_IRQ_OFFLOAD_VECTOR) {
			continue;
		}
#endif
		if (vector == Z_X86_OOPS_VECTOR) {
  10ca62:	40 84 d7             	test   %dl,%dil
  10ca65:	75 19                	jne    10ca80 <z_x86_allocate_vector+0x45>
  10ca67:	83 f8 20             	cmp    $0x20,%eax
  10ca6a:	74 14                	je     10ca80 <z_x86_allocate_vector+0x45>
			continue;
		}

		if (x86_irq_funcs[vector - IV_IRQS] == irq_spurious) {
  10ca6c:	8d 50 e0             	lea    -0x20(%rax),%edx
  10ca6f:	48 63 d2             	movslq %edx,%rdx
  10ca72:	48 81 3c d5 40 ba 11 	cmpq   $0x10ca0a,0x11ba40(,%rdx,8)
  10ca79:	00 0a ca 10 00 
  10ca7e:	74 09                	je     10ca89 <z_x86_allocate_vector+0x4e>
	for (i = 0; i < VECTORS_PER_PRIORITY; ++i, ++vector) {
  10ca80:	ff c0                	inc    %eax
  10ca82:	39 c8                	cmp    %ecx,%eax
  10ca84:	75 d0                	jne    10ca56 <z_x86_allocate_vector+0x1b>
			return vector;
		}
	}

	return -1;
  10ca86:	83 c8 ff             	or     $0xffffffff,%eax
}
  10ca89:	c3                   	retq   

000000000010ca8a <z_x86_irq_connect_on_vector>:

void z_x86_irq_connect_on_vector(unsigned int irq,
				 uint8_t vector,
				 void (*func)(const void *arg),
				 const void *arg, uint32_t flags)
{
  10ca8a:	55                   	push   %rbp
  10ca8b:	48 89 e5             	mov    %rsp,%rbp
  10ca8e:	41 55                	push   %r13
  10ca90:	49 89 d5             	mov    %rdx,%r13
  10ca93:	44 89 c2             	mov    %r8d,%edx
  10ca96:	41 54                	push   %r12
  10ca98:	49 89 cc             	mov    %rcx,%r12
  10ca9b:	53                   	push   %rbx
	_irq_to_interrupt_vector[irq] = vector;
	z_irq_controller_irq_config(vector, irq, flags);
  10ca9c:	40 0f b6 de          	movzbl %sil,%ebx
{
  10caa0:	50                   	push   %rax
  10caa1:	89 f8                	mov    %edi,%eax
	z_irq_controller_irq_config(vector, irq, flags);
  10caa3:	89 df                	mov    %ebx,%edi
	_irq_to_interrupt_vector[irq] = vector;
  10caa5:	40 88 b0 40 c1 11 00 	mov    %sil,0x11c140(%rax)
	z_irq_controller_irq_config(vector, irq, flags);
  10caac:	89 c6                	mov    %eax,%esi
  10caae:	e8 e2 0b 00 00       	callq  10d695 <z_irq_controller_irq_config>
	x86_irq_funcs[vector - IV_IRQS] = func;
  10cab3:	8d 73 e0             	lea    -0x20(%rbx),%esi
  10cab6:	48 63 f6             	movslq %esi,%rsi
  10cab9:	4c 89 2c f5 40 ba 11 	mov    %r13,0x11ba40(,%rsi,8)
  10cac0:	00 
	x86_irq_args[vector - IV_IRQS] = arg;
  10cac1:	4c 89 24 f5 40 b3 11 	mov    %r12,0x11b340(,%rsi,8)
  10cac8:	00 
}
  10cac9:	5a                   	pop    %rdx
  10caca:	5b                   	pop    %rbx
  10cacb:	41 5c                	pop    %r12
  10cacd:	41 5d                	pop    %r13
  10cacf:	5d                   	pop    %rbp
  10cad0:	c3                   	retq   

000000000010cad1 <arch_irq_connect_dynamic>:
 */

int arch_irq_connect_dynamic(unsigned int irq, unsigned int priority,
			     void (*func)(const void *arg),
			     const void *arg, uint32_t flags)
{
  10cad1:	55                   	push   %rbp
  10cad2:	41 89 f9             	mov    %edi,%r9d
  10cad5:	89 f7                	mov    %esi,%edi
  10cad7:	48 89 e5             	mov    %rsp,%rbp
  10cada:	53                   	push   %rbx
  10cadb:	48 83 ec 28          	sub    $0x28,%rsp
  10cadf:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  10cae3:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  10cae7:	9c                   	pushfq 
  10cae8:	fa                   	cli    
  10cae9:	5b                   	pop    %rbx

	__ASSERT(irq <= CONFIG_MAX_IRQ_LINES, "IRQ %u out of range", irq);

	key = irq_lock();

	vector = z_x86_allocate_vector(priority, -1);
  10caea:	83 ce ff             	or     $0xffffffff,%esi
  10caed:	e8 49 ff ff ff       	callq  10ca3b <z_x86_allocate_vector>
	if (vector >= 0) {
  10caf2:	85 c0                	test   %eax,%eax
  10caf4:	78 19                	js     10cb0f <arch_irq_connect_dynamic+0x3e>
		z_x86_irq_connect_on_vector(irq, vector, func, arg, flags);
  10caf6:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  10cafa:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  10cafe:	0f b6 f0             	movzbl %al,%esi
  10cb01:	44 89 cf             	mov    %r9d,%edi
  10cb04:	89 45 ec             	mov    %eax,-0x14(%rbp)
  10cb07:	e8 7e ff ff ff       	callq  10ca8a <z_x86_irq_connect_on_vector>
  10cb0c:	8b 45 ec             	mov    -0x14(%rbp),%eax
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10cb0f:	0f ba e3 09          	bt     $0x9,%ebx
  10cb13:	73 01                	jae    10cb16 <arch_irq_connect_dynamic+0x45>
		__asm__ volatile ("sti" ::: "memory");
  10cb15:	fb                   	sti    
	}

	irq_unlock(key);
	return vector;
}
  10cb16:	48 83 c4 28          	add    $0x28,%rsp
  10cb1a:	5b                   	pop    %rbx
  10cb1b:	5d                   	pop    %rbp
  10cb1c:	c3                   	retq   

000000000010cb1d <arch_new_thread>:
};

void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
  10cb1d:	55                   	push   %rbp
	thread->arch.cs = X86_KERNEL_CS;
	thread->arch.ss = X86_KERNEL_DS;
#else
	switch_entry = z_thread_entry;
#endif
	iframe = Z_STACK_PTR_TO_FRAME(struct x86_initial_frame, stack_ptr);
  10cb1e:	48 83 ea 08          	sub    $0x8,%rdx
{
  10cb22:	48 89 e5             	mov    %rsp,%rbp
  10cb25:	53                   	push   %rbx
  10cb26:	48 89 fb             	mov    %rdi,%rbx
  10cb29:	50                   	push   %rax
	 * thread->callee_saved.rip
	 */
	thread->arch.rdi = (long) entry;
	thread->arch.rsi = (long) p1;
	thread->arch.rdx = (long) p2;
	thread->arch.rcx = (long) p3;
  10cb2a:	48 8b 45 10          	mov    0x10(%rbp),%rax
	iframe->rip = 0U;
  10cb2e:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
	iframe = Z_STACK_PTR_TO_FRAME(struct x86_initial_frame, stack_ptr);
  10cb35:	48 89 57 48          	mov    %rdx,0x48(%rdi)
	thread->callee_saved.rip = (long) switch_entry;
  10cb39:	48 c7 87 80 00 00 00 	movq   $0x10b7cb,0x80(%rdi)
  10cb40:	cb b7 10 00 
	thread->callee_saved.rflags = EFLAGS_INITIAL;
  10cb44:	48 c7 87 88 00 00 00 	movq   $0x200,0x88(%rdi)
  10cb4b:	00 02 00 00 
	thread->arch.rdi = (long) entry;
  10cb4f:	48 89 8f f8 00 00 00 	mov    %rcx,0xf8(%rdi)
	thread->arch.rsi = (long) p1;
  10cb56:	4c 89 87 f0 00 00 00 	mov    %r8,0xf0(%rdi)
	thread->arch.rdx = (long) p2;
  10cb5d:	4c 89 8f e8 00 00 00 	mov    %r9,0xe8(%rdi)
	thread->arch.rcx = (long) p3;
  10cb64:	48 89 87 e0 00 00 00 	mov    %rax,0xe0(%rdi)

	x86_sse_init(thread);
  10cb6b:	e8 dc 45 ef ff       	callq  114c <x86_sse_init>

	thread->arch.flags = X86_THREAD_FLAG_ALL;
  10cb70:	c6 83 d0 00 00 00 01 	movb   $0x1,0xd0(%rbx)
	thread->switch_handle = thread;
  10cb77:	48 89 9b b8 00 00 00 	mov    %rbx,0xb8(%rbx)
}
  10cb7e:	5a                   	pop    %rdx
  10cb7f:	5b                   	pop    %rbx
  10cb80:	5d                   	pop    %rbp
  10cb81:	c3                   	retq   

000000000010cb82 <z_x86_do_kernel_nmi>:
 * return true if NMI is handled, false otherwise
 */
__weak bool z_x86_do_kernel_nmi(const z_arch_esf_t *esf)
{
	return false;
}
  10cb82:	31 c0                	xor    %eax,%eax
  10cb84:	c3                   	retq   

000000000010cb85 <z_x86_exception>:

void z_x86_exception(z_arch_esf_t *esf)
{
  10cb85:	55                   	push   %rbp
  10cb86:	48 89 e5             	mov    %rsp,%rbp
  10cb89:	53                   	push   %rbx
  10cb8a:	48 89 fb             	mov    %rdi,%rbx
  10cb8d:	56                   	push   %rsi
	switch (esf->vector) {
  10cb8e:	48 8b bf 50 02 00 00 	mov    0x250(%rdi),%rdi
  10cb95:	48 83 ff 0e          	cmp    $0xe,%rdi
  10cb99:	74 19                	je     10cbb4 <z_x86_exception+0x2f>
  10cb9b:	48 83 ff 20          	cmp    $0x20,%rdi
  10cb9f:	74 08                	je     10cba9 <z_x86_exception+0x24>
  10cba1:	48 83 ff 02          	cmp    $0x2,%rdi
  10cba5:	75 2b                	jne    10cbd2 <z_x86_exception+0x4d>
  10cba7:	eb 16                	jmp    10cbbf <z_x86_exception+0x3a>
		break;
	default:
		z_x86_unhandled_cpu_exception(esf->vector, esf);
		CODE_UNREACHABLE;
	}
}
  10cba9:	59                   	pop    %rcx
		z_x86_do_kernel_oops(esf);
  10cbaa:	48 89 df             	mov    %rbx,%rdi
}
  10cbad:	5b                   	pop    %rbx
  10cbae:	5d                   	pop    %rbp
		z_x86_do_kernel_oops(esf);
  10cbaf:	e9 c0 fb ff ff       	jmpq   10c774 <z_x86_do_kernel_oops>
}
  10cbb4:	5a                   	pop    %rdx
		z_x86_page_fault_handler(esf);
  10cbb5:	48 89 df             	mov    %rbx,%rdi
}
  10cbb8:	5b                   	pop    %rbx
  10cbb9:	5d                   	pop    %rbp
		z_x86_page_fault_handler(esf);
  10cbba:	e9 a7 fb ff ff       	jmpq   10c766 <z_x86_page_fault_handler>
		if (!z_x86_do_kernel_nmi(esf)) {
  10cbbf:	48 89 df             	mov    %rbx,%rdi
  10cbc2:	e8 bb ff ff ff       	callq  10cb82 <z_x86_do_kernel_nmi>
  10cbc7:	84 c0                	test   %al,%al
  10cbc9:	75 0f                	jne    10cbda <z_x86_exception+0x55>
			z_x86_unhandled_cpu_exception(esf->vector, esf);
  10cbcb:	48 8b bb 50 02 00 00 	mov    0x250(%rbx),%rdi
		z_x86_unhandled_cpu_exception(esf->vector, esf);
  10cbd2:	48 89 de             	mov    %rbx,%rsi
  10cbd5:	e8 81 fb ff ff       	callq  10c75b <z_x86_unhandled_cpu_exception>
}
  10cbda:	58                   	pop    %rax
  10cbdb:	5b                   	pop    %rbx
  10cbdc:	5d                   	pop    %rbp
  10cbdd:	c3                   	retq   

000000000010cbde <_stdout_hook_default>:
static int _stdout_hook_default(int c)
{
	(void)(c);  /* Prevent warning about unused argument */

	return EOF;
}
  10cbde:	83 c8 ff             	or     $0xffffffff,%eax
  10cbe1:	c3                   	retq   

000000000010cbe2 <malloc_prepare>:
{
  10cbe2:	55                   	push   %rbp
  10cbe3:	48 89 e5             	mov    %rsp,%rbp
	max_heap_size = MIN(CONFIG_NEWLIB_LIBC_MAX_MAPPED_REGION_SIZE,
  10cbe6:	e8 6c 26 00 00       	callq  10f257 <k_mem_free_get>
  10cbeb:	48 3d 00 00 10 00    	cmp    $0x100000,%rax
  10cbf1:	76 12                	jbe    10cc05 <malloc_prepare+0x23>
  10cbf3:	48 c7 05 b2 37 01 00 	movq   $0x100000,0x137b2(%rip)        # 1203b0 <max_heap_size>
  10cbfa:	00 00 10 00 
  10cbfe:	bf 00 00 10 00       	mov    $0x100000,%edi
  10cc03:	eb 14                	jmp    10cc19 <malloc_prepare+0x37>
  10cc05:	e8 4d 26 00 00       	callq  10f257 <k_mem_free_get>
  10cc0a:	48 89 05 9f 37 01 00 	mov    %rax,0x1379f(%rip)        # 1203b0 <max_heap_size>
  10cc11:	48 89 c7             	mov    %rax,%rdi
	if (max_heap_size != 0) {
  10cc14:	48 85 c0             	test   %rax,%rax
  10cc17:	74 11                	je     10cc2a <malloc_prepare+0x48>
		heap_base = k_mem_map(max_heap_size, K_MEM_PERM_RW);
  10cc19:	be 08 00 00 00       	mov    $0x8,%esi
  10cc1e:	e8 10 25 00 00       	callq  10f133 <k_mem_map>
  10cc23:	48 89 05 8e 37 01 00 	mov    %rax,0x1378e(%rip)        # 1203b8 <heap_base>
}
  10cc2a:	31 c0                	xor    %eax,%eax
  10cc2c:	5d                   	pop    %rbp
  10cc2d:	c3                   	retq   

000000000010cc2e <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
  10cc2e:	48 89 3d 8b b7 03 00 	mov    %rdi,0x3b78b(%rip)        # 1483c0 <_stdout_hook>
}
  10cc35:	c3                   	retq   

000000000010cc36 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
  10cc36:	55                   	push   %rbp
  10cc37:	48 89 e5             	mov    %rsp,%rbp
  10cc3a:	41 55                	push   %r13
  10cc3c:	49 89 fd             	mov    %rdi,%r13
  10cc3f:	41 54                	push   %r12
  10cc41:	41 89 f4             	mov    %esi,%r12d
  10cc44:	53                   	push   %rbx
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
  10cc45:	31 db                	xor    %ebx,%ebx
{
  10cc47:	51                   	push   %rcx
	for (i = 0; i < nbytes; i++) {
  10cc48:	41 39 dc             	cmp    %ebx,%r12d
  10cc4b:	7e 24                	jle    10cc71 <z_impl_zephyr_write_stdout+0x3b>
		if (*(buf + i) == '\n') {
  10cc4d:	41 80 7c 1d 00 0a    	cmpb   $0xa,0x0(%r13,%rbx,1)
  10cc53:	75 0b                	jne    10cc60 <z_impl_zephyr_write_stdout+0x2a>
			_stdout_hook('\r');
  10cc55:	bf 0d 00 00 00       	mov    $0xd,%edi
  10cc5a:	ff 15 60 b7 03 00    	callq  *0x3b760(%rip)        # 1483c0 <_stdout_hook>
		}
		_stdout_hook(*(buf + i));
  10cc60:	41 0f be 7c 1d 00    	movsbl 0x0(%r13,%rbx,1),%edi
  10cc66:	48 ff c3             	inc    %rbx
  10cc69:	ff 15 51 b7 03 00    	callq  *0x3b751(%rip)        # 1483c0 <_stdout_hook>
	for (i = 0; i < nbytes; i++) {
  10cc6f:	eb d7                	jmp    10cc48 <z_impl_zephyr_write_stdout+0x12>
	}
	return nbytes;
}
  10cc71:	5a                   	pop    %rdx
  10cc72:	44 89 e0             	mov    %r12d,%eax
  10cc75:	5b                   	pop    %rbx
  10cc76:	41 5c                	pop    %r12
  10cc78:	41 5d                	pop    %r13
  10cc7a:	5d                   	pop    %rbp
  10cc7b:	c3                   	retq   

000000000010cc7c <_isatty>:
#define _write	write
#endif

int _isatty(int file)
{
	return file <= 2;
  10cc7c:	31 c0                	xor    %eax,%eax
  10cc7e:	83 ff 02             	cmp    $0x2,%edi
  10cc81:	0f 9e c0             	setle  %al
}
  10cc84:	c3                   	retq   

000000000010cc85 <_kill>:
__weak FUNC_ALIAS(_isatty, isatty, int);

int _kill(int i, int j)
{
	return 0;
}
  10cc85:	31 c0                	xor    %eax,%eax
  10cc87:	c3                   	retq   

000000000010cc88 <_getpid>:
__weak FUNC_ALIAS(_kill, kill, int);

int _getpid(void)
{
	return 0;
}
  10cc88:	31 c0                	xor    %eax,%eax
  10cc8a:	c3                   	retq   

000000000010cc8b <_fstat>:
__weak FUNC_ALIAS(_getpid, getpid, int);

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  10cc8b:	c7 46 04 00 20 00 00 	movl   $0x2000,0x4(%rsi)
	return 0;
}
  10cc92:	31 c0                	xor    %eax,%eax
  10cc94:	c3                   	retq   

000000000010cc95 <_exit>:
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
  10cc95:	55                   	push   %rbp
	_write(1, "exit\n", 5);
  10cc96:	ba 05 00 00 00       	mov    $0x5,%edx
  10cc9b:	be 7f 14 11 00       	mov    $0x11147f,%esi
  10cca0:	bf 01 00 00 00       	mov    $0x1,%edi
{
  10cca5:	48 89 e5             	mov    %rsp,%rbp
	_write(1, "exit\n", 5);
  10cca8:	e8 65 e9 ff ff       	callq  10b612 <_write>
	while (1) {
  10ccad:	eb fe                	jmp    10ccad <_exit+0x18>

000000000010ccaf <_sbrk>:

void *_sbrk(intptr_t count)
{
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
  10ccaf:	48 8b 15 f2 36 01 00 	mov    0x136f2(%rip),%rdx        # 1203a8 <heap_sz>

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
  10ccb6:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
  10ccba:	48 01 d7             	add    %rdx,%rdi
  10ccbd:	48 3b 3d ec 36 01 00 	cmp    0x136ec(%rip),%rdi        # 1203b0 <max_heap_size>
  10ccc4:	73 11                	jae    10ccd7 <_sbrk+0x28>
	ptr = ((char *)HEAP_BASE) + heap_sz;
  10ccc6:	48 8b 05 eb 36 01 00 	mov    0x136eb(%rip),%rax        # 1203b8 <heap_base>
		heap_sz += count;
  10cccd:	48 89 3d d4 36 01 00 	mov    %rdi,0x136d4(%rip)        # 1203a8 <heap_sz>
	ptr = ((char *)HEAP_BASE) + heap_sz;
  10ccd4:	48 01 d0             	add    %rdx,%rax
	}

	return ret;
}
  10ccd7:	c3                   	retq   

000000000010ccd8 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
  10ccd8:	55                   	push   %rbp
  10ccd9:	48 89 e5             	mov    %rsp,%rbp
  10ccdc:	53                   	push   %rbx
  10ccdd:	48 89 fb             	mov    %rdi,%rbx
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
  10cce0:	bf 20 00 00 00       	mov    $0x20,%edi
{
  10cce5:	50                   	push   %rax
	*lock = malloc(sizeof(struct k_mutex));
  10cce6:	e8 55 3e ff ff       	callq  100b40 <malloc>
  10cceb:	48 89 03             	mov    %rax,(%rbx)
  10ccee:	48 89 c7             	mov    %rax,%rdi
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
  10ccf1:	5a                   	pop    %rdx
  10ccf2:	5b                   	pop    %rbx
  10ccf3:	5d                   	pop    %rbp
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_init(mutex);
  10ccf4:	e9 fe 12 00 00       	jmpq   10dff7 <z_impl_k_mutex_init>

000000000010ccf9 <__retarget_lock_close_recursive>:
  10ccf9:	e9 52 3e ff ff       	jmpq   100b50 <free>

000000000010ccfe <__retarget_lock_acquire_recursive>:
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&mutex, *(uintptr_t *)&timeout, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
  10ccfe:	48 83 ce ff          	or     $0xffffffffffffffff,%rsi
  10cd02:	e9 09 13 00 00       	jmpq   10e010 <z_impl_k_mutex_lock>

000000000010cd07 <__retarget_lock_release_recursive>:
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
  10cd07:	e9 0e 14 00 00       	jmpq   10e11a <z_impl_k_mutex_unlock>

000000000010cd0c <__errno>:
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
  10cd0c:	e9 bf 0e 00 00       	jmpq   10dbd0 <z_impl_z_errno>

000000000010cd11 <_ready_one_thread>:

	return true;
}

static inline void _ready_one_thread(_wait_q_t *wq)
{
  10cd11:	55                   	push   %rbp
  10cd12:	48 89 e5             	mov    %rsp,%rbp
	struct k_thread *thread = z_unpend_first_thread(wq);
  10cd15:	e8 1a 1c 00 00       	callq  10e934 <z_unpend_first_thread>

	if (thread != NULL) {
  10cd1a:	48 85 c0             	test   %rax,%rax
  10cd1d:	74 09                	je     10cd28 <_ready_one_thread+0x17>
  10cd1f:	48 89 c7             	mov    %rax,%rdi
		z_ready_thread(thread);
	}
}
  10cd22:	5d                   	pop    %rbp
		z_ready_thread(thread);
  10cd23:	e9 28 19 00 00       	jmpq   10e650 <z_ready_thread>
}
  10cd28:	5d                   	pop    %rbp
  10cd29:	c3                   	retq   

000000000010cd2a <cond_wait>:

int64_t timespec_to_timeoutms(const struct timespec *abstime);

static int cond_wait(pthread_cond_t *cv, pthread_mutex_t *mut,
		     k_timeout_t timeout)
{
  10cd2a:	55                   	push   %rbp
  10cd2b:	48 89 e5             	mov    %rsp,%rbp
  10cd2e:	41 56                	push   %r14
  10cd30:	49 89 d6             	mov    %rdx,%r14
  10cd33:	41 55                	push   %r13
  10cd35:	49 89 fd             	mov    %rdi,%r13
  10cd38:	41 54                	push   %r12
  10cd3a:	49 89 f4             	mov    %rsi,%r12
  10cd3d:	53                   	push   %rbx
  10cd3e:	9c                   	pushfq 
  10cd3f:	fa                   	cli    
  10cd40:	5b                   	pop    %rbx
	__ASSERT(mut->lock_count == 1U, "");

	int ret;
	k_spinlock_key_t key = k_spin_lock(&z_pthread_spinlock);

	mut->lock_count = 0U;
  10cd41:	66 c7 46 08 00 00    	movw   $0x0,0x8(%rsi)
	mut->owner = NULL;
	_ready_one_thread(&mut->wait_q);
  10cd47:	48 8d 7e 10          	lea    0x10(%rsi),%rdi
	mut->owner = NULL;
  10cd4b:	48 c7 06 00 00 00 00 	movq   $0x0,(%rsi)
	_ready_one_thread(&mut->wait_q);
  10cd52:	e8 ba ff ff ff       	callq  10cd11 <_ready_one_thread>
	ret = z_pend_curr(&z_pthread_spinlock, key, &cv->wait_q, timeout);
  10cd57:	4c 89 ea             	mov    %r13,%rdx
  10cd5a:	bf 39 04 12 00       	mov    $0x120439,%edi
  10cd5f:	4c 89 f1             	mov    %r14,%rcx
  10cd62:	89 de                	mov    %ebx,%esi
  10cd64:	e8 5c 1a 00 00       	callq  10e7c5 <z_pend_curr>
	 * will be swapping back to this particular thread and lock it
	 * (i.e. leave the lock variable unchanged) on our behalf.
	 * But that requires putting scheduler intelligence into this
	 * higher level abstraction and is probably not worth it.
	 */
	pthread_mutex_lock(mut);
  10cd69:	4c 89 e7             	mov    %r12,%rdi
	ret = z_pend_curr(&z_pthread_spinlock, key, &cv->wait_q, timeout);
  10cd6c:	41 89 c5             	mov    %eax,%r13d
	pthread_mutex_lock(mut);
  10cd6f:	e8 48 01 00 00       	callq  10cebc <pthread_mutex_lock>

	return ret == -EAGAIN ? ETIMEDOUT : ret;
  10cd74:	41 83 fd f5          	cmp    $0xfffffff5,%r13d
  10cd78:	75 06                	jne    10cd80 <cond_wait+0x56>
  10cd7a:	41 bd 74 00 00 00    	mov    $0x74,%r13d
}
  10cd80:	5b                   	pop    %rbx
  10cd81:	44 89 e8             	mov    %r13d,%eax
  10cd84:	41 5c                	pop    %r12
  10cd86:	41 5d                	pop    %r13
  10cd88:	41 5e                	pop    %r14
  10cd8a:	5d                   	pop    %rbp
  10cd8b:	c3                   	retq   

000000000010cd8c <pthread_cond_broadcast>:

	return 0;
}

int pthread_cond_broadcast(pthread_cond_t *cv)
{
  10cd8c:	55                   	push   %rbp
  10cd8d:	48 89 e5             	mov    %rsp,%rbp
  10cd90:	41 54                	push   %r12
  10cd92:	53                   	push   %rbx
  10cd93:	48 89 fb             	mov    %rdi,%rbx
  10cd96:	9c                   	pushfq 
  10cd97:	fa                   	cli    
  10cd98:	41 5c                	pop    %r12
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
  10cd9a:	48 8b 03             	mov    (%rbx),%rax
	k_spinlock_key_t key = k_spin_lock(&z_pthread_spinlock);

	while (z_waitq_head(&cv->wait_q)) {
  10cd9d:	48 39 c3             	cmp    %rax,%rbx
  10cda0:	74 0f                	je     10cdb1 <pthread_cond_broadcast+0x25>
  10cda2:	48 85 c0             	test   %rax,%rax
  10cda5:	74 0a                	je     10cdb1 <pthread_cond_broadcast+0x25>
		_ready_one_thread(&cv->wait_q);
  10cda7:	48 89 df             	mov    %rbx,%rdi
  10cdaa:	e8 62 ff ff ff       	callq  10cd11 <_ready_one_thread>
  10cdaf:	eb e9                	jmp    10cd9a <pthread_cond_broadcast+0xe>
	}

	z_reschedule(&z_pthread_spinlock, key);
  10cdb1:	44 89 e6             	mov    %r12d,%esi
  10cdb4:	bf 39 04 12 00       	mov    $0x120439,%edi
  10cdb9:	e8 1f 16 00 00       	callq  10e3dd <z_reschedule>

	return 0;
}
  10cdbe:	5b                   	pop    %rbx
  10cdbf:	31 c0                	xor    %eax,%eax
  10cdc1:	41 5c                	pop    %r12
  10cdc3:	5d                   	pop    %rbp
  10cdc4:	c3                   	retq   

000000000010cdc5 <pthread_cond_wait>:

int pthread_cond_wait(pthread_cond_t *cv, pthread_mutex_t *mut)
{
	return cond_wait(cv, mut, K_FOREVER);
  10cdc5:	48 83 ca ff          	or     $0xffffffffffffffff,%rdx
  10cdc9:	e9 5c ff ff ff       	jmpq   10cd2a <cond_wait>

000000000010cdce <acquire_mutex>:
static const pthread_mutexattr_t def_attr = {
	.type = PTHREAD_MUTEX_DEFAULT,
};

static int acquire_mutex(pthread_mutex_t *m, k_timeout_t timeout)
{
  10cdce:	55                   	push   %rbp
  10cdcf:	48 89 e5             	mov    %rsp,%rbp
  10cdd2:	41 57                	push   %r15
  10cdd4:	41 56                	push   %r14
  10cdd6:	49 89 f6             	mov    %rsi,%r14
  10cdd9:	41 55                	push   %r13
  10cddb:	41 54                	push   %r12
  10cddd:	53                   	push   %rbx
  10cdde:	48 89 fb             	mov    %rdi,%rbx
  10cde1:	51                   	push   %rcx
  10cde2:	9c                   	pushfq 
  10cde3:	fa                   	cli    
  10cde4:	41 5d                	pop    %r13
	int rc = 0;
	k_spinlock_key_t key = k_spin_lock(&z_pthread_spinlock);

	if (m->lock_count == 0U && m->owner == NULL) {
  10cde6:	44 8b 67 08          	mov    0x8(%rdi),%r12d
  10cdea:	66 45 85 e4          	test   %r12w,%r12w
  10cdee:	75 1e                	jne    10ce0e <acquire_mutex+0x40>
  10cdf0:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  10cdf4:	75 18                	jne    10ce0e <acquire_mutex+0x40>
		m->lock_count++;
  10cdf6:	66 c7 47 08 01 00    	movw   $0x1,0x8(%rdi)
	return z_impl_z_current_get();
  10cdfc:	e8 ee 1c 00 00       	callq  10eaef <z_impl_z_current_get>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10ce01:	41 0f ba e5 09       	bt     $0x9,%r13d
		m->owner = pthread_self();
  10ce06:	48 89 03             	mov    %rax,(%rbx)
  10ce09:	73 78                	jae    10ce83 <acquire_mutex+0xb5>
		__asm__ volatile ("sti" ::: "memory");
  10ce0b:	fb                   	sti    
  10ce0c:	eb 75                	jmp    10ce83 <acquire_mutex+0xb5>

		k_spin_unlock(&z_pthread_spinlock, key);
		return 0;
	} else if (m->owner == pthread_self()) {
  10ce0e:	4c 8b 3b             	mov    (%rbx),%r15
  10ce11:	e8 d9 1c 00 00       	callq  10eaef <z_impl_z_current_get>
  10ce16:	49 39 c7             	cmp    %rax,%r15
  10ce19:	75 33                	jne    10ce4e <acquire_mutex+0x80>
		if (m->type == PTHREAD_MUTEX_RECURSIVE &&
  10ce1b:	8b 43 0c             	mov    0xc(%rbx),%eax
  10ce1e:	83 f8 01             	cmp    $0x1,%eax
  10ce21:	75 19                	jne    10ce3c <acquire_mutex+0x6e>
			m->lock_count++;
			rc = 0;
		} else if (m->type == PTHREAD_MUTEX_ERRORCHECK) {
			rc = EDEADLK;
		} else {
			rc = EINVAL;
  10ce23:	b8 16 00 00 00       	mov    $0x16,%eax
		if (m->type == PTHREAD_MUTEX_RECURSIVE &&
  10ce28:	66 41 81 fc fe 7f    	cmp    $0x7ffe,%r12w
  10ce2e:	77 28                	ja     10ce58 <acquire_mutex+0x8a>
			m->lock_count++;
  10ce30:	41 ff c4             	inc    %r12d
			rc = 0;
  10ce33:	31 c0                	xor    %eax,%eax
			m->lock_count++;
  10ce35:	66 44 89 63 08       	mov    %r12w,0x8(%rbx)
			rc = 0;
  10ce3a:	eb 1c                	jmp    10ce58 <acquire_mutex+0x8a>
			rc = EDEADLK;
  10ce3c:	83 f8 02             	cmp    $0x2,%eax
  10ce3f:	ba 2d 00 00 00       	mov    $0x2d,%edx
  10ce44:	b8 16 00 00 00       	mov    $0x16,%eax
  10ce49:	0f 44 c2             	cmove  %edx,%eax
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10ce4c:	eb 0a                	jmp    10ce58 <acquire_mutex+0x8a>

		k_spin_unlock(&z_pthread_spinlock, key);
		return rc;
	}

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
  10ce4e:	4d 85 f6             	test   %r14,%r14
  10ce51:	75 0f                	jne    10ce62 <acquire_mutex+0x94>
		k_spin_unlock(&z_pthread_spinlock, key);
		return EINVAL;
  10ce53:	b8 16 00 00 00       	mov    $0x16,%eax
  10ce58:	41 0f ba e5 09       	bt     $0x9,%r13d
  10ce5d:	73 26                	jae    10ce85 <acquire_mutex+0xb7>
		__asm__ volatile ("sti" ::: "memory");
  10ce5f:	fb                   	sti    
  10ce60:	eb 23                	jmp    10ce85 <acquire_mutex+0xb7>
	}

	rc = z_pend_curr(&z_pthread_spinlock, key, &m->wait_q, timeout);
  10ce62:	48 8d 53 10          	lea    0x10(%rbx),%rdx
  10ce66:	4c 89 f1             	mov    %r14,%rcx
  10ce69:	44 89 ee             	mov    %r13d,%esi
  10ce6c:	bf 39 04 12 00       	mov    $0x120439,%edi
  10ce71:	e8 4f 19 00 00       	callq  10e7c5 <z_pend_curr>
  10ce76:	41 89 c0             	mov    %eax,%r8d
	if (rc != 0) {
		rc = ETIMEDOUT;
  10ce79:	b8 74 00 00 00       	mov    $0x74,%eax
	if (rc != 0) {
  10ce7e:	45 85 c0             	test   %r8d,%r8d
  10ce81:	75 02                	jne    10ce85 <acquire_mutex+0xb7>
		return EINVAL;
  10ce83:	31 c0                	xor    %eax,%eax
	}

	return rc;
}
  10ce85:	5a                   	pop    %rdx
  10ce86:	5b                   	pop    %rbx
  10ce87:	41 5c                	pop    %r12
  10ce89:	41 5d                	pop    %r13
  10ce8b:	41 5e                	pop    %r14
  10ce8d:	41 5f                	pop    %r15
  10ce8f:	5d                   	pop    %rbp
  10ce90:	c3                   	retq   

000000000010ce91 <pthread_mutex_init>:
int pthread_mutex_init(pthread_mutex_t *m,
				     const pthread_mutexattr_t *attr)
{
	const pthread_mutexattr_t *mattr;

	m->owner = NULL;
  10ce91:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
	m->lock_count = 0U;
  10ce98:	66 c7 47 08 00 00    	movw   $0x0,0x8(%rdi)

	mattr = (attr == NULL) ? &def_attr : attr;
  10ce9e:	48 85 f6             	test   %rsi,%rsi
  10cea1:	75 05                	jne    10cea8 <pthread_mutex_init+0x17>
  10cea3:	be 7c 11 11 00       	mov    $0x11117c,%esi

	m->type = mattr->type;
  10cea8:	8b 06                	mov    (%rsi),%eax
  10ceaa:	89 47 0c             	mov    %eax,0xc(%rdi)
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
  10cead:	48 8d 47 10          	lea    0x10(%rdi),%rax
	list->head = (sys_dnode_t *)list;
  10ceb1:	48 89 47 10          	mov    %rax,0x10(%rdi)
	list->tail = (sys_dnode_t *)list;
  10ceb5:	48 89 47 18          	mov    %rax,0x18(%rdi)

	z_waitq_init(&m->wait_q);

	return 0;
}
  10ceb9:	31 c0                	xor    %eax,%eax
  10cebb:	c3                   	retq   

000000000010cebc <pthread_mutex_lock>:
 *
 * See IEEE 1003.1
 */
int pthread_mutex_lock(pthread_mutex_t *m)
{
	return acquire_mutex(m, K_FOREVER);
  10cebc:	48 83 ce ff          	or     $0xffffffffffffffff,%rsi
  10cec0:	e9 09 ff ff ff       	jmpq   10cdce <acquire_mutex>

000000000010cec5 <pthread_mutex_unlock>:
 * @brief Unlock POSIX mutex.
 *
 * See IEEE 1003.1
 */
int pthread_mutex_unlock(pthread_mutex_t *m)
{
  10cec5:	55                   	push   %rbp
  10cec6:	48 89 e5             	mov    %rsp,%rbp
  10cec9:	41 55                	push   %r13
  10cecb:	41 54                	push   %r12
  10cecd:	53                   	push   %rbx
  10cece:	48 89 fb             	mov    %rdi,%rbx
  10ced1:	51                   	push   %rcx
  10ced2:	9c                   	pushfq 
  10ced3:	fa                   	cli    
  10ced4:	41 5c                	pop    %r12
	k_spinlock_key_t key = k_spin_lock(&z_pthread_spinlock);

	k_tid_t thread;

	if (m->owner != pthread_self()) {
  10ced6:	4c 8b 2f             	mov    (%rdi),%r13
  10ced9:	e8 11 1c 00 00       	callq  10eaef <z_impl_z_current_get>
  10cede:	49 39 c5             	cmp    %rax,%r13
  10cee1:	74 07                	je     10ceea <pthread_mutex_unlock+0x25>
		k_spin_unlock(&z_pthread_spinlock, key);
		return EPERM;
  10cee3:	b8 01 00 00 00       	mov    $0x1,%eax
  10cee8:	eb 5b                	jmp    10cf45 <pthread_mutex_unlock+0x80>
	}

	if (m->lock_count == 0U) {
  10ceea:	8b 43 08             	mov    0x8(%rbx),%eax
  10ceed:	66 85 c0             	test   %ax,%ax
  10cef0:	75 07                	jne    10cef9 <pthread_mutex_unlock+0x34>
		k_spin_unlock(&z_pthread_spinlock, key);
		return EINVAL;
  10cef2:	b8 16 00 00 00       	mov    $0x16,%eax
  10cef7:	eb 4c                	jmp    10cf45 <pthread_mutex_unlock+0x80>
	}

	m->lock_count--;
  10cef9:	ff c8                	dec    %eax
  10cefb:	66 89 43 08          	mov    %ax,0x8(%rbx)

	if (m->lock_count == 0U) {
  10ceff:	66 85 c0             	test   %ax,%ax
  10cf02:	75 3f                	jne    10cf43 <pthread_mutex_unlock+0x7e>
		thread = z_unpend_first_thread(&m->wait_q);
  10cf04:	48 8d 7b 10          	lea    0x10(%rbx),%rdi
  10cf08:	e8 27 1a 00 00       	callq  10e934 <z_unpend_first_thread>
  10cf0d:	48 89 c7             	mov    %rax,%rdi
		if (thread) {
  10cf10:	48 85 c0             	test   %rax,%rax
  10cf13:	74 27                	je     10cf3c <pthread_mutex_unlock+0x77>
			m->owner = (pthread_t)thread;
			m->lock_count++;
  10cf15:	66 ff 43 08          	incw   0x8(%rbx)
			m->owner = (pthread_t)thread;
  10cf19:	48 89 03             	mov    %rax,(%rbx)
 * z_swap() is in use it's a simple inline provided by the kernel.
 */
static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->swap_retval = value;
  10cf1c:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%rax)
  10cf23:	00 00 00 
			arch_thread_return_value_set(thread, 0);
			z_ready_thread(thread);
  10cf26:	e8 25 17 00 00       	callq  10e650 <z_ready_thread>
			z_reschedule(&z_pthread_spinlock, key);
  10cf2b:	44 89 e6             	mov    %r12d,%esi
  10cf2e:	bf 39 04 12 00       	mov    $0x120439,%edi
  10cf33:	e8 a5 14 00 00       	callq  10e3dd <z_reschedule>
			return 0;
  10cf38:	31 c0                	xor    %eax,%eax
  10cf3a:	eb 11                	jmp    10cf4d <pthread_mutex_unlock+0x88>
		}
		m->owner = NULL;
  10cf3c:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)

	}
	k_spin_unlock(&z_pthread_spinlock, key);
	return 0;
  10cf43:	31 c0                	xor    %eax,%eax
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10cf45:	41 0f ba e4 09       	bt     $0x9,%r12d
  10cf4a:	73 01                	jae    10cf4d <pthread_mutex_unlock+0x88>
		__asm__ volatile ("sti" ::: "memory");
  10cf4c:	fb                   	sti    
}
  10cf4d:	5a                   	pop    %rdx
  10cf4e:	5b                   	pop    %rbx
  10cf4f:	41 5c                	pop    %r12
  10cf51:	41 5d                	pop    %r13
  10cf53:	5d                   	pop    %rbp
  10cf54:	c3                   	retq   

000000000010cf55 <pthread_attr_setstack>:
 */
int pthread_attr_setstack(pthread_attr_t *attr, void *stackaddr,
			  size_t stacksize)
{
	if (stackaddr == NULL) {
		return EACCES;
  10cf55:	b8 0d 00 00 00       	mov    $0xd,%eax
	if (stackaddr == NULL) {
  10cf5a:	48 85 f6             	test   %rsi,%rsi
  10cf5d:	74 0a                	je     10cf69 <pthread_attr_setstack+0x14>
	}

	attr->stack = stackaddr;
  10cf5f:	48 89 77 08          	mov    %rsi,0x8(%rdi)
	attr->stacksize = stacksize;
	return 0;
  10cf63:	31 c0                	xor    %eax,%eax
	attr->stacksize = stacksize;
  10cf65:	48 89 57 10          	mov    %rdx,0x10(%rdi)
}
  10cf69:	c3                   	retq   

000000000010cf6a <pthread_create>:
 *
 * See IEEE 1003.1
 */
int pthread_create(pthread_t *newthread, const pthread_attr_t *attr,
		   void *(*threadroutine)(void *), void *arg)
{
  10cf6a:	55                   	push   %rbp
	 * pointer and stack size. So even though POSIX 1003.1 spec accepts
	 * attrib as NULL but zephyr needs it initialized with valid stack.
	 */
	if ((attr == NULL) || (attr->initialized == 0U)
	    || (attr->stack == NULL) || (attr->stacksize == 0)) {
		return EINVAL;
  10cf6b:	b8 16 00 00 00       	mov    $0x16,%eax
{
  10cf70:	48 89 e5             	mov    %rsp,%rbp
  10cf73:	41 57                	push   %r15
  10cf75:	41 56                	push   %r14
  10cf77:	41 55                	push   %r13
  10cf79:	41 54                	push   %r12
  10cf7b:	53                   	push   %rbx
  10cf7c:	48 83 ec 28          	sub    $0x28,%rsp
  10cf80:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10cf84:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  10cf88:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
	if ((attr == NULL) || (attr->initialized == 0U)
  10cf8c:	48 85 f6             	test   %rsi,%rsi
  10cf8f:	0f 84 84 01 00 00    	je     10d119 <pthread_create+0x1af>
  10cf95:	83 7e 28 00          	cmpl   $0x0,0x28(%rsi)
  10cf99:	48 89 f3             	mov    %rsi,%rbx
  10cf9c:	0f 84 77 01 00 00    	je     10d119 <pthread_create+0x1af>
	    || (attr->stack == NULL) || (attr->stacksize == 0)) {
  10cfa2:	48 83 7e 08 00       	cmpq   $0x0,0x8(%rsi)
  10cfa7:	0f 84 6c 01 00 00    	je     10d119 <pthread_create+0x1af>
  10cfad:	48 83 7e 10 00       	cmpq   $0x0,0x10(%rsi)
  10cfb2:	0f 84 61 01 00 00    	je     10d119 <pthread_create+0x1af>
	}

	pthread_mutex_lock(&pthread_pool_lock);
  10cfb8:	bf 60 75 14 00       	mov    $0x147560,%edi
  10cfbd:	e8 fa fe ff ff       	callq  10cebc <pthread_mutex_lock>
  10cfc2:	31 c0                	xor    %eax,%eax
	for (pthread_num = 0;
	    pthread_num < CONFIG_MAX_PTHREAD_COUNT; pthread_num++) {
		thread = &posix_thread_pool[pthread_num];
		if (thread->state == PTHREAD_TERMINATED) {
  10cfc4:	48 69 d0 a0 03 00 00 	imul   $0x3a0,%rax,%rdx
  10cfcb:	41 89 c4             	mov    %eax,%r12d
  10cfce:	83 ba 20 c5 11 00 00 	cmpl   $0x0,0x11c520(%rdx)
  10cfd5:	75 16                	jne    10cfed <pthread_create+0x83>
			thread->state = PTHREAD_JOINABLE;
  10cfd7:	44 89 e0             	mov    %r12d,%eax
  10cfda:	48 69 c0 a0 03 00 00 	imul   $0x3a0,%rax,%rax
  10cfe1:	c7 80 20 c5 11 00 01 	movl   $0x1,0x11c520(%rax)
  10cfe8:	00 00 00 
			break;
  10cfeb:	eb 0f                	jmp    10cffc <pthread_create+0x92>
	for (pthread_num = 0;
  10cfed:	48 ff c0             	inc    %rax
  10cff0:	48 83 f8 05          	cmp    $0x5,%rax
  10cff4:	75 ce                	jne    10cfc4 <pthread_create+0x5a>
  10cff6:	41 bc 05 00 00 00    	mov    $0x5,%r12d
		}
	}
	pthread_mutex_unlock(&pthread_pool_lock);
  10cffc:	bf 60 75 14 00       	mov    $0x147560,%edi
  10d001:	e8 bf fe ff ff       	callq  10cec5 <pthread_mutex_unlock>

	if (pthread_num >= CONFIG_MAX_PTHREAD_COUNT) {
		return EAGAIN;
  10d006:	b8 0b 00 00 00       	mov    $0xb,%eax
	if (pthread_num >= CONFIG_MAX_PTHREAD_COUNT) {
  10d00b:	41 83 fc 05          	cmp    $0x5,%r12d
  10d00f:	0f 84 04 01 00 00    	je     10d119 <pthread_create+0x1af>
	if (policy == SCHED_FIFO) {
  10d015:	83 7b 20 00          	cmpl   $0x0,0x20(%rbx)
	}

	prio = posix_to_zephyr_priority(attr->priority, attr->schedpolicy);
  10d019:	8b 03                	mov    (%rbx),%eax
	if (policy == SCHED_FIFO) {
  10d01b:	75 06                	jne    10d023 <pthread_create+0xb9>
		prio =  -1 * (priority + 1);
  10d01d:	f7 d0                	not    %eax
  10d01f:	89 c1                	mov    %eax,%ecx
  10d021:	eb 07                	jmp    10d02a <pthread_create+0xc0>
		prio = (CONFIG_NUM_PREEMPT_PRIORITIES - priority);
  10d023:	b9 0f 00 00 00       	mov    $0xf,%ecx
  10d028:	29 c1                	sub    %eax,%ecx
  10d02a:	4d 69 e4 a0 03 00 00 	imul   $0x3a0,%r12,%r12
	thread = &posix_thread_pool[pthread_num];
	/*
	 * Ignore return value, as we know that Zephyr implementation
	 * cannot fail.
	 */
	(void)pthread_mutex_init(&thread->state_lock, NULL);
  10d031:	31 f6                	xor    %esi,%esi
  10d033:	89 4d b4             	mov    %ecx,-0x4c(%rbp)
  10d036:	4d 8d b4 24 28 c5 11 	lea    0x11c528(%r12),%r14
  10d03d:	00 
	(void)pthread_mutex_init(&thread->cancel_lock, NULL);
  10d03e:	4d 8d bc 24 00 c5 11 	lea    0x11c500(%r12),%r15
  10d045:	00 
	(void)pthread_mutex_init(&thread->state_lock, NULL);
  10d046:	4c 89 f7             	mov    %r14,%rdi

	pthread_mutex_lock(&thread->cancel_lock);
	thread->cancel_state = (1 << _PTHREAD_CANCEL_POS) & attr->flags;
  10d049:	4d 8d ac 24 c0 c1 11 	lea    0x11c1c0(%r12),%r13
  10d050:	00 
	(void)pthread_mutex_init(&thread->state_lock, NULL);
  10d051:	e8 3b fe ff ff       	callq  10ce91 <pthread_mutex_init>
	(void)pthread_mutex_init(&thread->cancel_lock, NULL);
  10d056:	31 f6                	xor    %esi,%esi
  10d058:	4c 89 ff             	mov    %r15,%rdi
  10d05b:	e8 31 fe ff ff       	callq  10ce91 <pthread_mutex_init>
	pthread_mutex_lock(&thread->cancel_lock);
  10d060:	4c 89 ff             	mov    %r15,%rdi
  10d063:	e8 54 fe ff ff       	callq  10cebc <pthread_mutex_lock>
	thread->cancel_state = (1 << _PTHREAD_CANCEL_POS) & attr->flags;
  10d068:	8b 43 18             	mov    0x18(%rbx),%eax
	thread->cancel_pending = 0;
	pthread_mutex_unlock(&thread->cancel_lock);
  10d06b:	4c 89 ff             	mov    %r15,%rdi
	thread->cancel_pending = 0;
  10d06e:	41 c7 85 3c 03 00 00 	movl   $0x0,0x33c(%r13)
  10d075:	00 00 00 00 
	thread->cancel_state = (1 << _PTHREAD_CANCEL_POS) & attr->flags;
  10d079:	83 e0 01             	and    $0x1,%eax
  10d07c:	41 89 85 38 03 00 00 	mov    %eax,0x338(%r13)
	pthread_mutex_unlock(&thread->cancel_lock);
  10d083:	e8 3d fe ff ff       	callq  10cec5 <pthread_mutex_unlock>

	pthread_mutex_lock(&thread->state_lock);
  10d088:	4c 89 f7             	mov    %r14,%rdi
  10d08b:	e8 2c fe ff ff       	callq  10cebc <pthread_mutex_lock>
	thread->state = attr->detachstate;
  10d090:	8b 43 24             	mov    0x24(%rbx),%eax
	pthread_mutex_unlock(&thread->state_lock);
  10d093:	4c 89 f7             	mov    %r14,%rdi
	thread->state = attr->detachstate;
  10d096:	41 89 85 60 03 00 00 	mov    %eax,0x360(%r13)
	pthread_mutex_unlock(&thread->state_lock);
  10d09d:	e8 23 fe ff ff       	callq  10cec5 <pthread_mutex_unlock>

	pthread_cond_init(&thread->state_cond, &cond_attr);
	sys_slist_init(&thread->key_list);

	*newthread = (pthread_t) k_thread_create(&thread->thread, attr->stack,
  10d0a2:	8b 7b 18             	mov    0x18(%rbx),%edi
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / ((uint64_t)from_hz / to_hz);
  10d0a5:	41 b8 0a 00 00 00    	mov    $0xa,%r8d
  10d0ab:	31 d2                	xor    %edx,%edx
	pthread_cond_init(&thread->state_cond, &cond_attr);
  10d0ad:	49 8d 84 24 48 c5 11 	lea    0x11c548(%r12),%rax
  10d0b4:	00 
	*newthread = (pthread_t) k_thread_create(&thread->thread, attr->stack,
  10d0b5:	4c 8b 5b 10          	mov    0x10(%rbx),%r11
  10d0b9:	48 8b 73 08          	mov    0x8(%rbx),%rsi
	list->head = (sys_dnode_t *)list;
  10d0bd:	49 89 84 24 48 c5 11 	mov    %rax,0x11c548(%r12)
  10d0c4:	00 
  10d0c5:	83 e7 fe             	and    $0xfffffffe,%edi
	list->tail = (sys_dnode_t *)list;
  10d0c8:	48 89 40 08          	mov    %rax,0x8(%rax)
						 (k_thread_entry_t)
						 zephyr_thread_wrapper,
						 (void *)arg, NULL,
						 threadroutine, prio,
						 (~K_ESSENTIAL & attr->flags),
						 K_MSEC(attr->delayedstart));
  10d0cc:	8b 43 1c             	mov    0x1c(%rbx),%eax
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
  10d0cf:	49 c7 85 20 03 00 00 	movq   $0x0,0x320(%r13)
  10d0d6:	00 00 00 00 
	list->tail = NULL;
  10d0da:	49 c7 85 28 03 00 00 	movq   $0x0,0x328(%r13)
  10d0e1:	00 00 00 00 
		t += off;
  10d0e5:	48 83 c0 09          	add    $0x9,%rax
			return t / ((uint64_t)from_hz / to_hz);
  10d0e9:	49 f7 f0             	div    %r8
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
  10d0ec:	8b 4d b4             	mov    -0x4c(%rbp),%ecx
  10d0ef:	4c 8b 45 b8          	mov    -0x48(%rbp),%r8
  10d0f3:	50                   	push   %rax
  10d0f4:	57                   	push   %rdi
  10d0f5:	51                   	push   %rcx
  10d0f6:	ff 75 c0             	pushq  -0x40(%rbp)
  10d0f9:	4c 89 da             	mov    %r11,%rdx
  10d0fc:	45 31 c9             	xor    %r9d,%r9d
  10d0ff:	b9 0f d2 10 00       	mov    $0x10d20f,%ecx
  10d104:	4c 89 ef             	mov    %r13,%rdi
  10d107:	e8 ba 0d 00 00       	callq  10dec6 <z_impl_k_thread_create>
	*newthread = (pthread_t) k_thread_create(&thread->thread, attr->stack,
  10d10c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  10d110:	48 83 c4 20          	add    $0x20,%rsp
  10d114:	48 89 02             	mov    %rax,(%rdx)
	return 0;
  10d117:	31 c0                	xor    %eax,%eax
}
  10d119:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
  10d11d:	5b                   	pop    %rbx
  10d11e:	41 5c                	pop    %r12
  10d120:	41 5d                	pop    %r13
  10d122:	41 5e                	pop    %r14
  10d124:	41 5f                	pop    %r15
  10d126:	5d                   	pop    %rbp
  10d127:	c3                   	retq   

000000000010d128 <pthread_attr_init>:
 */
int pthread_attr_init(pthread_attr_t *attr)
{

	if (attr == NULL) {
		return ENOMEM;
  10d128:	41 b8 0c 00 00 00    	mov    $0xc,%r8d
	if (attr == NULL) {
  10d12e:	48 85 ff             	test   %rdi,%rdi
  10d131:	74 0f                	je     10d142 <pthread_attr_init+0x1a>
  10d133:	be 20 02 11 00       	mov    $0x110220,%esi
  10d138:	b9 0c 00 00 00       	mov    $0xc,%ecx
	}

	(void)memcpy(attr, &init_pthread_attrs, sizeof(pthread_attr_t));

	return 0;
  10d13d:	45 31 c0             	xor    %r8d,%r8d
  10d140:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
}
  10d142:	44 89 c0             	mov    %r8d,%eax
  10d145:	c3                   	retq   

000000000010d146 <pthread_exit>:
 * @brief Terminate calling thread.
 *
 * See IEEE 1003.1
 */
void pthread_exit(void *retval)
{
  10d146:	55                   	push   %rbp
  10d147:	48 89 e5             	mov    %rsp,%rbp
  10d14a:	41 55                	push   %r13
  10d14c:	41 54                	push   %r12
  10d14e:	53                   	push   %rbx
  10d14f:	48 89 fb             	mov    %rdi,%rbx
  10d152:	52                   	push   %rdx
	return z_impl_z_current_get();
  10d153:	e8 97 19 00 00       	callq  10eaef <z_impl_z_current_get>
	pthread_key_obj *key_obj;
	pthread_thread_data *thread_spec_data;
	sys_snode_t *node_l;

	/* Make a thread as cancelable before exiting */
	pthread_mutex_lock(&self->cancel_lock);
  10d158:	4c 8d a8 40 03 00 00 	lea    0x340(%rax),%r13
  10d15f:	49 89 c4             	mov    %rax,%r12
  10d162:	4c 89 ef             	mov    %r13,%rdi
  10d165:	e8 52 fd ff ff       	callq  10cebc <pthread_mutex_lock>
	if (self->cancel_state == PTHREAD_CANCEL_DISABLE) {
  10d16a:	41 83 bc 24 38 03 00 	cmpl   $0x1,0x338(%r12)
  10d171:	00 01 
  10d173:	75 0c                	jne    10d181 <pthread_exit+0x3b>
		self->cancel_state = PTHREAD_CANCEL_ENABLE;
  10d175:	41 c7 84 24 38 03 00 	movl   $0x0,0x338(%r12)
  10d17c:	00 00 00 00 00 
	}

	pthread_mutex_unlock(&self->cancel_lock);
  10d181:	4c 89 ef             	mov    %r13,%rdi

	pthread_mutex_lock(&self->state_lock);
  10d184:	4d 8d ac 24 68 03 00 	lea    0x368(%r12),%r13
  10d18b:	00 
	pthread_mutex_unlock(&self->cancel_lock);
  10d18c:	e8 34 fd ff ff       	callq  10cec5 <pthread_mutex_unlock>
	pthread_mutex_lock(&self->state_lock);
  10d191:	4c 89 ef             	mov    %r13,%rdi
  10d194:	e8 23 fd ff ff       	callq  10cebc <pthread_mutex_lock>
	if (self->state == PTHREAD_JOINABLE) {
  10d199:	41 83 bc 24 60 03 00 	cmpl   $0x1,0x360(%r12)
  10d1a0:	00 01 
  10d1a2:	75 23                	jne    10d1c7 <pthread_exit+0x81>
		self->retval = retval;
  10d1a4:	49 89 9c 24 30 03 00 	mov    %rbx,0x330(%r12)
  10d1ab:	00 
		self->state = PTHREAD_EXITED;
		self->retval = retval;
		pthread_cond_broadcast(&self->state_cond);
  10d1ac:	49 8d bc 24 88 03 00 	lea    0x388(%r12),%rdi
  10d1b3:	00 
		self->state = PTHREAD_EXITED;
  10d1b4:	41 c7 84 24 60 03 00 	movl   $0x3,0x360(%r12)
  10d1bb:	00 03 00 00 00 
		pthread_cond_broadcast(&self->state_cond);
  10d1c0:	e8 c7 fb ff ff       	callq  10cd8c <pthread_cond_broadcast>
  10d1c5:	eb 0c                	jmp    10d1d3 <pthread_exit+0x8d>
	} else {
		self->state = PTHREAD_TERMINATED;
  10d1c7:	41 c7 84 24 60 03 00 	movl   $0x0,0x360(%r12)
  10d1ce:	00 00 00 00 00 
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
  10d1d3:	49 8b 9c 24 20 03 00 	mov    0x320(%r12),%rbx
  10d1da:	00 
	}

	SYS_SLIST_FOR_EACH_NODE(&self->key_list, node_l) {
  10d1db:	48 85 db             	test   %rbx,%rbx
  10d1de:	74 18                	je     10d1f8 <pthread_exit+0xb2>
		thread_spec_data = (pthread_thread_data *)node_l;
		if (thread_spec_data != NULL) {
			key_obj = thread_spec_data->key;
			if (key_obj->destructor != NULL) {
  10d1e0:	48 8b 43 08          	mov    0x8(%rbx),%rax
  10d1e4:	48 8b 40 10          	mov    0x10(%rax),%rax
  10d1e8:	48 85 c0             	test   %rax,%rax
  10d1eb:	74 06                	je     10d1f3 <pthread_exit+0xad>
				(key_obj->destructor)(thread_spec_data->spec_data);
  10d1ed:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
  10d1f1:	ff d0                	callq  *%rax
	return node->next;
  10d1f3:	48 8b 1b             	mov    (%rbx),%rbx
  10d1f6:	eb e3                	jmp    10d1db <pthread_exit+0x95>
			}
		}
	}

	pthread_mutex_unlock(&self->state_lock);
  10d1f8:	4c 89 ef             	mov    %r13,%rdi
  10d1fb:	e8 c5 fc ff ff       	callq  10cec5 <pthread_mutex_unlock>
	k_thread_abort((k_tid_t)self);
}
  10d200:	58                   	pop    %rax
	z_impl_k_thread_abort(thread);
  10d201:	4c 89 e7             	mov    %r12,%rdi
  10d204:	5b                   	pop    %rbx
  10d205:	41 5c                	pop    %r12
  10d207:	41 5d                	pop    %r13
  10d209:	5d                   	pop    %rbp
  10d20a:	e9 d0 19 00 00       	jmpq   10ebdf <z_impl_k_thread_abort>

000000000010d20f <zephyr_thread_wrapper>:
{
  10d20f:	55                   	push   %rbp
  10d210:	48 89 e5             	mov    %rsp,%rbp
	fun_ptr(arg1);
  10d213:	ff d2                	callq  *%rdx
	pthread_exit(NULL);
  10d215:	31 ff                	xor    %edi,%edi
}
  10d217:	5d                   	pop    %rbp
	pthread_exit(NULL);
  10d218:	e9 29 ff ff ff       	jmpq   10d146 <pthread_exit>

000000000010d21d <pthread_join>:
 * @brief Wait for a thread termination.
 *
 * See IEEE 1003.1
 */
int pthread_join(pthread_t thread, void **status)
{
  10d21d:	55                   	push   %rbp
  10d21e:	48 89 e5             	mov    %rsp,%rbp
  10d221:	41 56                	push   %r14
  10d223:	41 55                	push   %r13
  10d225:	41 54                	push   %r12
	struct posix_thread *pthread = (struct posix_thread *) thread;
	int ret = 0;

	if (pthread == NULL) {
		return ESRCH;
  10d227:	41 bc 03 00 00 00    	mov    $0x3,%r12d
{
  10d22d:	53                   	push   %rbx
	if (pthread == NULL) {
  10d22e:	48 85 ff             	test   %rdi,%rdi
  10d231:	74 77                	je     10d2aa <pthread_join+0x8d>
  10d233:	48 89 fb             	mov    %rdi,%rbx
  10d236:	49 89 f5             	mov    %rsi,%r13
	return z_impl_z_current_get();
  10d239:	e8 b1 18 00 00       	callq  10eaef <z_impl_z_current_get>
	}

	if (pthread == pthread_self()) {
		return EDEADLK;
  10d23e:	41 bc 2d 00 00 00    	mov    $0x2d,%r12d
	if (pthread == pthread_self()) {
  10d244:	48 39 c3             	cmp    %rax,%rbx
  10d247:	74 61                	je     10d2aa <pthread_join+0x8d>
	}

	pthread_mutex_lock(&pthread->state_lock);
  10d249:	4c 8d b3 68 03 00 00 	lea    0x368(%rbx),%r14
  10d250:	4c 89 f7             	mov    %r14,%rdi
  10d253:	e8 64 fc ff ff       	callq  10cebc <pthread_mutex_lock>

	if (pthread->state == PTHREAD_JOINABLE) {
  10d258:	83 bb 60 03 00 00 01 	cmpl   $0x1,0x360(%rbx)
  10d25f:	75 0f                	jne    10d270 <pthread_join+0x53>
		pthread_cond_wait(&pthread->state_cond, &pthread->state_lock);
  10d261:	48 8d bb 88 03 00 00 	lea    0x388(%rbx),%rdi
  10d268:	4c 89 f6             	mov    %r14,%rsi
  10d26b:	e8 55 fb ff ff       	callq  10cdc5 <pthread_cond_wait>
	}

	if (pthread->state == PTHREAD_EXITED) {
  10d270:	8b 83 60 03 00 00    	mov    0x360(%rbx),%eax
  10d276:	83 f8 03             	cmp    $0x3,%eax
  10d279:	75 15                	jne    10d290 <pthread_join+0x73>
	int ret = 0;
  10d27b:	45 31 e4             	xor    %r12d,%r12d
		if (status != NULL) {
  10d27e:	4d 85 ed             	test   %r13,%r13
  10d281:	74 1f                	je     10d2a2 <pthread_join+0x85>
			*status = pthread->retval;
  10d283:	48 8b 83 30 03 00 00 	mov    0x330(%rbx),%rax
  10d28a:	49 89 45 00          	mov    %rax,0x0(%r13)
  10d28e:	eb 12                	jmp    10d2a2 <pthread_join+0x85>
		}
	} else if (pthread->state == PTHREAD_DETACHED) {
		ret = EINVAL;
	} else {
		ret = ESRCH;
  10d290:	83 f8 02             	cmp    $0x2,%eax
  10d293:	41 bc 16 00 00 00    	mov    $0x16,%r12d
  10d299:	b8 03 00 00 00       	mov    $0x3,%eax
  10d29e:	44 0f 45 e0          	cmovne %eax,%r12d
	}

	pthread_mutex_unlock(&pthread->state_lock);
  10d2a2:	4c 89 f7             	mov    %r14,%rdi
  10d2a5:	e8 1b fc ff ff       	callq  10cec5 <pthread_mutex_unlock>
	return ret;
}
  10d2aa:	5b                   	pop    %rbx
  10d2ab:	44 89 e0             	mov    %r12d,%eax
  10d2ae:	41 5c                	pop    %r12
  10d2b0:	41 5d                	pop    %r13
  10d2b2:	41 5e                	pop    %r14
  10d2b4:	5d                   	pop    %rbp
  10d2b5:	c3                   	retq   

000000000010d2b6 <z_impl_clock_gettime>:
 * @brief Get clock time specified by clock_id.
 *
 * See IEEE 1003.1
 */
int z_impl_clock_gettime(clockid_t clock_id, struct timespec *ts)
{
  10d2b6:	55                   	push   %rbp
  10d2b7:	48 89 e5             	mov    %rsp,%rbp
  10d2ba:	41 55                	push   %r13
  10d2bc:	41 54                	push   %r12
  10d2be:	53                   	push   %rbx
  10d2bf:	48 89 f3             	mov    %rsi,%rbx
  10d2c2:	51                   	push   %rcx
	uint64_t elapsed_nsecs;
	struct timespec base;

	switch (clock_id) {
  10d2c3:	48 83 ff 01          	cmp    $0x1,%rdi
  10d2c7:	74 17                	je     10d2e0 <z_impl_clock_gettime+0x2a>
  10d2c9:	48 83 ff 04          	cmp    $0x4,%rdi
  10d2cd:	74 21                	je     10d2f0 <z_impl_clock_gettime+0x3a>
	case CLOCK_REALTIME:
		base = rt_clock_base;
		break;

	default:
		errno = EINVAL;
  10d2cf:	e8 38 fa ff ff       	callq  10cd0c <__errno>
		return -1;
  10d2d4:	41 83 c8 ff          	or     $0xffffffff,%r8d
		errno = EINVAL;
  10d2d8:	c7 00 16 00 00 00    	movl   $0x16,(%rax)
		return -1;
  10d2de:	eb 58                	jmp    10d338 <z_impl_clock_gettime+0x82>
		base = rt_clock_base;
  10d2e0:	4c 8b 2d 39 30 01 00 	mov    0x13039(%rip),%r13        # 120320 <rt_clock_base>
  10d2e7:	4c 8b 25 3a 30 01 00 	mov    0x1303a(%rip),%r12        # 120328 <rt_clock_base+0x8>
		break;
  10d2ee:	eb 06                	jmp    10d2f6 <z_impl_clock_gettime+0x40>
	switch (clock_id) {
  10d2f0:	45 31 e4             	xor    %r12d,%r12d
  10d2f3:	45 31 ed             	xor    %r13d,%r13d
	return z_impl_k_uptime_ticks();
  10d2f6:	e8 55 1c 00 00       	callq  10ef50 <z_impl_k_uptime_ticks>
	}

	elapsed_nsecs = k_ticks_to_ns_floor64(k_uptime_ticks());
	ts->tv_sec = (int32_t) (elapsed_nsecs / NSEC_PER_SEC);
  10d2fb:	b9 00 ca 9a 3b       	mov    $0x3b9aca00,%ecx
  10d300:	31 d2                	xor    %edx,%edx
	if (ts->tv_nsec >= NSEC_PER_SEC) {
		ts->tv_sec++;
		ts->tv_nsec -= NSEC_PER_SEC;
	}

	return 0;
  10d302:	45 31 c0             	xor    %r8d,%r8d
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
  10d305:	48 69 c0 80 96 98 00 	imul   $0x989680,%rax,%rax
	ts->tv_sec = (int32_t) (elapsed_nsecs / NSEC_PER_SEC);
  10d30c:	48 f7 f1             	div    %rcx
  10d30f:	48 98                	cltq   
	ts->tv_nsec += base.tv_nsec;
  10d311:	4c 01 e2             	add    %r12,%rdx
	ts->tv_sec += base.tv_sec;
  10d314:	4c 01 e8             	add    %r13,%rax
	ts->tv_nsec += base.tv_nsec;
  10d317:	48 89 53 08          	mov    %rdx,0x8(%rbx)
	ts->tv_sec += base.tv_sec;
  10d31b:	48 89 03             	mov    %rax,(%rbx)
	if (ts->tv_nsec >= NSEC_PER_SEC) {
  10d31e:	48 81 fa ff c9 9a 3b 	cmp    $0x3b9ac9ff,%rdx
  10d325:	7e 11                	jle    10d338 <z_impl_clock_gettime+0x82>
		ts->tv_sec++;
  10d327:	48 ff c0             	inc    %rax
		ts->tv_nsec -= NSEC_PER_SEC;
  10d32a:	48 81 ea 00 ca 9a 3b 	sub    $0x3b9aca00,%rdx
		ts->tv_sec++;
  10d331:	48 89 03             	mov    %rax,(%rbx)
		ts->tv_nsec -= NSEC_PER_SEC;
  10d334:	48 89 53 08          	mov    %rdx,0x8(%rbx)
}
  10d338:	5a                   	pop    %rdx
  10d339:	44 89 c0             	mov    %r8d,%eax
  10d33c:	5b                   	pop    %rbx
  10d33d:	41 5c                	pop    %r12
  10d33f:	41 5d                	pop    %r13
  10d341:	5d                   	pop    %rbp
  10d342:	c3                   	retq   

000000000010d343 <gettimeofday>:
 * @brief Get current real time.
 *
 * See IEEE 1003.1
 */
int gettimeofday(struct timeval *tv, const void *tz)
{
  10d343:	55                   	push   %rbp
  10d344:	48 89 e5             	mov    %rsp,%rbp
  10d347:	53                   	push   %rbx
  10d348:	48 89 fb             	mov    %rdi,%rbx
  10d34b:	48 83 ec 18          	sub    $0x18,%rsp
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&clock_id, *(uintptr_t *)&ts, K_SYSCALL_CLOCK_GETTIME);
	}
#endif
	compiler_barrier();
	return z_impl_clock_gettime(clock_id, ts);
  10d34f:	bf 01 00 00 00       	mov    $0x1,%edi
  10d354:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi
  10d358:	e8 59 ff ff ff       	callq  10d2b6 <z_impl_clock_gettime>
	 * is unspecified."  "tzp" is the "tz" parameter above. */
	ARG_UNUSED(tz);

	res = clock_gettime(CLOCK_REALTIME, &ts);
	tv->tv_sec = ts.tv_sec;
	tv->tv_usec = ts.tv_nsec / NSEC_PER_USEC;
  10d35d:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
  10d362:	41 89 c0             	mov    %eax,%r8d
	tv->tv_sec = ts.tv_sec;
  10d365:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  10d369:	48 89 03             	mov    %rax,(%rbx)
	tv->tv_usec = ts.tv_nsec / NSEC_PER_USEC;
  10d36c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10d370:	48 99                	cqto   
  10d372:	48 f7 f9             	idiv   %rcx
  10d375:	48 89 43 08          	mov    %rax,0x8(%rbx)

	return res;
}
  10d379:	48 83 c4 18          	add    $0x18,%rsp
  10d37d:	44 89 c0             	mov    %r8d,%eax
  10d380:	5b                   	pop    %rbx
  10d381:	5d                   	pop    %rbp
  10d382:	c3                   	retq   

000000000010d383 <usleep>:
 * @brief Suspend execution for microsecond intervals.
 *
 * See IEEE 1003.1
 */
int usleep(useconds_t useconds)
{
  10d383:	55                   	push   %rbp
  10d384:	48 89 f8             	mov    %rdi,%rax
  10d387:	48 89 e5             	mov    %rsp,%rbp
	if (useconds < USEC_PER_MSEC) {
  10d38a:	48 81 ff e7 03 00 00 	cmp    $0x3e7,%rdi
  10d391:	77 07                	ja     10d39a <usleep+0x17>
	z_impl_k_busy_wait(usec_to_wait);
  10d393:	e8 bd 1b 00 00       	callq  10ef55 <z_impl_k_busy_wait>
}
  10d398:	eb 2c                	jmp    10d3c6 <usleep+0x43>
		k_busy_wait(useconds);
	} else {
		k_msleep(useconds / USEC_PER_MSEC);
  10d39a:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
  10d39f:	31 d2                	xor    %edx,%edx
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
  10d3a1:	bf 00 00 00 00       	mov    $0x0,%edi
  10d3a6:	48 f7 f1             	div    %rcx
			return t / ((uint64_t)from_hz / to_hz);
  10d3a9:	b9 0a 00 00 00       	mov    $0xa,%ecx
  10d3ae:	85 c0                	test   %eax,%eax
  10d3b0:	0f 48 c7             	cmovs  %edi,%eax
  10d3b3:	31 d2                	xor    %edx,%edx
  10d3b5:	48 98                	cltq   
		t += off;
  10d3b7:	48 83 c0 09          	add    $0x9,%rax
			return t / ((uint64_t)from_hz / to_hz);
  10d3bb:	48 f7 f1             	div    %rcx
  10d3be:	48 89 c7             	mov    %rax,%rdi
	return z_impl_k_sleep(timeout);
  10d3c1:	e8 04 17 00 00       	callq  10eaca <z_impl_k_sleep>
	}

	return 0;
}
  10d3c6:	31 c0                	xor    %eax,%eax
  10d3c8:	5d                   	pop    %rbp
  10d3c9:	c3                   	retq   

000000000010d3ca <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
  10d3ca:	55                   	push   %rbp
  10d3cb:	48 89 e5             	mov    %rsp,%rbp
	return z_impl_k_mutex_init(mutex);
  10d3ce:	bf e0 d3 11 00       	mov    $0x11d3e0,%edi
  10d3d3:	e8 1f 0c 00 00       	callq  10dff7 <z_impl_k_mutex_init>
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
  10d3d8:	31 c0                	xor    %eax,%eax
  10d3da:	5d                   	pop    %rbp
	list->head = (sys_dnode_t *)list;
  10d3db:	48 c7 05 4a 2f 01 00 	movq   $0x120330,0x12f4a(%rip)        # 120330 <fs_mnt_list>
  10d3e2:	30 03 12 00 
	list->tail = (sys_dnode_t *)list;
  10d3e6:	48 c7 05 47 2f 01 00 	movq   $0x120330,0x12f47(%rip)        # 120338 <fs_mnt_list+0x8>
  10d3ed:	30 03 12 00 
  10d3f1:	c3                   	retq   

000000000010d3f2 <__IoApicGet>:
  10d3f2:	9c                   	pushfq 
  10d3f3:	fa                   	cli    
  10d3f4:	5a                   	pop    %rdx

	/* lock interrupts to ensure indirect addressing works "atomically" */

	key = irq_lock();

	*((volatile uint32_t *) (IOAPIC_REG + IOAPIC_IND)) = (char)offset;
  10d3f5:	48 8b 05 c4 2f 01 00 	mov    0x12fc4(%rip),%rax        # 1203c0 <z_mmio_ram__ioapic_regs>
  10d3fc:	40 0f be ff          	movsbl %dil,%edi
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10d400:	0f ba e2 09          	bt     $0x9,%edx
  10d404:	89 38                	mov    %edi,(%rax)
	value = *((volatile uint32_t *)(IOAPIC_REG + IOAPIC_DATA));
  10d406:	8b 40 10             	mov    0x10(%rax),%eax
  10d409:	73 01                	jae    10d40c <__IoApicGet+0x1a>
		__asm__ volatile ("sti" ::: "memory");
  10d40b:	fb                   	sti    

	irq_unlock(key);

	return value;
}
  10d40c:	c3                   	retq   

000000000010d40d <__IoApicSet>:
  10d40d:	9c                   	pushfq 
  10d40e:	fa                   	cli    
  10d40f:	5a                   	pop    %rdx

	/* lock interrupts to ensure indirect addressing works "atomically" */

	key = irq_lock();

	*(volatile uint32_t *)(IOAPIC_REG + IOAPIC_IND) = (char)offset;
  10d410:	48 8b 05 a9 2f 01 00 	mov    0x12fa9(%rip),%rax        # 1203c0 <z_mmio_ram__ioapic_regs>
  10d417:	40 0f be ff          	movsbl %dil,%edi
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10d41b:	0f ba e2 09          	bt     $0x9,%edx
  10d41f:	89 38                	mov    %edi,(%rax)
	*((volatile uint32_t *)(IOAPIC_REG + IOAPIC_DATA)) = value;
  10d421:	89 70 10             	mov    %esi,0x10(%rax)
  10d424:	73 01                	jae    10d427 <__IoApicSet+0x1a>
		__asm__ volatile ("sti" ::: "memory");
  10d426:	fb                   	sti    

	irq_unlock(key);
}
  10d427:	c3                   	retq   

000000000010d428 <IoApicRedUpdateLo>:
 */
__pinned_func
static void IoApicRedUpdateLo(unsigned int irq,
				uint32_t value,
				uint32_t mask)
{
  10d428:	55                   	push   %rbp
	int32_t offset = IOAPIC_REDTBL + (irq << 1); /* register offset */
  10d429:	44 8d 44 3f 10       	lea    0x10(%rdi,%rdi,1),%r8d
{
  10d42e:	89 d1                	mov    %edx,%ecx
	return __IoApicGet(offset);
  10d430:	44 89 c7             	mov    %r8d,%edi
{
  10d433:	48 89 e5             	mov    %rsp,%rbp
	return __IoApicGet(offset);
  10d436:	e8 b7 ff ff ff       	callq  10d3f2 <__IoApicGet>
	__IoApicSet(offset, lower32);
  10d43b:	44 89 c7             	mov    %r8d,%edi
	ioApicRedSetLo(irq, (ioApicRedGetLo(irq) & ~mask) | (value & mask));
}
  10d43e:	5d                   	pop    %rbp
	ioApicRedSetLo(irq, (ioApicRedGetLo(irq) & ~mask) | (value & mask));
  10d43f:	31 c6                	xor    %eax,%esi
  10d441:	21 ce                	and    %ecx,%esi
  10d443:	31 c6                	xor    %eax,%esi
	__IoApicSet(offset, lower32);
  10d445:	e9 c3 ff ff ff       	jmpq   10d40d <__IoApicSet>

000000000010d44a <ioapic_init>:
{
  10d44a:	55                   	push   %rbp
{
#ifdef CONFIG_MMU
	/* Pass along flags and add that we want supervisor mode
	 * read-write access.
	 */
	z_phys_map((uint8_t **)virt_addr, phys_addr, size,
  10d44b:	ba 00 10 00 00       	mov    $0x1000,%edx
  10d450:	b9 0a 00 00 00       	mov    $0xa,%ecx
  10d455:	bf c0 03 12 00       	mov    $0x1203c0,%edi
  10d45a:	be 00 00 c0 fe       	mov    $0xfec00000,%esi
  10d45f:	48 89 e5             	mov    %rsp,%rbp
  10d462:	e8 0c 1e 00 00       	callq  10f273 <z_phys_map>
	ioapic_rtes = ((__IoApicGet(IOAPIC_VERS) &
  10d467:	bf 01 00 00 00       	mov    $0x1,%edi
  10d46c:	b9 11 00 00 00       	mov    $0x11,%ecx
  10d471:	e8 7c ff ff ff       	callq  10d3f2 <__IoApicGet>
			IOAPIC_MRE_MASK) >> IOAPIC_MRE_POS) + 1;
  10d476:	c1 e8 10             	shr    $0x10,%eax
  10d479:	0f b6 c0             	movzbl %al,%eax
  10d47c:	8d 50 01             	lea    0x1(%rax),%edx
  10d47f:	44 8d 44 00 13       	lea    0x13(%rax,%rax,1),%r8d
  10d484:	89 15 96 2f 01 00    	mov    %edx,0x12f96(%rip)        # 120420 <ioapic_rtes>
	__IoApicSet(offset, upper32);
  10d48a:	89 cf                	mov    %ecx,%edi
  10d48c:	be 00 00 00 ff       	mov    $0xff000000,%esi
  10d491:	e8 77 ff ff ff       	callq  10d40d <__IoApicSet>
	__IoApicSet(offset, lower32);
  10d496:	8d 79 ff             	lea    -0x1(%rcx),%edi
  10d499:	be 00 08 01 00       	mov    $0x10800,%esi
  10d49e:	83 c1 02             	add    $0x2,%ecx
  10d4a1:	e8 67 ff ff ff       	callq  10d40d <__IoApicSet>
	for (ix = 0; ix < ioapic_rtes; ix++) {
  10d4a6:	41 39 c8             	cmp    %ecx,%r8d
  10d4a9:	75 df                	jne    10d48a <ioapic_init+0x40>
}
  10d4ab:	31 c0                	xor    %eax,%eax
  10d4ad:	5d                   	pop    %rbp
  10d4ae:	c3                   	retq   

000000000010d4af <z_ioapic_num_rtes>:
}
  10d4af:	8b 05 6b 2f 01 00    	mov    0x12f6b(%rip),%eax        # 120420 <ioapic_rtes>
  10d4b5:	c3                   	retq   

000000000010d4b6 <z_ioapic_irq_enable>:
	IoApicRedUpdateLo(irq, 0, IOAPIC_INT_MASK);
  10d4b6:	ba 00 00 01 00       	mov    $0x10000,%edx
  10d4bb:	31 f6                	xor    %esi,%esi
  10d4bd:	e9 66 ff ff ff       	jmpq   10d428 <IoApicRedUpdateLo>

000000000010d4c2 <z_ioapic_irq_set>:
{
  10d4c2:	55                   	push   %rbp
	int32_t offset = IOAPIC_REDTBL + (irq << 1) + 1; /* register offset */
  10d4c3:	44 8d 04 3f          	lea    (%rdi,%rdi,1),%r8d
{
  10d4c7:	89 f1                	mov    %esi,%ecx
	__IoApicSet(offset, upper32);
  10d4c9:	be 00 00 00 ff       	mov    $0xff000000,%esi
	int32_t offset = IOAPIC_REDTBL + (irq << 1) + 1; /* register offset */
  10d4ce:	41 8d 78 11          	lea    0x11(%r8),%edi
{
  10d4d2:	41 89 d1             	mov    %edx,%r9d
  10d4d5:	48 89 e5             	mov    %rsp,%rbp
	__IoApicSet(offset, upper32);
  10d4d8:	e8 30 ff ff ff       	callq  10d40d <__IoApicSet>
		   (vector & IOAPIC_VEC_MASK) | flags;
  10d4dd:	0f b6 f1             	movzbl %cl,%esi
	int32_t offset = IOAPIC_REDTBL + (irq << 1); /* register offset */
  10d4e0:	41 8d 78 10          	lea    0x10(%r8),%edi
}
  10d4e4:	5d                   	pop    %rbp
		   (vector & IOAPIC_VEC_MASK) | flags;
  10d4e5:	44 09 ce             	or     %r9d,%esi
	rteValue = IOAPIC_INT_MASK | IOAPIC_LOGICAL |
  10d4e8:	81 ce 00 08 01 00    	or     $0x10800,%esi
	__IoApicSet(offset, lower32);
  10d4ee:	e9 1a ff ff ff       	jmpq   10d40d <__IoApicSet>

000000000010d4f3 <loapic_init>:
__boot_func
static int loapic_init(const struct device *unused)
{
	ARG_UNUSED(unused);
	return 0;
}
  10d4f3:	31 c0                	xor    %eax,%eax
  10d4f5:	c3                   	retq   

000000000010d4f6 <z_loapic_enable>:
{
  10d4f6:	55                   	push   %rbp
  10d4f7:	b9 0a 00 00 00       	mov    $0xa,%ecx
  10d4fc:	be 00 00 e0 fe       	mov    $0xfee00000,%esi
  10d501:	48 89 e5             	mov    %rsp,%rbp
  10d504:	53                   	push   %rbx
  10d505:	89 fb                	mov    %edi,%ebx
  10d507:	bf c8 03 12 00       	mov    $0x1203c8,%edi
  10d50c:	52                   	push   %rdx
  10d50d:	ba 00 10 00 00       	mov    $0x1000,%edx
  10d512:	e8 5c 1d 00 00       	callq  10f273 <z_phys_map>
	x86_write_xapic(LOAPIC_LDR, 1 << (cpu_number + 24));
  10d517:	8d 4b 18             	lea    0x18(%rbx),%ecx
  10d51a:	b8 01 00 00 00       	mov    $0x1,%eax
#ifdef DEVICE_MMIO_IS_IN_RAM
	base = z_loapic_regs;
#else
	base = CONFIG_LOAPIC_BASE_ADDRESS;
#endif
	sys_write32(val, base + reg);
  10d51f:	48 8b 15 a2 2e 01 00 	mov    0x12ea2(%rip),%rdx        # 1203c8 <z_loapic_regs>
  10d526:	d3 e0                	shl    %cl,%eax
	return ret;
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mm_reg_t addr)
{
	__asm__ volatile("movl %0, %1"
  10d528:	89 82 d0 00 00 00    	mov    %eax,0xd0(%rdx)
	return sys_read32(base + reg);
  10d52e:	48 8b 05 93 2e 01 00 	mov    0x12e93(%rip),%rax        # 1203c8 <z_loapic_regs>

static ALWAYS_INLINE uint32_t sys_read32(mm_reg_t addr)
{
	uint32_t ret;

	__asm__ volatile("movl %1, %0"
  10d535:	8b 80 f0 00 00 00    	mov    0xf0(%rax),%eax
	sys_write32(val, base + reg);
  10d53b:	48 8b 15 86 2e 01 00 	mov    0x12e86(%rip),%rdx        # 1203c8 <z_loapic_regs>
	x86_write_xapic(LOAPIC_SVR,
  10d542:	80 cc 01             	or     $0x1,%ah
	__asm__ volatile("movl %0, %1"
  10d545:	89 82 f0 00 00 00    	mov    %eax,0xf0(%rdx)
	return sys_read32(base + reg);
  10d54b:	48 8b 05 76 2e 01 00 	mov    0x12e76(%rip),%rax        # 1203c8 <z_loapic_regs>
	__asm__ volatile("movl %1, %0"
  10d552:	8b 50 30             	mov    0x30(%rax),%edx
	loApicMaxLvt = (x86_read_loapic(LOAPIC_VER) & LOAPIC_MAXLVT_MASK) >> 16;
  10d555:	c1 ea 10             	shr    $0x10,%edx
	__asm__ volatile("movl %0, %1"
  10d558:	48 8b 35 69 2e 01 00 	mov    0x12e69(%rip),%rsi        # 1203c8 <z_loapic_regs>
  10d55f:	83 c8 ff             	or     $0xffffffff,%eax
  10d562:	0f b6 ca             	movzbl %dl,%ecx
  10d565:	89 86 e0 00 00 00    	mov    %eax,0xe0(%rsi)
  10d56b:	48 8b 35 56 2e 01 00 	mov    0x12e56(%rip),%rsi        # 1203c8 <z_loapic_regs>
  10d572:	31 c0                	xor    %eax,%eax
  10d574:	89 86 80 00 00 00    	mov    %eax,0x80(%rsi)
	sys_write32(val, base + reg);
  10d57a:	48 8b 35 47 2e 01 00 	mov    0x12e47(%rip),%rsi        # 1203c8 <z_loapic_regs>
  10d581:	89 86 e0 03 00 00    	mov    %eax,0x3e0(%rsi)
  10d587:	48 8b 35 3a 2e 01 00 	mov    0x12e3a(%rip),%rsi        # 1203c8 <z_loapic_regs>
  10d58e:	89 86 80 03 00 00    	mov    %eax,0x380(%rsi)
	return sys_read32(base + reg);
  10d594:	48 8b 05 2d 2e 01 00 	mov    0x12e2d(%rip),%rax        # 1203c8 <z_loapic_regs>
	__asm__ volatile("movl %1, %0"
  10d59b:	8b 80 50 03 00 00    	mov    0x350(%rax),%eax
	x86_write_loapic(LOAPIC_LINT0, (x86_read_loapic(LOAPIC_LINT0) &
  10d5a1:	25 ff 58 fe ff       	and    $0xfffe58ff,%eax
	sys_write32(val, base + reg);
  10d5a6:	48 8b 35 1b 2e 01 00 	mov    0x12e1b(%rip),%rsi        # 1203c8 <z_loapic_regs>
  10d5ad:	80 cc 07             	or     $0x7,%ah
	__asm__ volatile("movl %0, %1"
  10d5b0:	89 86 50 03 00 00    	mov    %eax,0x350(%rsi)
	return sys_read32(base + reg);
  10d5b6:	48 8b 05 0b 2e 01 00 	mov    0x12e0b(%rip),%rax        # 1203c8 <z_loapic_regs>
	__asm__ volatile("movl %1, %0"
  10d5bd:	8b 80 60 03 00 00    	mov    0x360(%rax),%eax
	x86_write_loapic(LOAPIC_LINT1, (x86_read_loapic(LOAPIC_LINT1) &
  10d5c3:	25 ff 58 fe ff       	and    $0xfffe58ff,%eax
	sys_write32(val, base + reg);
  10d5c8:	48 8b 35 f9 2d 01 00 	mov    0x12df9(%rip),%rsi        # 1203c8 <z_loapic_regs>
  10d5cf:	80 cc 04             	or     $0x4,%ah
	__asm__ volatile("movl %0, %1"
  10d5d2:	89 86 60 03 00 00    	mov    %eax,0x360(%rsi)
  10d5d8:	48 8b 35 e9 2d 01 00 	mov    0x12de9(%rip),%rsi        # 1203c8 <z_loapic_regs>
  10d5df:	b8 00 00 01 00       	mov    $0x10000,%eax
  10d5e4:	89 86 20 03 00 00    	mov    %eax,0x320(%rsi)
  10d5ea:	48 8b 35 d7 2d 01 00 	mov    0x12dd7(%rip),%rsi        # 1203c8 <z_loapic_regs>
  10d5f1:	89 86 70 03 00 00    	mov    %eax,0x370(%rsi)
	if (loApicMaxLvt >= LOAPIC_LVT_P6) {
  10d5f7:	80 e2 fc             	and    $0xfc,%dl
  10d5fa:	74 0d                	je     10d609 <z_loapic_enable+0x113>
  10d5fc:	48 8b 15 c5 2d 01 00 	mov    0x12dc5(%rip),%rdx        # 1203c8 <z_loapic_regs>
  10d603:	89 82 40 03 00 00    	mov    %eax,0x340(%rdx)
	if (loApicMaxLvt >= LOAPIC_LVT_PENTIUM4) {
  10d609:	83 f9 04             	cmp    $0x4,%ecx
  10d60c:	7e 12                	jle    10d620 <z_loapic_enable+0x12a>
  10d60e:	48 8b 15 b3 2d 01 00 	mov    0x12db3(%rip),%rdx        # 1203c8 <z_loapic_regs>
  10d615:	b8 00 00 01 00       	mov    $0x10000,%eax
  10d61a:	89 82 30 03 00 00    	mov    %eax,0x330(%rdx)
  10d620:	48 8b 15 a1 2d 01 00 	mov    0x12da1(%rip),%rdx        # 1203c8 <z_loapic_regs>
  10d627:	31 c0                	xor    %eax,%eax
  10d629:	89 82 b0 00 00 00    	mov    %eax,0xb0(%rdx)
}
  10d62f:	58                   	pop    %rax
  10d630:	5b                   	pop    %rbx
  10d631:	5d                   	pop    %rbp
  10d632:	c3                   	retq   

000000000010d633 <z_loapic_irq_base>:


__pinned_func
uint32_t z_loapic_irq_base(void)
{
	return z_ioapic_num_rtes();
  10d633:	e9 77 fe ff ff       	jmpq   10d4af <z_ioapic_num_rtes>

000000000010d638 <z_loapic_int_vec_set>:
 */
__boot_func
void z_loapic_int_vec_set(unsigned int irq, /* IRQ number of the interrupt */
				  unsigned int vector /* vector to copy into the LVT */
				  )
{
  10d638:	89 f2                	mov    %esi,%edx
  10d63a:	9c                   	pushfq 
  10d63b:	fa                   	cli    
  10d63c:	59                   	pop    %rcx

	/* update the 'vector' bits in the LVT */

	oldLevel = irq_lock();
	x86_write_loapic(LOAPIC_TIMER + (irq * 0x10),
		     (x86_read_loapic(LOAPIC_TIMER + (irq * 0x10)) &
  10d63d:	83 c7 32             	add    $0x32,%edi
	return sys_read32(base + reg);
  10d640:	48 8b 35 81 2d 01 00 	mov    0x12d81(%rip),%rsi        # 1203c8 <z_loapic_regs>
  10d647:	c1 e7 04             	shl    $0x4,%edi
  10d64a:	89 f8                	mov    %edi,%eax
  10d64c:	48 01 c6             	add    %rax,%rsi
	__asm__ volatile("movl %1, %0"
  10d64f:	8b 36                	mov    (%rsi),%esi
  10d651:	40 30 f6             	xor    %sil,%sil
	sys_write32(val, base + reg);
  10d654:	48 03 05 6d 2d 01 00 	add    0x12d6d(%rip),%rax        # 1203c8 <z_loapic_regs>
	x86_write_loapic(LOAPIC_TIMER + (irq * 0x10),
  10d65b:	09 d6                	or     %edx,%esi
	__asm__ volatile("movl %0, %1"
  10d65d:	89 30                	mov    %esi,(%rax)
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10d65f:	0f ba e1 09          	bt     $0x9,%ecx
  10d663:	73 01                	jae    10d666 <z_loapic_int_vec_set+0x2e>
		__asm__ volatile ("sti" ::: "memory");
  10d665:	fb                   	sti    
		      ~LOAPIC_VECTOR) | vector);
	irq_unlock(oldLevel);
}
  10d666:	c3                   	retq   

000000000010d667 <z_loapic_irq_enable>:
 *
 * @return N/A
 */
__pinned_func
void z_loapic_irq_enable(unsigned int irq)
{
  10d667:	89 f8                	mov    %edi,%eax
  10d669:	9c                   	pushfq 
  10d66a:	fa                   	cli    
  10d66b:	59                   	pop    %rcx
	return sys_read32(base + reg);
  10d66c:	48 8b 15 55 2d 01 00 	mov    0x12d55(%rip),%rdx        # 1203c8 <z_loapic_regs>

	/* clear the mask bit in the LVT */

	oldLevel = irq_lock();
	x86_write_loapic(LOAPIC_TIMER + (irq * 0x10),
		     x86_read_loapic(LOAPIC_TIMER + (irq * 0x10)) &
  10d673:	83 c0 32             	add    $0x32,%eax
  10d676:	c1 e0 04             	shl    $0x4,%eax
  10d679:	48 01 c2             	add    %rax,%rdx
	__asm__ volatile("movl %1, %0"
  10d67c:	8b 12                	mov    (%rdx),%edx
	x86_write_loapic(LOAPIC_TIMER + (irq * 0x10),
  10d67e:	81 e2 ff ff fe ff    	and    $0xfffeffff,%edx
	sys_write32(val, base + reg);
  10d684:	48 03 05 3d 2d 01 00 	add    0x12d3d(%rip),%rax        # 1203c8 <z_loapic_regs>
	__asm__ volatile("movl %0, %1"
  10d68b:	89 10                	mov    %edx,(%rax)
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10d68d:	0f ba e1 09          	bt     $0x9,%ecx
  10d691:	73 01                	jae    10d694 <z_loapic_irq_enable+0x2d>
		__asm__ volatile ("sti" ::: "memory");
  10d693:	fb                   	sti    
		     ~LOAPIC_LVT_MASKED);
	irq_unlock(oldLevel);
}
  10d694:	c3                   	retq   

000000000010d695 <z_irq_controller_irq_config>:
 *
 */
__boot_func
void z_irq_controller_irq_config(unsigned int vector, unsigned int irq,
				 uint32_t flags)
{
  10d695:	55                   	push   %rbp
  10d696:	48 89 e5             	mov    %rsp,%rbp
  10d699:	41 55                	push   %r13
  10d69b:	41 89 fd             	mov    %edi,%r13d
  10d69e:	41 54                	push   %r12
  10d6a0:	41 89 f4             	mov    %esi,%r12d
  10d6a3:	48 83 ec 10          	sub    $0x10,%rsp
  10d6a7:	89 55 ec             	mov    %edx,-0x14(%rbp)
	__ASSERT(irq <= HARDWARE_IRQ_LIMIT, "invalid irq line");

	if (IS_IOAPIC_IRQ(irq)) {
  10d6aa:	e8 84 ff ff ff       	callq  10d633 <z_loapic_irq_base>
  10d6af:	44 39 e0             	cmp    %r12d,%eax
  10d6b2:	76 16                	jbe    10d6ca <z_irq_controller_irq_config+0x35>
		z_ioapic_irq_set(irq, vector, flags);
  10d6b4:	8b 55 ec             	mov    -0x14(%rbp),%edx
  10d6b7:	44 89 ee             	mov    %r13d,%esi
	} else {
		z_loapic_int_vec_set(irq - z_loapic_irq_base(), vector);
	}
}
  10d6ba:	59                   	pop    %rcx
		z_ioapic_irq_set(irq, vector, flags);
  10d6bb:	44 89 e7             	mov    %r12d,%edi
}
  10d6be:	41 58                	pop    %r8
  10d6c0:	41 5c                	pop    %r12
  10d6c2:	41 5d                	pop    %r13
  10d6c4:	5d                   	pop    %rbp
		z_ioapic_irq_set(irq, vector, flags);
  10d6c5:	e9 f8 fd ff ff       	jmpq   10d4c2 <z_ioapic_irq_set>
		z_loapic_int_vec_set(irq - z_loapic_irq_base(), vector);
  10d6ca:	e8 64 ff ff ff       	callq  10d633 <z_loapic_irq_base>
  10d6cf:	44 89 e7             	mov    %r12d,%edi
  10d6d2:	44 89 ee             	mov    %r13d,%esi
  10d6d5:	29 c7                	sub    %eax,%edi
}
  10d6d7:	58                   	pop    %rax
  10d6d8:	5a                   	pop    %rdx
  10d6d9:	41 5c                	pop    %r12
  10d6db:	41 5d                	pop    %r13
  10d6dd:	5d                   	pop    %rbp
		z_loapic_int_vec_set(irq - z_loapic_irq_base(), vector);
  10d6de:	e9 55 ff ff ff       	jmpq   10d638 <z_loapic_int_vec_set>

000000000010d6e3 <arch_irq_enable>:
 *
 * @return N/A
 */
__pinned_func
void arch_irq_enable(unsigned int irq)
{
  10d6e3:	55                   	push   %rbp
  10d6e4:	48 89 e5             	mov    %rsp,%rbp
  10d6e7:	41 54                	push   %r12
  10d6e9:	41 89 fc             	mov    %edi,%r12d
  10d6ec:	51                   	push   %rcx
	if (IS_IOAPIC_IRQ(irq)) {
  10d6ed:	e8 41 ff ff ff       	callq  10d633 <z_loapic_irq_base>
  10d6f2:	44 39 e0             	cmp    %r12d,%eax
  10d6f5:	76 0c                	jbe    10d703 <arch_irq_enable+0x20>
		z_ioapic_irq_enable(irq);
	} else {
		z_loapic_irq_enable(irq - z_loapic_irq_base());
	}
}
  10d6f7:	5a                   	pop    %rdx
		z_ioapic_irq_enable(irq);
  10d6f8:	44 89 e7             	mov    %r12d,%edi
}
  10d6fb:	41 5c                	pop    %r12
  10d6fd:	5d                   	pop    %rbp
		z_ioapic_irq_enable(irq);
  10d6fe:	e9 b3 fd ff ff       	jmpq   10d4b6 <z_ioapic_irq_enable>
		z_loapic_irq_enable(irq - z_loapic_irq_base());
  10d703:	e8 2b ff ff ff       	callq  10d633 <z_loapic_irq_base>
  10d708:	44 89 e7             	mov    %r12d,%edi
  10d70b:	29 c7                	sub    %eax,%edi
}
  10d70d:	58                   	pop    %rax
  10d70e:	41 5c                	pop    %r12
  10d710:	5d                   	pop    %rbp
		z_loapic_irq_enable(irq - z_loapic_irq_base());
  10d711:	e9 51 ff ff ff       	jmpq   10d667 <z_loapic_irq_enable>

000000000010d716 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
  10d716:	55                   	push   %rbp

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
  10d717:	48 c7 05 ae 2c 01 00 	movq   $0x110140,0x12cae(%rip)        # 1203d0 <uart_console_dev>
  10d71e:	40 01 11 00 
{
  10d722:	48 89 e5             	mov    %rsp,%rbp
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
  10d725:	bf 40 01 11 00       	mov    $0x110140,%edi
  10d72a:	e8 88 04 00 00       	callq  10dbb7 <z_device_ready>
  10d72f:	41 89 c0             	mov    %eax,%r8d
  10d732:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
  10d737:	45 84 c0             	test   %r8b,%r8b
  10d73a:	74 16                	je     10d752 <uart_console_init+0x3c>
	__stdout_hook_install(console_out);
  10d73c:	bf 54 d7 10 00       	mov    $0x10d754,%edi
  10d741:	e8 e8 f4 ff ff       	callq  10cc2e <__stdout_hook_install>
	__printk_hook_install(console_out);
  10d746:	bf 54 d7 10 00       	mov    $0x10d754,%edi
  10d74b:	e8 b1 df ff ff       	callq  10b701 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
  10d750:	31 c0                	xor    %eax,%eax
}
  10d752:	5d                   	pop    %rbp
  10d753:	c3                   	retq   

000000000010d754 <console_out>:
{
  10d754:	55                   	push   %rbp
  10d755:	48 89 e5             	mov    %rsp,%rbp
  10d758:	41 54                	push   %r12
  10d75a:	41 89 fc             	mov    %edi,%r12d
  10d75d:	51                   	push   %rcx
	if ('\n' == c) {
  10d75e:	83 ff 0a             	cmp    $0xa,%edi
  10d761:	75 13                	jne    10d776 <console_out+0x22>
		uart_poll_out(uart_console_dev, '\r');
  10d763:	48 8b 3d 66 2c 01 00 	mov    0x12c66(%rip),%rdi        # 1203d0 <uart_console_dev>
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
  10d76a:	48 8b 47 10          	mov    0x10(%rdi),%rax
  10d76e:	be 0d 00 00 00       	mov    $0xd,%esi
  10d773:	ff 50 08             	callq  *0x8(%rax)
	uart_poll_out(uart_console_dev, c);
  10d776:	48 8b 3d 53 2c 01 00 	mov    0x12c53(%rip),%rdi        # 1203d0 <uart_console_dev>
  10d77d:	48 8b 47 10          	mov    0x10(%rdi),%rax
  10d781:	41 0f b6 f4          	movzbl %r12b,%esi
  10d785:	ff 50 08             	callq  *0x8(%rax)
}
  10d788:	44 89 e0             	mov    %r12d,%eax
  10d78b:	5a                   	pop    %rdx
  10d78c:	41 5c                	pop    %r12
  10d78e:	5d                   	pop    %rbp
  10d78f:	c3                   	retq   

000000000010d790 <uart_ns16550_configure>:
	}
}

static int uart_ns16550_configure(const struct device *dev,
				  const struct uart_config *cfg)
{
  10d790:	55                   	push   %rbp
  10d791:	49 89 fb             	mov    %rdi,%r11
  10d794:	48 89 e5             	mov    %rsp,%rbp
  10d797:	41 55                	push   %r13
  10d799:	41 54                	push   %r12
  10d79b:	53                   	push   %rbx
	struct uart_ns16550_dev_data * const dev_data = DEV_DATA(dev);
  10d79c:	4c 8b 4f 20          	mov    0x20(%rdi),%r9
  10d7a0:	9c                   	pushfq 
  10d7a1:	fa                   	cli    
  10d7a2:	41 58                	pop    %r8
		OUTWORD(PCP(dev), pcp & ~PCP_UPDATE);
		OUTWORD(PCP(dev), pcp | PCP_UPDATE);
	}
#endif

	set_baud_rate(dev, cfg->baudrate);
  10d7a4:	8b 3e                	mov    (%rsi),%edi
	const struct uart_ns16550_device_config * const dev_cfg = DEV_CFG(dev);
  10d7a6:	4d 8b 53 08          	mov    0x8(%r11),%r10
	if ((baud_rate != 0U) && (dev_cfg->sys_clk_freq != 0U)) {
  10d7aa:	85 ff                	test   %edi,%edi
  10d7ac:	74 41                	je     10d7ef <uart_ns16550_configure+0x5f>
  10d7ae:	41 8b 42 04          	mov    0x4(%r10),%eax
  10d7b2:	85 c0                	test   %eax,%eax
  10d7b4:	74 39                	je     10d7ef <uart_ns16550_configure+0x5f>
		divisor = ((dev_cfg->sys_clk_freq + (baud_rate << 3))
  10d7b6:	8d 04 f8             	lea    (%rax,%rdi,8),%eax
					/ baud_rate) >> 4;
  10d7b9:	31 d2                	xor    %edx,%edx
	return DEV_CFG(dev)->port;
  10d7bb:	41 8b 1a             	mov    (%r10),%ebx
					/ baud_rate) >> 4;
  10d7be:	f7 f7                	div    %edi
		lcr_cache = INBYTE(LCR(dev));
  10d7c0:	44 8d 63 03          	lea    0x3(%rbx),%r12d
	__asm__ volatile("inb %w1, %b0" : "=a"(ret) : "Nd"(port));
  10d7c4:	44 89 e2             	mov    %r12d,%edx
					/ baud_rate) >> 4;
  10d7c7:	89 c1                	mov    %eax,%ecx
  10d7c9:	ec                   	in     (%dx),%al
  10d7ca:	41 89 c5             	mov    %eax,%r13d
		OUTBYTE(LCR(dev), LCR_DLAB | lcr_cache);
  10d7cd:	83 c8 80             	or     $0xffffff80,%eax
	__asm__ volatile("outb %b0, %w1" :: "a"(data), "Nd"(port));
  10d7d0:	ee                   	out    %al,(%dx)
		divisor = ((dev_cfg->sys_clk_freq + (baud_rate << 3))
  10d7d1:	89 c8                	mov    %ecx,%eax
  10d7d3:	89 da                	mov    %ebx,%edx
  10d7d5:	c1 e8 04             	shr    $0x4,%eax
  10d7d8:	ee                   	out    %al,(%dx)
		OUTBYTE(BRDH(dev), (unsigned char)((divisor >> 8) & 0xff));
  10d7d9:	89 c8                	mov    %ecx,%eax
  10d7db:	8d 53 01             	lea    0x1(%rbx),%edx
  10d7de:	c1 e8 0c             	shr    $0xc,%eax
  10d7e1:	ee                   	out    %al,(%dx)
  10d7e2:	44 89 e8             	mov    %r13d,%eax
  10d7e5:	44 89 e2             	mov    %r12d,%edx
  10d7e8:	ee                   	out    %al,(%dx)
		dev_data->uart_config.baudrate = baud_rate;
  10d7e9:	49 8b 43 20          	mov    0x20(%r11),%rax
  10d7ed:	89 38                	mov    %edi,(%rax)

	/* Local structure to hold temporary values to pass to OUTBYTE() */
	struct uart_config uart_cfg;

	switch (cfg->data_bits) {
  10d7ef:	8a 56 06             	mov    0x6(%rsi),%dl
		break;
	case UART_CFG_DATA_BITS_8:
		uart_cfg.data_bits = LCR_CS8;
		break;
	default:
		ret = -ENOTSUP;
  10d7f2:	b8 7a ff ff ff       	mov    $0xffffff7a,%eax
  10d7f7:	80 fa 03             	cmp    $0x3,%dl
  10d7fa:	77 68                	ja     10d864 <uart_ns16550_configure+0xd4>
		goto out;
	}

	switch (cfg->stop_bits) {
  10d7fc:	8a 4e 05             	mov    0x5(%rsi),%cl
  10d7ff:	80 f9 01             	cmp    $0x1,%cl
  10d802:	74 0a                	je     10d80e <uart_ns16550_configure+0x7e>
  10d804:	41 b3 04             	mov    $0x4,%r11b
  10d807:	80 f9 03             	cmp    $0x3,%cl
  10d80a:	74 05                	je     10d811 <uart_ns16550_configure+0x81>
  10d80c:	eb 56                	jmp    10d864 <uart_ns16550_configure+0xd4>
	case UART_CFG_STOP_BITS_1:
		uart_cfg.stop_bits = LCR_1_STB;
  10d80e:	45 31 db             	xor    %r11d,%r11d
	default:
		ret = -ENOTSUP;
		goto out;
	}

	switch (cfg->parity) {
  10d811:	40 8a 7e 04          	mov    0x4(%rsi),%dil
  10d815:	40 84 ff             	test   %dil,%dil
  10d818:	74 0e                	je     10d828 <uart_ns16550_configure+0x98>
  10d81a:	b8 7a ff ff ff       	mov    $0xffffff7a,%eax
  10d81f:	40 80 ff 02          	cmp    $0x2,%dil
  10d823:	75 3f                	jne    10d864 <uart_ns16550_configure+0xd4>
  10d825:	40 b7 10             	mov    $0x10,%dil
	default:
		ret = -ENOTSUP;
		goto out;
	}

	dev_data->uart_config = *cfg;
  10d828:	48 8b 06             	mov    (%rsi),%rax

	/* data bits, stop bits, parity, clear DLAB */
	OUTBYTE(LCR(dev),
  10d82b:	44 09 da             	or     %r11d,%edx
	return DEV_CFG(dev)->port;
  10d82e:	41 8b 0a             	mov    (%r10),%ecx
	dev_data->uart_config = *cfg;
  10d831:	49 89 01             	mov    %rax,(%r9)
	OUTBYTE(LCR(dev),
  10d834:	89 d0                	mov    %edx,%eax
  10d836:	8d 51 03             	lea    0x3(%rcx),%edx
  10d839:	09 f8                	or     %edi,%eax
  10d83b:	ee                   	out    %al,(%dx)
  10d83c:	b0 0b                	mov    $0xb,%al
	if (cfg->flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS) {
		mdc |= MCR_AFCE;
	}
#endif

	OUTBYTE(MDC(dev), mdc);
  10d83e:	8d 51 04             	lea    0x4(%rcx),%edx
  10d841:	ee                   	out    %al,(%dx)
  10d842:	b0 87                	mov    $0x87,%al
	/*
	 * Program FIFO: enabled, mode 0 (set for compatibility with quark),
	 * generate the interrupt at 8th byte
	 * Clear TX and RX FIFO
	 */
	OUTBYTE(FCR(dev),
  10d844:	8d 51 02             	lea    0x2(%rcx),%edx
  10d847:	ee                   	out    %al,(%dx)
	__asm__ volatile("inb %w1, %b0" : "=a"(ret) : "Nd"(port));
  10d848:	ec                   	in     (%dx),%al
#ifdef CONFIG_UART_NS16750
		| FCR_FIFO_64
#endif
		);

	if ((INBYTE(IIR(dev)) & IIR_FE) == IIR_FE) {
  10d849:	83 e0 c0             	and    $0xffffffc0,%eax
		dev_data->fifo_size = 64;
#else
		dev_data->fifo_size = 16;
#endif
	} else {
		dev_data->fifo_size = 1;
  10d84c:	b2 01                	mov    $0x1,%dl
  10d84e:	3c c0                	cmp    $0xc0,%al
  10d850:	b0 10                	mov    $0x10,%al
  10d852:	0f 45 c2             	cmovne %edx,%eax
  10d855:	89 ca                	mov    %ecx,%edx
  10d857:	41 88 41 08          	mov    %al,0x8(%r9)
  10d85b:	ec                   	in     (%dx),%al
	__asm__ volatile("outb %b0, %w1" :: "a"(data), "Nd"(port));
  10d85c:	31 c0                	xor    %eax,%eax

	/* clear the port */
	INBYTE(RDR(dev));

	/* disable interrupts  */
	OUTBYTE(IER(dev), 0x00);
  10d85e:	8d 51 01             	lea    0x1(%rcx),%edx
  10d861:	ee                   	out    %al,(%dx)
	int ret = 0;
  10d862:	31 c0                	xor    %eax,%eax
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10d864:	41 0f ba e0 09       	bt     $0x9,%r8d
  10d869:	73 01                	jae    10d86c <uart_ns16550_configure+0xdc>
		__asm__ volatile ("sti" ::: "memory");
  10d86b:	fb                   	sti    

out:
	k_spin_unlock(&dev_data->lock, key);
	return ret;
};
  10d86c:	5b                   	pop    %rbx
  10d86d:	41 5c                	pop    %r12
  10d86f:	41 5d                	pop    %r13
  10d871:	5d                   	pop    %rbp
  10d872:	c3                   	retq   

000000000010d873 <uart_ns16550_config_get>:

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int uart_ns16550_config_get(const struct device *dev,
				   struct uart_config *cfg)
{
	struct uart_ns16550_dev_data *data = DEV_DATA(dev);
  10d873:	48 8b 47 20          	mov    0x20(%rdi),%rax

	cfg->baudrate = data->uart_config.baudrate;
  10d877:	8b 10                	mov    (%rax),%edx
  10d879:	89 16                	mov    %edx,(%rsi)
	cfg->parity = data->uart_config.parity;
  10d87b:	8a 50 04             	mov    0x4(%rax),%dl
  10d87e:	88 56 04             	mov    %dl,0x4(%rsi)
	cfg->stop_bits = data->uart_config.stop_bits;
  10d881:	8a 50 05             	mov    0x5(%rax),%dl
  10d884:	88 56 05             	mov    %dl,0x5(%rsi)
	cfg->data_bits = data->uart_config.data_bits;
  10d887:	8a 50 06             	mov    0x6(%rax),%dl
  10d88a:	88 56 06             	mov    %dl,0x6(%rsi)
	cfg->flow_ctrl = data->uart_config.flow_ctrl;
  10d88d:	8a 40 07             	mov    0x7(%rax),%al
  10d890:	88 46 07             	mov    %al,0x7(%rsi)

	return 0;
}
  10d893:	31 c0                	xor    %eax,%eax
  10d895:	c3                   	retq   

000000000010d896 <uart_ns16550_init>:
 */
static int uart_ns16550_init(const struct device *dev)
{
	int ret;

	ret = uart_ns16550_configure(dev, &DEV_DATA(dev)->uart_config);
  10d896:	48 8b 77 20          	mov    0x20(%rdi),%rsi
  10d89a:	e9 f1 fe ff ff       	jmpq   10d790 <uart_ns16550_configure>

000000000010d89f <uart_ns16550_poll_in>:
  10d89f:	9c                   	pushfq 
  10d8a0:	fa                   	cli    
  10d8a1:	41 59                	pop    %r9
	return DEV_CFG(dev)->port;
  10d8a3:	48 8b 47 08          	mov    0x8(%rdi),%rax
  10d8a7:	8b 08                	mov    (%rax),%ecx
static int uart_ns16550_poll_in(const struct device *dev, unsigned char *c)
{
	int ret = -1;
	k_spinlock_key_t key = k_spin_lock(&DEV_DATA(dev)->lock);

	if ((INBYTE(LSR(dev)) & LSR_RXRDY) != 0) {
  10d8a9:	8d 51 05             	lea    0x5(%rcx),%edx
	__asm__ volatile("inb %w1, %b0" : "=a"(ret) : "Nd"(port));
  10d8ac:	ec                   	in     (%dx),%al
	int ret = -1;
  10d8ad:	41 83 c8 ff          	or     $0xffffffff,%r8d
	if ((INBYTE(LSR(dev)) & LSR_RXRDY) != 0) {
  10d8b1:	a8 01                	test   $0x1,%al
  10d8b3:	74 08                	je     10d8bd <uart_ns16550_poll_in+0x1e>
  10d8b5:	89 ca                	mov    %ecx,%edx
  10d8b7:	ec                   	in     (%dx),%al
		/* got a character */
		*c = INBYTE(RDR(dev));
  10d8b8:	88 06                	mov    %al,(%rsi)
		ret = 0;
  10d8ba:	45 31 c0             	xor    %r8d,%r8d
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10d8bd:	41 0f ba e1 09       	bt     $0x9,%r9d
  10d8c2:	73 01                	jae    10d8c5 <uart_ns16550_poll_in+0x26>
		__asm__ volatile ("sti" ::: "memory");
  10d8c4:	fb                   	sti    
	}

	k_spin_unlock(&DEV_DATA(dev)->lock, key);

	return ret;
}
  10d8c5:	44 89 c0             	mov    %r8d,%eax
  10d8c8:	c3                   	retq   

000000000010d8c9 <uart_ns16550_poll_out>:
  10d8c9:	9c                   	pushfq 
  10d8ca:	fa                   	cli    
  10d8cb:	41 58                	pop    %r8
	return DEV_CFG(dev)->port;
  10d8cd:	48 8b 47 08          	mov    0x8(%rdi),%rax
  10d8d1:	8b 08                	mov    (%rax),%ecx
static void uart_ns16550_poll_out(const struct device *dev,
					   unsigned char c)
{
	k_spinlock_key_t key = k_spin_lock(&DEV_DATA(dev)->lock);

	while ((INBYTE(LSR(dev)) & LSR_THRE) == 0) {
  10d8d3:	8d 51 05             	lea    0x5(%rcx),%edx
	__asm__ volatile("inb %w1, %b0" : "=a"(ret) : "Nd"(port));
  10d8d6:	ec                   	in     (%dx),%al
  10d8d7:	a8 20                	test   $0x20,%al
  10d8d9:	74 fb                	je     10d8d6 <uart_ns16550_poll_out+0xd>
	__asm__ volatile("outb %b0, %w1" :: "a"(data), "Nd"(port));
  10d8db:	89 f0                	mov    %esi,%eax
  10d8dd:	89 ca                	mov    %ecx,%edx
  10d8df:	ee                   	out    %al,(%dx)
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10d8e0:	41 0f ba e0 09       	bt     $0x9,%r8d
  10d8e5:	73 01                	jae    10d8e8 <uart_ns16550_poll_out+0x1f>
		__asm__ volatile ("sti" ::: "memory");
  10d8e7:	fb                   	sti    
	}

	OUTBYTE(THR(dev), c);

	k_spin_unlock(&DEV_DATA(dev)->lock, key);
}
  10d8e8:	c3                   	retq   

000000000010d8e9 <uart_ns16550_err_check>:
  10d8e9:	9c                   	pushfq 
  10d8ea:	fa                   	cli    
  10d8eb:	59                   	pop    %rcx
	return DEV_CFG(dev)->port;
  10d8ec:	48 8b 47 08          	mov    0x8(%rdi),%rax
 * UART_BREAK if an error was detected, 0 otherwise.
 */
static int uart_ns16550_err_check(const struct device *dev)
{
	k_spinlock_key_t key = k_spin_lock(&DEV_DATA(dev)->lock);
	int check = (INBYTE(LSR(dev)) & LSR_EOB_MASK);
  10d8f0:	8b 10                	mov    (%rax),%edx
  10d8f2:	83 c2 05             	add    $0x5,%edx
	__asm__ volatile("inb %w1, %b0" : "=a"(ret) : "Nd"(port));
  10d8f5:	ec                   	in     (%dx),%al
  10d8f6:	83 e0 1e             	and    $0x1e,%eax
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10d8f9:	0f ba e1 09          	bt     $0x9,%ecx
  10d8fd:	73 01                	jae    10d900 <uart_ns16550_err_check+0x17>
		__asm__ volatile ("sti" ::: "memory");
  10d8ff:	fb                   	sti    

	k_spin_unlock(&DEV_DATA(dev)->lock, key);

	return check >> 1;
  10d900:	d1 f8                	sar    %eax
}
  10d902:	c3                   	retq   

000000000010d903 <hpet_counter_get>:
{
	uint32_t high;
	uint32_t low;

	do {
		high = sys_read32(MAIN_COUNTER_HIGH_REG);
  10d903:	48 8b 05 d6 2a 01 00 	mov    0x12ad6(%rip),%rax        # 1203e0 <z_mmio_ram__hpet_regs>
	__asm__ volatile("movl %1, %0"
  10d90a:	8b 88 f4 00 00 00    	mov    0xf4(%rax),%ecx
		low = sys_read32(MAIN_COUNTER_LOW_REG);
  10d910:	48 8b 05 c9 2a 01 00 	mov    0x12ac9(%rip),%rax        # 1203e0 <z_mmio_ram__hpet_regs>
  10d917:	8b 90 f0 00 00 00    	mov    0xf0(%rax),%edx
	} while (high != sys_read32(MAIN_COUNTER_HIGH_REG));
  10d91d:	48 8b 05 bc 2a 01 00 	mov    0x12abc(%rip),%rax        # 1203e0 <z_mmio_ram__hpet_regs>
  10d924:	8b 80 f4 00 00 00    	mov    0xf4(%rax),%eax
  10d92a:	39 c8                	cmp    %ecx,%eax
  10d92c:	75 d5                	jne    10d903 <hpet_counter_get>

	return ((uint64_t)high << 32) | low;
  10d92e:	48 c1 e0 20          	shl    $0x20,%rax
  10d932:	89 d2                	mov    %edx,%edx
  10d934:	48 09 d0             	or     %rdx,%rax
}
  10d937:	c3                   	retq   

000000000010d938 <hpet_isr>:

#define HPET_MAX_TICKS ((int32_t)0x7fffffff)

__isr
static void hpet_isr(const void *arg)
{
  10d938:	55                   	push   %rbp
  10d939:	48 89 e5             	mov    %rsp,%rbp
  10d93c:	9c                   	pushfq 
  10d93d:	fa                   	cli    
  10d93e:	5f                   	pop    %rdi
	ARG_UNUSED(arg);

	k_spinlock_key_t key = k_spin_lock(&lock);

	uint64_t now = hpet_counter_get();
  10d93f:	e8 bf ff ff ff       	callq  10d903 <hpet_counter_get>

		if (last_count && diff < 0) {
			now = last_count;
		}
	}
	uint32_t dticks = (uint32_t)((now - last_count) / cyc_per_tick);
  10d944:	48 8b 35 8d 2a 01 00 	mov    0x12a8d(%rip),%rsi        # 1203d8 <last_count>
  10d94b:	8b 0d d3 2a 01 00    	mov    0x12ad3(%rip),%ecx        # 120424 <cyc_per_tick>
  10d951:	31 d2                	xor    %edx,%edx
  10d953:	48 29 f0             	sub    %rsi,%rax
  10d956:	48 f7 f1             	div    %rcx

	last_count += (uint64_t)dticks * cyc_per_tick;
  10d959:	89 c2                	mov    %eax,%edx
  10d95b:	48 0f af d1          	imul   %rcx,%rdx
  10d95f:	48 01 f2             	add    %rsi,%rdx
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10d962:	0f ba e7 09          	bt     $0x9,%edi
  10d966:	48 89 15 6b 2a 01 00 	mov    %rdx,0x12a6b(%rip)        # 1203d8 <last_count>
  10d96d:	73 01                	jae    10d970 <hpet_isr+0x38>
		__asm__ volatile ("sti" ::: "memory");
  10d96f:	fb                   	sti    
		}
		hpet_timer_comparator_set(next);
	}

	k_spin_unlock(&lock, key);
	sys_clock_announce(dticks);
  10d970:	89 c7                	mov    %eax,%edi
}
  10d972:	5d                   	pop    %rbp
	sys_clock_announce(dticks);
  10d973:	e9 f5 14 00 00       	jmpq   10ee6d <sys_clock_announce>

000000000010d978 <sys_clock_driver_init>:
	hpet_gconf_set(reg);
}

__boot_func
static int sys_clock_driver_init(const struct device *dev)
{
  10d978:	55                   	push   %rbp
  10d979:	b9 0a 00 00 00       	mov    $0xa,%ecx
  10d97e:	ba 00 04 00 00       	mov    $0x400,%edx
  10d983:	be 00 00 d0 fe       	mov    $0xfed00000,%esi
  10d988:	bf e0 03 12 00       	mov    $0x1203e0,%edi
  10d98d:	48 89 e5             	mov    %rsp,%rbp
  10d990:	e8 de 18 00 00       	callq  10f273 <z_phys_map>
	ARG_UNUSED(z_clock_hw_cycles_per_sec);

	DEVICE_MMIO_TOPLEVEL_MAP(hpet_regs, K_MEM_CACHE_NONE);

#if DT_INST_IRQ_HAS_CELL(0, sense)
	IRQ_CONNECT(DT_INST_IRQN(0),
  10d995:	45 31 c0             	xor    %r8d,%r8d
  10d998:	31 c9                	xor    %ecx,%ecx
  10d99a:	ba 38 d9 10 00       	mov    $0x10d938,%edx
  10d99f:	be 04 00 00 00       	mov    $0x4,%esi
  10d9a4:	bf 02 00 00 00       	mov    $0x2,%edi
  10d9a9:	e8 23 f1 ff ff       	callq  10cad1 <arch_irq_connect_dynamic>
	return sys_read32(TIMER0_CONF_REG);
  10d9ae:	48 8b 05 2b 2a 01 00 	mov    0x12a2b(%rip),%rax        # 1203e0 <z_mmio_ram__hpet_regs>
	__asm__ volatile("movl %1, %0"
  10d9b5:	8b 80 00 01 00 00    	mov    0x100(%rax),%eax
	val |= TIMER_CONF_INT_ENABLE;
  10d9bb:	25 f7 80 ff ff       	and    $0xffff80f7,%eax
	sys_write32(val, TIMER0_CONF_REG);
  10d9c0:	48 8b 15 19 2a 01 00 	mov    0x12a19(%rip),%rdx        # 1203e0 <z_mmio_ram__hpet_regs>
	val |= TIMER_CONF_INT_ENABLE;
  10d9c7:	0d 04 04 00 00       	or     $0x404,%eax
	__asm__ volatile("movl %0, %1"
  10d9cc:	89 82 00 01 00 00    	mov    %eax,0x100(%rdx)
	IRQ_CONNECT(DT_INST_IRQN(0),
		    DT_INST_IRQ(0, priority),
		    hpet_isr, 0, 0);
#endif
	config_timer0(DT_INST_IRQN(0));
	irq_enable(DT_INST_IRQN(0));
  10d9d2:	bf 02 00 00 00       	mov    $0x2,%edi
  10d9d7:	e8 07 fd ff ff       	callq  10d6e3 <arch_irq_enable>
	return sys_read32(CLK_PERIOD_REG);
  10d9dc:	48 8b 05 fd 29 01 00 	mov    0x129fd(%rip),%rax        # 1203e0 <z_mmio_ram__hpet_regs>
	__asm__ volatile("movl %1, %0"
  10d9e3:	8b 48 04             	mov    0x4(%rax),%ecx

#ifdef CONFIG_TIMER_READS_ITS_FREQUENCY_AT_RUNTIME
	hz = (uint32_t)(HPET_COUNTER_CLK_PERIOD / hpet_counter_clk_period_get());
  10d9e6:	48 b8 00 80 c6 a4 7e 	movabs $0x38d7ea4c68000,%rax
  10d9ed:	8d 03 00 
  10d9f0:	89 c9                	mov    %ecx,%ecx
  10d9f2:	31 d2                	xor    %edx,%edx
  10d9f4:	48 f7 f1             	div    %rcx
	z_clock_hw_cycles_per_sec = hz;
	cyc_per_tick = hz / CONFIG_SYS_CLOCK_TICKS_PER_SEC;
  10d9f7:	b9 64 00 00 00       	mov    $0x64,%ecx
  10d9fc:	31 d2                	xor    %edx,%edx
	z_clock_hw_cycles_per_sec = hz;
  10d9fe:	89 05 00 aa 03 00    	mov    %eax,0x3aa00(%rip)        # 148404 <z_clock_hw_cycles_per_sec>
	cyc_per_tick = hz / CONFIG_SYS_CLOCK_TICKS_PER_SEC;
  10da04:	f7 f1                	div    %ecx
  10da06:	89 05 18 2a 01 00    	mov    %eax,0x12a18(%rip)        # 120424 <cyc_per_tick>
	return sys_read32(GCONF_REG);
  10da0c:	48 8b 05 cd 29 01 00 	mov    0x129cd(%rip),%rax        # 1203e0 <z_mmio_ram__hpet_regs>
  10da13:	8b 40 10             	mov    0x10(%rax),%eax
	sys_write32(val, GCONF_REG);
  10da16:	48 8b 15 c3 29 01 00 	mov    0x129c3(%rip),%rdx        # 1203e0 <z_mmio_ram__hpet_regs>
	 * interrupts into the same IRQ.  But that means we're then
	 * forced to use IRQ2 contra the way the kconfig IRQ selection
	 * is supposed to work.  Should fix this.
	 */
	reg = hpet_gconf_get();
	reg |= GCONF_LR | GCONF_ENABLE;
  10da1d:	83 c8 03             	or     $0x3,%eax
	__asm__ volatile("movl %0, %1"
  10da20:	89 42 10             	mov    %eax,0x10(%rdx)
	hpet_gconf_set(reg);

	last_count = hpet_counter_get();
  10da23:	e8 db fe ff ff       	callq  10d903 <hpet_counter_get>
	if (cyc_per_tick >= HPET_CMP_MIN_DELAY) {
  10da28:	8b 15 f6 29 01 00    	mov    0x129f6(%rip),%edx        # 120424 <cyc_per_tick>
  10da2e:	48 8b 0d ab 29 01 00 	mov    0x129ab(%rip),%rcx        # 1203e0 <z_mmio_ram__hpet_regs>
	last_count = hpet_counter_get();
  10da35:	48 89 05 9c 29 01 00 	mov    %rax,0x1299c(%rip)        # 1203d8 <last_count>
	if (cyc_per_tick >= HPET_CMP_MIN_DELAY) {
  10da3c:	81 fa e7 03 00 00    	cmp    $0x3e7,%edx
  10da42:	76 05                	jbe    10da49 <sys_clock_driver_init+0xd1>
		hpet_timer_comparator_set(last_count + cyc_per_tick);
  10da44:	48 01 d0             	add    %rdx,%rax
	__asm__ volatile("movq %0, %1"
  10da47:	eb 06                	jmp    10da4f <sys_clock_driver_init+0xd7>
	} else {
		hpet_timer_comparator_set(last_count + HPET_CMP_MIN_DELAY);
  10da49:	48 05 e8 03 00 00    	add    $0x3e8,%rax
  10da4f:	48 89 81 08 01 00 00 	mov    %rax,0x108(%rcx)
	}

	return 0;
}
  10da56:	31 c0                	xor    %eax,%eax
  10da58:	5d                   	pop    %rbp
  10da59:	c3                   	retq   

000000000010da5a <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER && idle) {
  10da5a:	83 ff ff             	cmp    $0xffffffff,%edi
  10da5d:	75 27                	jne    10da86 <sys_clock_set_timeout+0x2c>
  10da5f:	40 84 f6             	test   %sil,%sil
  10da62:	74 18                	je     10da7c <sys_clock_set_timeout+0x22>
	return sys_read32(GCONF_REG);
  10da64:	48 8b 05 75 29 01 00 	mov    0x12975(%rip),%rax        # 1203e0 <z_mmio_ram__hpet_regs>
	__asm__ volatile("movl %1, %0"
  10da6b:	8b 40 10             	mov    0x10(%rax),%eax
	sys_write32(val, GCONF_REG);
  10da6e:	48 8b 15 6b 29 01 00 	mov    0x1296b(%rip),%rdx        # 1203e0 <z_mmio_ram__hpet_regs>
		reg &= ~GCONF_ENABLE;
  10da75:	83 e0 fe             	and    $0xfffffffe,%eax
	__asm__ volatile("movl %0, %1"
  10da78:	89 42 10             	mov    %eax,0x10(%rdx)
  10da7b:	c3                   	retq   
	ticks = ticks == K_TICKS_FOREVER ? HPET_MAX_TICKS : ticks;
  10da7c:	83 ff ff             	cmp    $0xffffffff,%edi
  10da7f:	75 05                	jne    10da86 <sys_clock_set_timeout+0x2c>
  10da81:	bf ff ff ff 7f       	mov    $0x7fffffff,%edi
{
  10da86:	55                   	push   %rbp
	ticks = CLAMP(ticks - 1, 0, HPET_MAX_TICKS);
  10da87:	8d 77 ff             	lea    -0x1(%rdi),%esi
{
  10da8a:	48 89 e5             	mov    %rsp,%rbp
	ticks = CLAMP(ticks - 1, 0, HPET_MAX_TICKS);
  10da8d:	85 f6                	test   %esi,%esi
  10da8f:	7e 10                	jle    10daa1 <sys_clock_set_timeout+0x47>
  10da91:	81 ff 00 00 00 80    	cmp    $0x80000000,%edi
  10da97:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
  10da9c:	0f 44 f0             	cmove  %eax,%esi
  10da9f:	eb 02                	jmp    10daa3 <sys_clock_set_timeout+0x49>
  10daa1:	31 f6                	xor    %esi,%esi
	__asm__ volatile ("pushfq; cli; popq %0" : "=g" (key) : : "memory");
  10daa3:	9c                   	pushfq 
  10daa4:	fa                   	cli    
  10daa5:	41 58                	pop    %r8
	uint64_t now = hpet_counter_get(), cyc, adj;
  10daa7:	e8 57 fe ff ff       	callq  10d903 <hpet_counter_get>
	uint64_t max_cyc = (uint64_t)HPET_MAX_TICKS * cyc_per_tick;
  10daac:	8b 0d 72 29 01 00    	mov    0x12972(%rip),%ecx        # 120424 <cyc_per_tick>
	adj = (now - last_count) + (cyc_per_tick - 1);
  10dab2:	48 8b 3d 1f 29 01 00 	mov    0x1291f(%rip),%rdi        # 1203d8 <last_count>
	cyc = (uint64_t)ticks * cyc_per_tick;
  10dab9:	48 63 f6             	movslq %esi,%rsi
	uint64_t now = hpet_counter_get(), cyc, adj;
  10dabc:	49 89 c1             	mov    %rax,%r9
	uint64_t max_cyc = (uint64_t)HPET_MAX_TICKS * cyc_per_tick;
  10dabf:	48 89 ca             	mov    %rcx,%rdx
  10dac2:	48 69 c1 ff ff ff 7f 	imul   $0x7fffffff,%rcx,%rax
	adj = (now - last_count) + (cyc_per_tick - 1);
  10dac9:	ff ca                	dec    %edx
	cyc = (uint64_t)ticks * cyc_per_tick;
  10dacb:	48 0f af f1          	imul   %rcx,%rsi
	adj = (now - last_count) + (cyc_per_tick - 1);
  10dacf:	48 29 fa             	sub    %rdi,%rdx
  10dad2:	4c 01 ca             	add    %r9,%rdx
	if (cyc <= max_cyc - adj) {
  10dad5:	49 89 c2             	mov    %rax,%r10
  10dad8:	49 29 d2             	sub    %rdx,%r10
  10dadb:	49 39 f2             	cmp    %rsi,%r10
  10dade:	72 04                	jb     10dae4 <sys_clock_set_timeout+0x8a>
		cyc += adj;
  10dae0:	48 8d 04 16          	lea    (%rsi,%rdx,1),%rax
	cyc = (cyc / cyc_per_tick) * cyc_per_tick;
  10dae4:	31 d2                	xor    %edx,%edx
  10dae6:	48 f7 f1             	div    %rcx
  10dae9:	48 0f af c8          	imul   %rax,%rcx
	cyc += last_count;
  10daed:	48 01 f9             	add    %rdi,%rcx
	if ((int64_t)(cyc - now) < HPET_CMP_MIN_DELAY) {
  10daf0:	48 89 c8             	mov    %rcx,%rax
  10daf3:	4c 29 c8             	sub    %r9,%rax
  10daf6:	48 3d e7 03 00 00    	cmp    $0x3e7,%rax
  10dafc:	7f 07                	jg     10db05 <sys_clock_set_timeout+0xab>
		cyc = now + HPET_CMP_MIN_DELAY;
  10dafe:	49 8d 89 e8 03 00 00 	lea    0x3e8(%r9),%rcx
	sys_write64(val, TIMER0_COMPARATOR_LOW_REG);
  10db05:	48 8b 05 d4 28 01 00 	mov    0x128d4(%rip),%rax        # 1203e0 <z_mmio_ram__hpet_regs>
	__asm__ volatile("movq %0, %1"
  10db0c:	48 89 88 08 01 00 00 	mov    %rcx,0x108(%rax)
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10db13:	41 0f ba e0 09       	bt     $0x9,%r8d
  10db18:	73 01                	jae    10db1b <sys_clock_set_timeout+0xc1>
		__asm__ volatile ("sti" ::: "memory");
  10db1a:	fb                   	sti    
}
  10db1b:	5d                   	pop    %rbp
  10db1c:	c3                   	retq   

000000000010db1d <sys_clock_elapsed>:
{
  10db1d:	55                   	push   %rbp
  10db1e:	48 89 e5             	mov    %rsp,%rbp
	__asm__ volatile ("pushfq; cli; popq %0" : "=g" (key) : : "memory");
  10db21:	9c                   	pushfq 
  10db22:	fa                   	cli    
  10db23:	5e                   	pop    %rsi
	uint64_t now = hpet_counter_get();
  10db24:	e8 da fd ff ff       	callq  10d903 <hpet_counter_get>
	uint32_t ret = (uint32_t)((now - last_count) / cyc_per_tick);
  10db29:	8b 0d f5 28 01 00    	mov    0x128f5(%rip),%ecx        # 120424 <cyc_per_tick>
  10db2f:	31 d2                	xor    %edx,%edx
  10db31:	48 2b 05 a0 28 01 00 	sub    0x128a0(%rip),%rax        # 1203d8 <last_count>
  10db38:	48 f7 f1             	div    %rcx
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10db3b:	0f ba e6 09          	bt     $0x9,%esi
  10db3f:	73 01                	jae    10db42 <sys_clock_elapsed+0x25>
		__asm__ volatile ("sti" ::: "memory");
  10db41:	fb                   	sti    
}
  10db42:	5d                   	pop    %rbp
  10db43:	c3                   	retq   

000000000010db44 <sys_clock_cycle_get_32>:
{
  10db44:	55                   	push   %rbp
  10db45:	48 89 e5             	mov    %rsp,%rbp
	return (uint32_t)hpet_counter_get();
  10db48:	e8 b6 fd ff ff       	callq  10d903 <hpet_counter_get>
}
  10db4d:	5d                   	pop    %rbp
  10db4e:	c3                   	retq   

000000000010db4f <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
  10db4f:	c3                   	retq   

000000000010db50 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
  10db50:	55                   	push   %rbp
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
  10db51:	48 63 c7             	movslq %edi,%rax
  10db54:	ff c7                	inc    %edi
{
  10db56:	48 89 e5             	mov    %rsp,%rbp
  10db59:	41 55                	push   %r13
  10db5b:	41 54                	push   %r12
  10db5d:	53                   	push   %rbx
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
  10db5e:	48 63 df             	movslq %edi,%rbx
{
  10db61:	52                   	push   %rdx
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
  10db62:	4c 8b 24 c5 a0 02 11 	mov    0x1102a0(,%rax,8),%r12
  10db69:	00 
  10db6a:	4c 39 24 dd a0 02 11 	cmp    %r12,0x1102a0(,%rbx,8)
  10db71:	00 
  10db72:	76 3b                	jbe    10dbaf <z_sys_init_run_level+0x5f>
		const struct device *dev = entry->dev;
  10db74:	4d 8b 6c 24 08       	mov    0x8(%r12),%r13
		int rc = entry->init(dev);
  10db79:	4c 89 ef             	mov    %r13,%rdi
  10db7c:	41 ff 14 24          	callq  *(%r12)

		if (dev != NULL) {
  10db80:	4d 85 ed             	test   %r13,%r13
  10db83:	74 24                	je     10dba9 <z_sys_init_run_level+0x59>
					rc = -rc;
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
  10db85:	49 8b 55 18          	mov    0x18(%r13),%rdx
			if (rc != 0) {
  10db89:	85 c0                	test   %eax,%eax
  10db8b:	74 18                	je     10dba5 <z_sys_init_run_level+0x55>
				if (rc < 0) {
  10db8d:	89 c1                	mov    %eax,%ecx
  10db8f:	c1 f9 1f             	sar    $0x1f,%ecx
  10db92:	31 c8                	xor    %ecx,%eax
  10db94:	29 c8                	sub    %ecx,%eax
				dev->state->init_res = rc;
  10db96:	b9 ff 00 00 00       	mov    $0xff,%ecx
  10db9b:	3d ff 00 00 00       	cmp    $0xff,%eax
  10dba0:	0f 4f c1             	cmovg  %ecx,%eax
  10dba3:	88 02                	mov    %al,(%rdx)
			}
			dev->state->initialized = true;
  10dba5:	80 4a 01 01          	orb    $0x1,0x1(%rdx)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
  10dba9:	49 83 c4 10          	add    $0x10,%r12
  10dbad:	eb bb                	jmp    10db6a <z_sys_init_run_level+0x1a>
		}
	}
}
  10dbaf:	58                   	pop    %rax
  10dbb0:	5b                   	pop    %rbx
  10dbb1:	41 5c                	pop    %r12
  10dbb3:	41 5d                	pop    %r13
  10dbb5:	5d                   	pop    %rbp
  10dbb6:	c3                   	retq   

000000000010dbb7 <z_device_ready>:
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
		return false;
  10dbb7:	31 c0                	xor    %eax,%eax
	if (dev == NULL) {
  10dbb9:	48 85 ff             	test   %rdi,%rdi
  10dbbc:	74 11                	je     10dbcf <z_device_ready+0x18>
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
  10dbbe:	48 8b 47 18          	mov    0x18(%rdi),%rax
  10dbc2:	8b 00                	mov    (%rax),%eax
  10dbc4:	66 25 ff 01          	and    $0x1ff,%ax
  10dbc8:	66 3d 00 01          	cmp    $0x100,%ax
  10dbcc:	0f 94 c0             	sete   %al
}
  10dbcf:	c3                   	retq   

000000000010dbd0 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
  10dbd0:	48 8b 05 79 fe 00 00 	mov    0xfe79(%rip),%rax        # 11da50 <_kernel+0x10>
  10dbd7:	48 05 ac 00 00 00    	add    $0xac,%rax
}
  10dbdd:	c3                   	retq   

000000000010dbde <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
  10dbde:	55                   	push   %rbp
  10dbdf:	48 89 e5             	mov    %rsp,%rbp
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
  10dbe2:	e8 70 eb ff ff       	callq  10c757 <arch_system_halt>

000000000010dbe7 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
  10dbe7:	55                   	push   %rbp
  10dbe8:	48 89 e5             	mov    %rsp,%rbp
  10dbeb:	41 54                	push   %r12
  10dbed:	53                   	push   %rbx
  10dbee:	48 83 ec 10          	sub    $0x10,%rsp
  10dbf2:	89 7d e4             	mov    %edi,-0x1c(%rbp)
  10dbf5:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  10dbf9:	9c                   	pushfq 
  10dbfa:	fa                   	cli    
  10dbfb:	5b                   	pop    %rbx
	return z_impl_z_current_get();
  10dbfc:	e8 ee 0e 00 00       	callq  10eaef <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
  10dc01:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  10dc05:	8b 7d e4             	mov    -0x1c(%rbp),%edi
  10dc08:	49 89 c4             	mov    %rax,%r12
  10dc0b:	e8 ce ff ff ff       	callq  10dbde <k_sys_fatal_error_handler>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10dc10:	0f ba e3 09          	bt     $0x9,%ebx
  10dc14:	73 01                	jae    10dc17 <z_fatal_error+0x30>
		__asm__ volatile ("sti" ::: "memory");
  10dc16:	fb                   	sti    
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
  10dc17:	58                   	pop    %rax
	z_impl_k_thread_abort(thread);
  10dc18:	4c 89 e7             	mov    %r12,%rdi
  10dc1b:	5a                   	pop    %rdx
  10dc1c:	5b                   	pop    %rbx
  10dc1d:	41 5c                	pop    %r12
  10dc1f:	5d                   	pop    %rbp
  10dc20:	e9 ba 0f 00 00       	jmpq   10ebdf <z_impl_k_thread_abort>

000000000010dc25 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
  10dc25:	55                   	push   %rbp
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
  10dc26:	45 31 c9             	xor    %r9d,%r9d
  10dc29:	b9 d9 df 10 00       	mov    $0x10dfd9,%ecx
  10dc2e:	ba 00 10 00 00       	mov    $0x1000,%edx
{
  10dc33:	48 89 e5             	mov    %rsp,%rbp
  10dc36:	53                   	push   %rbx
  10dc37:	48 63 df             	movslq %edi,%rbx
  10dc3a:	50                   	push   %rax
	k_thread_stack_t *stack = z_idle_stacks[i];
  10dc3b:	48 89 de             	mov    %rbx,%rsi
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
  10dc3e:	48 6b c3 28          	imul   $0x28,%rbx,%rax
	struct k_thread *thread = &z_idle_threads[i];
  10dc42:	48 69 db 20 03 00 00 	imul   $0x320,%rbx,%rbx
	z_setup_new_thread(thread, stack,
  10dc49:	6a 00                	pushq  $0x0
	k_thread_stack_t *stack = z_idle_stacks[i];
  10dc4b:	48 c1 e6 0c          	shl    $0xc,%rsi
	z_setup_new_thread(thread, stack,
  10dc4f:	6a 01                	pushq  $0x1
	k_thread_stack_t *stack = z_idle_stacks[i];
  10dc51:	48 81 c6 40 c4 13 00 	add    $0x13c440,%rsi
	z_setup_new_thread(thread, stack,
  10dc58:	6a 0f                	pushq  $0xf
  10dc5a:	4c 8d 80 40 da 11 00 	lea    0x11da40(%rax),%r8
  10dc61:	6a 00                	pushq  $0x0
	struct k_thread *thread = &z_idle_threads[i];
  10dc63:	48 81 c3 00 d4 11 00 	add    $0x11d400,%rbx
	z_setup_new_thread(thread, stack,
  10dc6a:	48 89 df             	mov    %rbx,%rdi
  10dc6d:	e8 c3 01 00 00       	callq  10de35 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
  10dc72:	80 63 19 fb          	andb   $0xfb,0x19(%rbx)
  10dc76:	48 83 c4 20          	add    $0x20,%rsp
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
  10dc7a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  10dc7e:	c9                   	leaveq 
  10dc7f:	c3                   	retq   

000000000010dc80 <bg_thread_main>:
{
  10dc80:	55                   	push   %rbp
  10dc81:	48 89 e5             	mov    %rsp,%rbp
	z_mem_manage_init();
  10dc84:	e8 83 16 00 00       	callq  10f30c <z_mem_manage_init>
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
  10dc89:	bf 02 00 00 00       	mov    $0x2,%edi
	z_sys_post_kernel = true;
  10dc8e:	c6 05 a4 27 01 00 01 	movb   $0x1,0x127a4(%rip)        # 120439 <z_sys_post_kernel>
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
  10dc95:	e8 b6 fe ff ff       	callq  10db50 <z_sys_init_run_level>
	boot_banner();
  10dc9a:	e8 08 18 00 00       	callq  10f4a7 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
  10dc9f:	bf 03 00 00 00       	mov    $0x3,%edi
  10dca4:	e8 a7 fe ff ff       	callq  10db50 <z_sys_init_run_level>
	z_init_static_threads();
  10dca9:	e8 71 02 00 00       	callq  10df1f <z_init_static_threads>
	z_mem_manage_boot_finish();
  10dcae:	e8 d6 16 00 00       	callq  10f389 <z_mem_manage_boot_finish>
	main();
  10dcb3:	e8 16 d5 ff ff       	callq  10b1ce <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
  10dcb8:	80 25 79 fa 00 00 fe 	andb   $0xfe,0xfa79(%rip)        # 11d738 <z_main_thread+0x18>
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
  10dcbf:	5d                   	pop    %rbp
  10dcc0:	c3                   	retq   

000000000010dcc1 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
  10dcc1:	b9 3c 04 12 00       	mov    $0x12043c,%ecx
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
  10dcc6:	ba 00 20 11 00       	mov    $0x112000,%edx
  10dccb:	31 c0                	xor    %eax,%eax
  10dccd:	48 81 e9 00 20 11 00 	sub    $0x112000,%rcx
  10dcd4:	48 89 d7             	mov    %rdx,%rdi
  10dcd7:	f3 aa                	rep stos %al,%es:(%rdi)
}
  10dcd9:	c3                   	retq   

000000000010dcda <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
  10dcda:	55                   	push   %rbp
  10dcdb:	48 89 e5             	mov    %rsp,%rbp
  10dcde:	41 54                	push   %r12
  10dce0:	53                   	push   %rbx
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
  10dce1:	48 8d 85 d0 fc ff ff 	lea    -0x330(%rbp),%rax
  10dce8:	48 81 ec 20 03 00 00 	sub    $0x320,%rsp
  10dcef:	48 89 05 5a fd 00 00 	mov    %rax,0xfd5a(%rip)        # 11da50 <_kernel+0x10>
	dummy_thread->base.user_options = K_ESSENTIAL;
  10dcf6:	66 c7 85 e8 fc ff ff 	movw   $0x101,-0x318(%rbp)
  10dcfd:	01 01 
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
  10dcff:	e8 4b fe ff ff       	callq  10db4f <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
  10dd04:	31 ff                	xor    %edi,%edi
  10dd06:	e8 45 fe ff ff       	callq  10db50 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
  10dd0b:	bf 01 00 00 00       	mov    $0x1,%edi
  10dd10:	e8 3b fe ff ff       	callq  10db50 <z_sys_init_run_level>
	z_sched_init();
  10dd15:	e8 52 0c 00 00       	callq  10e96c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
  10dd1a:	68 a1 14 11 00       	pushq  $0x1114a1
  10dd1f:	45 31 c9             	xor    %r9d,%r9d
  10dd22:	45 31 c0             	xor    %r8d,%r8d
  10dd25:	6a 01                	pushq  $0x1
  10dd27:	b9 80 dc 10 00       	mov    $0x10dc80,%ecx
  10dd2c:	ba 00 80 00 00       	mov    $0x8000,%edx
  10dd31:	be 40 d4 13 00       	mov    $0x13d440,%esi
  10dd36:	6a 00                	pushq  $0x0
  10dd38:	bf 20 d7 11 00       	mov    $0x11d720,%edi
  10dd3d:	6a 00                	pushq  $0x0
	_kernel.ready_q.cache = &z_main_thread;
  10dd3f:	48 c7 05 1e fd 00 00 	movq   $0x11d720,0xfd1e(%rip)        # 11da68 <_kernel+0x28>
  10dd46:	20 d7 11 00 
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
  10dd4a:	e8 e6 00 00 00       	callq  10de35 <z_setup_new_thread>
  10dd4f:	48 83 c4 20          	add    $0x20,%rsp
	z_ready_thread(&z_main_thread);
  10dd53:	bf 20 d7 11 00       	mov    $0x11d720,%edi
  10dd58:	80 25 da f9 00 00 fb 	andb   $0xfb,0xf9da(%rip)        # 11d739 <z_main_thread+0x19>
  10dd5f:	e8 ec 08 00 00       	callq  10e650 <z_ready_thread>
		init_idle_thread(i);
  10dd64:	31 ff                	xor    %edi,%edi
  10dd66:	e8 ba fe ff ff       	callq  10dc25 <init_idle_thread>
		_kernel.cpus[i].id = i;
  10dd6b:	c6 05 f2 fc 00 00 00 	movb   $0x0,0xfcf2(%rip)        # 11da64 <_kernel+0x24>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
  10dd72:	48 c7 05 db fc 00 00 	movq   $0x11d400,0xfcdb(%rip)        # 11da58 <_kernel+0x18>
  10dd79:	00 d4 11 00 
		_kernel.cpus[i].irq_stack =
  10dd7d:	48 c7 05 c0 fc 00 00 	movq   $0x13c440,0xfcc0(%rip)        # 11da48 <_kernel+0x8>
  10dd84:	40 c4 13 00 
  10dd88:	9c                   	pushfq 
  10dd89:	fa                   	cli    
  10dd8a:	58                   	pop    %rax
	old_thread = _current;
  10dd8b:	48 8b 1d be fc 00 00 	mov    0xfcbe(%rip),%rbx        # 11da50 <_kernel+0x10>
	old_thread->swap_retval = -EAGAIN;
  10dd92:	c7 83 b0 00 00 00 f5 	movl   $0xfffffff5,0xb0(%rbx)
  10dd99:	ff ff ff 
  10dd9c:	9c                   	pushfq 
  10dd9d:	fa                   	cli    
  10dd9e:	58                   	pop    %rax
	new_thread = z_swap_next_thread();
  10dd9f:	e8 92 06 00 00       	callq  10e436 <z_swap_next_thread>
	if (new_thread != old_thread) {
  10dda4:	48 39 c3             	cmp    %rax,%rbx
  10dda7:	74 23                	je     10ddcc <z_cstart+0xf2>
  10dda9:	49 89 c4             	mov    %rax,%r12
		z_reset_time_slice();
  10ddac:	e8 a5 04 00 00       	callq  10e256 <z_reset_time_slice>

extern void z_x86_switch(void *switch_to, void **switched_from);

static inline void arch_switch(void *switch_to, void **switched_from)
{
	z_x86_switch(switch_to, switched_from);
  10ddb1:	49 8b bc 24 b8 00 00 	mov    0xb8(%r12),%rdi
  10ddb8:	00 
		arch_switch(newsh, &old_thread->switch_handle);
  10ddb9:	48 8d b3 b8 00 00 00 	lea    0xb8(%rbx),%rsi
		_current_cpu->current = new_thread;
  10ddc0:	4c 89 25 89 fc 00 00 	mov    %r12,0xfc89(%rip)        # 11da50 <_kernel+0x10>
  10ddc7:	e8 9b 33 ef ff       	callq  1167 <z_x86_switch>
  10ddcc:	fb                   	sti    

000000000010ddcd <init_mem_slab_module>:
static int init_mem_slab_module(const struct device *dev)
{
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
  10ddcd:	b8 20 84 14 00       	mov    $0x148420,%eax
  10ddd2:	48 3d 20 84 14 00    	cmp    $0x148420,%rax
  10ddd8:	73 3c                	jae    10de16 <init_mem_slab_module+0x49>
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
  10ddda:	48 8b 50 20          	mov    0x20(%rax),%rdx
  10ddde:	48 8b 70 18          	mov    0x18(%rax),%rsi
  10dde2:	48 89 d1             	mov    %rdx,%rcx
  10dde5:	48 09 f1             	or     %rsi,%rcx
  10dde8:	80 e1 07             	and    $0x7,%cl
  10ddeb:	75 2c                	jne    10de19 <init_mem_slab_module+0x4c>
	slab->free_list = NULL;
  10dded:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  10ddf4:	00 
	for (j = 0U; j < slab->num_blocks; j++) {
  10ddf5:	8b 78 10             	mov    0x10(%rax),%edi
  10ddf8:	31 c9                	xor    %ecx,%ecx
  10ddfa:	39 f9                	cmp    %edi,%ecx
  10ddfc:	74 12                	je     10de10 <init_mem_slab_module+0x43>
		*(char **)p = slab->free_list;
  10ddfe:	4c 8b 40 28          	mov    0x28(%rax),%r8
	for (j = 0U; j < slab->num_blocks; j++) {
  10de02:	ff c1                	inc    %ecx
		*(char **)p = slab->free_list;
  10de04:	4c 89 02             	mov    %r8,(%rdx)
		slab->free_list = p;
  10de07:	48 89 50 28          	mov    %rdx,0x28(%rax)
		p += slab->block_size;
  10de0b:	48 01 f2             	add    %rsi,%rdx
	for (j = 0U; j < slab->num_blocks; j++) {
  10de0e:	eb ea                	jmp    10ddfa <init_mem_slab_module+0x2d>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
  10de10:	48 83 c0 38          	add    $0x38,%rax
  10de14:	eb bc                	jmp    10ddd2 <init_mem_slab_module+0x5>
			goto out;
		}
		z_object_init(slab);
	}

out:
  10de16:	31 c0                	xor    %eax,%eax
  10de18:	c3                   	retq   
	return rc;
  10de19:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
}
  10de1e:	c3                   	retq   

000000000010de1f <k_is_in_isr>:
	__asm__ volatile ("pushf; cli");
	ret = arch_curr_cpu()->nested != 0;
	__asm__ volatile ("popf");
	return ret;
#else
	return _kernel.cpus[0].nested != 0U;
  10de1f:	83 3d 1a fc 00 00 00 	cmpl   $0x0,0xfc1a(%rip)        # 11da40 <_kernel>
  10de26:	0f 95 c0             	setne  %al
}

bool k_is_in_isr(void)
{
	return arch_is_in_isr();
}
  10de29:	c3                   	retq   

000000000010de2a <z_impl_k_thread_name_set>:

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
  10de2a:	b8 a8 ff ff ff       	mov    $0xffffffa8,%eax
  10de2f:	c3                   	retq   

000000000010de30 <z_impl_k_thread_start>:

void z_impl_k_thread_start(struct k_thread *thread)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_thread, start, thread);

	z_sched_start(thread);
  10de30:	e9 34 08 00 00       	jmpq   10e669 <z_sched_start>

000000000010de35 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
  10de35:	55                   	push   %rbp
  10de36:	48 8d 87 98 00 00 00 	lea    0x98(%rdi),%rax
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
  10de3d:	48 83 c2 0f          	add    $0xf,%rdx
	list->head = (sys_dnode_t *)list;
  10de41:	48 89 87 98 00 00 00 	mov    %rax,0x98(%rdi)
  10de48:	48 83 e2 f0          	and    $0xfffffffffffffff0,%rdx
	list->tail = (sys_dnode_t *)list;
  10de4c:	48 89 87 a0 00 00 00 	mov    %rax,0xa0(%rdi)
{
  10de53:	48 89 e5             	mov    %rsp,%rbp

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
  10de56:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
  10de5d:	00 
	thread_base->user_options = (uint8_t)options;
  10de5e:	8b 45 20             	mov    0x20(%rbp),%eax
{
  10de61:	41 54                	push   %r12
	stack_ptr = (char *)stack + stack_obj_size;
  10de63:	4c 8d 24 16          	lea    (%rsi,%rdx,1),%r12
{
  10de67:	53                   	push   %rbx
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
  10de68:	4c 89 e2             	mov    %r12,%rdx
{
  10de6b:	48 89 fb             	mov    %rdi,%rbx
	thread_base->user_options = (uint8_t)options;
  10de6e:	88 47 18             	mov    %al,0x18(%rdi)
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
  10de71:	8b 45 18             	mov    0x18(%rbp),%eax
	thread_base->thread_state = (uint8_t)initial_state;
  10de74:	c6 47 19 04          	movb   $0x4,0x19(%rdi)
	thread_base->prio = priority;
  10de78:	88 47 1a             	mov    %al,0x1a(%rdi)

	thread_base->sched_locked = 0U;
  10de7b:	c6 47 1b 00          	movb   $0x0,0x1b(%rdi)
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
  10de7f:	50                   	push   %rax
	node->next = NULL;
  10de80:	48 c7 47 28 00 00 00 	movq   $0x0,0x28(%rdi)
  10de87:	00 
  10de88:	ff 75 10             	pushq  0x10(%rbp)
	node->prev = NULL;
  10de8b:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
  10de92:	00 
  10de93:	e8 85 ec ff ff       	callq  10cb1d <arch_new_thread>
	new_thread->resource_pool = _current->resource_pool;
  10de98:	48 8b 05 b1 fb 00 00 	mov    0xfbb1(%rip),%rax        # 11da50 <_kernel+0x10>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
  10de9f:	5a                   	pop    %rdx
	new_thread->init_data = NULL;
  10dea0:	48 c7 83 90 00 00 00 	movq   $0x0,0x90(%rbx)
  10dea7:	00 00 00 00 
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
  10deab:	59                   	pop    %rcx
	new_thread->resource_pool = _current->resource_pool;
  10deac:	48 8b 80 c0 00 00 00 	mov    0xc0(%rax),%rax
  10deb3:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
}
  10deba:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  10debe:	4c 89 e0             	mov    %r12,%rax
  10dec1:	5b                   	pop    %rbx
  10dec2:	41 5c                	pop    %r12
  10dec4:	5d                   	pop    %rbp
  10dec5:	c3                   	retq   

000000000010dec6 <z_impl_k_thread_create>:
{
  10dec6:	55                   	push   %rbp
  10dec7:	48 89 e5             	mov    %rsp,%rbp
  10deca:	41 55                	push   %r13
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
  10decc:	8b 45 20             	mov    0x20(%rbp),%eax
{
  10decf:	4c 8b 6d 28          	mov    0x28(%rbp),%r13
  10ded3:	41 54                	push   %r12
  10ded5:	49 89 fc             	mov    %rdi,%r12
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
  10ded8:	6a 00                	pushq  $0x0
  10deda:	50                   	push   %rax
  10dedb:	8b 45 18             	mov    0x18(%rbp),%eax
  10dede:	50                   	push   %rax
  10dedf:	ff 75 10             	pushq  0x10(%rbp)
  10dee2:	e8 4e ff ff ff       	callq  10de35 <z_setup_new_thread>
  10dee7:	48 83 c4 20          	add    $0x20,%rsp
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
  10deeb:	49 83 fd ff          	cmp    $0xffffffffffffffff,%r13
  10deef:	74 21                	je     10df12 <z_impl_k_thread_create+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
  10def1:	4d 85 ed             	test   %r13,%r13
  10def4:	75 0a                	jne    10df00 <z_impl_k_thread_create+0x3a>
	z_sched_start(thread);
  10def6:	4c 89 e7             	mov    %r12,%rdi
  10def9:	e8 6b 07 00 00       	callq  10e669 <z_sched_start>
}
  10defe:	eb 12                	jmp    10df12 <z_impl_k_thread_create+0x4c>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
  10df00:	49 8d 7c 24 28       	lea    0x28(%r12),%rdi
  10df05:	4c 89 ea             	mov    %r13,%rdx
  10df08:	be a0 e6 10 00       	mov    $0x10e6a0,%esi
  10df0d:	e8 ed 0d 00 00       	callq  10ecff <z_add_timeout>
}
  10df12:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  10df16:	4c 89 e0             	mov    %r12,%rax
  10df19:	41 5c                	pop    %r12
  10df1b:	41 5d                	pop    %r13
  10df1d:	5d                   	pop    %rbp
  10df1e:	c3                   	retq   

000000000010df1f <z_init_static_threads>:
{
  10df1f:	55                   	push   %rbp
  10df20:	48 89 e5             	mov    %rsp,%rbp
  10df23:	41 54                	push   %r12
  10df25:	53                   	push   %rbx
	_FOREACH_STATIC_THREAD(thread_data) {
  10df26:	bb 20 84 14 00       	mov    $0x148420,%ebx
  10df2b:	48 81 fb 20 84 14 00 	cmp    $0x148420,%rbx
  10df32:	73 3d                	jae    10df71 <z_init_static_threads+0x52>
		z_setup_new_thread(
  10df34:	8b 43 3c             	mov    0x3c(%rbx),%eax
  10df37:	48 8b 4b 18          	mov    0x18(%rbx),%rcx
  10df3b:	ff 73 50             	pushq  0x50(%rbx)
  10df3e:	8b 53 10             	mov    0x10(%rbx),%edx
  10df41:	48 8b 73 08          	mov    0x8(%rbx),%rsi
  10df45:	4c 8b 4b 28          	mov    0x28(%rbx),%r9
  10df49:	50                   	push   %rax
  10df4a:	8b 43 38             	mov    0x38(%rbx),%eax
  10df4d:	4c 8b 43 20          	mov    0x20(%rbx),%r8
  10df51:	48 8b 3b             	mov    (%rbx),%rdi
  10df54:	50                   	push   %rax
  10df55:	ff 73 30             	pushq  0x30(%rbx)
  10df58:	e8 d8 fe ff ff       	callq  10de35 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
  10df5d:	48 8b 03             	mov    (%rbx),%rax
		z_setup_new_thread(
  10df60:	48 83 c4 20          	add    $0x20,%rsp
		thread_data->init_thread->init_data = thread_data;
  10df64:	48 89 98 90 00 00 00 	mov    %rbx,0x90(%rax)
	_FOREACH_STATIC_THREAD(thread_data) {
  10df6b:	48 83 c3 58          	add    $0x58,%rbx
  10df6f:	eb ba                	jmp    10df2b <z_init_static_threads+0xc>
	k_sched_lock();
  10df71:	e8 ab 04 00 00       	callq  10e421 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
  10df76:	bb 20 84 14 00       	mov    $0x148420,%ebx
					    K_MSEC(thread_data->init_delay));
  10df7b:	45 31 e4             	xor    %r12d,%r12d
	_FOREACH_STATIC_THREAD(thread_data) {
  10df7e:	48 81 fb 20 84 14 00 	cmp    $0x148420,%rbx
  10df85:	73 45                	jae    10dfcc <z_init_static_threads+0xad>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
  10df87:	8b 43 40             	mov    0x40(%rbx),%eax
  10df8a:	83 f8 ff             	cmp    $0xffffffff,%eax
  10df8d:	74 37                	je     10dfc6 <z_init_static_threads+0xa7>
					    K_MSEC(thread_data->init_delay));
  10df8f:	85 c0                	test   %eax,%eax
			schedule_new_thread(thread_data->init_thread,
  10df91:	48 8b 3b             	mov    (%rbx),%rdi
					    K_MSEC(thread_data->init_delay));
  10df94:	41 0f 48 c4          	cmovs  %r12d,%eax
  10df98:	48 63 c8             	movslq %eax,%rcx
		t += off;
  10df9b:	48 8d 41 09          	lea    0x9(%rcx),%rax
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
  10df9f:	48 85 c9             	test   %rcx,%rcx
  10dfa2:	75 07                	jne    10dfab <z_init_static_threads+0x8c>
	z_sched_start(thread);
  10dfa4:	e8 c0 06 00 00       	callq  10e669 <z_sched_start>
  10dfa9:	eb 1b                	jmp    10dfc6 <z_init_static_threads+0xa7>
			return t / ((uint64_t)from_hz / to_hz);
  10dfab:	b9 0a 00 00 00       	mov    $0xa,%ecx
  10dfb0:	31 d2                	xor    %edx,%edx
  10dfb2:	48 83 c7 28          	add    $0x28,%rdi
  10dfb6:	be a0 e6 10 00       	mov    $0x10e6a0,%esi
  10dfbb:	48 f7 f1             	div    %rcx
  10dfbe:	48 89 c2             	mov    %rax,%rdx
  10dfc1:	e8 39 0d 00 00       	callq  10ecff <z_add_timeout>
	_FOREACH_STATIC_THREAD(thread_data) {
  10dfc6:	48 83 c3 58          	add    $0x58,%rbx
  10dfca:	eb b2                	jmp    10df7e <z_init_static_threads+0x5f>
}
  10dfcc:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  10dfd0:	5b                   	pop    %rbx
  10dfd1:	41 5c                	pop    %r12
  10dfd3:	5d                   	pop    %rbp
	k_sched_unlock();
  10dfd4:	e9 32 09 00 00       	jmpq   10e90b <k_sched_unlock>

000000000010dfd9 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
  10dfd9:	55                   	push   %rbp
  10dfda:	48 89 e5             	mov    %rsp,%rbp
  10dfdd:	9c                   	pushfq 
  10dfde:	fa                   	cli    
  10dfdf:	58                   	pop    %rax
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
  10dfe0:	e8 3c e7 ff ff       	callq  10c721 <arch_cpu_idle>
  10dfe5:	eb f6                	jmp    10dfdd <idle+0x4>

000000000010dfe7 <adjust_owner_prio.isra.0>:
	return new_prio;
}

static bool adjust_owner_prio(struct k_mutex *mutex, int32_t new_prio)
{
	if (mutex->owner->base.prio != new_prio) {
  10dfe7:	0f be 47 1a          	movsbl 0x1a(%rdi),%eax
  10dfeb:	39 f0                	cmp    %esi,%eax
  10dfed:	74 05                	je     10dff4 <adjust_owner_prio.isra.0+0xd>
		LOG_DBG("%p (ready (y/n): %c) prio changed to %d (was %d)",
			mutex->owner, z_is_thread_ready(mutex->owner) ?
			'y' : 'n',
			new_prio, mutex->owner->base.prio);

		return z_set_prio(mutex->owner, new_prio);
  10dfef:	e9 01 08 00 00       	jmpq   10e7f5 <z_set_prio>
	}
	return false;
}
  10dff4:	31 c0                	xor    %eax,%eax
  10dff6:	c3                   	retq   

000000000010dff7 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
  10dff7:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
  10dffe:	00 
}
  10dfff:	31 c0                	xor    %eax,%eax
	mutex->lock_count = 0U;
  10e001:	c7 47 18 00 00 00 00 	movl   $0x0,0x18(%rdi)
	list->head = (sys_dnode_t *)list;
  10e008:	48 89 3f             	mov    %rdi,(%rdi)
	list->tail = (sys_dnode_t *)list;
  10e00b:	48 89 7f 08          	mov    %rdi,0x8(%rdi)
}
  10e00f:	c3                   	retq   

000000000010e010 <z_impl_k_mutex_lock>:

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
  10e010:	55                   	push   %rbp
  10e011:	48 89 e5             	mov    %rsp,%rbp
  10e014:	41 56                	push   %r14
  10e016:	41 55                	push   %r13
  10e018:	41 54                	push   %r12
  10e01a:	53                   	push   %rbx
  10e01b:	48 89 fb             	mov    %rdi,%rbx
  10e01e:	9c                   	pushfq 
  10e01f:	fa                   	cli    
  10e020:	41 5e                	pop    %r14

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
  10e022:	8b 57 18             	mov    0x18(%rdi),%edx
  10e025:	48 8b 05 24 fa 00 00 	mov    0xfa24(%rip),%rax        # 11da50 <_kernel+0x10>
  10e02c:	85 d2                	test   %edx,%edx
  10e02e:	74 0e                	je     10e03e <z_impl_k_mutex_lock+0x2e>
  10e030:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
  10e034:	48 39 c7             	cmp    %rax,%rdi
  10e037:	75 24                	jne    10e05d <z_impl_k_mutex_lock+0x4d>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
  10e039:	8b 4b 1c             	mov    0x1c(%rbx),%ecx
  10e03c:	eb 04                	jmp    10e042 <z_impl_k_mutex_lock+0x32>
  10e03e:	0f be 48 1a          	movsbl 0x1a(%rax),%ecx
					mutex->owner_orig_prio;

		mutex->lock_count++;
  10e042:	ff c2                	inc    %edx
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10e044:	41 0f ba e6 09       	bt     $0x9,%r14d
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
  10e049:	89 4b 1c             	mov    %ecx,0x1c(%rbx)
		mutex->lock_count++;
  10e04c:	89 53 18             	mov    %edx,0x18(%rbx)
		mutex->owner = _current;
  10e04f:	48 89 43 10          	mov    %rax,0x10(%rbx)
  10e053:	73 01                	jae    10e056 <z_impl_k_mutex_lock+0x46>
		__asm__ volatile ("sti" ::: "memory");
  10e055:	fb                   	sti    

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
  10e056:	31 c0                	xor    %eax,%eax
  10e058:	e9 b4 00 00 00       	jmpq   10e111 <z_impl_k_mutex_lock+0x101>
  10e05d:	49 89 f5             	mov    %rsi,%r13
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
  10e060:	48 85 f6             	test   %rsi,%rsi
  10e063:	75 0f                	jne    10e074 <z_impl_k_mutex_lock+0x64>
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
  10e065:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10e06a:	41 0f ba e6 09       	bt     $0x9,%r14d
  10e06f:	e9 9a 00 00 00       	jmpq   10e10e <z_impl_k_mutex_lock+0xfe>
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mutex, lock, mutex, timeout);

	new_prio = new_prio_for_inheritance(_current->base.prio,
  10e074:	0f be 70 1a          	movsbl 0x1a(%rax),%esi
  10e078:	0f be 57 1a          	movsbl 0x1a(%rdi),%edx
	return prio >= CONFIG_PRIORITY_CEILING;
  10e07c:	b8 81 ff ff ff       	mov    $0xffffff81,%eax
  10e081:	39 d6                	cmp    %edx,%esi
  10e083:	0f 4f f2             	cmovg  %edx,%esi
  10e086:	83 fe 81             	cmp    $0xffffff81,%esi
  10e089:	0f 4c f0             	cmovl  %eax,%esi
	bool resched = false;
  10e08c:	45 31 e4             	xor    %r12d,%r12d
					    mutex->owner->base.prio);

	LOG_DBG("adjusting prio up on mutex %p", mutex);

	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
  10e08f:	39 f2                	cmp    %esi,%edx
  10e091:	7e 08                	jle    10e09b <z_impl_k_mutex_lock+0x8b>
		resched = adjust_owner_prio(mutex, new_prio);
  10e093:	e8 4f ff ff ff       	callq  10dfe7 <adjust_owner_prio.isra.0>
  10e098:	41 89 c4             	mov    %eax,%r12d
	}

	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
  10e09b:	4c 89 e9             	mov    %r13,%rcx
  10e09e:	48 89 da             	mov    %rbx,%rdx
  10e0a1:	44 89 f6             	mov    %r14d,%esi
  10e0a4:	bf 3a 04 12 00       	mov    $0x12043a,%edi
  10e0a9:	e8 17 07 00 00       	callq  10e7c5 <z_pend_curr>
	LOG_DBG("on mutex %p got_mutex value: %d", mutex, got_mutex);

	LOG_DBG("%p got mutex %p (y/n): %c", _current, mutex,
		got_mutex ? 'y' : 'n');

	if (got_mutex == 0) {
  10e0ae:	85 c0                	test   %eax,%eax
  10e0b0:	74 a4                	je     10e056 <z_impl_k_mutex_lock+0x46>
  10e0b2:	9c                   	pushfq 
  10e0b3:	fa                   	cli    
  10e0b4:	41 5d                	pop    %r13
	return list->head == list;
  10e0b6:	48 8b 03             	mov    (%rbx),%rax
	key = k_spin_lock(&lock);

	struct k_thread *waiter = z_waitq_head(&mutex->wait_q);

	new_prio = (waiter != NULL) ?
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
  10e0b9:	48 85 c0             	test   %rax,%rax
  10e0bc:	74 1d                	je     10e0db <z_impl_k_mutex_lock+0xcb>
  10e0be:	48 39 c3             	cmp    %rax,%rbx
  10e0c1:	74 18                	je     10e0db <z_impl_k_mutex_lock+0xcb>
  10e0c3:	0f be 70 1a          	movsbl 0x1a(%rax),%esi
  10e0c7:	39 73 1c             	cmp    %esi,0x1c(%rbx)
  10e0ca:	b8 81 ff ff ff       	mov    $0xffffff81,%eax
  10e0cf:	0f 4e 73 1c          	cmovle 0x1c(%rbx),%esi
  10e0d3:	83 fe 81             	cmp    $0xffffff81,%esi
  10e0d6:	0f 4c f0             	cmovl  %eax,%esi
	return new_prio;
  10e0d9:	eb 03                	jmp    10e0de <z_impl_k_mutex_lock+0xce>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
  10e0db:	8b 73 1c             	mov    0x1c(%rbx),%esi
		mutex->owner_orig_prio;

	LOG_DBG("adjusting prio down on mutex %p", mutex);

	resched = adjust_owner_prio(mutex, new_prio) || resched;
  10e0de:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
  10e0e2:	e8 00 ff ff ff       	callq  10dfe7 <adjust_owner_prio.isra.0>

	if (resched) {
  10e0e7:	45 84 e4             	test   %r12b,%r12b
  10e0ea:	75 04                	jne    10e0f0 <z_impl_k_mutex_lock+0xe0>
  10e0ec:	84 c0                	test   %al,%al
  10e0ee:	74 14                	je     10e104 <z_impl_k_mutex_lock+0xf4>
		z_reschedule(&lock, key);
  10e0f0:	44 89 ee             	mov    %r13d,%esi
  10e0f3:	bf 3a 04 12 00       	mov    $0x12043a,%edi
  10e0f8:	e8 e0 02 00 00       	callq  10e3dd <z_reschedule>
		k_spin_unlock(&lock, key);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
  10e0fd:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
  10e102:	eb 0d                	jmp    10e111 <z_impl_k_mutex_lock+0x101>
  10e104:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
  10e109:	41 0f ba e5 09       	bt     $0x9,%r13d
  10e10e:	73 01                	jae    10e111 <z_impl_k_mutex_lock+0x101>
		__asm__ volatile ("sti" ::: "memory");
  10e110:	fb                   	sti    
}
  10e111:	5b                   	pop    %rbx
  10e112:	41 5c                	pop    %r12
  10e114:	41 5d                	pop    %r13
  10e116:	41 5e                	pop    %r14
  10e118:	5d                   	pop    %rbp
  10e119:	c3                   	retq   

000000000010e11a <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
  10e11a:	48 8b 47 10          	mov    0x10(%rdi),%rax
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, -EINVAL);

		return -EINVAL;
  10e11e:	41 b8 ea ff ff ff    	mov    $0xffffffea,%r8d
	CHECKIF(mutex->owner == NULL) {
  10e124:	48 85 c0             	test   %rax,%rax
  10e127:	0f 84 95 00 00 00    	je     10e1c2 <z_impl_k_mutex_unlock+0xa8>
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, -EPERM);

		return -EPERM;
  10e12d:	41 83 c8 ff          	or     $0xffffffff,%r8d
	CHECKIF(mutex->owner != _current) {
  10e131:	48 3b 05 18 f9 00 00 	cmp    0xf918(%rip),%rax        # 11da50 <_kernel+0x10>
  10e138:	0f 85 84 00 00 00    	jne    10e1c2 <z_impl_k_mutex_unlock+0xa8>
{
  10e13e:	55                   	push   %rbp
  10e13f:	48 89 e5             	mov    %rsp,%rbp
  10e142:	41 54                	push   %r12
  10e144:	53                   	push   %rbx
  10e145:	48 89 fb             	mov    %rdi,%rbx
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
  10e148:	fe 48 1b             	decb   0x1b(%rax)

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
  10e14b:	8b 47 18             	mov    0x18(%rdi),%eax
  10e14e:	83 f8 01             	cmp    $0x1,%eax
  10e151:	76 07                	jbe    10e15a <z_impl_k_mutex_unlock+0x40>
		mutex->lock_count--;
  10e153:	ff c8                	dec    %eax
  10e155:	89 47 18             	mov    %eax,0x18(%rdi)
		goto k_mutex_unlock_return;
  10e158:	eb 58                	jmp    10e1b2 <z_impl_k_mutex_unlock+0x98>
  10e15a:	9c                   	pushfq 
  10e15b:	fa                   	cli    
  10e15c:	41 5c                	pop    %r12
	}

	k_spinlock_key_t key = k_spin_lock(&lock);

	adjust_owner_prio(mutex, mutex->owner_orig_prio);
  10e15e:	8b 77 1c             	mov    0x1c(%rdi),%esi
  10e161:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
  10e165:	e8 7d fe ff ff       	callq  10dfe7 <adjust_owner_prio.isra.0>

	/* Get the new owner, if any */
	new_owner = z_unpend_first_thread(&mutex->wait_q);
  10e16a:	48 89 df             	mov    %rbx,%rdi
  10e16d:	e8 c2 07 00 00       	callq  10e934 <z_unpend_first_thread>

	mutex->owner = new_owner;
  10e172:	48 89 43 10          	mov    %rax,0x10(%rbx)
	new_owner = z_unpend_first_thread(&mutex->wait_q);
  10e176:	48 89 c7             	mov    %rax,%rdi

	LOG_DBG("new owner of mutex %p: %p (prio: %d)",
		mutex, new_owner, new_owner ? new_owner->base.prio : -1000);

	if (new_owner != NULL) {
  10e179:	48 85 c0             	test   %rax,%rax
  10e17c:	74 25                	je     10e1a3 <z_impl_k_mutex_unlock+0x89>
		/*
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->owner_orig_prio = new_owner->base.prio;
  10e17e:	0f be 40 1a          	movsbl 0x1a(%rax),%eax
  10e182:	89 43 1c             	mov    %eax,0x1c(%rbx)
  10e185:	c7 87 b0 00 00 00 00 	movl   $0x0,0xb0(%rdi)
  10e18c:	00 00 00 
		arch_thread_return_value_set(new_owner, 0);
		z_ready_thread(new_owner);
  10e18f:	e8 bc 04 00 00       	callq  10e650 <z_ready_thread>
		z_reschedule(&lock, key);
  10e194:	44 89 e6             	mov    %r12d,%esi
  10e197:	bf 3a 04 12 00       	mov    $0x12043a,%edi
  10e19c:	e8 3c 02 00 00       	callq  10e3dd <z_reschedule>
  10e1a1:	eb 0f                	jmp    10e1b2 <z_impl_k_mutex_unlock+0x98>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10e1a3:	41 0f ba e4 09       	bt     $0x9,%r12d
	} else {
		mutex->lock_count = 0U;
  10e1a8:	c7 43 18 00 00 00 00 	movl   $0x0,0x18(%rbx)
  10e1af:	73 01                	jae    10e1b2 <z_impl_k_mutex_unlock+0x98>
		__asm__ volatile ("sti" ::: "memory");
  10e1b1:	fb                   	sti    


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
  10e1b2:	e8 54 07 00 00       	callq  10e90b <k_sched_unlock>

	return 0;
  10e1b7:	45 31 c0             	xor    %r8d,%r8d
}
  10e1ba:	5b                   	pop    %rbx
  10e1bb:	41 5c                	pop    %r12
  10e1bd:	44 89 c0             	mov    %r8d,%eax
  10e1c0:	5d                   	pop    %rbp
  10e1c1:	c3                   	retq   
  10e1c2:	44 89 c0             	mov    %r8d,%eax
  10e1c5:	c3                   	retq   

000000000010e1c6 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
  10e1c6:	55                   	push   %rbp
  10e1c7:	48 89 e5             	mov    %rsp,%rbp
  10e1ca:	41 54                	push   %r12
  10e1cc:	53                   	push   %rbx
  10e1cd:	48 89 fb             	mov    %rdi,%rbx
  10e1d0:	9c                   	pushfq 
  10e1d1:	fa                   	cli    
  10e1d2:	41 5c                	pop    %r12
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
  10e1d4:	e8 5b 07 00 00       	callq  10e934 <z_unpend_first_thread>

	if (thread != NULL) {
  10e1d9:	48 85 c0             	test   %rax,%rax
  10e1dc:	74 14                	je     10e1f2 <z_impl_k_sem_give+0x2c>
  10e1de:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%rax)
  10e1e5:	00 00 00 
  10e1e8:	48 89 c7             	mov    %rax,%rdi
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
  10e1eb:	e8 60 04 00 00       	callq  10e650 <z_ready_thread>
  10e1f0:	eb 1e                	jmp    10e210 <z_impl_k_sem_give+0x4a>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
  10e1f2:	8b 53 10             	mov    0x10(%rbx),%edx
  10e1f5:	31 c0                	xor    %eax,%eax
  10e1f7:	39 53 14             	cmp    %edx,0x14(%rbx)
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
  10e1fa:	48 8d 7b 18          	lea    0x18(%rbx),%rdi
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
  10e1fe:	0f 95 c0             	setne  %al
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
  10e201:	be 02 00 00 00       	mov    $0x2,%esi
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
  10e206:	01 d0                	add    %edx,%eax
  10e208:	89 43 10             	mov    %eax,0x10(%rbx)
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
  10e20b:	e8 69 12 00 00       	callq  10f479 <z_handle_obj_poll_events>
	}

	z_reschedule(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
  10e210:	5b                   	pop    %rbx
	z_reschedule(&lock, key);
  10e211:	44 89 e6             	mov    %r12d,%esi
  10e214:	bf 3a 04 12 00       	mov    $0x12043a,%edi
}
  10e219:	41 5c                	pop    %r12
  10e21b:	5d                   	pop    %rbp
	z_reschedule(&lock, key);
  10e21c:	e9 bc 01 00 00       	jmpq   10e3dd <z_reschedule>

000000000010e221 <sys_dlist_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
  10e221:	48 8b 57 08          	mov    0x8(%rdi),%rdx
	sys_dnode_t *const next = node->next;
  10e225:	48 8b 07             	mov    (%rdi),%rax

	prev->next = next;
  10e228:	48 89 02             	mov    %rax,(%rdx)
	next->prev = prev;
  10e22b:	48 89 50 08          	mov    %rdx,0x8(%rax)
	node->next = NULL;
  10e22f:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
	node->prev = NULL;
  10e236:	48 c7 47 08 00 00 00 	movq   $0x0,0x8(%rdi)
  10e23d:	00 
	sys_dnode_init(node);
}
  10e23e:	c3                   	retq   

000000000010e23f <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread == _current || is_thread_dummy(thread));
	pend(thread, wait_q, timeout);
}

static inline void unpend_thread_no_timeout(struct k_thread *thread)
{
  10e23f:	55                   	push   %rbp
  10e240:	48 89 e5             	mov    %rsp,%rbp

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
  10e243:	e8 d9 ff ff ff       	callq  10e221 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
  10e248:	80 67 19 fd          	andb   $0xfd,0x19(%rdi)
}
  10e24c:	5d                   	pop    %rbp
	thread->base.pended_on = NULL;
  10e24d:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
  10e254:	00 
}
  10e255:	c3                   	retq   

000000000010e256 <z_reset_time_slice>:
	if (slice_time != 0) {
  10e256:	83 3d cf 21 01 00 00 	cmpl   $0x0,0x121cf(%rip)        # 12042c <slice_time>
  10e25d:	74 1f                	je     10e27e <z_reset_time_slice+0x28>
{
  10e25f:	55                   	push   %rbp
  10e260:	48 89 e5             	mov    %rsp,%rbp
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
  10e263:	e8 b5 f8 ff ff       	callq  10db1d <sys_clock_elapsed>
  10e268:	8b 3d be 21 01 00    	mov    0x121be(%rip),%edi        # 12042c <slice_time>
		z_set_timeout_expiry(slice_time, false);
  10e26e:	31 f6                	xor    %esi,%esi
}
  10e270:	5d                   	pop    %rbp
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
  10e271:	01 f8                	add    %edi,%eax
  10e273:	89 05 e7 f7 00 00    	mov    %eax,0xf7e7(%rip)        # 11da60 <_kernel+0x20>
		z_set_timeout_expiry(slice_time, false);
  10e279:	e9 a1 0b 00 00       	jmpq   10ee1f <z_set_timeout_expiry>
  10e27e:	c3                   	retq   

000000000010e27f <z_swap_irqlock>:
{
  10e27f:	55                   	push   %rbp
  10e280:	48 89 e5             	mov    %rsp,%rbp
  10e283:	41 55                	push   %r13
  10e285:	41 54                	push   %r12
  10e287:	41 89 fc             	mov    %edi,%r12d
  10e28a:	53                   	push   %rbx
  10e28b:	51                   	push   %rcx
	old_thread = _current;
  10e28c:	48 8b 1d bd f7 00 00 	mov    0xf7bd(%rip),%rbx        # 11da50 <_kernel+0x10>
	old_thread->swap_retval = -EAGAIN;
  10e293:	c7 83 b0 00 00 00 f5 	movl   $0xfffffff5,0xb0(%rbx)
  10e29a:	ff ff ff 
  10e29d:	9c                   	pushfq 
  10e29e:	fa                   	cli    
  10e29f:	58                   	pop    %rax
	return _kernel.ready_q.cache;
  10e2a0:	4c 8b 2d c1 f7 00 00 	mov    0xf7c1(%rip),%r13        # 11da68 <_kernel+0x28>
	if (new_thread != old_thread) {
  10e2a7:	4c 39 eb             	cmp    %r13,%rbx
  10e2aa:	74 1f                	je     10e2cb <z_swap_irqlock+0x4c>
		z_reset_time_slice();
  10e2ac:	e8 a5 ff ff ff       	callq  10e256 <z_reset_time_slice>
  10e2b1:	49 8b bd b8 00 00 00 	mov    0xb8(%r13),%rdi
		arch_switch(newsh, &old_thread->switch_handle);
  10e2b8:	48 8d b3 b8 00 00 00 	lea    0xb8(%rbx),%rsi
		_current_cpu->current = new_thread;
  10e2bf:	4c 89 2d 8a f7 00 00 	mov    %r13,0xf78a(%rip)        # 11da50 <_kernel+0x10>
  10e2c6:	e8 9c 2e ef ff       	callq  1167 <z_x86_switch>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10e2cb:	41 0f ba e4 09       	bt     $0x9,%r12d
  10e2d0:	73 01                	jae    10e2d3 <z_swap_irqlock+0x54>
		__asm__ volatile ("sti" ::: "memory");
  10e2d2:	fb                   	sti    
	return _current->swap_retval;
  10e2d3:	48 8b 05 76 f7 00 00 	mov    0xf776(%rip),%rax        # 11da50 <_kernel+0x10>
	return do_swap(key, NULL, 0);
  10e2da:	8b 80 b0 00 00 00    	mov    0xb0(%rax),%eax
}
  10e2e0:	5a                   	pop    %rdx
  10e2e1:	5b                   	pop    %rbx
  10e2e2:	41 5c                	pop    %r12
  10e2e4:	41 5d                	pop    %r13
  10e2e6:	5d                   	pop    %rbp
  10e2e7:	c3                   	retq   

000000000010e2e8 <z_swap>:
{
  10e2e8:	55                   	push   %rbp
  10e2e9:	48 89 e5             	mov    %rsp,%rbp
  10e2ec:	41 55                	push   %r13
  10e2ee:	41 54                	push   %r12
  10e2f0:	41 89 f4             	mov    %esi,%r12d
  10e2f3:	53                   	push   %rbx
  10e2f4:	51                   	push   %rcx
	old_thread = _current;
  10e2f5:	48 8b 1d 54 f7 00 00 	mov    0xf754(%rip),%rbx        # 11da50 <_kernel+0x10>
	old_thread->swap_retval = -EAGAIN;
  10e2fc:	c7 83 b0 00 00 00 f5 	movl   $0xfffffff5,0xb0(%rbx)
  10e303:	ff ff ff 
	if (!is_spinlock || lock != &sched_spinlock) {
  10e306:	48 81 ff 3a 04 12 00 	cmp    $0x12043a,%rdi
  10e30d:	74 03                	je     10e312 <z_swap+0x2a>
  10e30f:	9c                   	pushfq 
  10e310:	fa                   	cli    
  10e311:	58                   	pop    %rax
  10e312:	4c 8b 2d 4f f7 00 00 	mov    0xf74f(%rip),%r13        # 11da68 <_kernel+0x28>
	if (new_thread != old_thread) {
  10e319:	4c 39 eb             	cmp    %r13,%rbx
  10e31c:	74 1f                	je     10e33d <z_swap+0x55>
		z_reset_time_slice();
  10e31e:	e8 33 ff ff ff       	callq  10e256 <z_reset_time_slice>
  10e323:	49 8b bd b8 00 00 00 	mov    0xb8(%r13),%rdi
		arch_switch(newsh, &old_thread->switch_handle);
  10e32a:	48 8d b3 b8 00 00 00 	lea    0xb8(%rbx),%rsi
		_current_cpu->current = new_thread;
  10e331:	4c 89 2d 18 f7 00 00 	mov    %r13,0xf718(%rip)        # 11da50 <_kernel+0x10>
  10e338:	e8 2a 2e ef ff       	callq  1167 <z_x86_switch>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10e33d:	41 0f ba e4 09       	bt     $0x9,%r12d
  10e342:	73 01                	jae    10e345 <z_swap+0x5d>
		__asm__ volatile ("sti" ::: "memory");
  10e344:	fb                   	sti    
	return _current->swap_retval;
  10e345:	48 8b 05 04 f7 00 00 	mov    0xf704(%rip),%rax        # 11da50 <_kernel+0x10>
	return do_swap(key.key, lock, 1);
  10e34c:	8b 80 b0 00 00 00    	mov    0xb0(%rax),%eax
}
  10e352:	5a                   	pop    %rdx
  10e353:	5b                   	pop    %rbx
  10e354:	41 5c                	pop    %r12
  10e356:	41 5d                	pop    %r13
  10e358:	5d                   	pop    %rbp
  10e359:	c3                   	retq   

000000000010e35a <k_sched_time_slice_set>:
{
  10e35a:	55                   	push   %rbp
  10e35b:	48 89 e5             	mov    %rsp,%rbp
  10e35e:	53                   	push   %rbx
  10e35f:	52                   	push   %rdx
  10e360:	9c                   	pushfq 
  10e361:	fa                   	cli    
  10e362:	5b                   	pop    %rbx
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint32_t k_ms_to_ticks_ceil32(uint32_t t)
{
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_ms, Z_HZ_ticks, true, true, true, false);
  10e363:	89 f8                	mov    %edi,%eax
		if (result32 && (t < BIT64(32))) {
  10e365:	ba ff ff ff ff       	mov    $0xffffffff,%edx
		_current_cpu->slice_ticks = 0;
  10e36a:	c7 05 ec f6 00 00 00 	movl   $0x0,0xf6ec(%rip)        # 11da60 <_kernel+0x20>
  10e371:	00 00 00 
		t += off;
  10e374:	48 83 c0 09          	add    $0x9,%rax
		if (result32 && (t < BIT64(32))) {
  10e378:	48 39 d0             	cmp    %rdx,%rax
  10e37b:	77 0e                	ja     10e38b <k_sched_time_slice_set+0x31>
			return ((uint32_t)t) / (from_hz / to_hz);
  10e37d:	8d 47 09             	lea    0x9(%rdi),%eax
  10e380:	b9 0a 00 00 00       	mov    $0xa,%ecx
  10e385:	31 d2                	xor    %edx,%edx
  10e387:	f7 f1                	div    %ecx
  10e389:	eb 0a                	jmp    10e395 <k_sched_time_slice_set+0x3b>
			return t / ((uint64_t)from_hz / to_hz);
  10e38b:	b9 0a 00 00 00       	mov    $0xa,%ecx
  10e390:	31 d2                	xor    %edx,%edx
  10e392:	48 f7 f1             	div    %rcx
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
  10e395:	85 ff                	test   %edi,%edi
  10e397:	7e 0b                	jle    10e3a4 <k_sched_time_slice_set+0x4a>
			slice_time = MAX(2, slice_time);
  10e399:	83 f8 02             	cmp    $0x2,%eax
  10e39c:	ba 02 00 00 00       	mov    $0x2,%edx
  10e3a1:	0f 4c c2             	cmovl  %edx,%eax
  10e3a4:	89 05 82 20 01 00    	mov    %eax,0x12082(%rip)        # 12042c <slice_time>
		slice_max_prio = prio;
  10e3aa:	89 35 78 20 01 00    	mov    %esi,0x12078(%rip)        # 120428 <slice_max_prio>
		z_reset_time_slice();
  10e3b0:	e8 a1 fe ff ff       	callq  10e256 <z_reset_time_slice>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10e3b5:	0f ba e3 09          	bt     $0x9,%ebx
  10e3b9:	73 01                	jae    10e3bc <k_sched_time_slice_set+0x62>
		__asm__ volatile ("sti" ::: "memory");
  10e3bb:	fb                   	sti    
}
  10e3bc:	58                   	pop    %rax
  10e3bd:	5b                   	pop    %rbx
  10e3be:	5d                   	pop    %rbp
  10e3bf:	c3                   	retq   

000000000010e3c0 <z_unpend_thread>:
{
  10e3c0:	55                   	push   %rbp
  10e3c1:	48 89 e5             	mov    %rsp,%rbp
  10e3c4:	9c                   	pushfq 
  10e3c5:	fa                   	cli    
  10e3c6:	59                   	pop    %rcx
		unpend_thread_no_timeout(thread);
  10e3c7:	e8 73 fe ff ff       	callq  10e23f <unpend_thread_no_timeout>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10e3cc:	0f ba e1 09          	bt     $0x9,%ecx
  10e3d0:	73 01                	jae    10e3d3 <z_unpend_thread+0x13>
		__asm__ volatile ("sti" ::: "memory");
  10e3d2:	fb                   	sti    
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
  10e3d3:	48 83 c7 28          	add    $0x28,%rdi
}
  10e3d7:	5d                   	pop    %rbp
  10e3d8:	e9 20 0a 00 00       	jmpq   10edfd <z_abort_timeout>

000000000010e3dd <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
  10e3dd:	0f ba e6 09          	bt     $0x9,%esi
  10e3e1:	73 1f                	jae    10e402 <z_reschedule+0x25>
	if (resched(key.key) && need_swap()) {
  10e3e3:	83 3d 56 f6 00 00 00 	cmpl   $0x0,0xf656(%rip)        # 11da40 <_kernel>
  10e3ea:	75 15                	jne    10e401 <z_reschedule+0x24>
  10e3ec:	48 8b 05 5d f6 00 00 	mov    0xf65d(%rip),%rax        # 11da50 <_kernel+0x10>
  10e3f3:	48 39 05 6e f6 00 00 	cmp    %rax,0xf66e(%rip)        # 11da68 <_kernel+0x28>
  10e3fa:	74 05                	je     10e401 <z_reschedule+0x24>
		z_swap(lock, key);
  10e3fc:	e9 e7 fe ff ff       	jmpq   10e2e8 <z_swap>
  10e401:	fb                   	sti    
}
  10e402:	c3                   	retq   

000000000010e403 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
  10e403:	0f ba e7 09          	bt     $0x9,%edi
  10e407:	73 0f                	jae    10e418 <z_reschedule_irqlock+0x15>
	if (resched(key)) {
  10e409:	83 3d 30 f6 00 00 00 	cmpl   $0x0,0xf630(%rip)        # 11da40 <_kernel>
  10e410:	75 05                	jne    10e417 <z_reschedule_irqlock+0x14>
		z_swap_irqlock(key);
  10e412:	e9 68 fe ff ff       	jmpq   10e27f <z_swap_irqlock>
  10e417:	fb                   	sti    
}
  10e418:	c3                   	retq   

000000000010e419 <z_reschedule_unlocked>:
  10e419:	9c                   	pushfq 
  10e41a:	fa                   	cli    
  10e41b:	5f                   	pop    %rdi
	(void) z_reschedule_irqlock(arch_irq_lock());
  10e41c:	e9 e2 ff ff ff       	jmpq   10e403 <z_reschedule_irqlock>

000000000010e421 <k_sched_lock>:
  10e421:	9c                   	pushfq 
  10e422:	fa                   	cli    
  10e423:	5a                   	pop    %rdx
	--_current->base.sched_locked;
  10e424:	48 8b 05 25 f6 00 00 	mov    0xf625(%rip),%rax        # 11da50 <_kernel+0x10>
  10e42b:	fe 48 1b             	decb   0x1b(%rax)
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10e42e:	0f ba e2 09          	bt     $0x9,%edx
  10e432:	73 01                	jae    10e435 <k_sched_lock+0x14>
		__asm__ volatile ("sti" ::: "memory");
  10e434:	fb                   	sti    
}
  10e435:	c3                   	retq   

000000000010e436 <z_swap_next_thread>:
}
  10e436:	48 8b 05 2b f6 00 00 	mov    0xf62b(%rip),%rax        # 11da68 <_kernel+0x28>
  10e43d:	c3                   	retq   

000000000010e43e <z_get_next_switch_handle>:
	z_sched_usage_switch(_kernel.ready_q.cache);
  10e43e:	48 8b 05 23 f6 00 00 	mov    0xf623(%rip),%rax        # 11da68 <_kernel+0x28>
	_current->switch_handle = interrupted;
  10e445:	48 8b 15 04 f6 00 00 	mov    0xf604(%rip),%rdx        # 11da50 <_kernel+0x10>
	_current_cpu->current = new_thread;
  10e44c:	48 89 05 fd f5 00 00 	mov    %rax,0xf5fd(%rip)        # 11da50 <_kernel+0x10>
	_current->switch_handle = interrupted;
  10e453:	48 89 ba b8 00 00 00 	mov    %rdi,0xb8(%rdx)
	return _current->switch_handle;
  10e45a:	48 8b 80 b8 00 00 00 	mov    0xb8(%rax),%rax
}
  10e461:	c3                   	retq   

000000000010e462 <z_priq_dumb_best>:
	return list->head == list;
  10e462:	48 8b 07             	mov    (%rdi),%rax
struct k_thread *z_priq_dumb_best(sys_dlist_t *pq)
{
	struct k_thread *thread = NULL;
	sys_dnode_t *n = sys_dlist_peek_head(pq);

	if (n != NULL) {
  10e465:	48 85 c0             	test   %rax,%rax
  10e468:	74 05                	je     10e46f <z_priq_dumb_best+0xd>
  10e46a:	48 39 c7             	cmp    %rax,%rdi
  10e46d:	75 02                	jne    10e471 <z_priq_dumb_best+0xf>
	struct k_thread *thread = NULL;
  10e46f:	31 c0                	xor    %eax,%eax
		thread = CONTAINER_OF(n, struct k_thread, base.qnode_dlist);
	}
	return thread;
}
  10e471:	c3                   	retq   

000000000010e472 <update_cache>:
{
  10e472:	55                   	push   %rbp
  10e473:	48 89 e5             	mov    %rsp,%rbp
  10e476:	53                   	push   %rbx
  10e477:	52                   	push   %rdx
  10e478:	89 fa                	mov    %edi,%edx
	return _priq_run_best(curr_cpu_runq());
  10e47a:	bf 70 da 11 00       	mov    $0x11da70,%edi
  10e47f:	e8 de ff ff ff       	callq  10e462 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
  10e484:	48 8b 1d cd f5 00 00 	mov    0xf5cd(%rip),%rbx        # 11da58 <_kernel+0x18>
  10e48b:	48 85 c0             	test   %rax,%rax
  10e48e:	74 03                	je     10e493 <update_cache+0x21>
  10e490:	48 89 c3             	mov    %rax,%rbx
	if (z_is_thread_prevented_from_running(_current)) {
  10e493:	48 8b 05 b6 f5 00 00 	mov    0xf5b6(%rip),%rax        # 11da50 <_kernel+0x10>
	if (preempt_ok != 0) {
  10e49a:	85 d2                	test   %edx,%edx
  10e49c:	75 16                	jne    10e4b4 <update_cache+0x42>
	if (z_is_thread_prevented_from_running(_current)) {
  10e49e:	f6 40 19 1f          	testb  $0x1f,0x19(%rax)
  10e4a2:	75 10                	jne    10e4b4 <update_cache+0x42>
	if (is_preempt(_current) || is_metairq(thread)) {
  10e4a4:	66 83 78 1a 7f       	cmpw   $0x7f,0x1a(%rax)
  10e4a9:	76 09                	jbe    10e4b4 <update_cache+0x42>
		_kernel.ready_q.cache = _current;
  10e4ab:	48 89 05 b6 f5 00 00 	mov    %rax,0xf5b6(%rip)        # 11da68 <_kernel+0x28>
  10e4b2:	eb 11                	jmp    10e4c5 <update_cache+0x53>
		if (thread != _current) {
  10e4b4:	48 39 c3             	cmp    %rax,%rbx
  10e4b7:	74 05                	je     10e4be <update_cache+0x4c>
			z_reset_time_slice();
  10e4b9:	e8 98 fd ff ff       	callq  10e256 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
  10e4be:	48 89 1d a3 f5 00 00 	mov    %rbx,0xf5a3(%rip)        # 11da68 <_kernel+0x28>
}
  10e4c5:	58                   	pop    %rax
  10e4c6:	5b                   	pop    %rbx
  10e4c7:	5d                   	pop    %rbp
  10e4c8:	c3                   	retq   

000000000010e4c9 <move_thread_to_end_of_prio_q>:
{
  10e4c9:	55                   	push   %rbp
	return (thread->base.thread_state & state) != 0U;
  10e4ca:	8a 47 19             	mov    0x19(%rdi),%al
  10e4cd:	48 89 e5             	mov    %rsp,%rbp
	if (z_is_thread_queued(thread)) {
  10e4d0:	84 c0                	test   %al,%al
  10e4d2:	79 0b                	jns    10e4df <move_thread_to_end_of_prio_q+0x16>
	thread->base.thread_state &= ~_THREAD_QUEUED;
  10e4d4:	83 e0 7f             	and    $0x7f,%eax
  10e4d7:	88 47 19             	mov    %al,0x19(%rdi)
	sys_dlist_remove(&thread->base.qnode_dlist);
  10e4da:	e8 42 fd ff ff       	callq  10e221 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
  10e4df:	80 4f 19 80          	orb    $0x80,0x19(%rdi)
  10e4e3:	48 8b 05 86 f5 00 00 	mov    0xf586(%rip),%rax        # 11da70 <_kernel+0x30>
	sys_dnode_t *const tail = list->tail;
  10e4ea:	48 8b 0d 87 f5 00 00 	mov    0xf587(%rip),%rcx        # 11da78 <_kernel+0x38>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
  10e4f1:	48 85 c0             	test   %rax,%rax
  10e4f4:	74 3b                	je     10e531 <move_thread_to_end_of_prio_q+0x68>
  10e4f6:	48 3d 70 da 11 00    	cmp    $0x11da70,%rax
  10e4fc:	74 33                	je     10e531 <move_thread_to_end_of_prio_q+0x68>
	int32_t b1 = thread_1->base.prio;
  10e4fe:	0f be 77 1a          	movsbl 0x1a(%rdi),%esi
	int32_t b2 = thread_2->base.prio;
  10e502:	0f be 50 1a          	movsbl 0x1a(%rax),%edx
	if (b1 != b2) {
  10e506:	39 d6                	cmp    %edx,%esi
  10e508:	74 1a                	je     10e524 <move_thread_to_end_of_prio_q+0x5b>
		return b2 - b1;
  10e50a:	29 f2                	sub    %esi,%edx
		if (z_sched_prio_cmp(thread, t) > 0) {
  10e50c:	85 d2                	test   %edx,%edx
  10e50e:	7e 14                	jle    10e524 <move_thread_to_end_of_prio_q+0x5b>
	sys_dnode_t *const prev = successor->prev;
  10e510:	48 8b 50 08          	mov    0x8(%rax),%rdx
	node->next = successor;
  10e514:	48 89 07             	mov    %rax,(%rdi)
	node->prev = prev;
  10e517:	48 89 57 08          	mov    %rdx,0x8(%rdi)
	prev->next = node;
  10e51b:	48 89 3a             	mov    %rdi,(%rdx)
	successor->prev = node;
  10e51e:	48 89 78 08          	mov    %rdi,0x8(%rax)
}
  10e522:	eb 22                	jmp    10e546 <move_thread_to_end_of_prio_q+0x7d>
	return (node == list->tail) ? NULL : node->next;
  10e524:	48 39 c8             	cmp    %rcx,%rax
  10e527:	74 08                	je     10e531 <move_thread_to_end_of_prio_q+0x68>
  10e529:	48 8b 00             	mov    (%rax),%rax
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
  10e52c:	48 85 c0             	test   %rax,%rax
  10e52f:	75 d1                	jne    10e502 <move_thread_to_end_of_prio_q+0x39>
	node->next = list;
  10e531:	48 c7 07 70 da 11 00 	movq   $0x11da70,(%rdi)
	node->prev = tail;
  10e538:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
	tail->next = node;
  10e53c:	48 89 39             	mov    %rdi,(%rcx)
	list->tail = node;
  10e53f:	48 89 3d 32 f5 00 00 	mov    %rdi,0xf532(%rip)        # 11da78 <_kernel+0x38>
	update_cache(thread == _current);
  10e546:	48 39 3d 03 f5 00 00 	cmp    %rdi,0xf503(%rip)        # 11da50 <_kernel+0x10>
}
  10e54d:	5d                   	pop    %rbp
	update_cache(thread == _current);
  10e54e:	40 0f 94 c7          	sete   %dil
  10e552:	40 0f b6 ff          	movzbl %dil,%edi
  10e556:	e9 17 ff ff ff       	jmpq   10e472 <update_cache>

000000000010e55b <z_time_slice>:
{
  10e55b:	55                   	push   %rbp
  10e55c:	48 89 e5             	mov    %rsp,%rbp
  10e55f:	53                   	push   %rbx
  10e560:	52                   	push   %rdx
  10e561:	9c                   	pushfq 
  10e562:	fa                   	cli    
  10e563:	5b                   	pop    %rbx
	if (slice_time && sliceable(_current)) {
  10e564:	83 3d c1 1e 01 00 00 	cmpl   $0x0,0x11ec1(%rip)        # 12042c <slice_time>
  10e56b:	74 4b                	je     10e5b8 <z_time_slice+0x5d>
  10e56d:	89 fa                	mov    %edi,%edx
  10e56f:	48 8b 3d da f4 00 00 	mov    0xf4da(%rip),%rdi        # 11da50 <_kernel+0x10>
		&& !z_is_idle_thread_object(thread);
  10e576:	66 83 7f 1a 7f       	cmpw   $0x7f,0x1a(%rdi)
  10e57b:	77 3b                	ja     10e5b8 <z_time_slice+0x5d>
		&& !z_is_thread_prevented_from_running(thread)
  10e57d:	f6 47 19 1f          	testb  $0x1f,0x19(%rdi)
  10e581:	75 35                	jne    10e5b8 <z_time_slice+0x5d>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
  10e583:	0f be 47 1a          	movsbl 0x1a(%rdi),%eax
		&& !z_is_idle_thread_object(thread);
  10e587:	39 05 9b 1e 01 00    	cmp    %eax,0x11e9b(%rip)        # 120428 <slice_max_prio>
  10e58d:	7f 29                	jg     10e5b8 <z_time_slice+0x5d>
  10e58f:	48 81 ff 00 d4 11 00 	cmp    $0x11d400,%rdi
  10e596:	74 20                	je     10e5b8 <z_time_slice+0x5d>
		if (ticks >= _current_cpu->slice_ticks) {
  10e598:	8b 05 c2 f4 00 00    	mov    0xf4c2(%rip),%eax        # 11da60 <_kernel+0x20>
  10e59e:	39 d0                	cmp    %edx,%eax
  10e5a0:	7f 0c                	jg     10e5ae <z_time_slice+0x53>
			move_thread_to_end_of_prio_q(_current);
  10e5a2:	e8 22 ff ff ff       	callq  10e4c9 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
  10e5a7:	e8 aa fc ff ff       	callq  10e256 <z_reset_time_slice>
  10e5ac:	eb 14                	jmp    10e5c2 <z_time_slice+0x67>
			_current_cpu->slice_ticks -= ticks;
  10e5ae:	29 d0                	sub    %edx,%eax
  10e5b0:	89 05 aa f4 00 00    	mov    %eax,0xf4aa(%rip)        # 11da60 <_kernel+0x20>
  10e5b6:	eb 0a                	jmp    10e5c2 <z_time_slice+0x67>
		_current_cpu->slice_ticks = 0;
  10e5b8:	c7 05 9e f4 00 00 00 	movl   $0x0,0xf49e(%rip)        # 11da60 <_kernel+0x20>
  10e5bf:	00 00 00 
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10e5c2:	0f ba e3 09          	bt     $0x9,%ebx
  10e5c6:	73 01                	jae    10e5c9 <z_time_slice+0x6e>
		__asm__ volatile ("sti" ::: "memory");
  10e5c8:	fb                   	sti    
}
  10e5c9:	58                   	pop    %rax
  10e5ca:	5b                   	pop    %rbx
  10e5cb:	5d                   	pop    %rbp
  10e5cc:	c3                   	retq   

000000000010e5cd <ready_thread>:
  10e5cd:	8a 47 19             	mov    0x19(%rdi),%al
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
  10e5d0:	84 c0                	test   %al,%al
  10e5d2:	78 7b                	js     10e64f <ready_thread+0x82>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
  10e5d4:	a8 1f                	test   $0x1f,%al
  10e5d6:	75 77                	jne    10e64f <ready_thread+0x82>
  10e5d8:	48 83 7f 28 00       	cmpq   $0x0,0x28(%rdi)
  10e5dd:	75 70                	jne    10e64f <ready_thread+0x82>
	thread->base.thread_state |= _THREAD_QUEUED;
  10e5df:	83 c8 80             	or     $0xffffff80,%eax
  10e5e2:	88 47 19             	mov    %al,0x19(%rdi)
	return list->head == list;
  10e5e5:	48 8b 05 84 f4 00 00 	mov    0xf484(%rip),%rax        # 11da70 <_kernel+0x30>
	sys_dnode_t *const tail = list->tail;
  10e5ec:	48 8b 0d 85 f4 00 00 	mov    0xf485(%rip),%rcx        # 11da78 <_kernel+0x38>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
  10e5f3:	48 85 c0             	test   %rax,%rax
  10e5f6:	74 3b                	je     10e633 <ready_thread+0x66>
  10e5f8:	48 3d 70 da 11 00    	cmp    $0x11da70,%rax
  10e5fe:	74 33                	je     10e633 <ready_thread+0x66>
	int32_t b1 = thread_1->base.prio;
  10e600:	0f be 77 1a          	movsbl 0x1a(%rdi),%esi
	int32_t b2 = thread_2->base.prio;
  10e604:	0f be 50 1a          	movsbl 0x1a(%rax),%edx
	if (b1 != b2) {
  10e608:	39 d6                	cmp    %edx,%esi
  10e60a:	74 1a                	je     10e626 <ready_thread+0x59>
		return b2 - b1;
  10e60c:	29 f2                	sub    %esi,%edx
		if (z_sched_prio_cmp(thread, t) > 0) {
  10e60e:	85 d2                	test   %edx,%edx
  10e610:	7e 14                	jle    10e626 <ready_thread+0x59>
	sys_dnode_t *const prev = successor->prev;
  10e612:	48 8b 50 08          	mov    0x8(%rax),%rdx
	node->next = successor;
  10e616:	48 89 07             	mov    %rax,(%rdi)
	node->prev = prev;
  10e619:	48 89 57 08          	mov    %rdx,0x8(%rdi)
	prev->next = node;
  10e61d:	48 89 3a             	mov    %rdi,(%rdx)
	successor->prev = node;
  10e620:	48 89 78 08          	mov    %rdi,0x8(%rax)
}
  10e624:	eb 22                	jmp    10e648 <ready_thread+0x7b>
	return (node == list->tail) ? NULL : node->next;
  10e626:	48 39 c1             	cmp    %rax,%rcx
  10e629:	74 08                	je     10e633 <ready_thread+0x66>
  10e62b:	48 8b 00             	mov    (%rax),%rax
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
  10e62e:	48 85 c0             	test   %rax,%rax
  10e631:	75 d1                	jne    10e604 <ready_thread+0x37>
	node->next = list;
  10e633:	48 c7 07 70 da 11 00 	movq   $0x11da70,(%rdi)
	node->prev = tail;
  10e63a:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
	tail->next = node;
  10e63e:	48 89 39             	mov    %rdi,(%rcx)
	list->tail = node;
  10e641:	48 89 3d 30 f4 00 00 	mov    %rdi,0xf430(%rip)        # 11da78 <_kernel+0x38>
		update_cache(0);
  10e648:	31 ff                	xor    %edi,%edi
  10e64a:	e9 23 fe ff ff       	jmpq   10e472 <update_cache>
}
  10e64f:	c3                   	retq   

000000000010e650 <z_ready_thread>:
{
  10e650:	55                   	push   %rbp
  10e651:	48 89 e5             	mov    %rsp,%rbp
  10e654:	53                   	push   %rbx
  10e655:	52                   	push   %rdx
  10e656:	9c                   	pushfq 
  10e657:	fa                   	cli    
  10e658:	5b                   	pop    %rbx
			ready_thread(thread);
  10e659:	e8 6f ff ff ff       	callq  10e5cd <ready_thread>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10e65e:	0f ba e3 09          	bt     $0x9,%ebx
  10e662:	73 01                	jae    10e665 <z_ready_thread+0x15>
		__asm__ volatile ("sti" ::: "memory");
  10e664:	fb                   	sti    
}
  10e665:	58                   	pop    %rax
  10e666:	5b                   	pop    %rbx
  10e667:	5d                   	pop    %rbp
  10e668:	c3                   	retq   

000000000010e669 <z_sched_start>:
{
  10e669:	55                   	push   %rbp
  10e66a:	48 89 e5             	mov    %rsp,%rbp
  10e66d:	53                   	push   %rbx
  10e66e:	51                   	push   %rcx
  10e66f:	9c                   	pushfq 
  10e670:	fa                   	cli    
  10e671:	5b                   	pop    %rbx
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
  10e672:	8a 47 19             	mov    0x19(%rdi),%al
	if (z_has_thread_started(thread)) {
  10e675:	a8 04                	test   $0x4,%al
  10e677:	75 09                	jne    10e682 <z_sched_start+0x19>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10e679:	0f ba e3 09          	bt     $0x9,%ebx
  10e67d:	73 1d                	jae    10e69c <z_sched_start+0x33>
		__asm__ volatile ("sti" ::: "memory");
  10e67f:	fb                   	sti    
  10e680:	eb 1a                	jmp    10e69c <z_sched_start+0x33>
	thread->base.thread_state &= ~_THREAD_PRESTART;
  10e682:	83 e0 fb             	and    $0xfffffffb,%eax
  10e685:	88 47 19             	mov    %al,0x19(%rdi)
	ready_thread(thread);
  10e688:	e8 40 ff ff ff       	callq  10e5cd <ready_thread>
}
  10e68d:	5a                   	pop    %rdx
	z_reschedule(&sched_spinlock, key);
  10e68e:	89 de                	mov    %ebx,%esi
  10e690:	bf 3a 04 12 00       	mov    $0x12043a,%edi
}
  10e695:	5b                   	pop    %rbx
  10e696:	5d                   	pop    %rbp
	z_reschedule(&sched_spinlock, key);
  10e697:	e9 41 fd ff ff       	jmpq   10e3dd <z_reschedule>
}
  10e69c:	58                   	pop    %rax
  10e69d:	5b                   	pop    %rbx
  10e69e:	5d                   	pop    %rbp
  10e69f:	c3                   	retq   

000000000010e6a0 <z_thread_timeout>:
{
  10e6a0:	55                   	push   %rbp
  10e6a1:	48 89 f9             	mov    %rdi,%rcx
  10e6a4:	48 89 e5             	mov    %rsp,%rbp
  10e6a7:	53                   	push   %rbx
  10e6a8:	52                   	push   %rdx
  10e6a9:	9c                   	pushfq 
  10e6aa:	fa                   	cli    
  10e6ab:	5b                   	pop    %rbx
		if (!killed) {
  10e6ac:	f6 47 f1 28          	testb  $0x28,-0xf(%rdi)
  10e6b0:	75 19                	jne    10e6cb <z_thread_timeout+0x2b>
  10e6b2:	48 83 ef 28          	sub    $0x28,%rdi
			if (thread->base.pended_on != NULL) {
  10e6b6:	48 83 79 e8 00       	cmpq   $0x0,-0x18(%rcx)
  10e6bb:	74 05                	je     10e6c2 <z_thread_timeout+0x22>
				unpend_thread_no_timeout(thread);
  10e6bd:	e8 7d fb ff ff       	callq  10e23f <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
  10e6c2:	80 61 f1 eb          	andb   $0xeb,-0xf(%rcx)
			ready_thread(thread);
  10e6c6:	e8 02 ff ff ff       	callq  10e5cd <ready_thread>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10e6cb:	0f ba e3 09          	bt     $0x9,%ebx
  10e6cf:	73 01                	jae    10e6d2 <z_thread_timeout+0x32>
		__asm__ volatile ("sti" ::: "memory");
  10e6d1:	fb                   	sti    
}
  10e6d2:	58                   	pop    %rax
  10e6d3:	5b                   	pop    %rbx
  10e6d4:	5d                   	pop    %rbp
  10e6d5:	c3                   	retq   

000000000010e6d6 <unready_thread>:
{
  10e6d6:	55                   	push   %rbp
	return (thread->base.thread_state & state) != 0U;
  10e6d7:	8a 47 19             	mov    0x19(%rdi),%al
  10e6da:	48 89 e5             	mov    %rsp,%rbp
	if (z_is_thread_queued(thread)) {
  10e6dd:	84 c0                	test   %al,%al
  10e6df:	79 0b                	jns    10e6ec <unready_thread+0x16>
	thread->base.thread_state &= ~_THREAD_QUEUED;
  10e6e1:	83 e0 7f             	and    $0x7f,%eax
  10e6e4:	88 47 19             	mov    %al,0x19(%rdi)
	sys_dlist_remove(&thread->base.qnode_dlist);
  10e6e7:	e8 35 fb ff ff       	callq  10e221 <sys_dlist_remove>
	update_cache(thread == _current);
  10e6ec:	48 39 3d 5d f3 00 00 	cmp    %rdi,0xf35d(%rip)        # 11da50 <_kernel+0x10>
}
  10e6f3:	5d                   	pop    %rbp
	update_cache(thread == _current);
  10e6f4:	40 0f 94 c7          	sete   %dil
  10e6f8:	40 0f b6 ff          	movzbl %dil,%edi
  10e6fc:	e9 71 fd ff ff       	jmpq   10e472 <update_cache>

000000000010e701 <add_to_waitq_locked>:
{
  10e701:	55                   	push   %rbp
  10e702:	48 89 e5             	mov    %rsp,%rbp
  10e705:	41 54                	push   %r12
  10e707:	49 89 f4             	mov    %rsi,%r12
  10e70a:	53                   	push   %rbx
  10e70b:	48 89 fb             	mov    %rdi,%rbx
	unready_thread(thread);
  10e70e:	e8 c3 ff ff ff       	callq  10e6d6 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
  10e713:	80 4b 19 02          	orb    $0x2,0x19(%rbx)
	if (wait_q != NULL) {
  10e717:	4d 85 e4             	test   %r12,%r12
  10e71a:	74 5b                	je     10e777 <add_to_waitq_locked+0x76>
	return list->head == list;
  10e71c:	49 8b 04 24          	mov    (%r12),%rax
		thread->base.pended_on = wait_q;
  10e720:	4c 89 63 10          	mov    %r12,0x10(%rbx)
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
  10e724:	48 85 c0             	test   %rax,%rax
  10e727:	74 3a                	je     10e763 <add_to_waitq_locked+0x62>
  10e729:	49 39 c4             	cmp    %rax,%r12
  10e72c:	74 35                	je     10e763 <add_to_waitq_locked+0x62>
	int32_t b1 = thread_1->base.prio;
  10e72e:	0f be 4b 1a          	movsbl 0x1a(%rbx),%ecx
	int32_t b2 = thread_2->base.prio;
  10e732:	0f be 50 1a          	movsbl 0x1a(%rax),%edx
	if (b1 != b2) {
  10e736:	39 d1                	cmp    %edx,%ecx
  10e738:	74 1a                	je     10e754 <add_to_waitq_locked+0x53>
		return b2 - b1;
  10e73a:	29 ca                	sub    %ecx,%edx
		if (z_sched_prio_cmp(thread, t) > 0) {
  10e73c:	85 d2                	test   %edx,%edx
  10e73e:	7e 14                	jle    10e754 <add_to_waitq_locked+0x53>
	sys_dnode_t *const prev = successor->prev;
  10e740:	48 8b 50 08          	mov    0x8(%rax),%rdx
	node->next = successor;
  10e744:	48 89 03             	mov    %rax,(%rbx)
	node->prev = prev;
  10e747:	48 89 53 08          	mov    %rdx,0x8(%rbx)
	prev->next = node;
  10e74b:	48 89 1a             	mov    %rbx,(%rdx)
	successor->prev = node;
  10e74e:	48 89 58 08          	mov    %rbx,0x8(%rax)
}
  10e752:	eb 23                	jmp    10e777 <add_to_waitq_locked+0x76>
	return (node == list->tail) ? NULL : node->next;
  10e754:	49 3b 44 24 08       	cmp    0x8(%r12),%rax
  10e759:	74 08                	je     10e763 <add_to_waitq_locked+0x62>
  10e75b:	48 8b 00             	mov    (%rax),%rax
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
  10e75e:	48 85 c0             	test   %rax,%rax
  10e761:	75 cf                	jne    10e732 <add_to_waitq_locked+0x31>
	sys_dnode_t *const tail = list->tail;
  10e763:	49 8b 44 24 08       	mov    0x8(%r12),%rax
	node->next = list;
  10e768:	4c 89 23             	mov    %r12,(%rbx)
	node->prev = tail;
  10e76b:	48 89 43 08          	mov    %rax,0x8(%rbx)
	tail->next = node;
  10e76f:	48 89 18             	mov    %rbx,(%rax)
	list->tail = node;
  10e772:	49 89 5c 24 08       	mov    %rbx,0x8(%r12)
}
  10e777:	5b                   	pop    %rbx
  10e778:	41 5c                	pop    %r12
  10e77a:	5d                   	pop    %rbp
  10e77b:	c3                   	retq   

000000000010e77c <pend>:
{
  10e77c:	55                   	push   %rbp
  10e77d:	48 89 e5             	mov    %rsp,%rbp
  10e780:	41 55                	push   %r13
  10e782:	53                   	push   %rbx
  10e783:	48 89 fb             	mov    %rdi,%rbx
  10e786:	48 83 ec 10          	sub    $0x10,%rsp
  10e78a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  10e78e:	9c                   	pushfq 
  10e78f:	fa                   	cli    
  10e790:	41 5d                	pop    %r13
		add_to_waitq_locked(thread, wait_q);
  10e792:	e8 6a ff ff ff       	callq  10e701 <add_to_waitq_locked>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10e797:	41 0f ba e5 09       	bt     $0x9,%r13d
  10e79c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10e7a0:	73 01                	jae    10e7a3 <pend+0x27>
		__asm__ volatile ("sti" ::: "memory");
  10e7a2:	fb                   	sti    
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
  10e7a3:	48 83 fa ff          	cmp    $0xffffffffffffffff,%rdx
  10e7a7:	74 15                	je     10e7be <pend+0x42>
}
  10e7a9:	59                   	pop    %rcx
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
  10e7aa:	48 8d 7b 28          	lea    0x28(%rbx),%rdi
  10e7ae:	41 58                	pop    %r8
  10e7b0:	be a0 e6 10 00       	mov    $0x10e6a0,%esi
  10e7b5:	5b                   	pop    %rbx
  10e7b6:	41 5d                	pop    %r13
  10e7b8:	5d                   	pop    %rbp
  10e7b9:	e9 41 05 00 00       	jmpq   10ecff <z_add_timeout>
  10e7be:	58                   	pop    %rax
  10e7bf:	5a                   	pop    %rdx
  10e7c0:	5b                   	pop    %rbx
  10e7c1:	41 5d                	pop    %r13
  10e7c3:	5d                   	pop    %rbp
  10e7c4:	c3                   	retq   

000000000010e7c5 <z_pend_curr>:
{
  10e7c5:	55                   	push   %rbp
  10e7c6:	48 89 e5             	mov    %rsp,%rbp
  10e7c9:	41 55                	push   %r13
  10e7cb:	41 89 f5             	mov    %esi,%r13d
  10e7ce:	48 89 d6             	mov    %rdx,%rsi
  10e7d1:	41 54                	push   %r12
  10e7d3:	49 89 fc             	mov    %rdi,%r12
	pend(_current, wait_q, timeout);
  10e7d6:	48 8b 3d 73 f2 00 00 	mov    0xf273(%rip),%rdi        # 11da50 <_kernel+0x10>
{
  10e7dd:	48 89 ca             	mov    %rcx,%rdx
	pend(_current, wait_q, timeout);
  10e7e0:	e8 97 ff ff ff       	callq  10e77c <pend>
	return z_swap(lock, key);
  10e7e5:	44 89 ee             	mov    %r13d,%esi
  10e7e8:	4c 89 e7             	mov    %r12,%rdi
}
  10e7eb:	41 5c                	pop    %r12
  10e7ed:	41 5d                	pop    %r13
  10e7ef:	5d                   	pop    %rbp
	return z_swap(lock, key);
  10e7f0:	e9 f3 fa ff ff       	jmpq   10e2e8 <z_swap>

000000000010e7f5 <z_set_prio>:
{
  10e7f5:	55                   	push   %rbp
  10e7f6:	48 89 e5             	mov    %rsp,%rbp
  10e7f9:	53                   	push   %rbx
  10e7fa:	51                   	push   %rcx
  10e7fb:	9c                   	pushfq 
  10e7fc:	fa                   	cli    
  10e7fd:	5b                   	pop    %rbx
	uint8_t state = thread->base.thread_state;
  10e7fe:	8a 47 19             	mov    0x19(%rdi),%al
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
  10e801:	a8 1f                	test   $0x1f,%al
  10e803:	0f 85 90 00 00 00    	jne    10e899 <z_set_prio+0xa4>
		if (need_sched) {
  10e809:	48 83 7f 28 00       	cmpq   $0x0,0x28(%rdi)
  10e80e:	0f 85 85 00 00 00    	jne    10e899 <z_set_prio+0xa4>
	thread->base.thread_state &= ~_THREAD_QUEUED;
  10e814:	83 e0 7f             	and    $0x7f,%eax
  10e817:	89 f1                	mov    %esi,%ecx
  10e819:	88 47 19             	mov    %al,0x19(%rdi)
	sys_dlist_remove(&thread->base.qnode_dlist);
  10e81c:	e8 00 fa ff ff       	callq  10e221 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
  10e821:	80 4f 19 80          	orb    $0x80,0x19(%rdi)
	return list->head == list;
  10e825:	48 8b 05 44 f2 00 00 	mov    0xf244(%rip),%rax        # 11da70 <_kernel+0x30>
				thread->base.prio = prio;
  10e82c:	40 88 77 1a          	mov    %sil,0x1a(%rdi)
  10e830:	48 8b 35 41 f2 00 00 	mov    0xf241(%rip),%rsi        # 11da78 <_kernel+0x38>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
  10e837:	48 85 c0             	test   %rax,%rax
  10e83a:	74 3a                	je     10e876 <z_set_prio+0x81>
  10e83c:	48 3d 70 da 11 00    	cmp    $0x11da70,%rax
  10e842:	74 32                	je     10e876 <z_set_prio+0x81>
	int32_t b1 = thread_1->base.prio;
  10e844:	0f be d1             	movsbl %cl,%edx
	int32_t b2 = thread_2->base.prio;
  10e847:	0f be 48 1a          	movsbl 0x1a(%rax),%ecx
	if (b1 != b2) {
  10e84b:	39 ca                	cmp    %ecx,%edx
  10e84d:	74 1a                	je     10e869 <z_set_prio+0x74>
		return b2 - b1;
  10e84f:	29 d1                	sub    %edx,%ecx
		if (z_sched_prio_cmp(thread, t) > 0) {
  10e851:	85 c9                	test   %ecx,%ecx
  10e853:	7e 14                	jle    10e869 <z_set_prio+0x74>
	sys_dnode_t *const prev = successor->prev;
  10e855:	48 8b 50 08          	mov    0x8(%rax),%rdx
	node->next = successor;
  10e859:	48 89 07             	mov    %rax,(%rdi)
	node->prev = prev;
  10e85c:	48 89 57 08          	mov    %rdx,0x8(%rdi)
	prev->next = node;
  10e860:	48 89 3a             	mov    %rdi,(%rdx)
	successor->prev = node;
  10e863:	48 89 78 08          	mov    %rdi,0x8(%rax)
}
  10e867:	eb 22                	jmp    10e88b <z_set_prio+0x96>
	return (node == list->tail) ? NULL : node->next;
  10e869:	48 39 f0             	cmp    %rsi,%rax
  10e86c:	74 08                	je     10e876 <z_set_prio+0x81>
  10e86e:	48 8b 00             	mov    (%rax),%rax
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
  10e871:	48 85 c0             	test   %rax,%rax
  10e874:	75 d1                	jne    10e847 <z_set_prio+0x52>
	node->next = list;
  10e876:	48 c7 07 70 da 11 00 	movq   $0x11da70,(%rdi)
	node->prev = tail;
  10e87d:	48 89 77 08          	mov    %rsi,0x8(%rdi)
	tail->next = node;
  10e881:	48 89 3e             	mov    %rdi,(%rsi)
	list->tail = node;
  10e884:	48 89 3d ed f1 00 00 	mov    %rdi,0xf1ed(%rip)        # 11da78 <_kernel+0x38>
			update_cache(1);
  10e88b:	bf 01 00 00 00       	mov    $0x1,%edi
  10e890:	e8 dd fb ff ff       	callq  10e472 <update_cache>
  10e895:	b0 01                	mov    $0x1,%al
  10e897:	eb 06                	jmp    10e89f <z_set_prio+0xaa>
			thread->base.prio = prio;
  10e899:	40 88 77 1a          	mov    %sil,0x1a(%rdi)
  10e89d:	31 c0                	xor    %eax,%eax
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10e89f:	0f ba e3 09          	bt     $0x9,%ebx
  10e8a3:	73 01                	jae    10e8a6 <z_set_prio+0xb1>
		__asm__ volatile ("sti" ::: "memory");
  10e8a5:	fb                   	sti    
}
  10e8a6:	5a                   	pop    %rdx
  10e8a7:	5b                   	pop    %rbx
  10e8a8:	5d                   	pop    %rbp
  10e8a9:	c3                   	retq   

000000000010e8aa <z_impl_k_thread_suspend>:
{
  10e8aa:	55                   	push   %rbp
  10e8ab:	48 89 e5             	mov    %rsp,%rbp
  10e8ae:	41 54                	push   %r12
  10e8b0:	53                   	push   %rbx
  10e8b1:	48 89 fb             	mov    %rdi,%rbx
	return z_abort_timeout(&thread->base.timeout);
  10e8b4:	48 83 c7 28          	add    $0x28,%rdi
  10e8b8:	e8 40 05 00 00       	callq  10edfd <z_abort_timeout>
  10e8bd:	9c                   	pushfq 
  10e8be:	fa                   	cli    
  10e8bf:	41 5c                	pop    %r12
	return (thread->base.thread_state & state) != 0U;
  10e8c1:	8a 43 19             	mov    0x19(%rbx),%al
		if (z_is_thread_queued(thread)) {
  10e8c4:	84 c0                	test   %al,%al
  10e8c6:	79 0e                	jns    10e8d6 <z_impl_k_thread_suspend+0x2c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
  10e8c8:	83 e0 7f             	and    $0x7f,%eax
	sys_dlist_remove(&thread->base.qnode_dlist);
  10e8cb:	48 89 df             	mov    %rbx,%rdi
	thread->base.thread_state &= ~_THREAD_QUEUED;
  10e8ce:	88 43 19             	mov    %al,0x19(%rbx)
	sys_dlist_remove(&thread->base.qnode_dlist);
  10e8d1:	e8 4b f9 ff ff       	callq  10e221 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_SUSPENDED;
  10e8d6:	80 4b 19 10          	orb    $0x10,0x19(%rbx)
		update_cache(thread == _current);
  10e8da:	31 ff                	xor    %edi,%edi
  10e8dc:	48 39 1d 6d f1 00 00 	cmp    %rbx,0xf16d(%rip)        # 11da50 <_kernel+0x10>
  10e8e3:	40 0f 94 c7          	sete   %dil
  10e8e7:	e8 86 fb ff ff       	callq  10e472 <update_cache>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10e8ec:	41 0f ba e4 09       	bt     $0x9,%r12d
  10e8f1:	73 01                	jae    10e8f4 <z_impl_k_thread_suspend+0x4a>
		__asm__ volatile ("sti" ::: "memory");
  10e8f3:	fb                   	sti    
	if (thread == _current) {
  10e8f4:	48 39 1d 55 f1 00 00 	cmp    %rbx,0xf155(%rip)        # 11da50 <_kernel+0x10>
  10e8fb:	75 09                	jne    10e906 <z_impl_k_thread_suspend+0x5c>
}
  10e8fd:	5b                   	pop    %rbx
  10e8fe:	41 5c                	pop    %r12
  10e900:	5d                   	pop    %rbp
		z_reschedule_unlocked();
  10e901:	e9 13 fb ff ff       	jmpq   10e419 <z_reschedule_unlocked>
}
  10e906:	5b                   	pop    %rbx
  10e907:	41 5c                	pop    %r12
  10e909:	5d                   	pop    %rbp
  10e90a:	c3                   	retq   

000000000010e90b <k_sched_unlock>:
{
  10e90b:	55                   	push   %rbp
  10e90c:	48 89 e5             	mov    %rsp,%rbp
  10e90f:	53                   	push   %rbx
  10e910:	52                   	push   %rdx
  10e911:	9c                   	pushfq 
  10e912:	fa                   	cli    
  10e913:	5b                   	pop    %rbx
		++_current->base.sched_locked;
  10e914:	48 8b 05 35 f1 00 00 	mov    0xf135(%rip),%rax        # 11da50 <_kernel+0x10>
		update_cache(0);
  10e91b:	31 ff                	xor    %edi,%edi
		++_current->base.sched_locked;
  10e91d:	fe 40 1b             	incb   0x1b(%rax)
		update_cache(0);
  10e920:	e8 4d fb ff ff       	callq  10e472 <update_cache>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10e925:	0f ba e3 09          	bt     $0x9,%ebx
  10e929:	73 01                	jae    10e92c <k_sched_unlock+0x21>
		__asm__ volatile ("sti" ::: "memory");
  10e92b:	fb                   	sti    
}
  10e92c:	58                   	pop    %rax
  10e92d:	5b                   	pop    %rbx
  10e92e:	5d                   	pop    %rbp
	z_reschedule_unlocked();
  10e92f:	e9 e5 fa ff ff       	jmpq   10e419 <z_reschedule_unlocked>

000000000010e934 <z_unpend_first_thread>:
{
  10e934:	55                   	push   %rbp
  10e935:	48 89 e5             	mov    %rsp,%rbp
  10e938:	41 54                	push   %r12
  10e93a:	53                   	push   %rbx
  10e93b:	9c                   	pushfq 
  10e93c:	fa                   	cli    
  10e93d:	5b                   	pop    %rbx
		thread = _priq_wait_best(&wait_q->waitq);
  10e93e:	e8 1f fb ff ff       	callq  10e462 <z_priq_dumb_best>
  10e943:	49 89 c4             	mov    %rax,%r12
		if (thread != NULL) {
  10e946:	48 85 c0             	test   %rax,%rax
  10e949:	74 12                	je     10e95d <z_unpend_first_thread+0x29>
			unpend_thread_no_timeout(thread);
  10e94b:	48 89 c7             	mov    %rax,%rdi
  10e94e:	e8 ec f8 ff ff       	callq  10e23f <unpend_thread_no_timeout>
  10e953:	49 8d 7c 24 28       	lea    0x28(%r12),%rdi
  10e958:	e8 a0 04 00 00       	callq  10edfd <z_abort_timeout>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10e95d:	0f ba e3 09          	bt     $0x9,%ebx
  10e961:	73 01                	jae    10e964 <z_unpend_first_thread+0x30>
		__asm__ volatile ("sti" ::: "memory");
  10e963:	fb                   	sti    
}
  10e964:	4c 89 e0             	mov    %r12,%rax
  10e967:	5b                   	pop    %rbx
  10e968:	41 5c                	pop    %r12
  10e96a:	5d                   	pop    %rbp
  10e96b:	c3                   	retq   

000000000010e96c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
  10e96c:	48 c7 05 f9 f0 00 00 	movq   $0x11da70,0xf0f9(%rip)        # 11da70 <_kernel+0x30>
  10e973:	70 da 11 00 
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
  10e977:	31 f6                	xor    %esi,%esi
  10e979:	31 ff                	xor    %edi,%edi
	list->tail = (sys_dnode_t *)list;
  10e97b:	48 c7 05 f2 f0 00 00 	movq   $0x11da70,0xf0f2(%rip)        # 11da78 <_kernel+0x38>
  10e982:	70 da 11 00 
  10e986:	e9 cf f9 ff ff       	jmpq   10e35a <k_sched_time_slice_set>

000000000010e98b <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
  10e98b:	55                   	push   %rbp
  10e98c:	48 89 e5             	mov    %rsp,%rbp
  10e98f:	53                   	push   %rbx
  10e990:	52                   	push   %rdx
  10e991:	9c                   	pushfq 
  10e992:	fa                   	cli    
  10e993:	5b                   	pop    %rbx

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
  10e994:	48 8b 3d b5 f0 00 00 	mov    0xf0b5(%rip),%rdi        # 11da50 <_kernel+0x10>
	thread->base.thread_state &= ~_THREAD_QUEUED;
  10e99b:	80 67 19 7f          	andb   $0x7f,0x19(%rdi)
	sys_dlist_remove(&thread->base.qnode_dlist);
  10e99f:	e8 7d f8 ff ff       	callq  10e221 <sys_dlist_remove>
	}
	queue_thread(_current);
  10e9a4:	48 8b 05 a5 f0 00 00 	mov    0xf0a5(%rip),%rax        # 11da50 <_kernel+0x10>
	thread->base.thread_state |= _THREAD_QUEUED;
  10e9ab:	80 48 19 80          	orb    $0x80,0x19(%rax)
	return list->head == list;
  10e9af:	48 8b 15 ba f0 00 00 	mov    0xf0ba(%rip),%rdx        # 11da70 <_kernel+0x30>
  10e9b6:	48 8b 35 bb f0 00 00 	mov    0xf0bb(%rip),%rsi        # 11da78 <_kernel+0x38>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
  10e9bd:	48 85 d2             	test   %rdx,%rdx
  10e9c0:	74 3c                	je     10e9fe <z_impl_k_yield+0x73>
  10e9c2:	48 81 fa 70 da 11 00 	cmp    $0x11da70,%rdx
  10e9c9:	74 33                	je     10e9fe <z_impl_k_yield+0x73>
	int32_t b1 = thread_1->base.prio;
  10e9cb:	0f be 78 1a          	movsbl 0x1a(%rax),%edi
	int32_t b2 = thread_2->base.prio;
  10e9cf:	0f be 4a 1a          	movsbl 0x1a(%rdx),%ecx
	if (b1 != b2) {
  10e9d3:	39 cf                	cmp    %ecx,%edi
  10e9d5:	74 1a                	je     10e9f1 <z_impl_k_yield+0x66>
		return b2 - b1;
  10e9d7:	29 f9                	sub    %edi,%ecx
		if (z_sched_prio_cmp(thread, t) > 0) {
  10e9d9:	85 c9                	test   %ecx,%ecx
  10e9db:	7e 14                	jle    10e9f1 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
  10e9dd:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
	node->next = successor;
  10e9e1:	48 89 10             	mov    %rdx,(%rax)
	node->prev = prev;
  10e9e4:	48 89 48 08          	mov    %rcx,0x8(%rax)
	prev->next = node;
  10e9e8:	48 89 01             	mov    %rax,(%rcx)
	successor->prev = node;
  10e9eb:	48 89 42 08          	mov    %rax,0x8(%rdx)
}
  10e9ef:	eb 22                	jmp    10ea13 <z_impl_k_yield+0x88>
	return (node == list->tail) ? NULL : node->next;
  10e9f1:	48 39 f2             	cmp    %rsi,%rdx
  10e9f4:	74 08                	je     10e9fe <z_impl_k_yield+0x73>
  10e9f6:	48 8b 12             	mov    (%rdx),%rdx
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
  10e9f9:	48 85 d2             	test   %rdx,%rdx
  10e9fc:	75 d1                	jne    10e9cf <z_impl_k_yield+0x44>
	node->next = list;
  10e9fe:	48 c7 00 70 da 11 00 	movq   $0x11da70,(%rax)
	node->prev = tail;
  10ea05:	48 89 70 08          	mov    %rsi,0x8(%rax)
	tail->next = node;
  10ea09:	48 89 06             	mov    %rax,(%rsi)
	list->tail = node;
  10ea0c:	48 89 05 65 f0 00 00 	mov    %rax,0xf065(%rip)        # 11da78 <_kernel+0x38>
	update_cache(1);
  10ea13:	bf 01 00 00 00       	mov    $0x1,%edi
  10ea18:	e8 55 fa ff ff       	callq  10e472 <update_cache>
	z_swap(&sched_spinlock, key);
}
  10ea1d:	58                   	pop    %rax
	z_swap(&sched_spinlock, key);
  10ea1e:	89 de                	mov    %ebx,%esi
  10ea20:	bf 3a 04 12 00       	mov    $0x12043a,%edi
}
  10ea25:	5b                   	pop    %rbx
  10ea26:	5d                   	pop    %rbp
	z_swap(&sched_spinlock, key);
  10ea27:	e9 bc f8 ff ff       	jmpq   10e2e8 <z_swap>

000000000010ea2c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
  10ea2c:	55                   	push   %rbp
  10ea2d:	48 89 e5             	mov    %rsp,%rbp
  10ea30:	41 55                	push   %r13
  10ea32:	41 54                	push   %r12
  10ea34:	53                   	push   %rbx
  10ea35:	51                   	push   %rcx
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
  10ea36:	48 85 ff             	test   %rdi,%rdi
  10ea39:	75 09                	jne    10ea44 <z_tick_sleep+0x18>
	z_impl_k_yield();
  10ea3b:	e8 4b ff ff ff       	callq  10e98b <z_impl_k_yield>
		k_yield();
		return 0;
  10ea40:	31 c0                	xor    %eax,%eax
}
  10ea42:	eb 7e                	jmp    10eac2 <z_tick_sleep+0x96>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
  10ea44:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
  10ea4b:	49 89 fc             	mov    %rdi,%r12
  10ea4e:	48 29 f8             	sub    %rdi,%rax
  10ea51:	48 85 c0             	test   %rax,%rax
  10ea54:	7f 0b                	jg     10ea61 <z_tick_sleep+0x35>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
  10ea56:	e8 ea 04 00 00       	callq  10ef45 <sys_clock_tick_get_32>
  10ea5b:	42 8d 1c 20          	lea    (%rax,%r12,1),%ebx
  10ea5f:	eb 07                	jmp    10ea68 <z_tick_sleep+0x3c>
	} else {
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
  10ea61:	bb fe ff ff ff       	mov    $0xfffffffe,%ebx
  10ea66:	29 fb                	sub    %edi,%ebx
  10ea68:	9c                   	pushfq 
  10ea69:	fa                   	cli    
  10ea6a:	41 5d                	pop    %r13
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
#endif
	unready_thread(_current);
  10ea6c:	48 8b 3d dd ef 00 00 	mov    0xefdd(%rip),%rdi        # 11da50 <_kernel+0x10>
  10ea73:	e8 5e fc ff ff       	callq  10e6d6 <unready_thread>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
  10ea78:	48 8b 05 d1 ef 00 00 	mov    0xefd1(%rip),%rax        # 11da50 <_kernel+0x10>
  10ea7f:	4c 89 e2             	mov    %r12,%rdx
  10ea82:	be a0 e6 10 00       	mov    $0x10e6a0,%esi
  10ea87:	48 8d 78 28          	lea    0x28(%rax),%rdi
  10ea8b:	e8 6f 02 00 00       	callq  10ecff <z_add_timeout>
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);
  10ea90:	48 8b 05 b9 ef 00 00 	mov    0xefb9(%rip),%rax        # 11da50 <_kernel+0x10>

	(void)z_swap(&sched_spinlock, key);
  10ea97:	44 89 ee             	mov    %r13d,%esi
  10ea9a:	bf 3a 04 12 00       	mov    $0x12043a,%edi
  10ea9f:	80 48 19 10          	orb    $0x10,0x19(%rax)
  10eaa3:	e8 40 f8 ff ff       	callq  10e2e8 <z_swap>

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
  10eaa8:	e8 98 04 00 00       	callq  10ef45 <sys_clock_tick_get_32>
  10eaad:	89 c2                	mov    %eax,%edx
  10eaaf:	89 d8                	mov    %ebx,%eax
  10eab1:	48 29 d0             	sub    %rdx,%rax
  10eab4:	48 89 c3             	mov    %rax,%rbx
	if (ticks > 0) {
		return ticks;
  10eab7:	48 85 c0             	test   %rax,%rax
  10eaba:	b8 00 00 00 00       	mov    $0x0,%eax
  10eabf:	0f 4f c3             	cmovg  %ebx,%eax
	}
#endif

	return 0;
}
  10eac2:	5a                   	pop    %rdx
  10eac3:	5b                   	pop    %rbx
  10eac4:	41 5c                	pop    %r12
  10eac6:	41 5d                	pop    %r13
  10eac8:	5d                   	pop    %rbp
  10eac9:	c3                   	retq   

000000000010eaca <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
  10eaca:	55                   	push   %rbp
  10eacb:	48 89 e5             	mov    %rsp,%rbp
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
  10eace:	48 83 ff ff          	cmp    $0xffffffffffffffff,%rdi
  10ead2:	75 11                	jne    10eae5 <z_impl_k_sleep+0x1b>
		k_thread_suspend(_current);
  10ead4:	48 8b 3d 75 ef 00 00 	mov    0xef75(%rip),%rdi        # 11da50 <_kernel+0x10>
	z_impl_k_thread_suspend(thread);
  10eadb:	e8 ca fd ff ff       	callq  10e8aa <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
  10eae0:	83 c8 ff             	or     $0xffffffff,%eax
}
  10eae3:	eb 08                	jmp    10eaed <z_impl_k_sleep+0x23>
	}

	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
  10eae5:	e8 42 ff ff ff       	callq  10ea2c <z_tick_sleep>

	int32_t ret = k_ticks_to_ms_floor64(ticks);
  10eaea:	6b c0 0a             	imul   $0xa,%eax,%eax

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
  10eaed:	5d                   	pop    %rbp
  10eaee:	c3                   	retq   

000000000010eaef <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
  10eaef:	48 8b 05 5a ef 00 00 	mov    0xef5a(%rip),%rax        # 11da50 <_kernel+0x10>
  10eaf6:	c3                   	retq   

000000000010eaf7 <z_impl_k_is_preempt_thread>:
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
  10eaf7:	31 c0                	xor    %eax,%eax
  10eaf9:	83 3d 40 ef 00 00 00 	cmpl   $0x0,0xef40(%rip)        # 11da40 <_kernel>
  10eb00:	75 12                	jne    10eb14 <z_impl_k_is_preempt_thread+0x1d>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
  10eb02:	48 8b 05 47 ef 00 00 	mov    0xef47(%rip),%rax        # 11da50 <_kernel+0x10>
	return !arch_is_in_isr() && is_preempt(_current);
  10eb09:	66 83 78 1a 7f       	cmpw   $0x7f,0x1a(%rax)
  10eb0e:	0f 96 c0             	setbe  %al
  10eb11:	0f b6 c0             	movzbl %al,%eax
}
  10eb14:	c3                   	retq   

000000000010eb15 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
  10eb15:	55                   	push   %rbp
  10eb16:	48 89 e5             	mov    %rsp,%rbp
  10eb19:	41 56                	push   %r14
  10eb1b:	41 55                	push   %r13
  10eb1d:	41 54                	push   %r12
  10eb1f:	53                   	push   %rbx
  10eb20:	9c                   	pushfq 
  10eb21:	fa                   	cli    
  10eb22:	41 5c                	pop    %r12
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
  10eb24:	8a 47 19             	mov    0x19(%rdi),%al
  10eb27:	a8 08                	test   $0x8,%al
  10eb29:	0f 85 9f 00 00 00    	jne    10ebce <z_thread_abort+0xb9>
		thread->base.thread_state &= ~_THREAD_ABORTING;
  10eb2f:	89 c2                	mov    %eax,%edx
  10eb31:	48 89 fb             	mov    %rdi,%rbx
  10eb34:	83 e2 df             	and    $0xffffffdf,%edx
		if (z_is_thread_queued(thread)) {
  10eb37:	80 ca 08             	or     $0x8,%dl
  10eb3a:	78 05                	js     10eb41 <z_thread_abort+0x2c>
		thread->base.thread_state &= ~_THREAD_ABORTING;
  10eb3c:	88 57 19             	mov    %dl,0x19(%rdi)
  10eb3f:	eb 0e                	jmp    10eb4f <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
  10eb41:	83 e0 5f             	and    $0x5f,%eax
  10eb44:	83 c8 08             	or     $0x8,%eax
  10eb47:	88 47 19             	mov    %al,0x19(%rdi)
	sys_dlist_remove(&thread->base.qnode_dlist);
  10eb4a:	e8 d2 f6 ff ff       	callq  10e221 <sys_dlist_remove>
		if (thread->base.pended_on != NULL) {
  10eb4f:	48 83 7b 10 00       	cmpq   $0x0,0x10(%rbx)
  10eb54:	74 08                	je     10eb5e <z_thread_abort+0x49>
			unpend_thread_no_timeout(thread);
  10eb56:	48 89 df             	mov    %rbx,%rdi
  10eb59:	e8 e1 f6 ff ff       	callq  10e23f <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
  10eb5e:	48 8d 7b 28          	lea    0x28(%rbx),%rdi
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
  10eb62:	4c 8d b3 98 00 00 00 	lea    0x98(%rbx),%r14
  10eb69:	e8 8f 02 00 00       	callq  10edfd <z_abort_timeout>
	return list->head == list;
  10eb6e:	4c 8b ab 98 00 00 00 	mov    0x98(%rbx),%r13
	while ((thread = z_waitq_head(wait_q)) != NULL) {
  10eb75:	4d 85 ed             	test   %r13,%r13
  10eb78:	74 2b                	je     10eba5 <z_thread_abort+0x90>
  10eb7a:	4d 39 f5             	cmp    %r14,%r13
  10eb7d:	74 26                	je     10eba5 <z_thread_abort+0x90>
		unpend_thread_no_timeout(thread);
  10eb7f:	4c 89 ef             	mov    %r13,%rdi
  10eb82:	e8 b8 f6 ff ff       	callq  10e23f <unpend_thread_no_timeout>
  10eb87:	49 8d 7d 28          	lea    0x28(%r13),%rdi
  10eb8b:	e8 6d 02 00 00       	callq  10edfd <z_abort_timeout>
		ready_thread(thread);
  10eb90:	4c 89 ef             	mov    %r13,%rdi
  10eb93:	41 c7 85 b0 00 00 00 	movl   $0x0,0xb0(%r13)
  10eb9a:	00 00 00 00 
  10eb9e:	e8 2a fa ff ff       	callq  10e5cd <ready_thread>
  10eba3:	eb c9                	jmp    10eb6e <z_thread_abort+0x59>
		update_cache(1);
  10eba5:	bf 01 00 00 00       	mov    $0x1,%edi
  10ebaa:	e8 c3 f8 ff ff       	callq  10e472 <update_cache>
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
  10ebaf:	48 39 1d 9a ee 00 00 	cmp    %rbx,0xee9a(%rip)        # 11da50 <_kernel+0x10>
  10ebb6:	75 16                	jne    10ebce <z_thread_abort+0xb9>
  10ebb8:	83 3d 81 ee 00 00 00 	cmpl   $0x0,0xee81(%rip)        # 11da40 <_kernel>
  10ebbf:	75 0d                	jne    10ebce <z_thread_abort+0xb9>
		z_swap(&sched_spinlock, key);
  10ebc1:	44 89 e6             	mov    %r12d,%esi
  10ebc4:	bf 3a 04 12 00       	mov    $0x12043a,%edi
  10ebc9:	e8 1a f7 ff ff       	callq  10e2e8 <z_swap>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10ebce:	41 0f ba e4 09       	bt     $0x9,%r12d
  10ebd3:	73 01                	jae    10ebd6 <z_thread_abort+0xc1>
		__asm__ volatile ("sti" ::: "memory");
  10ebd5:	fb                   	sti    
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
  10ebd6:	5b                   	pop    %rbx
  10ebd7:	41 5c                	pop    %r12
  10ebd9:	41 5d                	pop    %r13
  10ebdb:	41 5e                	pop    %r14
  10ebdd:	5d                   	pop    %rbp
  10ebde:	c3                   	retq   

000000000010ebdf <z_impl_k_thread_abort>:
#if !defined(CONFIG_ARCH_HAS_THREAD_ABORT)
void z_impl_k_thread_abort(struct k_thread *thread)
{
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_thread, abort, thread);

	z_thread_abort(thread);
  10ebdf:	e9 31 ff ff ff       	jmpq   10eb15 <z_thread_abort>

000000000010ebe4 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
  10ebe4:	55                   	push   %rbp
  10ebe5:	48 89 e5             	mov    %rsp,%rbp
  10ebe8:	41 54                	push   %r12
  10ebea:	53                   	push   %rbx
  10ebeb:	9c                   	pushfq 
  10ebec:	fa                   	cli    
  10ebed:	5b                   	pop    %rbx
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
  10ebee:	e8 6f f8 ff ff       	callq  10e462 <z_priq_dumb_best>
  10ebf3:	49 89 c4             	mov    %rax,%r12

		if (thread != NULL) {
  10ebf6:	31 c0                	xor    %eax,%eax
  10ebf8:	4d 85 e4             	test   %r12,%r12
  10ebfb:	74 29                	je     10ec26 <z_sched_wake+0x42>
  10ebfd:	41 89 b4 24 b0 00 00 	mov    %esi,0xb0(%r12)
  10ec04:	00 
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
  10ec05:	4c 89 e7             	mov    %r12,%rdi
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
  10ec08:	49 89 54 24 20       	mov    %rdx,0x20(%r12)
  10ec0d:	e8 2d f6 ff ff       	callq  10e23f <unpend_thread_no_timeout>
  10ec12:	49 8d 7c 24 28       	lea    0x28(%r12),%rdi
  10ec17:	e8 e1 01 00 00       	callq  10edfd <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
  10ec1c:	4c 89 e7             	mov    %r12,%rdi
  10ec1f:	e8 a9 f9 ff ff       	callq  10e5cd <ready_thread>
			ret = true;
  10ec24:	b0 01                	mov    $0x1,%al
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10ec26:	0f ba e3 09          	bt     $0x9,%ebx
  10ec2a:	73 01                	jae    10ec2d <z_sched_wake+0x49>
		__asm__ volatile ("sti" ::: "memory");
  10ec2c:	fb                   	sti    
		}
	}

	return ret;
}
  10ec2d:	5b                   	pop    %rbx
  10ec2e:	41 5c                	pop    %r12
  10ec30:	5d                   	pop    %rbp
  10ec31:	c3                   	retq   

000000000010ec32 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
  10ec32:	55                   	push   %rbp
  10ec33:	48 89 e5             	mov    %rsp,%rbp
  10ec36:	53                   	push   %rbx
  10ec37:	4c 89 c3             	mov    %r8,%rbx
  10ec3a:	41 51                	push   %r9
	int ret = z_pend_curr(lock, key, wait_q, timeout);
  10ec3c:	e8 84 fb ff ff       	callq  10e7c5 <z_pend_curr>

	if (data != NULL) {
  10ec41:	48 85 db             	test   %rbx,%rbx
  10ec44:	74 0e                	je     10ec54 <z_sched_wait+0x22>
		*data = _current->base.swap_data;
  10ec46:	48 8b 15 03 ee 00 00 	mov    0xee03(%rip),%rdx        # 11da50 <_kernel+0x10>
  10ec4d:	48 8b 52 20          	mov    0x20(%rdx),%rdx
  10ec51:	48 89 13             	mov    %rdx,(%rbx)
	}
	return ret;
}
  10ec54:	5a                   	pop    %rdx
  10ec55:	5b                   	pop    %rbx
  10ec56:	5d                   	pop    %rbp
  10ec57:	c3                   	retq   

000000000010ec58 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
  10ec58:	83 3d d1 17 01 00 00 	cmpl   $0x0,0x117d1(%rip)        # 120430 <announce_remaining>
  10ec5f:	75 05                	jne    10ec66 <elapsed+0xe>
  10ec61:	e9 b7 ee ff ff       	jmpq   10db1d <sys_clock_elapsed>
}
  10ec66:	31 c0                	xor    %eax,%eax
  10ec68:	c3                   	retq   

000000000010ec69 <next_timeout>:

static int32_t next_timeout(void)
{
  10ec69:	55                   	push   %rbp
  10ec6a:	48 89 e5             	mov    %rsp,%rbp
  10ec6d:	53                   	push   %rbx
  10ec6e:	51                   	push   %rcx
  10ec6f:	48 8b 1d 1a 97 03 00 	mov    0x3971a(%rip),%rbx        # 148390 <timeout_list>
	return sys_dlist_is_empty(list) ? NULL : list->head;
  10ec76:	48 81 fb 90 83 14 00 	cmp    $0x148390,%rbx
  10ec7d:	75 02                	jne    10ec81 <next_timeout+0x18>
  10ec7f:	31 db                	xor    %ebx,%ebx
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
  10ec81:	e8 d2 ff ff ff       	callq  10ec58 <elapsed>
  10ec86:	89 c2                	mov    %eax,%edx
	int32_t ret = to == NULL ? MAX_WAIT
  10ec88:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
  10ec8d:	48 85 db             	test   %rbx,%rbx
  10ec90:	74 21                	je     10ecb3 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
  10ec92:	48 63 c2             	movslq %edx,%rax
  10ec95:	48 8b 53 18          	mov    0x18(%rbx),%rdx
  10ec99:	48 29 c2             	sub    %rax,%rdx
	int32_t ret = to == NULL ? MAX_WAIT
  10ec9c:	31 c0                	xor    %eax,%eax
  10ec9e:	48 85 d2             	test   %rdx,%rdx
  10eca1:	7e 10                	jle    10ecb3 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
  10eca3:	48 81 fa ff ff ff 7f 	cmp    $0x7fffffff,%rdx
	int32_t ret = to == NULL ? MAX_WAIT
  10ecaa:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
  10ecaf:	48 0f 4e c2          	cmovle %rdx,%rax

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
  10ecb3:	8b 15 a7 ed 00 00    	mov    0xeda7(%rip),%edx        # 11da60 <_kernel+0x20>
  10ecb9:	85 d2                	test   %edx,%edx
  10ecbb:	74 05                	je     10ecc2 <next_timeout+0x59>
  10ecbd:	39 d0                	cmp    %edx,%eax
  10ecbf:	0f 4f c2             	cmovg  %edx,%eax
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
  10ecc2:	5a                   	pop    %rdx
  10ecc3:	5b                   	pop    %rbx
  10ecc4:	5d                   	pop    %rbp
  10ecc5:	c3                   	retq   

000000000010ecc6 <remove_timeout>:
	return (node == list->tail) ? NULL : node->next;
  10ecc6:	48 8b 07             	mov    (%rdi),%rax
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
  10ecc9:	48 85 ff             	test   %rdi,%rdi
  10eccc:	74 16                	je     10ece4 <remove_timeout+0x1e>
	return (node == list->tail) ? NULL : node->next;
  10ecce:	48 3b 3d c3 96 03 00 	cmp    0x396c3(%rip),%rdi        # 148398 <timeout_list+0x8>
  10ecd5:	74 0d                	je     10ece4 <remove_timeout+0x1e>
	if (next(t) != NULL) {
  10ecd7:	48 85 c0             	test   %rax,%rax
  10ecda:	74 08                	je     10ece4 <remove_timeout+0x1e>
		next(t)->dticks += t->dticks;
  10ecdc:	48 8b 57 18          	mov    0x18(%rdi),%rdx
  10ece0:	48 01 50 18          	add    %rdx,0x18(%rax)
	sys_dnode_t *const prev = node->prev;
  10ece4:	48 8b 57 08          	mov    0x8(%rdi),%rdx
	prev->next = next;
  10ece8:	48 89 02             	mov    %rax,(%rdx)
	next->prev = prev;
  10eceb:	48 89 50 08          	mov    %rdx,0x8(%rax)
	node->next = NULL;
  10ecef:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
	node->prev = NULL;
  10ecf6:	48 c7 47 08 00 00 00 	movq   $0x0,0x8(%rdi)
  10ecfd:	00 
}
  10ecfe:	c3                   	retq   

000000000010ecff <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
  10ecff:	48 83 fa ff          	cmp    $0xffffffffffffffff,%rdx
  10ed03:	0f 84 f3 00 00 00    	je     10edfc <z_add_timeout+0xfd>
{
  10ed09:	55                   	push   %rbp
  10ed0a:	48 89 e5             	mov    %rsp,%rbp
  10ed0d:	41 55                	push   %r13
  10ed0f:	49 89 d5             	mov    %rdx,%r13
  10ed12:	41 54                	push   %r12
  10ed14:	53                   	push   %rbx
  10ed15:	48 89 fb             	mov    %rdi,%rbx
  10ed18:	51                   	push   %rcx
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
  10ed19:	48 89 77 10          	mov    %rsi,0x10(%rdi)
  10ed1d:	9c                   	pushfq 
  10ed1e:	fa                   	cli    
  10ed1f:	41 5c                	pop    %r12

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
  10ed21:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
  10ed28:	48 39 d0             	cmp    %rdx,%rax
  10ed2b:	78 18                	js     10ed45 <z_add_timeout+0x46>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
  10ed2d:	48 2b 05 b4 16 01 00 	sub    0x116b4(%rip),%rax        # 1203e8 <curr_tick>
  10ed34:	48 29 d0             	sub    %rdx,%rax

			to->dticks = MAX(1, ticks);
  10ed37:	ba 01 00 00 00       	mov    $0x1,%edx
  10ed3c:	48 85 c0             	test   %rax,%rax
  10ed3f:	48 0f 4e c2          	cmovle %rdx,%rax
  10ed43:	eb 0c                	jmp    10ed51 <z_add_timeout+0x52>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
  10ed45:	e8 0e ff ff ff       	callq  10ec58 <elapsed>
  10ed4a:	48 98                	cltq   
  10ed4c:	49 8d 44 05 01       	lea    0x1(%r13,%rax,1),%rax
  10ed51:	48 89 43 18          	mov    %rax,0x18(%rbx)
	return list->head == list;
  10ed55:	48 8b 05 34 96 03 00 	mov    0x39634(%rip),%rax        # 148390 <timeout_list>
	sys_dnode_t *const tail = list->tail;
  10ed5c:	48 8b 35 35 96 03 00 	mov    0x39635(%rip),%rsi        # 148398 <timeout_list+0x8>
	return sys_dlist_is_empty(list) ? NULL : list->head;
  10ed63:	48 3d 90 83 14 00    	cmp    $0x148390,%rax
  10ed69:	74 3e                	je     10eda9 <z_add_timeout+0xaa>
		}

		for (t = first(); t != NULL; t = next(t)) {
  10ed6b:	48 85 c0             	test   %rax,%rax
  10ed6e:	74 39                	je     10eda9 <z_add_timeout+0xaa>
			if (t->dticks > to->dticks) {
  10ed70:	48 8b 48 18          	mov    0x18(%rax),%rcx
  10ed74:	48 8b 53 18          	mov    0x18(%rbx),%rdx
  10ed78:	48 39 d1             	cmp    %rdx,%rcx
  10ed7b:	7e 1b                	jle    10ed98 <z_add_timeout+0x99>
				t->dticks -= to->dticks;
  10ed7d:	48 29 d1             	sub    %rdx,%rcx
	sys_dnode_t *const prev = successor->prev;
  10ed80:	48 8b 50 08          	mov    0x8(%rax),%rdx
  10ed84:	48 89 48 18          	mov    %rcx,0x18(%rax)
	node->prev = prev;
  10ed88:	48 89 53 08          	mov    %rdx,0x8(%rbx)
	node->next = successor;
  10ed8c:	48 89 03             	mov    %rax,(%rbx)
	prev->next = node;
  10ed8f:	48 89 1a             	mov    %rbx,(%rdx)
	successor->prev = node;
  10ed92:	48 89 58 08          	mov    %rbx,0x8(%rax)
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
  10ed96:	eb 26                	jmp    10edbe <z_add_timeout+0xbf>
			to->dticks -= t->dticks;
  10ed98:	48 29 ca             	sub    %rcx,%rdx
  10ed9b:	48 89 53 18          	mov    %rdx,0x18(%rbx)
	return (node == list->tail) ? NULL : node->next;
  10ed9f:	48 39 c6             	cmp    %rax,%rsi
  10eda2:	74 05                	je     10eda9 <z_add_timeout+0xaa>
  10eda4:	48 8b 00             	mov    (%rax),%rax
  10eda7:	eb c2                	jmp    10ed6b <z_add_timeout+0x6c>
	node->next = list;
  10eda9:	48 c7 03 90 83 14 00 	movq   $0x148390,(%rbx)
	node->prev = tail;
  10edb0:	48 89 73 08          	mov    %rsi,0x8(%rbx)
	tail->next = node;
  10edb4:	48 89 1e             	mov    %rbx,(%rsi)
	list->tail = node;
  10edb7:	48 89 1d da 95 03 00 	mov    %rbx,0x395da(%rip)        # 148398 <timeout_list+0x8>
	return list->head == list;
  10edbe:	48 8b 05 cb 95 03 00 	mov    0x395cb(%rip),%rax        # 148390 <timeout_list>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
  10edc5:	48 39 c3             	cmp    %rax,%rbx
  10edc8:	75 22                	jne    10edec <z_add_timeout+0xed>
  10edca:	48 3d 90 83 14 00    	cmp    $0x148390,%rax
  10edd0:	74 1a                	je     10edec <z_add_timeout+0xed>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
  10edd2:	e8 92 fe ff ff       	callq  10ec69 <next_timeout>
  10edd7:	89 c7                	mov    %eax,%edi

			if (next_time == 0 ||
  10edd9:	85 c0                	test   %eax,%eax
  10eddb:	74 08                	je     10ede5 <z_add_timeout+0xe6>
  10eddd:	39 05 7d ec 00 00    	cmp    %eax,0xec7d(%rip)        # 11da60 <_kernel+0x20>
  10ede3:	74 07                	je     10edec <z_add_timeout+0xed>
			    _current_cpu->slice_ticks != next_time) {
				sys_clock_set_timeout(next_time, false);
  10ede5:	31 f6                	xor    %esi,%esi
  10ede7:	e8 6e ec ff ff       	callq  10da5a <sys_clock_set_timeout>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10edec:	41 0f ba e4 09       	bt     $0x9,%r12d
  10edf1:	73 01                	jae    10edf4 <z_add_timeout+0xf5>
		__asm__ volatile ("sti" ::: "memory");
  10edf3:	fb                   	sti    
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
  10edf4:	58                   	pop    %rax
  10edf5:	5b                   	pop    %rbx
  10edf6:	41 5c                	pop    %r12
  10edf8:	41 5d                	pop    %r13
  10edfa:	5d                   	pop    %rbp
  10edfb:	c3                   	retq   
  10edfc:	c3                   	retq   

000000000010edfd <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
  10edfd:	55                   	push   %rbp
  10edfe:	48 89 e5             	mov    %rsp,%rbp
  10ee01:	9c                   	pushfq 
  10ee02:	fa                   	cli    
  10ee03:	59                   	pop    %rcx
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
  10ee04:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  10ee08:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
  10ee0d:	74 07                	je     10ee16 <z_abort_timeout+0x19>
			remove_timeout(to);
  10ee0f:	e8 b2 fe ff ff       	callq  10ecc6 <remove_timeout>
			ret = 0;
  10ee14:	31 c0                	xor    %eax,%eax
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10ee16:	0f ba e1 09          	bt     $0x9,%ecx
  10ee1a:	73 01                	jae    10ee1d <z_abort_timeout+0x20>
		__asm__ volatile ("sti" ::: "memory");
  10ee1c:	fb                   	sti    
		}
	}

	return ret;
}
  10ee1d:	5d                   	pop    %rbp
  10ee1e:	c3                   	retq   

000000000010ee1f <z_set_timeout_expiry>:
	}
	return ret;
}

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
  10ee1f:	55                   	push   %rbp
  10ee20:	48 89 e5             	mov    %rsp,%rbp
  10ee23:	41 55                	push   %r13
  10ee25:	41 89 fd             	mov    %edi,%r13d
  10ee28:	41 54                	push   %r12
  10ee2a:	53                   	push   %rbx
  10ee2b:	89 f3                	mov    %esi,%ebx
  10ee2d:	52                   	push   %rdx
  10ee2e:	9c                   	pushfq 
  10ee2f:	fa                   	cli    
  10ee30:	41 5c                	pop    %r12
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
  10ee32:	e8 32 fe ff ff       	callq  10ec69 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
  10ee37:	83 f8 ff             	cmp    $0xffffffff,%eax
  10ee3a:	0f 94 c1             	sete   %cl
			      || (ticks <= next_to);
  10ee3d:	44 39 e8             	cmp    %r13d,%eax
  10ee40:	0f 9d c2             	setge  %dl
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
  10ee43:	08 d1                	or     %dl,%cl
  10ee45:	74 16                	je     10ee5d <z_set_timeout_expiry+0x3e>
  10ee47:	83 f8 01             	cmp    $0x1,%eax
  10ee4a:	7e 11                	jle    10ee5d <z_set_timeout_expiry+0x3e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
  10ee4c:	44 39 e8             	cmp    %r13d,%eax
  10ee4f:	44 89 ef             	mov    %r13d,%edi
  10ee52:	0f b6 f3             	movzbl %bl,%esi
  10ee55:	0f 4e f8             	cmovle %eax,%edi
  10ee58:	e8 fd eb ff ff       	callq  10da5a <sys_clock_set_timeout>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10ee5d:	41 0f ba e4 09       	bt     $0x9,%r12d
  10ee62:	73 01                	jae    10ee65 <z_set_timeout_expiry+0x46>
		__asm__ volatile ("sti" ::: "memory");
  10ee64:	fb                   	sti    
		}
	}
}
  10ee65:	58                   	pop    %rax
  10ee66:	5b                   	pop    %rbx
  10ee67:	41 5c                	pop    %r12
  10ee69:	41 5d                	pop    %r13
  10ee6b:	5d                   	pop    %rbp
  10ee6c:	c3                   	retq   

000000000010ee6d <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
  10ee6d:	55                   	push   %rbp
  10ee6e:	48 89 e5             	mov    %rsp,%rbp
  10ee71:	41 54                	push   %r12
  10ee73:	41 89 fc             	mov    %edi,%r12d
  10ee76:	53                   	push   %rbx
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
  10ee77:	e8 df f6 ff ff       	callq  10e55b <z_time_slice>
  10ee7c:	9c                   	pushfq 
  10ee7d:	fa                   	cli    
  10ee7e:	5b                   	pop    %rbx
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
  10ee7f:	44 89 25 aa 15 01 00 	mov    %r12d,0x115aa(%rip)        # 120430 <announce_remaining>

	while (first() != NULL && first()->dticks <= announce_remaining) {
  10ee86:	48 63 15 a3 15 01 00 	movslq 0x115a3(%rip),%rdx        # 120430 <announce_remaining>
  10ee8d:	48 8b 0d fc 94 03 00 	mov    0x394fc(%rip),%rcx        # 148390 <timeout_list>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10ee94:	81 e3 00 02 00 00    	and    $0x200,%ebx
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
  10ee9a:	48 8b 3d 47 15 01 00 	mov    0x11547(%rip),%rdi        # 1203e8 <curr_tick>
	while (first() != NULL && first()->dticks <= announce_remaining) {
  10eea1:	48 89 d6             	mov    %rdx,%rsi
  10eea4:	48 85 c9             	test   %rcx,%rcx
  10eea7:	74 4e                	je     10eef7 <sys_clock_announce+0x8a>
  10eea9:	48 81 f9 90 83 14 00 	cmp    $0x148390,%rcx
  10eeb0:	74 45                	je     10eef7 <sys_clock_announce+0x8a>
  10eeb2:	48 8b 41 18          	mov    0x18(%rcx),%rax
  10eeb6:	48 39 d0             	cmp    %rdx,%rax
  10eeb9:	7f 35                	jg     10eef0 <sys_clock_announce+0x83>
		announce_remaining -= dt;
		t->dticks = 0;
  10eebb:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
  10eec2:	00 
		curr_tick += dt;
  10eec3:	48 63 d0             	movslq %eax,%rdx
		announce_remaining -= dt;
  10eec6:	29 c6                	sub    %eax,%esi
		curr_tick += dt;
  10eec8:	48 01 fa             	add    %rdi,%rdx
		remove_timeout(t);
  10eecb:	48 89 cf             	mov    %rcx,%rdi
		announce_remaining -= dt;
  10eece:	89 35 5c 15 01 00    	mov    %esi,0x1155c(%rip)        # 120430 <announce_remaining>
		curr_tick += dt;
  10eed4:	48 89 15 0d 15 01 00 	mov    %rdx,0x1150d(%rip)        # 1203e8 <curr_tick>
		remove_timeout(t);
  10eedb:	e8 e6 fd ff ff       	callq  10ecc6 <remove_timeout>
  10eee0:	85 db                	test   %ebx,%ebx
  10eee2:	74 01                	je     10eee5 <sys_clock_announce+0x78>
		__asm__ volatile ("sti" ::: "memory");
  10eee4:	fb                   	sti    

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
  10eee5:	48 89 cf             	mov    %rcx,%rdi
  10eee8:	ff 51 10             	callq  *0x10(%rcx)
  10eeeb:	9c                   	pushfq 
  10eeec:	fa                   	cli    
  10eeed:	5b                   	pop    %rbx
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
  10eeee:	eb 96                	jmp    10ee86 <sys_clock_announce+0x19>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
  10eef0:	48 29 d0             	sub    %rdx,%rax
  10eef3:	48 89 41 18          	mov    %rax,0x18(%rcx)
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
  10eef7:	c7 05 2f 15 01 00 00 	movl   $0x0,0x1152f(%rip)        # 120430 <announce_remaining>
  10eefe:	00 00 00 
	curr_tick += announce_remaining;
  10ef01:	48 01 fa             	add    %rdi,%rdx
  10ef04:	48 89 15 dd 14 01 00 	mov    %rdx,0x114dd(%rip)        # 1203e8 <curr_tick>

	sys_clock_set_timeout(next_timeout(), false);
  10ef0b:	e8 59 fd ff ff       	callq  10ec69 <next_timeout>
  10ef10:	31 f6                	xor    %esi,%esi
  10ef12:	89 c7                	mov    %eax,%edi
  10ef14:	e8 41 eb ff ff       	callq  10da5a <sys_clock_set_timeout>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10ef19:	85 db                	test   %ebx,%ebx
  10ef1b:	74 01                	je     10ef1e <sys_clock_announce+0xb1>
		__asm__ volatile ("sti" ::: "memory");
  10ef1d:	fb                   	sti    

	k_spin_unlock(&timeout_lock, key);
}
  10ef1e:	5b                   	pop    %rbx
  10ef1f:	41 5c                	pop    %r12
  10ef21:	5d                   	pop    %rbp
  10ef22:	c3                   	retq   

000000000010ef23 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
  10ef23:	55                   	push   %rbp
  10ef24:	48 89 e5             	mov    %rsp,%rbp
  10ef27:	53                   	push   %rbx
  10ef28:	51                   	push   %rcx
  10ef29:	9c                   	pushfq 
  10ef2a:	fa                   	cli    
  10ef2b:	5b                   	pop    %rbx
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
  10ef2c:	e8 ec eb ff ff       	callq  10db1d <sys_clock_elapsed>
  10ef31:	89 c0                	mov    %eax,%eax
  10ef33:	48 03 05 ae 14 01 00 	add    0x114ae(%rip),%rax        # 1203e8 <curr_tick>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10ef3a:	0f ba e3 09          	bt     $0x9,%ebx
  10ef3e:	73 01                	jae    10ef41 <sys_clock_tick_get+0x1e>
		__asm__ volatile ("sti" ::: "memory");
  10ef40:	fb                   	sti    
	}
	return t;
}
  10ef41:	5a                   	pop    %rdx
  10ef42:	5b                   	pop    %rbx
  10ef43:	5d                   	pop    %rbp
  10ef44:	c3                   	retq   

000000000010ef45 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
  10ef45:	55                   	push   %rbp
  10ef46:	48 89 e5             	mov    %rsp,%rbp
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
  10ef49:	e8 d5 ff ff ff       	callq  10ef23 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
  10ef4e:	5d                   	pop    %rbp
  10ef4f:	c3                   	retq   

000000000010ef50 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
  10ef50:	e9 ce ff ff ff       	jmpq   10ef23 <sys_clock_tick_get>

000000000010ef55 <z_impl_k_busy_wait>:
}
#include <syscalls/k_uptime_ticks_mrsh.c>
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
  10ef55:	55                   	push   %rbp
  10ef56:	48 89 e5             	mov    %rsp,%rbp
  10ef59:	41 54                	push   %r12
  10ef5b:	53                   	push   %rbx
  10ef5c:	89 fb                	mov    %edi,%ebx
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
  10ef5e:	85 db                	test   %ebx,%ebx
  10ef60:	74 2c                	je     10ef8e <z_impl_k_busy_wait+0x39>
extern uint32_t sys_clock_cycle_get_32(void);

__pinned_func
static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
  10ef62:	e8 dd eb ff ff       	callq  10db44 <sys_clock_cycle_get_32>
  10ef67:	41 89 c4             	mov    %eax,%r12d
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
		(uint64_t)sys_clock_hw_cycles_per_sec() /
  10ef6a:	48 63 05 93 94 03 00 	movslq 0x39493(%rip),%rax        # 148404 <z_clock_hw_cycles_per_sec>
  10ef71:	b9 40 42 0f 00       	mov    $0xf4240,%ecx
	uint32_t cycles_to_wait = (uint32_t)(
  10ef76:	31 d2                	xor    %edx,%edx
		(uint64_t)usec_to_wait *
  10ef78:	48 0f af c3          	imul   %rbx,%rax
	uint32_t cycles_to_wait = (uint32_t)(
  10ef7c:	48 f7 f1             	div    %rcx
  10ef7f:	48 89 c3             	mov    %rax,%rbx
  10ef82:	e8 bd eb ff ff       	callq  10db44 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
  10ef87:	44 29 e0             	sub    %r12d,%eax
  10ef8a:	39 d8                	cmp    %ebx,%eax
  10ef8c:	72 f4                	jb     10ef82 <z_impl_k_busy_wait+0x2d>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
  10ef8e:	5b                   	pop    %rbx
  10ef8f:	41 5c                	pop    %r12
  10ef91:	5d                   	pop    %rbp
  10ef92:	c3                   	retq   

000000000010ef93 <virt_region_free>:

	virt_region_inited = true;
}

static void virt_region_free(void *vaddr, size_t size)
{
  10ef93:	55                   	push   %rbp
	size_t offset, num_bits;
	uint8_t *vaddr_u8 = (uint8_t *)vaddr;

	if (unlikely(!virt_region_inited)) {
  10ef94:	80 3d 9f 14 01 00 00 	cmpb   $0x0,0x1149f(%rip)        # 12043a <sched_spinlock>
{
  10ef9b:	48 89 e5             	mov    %rsp,%rbp
  10ef9e:	41 54                	push   %r12
  10efa0:	49 89 fc             	mov    %rdi,%r12
  10efa3:	53                   	push   %rbx
  10efa4:	48 89 f3             	mov    %rsi,%rbx
	if (unlikely(!virt_region_inited)) {
  10efa7:	75 2a                	jne    10efd3 <virt_region_free+0x40>
		- POINTER_TO_UINT(vaddr) - size) / CONFIG_MMU_PAGE_SIZE;
  10efa9:	ba 00 00 80 00       	mov    $0x800000,%edx
	num_bits /= CONFIG_MMU_PAGE_SIZE;
  10efae:	be 00 70 15 00       	mov    $0x157000,%esi
	(void)sys_bitarray_set_region(&virt_region_bitmap,
  10efb3:	bf a0 83 14 00       	mov    $0x1483a0,%edi
		- POINTER_TO_UINT(vaddr) - size) / CONFIG_MMU_PAGE_SIZE;
  10efb8:	48 81 ea 00 70 15 00 	sub    $0x157000,%rdx
	num_bits /= CONFIG_MMU_PAGE_SIZE;
  10efbf:	48 c1 ee 0c          	shr    $0xc,%rsi
		- POINTER_TO_UINT(vaddr) - size) / CONFIG_MMU_PAGE_SIZE;
  10efc3:	48 c1 ea 0c          	shr    $0xc,%rdx
	(void)sys_bitarray_set_region(&virt_region_bitmap,
  10efc7:	e8 f6 cc ff ff       	callq  10bcc2 <sys_bitarray_set_region>
	virt_region_inited = true;
  10efcc:	c6 05 67 14 01 00 01 	movb   $0x1,0x11467(%rip)        # 12043a <sched_spinlock>
	}

	__ASSERT((vaddr_u8 >= Z_VIRT_REGION_START_ADDR)
		 && ((vaddr_u8 + size) < Z_VIRT_REGION_END_ADDR),
		 "invalid virtual address region %p (%zu)", vaddr_u8, size);
	if (!((vaddr_u8 >= Z_VIRT_REGION_START_ADDR)
  10efd3:	49 81 fc 00 70 15 00 	cmp    $0x157000,%r12
  10efda:	72 30                	jb     10f00c <virt_region_free+0x79>
	      && ((vaddr_u8 + size) < Z_VIRT_REGION_END_ADDR))) {
  10efdc:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
	if (!((vaddr_u8 >= Z_VIRT_REGION_START_ADDR)
  10efe0:	48 3d ff ff 7f 00    	cmp    $0x7fffff,%rax
  10efe6:	77 24                	ja     10f00c <virt_region_free+0x79>
		- POINTER_TO_UINT(vaddr) - size) / CONFIG_MMU_PAGE_SIZE;
  10efe8:	ba 00 00 80 00       	mov    $0x800000,%edx
		return;
	}

	offset = virt_to_bitmap_offset(vaddr, size);
	num_bits = size / CONFIG_MMU_PAGE_SIZE;
	(void)sys_bitarray_free(&virt_region_bitmap, num_bits, offset);
  10efed:	bf a0 83 14 00       	mov    $0x1483a0,%edi
		- POINTER_TO_UINT(vaddr) - size) / CONFIG_MMU_PAGE_SIZE;
  10eff2:	48 29 da             	sub    %rbx,%rdx
	num_bits = size / CONFIG_MMU_PAGE_SIZE;
  10eff5:	48 c1 eb 0c          	shr    $0xc,%rbx
		- POINTER_TO_UINT(vaddr) - size) / CONFIG_MMU_PAGE_SIZE;
  10eff9:	4c 29 e2             	sub    %r12,%rdx
	num_bits = size / CONFIG_MMU_PAGE_SIZE;
  10effc:	48 89 de             	mov    %rbx,%rsi
}
  10efff:	5b                   	pop    %rbx
  10f000:	41 5c                	pop    %r12
		- POINTER_TO_UINT(vaddr) - size) / CONFIG_MMU_PAGE_SIZE;
  10f002:	48 c1 ea 0c          	shr    $0xc,%rdx
}
  10f006:	5d                   	pop    %rbp
	(void)sys_bitarray_free(&virt_region_bitmap, num_bits, offset);
  10f007:	e9 20 cc ff ff       	jmpq   10bc2c <sys_bitarray_free>
}
  10f00c:	5b                   	pop    %rbx
  10f00d:	41 5c                	pop    %r12
  10f00f:	5d                   	pop    %rbp
  10f010:	c3                   	retq   

000000000010f011 <free_page_frame_list_put>:
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
  10f011:	48 8b 05 30 13 01 00 	mov    0x11330(%rip),%rax        # 120348 <free_page_frame_list+0x8>
	parent->next = child;
  10f018:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
  10f01f:	48 85 c0             	test   %rax,%rax
  10f022:	75 10                	jne    10f034 <free_page_frame_list_put+0x23>
	list->tail = node;
  10f024:	48 89 3d 1d 13 01 00 	mov    %rdi,0x1131d(%rip)        # 120348 <free_page_frame_list+0x8>
	list->head = node;
  10f02b:	48 89 3d 0e 13 01 00 	mov    %rdi,0x1130e(%rip)        # 120340 <free_page_frame_list>
}
  10f032:	eb 0a                	jmp    10f03e <free_page_frame_list_put+0x2d>
	parent->next = child;
  10f034:	48 89 38             	mov    %rdi,(%rax)
	list->tail = node;
  10f037:	48 89 3d 0a 13 01 00 	mov    %rdi,0x1130a(%rip)        # 120348 <free_page_frame_list+0x8>
		 "unavailable page put on free list");
	/* The structure is packed, which ensures that this is true */
	void *node = pf;

	sys_slist_append(&free_page_frame_list, node);
	z_free_page_count++;
  10f03e:	48 ff 05 ab 13 01 00 	incq   0x113ab(%rip)        # 1203f0 <z_free_page_count>
}
  10f045:	c3                   	retq   

000000000010f046 <virt_region_alloc>:
{
  10f046:	55                   	push   %rbp
  10f047:	48 89 e5             	mov    %rsp,%rbp
  10f04a:	41 57                	push   %r15
  10f04c:	41 56                	push   %r14
  10f04e:	41 55                	push   %r13
  10f050:	49 89 fd             	mov    %rdi,%r13
  10f053:	41 54                	push   %r12
  10f055:	49 89 f4             	mov    %rsi,%r12
  10f058:	53                   	push   %rbx
  10f059:	48 83 ec 18          	sub    $0x18,%rsp
	if (unlikely(!virt_region_inited)) {
  10f05d:	80 3d d6 13 01 00 00 	cmpb   $0x0,0x113d6(%rip)        # 12043a <sched_spinlock>
  10f064:	75 2a                	jne    10f090 <virt_region_alloc+0x4a>
		- POINTER_TO_UINT(vaddr) - size) / CONFIG_MMU_PAGE_SIZE;
  10f066:	ba 00 00 80 00       	mov    $0x800000,%edx
	num_bits /= CONFIG_MMU_PAGE_SIZE;
  10f06b:	be 00 70 15 00       	mov    $0x157000,%esi
	(void)sys_bitarray_set_region(&virt_region_bitmap,
  10f070:	bf a0 83 14 00       	mov    $0x1483a0,%edi
		- POINTER_TO_UINT(vaddr) - size) / CONFIG_MMU_PAGE_SIZE;
  10f075:	48 81 ea 00 70 15 00 	sub    $0x157000,%rdx
	num_bits /= CONFIG_MMU_PAGE_SIZE;
  10f07c:	48 c1 ee 0c          	shr    $0xc,%rsi
		- POINTER_TO_UINT(vaddr) - size) / CONFIG_MMU_PAGE_SIZE;
  10f080:	48 c1 ea 0c          	shr    $0xc,%rdx
	(void)sys_bitarray_set_region(&virt_region_bitmap,
  10f084:	e8 39 cc ff ff       	callq  10bcc2 <sys_bitarray_set_region>
	virt_region_inited = true;
  10f089:	c6 05 aa 13 01 00 01 	movb   $0x1,0x113aa(%rip)        # 12043a <sched_spinlock>
	num_bits = (size + align - CONFIG_MMU_PAGE_SIZE) / CONFIG_MMU_PAGE_SIZE;
  10f090:	4b 8d b4 25 00 f0 ff 	lea    -0x1000(%r13,%r12,1),%rsi
  10f097:	ff 
	ret = sys_bitarray_alloc(&virt_region_bitmap, num_bits, &offset);
  10f098:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  10f09c:	bf a0 83 14 00       	mov    $0x1483a0,%edi
	alloc_size = num_bits * CONFIG_MMU_PAGE_SIZE;
  10f0a1:	49 89 f7             	mov    %rsi,%r15
	num_bits = (size + align - CONFIG_MMU_PAGE_SIZE) / CONFIG_MMU_PAGE_SIZE;
  10f0a4:	48 c1 ee 0c          	shr    $0xc,%rsi
	ret = sys_bitarray_alloc(&virt_region_bitmap, num_bits, &offset);
  10f0a8:	e8 9a ca ff ff       	callq  10bb47 <sys_bitarray_alloc>
	alloc_size = num_bits * CONFIG_MMU_PAGE_SIZE;
  10f0ad:	49 81 e7 00 f0 ff ff 	and    $0xfffffffffffff000,%r15
	ret = sys_bitarray_alloc(&virt_region_bitmap, num_bits, &offset);
  10f0b4:	41 89 c0             	mov    %eax,%r8d
		return NULL;
  10f0b7:	31 c0                	xor    %eax,%eax
	if (ret != 0) {
  10f0b9:	45 85 c0             	test   %r8d,%r8d
  10f0bc:	75 66                	jne    10f124 <virt_region_alloc+0xde>
	       - (offset * CONFIG_MMU_PAGE_SIZE) - size;
  10f0be:	41 be 00 08 00 00    	mov    $0x800,%r14d
  10f0c4:	4c 2b 75 c8          	sub    -0x38(%rbp),%r14
  10f0c8:	49 c1 e6 0c          	shl    $0xc,%r14
  10f0cc:	4c 89 f7             	mov    %r14,%rdi
  10f0cf:	4c 29 ff             	sub    %r15,%rdi
	dest_addr = virt_from_bitmap_offset(offset, alloc_size);
  10f0d2:	48 89 fb             	mov    %rdi,%rbx
	if (alloc_size > size) {
  10f0d5:	4d 39 fd             	cmp    %r15,%r13
  10f0d8:	73 2b                	jae    10f105 <virt_region_alloc+0xbf>
		uintptr_t aligned_dest_addr = ROUND_UP(dest_addr, align);
  10f0da:	4a 8d 5c 27 ff       	lea    -0x1(%rdi,%r12,1),%rbx
  10f0df:	49 f7 dc             	neg    %r12
		virt_region_free(UINT_TO_POINTER(dest_addr),
  10f0e2:	4d 29 f7             	sub    %r14,%r15
		uintptr_t aligned_dest_addr = ROUND_UP(dest_addr, align);
  10f0e5:	4c 21 e3             	and    %r12,%rbx
		virt_region_free(UINT_TO_POINTER(dest_addr),
  10f0e8:	49 8d 34 1f          	lea    (%r15,%rbx,1),%rsi
  10f0ec:	e8 a2 fe ff ff       	callq  10ef93 <virt_region_free>
		if (((dest_addr + alloc_size) - (aligned_dest_addr + size)) > 0) {
  10f0f1:	4a 8d 3c 2b          	lea    (%rbx,%r13,1),%rdi
  10f0f5:	49 39 fe             	cmp    %rdi,%r14
  10f0f8:	74 0b                	je     10f105 <virt_region_alloc+0xbf>
			virt_region_free(UINT_TO_POINTER(aligned_dest_addr + size),
  10f0fa:	4c 89 f6             	mov    %r14,%rsi
  10f0fd:	48 29 fe             	sub    %rdi,%rsi
  10f100:	e8 8e fe ff ff       	callq  10ef93 <virt_region_free>
	return UINT_TO_POINTER(dest_addr);
  10f105:	48 89 d8             	mov    %rbx,%rax
	if (dest_addr < POINTER_TO_UINT(Z_VIRT_REGION_START_ADDR)) {
  10f108:	48 81 fb 00 70 15 00 	cmp    $0x157000,%rbx
  10f10f:	73 13                	jae    10f124 <virt_region_alloc+0xde>
		(void)sys_bitarray_free(&virt_region_bitmap, size, offset);
  10f111:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  10f115:	4c 89 ee             	mov    %r13,%rsi
  10f118:	bf a0 83 14 00       	mov    $0x1483a0,%edi
  10f11d:	e8 0a cb ff ff       	callq  10bc2c <sys_bitarray_free>
		return NULL;
  10f122:	31 c0                	xor    %eax,%eax
}
  10f124:	48 83 c4 18          	add    $0x18,%rsp
  10f128:	5b                   	pop    %rbx
  10f129:	41 5c                	pop    %r12
  10f12b:	41 5d                	pop    %r13
  10f12d:	41 5e                	pop    %r14
  10f12f:	41 5f                	pop    %r15
  10f131:	5d                   	pop    %rbp
  10f132:	c3                   	retq   

000000000010f133 <k_mem_map>:

	return 0;
}

void *k_mem_map(size_t size, uint32_t flags)
{
  10f133:	55                   	push   %rbp
  10f134:	48 89 e5             	mov    %rsp,%rbp
  10f137:	41 57                	push   %r15
  10f139:	41 56                	push   %r14
  10f13b:	41 55                	push   %r13
  10f13d:	41 54                	push   %r12
  10f13f:	49 89 fc             	mov    %rdi,%r12
  10f142:	53                   	push   %rbx
  10f143:	89 f3                	mov    %esi,%ebx
  10f145:	48 83 ec 18          	sub    $0x18,%rsp
  10f149:	9c                   	pushfq 
  10f14a:	fa                   	cli    
  10f14b:	8f 45 c0             	popq   -0x40(%rbp)
	/* Need extra for the guard pages (before and after) which we
	 * won't map.
	 */
	total_size = size + CONFIG_MMU_PAGE_SIZE * 2;

	dst = virt_region_alloc(total_size, CONFIG_MMU_PAGE_SIZE);
  10f14e:	be 00 10 00 00       	mov    $0x1000,%esi
	total_size = size + CONFIG_MMU_PAGE_SIZE * 2;
  10f153:	48 81 c7 00 20 00 00 	add    $0x2000,%rdi
	dst = virt_region_alloc(total_size, CONFIG_MMU_PAGE_SIZE);
  10f15a:	e8 e7 fe ff ff       	callq  10f046 <virt_region_alloc>
	if (dst == NULL) {
  10f15f:	48 85 c0             	test   %rax,%rax
  10f162:	75 05                	jne    10f169 <k_mem_map+0x36>
	dst = virt_region_alloc(total_size, CONFIG_MMU_PAGE_SIZE);
  10f164:	45 31 f6             	xor    %r14d,%r14d
  10f167:	eb 6d                	jmp    10f1d6 <k_mem_map+0xa3>
  10f169:	49 89 c6             	mov    %rax,%r14
	}

	/* Unmap both guard pages to make sure accessing them
	 * will generate fault.
	 */
	arch_mem_unmap(dst, CONFIG_MMU_PAGE_SIZE);
  10f16c:	48 89 c7             	mov    %rax,%rdi
  10f16f:	be 00 10 00 00       	mov    $0x1000,%esi
  10f174:	e8 f2 d6 ff ff       	callq  10c86b <arch_mem_unmap>
	arch_mem_unmap(dst + CONFIG_MMU_PAGE_SIZE + size,
  10f179:	4f 8d a4 26 00 10 00 	lea    0x1000(%r14,%r12,1),%r12
  10f180:	00 
  10f181:	be 00 10 00 00       	mov    $0x1000,%esi
		       CONFIG_MMU_PAGE_SIZE);

	/* Skip over the "before" guard page in returned address. */
	dst += CONFIG_MMU_PAGE_SIZE;
  10f186:	49 81 c6 00 10 00 00 	add    $0x1000,%r14
	arch_mem_unmap(dst + CONFIG_MMU_PAGE_SIZE + size,
  10f18d:	4c 89 e7             	mov    %r12,%rdi

	VIRT_FOREACH(dst, size, pos) {
  10f190:	4d 89 f5             	mov    %r14,%r13
	arch_mem_unmap(dst + CONFIG_MMU_PAGE_SIZE + size,
  10f193:	e8 d3 d6 ff ff       	callq  10c86b <arch_mem_unmap>
	VIRT_FOREACH(dst, size, pos) {
  10f198:	4d 39 ec             	cmp    %r13,%r12
  10f19b:	76 39                	jbe    10f1d6 <k_mem_map+0xa3>
	bool lock = (flags & K_MEM_MAP_LOCK) != 0U;
  10f19d:	89 d8                	mov    %ebx,%eax
	return list->head;
  10f19f:	4c 8b 3d 9a 11 01 00 	mov    0x1119a(%rip),%r15        # 120340 <free_page_frame_list>
  10f1a6:	25 00 00 02 00       	and    $0x20000,%eax
  10f1ab:	89 45 cc             	mov    %eax,-0x34(%rbp)
	bool uninit = (flags & K_MEM_MAP_UNINIT) != 0U;
  10f1ae:	89 d8                	mov    %ebx,%eax
  10f1b0:	25 00 00 01 00       	and    $0x10000,%eax
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
  10f1b5:	4d 85 ff             	test   %r15,%r15
  10f1b8:	74 aa                	je     10f164 <k_mem_map+0x31>
	return node->next;
  10f1ba:	49 8b 17             	mov    (%r15),%rdx
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
  10f1bd:	4c 3b 3d 84 11 01 00 	cmp    0x11184(%rip),%r15        # 120348 <free_page_frame_list+0x8>
	list->head = node;
  10f1c4:	48 89 15 75 11 01 00 	mov    %rdx,0x11175(%rip)        # 120340 <free_page_frame_list>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
  10f1cb:	75 13                	jne    10f1e0 <k_mem_map+0xad>
	list->tail = node;
  10f1cd:	48 89 15 74 11 01 00 	mov    %rdx,0x11174(%rip)        # 120348 <free_page_frame_list+0x8>
}
  10f1d4:	eb 0a                	jmp    10f1e0 <k_mem_map+0xad>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10f1d6:	0f ba 65 c0 09       	btl    $0x9,-0x40(%rbp)
  10f1db:	73 68                	jae    10f245 <k_mem_map+0x112>
		__asm__ volatile ("sti" ::: "memory");
  10f1dd:	fb                   	sti    
			goto out;
		}
	}
out:
	k_spin_unlock(&z_mm_lock, key);
	return dst;
  10f1de:	eb 65                	jmp    10f245 <k_mem_map+0x112>
	return (uintptr_t)((pf - z_page_frames) * CONFIG_MMU_PAGE_SIZE) +
  10f1e0:	4c 89 fe             	mov    %r15,%rsi
  10f1e3:	89 45 c8             	mov    %eax,-0x38(%rbp)
	arch_mem_map(addr, phys, CONFIG_MMU_PAGE_SIZE, flags | K_MEM_CACHE_WB);
  10f1e6:	89 d9                	mov    %ebx,%ecx
  10f1e8:	ba 00 10 00 00       	mov    $0x1000,%edx
  10f1ed:	48 b8 39 8e e3 38 8e 	movabs $0x8e38e38e38e38e39,%rax
  10f1f4:	e3 38 8e 
  10f1f7:	48 81 ee 80 db 11 00 	sub    $0x11db80,%rsi
  10f1fe:	4c 89 ef             	mov    %r13,%rdi
		z_free_page_count--;
  10f201:	48 ff 0d e8 11 01 00 	decq   0x111e8(%rip)        # 1203f0 <z_free_page_count>
  10f208:	48 0f af f0          	imul   %rax,%rsi
  10f20c:	48 c1 e6 0c          	shl    $0xc,%rsi
	arch_mem_map(addr, phys, CONFIG_MMU_PAGE_SIZE, flags | K_MEM_CACHE_WB);
  10f210:	e8 6f d5 ff ff       	callq  10c784 <arch_mem_map>
	if (lock) {
  10f215:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  10f219:	8b 45 c8             	mov    -0x38(%rbp),%eax
  10f21c:	74 05                	je     10f223 <k_mem_map+0xf0>
		pf->flags |= Z_PAGE_FRAME_PINNED;
  10f21e:	41 80 4f 08 01       	orb    $0x1,0x8(%r15)
	pf->flags |= Z_PAGE_FRAME_MAPPED;
  10f223:	41 80 4f 08 04       	orb    $0x4,0x8(%r15)
	pf->addr = addr;
  10f228:	4d 89 2f             	mov    %r13,(%r15)
	if (!uninit) {
  10f22b:	85 c0                	test   %eax,%eax
  10f22d:	75 0a                	jne    10f239 <k_mem_map+0x106>
  10f22f:	b9 00 04 00 00       	mov    $0x400,%ecx
  10f234:	4c 89 ef             	mov    %r13,%rdi
  10f237:	f3 ab                	rep stos %eax,%es:(%rdi)
	VIRT_FOREACH(dst, size, pos) {
  10f239:	49 81 c5 00 10 00 00 	add    $0x1000,%r13
  10f240:	e9 53 ff ff ff       	jmpq   10f198 <k_mem_map+0x65>
}
  10f245:	48 83 c4 18          	add    $0x18,%rsp
  10f249:	4c 89 f0             	mov    %r14,%rax
  10f24c:	5b                   	pop    %rbx
  10f24d:	41 5c                	pop    %r12
  10f24f:	41 5d                	pop    %r13
  10f251:	41 5e                	pop    %r14
  10f253:	41 5f                	pop    %r15
  10f255:	5d                   	pop    %rbp
  10f256:	c3                   	retq   

000000000010f257 <k_mem_free_get>:
  10f257:	9c                   	pushfq 
  10f258:	fa                   	cli    
  10f259:	5a                   	pop    %rdx
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10f25a:	0f ba e2 09          	bt     $0x9,%edx
		ret = z_free_page_count - CONFIG_DEMAND_PAGING_PAGE_FRAMES_RESERVE;
	} else {
		ret = 0;
	}
#else
	ret = z_free_page_count;
  10f25e:	48 8b 05 8b 11 01 00 	mov    0x1118b(%rip),%rax        # 1203f0 <z_free_page_count>
  10f265:	73 01                	jae    10f268 <k_mem_free_get+0x11>
		__asm__ volatile ("sti" ::: "memory");
  10f267:	fb                   	sti    
#endif
	k_spin_unlock(&z_mm_lock, key);

	return ret * (size_t)CONFIG_MMU_PAGE_SIZE;
  10f268:	48 c1 e0 0c          	shl    $0xc,%rax
}
  10f26c:	c3                   	retq   

000000000010f26d <arch_virt_region_align>:
{
	ARG_UNUSED(phys);
	ARG_UNUSED(size);

	return CONFIG_MMU_PAGE_SIZE;
}
  10f26d:	b8 00 10 00 00       	mov    $0x1000,%eax
  10f272:	c3                   	retq   

000000000010f273 <z_phys_map>:
/* This may be called from arch early boot code before z_cstart() is invoked.
 * Data will be copied and BSS zeroed, but this must not rely on any
 * initialization functions being called prior to work correctly.
 */
void z_phys_map(uint8_t **virt_ptr, uintptr_t phys, size_t size, uint32_t flags)
{
  10f273:	55                   	push   %rbp
	__ASSERT(aligned_size != 0U, "0-length mapping at 0x%lx", aligned_phys);
	__ASSERT(aligned_phys < (aligned_phys + (aligned_size - 1)),
		 "wraparound for physical address 0x%lx (size %zu)",
		 aligned_phys, aligned_size);

	align_boundary = arch_virt_region_align(aligned_phys, aligned_size);
  10f274:	31 c0                	xor    %eax,%eax
{
  10f276:	48 89 e5             	mov    %rsp,%rbp
  10f279:	41 57                	push   %r15
  10f27b:	41 56                	push   %r14
	size_t addr_offset;

	/* The actual mapped region must be page-aligned. Round down the
	 * physical address and pad the region size appropriately
	 */
	*aligned_addr = ROUND_DOWN(addr, align);
  10f27d:	49 89 f6             	mov    %rsi,%r14
{
  10f280:	41 55                	push   %r13
	*aligned_addr = ROUND_DOWN(addr, align);
  10f282:	49 81 e6 00 f0 ff ff 	and    $0xfffffffffffff000,%r14
{
  10f289:	49 89 fd             	mov    %rdi,%r13
  10f28c:	41 54                	push   %r12
	align_boundary = arch_virt_region_align(aligned_phys, aligned_size);
  10f28e:	4c 89 f7             	mov    %r14,%rdi
{
  10f291:	53                   	push   %rbx
  10f292:	48 89 f3             	mov    %rsi,%rbx
	addr_offset = addr - *aligned_addr;
  10f295:	81 e3 ff 0f 00 00    	and    $0xfff,%ebx
	*aligned_size = ROUND_UP(size + addr_offset, align);
  10f29b:	4c 8d bc 13 ff 0f 00 	lea    0xfff(%rbx,%rdx,1),%r15
  10f2a2:	00 
  10f2a3:	49 81 e7 00 f0 ff ff 	and    $0xfffffffffffff000,%r15
{
  10f2aa:	48 83 ec 18          	sub    $0x18,%rsp
  10f2ae:	89 4d c4             	mov    %ecx,-0x3c(%rbp)
	align_boundary = arch_virt_region_align(aligned_phys, aligned_size);
  10f2b1:	4c 89 fe             	mov    %r15,%rsi
  10f2b4:	e8 b4 ff ff ff       	callq  10f26d <arch_virt_region_align>
  10f2b9:	48 89 c6             	mov    %rax,%rsi
  10f2bc:	9c                   	pushfq 
  10f2bd:	fa                   	cli    
  10f2be:	8f 45 c8             	popq   -0x38(%rbp)
	dest_addr = virt_region_alloc(aligned_size, align_boundary);
  10f2c1:	4c 89 ff             	mov    %r15,%rdi
  10f2c4:	e8 7d fd ff ff       	callq  10f046 <virt_region_alloc>
	if (!dest_addr) {
  10f2c9:	8b 4d c4             	mov    -0x3c(%rbp),%ecx
  10f2cc:	48 85 c0             	test   %rax,%rax
  10f2cf:	75 09                	jne    10f2da <z_phys_map+0x67>
	k_panic();
  10f2d1:	48 c7 c0 04 00 00 00 	mov    $0x4,%rax
  10f2d8:	cd 20                	int    $0x20
	arch_mem_map(dest_addr, aligned_phys, aligned_size, flags);
  10f2da:	4c 89 fa             	mov    %r15,%rdx
  10f2dd:	4c 89 f6             	mov    %r14,%rsi
  10f2e0:	48 89 c7             	mov    %rax,%rdi
  10f2e3:	49 89 dc             	mov    %rbx,%r12
  10f2e6:	48 89 c3             	mov    %rax,%rbx
  10f2e9:	e8 96 d4 ff ff       	callq  10c784 <arch_mem_map>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10f2ee:	0f ba 65 c8 09       	btl    $0x9,-0x38(%rbp)
  10f2f3:	73 01                	jae    10f2f6 <z_phys_map+0x83>
		__asm__ volatile ("sti" ::: "memory");
  10f2f5:	fb                   	sti    
	*virt_ptr = dest_addr + addr_offset;
  10f2f6:	4c 01 e3             	add    %r12,%rbx
  10f2f9:	49 89 5d 00          	mov    %rbx,0x0(%r13)
}
  10f2fd:	48 83 c4 18          	add    $0x18,%rsp
  10f301:	5b                   	pop    %rbx
  10f302:	41 5c                	pop    %r12
  10f304:	41 5d                	pop    %r13
  10f306:	41 5e                	pop    %r14
  10f308:	41 5f                	pop    %r15
  10f30a:	5d                   	pop    %rbp
  10f30b:	c3                   	retq   

000000000010f30c <z_mem_manage_init>:
	}
}
#endif /* CONFIG_LINKER_USE_BOOT_SECTION) || CONFIG_LINKER_USE_PINNED_SECTION */

void z_mem_manage_init(void)
{
  10f30c:	55                   	push   %rbp
  10f30d:	48 89 e5             	mov    %rsp,%rbp
  10f310:	53                   	push   %rbx
  10f311:	52                   	push   %rdx
  10f312:	9c                   	pushfq 
  10f313:	fa                   	cli    
  10f314:	5b                   	pop    %rbx
	list->head = NULL;
  10f315:	48 c7 05 20 10 01 00 	movq   $0x0,0x11020(%rip)        # 120340 <free_page_frame_list>
  10f31c:	00 00 00 00 
	list->tail = NULL;
  10f320:	48 c7 05 1d 10 01 00 	movq   $0x0,0x1101d(%rip)        # 120348 <free_page_frame_list+0x8>
  10f327:	00 00 00 00 

#ifdef CONFIG_ARCH_HAS_RESERVED_PAGE_FRAMES
	/* If some page frames are unavailable for use as memory, arch
	 * code will mark Z_PAGE_FRAME_RESERVED in their flags
	 */
	arch_reserved_pages_update();
  10f32b:	e8 cf d5 ff ff       	callq  10c8ff <arch_reserved_pages_update>

#ifdef CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT
	/* All pages composing the Zephyr image are mapped at boot in a
	 * predictable way. This can change at runtime.
	 */
	VIRT_FOREACH(Z_KERNEL_VIRT_START, Z_KERNEL_VIRT_SIZE, addr)
  10f330:	b8 00 00 10 00       	mov    $0x100000,%eax
  10f335:	48 3d 00 70 15 00    	cmp    $0x157000,%rax
  10f33b:	73 21                	jae    10f35e <z_mem_manage_init+0x52>
	return &z_page_frames[(phys - Z_PHYS_RAM_START) /
  10f33d:	48 89 c2             	mov    %rax,%rdx
  10f340:	48 c1 ea 0c          	shr    $0xc,%rdx
	pf->flags |= Z_PAGE_FRAME_MAPPED;
  10f344:	48 8d 14 d2          	lea    (%rdx,%rdx,8),%rdx
	pf->addr = addr;
  10f348:	48 89 82 80 db 11 00 	mov    %rax,0x11db80(%rdx)
	VIRT_FOREACH(Z_KERNEL_VIRT_START, Z_KERNEL_VIRT_SIZE, addr)
  10f34f:	48 05 00 10 00 00    	add    $0x1000,%rax
		 * code/data pages which are pinned in memory and
		 * may not be evicted. This will contain critical CPU data
		 * structures, and any code used to perform page fault
		 * handling, page-ins, etc.
		 */
		pf->flags |= Z_PAGE_FRAME_PINNED;
  10f355:	80 8a 88 db 11 00 05 	orb    $0x5,0x11db88(%rdx)
	VIRT_FOREACH(Z_KERNEL_VIRT_START, Z_KERNEL_VIRT_SIZE, addr)
  10f35c:	eb d7                	jmp    10f335 <z_mem_manage_init+0x29>
#endif

	/* Any remaining pages that aren't mapped, reserved, or pinned get
	 * added to the free pages list
	 */
	Z_PAGE_FRAME_FOREACH(phys, pf) {
  10f35e:	ba 80 db 11 00       	mov    $0x11db80,%edx
		if (z_page_frame_is_available(pf)) {
  10f363:	80 7a 08 00          	cmpb   $0x0,0x8(%rdx)
  10f367:	75 08                	jne    10f371 <z_mem_manage_init+0x65>
			free_page_frame_list_put(pf);
  10f369:	48 89 d7             	mov    %rdx,%rdi
  10f36c:	e8 a0 fc ff ff       	callq  10f011 <free_page_frame_list_put>
	Z_PAGE_FRAME_FOREACH(phys, pf) {
  10f371:	48 83 c2 09          	add    $0x9,%rdx
  10f375:	48 81 fa 80 ff 11 00 	cmp    $0x11ff80,%rdx
  10f37c:	75 e5                	jne    10f363 <z_mem_manage_init+0x57>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10f37e:	0f ba e3 09          	bt     $0x9,%ebx
  10f382:	73 01                	jae    10f385 <z_mem_manage_init+0x79>
		__asm__ volatile ("sti" ::: "memory");
  10f384:	fb                   	sti    
	 * and the BSS pages can be brought into physical
	 * memory to be cleared.
	 */
	z_bss_zero();
#endif
}
  10f385:	58                   	pop    %rax
  10f386:	5b                   	pop    %rbx
  10f387:	5d                   	pop    %rbp
  10f388:	c3                   	retq   

000000000010f389 <z_mem_manage_boot_finish>:
	/* At the end of boot process, unpin the boot sections
	 * as they don't need to be in memory all the time anymore.
	 */
	mark_linker_section_pinned(lnkr_boot_start, lnkr_boot_end, false);
#endif
}
  10f389:	c3                   	retq   

000000000010f38a <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
  10f38a:	55                   	push   %rbp
  10f38b:	48 89 e5             	mov    %rsp,%rbp
  10f38e:	41 57                	push   %r15
  10f390:	41 56                	push   %r14
  10f392:	41 55                	push   %r13
  10f394:	41 89 f5             	mov    %esi,%r13d
  10f397:	41 54                	push   %r12
  10f399:	49 89 fc             	mov    %rdi,%r12
  10f39c:	53                   	push   %rbx
  10f39d:	51                   	push   %rcx
	struct z_poller *poller = event->poller;
  10f39e:	48 8b 5f 10          	mov    0x10(%rdi),%rbx
	int retcode = 0;

	if (poller != NULL) {
  10f3a2:	48 85 db             	test   %rbx,%rbx
  10f3a5:	0f 84 98 00 00 00    	je     10f443 <signal_poll_event+0xb9>
		if (poller->mode == MODE_POLL) {
  10f3ab:	8a 43 01             	mov    0x1(%rbx),%al
  10f3ae:	3c 01                	cmp    $0x1,%al
  10f3b0:	75 5d                	jne    10f40f <signal_poll_event+0x85>
	if (!z_is_thread_pending(thread)) {
  10f3b2:	f6 83 71 ff ff ff 02 	testb  $0x2,-0x8f(%rbx)
  10f3b9:	0f 84 81 00 00 00    	je     10f440 <signal_poll_event+0xb6>
	if (z_is_thread_timeout_expired(thread)) {
  10f3bf:	48 83 7b 98 fe       	cmpq   $0xfffffffffffffffe,-0x68(%rbx)
  10f3c4:	75 0d                	jne    10f3d3 <signal_poll_event+0x49>
		} else {
			/* Poller is not poll or triggered mode. No action needed.*/
			;
		}

		poller->is_polling = false;
  10f3c6:	c6 03 00             	movb   $0x0,(%rbx)
		return -EAGAIN;
  10f3c9:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
  10f3ce:	e9 9a 00 00 00       	jmpq   10f46d <signal_poll_event+0xe3>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
  10f3d3:	4c 8d b3 58 ff ff ff 	lea    -0xa8(%rbx),%r14
	z_unpend_thread(thread);
  10f3da:	4c 89 f7             	mov    %r14,%rdi
  10f3dd:	e8 de ef ff ff       	callq  10e3c0 <z_unpend_thread>
	arch_thread_return_value_set(thread,
  10f3e2:	31 c0                	xor    %eax,%eax
  10f3e4:	41 83 fd 08          	cmp    $0x8,%r13d
  10f3e8:	0f 95 c0             	setne  %al
  10f3eb:	8d 04 85 fc ff ff ff 	lea    -0x4(,%rax,4),%eax
	thread->swap_retval = value;
  10f3f2:	89 43 08             	mov    %eax,0x8(%rbx)
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
  10f3f5:	f6 83 71 ff ff ff 1f 	testb  $0x1f,-0x8f(%rbx)
  10f3fc:	75 42                	jne    10f440 <signal_poll_event+0xb6>
	if (!z_is_thread_ready(thread)) {
  10f3fe:	48 83 7b 80 00       	cmpq   $0x0,-0x80(%rbx)
  10f403:	75 3b                	jne    10f440 <signal_poll_event+0xb6>
	z_ready_thread(thread);
  10f405:	4c 89 f7             	mov    %r14,%rdi
  10f408:	e8 43 f2 ff ff       	callq  10e650 <z_ready_thread>
		poller->is_polling = false;
  10f40d:	eb 31                	jmp    10f440 <signal_poll_event+0xb6>
		} else if (poller->mode == MODE_TRIGGERED) {
  10f40f:	3c 02                	cmp    $0x2,%al
  10f411:	75 2d                	jne    10f440 <signal_poll_event+0xb6>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
  10f413:	80 3b 00             	cmpb   $0x0,(%rbx)
  10f416:	74 2b                	je     10f443 <signal_poll_event+0xb9>
  10f418:	4c 8b 73 f8          	mov    -0x8(%rbx),%r14
  10f41c:	4d 85 f6             	test   %r14,%r14
  10f41f:	74 1f                	je     10f440 <signal_poll_event+0xb6>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
  10f421:	48 8d 7b 20          	lea    0x20(%rbx),%rdi
  10f425:	4c 8d 7b d8          	lea    -0x28(%rbx),%r15
  10f429:	e8 cf f9 ff ff       	callq  10edfd <z_abort_timeout>
		twork->poll_result = 0;
  10f42e:	c7 43 40 00 00 00 00 	movl   $0x0,0x40(%rbx)
		k_work_submit_to_queue(work_q, &twork->work);
  10f435:	4c 89 fe             	mov    %r15,%rsi
  10f438:	4c 89 f7             	mov    %r14,%rdi
  10f43b:	e8 be 03 00 00       	callq  10f7fe <k_work_submit_to_queue>
		poller->is_polling = false;
  10f440:	c6 03 00             	movb   $0x0,(%rbx)
	event->poller = NULL;
  10f443:	49 c7 44 24 10 00 00 	movq   $0x0,0x10(%r12)
  10f44a:	00 00 
	event->state |= state;
  10f44c:	41 8b 44 24 18       	mov    0x18(%r12),%eax
  10f451:	89 c6                	mov    %eax,%esi
  10f453:	25 ff 1f f8 ff       	and    $0xfff81fff,%eax
  10f458:	c1 ee 0d             	shr    $0xd,%esi
  10f45b:	44 09 ee             	or     %r13d,%esi
  10f45e:	83 e6 3f             	and    $0x3f,%esi
  10f461:	c1 e6 0d             	shl    $0xd,%esi
  10f464:	09 c6                	or     %eax,%esi
	return retcode;
  10f466:	31 c0                	xor    %eax,%eax
	event->state |= state;
  10f468:	41 89 74 24 18       	mov    %esi,0x18(%r12)
}
  10f46d:	5a                   	pop    %rdx
  10f46e:	5b                   	pop    %rbx
  10f46f:	41 5c                	pop    %r12
  10f471:	41 5d                	pop    %r13
  10f473:	41 5e                	pop    %r14
  10f475:	41 5f                	pop    %r15
  10f477:	5d                   	pop    %rbp
  10f478:	c3                   	retq   

000000000010f479 <z_handle_obj_poll_events>:
{
  10f479:	49 89 f8             	mov    %rdi,%r8
  10f47c:	48 8b 3f             	mov    (%rdi),%rdi

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
  10f47f:	4c 39 c7             	cmp    %r8,%rdi
  10f482:	74 22                	je     10f4a6 <z_handle_obj_poll_events+0x2d>
	sys_dnode_t *const prev = node->prev;
  10f484:	48 8b 57 08          	mov    0x8(%rdi),%rdx
	sys_dnode_t *const next = node->next;
  10f488:	48 8b 07             	mov    (%rdi),%rax
	prev->next = next;
  10f48b:	48 89 02             	mov    %rax,(%rdx)
	next->prev = prev;
  10f48e:	48 89 50 08          	mov    %rdx,0x8(%rax)
	node->next = NULL;
  10f492:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
	node->prev = NULL;
  10f499:	48 c7 47 08 00 00 00 	movq   $0x0,0x8(%rdi)
  10f4a0:	00 
		(void) signal_poll_event(poll_event, state);
  10f4a1:	e9 e4 fe ff ff       	jmpq   10f38a <signal_poll_event>
}
  10f4a6:	c3                   	retq   

000000000010f4a7 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
  10f4a7:	ba f3 13 11 00       	mov    $0x1113f3,%edx
  10f4ac:	be a6 14 11 00       	mov    $0x1114a6,%esi
  10f4b1:	bf c1 14 11 00       	mov    $0x1114c1,%edi
  10f4b6:	31 c0                	xor    %eax,%eax
  10f4b8:	e9 81 c2 ff ff       	jmpq   10b73e <printk>

000000000010f4bd <k_heap_init>:
	sys_dlist_init(&w->waitq);
  10f4bd:	48 8d 47 18          	lea    0x18(%rdi),%rax
	list->head = (sys_dnode_t *)list;
  10f4c1:	48 89 47 18          	mov    %rax,0x18(%rdi)
	list->tail = (sys_dnode_t *)list;
  10f4c5:	48 89 47 20          	mov    %rax,0x20(%rdi)
#include <linker/linker-defs.h>

void k_heap_init(struct k_heap *h, void *mem, size_t bytes)
{
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
  10f4c9:	e9 b2 c3 ff ff       	jmpq   10b880 <sys_heap_init>

000000000010f4ce <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
  10f4ce:	55                   	push   %rbp
  10f4cf:	48 89 e5             	mov    %rsp,%rbp
  10f4d2:	53                   	push   %rbx
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
  10f4d3:	bb 20 84 14 00       	mov    $0x148420,%ebx
{
  10f4d8:	51                   	push   %rcx
	STRUCT_SECTION_FOREACH(k_heap, h) {
  10f4d9:	48 81 fb 20 84 14 00 	cmp    $0x148420,%rbx
  10f4e0:	73 16                	jae    10f4f8 <statics_init+0x2a>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
  10f4e2:	48 8b 53 10          	mov    0x10(%rbx),%rdx
  10f4e6:	48 8b 73 08          	mov    0x8(%rbx),%rsi
  10f4ea:	48 89 df             	mov    %rbx,%rdi
	STRUCT_SECTION_FOREACH(k_heap, h) {
  10f4ed:	48 83 c3 28          	add    $0x28,%rbx
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
  10f4f1:	e8 c7 ff ff ff       	callq  10f4bd <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
  10f4f6:	eb e1                	jmp    10f4d9 <statics_init+0xb>
		}
	}
	return 0;
}
  10f4f8:	5a                   	pop    %rdx
  10f4f9:	31 c0                	xor    %eax,%eax
  10f4fb:	5b                   	pop    %rbx
  10f4fc:	5d                   	pop    %rbp
  10f4fd:	c3                   	retq   

000000000010f4fe <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
  10f4fe:	55                   	push   %rbp
	struct k_work_queue_config cfg = {
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
  10f4ff:	83 c9 ff             	or     $0xffffffff,%ecx
  10f502:	ba 00 20 00 00       	mov    $0x2000,%edx
  10f507:	be 40 54 14 00       	mov    $0x145440,%esi
  10f50c:	bf 80 ff 11 00       	mov    $0x11ff80,%edi
{
  10f511:	48 89 e5             	mov    %rsp,%rbp
  10f514:	48 83 ec 10          	sub    $0x10,%rsp
	k_work_queue_start(&k_sys_work_q,
  10f518:	4c 8d 45 f0          	lea    -0x10(%rbp),%r8
	struct k_work_queue_config cfg = {
  10f51c:	48 c7 45 f0 e8 14 11 	movq   $0x1114e8,-0x10(%rbp)
  10f523:	00 
  10f524:	c6 45 f8 00          	movb   $0x0,-0x8(%rbp)
	k_work_queue_start(&k_sys_work_q,
  10f528:	e8 16 03 00 00       	callq  10f843 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
  10f52d:	31 c0                	xor    %eax,%eax
  10f52f:	c9                   	leaveq 
  10f530:	c3                   	retq   

000000000010f531 <flag_test_and_clear>:
}

static inline bool flag_test(const uint32_t *flagp,
			     uint32_t bit)
{
	return (*flagp & BIT(bit)) != 0U;
  10f531:	8b 07                	mov    (%rdi),%eax
}

static inline bool flag_test_and_clear(uint32_t *flagp,
				       int bit)
{
  10f533:	89 f1                	mov    %esi,%ecx
	*flagp &= ~BIT(bit);
  10f535:	48 c7 c2 fe ff ff ff 	mov    $0xfffffffffffffffe,%rdx
  10f53c:	48 d3 c2             	rol    %cl,%rdx
  10f53f:	21 c2                	and    %eax,%edx
	return (*flagp & BIT(bit)) != 0U;
  10f541:	48 d3 e8             	shr    %cl,%rax
	*flagp &= ~BIT(bit);
  10f544:	89 17                	mov    %edx,(%rdi)
	return (*flagp & BIT(bit)) != 0U;
  10f546:	83 e0 01             	and    $0x1,%eax
	bool ret = flag_test(flagp, bit);

	flag_clear(flagp, bit);

	return ret;
}
  10f549:	c3                   	retq   

000000000010f54a <notify_queue_locked.isra.0>:
 */
static inline bool notify_queue_locked(struct k_work_q *queue)
{
	bool rv = false;

	if (queue != NULL) {
  10f54a:	48 85 ff             	test   %rdi,%rdi
  10f54d:	74 10                	je     10f55f <notify_queue_locked.isra.0+0x15>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
  10f54f:	48 81 c7 30 03 00 00 	add    $0x330,%rdi
  10f556:	31 d2                	xor    %edx,%edx
  10f558:	31 f6                	xor    %esi,%esi
  10f55a:	e9 85 f6 ff ff       	jmpq   10ebe4 <z_sched_wake>
	}

	return rv;
}
  10f55f:	c3                   	retq   

000000000010f560 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
  10f560:	55                   	push   %rbp
  10f561:	48 89 e5             	mov    %rsp,%rbp
  10f564:	41 57                	push   %r15
  10f566:	41 56                	push   %r14
  10f568:	41 55                	push   %r13
  10f56a:	41 54                	push   %r12
  10f56c:	53                   	push   %rbx
  10f56d:	48 89 fb             	mov    %rdi,%rbx
  10f570:	50                   	push   %rax
  10f571:	9c                   	pushfq 
  10f572:	fa                   	cli    
  10f573:	41 5d                	pop    %r13
	return list->head;
  10f575:	4c 8b a3 20 03 00 00 	mov    0x320(%rbx),%r12
Z_GENLIST_GET(slist, snode)
  10f57c:	4d 85 e4             	test   %r12,%r12
  10f57f:	75 32                	jne    10f5b3 <work_queue_main+0x53>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
  10f581:	48 8d bb 50 03 00 00 	lea    0x350(%rbx),%rdi
  10f588:	be 02 00 00 00       	mov    $0x2,%esi
  10f58d:	e8 9f ff ff ff       	callq  10f531 <flag_test_and_clear>
  10f592:	84 c0                	test   %al,%al
  10f594:	75 3a                	jne    10f5d0 <work_queue_main+0x70>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
  10f596:	45 31 c0             	xor    %r8d,%r8d
  10f599:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
  10f59d:	44 89 ee             	mov    %r13d,%esi
  10f5a0:	bf 3b 04 12 00       	mov    $0x12043b,%edi
  10f5a5:	48 8d 93 30 03 00 00 	lea    0x330(%rbx),%rdx
  10f5ac:	e8 81 f6 ff ff       	callq  10ec32 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
  10f5b1:	eb be                	jmp    10f571 <work_queue_main+0x11>
	return node->next;
  10f5b3:	49 8b 04 24          	mov    (%r12),%rax
	list->head = node;
  10f5b7:	48 89 83 20 03 00 00 	mov    %rax,0x320(%rbx)
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
  10f5be:	4c 3b a3 28 03 00 00 	cmp    0x328(%rbx),%r12
  10f5c5:	75 25                	jne    10f5ec <work_queue_main+0x8c>
	list->tail = node;
  10f5c7:	48 89 83 28 03 00 00 	mov    %rax,0x328(%rbx)
}
  10f5ce:	eb 1c                	jmp    10f5ec <work_queue_main+0x8c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
  10f5d0:	4c 8d a3 40 03 00 00 	lea    0x340(%rbx),%r12
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
  10f5d7:	31 d2                	xor    %edx,%edx
  10f5d9:	be 01 00 00 00       	mov    $0x1,%esi
  10f5de:	4c 89 e7             	mov    %r12,%rdi
  10f5e1:	e8 fe f5 ff ff       	callq  10ebe4 <z_sched_wake>
  10f5e6:	84 c0                	test   %al,%al
  10f5e8:	75 ed                	jne    10f5d7 <work_queue_main+0x77>
  10f5ea:	eb aa                	jmp    10f596 <work_queue_main+0x36>
	*flagp |= BIT(bit);
  10f5ec:	83 8b 50 03 00 00 02 	orl    $0x2,0x350(%rbx)
	*flagp &= ~BIT(bit);
  10f5f3:	41 8b 44 24 18       	mov    0x18(%r12),%eax
  10f5f8:	83 e0 fb             	and    $0xfffffffb,%eax
  10f5fb:	83 c8 01             	or     $0x1,%eax
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10f5fe:	41 0f ba e5 09       	bt     $0x9,%r13d
  10f603:	41 89 44 24 18       	mov    %eax,0x18(%r12)
			handler = work->handler;
  10f608:	49 8b 44 24 08       	mov    0x8(%r12),%rax
  10f60d:	73 01                	jae    10f610 <work_queue_main+0xb0>
		__asm__ volatile ("sti" ::: "memory");
  10f60f:	fb                   	sti    

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
  10f610:	4c 89 e7             	mov    %r12,%rdi
  10f613:	ff d0                	callq  *%rax
  10f615:	9c                   	pushfq 
  10f616:	fa                   	cli    
  10f617:	41 5d                	pop    %r13
	*flagp &= ~BIT(bit);
  10f619:	41 8b 44 24 18       	mov    0x18(%r12),%eax
  10f61e:	89 c2                	mov    %eax,%edx
  10f620:	83 e2 fe             	and    $0xfffffffe,%edx
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
  10f623:	a8 02                	test   $0x2,%al
  10f625:	75 2c                	jne    10f653 <work_queue_main+0xf3>
	*flagp &= ~BIT(bit);
  10f627:	41 89 54 24 18       	mov    %edx,0x18(%r12)
  10f62c:	8b 83 50 03 00 00    	mov    0x350(%rbx),%eax
  10f632:	83 e0 fd             	and    $0xfffffffd,%eax
  10f635:	89 83 50 03 00 00    	mov    %eax,0x350(%rbx)
	return (*flagp & BIT(bit)) != 0U;
  10f63b:	48 c1 e8 08          	shr    $0x8,%rax
  10f63f:	83 e0 01             	and    $0x1,%eax
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10f642:	41 0f ba e5 09       	bt     $0x9,%r13d
  10f647:	0f 83 87 00 00 00    	jae    10f6d4 <work_queue_main+0x174>
		__asm__ volatile ("sti" ::: "memory");
  10f64d:	fb                   	sti    
  10f64e:	e9 81 00 00 00       	jmpq   10f6d4 <work_queue_main+0x174>
	return list->head;
  10f653:	48 8b 3d f6 0c 01 00 	mov    0x10cf6(%rip),%rdi        # 120350 <pending_cancels>
	*flagp &= ~BIT(bit);
  10f65a:	83 e0 fc             	and    $0xfffffffc,%eax
  10f65d:	41 89 44 24 18       	mov    %eax,0x18(%r12)
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
  10f662:	48 85 ff             	test   %rdi,%rdi
  10f665:	74 c5                	je     10f62c <work_queue_main+0xcc>
	return node->next;
  10f667:	4c 8b 3f             	mov    (%rdi),%r15
  10f66a:	45 31 f6             	xor    %r14d,%r14d
			sys_slist_remove(&pending_cancels, prev, &wc->node);
  10f66d:	48 89 f8             	mov    %rdi,%rax
		if (wc->work == work) {
  10f670:	4c 3b 67 08          	cmp    0x8(%rdi),%r12
  10f674:	75 4a                	jne    10f6c0 <work_queue_main+0x160>
  10f676:	48 8b 07             	mov    (%rdi),%rax
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
  10f679:	4d 85 f6             	test   %r14,%r14
  10f67c:	75 19                	jne    10f697 <work_queue_main+0x137>
  10f67e:	48 39 3d d3 0c 01 00 	cmp    %rdi,0x10cd3(%rip)        # 120358 <pending_cancels+0x8>
	list->head = node;
  10f685:	48 89 05 c4 0c 01 00 	mov    %rax,0x10cc4(%rip)        # 120350 <pending_cancels>
Z_GENLIST_REMOVE(slist, snode)
  10f68c:	75 1f                	jne    10f6ad <work_queue_main+0x14d>
	list->tail = node;
  10f68e:	48 89 05 c3 0c 01 00 	mov    %rax,0x10cc3(%rip)        # 120358 <pending_cancels+0x8>
}
  10f695:	eb 16                	jmp    10f6ad <work_queue_main+0x14d>
	return list->tail;
  10f697:	48 8b 15 ba 0c 01 00 	mov    0x10cba(%rip),%rdx        # 120358 <pending_cancels+0x8>
	parent->next = child;
  10f69e:	49 89 06             	mov    %rax,(%r14)
Z_GENLIST_REMOVE(slist, snode)
  10f6a1:	48 39 fa             	cmp    %rdi,%rdx
  10f6a4:	75 07                	jne    10f6ad <work_queue_main+0x14d>
	list->tail = node;
  10f6a6:	4c 89 35 ab 0c 01 00 	mov    %r14,0x10cab(%rip)        # 120358 <pending_cancels+0x8>
	parent->next = child;
  10f6ad:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
			k_sem_give(&wc->sem);
  10f6b4:	48 83 c7 10          	add    $0x10,%rdi
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
  10f6b8:	e8 09 eb ff ff       	callq  10e1c6 <z_impl_k_sem_give>
}
  10f6bd:	4c 89 f0             	mov    %r14,%rax
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
  10f6c0:	4d 85 ff             	test   %r15,%r15
  10f6c3:	0f 84 63 ff ff ff    	je     10f62c <work_queue_main+0xcc>
	return node->next;
  10f6c9:	4c 89 ff             	mov    %r15,%rdi
  10f6cc:	49 89 c6             	mov    %rax,%r14
  10f6cf:	4d 8b 3f             	mov    (%r15),%r15
  10f6d2:	eb 99                	jmp    10f66d <work_queue_main+0x10d>
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
  10f6d4:	84 c0                	test   %al,%al
  10f6d6:	0f 85 95 fe ff ff    	jne    10f571 <work_queue_main+0x11>
	z_impl_k_yield();
  10f6dc:	e8 aa f2 ff ff       	callq  10e98b <z_impl_k_yield>
}
  10f6e1:	e9 8b fe ff ff       	jmpq   10f571 <work_queue_main+0x11>

000000000010f6e6 <submit_to_queue_locked>:
{
  10f6e6:	55                   	push   %rbp
  10f6e7:	48 89 e5             	mov    %rsp,%rbp
  10f6ea:	41 56                	push   %r14
  10f6ec:	41 55                	push   %r13
  10f6ee:	41 54                	push   %r12
  10f6f0:	49 89 f4             	mov    %rsi,%r12
  10f6f3:	53                   	push   %rbx
	return (*flagp & BIT(bit)) != 0U;
  10f6f4:	8b 57 18             	mov    0x18(%rdi),%edx
  10f6f7:	48 89 d0             	mov    %rdx,%rax
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
  10f6fa:	a8 02                	test   $0x2,%al
  10f6fc:	0f 85 cd 00 00 00    	jne    10f7cf <submit_to_queue_locked+0xe9>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
  10f702:	80 e2 04             	and    $0x4,%dl
  10f705:	0f 85 cc 00 00 00    	jne    10f7d7 <submit_to_queue_locked+0xf1>
		if (*queuep == NULL) {
  10f70b:	48 83 3e 00          	cmpq   $0x0,(%rsi)
  10f70f:	48 89 fb             	mov    %rdi,%rbx
  10f712:	75 07                	jne    10f71b <submit_to_queue_locked+0x35>
			*queuep = work->queue;
  10f714:	48 8b 57 10          	mov    0x10(%rdi),%rdx
  10f718:	48 89 16             	mov    %rdx,(%rsi)
		ret = 1;
  10f71b:	41 be 01 00 00 00    	mov    $0x1,%r14d
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
  10f721:	a8 01                	test   $0x1,%al
  10f723:	74 0e                	je     10f733 <submit_to_queue_locked+0x4d>
			*queuep = work->queue;
  10f725:	48 8b 43 10          	mov    0x10(%rbx),%rax
			ret = 2;
  10f729:	41 be 02 00 00 00    	mov    $0x2,%r14d
			*queuep = work->queue;
  10f72f:	49 89 04 24          	mov    %rax,(%r12)
		int rc = queue_submit_locked(*queuep, work);
  10f733:	4d 8b 2c 24          	mov    (%r12),%r13
	if (queue == NULL) {
  10f737:	4d 85 ed             	test   %r13,%r13
  10f73a:	0f 84 9c 00 00 00    	je     10f7dc <submit_to_queue_locked+0xf6>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
  10f740:	31 c0                	xor    %eax,%eax
  10f742:	4c 39 2d 07 e3 00 00 	cmp    %r13,0xe307(%rip)        # 11da50 <_kernel+0x10>
  10f749:	75 0b                	jne    10f756 <submit_to_queue_locked+0x70>
  10f74b:	e8 cf e6 ff ff       	callq  10de1f <k_is_in_isr>
  10f750:	83 f0 01             	xor    $0x1,%eax
  10f753:	0f b6 c0             	movzbl %al,%eax
	return (*flagp & BIT(bit)) != 0U;
  10f756:	41 8b 95 50 03 00 00 	mov    0x350(%r13),%edx
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
  10f75d:	83 e0 01             	and    $0x1,%eax
	return (*flagp & BIT(bit)) != 0U;
  10f760:	48 89 d1             	mov    %rdx,%rcx
  10f763:	48 89 d6             	mov    %rdx,%rsi
  10f766:	48 c1 ea 03          	shr    $0x3,%rdx
  10f76a:	48 c1 e9 02          	shr    $0x2,%rcx
  10f76e:	83 e2 01             	and    $0x1,%edx
  10f771:	83 e1 01             	and    $0x1,%ecx
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
  10f774:	40 80 e6 01          	and    $0x1,%sil
  10f778:	74 6a                	je     10f7e4 <submit_to_queue_locked+0xfe>
	} else if (draining && !chained) {
  10f77a:	84 c0                	test   %al,%al
  10f77c:	75 06                	jne    10f784 <submit_to_queue_locked+0x9e>
  10f77e:	84 c9                	test   %cl,%cl
  10f780:	74 06                	je     10f788 <submit_to_queue_locked+0xa2>
  10f782:	eb 4b                	jmp    10f7cf <submit_to_queue_locked+0xe9>
	} else if (plugged && !draining) {
  10f784:	84 c9                	test   %cl,%cl
  10f786:	75 04                	jne    10f78c <submit_to_queue_locked+0xa6>
  10f788:	84 d2                	test   %dl,%dl
  10f78a:	75 43                	jne    10f7cf <submit_to_queue_locked+0xe9>
	return list->tail;
  10f78c:	49 8b 85 28 03 00 00 	mov    0x328(%r13),%rax
	parent->next = child;
  10f793:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
Z_GENLIST_APPEND(slist, snode)
  10f79a:	48 85 c0             	test   %rax,%rax
  10f79d:	75 10                	jne    10f7af <submit_to_queue_locked+0xc9>
	list->tail = node;
  10f79f:	49 89 9d 28 03 00 00 	mov    %rbx,0x328(%r13)
	list->head = node;
  10f7a6:	49 89 9d 20 03 00 00 	mov    %rbx,0x320(%r13)
}
  10f7ad:	eb 0a                	jmp    10f7b9 <submit_to_queue_locked+0xd3>
	parent->next = child;
  10f7af:	48 89 18             	mov    %rbx,(%rax)
	list->tail = node;
  10f7b2:	49 89 9d 28 03 00 00 	mov    %rbx,0x328(%r13)
		(void)notify_queue_locked(queue);
  10f7b9:	4c 89 ef             	mov    %r13,%rdi
  10f7bc:	e8 89 fd ff ff       	callq  10f54a <notify_queue_locked.isra.0>
			work->queue = *queuep;
  10f7c1:	49 8b 04 24          	mov    (%r12),%rax
	*flagp |= BIT(bit);
  10f7c5:	83 4b 18 04          	orl    $0x4,0x18(%rbx)
			work->queue = *queuep;
  10f7c9:	48 89 43 10          	mov    %rax,0x10(%rbx)
	if (ret <= 0) {
  10f7cd:	eb 23                	jmp    10f7f2 <submit_to_queue_locked+0x10c>
		ret = -EBUSY;
  10f7cf:	41 be f0 ff ff ff    	mov    $0xfffffff0,%r14d
  10f7d5:	eb 13                	jmp    10f7ea <submit_to_queue_locked+0x104>
	int ret = 0;
  10f7d7:	45 31 f6             	xor    %r14d,%r14d
  10f7da:	eb 0e                	jmp    10f7ea <submit_to_queue_locked+0x104>
		return -EINVAL;
  10f7dc:	41 be ea ff ff ff    	mov    $0xffffffea,%r14d
  10f7e2:	eb 06                	jmp    10f7ea <submit_to_queue_locked+0x104>
		ret = -ENODEV;
  10f7e4:	41 be ed ff ff ff    	mov    $0xffffffed,%r14d
		*queuep = NULL;
  10f7ea:	49 c7 04 24 00 00 00 	movq   $0x0,(%r12)
  10f7f1:	00 
}
  10f7f2:	5b                   	pop    %rbx
  10f7f3:	44 89 f0             	mov    %r14d,%eax
  10f7f6:	41 5c                	pop    %r12
  10f7f8:	41 5d                	pop    %r13
  10f7fa:	41 5e                	pop    %r14
  10f7fc:	5d                   	pop    %rbp
  10f7fd:	c3                   	retq   

000000000010f7fe <k_work_submit_to_queue>:
{
  10f7fe:	55                   	push   %rbp
  10f7ff:	48 89 e5             	mov    %rsp,%rbp
  10f802:	41 54                	push   %r12
  10f804:	53                   	push   %rbx
  10f805:	48 83 ec 10          	sub    $0x10,%rsp
  10f809:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10f80d:	48 89 f7             	mov    %rsi,%rdi
  10f810:	9c                   	pushfq 
  10f811:	fa                   	cli    
  10f812:	5b                   	pop    %rbx
	int ret = submit_to_queue_locked(work, &queue);
  10f813:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  10f817:	e8 ca fe ff ff       	callq  10f6e6 <submit_to_queue_locked>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  10f81c:	0f ba e3 09          	bt     $0x9,%ebx
  10f820:	41 89 c4             	mov    %eax,%r12d
  10f823:	73 01                	jae    10f826 <k_work_submit_to_queue+0x28>
		__asm__ volatile ("sti" ::: "memory");
  10f825:	fb                   	sti    
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
  10f826:	45 85 e4             	test   %r12d,%r12d
  10f829:	7e 0e                	jle    10f839 <k_work_submit_to_queue+0x3b>
	return z_impl_k_is_preempt_thread();
  10f82b:	e8 c7 f2 ff ff       	callq  10eaf7 <z_impl_k_is_preempt_thread>
  10f830:	85 c0                	test   %eax,%eax
  10f832:	74 05                	je     10f839 <k_work_submit_to_queue+0x3b>
	z_impl_k_yield();
  10f834:	e8 52 f1 ff ff       	callq  10e98b <z_impl_k_yield>
}
  10f839:	5a                   	pop    %rdx
  10f83a:	44 89 e0             	mov    %r12d,%eax
  10f83d:	59                   	pop    %rcx
  10f83e:	5b                   	pop    %rbx
  10f83f:	41 5c                	pop    %r12
  10f841:	5d                   	pop    %rbp
  10f842:	c3                   	retq   

000000000010f843 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
  10f843:	55                   	push   %rbp
  10f844:	48 8d 87 30 03 00 00 	lea    0x330(%rdi),%rax
  10f84b:	48 89 e5             	mov    %rsp,%rbp
  10f84e:	41 54                	push   %r12
  10f850:	49 89 fc             	mov    %rdi,%r12
  10f853:	53                   	push   %rbx
  10f854:	4c 89 c3             	mov    %r8,%rbx
	list->head = (sys_dnode_t *)list;
  10f857:	48 89 87 30 03 00 00 	mov    %rax,0x330(%rdi)
	list->tail = (sys_dnode_t *)list;
  10f85e:	48 89 87 38 03 00 00 	mov    %rax,0x338(%rdi)
  10f865:	48 8d 87 40 03 00 00 	lea    0x340(%rdi),%rax
	list->head = (sys_dnode_t *)list;
  10f86c:	48 89 87 40 03 00 00 	mov    %rax,0x340(%rdi)
	list->tail = (sys_dnode_t *)list;
  10f873:	48 89 87 48 03 00 00 	mov    %rax,0x348(%rdi)
  10f87a:	b8 01 00 00 00       	mov    $0x1,%eax
	list->head = NULL;
  10f87f:	48 c7 87 20 03 00 00 	movq   $0x0,0x320(%rdi)
  10f886:	00 00 00 00 
	list->tail = NULL;
  10f88a:	48 c7 87 28 03 00 00 	movq   $0x0,0x328(%rdi)
  10f891:	00 00 00 00 

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
  10f895:	4d 85 c0             	test   %r8,%r8
  10f898:	74 0e                	je     10f8a8 <k_work_queue_start+0x65>
		flags |= K_WORK_QUEUE_NO_YIELD;
  10f89a:	41 80 78 08 01       	cmpb   $0x1,0x8(%r8)
  10f89f:	19 c0                	sbb    %eax,%eax
  10f8a1:	30 c0                	xor    %al,%al
  10f8a3:	05 01 01 00 00       	add    $0x101,%eax
	*flagp = flags;
  10f8a8:	41 89 84 24 50 03 00 	mov    %eax,0x350(%r12)
  10f8af:	00 
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
  10f8b0:	6a ff                	pushq  $0xffffffffffffffff
  10f8b2:	45 31 c9             	xor    %r9d,%r9d
  10f8b5:	4d 89 e0             	mov    %r12,%r8
  10f8b8:	4c 89 e7             	mov    %r12,%rdi
  10f8bb:	6a 00                	pushq  $0x0
  10f8bd:	51                   	push   %rcx
  10f8be:	b9 60 f5 10 00       	mov    $0x10f560,%ecx
  10f8c3:	6a 00                	pushq  $0x0
  10f8c5:	e8 fc e5 ff ff       	callq  10dec6 <z_impl_k_thread_create>
  10f8ca:	48 83 c4 20          	add    $0x20,%rsp

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
  10f8ce:	48 85 db             	test   %rbx,%rbx
  10f8d1:	74 10                	je     10f8e3 <k_work_queue_start+0xa0>
  10f8d3:	48 8b 33             	mov    (%rbx),%rsi
  10f8d6:	48 85 f6             	test   %rsi,%rsi
  10f8d9:	74 08                	je     10f8e3 <k_work_queue_start+0xa0>
	return z_impl_k_thread_name_set(thread, str);
  10f8db:	4c 89 e7             	mov    %r12,%rdi
  10f8de:	e8 47 e5 ff ff       	callq  10de2a <z_impl_k_thread_name_set>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
  10f8e3:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
	z_impl_k_thread_start(thread);
  10f8e7:	4c 89 e7             	mov    %r12,%rdi
  10f8ea:	5b                   	pop    %rbx
  10f8eb:	41 5c                	pop    %r12
  10f8ed:	5d                   	pop    %rbp
  10f8ee:	e9 3d e5 ff ff       	jmpq   10de30 <z_impl_k_thread_start>
  10f8f3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10f8fa:	00 00 00 
  10f8fd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10f904:	00 00 00 
  10f907:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10f90e:	00 00 00 
  10f911:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10f918:	00 00 00 
  10f91b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10f922:	00 00 00 
  10f925:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10f92c:	00 00 00 
  10f92f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10f936:	00 00 00 
  10f939:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10f940:	00 00 00 
  10f943:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10f94a:	00 00 00 
  10f94d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10f954:	00 00 00 
  10f957:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10f95e:	00 00 00 
  10f961:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10f968:	00 00 00 
  10f96b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10f972:	00 00 00 
  10f975:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10f97c:	00 00 00 
  10f97f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10f986:	00 00 00 
  10f989:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10f990:	00 00 00 
  10f993:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10f99a:	00 00 00 
  10f99d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10f9a4:	00 00 00 
  10f9a7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10f9ae:	00 00 00 
  10f9b1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10f9b8:	00 00 00 
  10f9bb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10f9c2:	00 00 00 
  10f9c5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10f9cc:	00 00 00 
  10f9cf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10f9d6:	00 00 00 
  10f9d9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10f9e0:	00 00 00 
  10f9e3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10f9ea:	00 00 00 
  10f9ed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10f9f4:	00 00 00 
  10f9f7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10f9fe:	00 00 00 
  10fa01:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fa08:	00 00 00 
  10fa0b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fa12:	00 00 00 
  10fa15:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fa1c:	00 00 00 
  10fa1f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fa26:	00 00 00 
  10fa29:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fa30:	00 00 00 
  10fa33:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fa3a:	00 00 00 
  10fa3d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fa44:	00 00 00 
  10fa47:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fa4e:	00 00 00 
  10fa51:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fa58:	00 00 00 
  10fa5b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fa62:	00 00 00 
  10fa65:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fa6c:	00 00 00 
  10fa6f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fa76:	00 00 00 
  10fa79:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fa80:	00 00 00 
  10fa83:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fa8a:	00 00 00 
  10fa8d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fa94:	00 00 00 
  10fa97:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fa9e:	00 00 00 
  10faa1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10faa8:	00 00 00 
  10faab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fab2:	00 00 00 
  10fab5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fabc:	00 00 00 
  10fabf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fac6:	00 00 00 
  10fac9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fad0:	00 00 00 
  10fad3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fada:	00 00 00 
  10fadd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fae4:	00 00 00 
  10fae7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10faee:	00 00 00 
  10faf1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10faf8:	00 00 00 
  10fafb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fb02:	00 00 00 
  10fb05:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fb0c:	00 00 00 
  10fb0f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fb16:	00 00 00 
  10fb19:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fb20:	00 00 00 
  10fb23:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fb2a:	00 00 00 
  10fb2d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fb34:	00 00 00 
  10fb37:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fb3e:	00 00 00 
  10fb41:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fb48:	00 00 00 
  10fb4b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fb52:	00 00 00 
  10fb55:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fb5c:	00 00 00 
  10fb5f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fb66:	00 00 00 
  10fb69:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fb70:	00 00 00 
  10fb73:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fb7a:	00 00 00 
  10fb7d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fb84:	00 00 00 
  10fb87:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fb8e:	00 00 00 
  10fb91:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fb98:	00 00 00 
  10fb9b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fba2:	00 00 00 
  10fba5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fbac:	00 00 00 
  10fbaf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fbb6:	00 00 00 
  10fbb9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fbc0:	00 00 00 
  10fbc3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fbca:	00 00 00 
  10fbcd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fbd4:	00 00 00 
  10fbd7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fbde:	00 00 00 
  10fbe1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fbe8:	00 00 00 
  10fbeb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fbf2:	00 00 00 
  10fbf5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fbfc:	00 00 00 
  10fbff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fc06:	00 00 00 
  10fc09:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fc10:	00 00 00 
  10fc13:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fc1a:	00 00 00 
  10fc1d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fc24:	00 00 00 
  10fc27:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fc2e:	00 00 00 
  10fc31:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fc38:	00 00 00 
  10fc3b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fc42:	00 00 00 
  10fc45:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fc4c:	00 00 00 
  10fc4f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fc56:	00 00 00 
  10fc59:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fc60:	00 00 00 
  10fc63:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fc6a:	00 00 00 
  10fc6d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fc74:	00 00 00 
  10fc77:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fc7e:	00 00 00 
  10fc81:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fc88:	00 00 00 
  10fc8b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fc92:	00 00 00 
  10fc95:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fc9c:	00 00 00 
  10fc9f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fca6:	00 00 00 
  10fca9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fcb0:	00 00 00 
  10fcb3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fcba:	00 00 00 
  10fcbd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fcc4:	00 00 00 
  10fcc7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fcce:	00 00 00 
  10fcd1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fcd8:	00 00 00 
  10fcdb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fce2:	00 00 00 
  10fce5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fcec:	00 00 00 
  10fcef:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fcf6:	00 00 00 
  10fcf9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fd00:	00 00 00 
  10fd03:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fd0a:	00 00 00 
  10fd0d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fd14:	00 00 00 
  10fd17:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fd1e:	00 00 00 
  10fd21:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fd28:	00 00 00 
  10fd2b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fd32:	00 00 00 
  10fd35:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fd3c:	00 00 00 
  10fd3f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fd46:	00 00 00 
  10fd49:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fd50:	00 00 00 
  10fd53:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fd5a:	00 00 00 
  10fd5d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fd64:	00 00 00 
  10fd67:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fd6e:	00 00 00 
  10fd71:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fd78:	00 00 00 
  10fd7b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fd82:	00 00 00 
  10fd85:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fd8c:	00 00 00 
  10fd8f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fd96:	00 00 00 
  10fd99:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fda0:	00 00 00 
  10fda3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fdaa:	00 00 00 
  10fdad:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fdb4:	00 00 00 
  10fdb7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fdbe:	00 00 00 
  10fdc1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fdc8:	00 00 00 
  10fdcb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fdd2:	00 00 00 
  10fdd5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fddc:	00 00 00 
  10fddf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fde6:	00 00 00 
  10fde9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fdf0:	00 00 00 
  10fdf3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fdfa:	00 00 00 
  10fdfd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fe04:	00 00 00 
  10fe07:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fe0e:	00 00 00 
  10fe11:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fe18:	00 00 00 
  10fe1b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fe22:	00 00 00 
  10fe25:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fe2c:	00 00 00 
  10fe2f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fe36:	00 00 00 
  10fe39:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fe40:	00 00 00 
  10fe43:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fe4a:	00 00 00 
  10fe4d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fe54:	00 00 00 
  10fe57:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fe5e:	00 00 00 
  10fe61:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fe68:	00 00 00 
  10fe6b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fe72:	00 00 00 
  10fe75:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fe7c:	00 00 00 
  10fe7f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fe86:	00 00 00 
  10fe89:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fe90:	00 00 00 
  10fe93:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fe9a:	00 00 00 
  10fe9d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fea4:	00 00 00 
  10fea7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10feae:	00 00 00 
  10feb1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10feb8:	00 00 00 
  10febb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fec2:	00 00 00 
  10fec5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fecc:	00 00 00 
  10fecf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fed6:	00 00 00 
  10fed9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fee0:	00 00 00 
  10fee3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10feea:	00 00 00 
  10feed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fef4:	00 00 00 
  10fef7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fefe:	00 00 00 
  10ff01:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10ff08:	00 00 00 
  10ff0b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10ff12:	00 00 00 
  10ff15:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10ff1c:	00 00 00 
  10ff1f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10ff26:	00 00 00 
  10ff29:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10ff30:	00 00 00 
  10ff33:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10ff3a:	00 00 00 
  10ff3d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10ff44:	00 00 00 
  10ff47:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10ff4e:	00 00 00 
  10ff51:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10ff58:	00 00 00 
  10ff5b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10ff62:	00 00 00 
  10ff65:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10ff6c:	00 00 00 
  10ff6f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10ff76:	00 00 00 
  10ff79:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10ff80:	00 00 00 
  10ff83:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10ff8a:	00 00 00 
  10ff8d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10ff94:	00 00 00 
  10ff97:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10ff9e:	00 00 00 
  10ffa1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10ffa8:	00 00 00 
  10ffab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10ffb2:	00 00 00 
  10ffb5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10ffbc:	00 00 00 
  10ffbf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10ffc6:	00 00 00 
  10ffc9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10ffd0:	00 00 00 
  10ffd3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10ffda:	00 00 00 
  10ffdd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10ffe4:	00 00 00 
  10ffe7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10ffee:	00 00 00 
  10fff1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10fff8:	00 00 00 
  10fffb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
