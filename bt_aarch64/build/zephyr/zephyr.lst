
zephyr.elf:     file format elf64-littleaarch64


Disassembly of section text:

0000000040000000 <__text_region_start>:
#define HEADER_FLAGS	(HEADER_PGSIZE << 1)

_ASM_FILE_PROLOGUE

SECTION_SUBSEC_FUNC(image_header,_image_header_section,_image_header)
	b	__start				// branch to kernel start
    40000000:	14004817 	b	4001205c <__reset>
	...
    40000010:	400cfab0 	.word	0x400cfab0
    40000014:	00000000 	.word	0x00000000
    40000018:	00000002 	.word	0x00000002
	...
    40000038:	644d5241 	.word	0x644d5241
    4000003c:	00000000 	.word	0x00000000

0000000040000040 <_vector_start>:
	...

0000000040000800 <_vector_table>:
	/* The whole table must be 2K aligned */
	.align 11

	/* Current EL with SP0 / Synchronous */
	.align 7
	z_arm64_enter_exc x0, x1
    40000800:	d102c3ff a90007e0 a9010fe2 a90217e4     ................
    40000810:	a9031fe6 a90427e8 a9052fea a90637ec     .....'.../...7..
    40000820:	a9073fee a90847f0 a9097bf2 d5384000     .?...G...{...@8.
    40000830:	d5384021 a90a07e0 d53bd060 d2e02001     !@8.....`.;.. ..
    40000840:	927ff800 8b010000 d51bd060 9400723a     ........`...:r..
	b	z_arm64_sync_exc
    40000850:	140071f1 d503201f d503201f d503201f     .q... ... ... ..
    40000860:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000870:	d503201f d503201f d503201f d503201f     . ... ... ... ..

	/* Current EL with SP0 / IRQ */
	.align 7
	z_arm64_enter_exc x0, x1
    40000880:	d102c3ff a90007e0 a9010fe2 a90217e4     ................
    40000890:	a9031fe6 a90427e8 a9052fea a90637ec     .....'.../...7..
    400008a0:	a9073fee a90847f0 a9097bf2 d5384000     .?...G...{...@8.
    400008b0:	d5384021 a90a07e0 d53bd060 d2e02001     !@8.....`.;.. ..
    400008c0:	927ff800 8b010000 d51bd060 9400721a     ........`....r..
#ifdef CONFIG_GEN_SW_ISR_TABLE
	b 	_isr_wrapper
    400008d0:	14004604 d503201f d503201f d503201f     .F... ... ... ..
    400008e0:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    400008f0:	d503201f d503201f d503201f d503201f     . ... ... ... ..
	b	z_irq_spurious
#endif

	/* Current EL with SP0 / FIQ */
	.align 7
	b 	.
    40000900:	14000000 d503201f d503201f d503201f     ..... ... ... ..
    40000910:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000920:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000930:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000940:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000950:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000960:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000970:	d503201f d503201f d503201f d503201f     . ... ... ... ..

	/* Current EL with SP0 / SError */
	.align 7
	z_arm64_enter_exc x0, x1
    40000980:	d102c3ff a90007e0 a9010fe2 a90217e4     ................
    40000990:	a9031fe6 a90427e8 a9052fea a90637ec     .....'.../...7..
    400009a0:	a9073fee a90847f0 a9097bf2 d5384000     .?...G...{...@8.
    400009b0:	d5384021 a90a07e0 d53bd060 d2e02001     !@8.....`.;.. ..
    400009c0:	927ff800 8b010000 d51bd060 940071da     ........`....q..
	b	z_arm64_serror
    400009d0:	140071be d503201f d503201f d503201f     .q... ... ... ..
    400009e0:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    400009f0:	d503201f d503201f d503201f d503201f     . ... ... ... ..

	/* Current EL with SPx / Synchronous */
	.align 7
	z_arm64_enter_exc x0, x1
    40000a00:	d102c3ff a90007e0 a9010fe2 a90217e4     ................
    40000a10:	a9031fe6 a90427e8 a9052fea a90637ec     .....'.../...7..
    40000a20:	a9073fee a90847f0 a9097bf2 d5384000     .?...G...{...@8.
    40000a30:	d5384021 a90a07e0 d53bd060 d2e02001     !@8.....`.;.. ..
    40000a40:	927ff800 8b010000 d51bd060 940071ba     ........`....q..
	b	z_arm64_sync_exc
    40000a50:	14007171 d503201f d503201f d503201f     qq... ... ... ..
    40000a60:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000a70:	d503201f d503201f d503201f d503201f     . ... ... ... ..

	/* Current EL with SPx / IRQ */
	.align 7
	z_arm64_enter_exc x0, x1
    40000a80:	d102c3ff a90007e0 a9010fe2 a90217e4     ................
    40000a90:	a9031fe6 a90427e8 a9052fea a90637ec     .....'.../...7..
    40000aa0:	a9073fee a90847f0 a9097bf2 d5384000     .?...G...{...@8.
    40000ab0:	d5384021 a90a07e0 d53bd060 d2e02001     !@8.....`.;.. ..
    40000ac0:	927ff800 8b010000 d51bd060 9400719a     ........`....q..
#ifdef CONFIG_GEN_SW_ISR_TABLE
	b 	_isr_wrapper
    40000ad0:	14004584 d503201f d503201f d503201f     .E... ... ... ..
    40000ae0:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000af0:	d503201f d503201f d503201f d503201f     . ... ... ... ..
	b	z_irq_spurious
#endif

	/* Current EL with SPx / FIQ */
	.align 7
	b	.
    40000b00:	14000000 d503201f d503201f d503201f     ..... ... ... ..
    40000b10:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000b20:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000b30:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000b40:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000b50:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000b60:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000b70:	d503201f d503201f d503201f d503201f     . ... ... ... ..

	/* Current EL with SPx / SError */
	.align 7
	z_arm64_enter_exc x0, x1
    40000b80:	d102c3ff a90007e0 a9010fe2 a90217e4     ................
    40000b90:	a9031fe6 a90427e8 a9052fea a90637ec     .....'.../...7..
    40000ba0:	a9073fee a90847f0 a9097bf2 d5384000     .?...G...{...@8.
    40000bb0:	d5384021 a90a07e0 d53bd060 d2e02001     !@8.....`.;.. ..
    40000bc0:	927ff800 8b010000 d51bd060 9400715a     ........`...Zq..
	b	z_arm64_serror
    40000bd0:	1400713e d503201f d503201f d503201f     >q... ... ... ..
    40000be0:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000bf0:	d503201f d503201f d503201f d503201f     . ... ... ... ..

	/* Lower EL using AArch64 / Synchronous */
	.align 7
	z_arm64_enter_exc x0, x1
    40000c00:	d102c3ff a90007e0 a9010fe2 a90217e4     ................
    40000c10:	a9031fe6 a90427e8 a9052fea a90637ec     .....'.../...7..
    40000c20:	a9073fee a90847f0 a9097bf2 d5384000     .?...G...{...@8.
    40000c30:	d5384021 a90a07e0 d53bd060 d2e02001     !@8.....`.;.. ..
    40000c40:	927ff800 8b010000 d51bd060 9400713a     ........`...:q..
	b	z_arm64_sync_exc
    40000c50:	140070f1 d503201f d503201f d503201f     .p... ... ... ..
    40000c60:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000c70:	d503201f d503201f d503201f d503201f     . ... ... ... ..

	/* Lower EL using AArch64 / IRQ */
	.align 7
	z_arm64_enter_exc x0, x1
    40000c80:	d102c3ff a90007e0 a9010fe2 a90217e4     ................
    40000c90:	a9031fe6 a90427e8 a9052fea a90637ec     .....'.../...7..
    40000ca0:	a9073fee a90847f0 a9097bf2 d5384000     .?...G...{...@8.
    40000cb0:	d5384021 a90a07e0 d53bd060 d2e02001     !@8.....`.;.. ..
    40000cc0:	927ff800 8b010000 d51bd060 9400711a     ........`....q..
#ifdef CONFIG_GEN_SW_ISR_TABLE
	b 	_isr_wrapper
    40000cd0:	14004504 d503201f d503201f d503201f     .E... ... ... ..
    40000ce0:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000cf0:	d503201f d503201f d503201f d503201f     . ... ... ... ..
	b	z_irq_spurious
#endif

	/* Lower EL using AArch64 / FIQ */
	.align 7
	b	.
    40000d00:	14000000 d503201f d503201f d503201f     ..... ... ... ..
    40000d10:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000d20:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000d30:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000d40:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000d50:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000d60:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000d70:	d503201f d503201f d503201f d503201f     . ... ... ... ..

	/* Lower EL using AArch64 / SError */
	.align 7
	z_arm64_enter_exc x0, x1
    40000d80:	d102c3ff a90007e0 a9010fe2 a90217e4     ................
    40000d90:	a9031fe6 a90427e8 a9052fea a90637ec     .....'.../...7..
    40000da0:	a9073fee a90847f0 a9097bf2 d5384000     .?...G...{...@8.
    40000db0:	d5384021 a90a07e0 d53bd060 d2e02001     !@8.....`.;.. ..
    40000dc0:	927ff800 8b010000 d51bd060 940070da     ........`....p..
	b	z_arm64_serror
    40000dd0:	140070be d503201f d503201f d503201f     .p... ... ... ..
    40000de0:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000df0:	d503201f d503201f d503201f d503201f     . ... ... ... ..

	/* Lower EL using AArch32 / Synchronous */
	.align 7
	b	.
    40000e00:	14000000 d503201f d503201f d503201f     ..... ... ... ..
    40000e10:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000e20:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000e30:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000e40:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000e50:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000e60:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000e70:	d503201f d503201f d503201f d503201f     . ... ... ... ..

	/* Lower EL using AArch32 / IRQ */
	.align 7
	b	.
    40000e80:	14000000 d503201f d503201f d503201f     ..... ... ... ..
    40000e90:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000ea0:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000eb0:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000ec0:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000ed0:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000ee0:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000ef0:	d503201f d503201f d503201f d503201f     . ... ... ... ..

	/* Lower EL using AArch32 / FIQ */
	.align 7
	b	.
    40000f00:	14000000 d503201f d503201f d503201f     ..... ... ... ..
    40000f10:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000f20:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000f30:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000f40:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000f50:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000f60:	d503201f d503201f d503201f d503201f     . ... ... ... ..
    40000f70:	d503201f d503201f d503201f d503201f     . ... ... ... ..

	/* Lower EL using AArch32 / SError */
	.align 7
	b	.
    40000f80:	14000000                                ....

0000000040000f84 <_vector_end>:
	...

0000000040000fc0 <memcpy>:
    40000fc0:	f9800020 	prfm	pldl1keep, [x1]
    40000fc4:	8b020024 	add	x4, x1, x2
    40000fc8:	8b020005 	add	x5, x0, x2
    40000fcc:	f100405f 	cmp	x2, #0x10
    40000fd0:	54000209 	b.ls	40001010 <memcpy+0x50>  // b.plast
    40000fd4:	f101805f 	cmp	x2, #0x60
    40000fd8:	54000648 	b.hi	400010a0 <memcpy+0xe0>  // b.pmore
    40000fdc:	d1000449 	sub	x9, x2, #0x1
    40000fe0:	a9401c26 	ldp	x6, x7, [x1]
    40000fe4:	37300469 	tbnz	w9, #6, 40001070 <memcpy+0xb0>
    40000fe8:	a97f348c 	ldp	x12, x13, [x4, #-16]
    40000fec:	362800a9 	tbz	w9, #5, 40001000 <memcpy+0x40>
    40000ff0:	a9412428 	ldp	x8, x9, [x1, #16]
    40000ff4:	a97e2c8a 	ldp	x10, x11, [x4, #-32]
    40000ff8:	a9012408 	stp	x8, x9, [x0, #16]
    40000ffc:	a93e2caa 	stp	x10, x11, [x5, #-32]
    40001000:	a9001c06 	stp	x6, x7, [x0]
    40001004:	a93f34ac 	stp	x12, x13, [x5, #-16]
    40001008:	d65f03c0 	ret
    4000100c:	d503201f 	nop
    40001010:	f100205f 	cmp	x2, #0x8
    40001014:	540000e3 	b.cc	40001030 <memcpy+0x70>  // b.lo, b.ul, b.last
    40001018:	f9400026 	ldr	x6, [x1]
    4000101c:	f85f8087 	ldur	x7, [x4, #-8]
    40001020:	f9000006 	str	x6, [x0]
    40001024:	f81f80a7 	stur	x7, [x5, #-8]
    40001028:	d65f03c0 	ret
    4000102c:	d503201f 	nop
    40001030:	361000c2 	tbz	w2, #2, 40001048 <memcpy+0x88>
    40001034:	b9400026 	ldr	w6, [x1]
    40001038:	b85fc087 	ldur	w7, [x4, #-4]
    4000103c:	b9000006 	str	w6, [x0]
    40001040:	b81fc0a7 	stur	w7, [x5, #-4]
    40001044:	d65f03c0 	ret
    40001048:	b4000102 	cbz	x2, 40001068 <memcpy+0xa8>
    4000104c:	d341fc49 	lsr	x9, x2, #1
    40001050:	39400026 	ldrb	w6, [x1]
    40001054:	385ff087 	ldurb	w7, [x4, #-1]
    40001058:	38696828 	ldrb	w8, [x1, x9]
    4000105c:	39000006 	strb	w6, [x0]
    40001060:	38296808 	strb	w8, [x0, x9]
    40001064:	381ff0a7 	sturb	w7, [x5, #-1]
    40001068:	d65f03c0 	ret
    4000106c:	d503201f 	nop
    40001070:	a9412428 	ldp	x8, x9, [x1, #16]
    40001074:	a9422c2a 	ldp	x10, x11, [x1, #32]
    40001078:	a943342c 	ldp	x12, x13, [x1, #48]
    4000107c:	a97e0881 	ldp	x1, x2, [x4, #-32]
    40001080:	a97f0c84 	ldp	x4, x3, [x4, #-16]
    40001084:	a9001c06 	stp	x6, x7, [x0]
    40001088:	a9012408 	stp	x8, x9, [x0, #16]
    4000108c:	a9022c0a 	stp	x10, x11, [x0, #32]
    40001090:	a903340c 	stp	x12, x13, [x0, #48]
    40001094:	a93e08a1 	stp	x1, x2, [x5, #-32]
    40001098:	a93f0ca4 	stp	x4, x3, [x5, #-16]
    4000109c:	d65f03c0 	ret
    400010a0:	92400c09 	and	x9, x0, #0xf
    400010a4:	927cec03 	and	x3, x0, #0xfffffffffffffff0
    400010a8:	a940342c 	ldp	x12, x13, [x1]
    400010ac:	cb090021 	sub	x1, x1, x9
    400010b0:	8b090042 	add	x2, x2, x9
    400010b4:	a9411c26 	ldp	x6, x7, [x1, #16]
    400010b8:	a900340c 	stp	x12, x13, [x0]
    400010bc:	a9422428 	ldp	x8, x9, [x1, #32]
    400010c0:	a9432c2a 	ldp	x10, x11, [x1, #48]
    400010c4:	a9c4342c 	ldp	x12, x13, [x1, #64]!
    400010c8:	f1024042 	subs	x2, x2, #0x90
    400010cc:	54000169 	b.ls	400010f8 <memcpy+0x138>  // b.plast
    400010d0:	a9011c66 	stp	x6, x7, [x3, #16]
    400010d4:	a9411c26 	ldp	x6, x7, [x1, #16]
    400010d8:	a9022468 	stp	x8, x9, [x3, #32]
    400010dc:	a9422428 	ldp	x8, x9, [x1, #32]
    400010e0:	a9032c6a 	stp	x10, x11, [x3, #48]
    400010e4:	a9432c2a 	ldp	x10, x11, [x1, #48]
    400010e8:	a984346c 	stp	x12, x13, [x3, #64]!
    400010ec:	a9c4342c 	ldp	x12, x13, [x1, #64]!
    400010f0:	f1010042 	subs	x2, x2, #0x40
    400010f4:	54fffee8 	b.hi	400010d0 <memcpy+0x110>  // b.pmore
    400010f8:	a97c0881 	ldp	x1, x2, [x4, #-64]
    400010fc:	a9011c66 	stp	x6, x7, [x3, #16]
    40001100:	a97d1c86 	ldp	x6, x7, [x4, #-48]
    40001104:	a9022468 	stp	x8, x9, [x3, #32]
    40001108:	a97e2488 	ldp	x8, x9, [x4, #-32]
    4000110c:	a9032c6a 	stp	x10, x11, [x3, #48]
    40001110:	a97f2c8a 	ldp	x10, x11, [x4, #-16]
    40001114:	a904346c 	stp	x12, x13, [x3, #64]
    40001118:	a93c08a1 	stp	x1, x2, [x5, #-64]
    4000111c:	a93d1ca6 	stp	x6, x7, [x5, #-48]
    40001120:	a93e24a8 	stp	x8, x9, [x5, #-32]
    40001124:	a93f2caa 	stp	x10, x11, [x5, #-16]
    40001128:	d65f03c0 	ret
	...

0000000040001140 <memset>:
    40001140:	4e010c20 	dup	v0.16b, w1
    40001144:	8b020004 	add	x4, x0, x2
    40001148:	f101805f 	cmp	x2, #0x60
    4000114c:	540003c8 	b.hi	400011c4 <memset+0x84>  // b.pmore
    40001150:	f100405f 	cmp	x2, #0x10
    40001154:	54000202 	b.cs	40001194 <memset+0x54>  // b.hs, b.nlast
    40001158:	4e083c01 	mov	x1, v0.d[0]
    4000115c:	361800a2 	tbz	w2, #3, 40001170 <memset+0x30>
    40001160:	f9000001 	str	x1, [x0]
    40001164:	f81f8081 	stur	x1, [x4, #-8]
    40001168:	d65f03c0 	ret
    4000116c:	d503201f 	nop
    40001170:	36100082 	tbz	w2, #2, 40001180 <memset+0x40>
    40001174:	b9000001 	str	w1, [x0]
    40001178:	b81fc081 	stur	w1, [x4, #-4]
    4000117c:	d65f03c0 	ret
    40001180:	b4000082 	cbz	x2, 40001190 <memset+0x50>
    40001184:	39000001 	strb	w1, [x0]
    40001188:	36080042 	tbz	w2, #1, 40001190 <memset+0x50>
    4000118c:	781fe081 	sturh	w1, [x4, #-2]
    40001190:	d65f03c0 	ret
    40001194:	3d800000 	str	q0, [x0]
    40001198:	373000c2 	tbnz	w2, #6, 400011b0 <memset+0x70>
    4000119c:	3c9f0080 	stur	q0, [x4, #-16]
    400011a0:	36280062 	tbz	w2, #5, 400011ac <memset+0x6c>
    400011a4:	3d800400 	str	q0, [x0, #16]
    400011a8:	3c9e0080 	stur	q0, [x4, #-32]
    400011ac:	d65f03c0 	ret
    400011b0:	3d800400 	str	q0, [x0, #16]
    400011b4:	ad010000 	stp	q0, q0, [x0, #32]
    400011b8:	ad3f0080 	stp	q0, q0, [x4, #-32]
    400011bc:	d65f03c0 	ret
    400011c0:	d503201f 	nop
    400011c4:	12001c21 	and	w1, w1, #0xff
    400011c8:	927cec03 	and	x3, x0, #0xfffffffffffffff0
    400011cc:	3d800000 	str	q0, [x0]
    400011d0:	f104005f 	cmp	x2, #0x100
    400011d4:	7a402820 	ccmp	w1, #0x0, #0x0, cs  // cs = hs, nlast
    400011d8:	54000180 	b.eq	40001208 <memset+0xc8>  // b.none
    400011dc:	cb030082 	sub	x2, x4, x3
    400011e0:	d1004063 	sub	x3, x3, #0x10
    400011e4:	d1014042 	sub	x2, x2, #0x50
    400011e8:	ad010060 	stp	q0, q0, [x3, #32]
    400011ec:	ad820060 	stp	q0, q0, [x3, #64]!
    400011f0:	f1010042 	subs	x2, x2, #0x40
    400011f4:	54ffffa8 	b.hi	400011e8 <memset+0xa8>  // b.pmore
    400011f8:	ad3e0080 	stp	q0, q0, [x4, #-64]
    400011fc:	ad3f0080 	stp	q0, q0, [x4, #-32]
    40001200:	d65f03c0 	ret
    40001204:	d503201f 	nop
    40001208:	d53b00e5 	mrs	x5, dczid_el0
    4000120c:	3727fe85 	tbnz	w5, #4, 400011dc <memset+0x9c>
    40001210:	12000ca5 	and	w5, w5, #0xf
    40001214:	710010bf 	cmp	w5, #0x4
    40001218:	54000281 	b.ne	40001268 <memset+0x128>  // b.any
    4000121c:	3d800460 	str	q0, [x3, #16]
    40001220:	ad010060 	stp	q0, q0, [x3, #32]
    40001224:	927ae463 	and	x3, x3, #0xffffffffffffffc0
    40001228:	ad020060 	stp	q0, q0, [x3, #64]
    4000122c:	ad030060 	stp	q0, q0, [x3, #96]
    40001230:	cb030082 	sub	x2, x4, x3
    40001234:	d1040042 	sub	x2, x2, #0x100
    40001238:	91020063 	add	x3, x3, #0x80
    4000123c:	d503201f 	nop
    40001240:	d50b7423 	dc	zva, x3
    40001244:	91010063 	add	x3, x3, #0x40
    40001248:	f1010042 	subs	x2, x2, #0x40
    4000124c:	54ffffa8 	b.hi	40001240 <memset+0x100>  // b.pmore
    40001250:	ad000060 	stp	q0, q0, [x3]
    40001254:	ad010060 	stp	q0, q0, [x3, #32]
    40001258:	ad3e0080 	stp	q0, q0, [x4, #-64]
    4000125c:	ad3f0080 	stp	q0, q0, [x4, #-32]
    40001260:	d65f03c0 	ret
    40001264:	d503201f 	nop
    40001268:	710014bf 	cmp	w5, #0x5
    4000126c:	54000241 	b.ne	400012b4 <memset+0x174>  // b.any
    40001270:	3d800460 	str	q0, [x3, #16]
    40001274:	ad010060 	stp	q0, q0, [x3, #32]
    40001278:	ad020060 	stp	q0, q0, [x3, #64]
    4000127c:	ad030060 	stp	q0, q0, [x3, #96]
    40001280:	9279e063 	and	x3, x3, #0xffffffffffffff80
    40001284:	cb030082 	sub	x2, x4, x3
    40001288:	d1040042 	sub	x2, x2, #0x100
    4000128c:	91020063 	add	x3, x3, #0x80
    40001290:	d50b7423 	dc	zva, x3
    40001294:	91020063 	add	x3, x3, #0x80
    40001298:	f1020042 	subs	x2, x2, #0x80
    4000129c:	54ffffa8 	b.hi	40001290 <memset+0x150>  // b.pmore
    400012a0:	ad3c0080 	stp	q0, q0, [x4, #-128]
    400012a4:	ad3d0080 	stp	q0, q0, [x4, #-96]
    400012a8:	ad3e0080 	stp	q0, q0, [x4, #-64]
    400012ac:	ad3f0080 	stp	q0, q0, [x4, #-32]
    400012b0:	d65f03c0 	ret
    400012b4:	52800086 	mov	w6, #0x4                   	// #4
    400012b8:	1ac520c7 	lsl	w7, w6, w5
    400012bc:	910100e5 	add	x5, x7, #0x40
    400012c0:	eb05005f 	cmp	x2, x5
    400012c4:	54fff8c3 	b.cc	400011dc <memset+0x9c>  // b.lo, b.ul, b.last
    400012c8:	d10004e6 	sub	x6, x7, #0x1
    400012cc:	8b070065 	add	x5, x3, x7
    400012d0:	91004063 	add	x3, x3, #0x10
    400012d4:	eb0300a2 	subs	x2, x5, x3
    400012d8:	8a2600a5 	bic	x5, x5, x6
    400012dc:	540000a0 	b.eq	400012f0 <memset+0x1b0>  // b.none
    400012e0:	ac820060 	stp	q0, q0, [x3], #64
    400012e4:	ad3f0060 	stp	q0, q0, [x3, #-32]
    400012e8:	f1010042 	subs	x2, x2, #0x40
    400012ec:	54ffffa8 	b.hi	400012e0 <memset+0x1a0>  // b.pmore
    400012f0:	aa0503e3 	mov	x3, x5
    400012f4:	cb050082 	sub	x2, x4, x5
    400012f8:	eb070042 	subs	x2, x2, x7
    400012fc:	540000a3 	b.cc	40001310 <memset+0x1d0>  // b.lo, b.ul, b.last
    40001300:	d50b7423 	dc	zva, x3
    40001304:	8b070063 	add	x3, x3, x7
    40001308:	eb070042 	subs	x2, x2, x7
    4000130c:	54ffffa2 	b.cs	40001300 <memset+0x1c0>  // b.hs, b.nlast
    40001310:	8b070042 	add	x2, x2, x7
    40001314:	d1008063 	sub	x3, x3, #0x20
    40001318:	17ffffb6 	b	400011f0 <memset+0xb0>
	...

0000000040001340 <strlen>:
    40001340:	92402c04 	and	x4, x0, #0xfff
    40001344:	b200c3e8 	mov	x8, #0x101010101010101     	// #72340172838076673
    40001348:	f13fc09f 	cmp	x4, #0xff0
    4000134c:	5400082c 	b.gt	40001450 <strlen+0x110>
    40001350:	a9400c02 	ldp	x2, x3, [x0]
    40001354:	cb080044 	sub	x4, x2, x8
    40001358:	b200d845 	orr	x5, x2, #0x7f7f7f7f7f7f7f7f
    4000135c:	cb080066 	sub	x6, x3, x8
    40001360:	b200d867 	orr	x7, x3, #0x7f7f7f7f7f7f7f7f
    40001364:	ea250084 	bics	x4, x4, x5
    40001368:	8a2700c5 	bic	x5, x6, x7
    4000136c:	fa4008a0 	ccmp	x5, #0x0, #0x0, eq  // eq = none
    40001370:	54000100 	b.eq	40001390 <strlen+0x50>  // b.none
    40001374:	9a853084 	csel	x4, x4, x5, cc  // cc = lo, ul, last
    40001378:	d2800100 	mov	x0, #0x8                   	// #8
    4000137c:	dac00c84 	rev	x4, x4
    40001380:	dac01084 	clz	x4, x4
    40001384:	9a8033e0 	csel	x0, xzr, x0, cc  // cc = lo, ul, last
    40001388:	8b440c00 	add	x0, x0, x4, lsr #3
    4000138c:	d65f03c0 	ret
    40001390:	927cec01 	and	x1, x0, #0xfffffffffffffff0
    40001394:	d1004021 	sub	x1, x1, #0x10
    40001398:	a9c20c22 	ldp	x2, x3, [x1, #32]!
    4000139c:	cb080044 	sub	x4, x2, x8
    400013a0:	cb080066 	sub	x6, x3, x8
    400013a4:	aa060085 	orr	x5, x4, x6
    400013a8:	ea081cbf 	tst	x5, x8, lsl #7
    400013ac:	54000101 	b.ne	400013cc <strlen+0x8c>  // b.any
    400013b0:	a9410c22 	ldp	x2, x3, [x1, #16]
    400013b4:	cb080044 	sub	x4, x2, x8
    400013b8:	cb080066 	sub	x6, x3, x8
    400013bc:	aa060085 	orr	x5, x4, x6
    400013c0:	ea081cbf 	tst	x5, x8, lsl #7
    400013c4:	54fffea0 	b.eq	40001398 <strlen+0x58>  // b.none
    400013c8:	91004021 	add	x1, x1, #0x10
    400013cc:	b200d845 	orr	x5, x2, #0x7f7f7f7f7f7f7f7f
    400013d0:	b200d867 	orr	x7, x3, #0x7f7f7f7f7f7f7f7f
    400013d4:	ea250084 	bics	x4, x4, x5
    400013d8:	8a2700c5 	bic	x5, x6, x7
    400013dc:	fa4008a0 	ccmp	x5, #0x0, #0x0, eq  // eq = none
    400013e0:	54000120 	b.eq	40001404 <strlen+0xc4>  // b.none
    400013e4:	9a853084 	csel	x4, x4, x5, cc  // cc = lo, ul, last
    400013e8:	cb000020 	sub	x0, x1, x0
    400013ec:	dac00c84 	rev	x4, x4
    400013f0:	91002005 	add	x5, x0, #0x8
    400013f4:	dac01084 	clz	x4, x4
    400013f8:	9a853000 	csel	x0, x0, x5, cc  // cc = lo, ul, last
    400013fc:	8b440c00 	add	x0, x0, x4, lsr #3
    40001400:	d65f03c0 	ret
    40001404:	a9c10c22 	ldp	x2, x3, [x1, #16]!
    40001408:	cb080044 	sub	x4, x2, x8
    4000140c:	b200d845 	orr	x5, x2, #0x7f7f7f7f7f7f7f7f
    40001410:	cb080066 	sub	x6, x3, x8
    40001414:	b200d867 	orr	x7, x3, #0x7f7f7f7f7f7f7f7f
    40001418:	ea250084 	bics	x4, x4, x5
    4000141c:	8a2700c5 	bic	x5, x6, x7
    40001420:	fa4008a0 	ccmp	x5, #0x0, #0x0, eq  // eq = none
    40001424:	54fffe01 	b.ne	400013e4 <strlen+0xa4>  // b.any
    40001428:	a9c10c22 	ldp	x2, x3, [x1, #16]!
    4000142c:	cb080044 	sub	x4, x2, x8
    40001430:	b200d845 	orr	x5, x2, #0x7f7f7f7f7f7f7f7f
    40001434:	cb080066 	sub	x6, x3, x8
    40001438:	b200d867 	orr	x7, x3, #0x7f7f7f7f7f7f7f7f
    4000143c:	ea250084 	bics	x4, x4, x5
    40001440:	8a2700c5 	bic	x5, x6, x7
    40001444:	fa4008a0 	ccmp	x5, #0x0, #0x0, eq  // eq = none
    40001448:	54fffde0 	b.eq	40001404 <strlen+0xc4>  // b.none
    4000144c:	17ffffe6 	b	400013e4 <strlen+0xa4>
    40001450:	927cec01 	and	x1, x0, #0xfffffffffffffff0
    40001454:	a9400c22 	ldp	x2, x3, [x1]
    40001458:	d37df004 	lsl	x4, x0, #3
    4000145c:	92800007 	mov	x7, #0xffffffffffffffff    	// #-1
    40001460:	9ac420e4 	lsl	x4, x7, x4
    40001464:	b201c084 	orr	x4, x4, #0x8080808080808080
    40001468:	aa240042 	orn	x2, x2, x4
    4000146c:	aa240065 	orn	x5, x3, x4
    40001470:	f27d001f 	tst	x0, #0x8
    40001474:	9a870042 	csel	x2, x2, x7, eq  // eq = none
    40001478:	9a850063 	csel	x3, x3, x5, eq  // eq = none
    4000147c:	17ffffc8 	b	4000139c <strlen+0x5c>
    40001480:	d503201f 	nop
    40001484:	d503201f 	nop
    40001488:	d503201f 	nop
    4000148c:	d503201f 	nop
    40001490:	d503201f 	nop
    40001494:	d503201f 	nop
    40001498:	d503201f 	nop
    4000149c:	aa0103e0 	mov	x0, x1
    400014a0:	d65f03c0 	ret

00000000400014a4 <strnlen>:
    400014a4:	b4ffffc1 	cbz	x1, 4000149c <strlen+0x15c>
    400014a8:	b200c3ec 	mov	x12, #0x101010101010101     	// #72340172838076673
    400014ac:	927cec02 	and	x2, x0, #0xfffffffffffffff0
    400014b0:	f2400c08 	ands	x8, x0, #0xf
    400014b4:	54000361 	b.ne	40001520 <strnlen+0x7c>  // b.any
    400014b8:	d100042e 	sub	x14, x1, #0x1
    400014bc:	d344fdce 	lsr	x14, x14, #4
    400014c0:	a8c11043 	ldp	x3, x4, [x2], #16
    400014c4:	cb0c0068 	sub	x8, x3, x12
    400014c8:	b200d869 	orr	x9, x3, #0x7f7f7f7f7f7f7f7f
    400014cc:	cb0c008a 	sub	x10, x4, x12
    400014d0:	b200d88b 	orr	x11, x4, #0x7f7f7f7f7f7f7f7f
    400014d4:	8a290106 	bic	x6, x8, x9
    400014d8:	8a2b0147 	bic	x7, x10, x11
    400014dc:	f10005ce 	subs	x14, x14, #0x1
    400014e0:	aa0700c8 	orr	x8, x6, x7
    400014e4:	fa405900 	ccmp	x8, #0x0, #0x0, pl  // pl = nfrst
    400014e8:	54fffec0 	b.eq	400014c0 <strnlen+0x1c>  // b.none
    400014ec:	aa0700c8 	orr	x8, x6, x7
    400014f0:	b4fffd68 	cbz	x8, 4000149c <strlen+0x15c>
    400014f4:	cb000040 	sub	x0, x2, x0
    400014f8:	b4000066 	cbz	x6, 40001504 <strnlen+0x60>
    400014fc:	d1002000 	sub	x0, x0, #0x8
    40001500:	aa0603e7 	mov	x7, x6
    40001504:	d1002000 	sub	x0, x0, #0x8
    40001508:	dac00ce7 	rev	x7, x7
    4000150c:	dac010ed 	clz	x13, x7
    40001510:	8b4d0c00 	add	x0, x0, x13, lsr #3
    40001514:	eb01001f 	cmp	x0, x1
    40001518:	9a819000 	csel	x0, x0, x1, ls  // ls = plast
    4000151c:	d65f03c0 	ret
    40001520:	d100042e 	sub	x14, x1, #0x1
    40001524:	cb0803eb 	neg	x11, x8
    40001528:	f100211f 	cmp	x8, #0x8
    4000152c:	92400dca 	and	x10, x14, #0xf
    40001530:	d344fdce 	lsr	x14, x14, #4
    40001534:	92800009 	mov	x9, #0xffffffffffffffff    	// #-1
    40001538:	a8c11043 	ldp	x3, x4, [x2], #16
    4000153c:	d37df16b 	lsl	x11, x11, #3
    40001540:	8b08014a 	add	x10, x10, x8
    40001544:	9acb2529 	lsr	x9, x9, x11
    40001548:	8b4a11ce 	add	x14, x14, x10, lsr #4
    4000154c:	aa090063 	orr	x3, x3, x9
    40001550:	aa090085 	orr	x5, x4, x9
    40001554:	da9fd063 	csinv	x3, x3, xzr, le
    40001558:	9a85d084 	csel	x4, x4, x5, le
    4000155c:	17ffffda 	b	400014c4 <strnlen+0x20>
	...

0000000040001580 <memmove>:
    40001580:	cb010005 	sub	x5, x0, x1
    40001584:	f101805f 	cmp	x2, #0x60
    40001588:	fa4280a2 	ccmp	x5, x2, #0x2, hi  // hi = pmore
    4000158c:	54ffd1a2 	b.cs	40000fc0 <memcpy>  // b.hs, b.nlast
    40001590:	b40004c5 	cbz	x5, 40001628 <memmove+0xa8>
    40001594:	8b020004 	add	x4, x0, x2
    40001598:	8b020023 	add	x3, x1, x2
    4000159c:	92400c85 	and	x5, x4, #0xf
    400015a0:	a97f346c 	ldp	x12, x13, [x3, #-16]
    400015a4:	cb050063 	sub	x3, x3, x5
    400015a8:	cb050042 	sub	x2, x2, x5
    400015ac:	a97f1c66 	ldp	x6, x7, [x3, #-16]
    400015b0:	a93f348c 	stp	x12, x13, [x4, #-16]
    400015b4:	a97e2468 	ldp	x8, x9, [x3, #-32]
    400015b8:	a97d2c6a 	ldp	x10, x11, [x3, #-48]
    400015bc:	a9fc346c 	ldp	x12, x13, [x3, #-64]!
    400015c0:	cb050084 	sub	x4, x4, x5
    400015c4:	f1020042 	subs	x2, x2, #0x80
    400015c8:	54000189 	b.ls	400015f8 <memmove+0x78>  // b.plast
    400015cc:	d503201f 	nop
    400015d0:	a93f1c86 	stp	x6, x7, [x4, #-16]
    400015d4:	a97f1c66 	ldp	x6, x7, [x3, #-16]
    400015d8:	a93e2488 	stp	x8, x9, [x4, #-32]
    400015dc:	a97e2468 	ldp	x8, x9, [x3, #-32]
    400015e0:	a93d2c8a 	stp	x10, x11, [x4, #-48]
    400015e4:	a97d2c6a 	ldp	x10, x11, [x3, #-48]
    400015e8:	a9bc348c 	stp	x12, x13, [x4, #-64]!
    400015ec:	a9fc346c 	ldp	x12, x13, [x3, #-64]!
    400015f0:	f1010042 	subs	x2, x2, #0x40
    400015f4:	54fffee8 	b.hi	400015d0 <memmove+0x50>  // b.pmore
    400015f8:	a9431422 	ldp	x2, x5, [x1, #48]
    400015fc:	a93f1c86 	stp	x6, x7, [x4, #-16]
    40001600:	a9421c26 	ldp	x6, x7, [x1, #32]
    40001604:	a93e2488 	stp	x8, x9, [x4, #-32]
    40001608:	a9412428 	ldp	x8, x9, [x1, #16]
    4000160c:	a93d2c8a 	stp	x10, x11, [x4, #-48]
    40001610:	a9402c2a 	ldp	x10, x11, [x1]
    40001614:	a93c348c 	stp	x12, x13, [x4, #-64]
    40001618:	a9031402 	stp	x2, x5, [x0, #48]
    4000161c:	a9021c06 	stp	x6, x7, [x0, #32]
    40001620:	a9012408 	stp	x8, x9, [x0, #16]
    40001624:	a9002c0a 	stp	x10, x11, [x0]
    40001628:	d65f03c0 	ret
	...
    40001640:	d503201f 	nop
    40001644:	d503201f 	nop
    40001648:	d503201f 	nop
    4000164c:	d503201f 	nop
    40001650:	d503201f 	nop
    40001654:	d503201f 	nop
    40001658:	d503201f 	nop

000000004000165c <strncmp>:
    4000165c:	b4000d82 	cbz	x2, 4000180c <strncmp+0x1b0>
    40001660:	ca010008 	eor	x8, x0, x1
    40001664:	b200c3eb 	mov	x11, #0x101010101010101     	// #72340172838076673
    40001668:	f240091f 	tst	x8, #0x7
    4000166c:	9240080e 	and	x14, x0, #0x7
    40001670:	54000681 	b.ne	40001740 <strncmp+0xe4>  // b.any
    40001674:	b500040e 	cbnz	x14, 400016f4 <strncmp+0x98>
    40001678:	d100044d 	sub	x13, x2, #0x1
    4000167c:	d343fdad 	lsr	x13, x13, #3
    40001680:	f8408403 	ldr	x3, [x0], #8
    40001684:	f8408424 	ldr	x4, [x1], #8
    40001688:	f10005ad 	subs	x13, x13, #0x1
    4000168c:	cb0b0068 	sub	x8, x3, x11
    40001690:	b200d869 	orr	x9, x3, #0x7f7f7f7f7f7f7f7f
    40001694:	ca040066 	eor	x6, x3, x4
    40001698:	da9f50cf 	csinv	x15, x6, xzr, pl  // pl = nfrst
    4000169c:	ea290105 	bics	x5, x8, x9
    400016a0:	fa4009e0 	ccmp	x15, #0x0, #0x0, eq  // eq = none
    400016a4:	54fffee0 	b.eq	40001680 <strncmp+0x24>  // b.none
    400016a8:	b6f8012d 	tbz	x13, #63, 400016cc <strncmp+0x70>
    400016ac:	f2400842 	ands	x2, x2, #0x7
    400016b0:	540000e0 	b.eq	400016cc <strncmp+0x70>  // b.none
    400016b4:	d37df042 	lsl	x2, x2, #3
    400016b8:	9280000e 	mov	x14, #0xffffffffffffffff    	// #-1
    400016bc:	9ac221ce 	lsl	x14, x14, x2
    400016c0:	8a2e0063 	bic	x3, x3, x14
    400016c4:	8a2e0084 	bic	x4, x4, x14
    400016c8:	aa0e00a5 	orr	x5, x5, x14
    400016cc:	aa0500c7 	orr	x7, x6, x5
    400016d0:	dac00ce7 	rev	x7, x7
    400016d4:	dac00c63 	rev	x3, x3
    400016d8:	dac010ec 	clz	x12, x7
    400016dc:	dac00c84 	rev	x4, x4
    400016e0:	9acc2063 	lsl	x3, x3, x12
    400016e4:	9acc2084 	lsl	x4, x4, x12
    400016e8:	d378fc63 	lsr	x3, x3, #56
    400016ec:	cb44e060 	sub	x0, x3, x4, lsr #56
    400016f0:	d65f03c0 	ret
    400016f4:	927df000 	and	x0, x0, #0xfffffffffffffff8
    400016f8:	927df021 	and	x1, x1, #0xfffffffffffffff8
    400016fc:	f8408403 	ldr	x3, [x0], #8
    40001700:	cb0e0fea 	neg	x10, x14, lsl #3
    40001704:	f8408424 	ldr	x4, [x1], #8
    40001708:	92800009 	mov	x9, #0xffffffffffffffff    	// #-1
    4000170c:	d100044d 	sub	x13, x2, #0x1
    40001710:	9aca2529 	lsr	x9, x9, x10
    40001714:	924009aa 	and	x10, x13, #0x7
    40001718:	d343fdad 	lsr	x13, x13, #3
    4000171c:	8b0e0042 	add	x2, x2, x14
    40001720:	8b0e014a 	add	x10, x10, x14
    40001724:	aa090063 	orr	x3, x3, x9
    40001728:	aa090084 	orr	x4, x4, x9
    4000172c:	8b4a0dad 	add	x13, x13, x10, lsr #3
    40001730:	17ffffd6 	b	40001688 <strncmp+0x2c>
    40001734:	d503201f 	nop
    40001738:	d503201f 	nop
    4000173c:	d503201f 	nop
    40001740:	f100405f 	cmp	x2, #0x10
    40001744:	54000122 	b.cs	40001768 <strncmp+0x10c>  // b.hs, b.nlast
    40001748:	38401403 	ldrb	w3, [x0], #1
    4000174c:	38401424 	ldrb	w4, [x1], #1
    40001750:	f1000442 	subs	x2, x2, #0x1
    40001754:	7a418860 	ccmp	w3, #0x1, #0x0, hi  // hi = pmore
    40001758:	7a442060 	ccmp	w3, w4, #0x0, cs  // cs = hs, nlast
    4000175c:	54ffff60 	b.eq	40001748 <strncmp+0xec>  // b.none
    40001760:	cb040060 	sub	x0, x3, x4
    40001764:	d65f03c0 	ret
    40001768:	d343fc4d 	lsr	x13, x2, #3
    4000176c:	b400018e 	cbz	x14, 4000179c <strncmp+0x140>
    40001770:	cb0e03ee 	neg	x14, x14
    40001774:	924009ce 	and	x14, x14, #0x7
    40001778:	cb0e0042 	sub	x2, x2, x14
    4000177c:	d343fc4d 	lsr	x13, x2, #3
    40001780:	38401403 	ldrb	w3, [x0], #1
    40001784:	38401424 	ldrb	w4, [x1], #1
    40001788:	7100047f 	cmp	w3, #0x1
    4000178c:	7a442060 	ccmp	w3, w4, #0x0, cs  // cs = hs, nlast
    40001790:	54fffe81 	b.ne	40001760 <strncmp+0x104>  // b.any
    40001794:	f10005ce 	subs	x14, x14, #0x1
    40001798:	54ffff48 	b.hi	40001780 <strncmp+0x124>  // b.pmore
    4000179c:	d280010e 	mov	x14, #0x8                   	// #8
    400017a0:	f10005ad 	subs	x13, x13, #0x1
    400017a4:	540001c3 	b.cc	400017dc <strncmp+0x180>  // b.lo, b.ul, b.last
    400017a8:	927d2029 	and	x9, x1, #0xff8
    400017ac:	d27d2129 	eor	x9, x9, #0xff8
    400017b0:	b4fffe89 	cbz	x9, 40001780 <strncmp+0x124>
    400017b4:	f8408403 	ldr	x3, [x0], #8
    400017b8:	f8408424 	ldr	x4, [x1], #8
    400017bc:	cb0b0068 	sub	x8, x3, x11
    400017c0:	b200d869 	orr	x9, x3, #0x7f7f7f7f7f7f7f7f
    400017c4:	ca040066 	eor	x6, x3, x4
    400017c8:	ea290105 	bics	x5, x8, x9
    400017cc:	fa4008c0 	ccmp	x6, #0x0, #0x0, eq  // eq = none
    400017d0:	54fff7e1 	b.ne	400016cc <strncmp+0x70>  // b.any
    400017d4:	f10005ad 	subs	x13, x13, #0x1
    400017d8:	54fffe85 	b.pl	400017a8 <strncmp+0x14c>  // b.nfrst
    400017dc:	92400842 	and	x2, x2, #0x7
    400017e0:	b4fff762 	cbz	x2, 400016cc <strncmp+0x70>
    400017e4:	d1002000 	sub	x0, x0, #0x8
    400017e8:	d1002021 	sub	x1, x1, #0x8
    400017ec:	f8626803 	ldr	x3, [x0, x2]
    400017f0:	f8626824 	ldr	x4, [x1, x2]
    400017f4:	cb0b0068 	sub	x8, x3, x11
    400017f8:	b200d869 	orr	x9, x3, #0x7f7f7f7f7f7f7f7f
    400017fc:	ca040066 	eor	x6, x3, x4
    40001800:	ea290105 	bics	x5, x8, x9
    40001804:	fa4008c0 	ccmp	x6, #0x0, #0x0, eq  // eq = none
    40001808:	54fff621 	b.ne	400016cc <strncmp+0x70>  // b.any
    4000180c:	d2800000 	mov	x0, #0x0                   	// #0
    40001810:	d65f03c0 	ret

0000000040001814 <memchr>:
    40001814:	b4000682 	cbz	x2, 400018e4 <memchr+0xd0>
    40001818:	52808025 	mov	w5, #0x401                 	// #1025
    4000181c:	72a80205 	movk	w5, #0x4010, lsl #16
    40001820:	4e010c20 	dup	v0.16b, w1
    40001824:	927be803 	and	x3, x0, #0xffffffffffffffe0
    40001828:	4e040ca5 	dup	v5.4s, w5
    4000182c:	f2401009 	ands	x9, x0, #0x1f
    40001830:	9240104a 	and	x10, x2, #0x1f
    40001834:	54000200 	b.eq	40001874 <memchr+0x60>  // b.none
    40001838:	4cdfa061 	ld1	{v1.16b, v2.16b}, [x3], #32
    4000183c:	d1008124 	sub	x4, x9, #0x20
    40001840:	ab040042 	adds	x2, x2, x4
    40001844:	6e208c23 	cmeq	v3.16b, v1.16b, v0.16b
    40001848:	6e208c44 	cmeq	v4.16b, v2.16b, v0.16b
    4000184c:	4e251c63 	and	v3.16b, v3.16b, v5.16b
    40001850:	4e251c84 	and	v4.16b, v4.16b, v5.16b
    40001854:	4e24bc66 	addp	v6.16b, v3.16b, v4.16b
    40001858:	4e26bcc6 	addp	v6.16b, v6.16b, v6.16b
    4000185c:	4e083cc6 	mov	x6, v6.d[0]
    40001860:	d37ff924 	lsl	x4, x9, #1
    40001864:	9ac424c6 	lsr	x6, x6, x4
    40001868:	9ac420c6 	lsl	x6, x6, x4
    4000186c:	54000229 	b.ls	400018b0 <memchr+0x9c>  // b.plast
    40001870:	b50002c6 	cbnz	x6, 400018c8 <memchr+0xb4>
    40001874:	4cdfa061 	ld1	{v1.16b, v2.16b}, [x3], #32
    40001878:	f1008042 	subs	x2, x2, #0x20
    4000187c:	6e208c23 	cmeq	v3.16b, v1.16b, v0.16b
    40001880:	6e208c44 	cmeq	v4.16b, v2.16b, v0.16b
    40001884:	540000a9 	b.ls	40001898 <memchr+0x84>  // b.plast
    40001888:	4ea41c66 	orr	v6.16b, v3.16b, v4.16b
    4000188c:	4ee6bcc6 	addp	v6.2d, v6.2d, v6.2d
    40001890:	4e083cc6 	mov	x6, v6.d[0]
    40001894:	b4ffff06 	cbz	x6, 40001874 <memchr+0x60>
    40001898:	4e251c63 	and	v3.16b, v3.16b, v5.16b
    4000189c:	4e251c84 	and	v4.16b, v4.16b, v5.16b
    400018a0:	4e24bc66 	addp	v6.16b, v3.16b, v4.16b
    400018a4:	4e26bcc6 	addp	v6.16b, v6.16b, v6.16b
    400018a8:	4e083cc6 	mov	x6, v6.d[0]
    400018ac:	540000e8 	b.hi	400018c8 <memchr+0xb4>  // b.pmore
    400018b0:	8b090144 	add	x4, x10, x9
    400018b4:	92401084 	and	x4, x4, #0x1f
    400018b8:	d1008084 	sub	x4, x4, #0x20
    400018bc:	cb0407e4 	neg	x4, x4, lsl #1
    400018c0:	9ac420c6 	lsl	x6, x6, x4
    400018c4:	9ac424c6 	lsr	x6, x6, x4
    400018c8:	dac000c6 	rbit	x6, x6
    400018cc:	d1008063 	sub	x3, x3, #0x20
    400018d0:	f10000df 	cmp	x6, #0x0
    400018d4:	dac010c6 	clz	x6, x6
    400018d8:	8b460460 	add	x0, x3, x6, lsr #1
    400018dc:	9a8003e0 	csel	x0, xzr, x0, eq  // eq = none
    400018e0:	d65f03c0 	ret
    400018e4:	d2800000 	mov	x0, #0x0                   	// #0
    400018e8:	d65f03c0 	ret

00000000400018ec <__extenddftf2>:
    400018ec:	d53b4400 	mrs	x0, fpcr
    400018f0:	9e660000 	fmov	x0, d0
    400018f4:	d374f803 	ubfx	x3, x0, #52, #11
    400018f8:	d340cc01 	ubfx	x1, x0, #0, #52
    400018fc:	d37ffc00 	lsr	x0, x0, #63
    40001900:	12001c02 	and	w2, w0, #0xff
    40001904:	91000460 	add	x0, x3, #0x1
    40001908:	f27f241f 	tst	x0, #0x7fe
    4000190c:	540000e0 	b.eq	40001928 <__extenddftf2+0x3c>  // b.none
    40001910:	d2878000 	mov	x0, #0x3c00                	// #15360
    40001914:	8b000063 	add	x3, x3, x0
    40001918:	d344fc20 	lsr	x0, x1, #4
    4000191c:	d3440c21 	lsl	x1, x1, #60
    40001920:	52800004 	mov	w4, #0x0                   	// #0
    40001924:	1400001b 	b	40001990 <__extenddftf2+0xa4>
    40001928:	b5000243 	cbnz	x3, 40001970 <__extenddftf2+0x84>
    4000192c:	b4000501 	cbz	x1, 400019cc <__extenddftf2+0xe0>
    40001930:	dac01024 	clz	x4, x1
    40001934:	7100389f 	cmp	w4, #0xe
    40001938:	5400014c 	b.gt	40001960 <__extenddftf2+0x74>
    4000193c:	1100c483 	add	w3, w4, #0x31
    40001940:	528001e0 	mov	w0, #0xf                   	// #15
    40001944:	4b040000 	sub	w0, w0, w4
    40001948:	9ac02420 	lsr	x0, x1, x0
    4000194c:	9ac32021 	lsl	x1, x1, x3
    40001950:	52878183 	mov	w3, #0x3c0c                	// #15372
    40001954:	4b040063 	sub	w3, w3, w4
    40001958:	93407c63 	sxtw	x3, w3
    4000195c:	17fffff1 	b	40001920 <__extenddftf2+0x34>
    40001960:	51003c80 	sub	w0, w4, #0xf
    40001964:	9ac02020 	lsl	x0, x1, x0
    40001968:	d2800001 	mov	x1, #0x0                   	// #0
    4000196c:	17fffff9 	b	40001950 <__extenddftf2+0x64>
    40001970:	b4000321 	cbz	x1, 400019d4 <__extenddftf2+0xe8>
    40001974:	d373fc24 	lsr	x4, x1, #51
    40001978:	d344fc20 	lsr	x0, x1, #4
    4000197c:	d2400084 	eor	x4, x4, #0x1
    40001980:	b2510000 	orr	x0, x0, #0x800000000000
    40001984:	12000084 	and	w4, w4, #0x1
    40001988:	d3440c21 	lsl	x1, x1, #60
    4000198c:	d28fffe3 	mov	x3, #0x7fff                	// #32767
    40001990:	d2800007 	mov	x7, #0x0                   	// #0
    40001994:	9e670020 	fmov	d0, x1
    40001998:	b340bc07 	bfxil	x7, x0, #0, #48
    4000199c:	2a023c60 	orr	w0, w3, w2, lsl #15
    400019a0:	b3503c07 	bfi	x7, x0, #48, #16
    400019a4:	9eaf00e0 	fmov	v0.d[1], x7
    400019a8:	340001c4 	cbz	w4, 400019e0 <__extenddftf2+0xf4>
    400019ac:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    400019b0:	52800020 	mov	w0, #0x1                   	// #1
    400019b4:	910003fd 	mov	x29, sp
    400019b8:	3d8007e0 	str	q0, [sp, #16]
    400019bc:	940000b4 	bl	40001c8c <__sfp_handle_exceptions>
    400019c0:	3dc007e0 	ldr	q0, [sp, #16]
    400019c4:	a8c27bfd 	ldp	x29, x30, [sp], #32
    400019c8:	d65f03c0 	ret
    400019cc:	d2800000 	mov	x0, #0x0                   	// #0
    400019d0:	17ffffd4 	b	40001920 <__extenddftf2+0x34>
    400019d4:	d2800000 	mov	x0, #0x0                   	// #0
    400019d8:	d28fffe3 	mov	x3, #0x7fff                	// #32767
    400019dc:	17ffffd1 	b	40001920 <__extenddftf2+0x34>
    400019e0:	d65f03c0 	ret

00000000400019e4 <__trunctfdf2>:
    400019e4:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    400019e8:	910003fd 	mov	x29, sp
    400019ec:	f9000bf3 	str	x19, [sp, #16]
    400019f0:	3d800be0 	str	q0, [sp, #32]
    400019f4:	a9420fe0 	ldp	x0, x3, [sp, #32]
    400019f8:	d53b4406 	mrs	x6, fpcr
    400019fc:	d370f862 	ubfx	x2, x3, #48, #15
    40001a00:	d37ffc65 	lsr	x5, x3, #63
    40001a04:	91000441 	add	x1, x2, #0x1
    40001a08:	d37dbc63 	ubfiz	x3, x3, #3, #48
    40001a0c:	aa40f463 	orr	x3, x3, x0, lsr #61
    40001a10:	d37df004 	lsl	x4, x0, #3
    40001a14:	f27f343f 	tst	x1, #0x7ffe
    40001a18:	540007c0 	b.eq	40001b10 <__trunctfdf2+0x12c>  // b.none
    40001a1c:	92877fe1 	mov	x1, #0xffffffffffffc400    	// #-15360
    40001a20:	8b010042 	add	x2, x2, x1
    40001a24:	f11ff85f 	cmp	x2, #0x7fe
    40001a28:	5400028d 	b.le	40001a78 <__trunctfdf2+0x94>
    40001a2c:	f26a04c1 	ands	x1, x6, #0xc00000
    40001a30:	54000b60 	b.eq	40001b9c <__trunctfdf2+0x1b8>  // b.none
    40001a34:	f150003f 	cmp	x1, #0x400, lsl #12
    40001a38:	54000101 	b.ne	40001a58 <__trunctfdf2+0x74>  // b.any
    40001a3c:	f10000bf 	cmp	x5, #0x0
    40001a40:	d280ffe2 	mov	x2, #0x7ff                 	// #2047
    40001a44:	d280ffc0 	mov	x0, #0x7fe                 	// #2046
    40001a48:	da9f03e1 	csetm	x1, ne  // ne = any
    40001a4c:	9a800042 	csel	x2, x2, x0, eq  // eq = none
    40001a50:	52800280 	mov	w0, #0x14                  	// #20
    40001a54:	1400003e 	b	40001b4c <__trunctfdf2+0x168>
    40001a58:	f160003f 	cmp	x1, #0x800, lsl #12
    40001a5c:	54000a41 	b.ne	40001ba4 <__trunctfdf2+0x1c0>  // b.any
    40001a60:	f10000bf 	cmp	x5, #0x0
    40001a64:	d280ffe2 	mov	x2, #0x7ff                 	// #2047
    40001a68:	d280ffc0 	mov	x0, #0x7fe                 	// #2046
    40001a6c:	da9f13e1 	csetm	x1, eq  // eq = none
    40001a70:	9a801042 	csel	x2, x2, x0, ne  // ne = any
    40001a74:	17fffff7 	b	40001a50 <__trunctfdf2+0x6c>
    40001a78:	f100005f 	cmp	x2, #0x0
    40001a7c:	540003ec 	b.gt	40001af8 <__trunctfdf2+0x114>
    40001a80:	b100d05f 	cmn	x2, #0x34
    40001a84:	5400096b 	b.lt	40001bb0 <__trunctfdf2+0x1cc>  // b.tstop
    40001a88:	d28007a0 	mov	x0, #0x3d                  	// #61
    40001a8c:	cb020008 	sub	x8, x0, x2
    40001a90:	b24d0063 	orr	x3, x3, #0x8000000000000
    40001a94:	f100fd1f 	cmp	x8, #0x3f
    40001a98:	5400018c 	b.gt	40001ac8 <__trunctfdf2+0xe4>
    40001a9c:	11000c47 	add	w7, w2, #0x3
    40001aa0:	4b020001 	sub	w1, w0, w2
    40001aa4:	9ac12481 	lsr	x1, x4, x1
    40001aa8:	9ac72084 	lsl	x4, x4, x7
    40001aac:	f100009f 	cmp	x4, #0x0
    40001ab0:	9a9f07e0 	cset	x0, ne  // ne = any
    40001ab4:	9ac72063 	lsl	x3, x3, x7
    40001ab8:	aa000021 	orr	x1, x1, x0
    40001abc:	aa010061 	orr	x1, x3, x1
    40001ac0:	d2800002 	mov	x2, #0x0                   	// #0
    40001ac4:	14000011 	b	40001b08 <__trunctfdf2+0x124>
    40001ac8:	11010c40 	add	w0, w2, #0x43
    40001acc:	12800041 	mov	w1, #0xfffffffd            	// #-3
    40001ad0:	4b020021 	sub	w1, w1, w2
    40001ad4:	f101011f 	cmp	x8, #0x40
    40001ad8:	9ac12461 	lsr	x1, x3, x1
    40001adc:	9ac02063 	lsl	x3, x3, x0
    40001ae0:	9a9f1063 	csel	x3, x3, xzr, ne  // ne = any
    40001ae4:	aa040063 	orr	x3, x3, x4
    40001ae8:	f100007f 	cmp	x3, #0x0
    40001aec:	9a9f07e0 	cset	x0, ne  // ne = any
    40001af0:	aa000021 	orr	x1, x1, x0
    40001af4:	17fffff3 	b	40001ac0 <__trunctfdf2+0xdc>
    40001af8:	eb001fff 	cmp	xzr, x0, lsl #7
    40001afc:	9a9f07e1 	cset	x1, ne  // ne = any
    40001b00:	aa44f021 	orr	x1, x1, x4, lsr #60
    40001b04:	aa031021 	orr	x1, x1, x3, lsl #4
    40001b08:	52800000 	mov	w0, #0x0                   	// #0
    40001b0c:	14000010 	b	40001b4c <__trunctfdf2+0x168>
    40001b10:	aa040061 	orr	x1, x3, x4
    40001b14:	b5000082 	cbnz	x2, 40001b24 <__trunctfdf2+0x140>
    40001b18:	f100003f 	cmp	x1, #0x0
    40001b1c:	9a9f07e1 	cset	x1, ne  // ne = any
    40001b20:	17fffffa 	b	40001b08 <__trunctfdf2+0x124>
    40001b24:	b40004a1 	cbz	x1, 40001bb8 <__trunctfdf2+0x1d4>
    40001b28:	d28fffe1 	mov	x1, #0x7fff                	// #32767
    40001b2c:	d372fc60 	lsr	x0, x3, #50
    40001b30:	eb01005f 	cmp	x2, x1
    40001b34:	93c4f061 	extr	x1, x3, x4, #60
    40001b38:	52000000 	eor	w0, w0, #0x1
    40001b3c:	927df021 	and	x1, x1, #0xfffffffffffffff8
    40001b40:	1a9f0000 	csel	w0, w0, wzr, eq  // eq = none
    40001b44:	b24a0021 	orr	x1, x1, #0x40000000000000
    40001b48:	d280ffe2 	mov	x2, #0x7ff                 	// #2047
    40001b4c:	f100005f 	cmp	x2, #0x0
    40001b50:	1a9f17e3 	cset	w3, eq  // eq = none
    40001b54:	f100003f 	cmp	x1, #0x0
    40001b58:	1a9f07e4 	cset	w4, ne  // ne = any
    40001b5c:	0a040063 	and	w3, w3, w4
    40001b60:	f240083f 	tst	x1, #0x7
    40001b64:	54000380 	b.eq	40001bd4 <__trunctfdf2+0x1f0>  // b.none
    40001b68:	926a04c4 	and	x4, x6, #0xc00000
    40001b6c:	321c0000 	orr	w0, w0, #0x10
    40001b70:	f150009f 	cmp	x4, #0x400, lsl #12
    40001b74:	54000260 	b.eq	40001bc0 <__trunctfdf2+0x1dc>  // b.none
    40001b78:	f160009f 	cmp	x4, #0x800, lsl #12
    40001b7c:	54000280 	b.eq	40001bcc <__trunctfdf2+0x1e8>  // b.none
    40001b80:	b50000a4 	cbnz	x4, 40001b94 <__trunctfdf2+0x1b0>
    40001b84:	92400c24 	and	x4, x1, #0xf
    40001b88:	f100109f 	cmp	x4, #0x4
    40001b8c:	54000040 	b.eq	40001b94 <__trunctfdf2+0x1b0>  // b.none
    40001b90:	91001021 	add	x1, x1, #0x4
    40001b94:	34000283 	cbz	w3, 40001be4 <__trunctfdf2+0x200>
    40001b98:	14000012 	b	40001be0 <__trunctfdf2+0x1fc>
    40001b9c:	d280ffe2 	mov	x2, #0x7ff                 	// #2047
    40001ba0:	17ffffac 	b	40001a50 <__trunctfdf2+0x6c>
    40001ba4:	92800001 	mov	x1, #0xffffffffffffffff    	// #-1
    40001ba8:	d280ffc2 	mov	x2, #0x7fe                 	// #2046
    40001bac:	17ffffa9 	b	40001a50 <__trunctfdf2+0x6c>
    40001bb0:	d2800021 	mov	x1, #0x1                   	// #1
    40001bb4:	17ffffc3 	b	40001ac0 <__trunctfdf2+0xdc>
    40001bb8:	d280ffe2 	mov	x2, #0x7ff                 	// #2047
    40001bbc:	17ffffd3 	b	40001b08 <__trunctfdf2+0x124>
    40001bc0:	b5fffea5 	cbnz	x5, 40001b94 <__trunctfdf2+0x1b0>
    40001bc4:	91002021 	add	x1, x1, #0x8
    40001bc8:	17fffff3 	b	40001b94 <__trunctfdf2+0x1b0>
    40001bcc:	b4fffe45 	cbz	x5, 40001b94 <__trunctfdf2+0x1b0>
    40001bd0:	17fffffd 	b	40001bc4 <__trunctfdf2+0x1e0>
    40001bd4:	34000083 	cbz	w3, 40001be4 <__trunctfdf2+0x200>
    40001bd8:	37200040 	tbnz	w0, #4, 40001be0 <__trunctfdf2+0x1fc>
    40001bdc:	36580046 	tbz	w6, #11, 40001be4 <__trunctfdf2+0x200>
    40001be0:	321d0000 	orr	w0, w0, #0x8
    40001be4:	b6b800a1 	tbz	x1, #55, 40001bf8 <__trunctfdf2+0x214>
    40001be8:	91000442 	add	x2, x2, #0x1
    40001bec:	f11ffc5f 	cmp	x2, #0x7ff
    40001bf0:	54000240 	b.eq	40001c38 <__trunctfdf2+0x254>  // b.none
    40001bf4:	9248f821 	and	x1, x1, #0xff7fffffffffffff
    40001bf8:	d343fc21 	lsr	x1, x1, #3
    40001bfc:	f11ffc5f 	cmp	x2, #0x7ff
    40001c00:	fa400824 	ccmp	x1, #0x0, #0x4, eq  // eq = none
    40001c04:	aa0103e3 	mov	x3, x1
    40001c08:	b24d0021 	orr	x1, x1, #0x8000000000000
    40001c0c:	d34c2842 	ubfiz	x2, x2, #52, #11
    40001c10:	9a831021 	csel	x1, x1, x3, ne  // ne = any
    40001c14:	9240cc21 	and	x1, x1, #0xfffffffffffff
    40001c18:	aa010041 	orr	x1, x2, x1
    40001c1c:	aa05fc33 	orr	x19, x1, x5, lsl #63
    40001c20:	34000040 	cbz	w0, 40001c28 <__trunctfdf2+0x244>
    40001c24:	9400001a 	bl	40001c8c <__sfp_handle_exceptions>
    40001c28:	9e670260 	fmov	d0, x19
    40001c2c:	f9400bf3 	ldr	x19, [sp, #16]
    40001c30:	a8c37bfd 	ldp	x29, x30, [sp], #48
    40001c34:	d65f03c0 	ret
    40001c38:	f26a04c1 	ands	x1, x6, #0xc00000
    40001c3c:	540000e0 	b.eq	40001c58 <__trunctfdf2+0x274>  // b.none
    40001c40:	f150003f 	cmp	x1, #0x400, lsl #12
    40001c44:	54000101 	b.ne	40001c64 <__trunctfdf2+0x280>  // b.any
    40001c48:	f10000bf 	cmp	x5, #0x0
    40001c4c:	d280ffc3 	mov	x3, #0x7fe                 	// #2046
    40001c50:	da9f03e1 	csetm	x1, ne  // ne = any
    40001c54:	9a830042 	csel	x2, x2, x3, eq  // eq = none
    40001c58:	52800283 	mov	w3, #0x14                  	// #20
    40001c5c:	2a030000 	orr	w0, w0, w3
    40001c60:	17ffffe6 	b	40001bf8 <__trunctfdf2+0x214>
    40001c64:	f160003f 	cmp	x1, #0x800, lsl #12
    40001c68:	540000c1 	b.ne	40001c80 <__trunctfdf2+0x29c>  // b.any
    40001c6c:	f10000bf 	cmp	x5, #0x0
    40001c70:	d280ffc3 	mov	x3, #0x7fe                 	// #2046
    40001c74:	da9f13e1 	csetm	x1, eq  // eq = none
    40001c78:	9a831042 	csel	x2, x2, x3, ne  // ne = any
    40001c7c:	17fffff7 	b	40001c58 <__trunctfdf2+0x274>
    40001c80:	92800001 	mov	x1, #0xffffffffffffffff    	// #-1
    40001c84:	d280ffc2 	mov	x2, #0x7fe                 	// #2046
    40001c88:	17fffff4 	b	40001c58 <__trunctfdf2+0x274>

0000000040001c8c <__sfp_handle_exceptions>:
    40001c8c:	36000080 	tbz	w0, #0, 40001c9c <__sfp_handle_exceptions+0x10>
    40001c90:	0f000401 	movi	v1.2s, #0x0
    40001c94:	1e211820 	fdiv	s0, s1, s1
    40001c98:	d53b4421 	mrs	x1, fpsr
    40001c9c:	360800a0 	tbz	w0, #1, 40001cb0 <__sfp_handle_exceptions+0x24>
    40001ca0:	1e2e1001 	fmov	s1, #1.000000000000000000e+00
    40001ca4:	0f000402 	movi	v2.2s, #0x0
    40001ca8:	1e221820 	fdiv	s0, s1, s2
    40001cac:	d53b4421 	mrs	x1, fpsr
    40001cb0:	36100100 	tbz	w0, #2, 40001cd0 <__sfp_handle_exceptions+0x44>
    40001cb4:	12b01001 	mov	w1, #0x7f7fffff            	// #2139095039
    40001cb8:	1e270021 	fmov	s1, w1
    40001cbc:	5298b5c1 	mov	w1, #0xc5ae                	// #50606
    40001cc0:	72ae93a1 	movk	w1, #0x749d, lsl #16
    40001cc4:	1e270022 	fmov	s2, w1
    40001cc8:	1e222820 	fadd	s0, s1, s2
    40001ccc:	d53b4421 	mrs	x1, fpsr
    40001cd0:	36180080 	tbz	w0, #3, 40001ce0 <__sfp_handle_exceptions+0x54>
    40001cd4:	0f044401 	movi	v1.2s, #0x80, lsl #16
    40001cd8:	1e210820 	fmul	s0, s1, s1
    40001cdc:	d53b4421 	mrs	x1, fpsr
    40001ce0:	362000c0 	tbz	w0, #4, 40001cf8 <__sfp_handle_exceptions+0x6c>
    40001ce4:	12b01000 	mov	w0, #0x7f7fffff            	// #2139095039
    40001ce8:	1e2e1002 	fmov	s2, #1.000000000000000000e+00
    40001cec:	1e270001 	fmov	s1, w0
    40001cf0:	1e223820 	fsub	s0, s1, s2
    40001cf4:	d53b4420 	mrs	x0, fpsr
    40001cf8:	d65f03c0 	ret
    40001cfc:	00000000 	udf	#0

0000000040001d00 <pow>:
    40001d00:	9e660003 	fmov	x3, d0
    40001d04:	9e660024 	fmov	x4, d1
    40001d08:	1e604002 	fmov	d2, d0
    40001d0c:	d374fc62 	lsr	x2, x3, #52
    40001d10:	d374fc85 	lsr	x5, x4, #52
    40001d14:	51000440 	sub	w0, w2, #0x1
    40001d18:	2a0203e6 	mov	w6, w2
    40001d1c:	711ff41f 	cmp	w0, #0x7fd
    40001d20:	54000b88 	b.hi	40001e90 <pow+0x190>  // b.pmore
    40001d24:	120028a1 	and	w1, w5, #0x7ff
    40001d28:	52800000 	mov	w0, #0x0                   	// #0
    40001d2c:	510ef821 	sub	w1, w1, #0x3be
    40001d30:	7101fc3f 	cmp	w1, #0x7f
    40001d34:	54000ae8 	b.hi	40001e90 <pow+0x190>  // b.pmore
    40001d38:	d2cd5562 	mov	x2, #0x6aab00000000        	// #117282671951872
    40001d3c:	90000105 	adrp	x5, 40021000 <__device_handles_end+0x17e>
    40001d40:	f2f80322 	movk	x2, #0xc019, lsl #48
    40001d44:	8b020062 	add	x2, x3, x2
    40001d48:	924c2c46 	and	x6, x2, #0xfff0000000000000
    40001d4c:	910ce0a1 	add	x1, x5, #0x338
    40001d50:	d36dcc44 	ubfx	x4, x2, #45, #7
    40001d54:	9374fc42 	asr	x2, x2, #52
    40001d58:	cb060063 	sub	x3, x3, x6
    40001d5c:	fd419ca3 	ldr	d3, [x5, #824]
    40001d60:	8b041426 	add	x6, x1, x4, lsl #5
    40001d64:	1e620044 	scvtf	d4, w2
    40001d68:	1e7e1002 	fmov	d2, #-1.000000000000000000e+00
    40001d6c:	fd400827 	ldr	d7, [x1, #16]
    40001d70:	6d434833 	ldp	d19, d18, [x1, #48]
    40001d74:	fd4024c0 	ldr	d0, [x6, #72]
    40001d78:	fd402cc5 	ldr	d5, [x6, #88]
    40001d7c:	1f431485 	fmadd	d5, d4, d3, d5
    40001d80:	9e670063 	fmov	d3, x3
    40001d84:	fd402026 	ldr	d6, [x1, #64]
    40001d88:	1f400862 	fmadd	d2, d3, d0, d2
    40001d8c:	fd400420 	ldr	d0, [x1, #8]
    40001d90:	6d424430 	ldp	d16, d17, [x1, #32]
    40001d94:	fd4030c3 	ldr	d3, [x6, #96]
    40001d98:	1f400c84 	fmadd	d4, d4, d0, d3
    40001d9c:	fd400c20 	ldr	d0, [x1, #24]
    40001da0:	1f464852 	fmadd	d18, d2, d6, d18
    40001da4:	1e670847 	fmul	d7, d2, d7
    40001da8:	1e652846 	fadd	d6, d2, d5
    40001dac:	1f500040 	fmadd	d0, d2, d16, d0
    40001db0:	1f534451 	fmadd	d17, d2, d19, d17
    40001db4:	1e670850 	fmul	d16, d2, d7
    40001db8:	1e6638a3 	fsub	d3, d5, d6
    40001dbc:	1f62c0e7 	fnmsub	d7, d7, d2, d16
    40001dc0:	1f524611 	fmadd	d17, d16, d18, d17
    40001dc4:	1e7028c5 	fadd	d5, d6, d16
    40001dc8:	1e622863 	fadd	d3, d3, d2
    40001dcc:	1e700842 	fmul	d2, d2, d16
    40001dd0:	1e6538c6 	fsub	d6, d6, d5
    40001dd4:	1e632883 	fadd	d3, d4, d3
    40001dd8:	1f510200 	fmadd	d0, d16, d17, d0
    40001ddc:	1e7028c6 	fadd	d6, d6, d16
    40001de0:	1e672863 	fadd	d3, d3, d7
    40001de4:	1e662863 	fadd	d3, d3, d6
    40001de8:	1f400c42 	fmadd	d2, d2, d0, d3
    40001dec:	1e6228a0 	fadd	d0, d5, d2
    40001df0:	1e600823 	fmul	d3, d1, d0
    40001df4:	1e6038a5 	fsub	d5, d5, d0
    40001df8:	1f608c20 	fnmsub	d0, d1, d0, d3
    40001dfc:	9e660062 	fmov	x2, d3
    40001e00:	1e6228a2 	fadd	d2, d5, d2
    40001e04:	d374f843 	ubfx	x3, x2, #52, #11
    40001e08:	1f420020 	fmadd	d0, d1, d2, d0
    40001e0c:	510f2461 	sub	w1, w3, #0x3c9
    40001e10:	7100f83f 	cmp	w1, #0x3e
    40001e14:	54000708 	b.hi	40001ef4 <pow+0x1f4>  // b.pmore
    40001e18:	b0000102 	adrp	x2, 40022000 <__pow_log_data+0xcc8>
    40001e1c:	910e0041 	add	x1, x2, #0x380
    40001e20:	fd41c042 	ldr	d2, [x2, #896]
    40001e24:	6d411831 	ldp	d17, d6, [x1, #16]
    40001e28:	1e620862 	fmul	d2, d3, d2
    40001e2c:	6d424025 	ldp	d5, d16, [x1, #32]
    40001e30:	6d431c24 	ldp	d4, d7, [x1, #48]
    40001e34:	1e664041 	frinta	d1, d2
    40001e38:	9e640044 	fcvtas	x4, d2
    40001e3c:	1f510c23 	fmadd	d3, d1, d17, d3
    40001e40:	d37f1882 	ubfiz	x2, x4, #1, #7
    40001e44:	8b000080 	add	x0, x4, x0
    40001e48:	91003845 	add	x5, x2, #0xe
    40001e4c:	91003c42 	add	x2, x2, #0xf
    40001e50:	1f460c23 	fmadd	d3, d1, d6, d3
    40001e54:	fc657826 	ldr	d6, [x1, x5, lsl #3]
    40001e58:	f8627821 	ldr	x1, [x1, x2, lsl #3]
    40001e5c:	1e632801 	fadd	d1, d0, d3
    40001e60:	8b00b420 	add	x0, x1, x0, lsl #45
    40001e64:	1f501422 	fmadd	d2, d1, d16, d5
    40001e68:	1f471020 	fmadd	d0, d1, d7, d4
    40001e6c:	1e610823 	fmul	d3, d1, d1
    40001e70:	1e662821 	fadd	d1, d1, d6
    40001e74:	1e630864 	fmul	d4, d3, d3
    40001e78:	1f420461 	fmadd	d1, d3, d2, d1
    40001e7c:	1f400481 	fmadd	d1, d4, d0, d1
    40001e80:	34000443 	cbz	w3, 40001f08 <pow+0x208>
    40001e84:	9e670000 	fmov	d0, x0
    40001e88:	1f400020 	fmadd	d0, d1, d0, d0
    40001e8c:	d65f03c0 	ret
    40001e90:	d37ff881 	lsl	x1, x4, #1
    40001e94:	92e00400 	mov	x0, #0xffdfffffffffffff    	// #-9007199254740993
    40001e98:	d1000427 	sub	x7, x1, #0x1
    40001e9c:	eb0000ff 	cmp	x7, x0
    40001ea0:	54000da2 	b.cs	40002054 <pow+0x354>  // b.hs, b.nlast
    40001ea4:	d37ff861 	lsl	x1, x3, #1
    40001ea8:	d1000427 	sub	x7, x1, #0x1
    40001eac:	eb0000ff 	cmp	x7, x0
    40001eb0:	54001002 	b.cs	400020b0 <pow+0x3b0>  // b.hs, b.nlast
    40001eb4:	120028a1 	and	w1, w5, #0x7ff
    40001eb8:	52800000 	mov	w0, #0x0                   	// #0
    40001ebc:	b7f80543 	tbnz	x3, #63, 40001f64 <pow+0x264>
    40001ec0:	510ef822 	sub	w2, w1, #0x3be
    40001ec4:	7101fc5f 	cmp	w2, #0x7f
    40001ec8:	540003c9 	b.ls	40001f40 <pow+0x240>  // b.plast
    40001ecc:	d2e7fe00 	mov	x0, #0x3ff0000000000000    	// #4607182418800017408
    40001ed0:	eb00007f 	cmp	x3, x0
    40001ed4:	54001300 	b.eq	40002134 <pow+0x434>  // b.none
    40001ed8:	710ef43f 	cmp	w1, #0x3bd
    40001edc:	54000668 	b.hi	40001fa8 <pow+0x2a8>  // b.pmore
    40001ee0:	1e6e1002 	fmov	d2, #1.000000000000000000e+00
    40001ee4:	eb00007f 	cmp	x3, x0
    40001ee8:	54000a68 	b.hi	40002034 <pow+0x334>  // b.pmore
    40001eec:	1e613840 	fsub	d0, d2, d1
    40001ef0:	d65f03c0 	ret
    40001ef4:	37f80a41 	tbnz	w1, #31, 4000203c <pow+0x33c>
    40001ef8:	7110207f 	cmp	w3, #0x408
    40001efc:	54000529 	b.ls	40001fa0 <pow+0x2a0>  // b.plast
    40001f00:	b7f80622 	tbnz	x2, #63, 40001fc4 <pow+0x2c4>
    40001f04:	140000cf 	b	40002240 <__math_oflow>
    40001f08:	36f80fe4 	tbz	w4, #31, 40002104 <pow+0x404>
    40001f0c:	d2e7fc01 	mov	x1, #0x3fe0000000000000    	// #4602678819172646912
    40001f10:	8b010000 	add	x0, x0, x1
    40001f14:	9e670002 	fmov	d2, x0
    40001f18:	1e6e1006 	fmov	d6, #1.000000000000000000e+00
    40001f1c:	1e620821 	fmul	d1, d1, d2
    40001f20:	1e612840 	fadd	d0, d2, d1
    40001f24:	1e60c003 	fabs	d3, d0
    40001f28:	1e662070 	fcmpe	d3, d6
    40001f2c:	540004e4 	b.mi	40001fc8 <pow+0x2c8>  // b.first
    40001f30:	d2e00200 	mov	x0, #0x10000000000000      	// #4503599627370496
    40001f34:	9e670001 	fmov	d1, x0
    40001f38:	1e610800 	fmul	d0, d0, d1
    40001f3c:	140000d5 	b	40002290 <__math_check_uflow>
    40001f40:	35ffefc6 	cbnz	w6, 40001d38 <pow+0x38>
    40001f44:	d2e86601 	mov	x1, #0x4330000000000000    	// #4841369599423283200
    40001f48:	9e670020 	fmov	d0, x1
    40001f4c:	d2ff9803 	mov	x3, #0xfcc0000000000000    	// #-234187180623265792
    40001f50:	1e600842 	fmul	d2, d2, d0
    40001f54:	9e660041 	fmov	x1, d2
    40001f58:	9240f821 	and	x1, x1, #0x7fffffffffffffff
    40001f5c:	8b030023 	add	x3, x1, x3
    40001f60:	17ffff76 	b	40001d38 <pow+0x38>
    40001f64:	710ff83f 	cmp	w1, #0x3fe
    40001f68:	5400058d 	b.le	40002018 <pow+0x318>
    40001f6c:	7110cc3f 	cmp	w1, #0x433
    40001f70:	5400012c 	b.gt	40001f94 <pow+0x294>
    40001f74:	52808660 	mov	w0, #0x433                 	// #1075
    40001f78:	4b010000 	sub	w0, w0, w1
    40001f7c:	92800006 	mov	x6, #0xffffffffffffffff    	// #-1
    40001f80:	9ac020c6 	lsl	x6, x6, x0
    40001f84:	ea26009f 	bics	xzr, x4, x6
    40001f88:	54000481 	b.ne	40002018 <pow+0x318>  // b.any
    40001f8c:	9ac02480 	lsr	x0, x4, x0
    40001f90:	530e0000 	ubfiz	w0, w0, #18, #1
    40001f94:	9240f863 	and	x3, x3, #0x7fffffffffffffff
    40001f98:	12002846 	and	w6, w2, #0x7ff
    40001f9c:	17ffffc9 	b	40001ec0 <pow+0x1c0>
    40001fa0:	52800003 	mov	w3, #0x0                   	// #0
    40001fa4:	17ffff9d 	b	40001e18 <pow+0x118>
    40001fa8:	eb00007f 	cmp	x3, x0
    40001fac:	1a9f87e1 	cset	w1, ls  // ls = plast
    40001fb0:	711ffcbf 	cmp	w5, #0x7ff
    40001fb4:	1a9f87e0 	cset	w0, ls  // ls = plast
    40001fb8:	6b00003f 	cmp	w1, w0
    40001fbc:	52800000 	mov	w0, #0x0                   	// #0
    40001fc0:	54fffa21 	b.ne	40001f04 <pow+0x204>  // b.any
    40001fc4:	1400009b 	b	40002230 <__math_uflow>
    40001fc8:	1e602018 	fcmpe	d0, #0.0
    40001fcc:	1e7e1005 	fmov	d5, #-1.000000000000000000e+00
    40001fd0:	1e603843 	fsub	d3, d2, d0
    40001fd4:	92410000 	and	x0, x0, #0x8000000000000000
    40001fd8:	9e670002 	fmov	d2, x0
    40001fdc:	d2e00200 	mov	x0, #0x10000000000000      	// #4503599627370496
    40001fe0:	9e670007 	fmov	d7, x0
    40001fe4:	9e670004 	fmov	d4, x0
    40001fe8:	1e664ca5 	fcsel	d5, d5, d6, mi  // mi = first
    40001fec:	1e612861 	fadd	d1, d3, d1
    40001ff0:	1e652806 	fadd	d6, d0, d5
    40001ff4:	1e6638a3 	fsub	d3, d5, d6
    40001ff8:	1e602860 	fadd	d0, d3, d0
    40001ffc:	1e612801 	fadd	d1, d0, d1
    40002000:	1e662820 	fadd	d0, d1, d6
    40002004:	1e653800 	fsub	d0, d0, d5
    40002008:	1e602008 	fcmp	d0, #0.0
    4000200c:	1e621c00 	fcsel	d0, d0, d2, ne  // ne = any
    40002010:	1e670884 	fmul	d4, d4, d7
    40002014:	17ffffc7 	b	40001f30 <pow+0x230>
    40002018:	1e604040 	fmov	d0, d2
    4000201c:	14000095 	b	40002270 <__math_invalid>
    40002020:	d24d0063 	eor	x3, x3, #0x8000000000000
    40002024:	d2fffe00 	mov	x0, #0xfff0000000000000    	// #-4503599627370496
    40002028:	1e6e1000 	fmov	d0, #1.000000000000000000e+00
    4000202c:	eb03041f 	cmp	x0, x3, lsl #1
    40002030:	54fff2e2 	b.cs	40001e8c <pow+0x18c>  // b.hs, b.nlast
    40002034:	1e622820 	fadd	d0, d1, d2
    40002038:	d65f03c0 	ret
    4000203c:	1e6e1000 	fmov	d0, #1.000000000000000000e+00
    40002040:	7100001f 	cmp	w0, #0x0
    40002044:	1e602860 	fadd	d0, d3, d0
    40002048:	1e614001 	fneg	d1, d0
    4000204c:	1e601c20 	fcsel	d0, d1, d0, ne  // ne = any
    40002050:	d65f03c0 	ret
    40002054:	b4fffe61 	cbz	x1, 40002020 <pow+0x320>
    40002058:	d2e7fe00 	mov	x0, #0x3ff0000000000000    	// #4607182418800017408
    4000205c:	eb00007f 	cmp	x3, x0
    40002060:	54000620 	b.eq	40002124 <pow+0x424>  // b.none
    40002064:	d2fffc00 	mov	x0, #0xffe0000000000000    	// #-9007199254740992
    40002068:	d37ff863 	lsl	x3, x3, #1
    4000206c:	eb00003f 	cmp	x1, x0
    40002070:	fa400062 	ccmp	x3, x0, #0x2, eq  // eq = none
    40002074:	54fffe08 	b.hi	40002034 <pow+0x334>  // b.pmore
    40002078:	d2effc00 	mov	x0, #0x7fe0000000000000    	// #9214364837600034816
    4000207c:	1e6e1000 	fmov	d0, #1.000000000000000000e+00
    40002080:	eb00007f 	cmp	x3, x0
    40002084:	54fff040 	b.eq	40001e8c <pow+0x18c>  // b.none
    40002088:	aa2403e0 	mvn	x0, x4
    4000208c:	92f00401 	mov	x1, #0x7fdfffffffffffff    	// #9214364837600034815
    40002090:	eb01007f 	cmp	x3, x1
    40002094:	2f00e400 	movi	d0, #0x0
    40002098:	d37ffc00 	lsr	x0, x0, #63
    4000209c:	1a9f97e1 	cset	w1, hi  // hi = pmore
    400020a0:	6b00003f 	cmp	w1, w0
    400020a4:	54ffef41 	b.ne	40001e8c <pow+0x18c>  // b.any
    400020a8:	1e610820 	fmul	d0, d1, d1
    400020ac:	d65f03c0 	ret
    400020b0:	1e620840 	fmul	d0, d2, d2
    400020b4:	52800000 	mov	w0, #0x0                   	// #0
    400020b8:	b7f80083 	tbnz	x3, #63, 400020c8 <pow+0x3c8>
    400020bc:	b5000401 	cbnz	x1, 4000213c <pow+0x43c>
    400020c0:	b6ffee64 	tbz	x4, #63, 40001e8c <pow+0x18c>
    400020c4:	14000063 	b	40002250 <__math_divzero>
    400020c8:	120028a5 	and	w5, w5, #0x7ff
    400020cc:	510ffca2 	sub	w2, w5, #0x3ff
    400020d0:	7100d05f 	cmp	w2, #0x34
    400020d4:	54ffff48 	b.hi	400020bc <pow+0x3bc>  // b.pmore
    400020d8:	52808662 	mov	w2, #0x433                 	// #1075
    400020dc:	4b050045 	sub	w5, w2, w5
    400020e0:	92800002 	mov	x2, #0xffffffffffffffff    	// #-1
    400020e4:	9ac52042 	lsl	x2, x2, x5
    400020e8:	ea22009f 	bics	xzr, x4, x2
    400020ec:	54fffe81 	b.ne	400020bc <pow+0x3bc>  // b.any
    400020f0:	9ac52485 	lsr	x5, x4, x5
    400020f4:	3607fe45 	tbz	w5, #0, 400020bc <pow+0x3bc>
    400020f8:	1e614000 	fneg	d0, d0
    400020fc:	52800020 	mov	w0, #0x1                   	// #1
    40002100:	17ffffef 	b	400020bc <pow+0x3bc>
    40002104:	d2f81e01 	mov	x1, #0xc0f0000000000000    	// #-4544132024016830464
    40002108:	8b010000 	add	x0, x0, x1
    4000210c:	9e670002 	fmov	d2, x0
    40002110:	d2efe000 	mov	x0, #0x7f00000000000000    	// #9151314442816847872
    40002114:	1f420822 	fmadd	d2, d1, d2, d2
    40002118:	9e670000 	fmov	d0, x0
    4000211c:	1e600840 	fmul	d0, d2, d0
    40002120:	14000064 	b	400022b0 <__math_check_oflow>
    40002124:	d24d0084 	eor	x4, x4, #0x8000000000000
    40002128:	d2fffe00 	mov	x0, #0xfff0000000000000    	// #-4503599627370496
    4000212c:	eb04041f 	cmp	x0, x4, lsl #1
    40002130:	54fff823 	b.cc	40002034 <pow+0x334>  // b.lo, b.ul, b.last
    40002134:	1e6e1000 	fmov	d0, #1.000000000000000000e+00
    40002138:	d65f03c0 	ret
    4000213c:	b6ffea84 	tbz	x4, #63, 40001e8c <pow+0x18c>
    40002140:	1e6e1001 	fmov	d1, #1.000000000000000000e+00
    40002144:	1e601820 	fdiv	d0, d1, d0
    40002148:	d65f03c0 	ret
    4000214c:	00000000 	udf	#0

0000000040002150 <fabs>:
    40002150:	1e60c000 	fabs	d0, d0
    40002154:	d65f03c0 	ret
	...

0000000040002160 <sqrt>:
    40002160:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    40002164:	910003fd 	mov	x29, sp
    40002168:	fd000be8 	str	d8, [sp, #16]
    4000216c:	1e604008 	fmov	d8, d0
    40002170:	94000014 	bl	400021c0 <__ieee754_sqrt>
    40002174:	1e682100 	fcmp	d8, d8
    40002178:	b0000660 	adrp	x0, 400cf000 <impure_data+0x3d0>
    4000217c:	b94a4000 	ldr	w0, [x0, #2624]
    40002180:	3a417804 	ccmn	w0, #0x1, #0x4, vc
    40002184:	54000060 	b.eq	40002190 <sqrt+0x30>  // b.none
    40002188:	1e602118 	fcmpe	d8, #0.0
    4000218c:	54000084 	b.mi	4000219c <sqrt+0x3c>  // b.first
    40002190:	fd400be8 	ldr	d8, [sp, #16]
    40002194:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40002198:	d65f03c0 	ret
    4000219c:	94006e72 	bl	4001db64 <__errno>
    400021a0:	2f00e400 	movi	d0, #0x0
    400021a4:	52800421 	mov	w1, #0x21                  	// #33
    400021a8:	b9000001 	str	w1, [x0]
    400021ac:	fd400be8 	ldr	d8, [sp, #16]
    400021b0:	a8c27bfd 	ldp	x29, x30, [sp], #32
    400021b4:	1e601800 	fdiv	d0, d0, d0
    400021b8:	d65f03c0 	ret
    400021bc:	00000000 	udf	#0

00000000400021c0 <__ieee754_sqrt>:
    400021c0:	1e61c000 	fsqrt	d0, d0
    400021c4:	d65f03c0 	ret
	...

00000000400021d0 <with_errno>:
    400021d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    400021d4:	910003fd 	mov	x29, sp
    400021d8:	fd000fe8 	str	d8, [sp, #24]
    400021dc:	1e604008 	fmov	d8, d0
    400021e0:	f9000bf3 	str	x19, [sp, #16]
    400021e4:	2a0003f3 	mov	w19, w0
    400021e8:	94006e5f 	bl	4001db64 <__errno>
    400021ec:	1e604100 	fmov	d0, d8
    400021f0:	fd400fe8 	ldr	d8, [sp, #24]
    400021f4:	b9000013 	str	w19, [x0]
    400021f8:	f9400bf3 	ldr	x19, [sp, #16]
    400021fc:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40002200:	d65f03c0 	ret
	...

0000000040002210 <xflow>:
    40002210:	1e614001 	fneg	d1, d0
    40002214:	7100001f 	cmp	w0, #0x0
    40002218:	1e601c21 	fcsel	d1, d1, d0, ne  // ne = any
    4000221c:	1e610800 	fmul	d0, d0, d1
    40002220:	52800440 	mov	w0, #0x22                  	// #34
    40002224:	17ffffeb 	b	400021d0 <with_errno>
	...

0000000040002230 <__math_uflow>:
    40002230:	d2e20001 	mov	x1, #0x1000000000000000    	// #1152921504606846976
    40002234:	9e670020 	fmov	d0, x1
    40002238:	17fffff6 	b	40002210 <xflow>
    4000223c:	00000000 	udf	#0

0000000040002240 <__math_oflow>:
    40002240:	d2ee0001 	mov	x1, #0x7000000000000000    	// #8070450532247928832
    40002244:	9e670020 	fmov	d0, x1
    40002248:	17fffff2 	b	40002210 <xflow>
    4000224c:	00000000 	udf	#0

0000000040002250 <__math_divzero>:
    40002250:	7100001f 	cmp	w0, #0x0
    40002254:	1e6e1001 	fmov	d1, #1.000000000000000000e+00
    40002258:	1e7e1000 	fmov	d0, #-1.000000000000000000e+00
    4000225c:	1e611c00 	fcsel	d0, d0, d1, ne  // ne = any
    40002260:	2f00e401 	movi	d1, #0x0
    40002264:	52800440 	mov	w0, #0x22                  	// #34
    40002268:	1e611800 	fdiv	d0, d0, d1
    4000226c:	17ffffd9 	b	400021d0 <with_errno>

0000000040002270 <__math_invalid>:
    40002270:	1e602000 	fcmp	d0, d0
    40002274:	1e603800 	fsub	d0, d0, d0
    40002278:	1e601800 	fdiv	d0, d0, d0
    4000227c:	54000066 	b.vs	40002288 <__math_invalid+0x18>
    40002280:	52800420 	mov	w0, #0x21                  	// #33
    40002284:	17ffffd3 	b	400021d0 <with_errno>
    40002288:	d65f03c0 	ret
    4000228c:	00000000 	udf	#0

0000000040002290 <__math_check_uflow>:
    40002290:	1e602008 	fcmp	d0, #0.0
    40002294:	54000040 	b.eq	4000229c <__math_check_uflow+0xc>  // b.none
    40002298:	d65f03c0 	ret
    4000229c:	52800440 	mov	w0, #0x22                  	// #34
    400022a0:	17ffffcc 	b	400021d0 <with_errno>
	...

00000000400022b0 <__math_check_oflow>:
    400022b0:	1e60c002 	fabs	d2, d0
    400022b4:	92f00200 	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
    400022b8:	9e670001 	fmov	d1, x0
    400022bc:	1e612040 	fcmp	d2, d1
    400022c0:	5400006d 	b.le	400022cc <__math_check_oflow+0x1c>
    400022c4:	52800440 	mov	w0, #0x22                  	// #34
    400022c8:	17ffffc2 	b	400021d0 <with_errno>
    400022cc:	d65f03c0 	ret

00000000400022d0 <_fclose_r>:
    400022d0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    400022d4:	910003fd 	mov	x29, sp
    400022d8:	f90013f5 	str	x21, [sp, #32]
    400022dc:	b4000661 	cbz	x1, 400023a8 <_fclose_r+0xd8>
    400022e0:	a90153f3 	stp	x19, x20, [sp, #16]
    400022e4:	aa0103f3 	mov	x19, x1
    400022e8:	aa0003f4 	mov	x20, x0
    400022ec:	b4000060 	cbz	x0, 400022f8 <_fclose_r+0x28>
    400022f0:	b9405001 	ldr	w1, [x0, #80]
    400022f4:	34000641 	cbz	w1, 400023bc <_fclose_r+0xec>
    400022f8:	b940b260 	ldr	w0, [x19, #176]
    400022fc:	79c02261 	ldrsh	w1, [x19, #16]
    40002300:	37000500 	tbnz	w0, #0, 400023a0 <_fclose_r+0xd0>
    40002304:	36480661 	tbz	w1, #9, 400023d0 <_fclose_r+0x100>
    40002308:	aa1303e1 	mov	x1, x19
    4000230c:	aa1403e0 	mov	x0, x20
    40002310:	9400004c 	bl	40002440 <__sflush_r>
    40002314:	2a0003f5 	mov	w21, w0
    40002318:	f9402a62 	ldr	x2, [x19, #80]
    4000231c:	b40000c2 	cbz	x2, 40002334 <_fclose_r+0x64>
    40002320:	f9401a61 	ldr	x1, [x19, #48]
    40002324:	aa1403e0 	mov	x0, x20
    40002328:	d63f0040 	blr	x2
    4000232c:	7100001f 	cmp	w0, #0x0
    40002330:	5a9fa2b5 	csinv	w21, w21, wzr, ge  // ge = tcont
    40002334:	79402260 	ldrh	w0, [x19, #16]
    40002338:	37380680 	tbnz	w0, #7, 40002408 <_fclose_r+0x138>
    4000233c:	f9402e61 	ldr	x1, [x19, #88]
    40002340:	b40000e1 	cbz	x1, 4000235c <_fclose_r+0x8c>
    40002344:	9101d260 	add	x0, x19, #0x74
    40002348:	eb00003f 	cmp	x1, x0
    4000234c:	54000060 	b.eq	40002358 <_fclose_r+0x88>  // b.none
    40002350:	aa1403e0 	mov	x0, x20
    40002354:	940002a7 	bl	40002df0 <_free_r>
    40002358:	f9002e7f 	str	xzr, [x19, #88]
    4000235c:	f9403e61 	ldr	x1, [x19, #120]
    40002360:	b4000081 	cbz	x1, 40002370 <_fclose_r+0xa0>
    40002364:	aa1403e0 	mov	x0, x20
    40002368:	940002a2 	bl	40002df0 <_free_r>
    4000236c:	f9003e7f 	str	xzr, [x19, #120]
    40002370:	94000200 	bl	40002b70 <__sfp_lock_acquire>
    40002374:	7900227f 	strh	wzr, [x19, #16]
    40002378:	b940b260 	ldr	w0, [x19, #176]
    4000237c:	360004e0 	tbz	w0, #0, 40002418 <_fclose_r+0x148>
    40002380:	f9405260 	ldr	x0, [x19, #160]
    40002384:	94006df4 	bl	4001db54 <__retarget_lock_close_recursive>
    40002388:	940001fe 	bl	40002b80 <__sfp_lock_release>
    4000238c:	2a1503e0 	mov	w0, w21
    40002390:	a94153f3 	ldp	x19, x20, [sp, #16]
    40002394:	f94013f5 	ldr	x21, [sp, #32]
    40002398:	a8c37bfd 	ldp	x29, x30, [sp], #48
    4000239c:	d65f03c0 	ret
    400023a0:	35fffb41 	cbnz	w1, 40002308 <_fclose_r+0x38>
    400023a4:	a94153f3 	ldp	x19, x20, [sp, #16]
    400023a8:	52800015 	mov	w21, #0x0                   	// #0
    400023ac:	2a1503e0 	mov	w0, w21
    400023b0:	f94013f5 	ldr	x21, [sp, #32]
    400023b4:	a8c37bfd 	ldp	x29, x30, [sp], #48
    400023b8:	d65f03c0 	ret
    400023bc:	94000135 	bl	40002890 <__sinit>
    400023c0:	b940b260 	ldr	w0, [x19, #176]
    400023c4:	79c02261 	ldrsh	w1, [x19, #16]
    400023c8:	3707fec0 	tbnz	w0, #0, 400023a0 <_fclose_r+0xd0>
    400023cc:	17ffffce 	b	40002304 <_fclose_r+0x34>
    400023d0:	f9405260 	ldr	x0, [x19, #160]
    400023d4:	94006de1 	bl	4001db58 <__retarget_lock_acquire_recursive>
    400023d8:	79c02260 	ldrsh	w0, [x19, #16]
    400023dc:	35fff960 	cbnz	w0, 40002308 <_fclose_r+0x38>
    400023e0:	b940b260 	ldr	w0, [x19, #176]
    400023e4:	12000015 	and	w21, w0, #0x1
    400023e8:	3707fde0 	tbnz	w0, #0, 400023a4 <_fclose_r+0xd4>
    400023ec:	f9405260 	ldr	x0, [x19, #160]
    400023f0:	94006ddc 	bl	4001db60 <__retarget_lock_release_recursive>
    400023f4:	2a1503e0 	mov	w0, w21
    400023f8:	a94153f3 	ldp	x19, x20, [sp, #16]
    400023fc:	f94013f5 	ldr	x21, [sp, #32]
    40002400:	a8c37bfd 	ldp	x29, x30, [sp], #48
    40002404:	d65f03c0 	ret
    40002408:	f9400e61 	ldr	x1, [x19, #24]
    4000240c:	aa1403e0 	mov	x0, x20
    40002410:	94000278 	bl	40002df0 <_free_r>
    40002414:	17ffffca 	b	4000233c <_fclose_r+0x6c>
    40002418:	f9405260 	ldr	x0, [x19, #160]
    4000241c:	94006dd1 	bl	4001db60 <__retarget_lock_release_recursive>
    40002420:	17ffffd8 	b	40002380 <_fclose_r+0xb0>
	...

0000000040002430 <fclose>:
    40002430:	90000662 	adrp	x2, 400ce000 <z_interrupt_stacks+0x440>
    40002434:	aa0003e1 	mov	x1, x0
    40002438:	f9461440 	ldr	x0, [x2, #3112]
    4000243c:	17ffffa5 	b	400022d0 <_fclose_r>

0000000040002440 <__sflush_r>:
    40002440:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    40002444:	910003fd 	mov	x29, sp
    40002448:	a9025bf5 	stp	x21, x22, [sp, #32]
    4000244c:	aa0003f6 	mov	x22, x0
    40002450:	79402020 	ldrh	w0, [x1, #16]
    40002454:	a90153f3 	stp	x19, x20, [sp, #16]
    40002458:	aa0103f3 	mov	x19, x1
    4000245c:	37180500 	tbnz	w0, #3, 400024fc <__sflush_r+0xbc>
    40002460:	b9400821 	ldr	w1, [x1, #8]
    40002464:	7100003f 	cmp	w1, #0x0
    40002468:	540008ed 	b.le	40002584 <__sflush_r+0x144>
    4000246c:	f9402664 	ldr	x4, [x19, #72]
    40002470:	b4000904 	cbz	x4, 40002590 <__sflush_r+0x150>
    40002474:	b94002d4 	ldr	w20, [x22]
    40002478:	b90002df 	str	wzr, [x22]
    4000247c:	37600940 	tbnz	w0, #12, 400025a4 <__sflush_r+0x164>
    40002480:	f9401a61 	ldr	x1, [x19, #48]
    40002484:	d2800002 	mov	x2, #0x0                   	// #0
    40002488:	aa1603e0 	mov	x0, x22
    4000248c:	52800023 	mov	w3, #0x1                   	// #1
    40002490:	d63f0080 	blr	x4
    40002494:	aa0003e2 	mov	x2, x0
    40002498:	b100041f 	cmn	x0, #0x1
    4000249c:	54000c60 	b.eq	40002628 <__sflush_r+0x1e8>  // b.none
    400024a0:	79402260 	ldrh	w0, [x19, #16]
    400024a4:	f9402664 	ldr	x4, [x19, #72]
    400024a8:	361000e0 	tbz	w0, #2, 400024c4 <__sflush_r+0x84>
    400024ac:	f9402e60 	ldr	x0, [x19, #88]
    400024b0:	b9800a61 	ldrsw	x1, [x19, #8]
    400024b4:	cb010042 	sub	x2, x2, x1
    400024b8:	b4000060 	cbz	x0, 400024c4 <__sflush_r+0x84>
    400024bc:	b9807260 	ldrsw	x0, [x19, #112]
    400024c0:	cb000042 	sub	x2, x2, x0
    400024c4:	f9401a61 	ldr	x1, [x19, #48]
    400024c8:	aa1603e0 	mov	x0, x22
    400024cc:	52800003 	mov	w3, #0x0                   	// #0
    400024d0:	d63f0080 	blr	x4
    400024d4:	b100041f 	cmn	x0, #0x1
    400024d8:	540006a1 	b.ne	400025ac <__sflush_r+0x16c>  // b.any
    400024dc:	b94002c1 	ldr	w1, [x22]
    400024e0:	7100743f 	cmp	w1, #0x1d
    400024e4:	540008c9 	b.ls	400025fc <__sflush_r+0x1bc>  // b.plast
    400024e8:	79c02262 	ldrsh	w2, [x19, #16]
    400024ec:	321a0042 	orr	w2, w2, #0x40
    400024f0:	12800000 	mov	w0, #0xffffffff            	// #-1
    400024f4:	79002262 	strh	w2, [x19, #16]
    400024f8:	14000027 	b	40002594 <__sflush_r+0x154>
    400024fc:	f9400c35 	ldr	x21, [x1, #24]
    40002500:	b4000495 	cbz	x21, 40002590 <__sflush_r+0x150>
    40002504:	f9400021 	ldr	x1, [x1]
    40002508:	f9000275 	str	x21, [x19]
    4000250c:	52800002 	mov	w2, #0x0                   	// #0
    40002510:	cb150021 	sub	x1, x1, x21
    40002514:	2a0103f4 	mov	w20, w1
    40002518:	f240041f 	tst	x0, #0x3
    4000251c:	54000041 	b.ne	40002524 <__sflush_r+0xe4>  // b.any
    40002520:	b9402262 	ldr	w2, [x19, #32]
    40002524:	b9000e62 	str	w2, [x19, #12]
    40002528:	7100003f 	cmp	w1, #0x0
    4000252c:	540000ac 	b.gt	40002540 <__sflush_r+0x100>
    40002530:	14000018 	b	40002590 <__sflush_r+0x150>
    40002534:	8b20c2b5 	add	x21, x21, w0, sxtw
    40002538:	7100029f 	cmp	w20, #0x0
    4000253c:	540002ad 	b.le	40002590 <__sflush_r+0x150>
    40002540:	f9401a61 	ldr	x1, [x19, #48]
    40002544:	2a1403e3 	mov	w3, w20
    40002548:	f9402264 	ldr	x4, [x19, #64]
    4000254c:	aa1503e2 	mov	x2, x21
    40002550:	aa1603e0 	mov	x0, x22
    40002554:	d63f0080 	blr	x4
    40002558:	4b000294 	sub	w20, w20, w0
    4000255c:	7100001f 	cmp	w0, #0x0
    40002560:	54fffeac 	b.gt	40002534 <__sflush_r+0xf4>
    40002564:	79402261 	ldrh	w1, [x19, #16]
    40002568:	12800000 	mov	w0, #0xffffffff            	// #-1
    4000256c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40002570:	321a0021 	orr	w1, w1, #0x40
    40002574:	79002261 	strh	w1, [x19, #16]
    40002578:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000257c:	a8c37bfd 	ldp	x29, x30, [sp], #48
    40002580:	d65f03c0 	ret
    40002584:	b9407261 	ldr	w1, [x19, #112]
    40002588:	7100003f 	cmp	w1, #0x0
    4000258c:	54fff70c 	b.gt	4000246c <__sflush_r+0x2c>
    40002590:	52800000 	mov	w0, #0x0                   	// #0
    40002594:	a94153f3 	ldp	x19, x20, [sp, #16]
    40002598:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4000259c:	a8c37bfd 	ldp	x29, x30, [sp], #48
    400025a0:	d65f03c0 	ret
    400025a4:	f9404a62 	ldr	x2, [x19, #144]
    400025a8:	17ffffc0 	b	400024a8 <__sflush_r+0x68>
    400025ac:	79402261 	ldrh	w1, [x19, #16]
    400025b0:	f9400e62 	ldr	x2, [x19, #24]
    400025b4:	f9000262 	str	x2, [x19]
    400025b8:	b9000a7f 	str	wzr, [x19, #8]
    400025bc:	36600041 	tbz	w1, #12, 400025c4 <__sflush_r+0x184>
    400025c0:	f9004a60 	str	x0, [x19, #144]
    400025c4:	f9402e61 	ldr	x1, [x19, #88]
    400025c8:	b90002d4 	str	w20, [x22]
    400025cc:	b4fffe21 	cbz	x1, 40002590 <__sflush_r+0x150>
    400025d0:	9101d260 	add	x0, x19, #0x74
    400025d4:	eb00003f 	cmp	x1, x0
    400025d8:	54000060 	b.eq	400025e4 <__sflush_r+0x1a4>  // b.none
    400025dc:	aa1603e0 	mov	x0, x22
    400025e0:	94000204 	bl	40002df0 <_free_r>
    400025e4:	f9002e7f 	str	xzr, [x19, #88]
    400025e8:	52800000 	mov	w0, #0x0                   	// #0
    400025ec:	a94153f3 	ldp	x19, x20, [sp, #16]
    400025f0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    400025f4:	a8c37bfd 	ldp	x29, x30, [sp], #48
    400025f8:	d65f03c0 	ret
    400025fc:	d2800023 	mov	x3, #0x1                   	// #1
    40002600:	79c02262 	ldrsh	w2, [x19, #16]
    40002604:	f2a40803 	movk	x3, #0x2040, lsl #16
    40002608:	9ac12463 	lsr	x3, x3, x1
    4000260c:	3607f703 	tbz	w3, #0, 400024ec <__sflush_r+0xac>
    40002610:	f9400e63 	ldr	x3, [x19, #24]
    40002614:	f9000263 	str	x3, [x19]
    40002618:	b9000a7f 	str	wzr, [x19, #8]
    4000261c:	3667fd42 	tbz	w2, #12, 400025c4 <__sflush_r+0x184>
    40002620:	35fffd21 	cbnz	w1, 400025c4 <__sflush_r+0x184>
    40002624:	17ffffe7 	b	400025c0 <__sflush_r+0x180>
    40002628:	b94002c0 	ldr	w0, [x22]
    4000262c:	34fff3a0 	cbz	w0, 400024a0 <__sflush_r+0x60>
    40002630:	7100741f 	cmp	w0, #0x1d
    40002634:	7a561804 	ccmp	w0, #0x16, #0x4, ne  // ne = any
    40002638:	54fff961 	b.ne	40002564 <__sflush_r+0x124>  // b.any
    4000263c:	52800000 	mov	w0, #0x0                   	// #0
    40002640:	b90002d4 	str	w20, [x22]
    40002644:	17ffffd4 	b	40002594 <__sflush_r+0x154>
	...

0000000040002650 <_fflush_r>:
    40002650:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    40002654:	910003fd 	mov	x29, sp
    40002658:	a90153f3 	stp	x19, x20, [sp, #16]
    4000265c:	aa0103f3 	mov	x19, x1
    40002660:	aa0003f4 	mov	x20, x0
    40002664:	f90013f5 	str	x21, [sp, #32]
    40002668:	b4000060 	cbz	x0, 40002674 <_fflush_r+0x24>
    4000266c:	b9405001 	ldr	w1, [x0, #80]
    40002670:	34000281 	cbz	w1, 400026c0 <_fflush_r+0x70>
    40002674:	79c02260 	ldrsh	w0, [x19, #16]
    40002678:	52800015 	mov	w21, #0x0                   	// #0
    4000267c:	34000180 	cbz	w0, 400026ac <_fflush_r+0x5c>
    40002680:	b940b261 	ldr	w1, [x19, #176]
    40002684:	37000041 	tbnz	w1, #0, 4000268c <_fflush_r+0x3c>
    40002688:	36480200 	tbz	w0, #9, 400026c8 <_fflush_r+0x78>
    4000268c:	aa1303e1 	mov	x1, x19
    40002690:	aa1403e0 	mov	x0, x20
    40002694:	97ffff6b 	bl	40002440 <__sflush_r>
    40002698:	2a0003f5 	mov	w21, w0
    4000269c:	b940b261 	ldr	w1, [x19, #176]
    400026a0:	37000061 	tbnz	w1, #0, 400026ac <_fflush_r+0x5c>
    400026a4:	79402260 	ldrh	w0, [x19, #16]
    400026a8:	36480220 	tbz	w0, #9, 400026ec <_fflush_r+0x9c>
    400026ac:	2a1503e0 	mov	w0, w21
    400026b0:	a94153f3 	ldp	x19, x20, [sp, #16]
    400026b4:	f94013f5 	ldr	x21, [sp, #32]
    400026b8:	a8c37bfd 	ldp	x29, x30, [sp], #48
    400026bc:	d65f03c0 	ret
    400026c0:	94000074 	bl	40002890 <__sinit>
    400026c4:	17ffffec 	b	40002674 <_fflush_r+0x24>
    400026c8:	f9405260 	ldr	x0, [x19, #160]
    400026cc:	94006d23 	bl	4001db58 <__retarget_lock_acquire_recursive>
    400026d0:	aa1303e1 	mov	x1, x19
    400026d4:	aa1403e0 	mov	x0, x20
    400026d8:	97ffff5a 	bl	40002440 <__sflush_r>
    400026dc:	2a0003f5 	mov	w21, w0
    400026e0:	b940b261 	ldr	w1, [x19, #176]
    400026e4:	3707fe41 	tbnz	w1, #0, 400026ac <_fflush_r+0x5c>
    400026e8:	17ffffef 	b	400026a4 <_fflush_r+0x54>
    400026ec:	f9405260 	ldr	x0, [x19, #160]
    400026f0:	94006d1c 	bl	4001db60 <__retarget_lock_release_recursive>
    400026f4:	2a1503e0 	mov	w0, w21
    400026f8:	a94153f3 	ldp	x19, x20, [sp, #16]
    400026fc:	f94013f5 	ldr	x21, [sp, #32]
    40002700:	a8c37bfd 	ldp	x29, x30, [sp], #48
    40002704:	d65f03c0 	ret
	...

0000000040002710 <fflush>:
    40002710:	b40004e0 	cbz	x0, 400027ac <fflush+0x9c>
    40002714:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    40002718:	910003fd 	mov	x29, sp
    4000271c:	a90153f3 	stp	x19, x20, [sp, #16]
    40002720:	aa0003f3 	mov	x19, x0
    40002724:	90000660 	adrp	x0, 400ce000 <z_interrupt_stacks+0x440>
    40002728:	f90013f5 	str	x21, [sp, #32]
    4000272c:	f9461415 	ldr	x21, [x0, #3112]
    40002730:	b4000075 	cbz	x21, 4000273c <fflush+0x2c>
    40002734:	b94052a0 	ldr	w0, [x21, #80]
    40002738:	34000280 	cbz	w0, 40002788 <fflush+0x78>
    4000273c:	79c02260 	ldrsh	w0, [x19, #16]
    40002740:	52800014 	mov	w20, #0x0                   	// #0
    40002744:	34000180 	cbz	w0, 40002774 <fflush+0x64>
    40002748:	b940b261 	ldr	w1, [x19, #176]
    4000274c:	37000041 	tbnz	w1, #0, 40002754 <fflush+0x44>
    40002750:	36480220 	tbz	w0, #9, 40002794 <fflush+0x84>
    40002754:	aa1303e1 	mov	x1, x19
    40002758:	aa1503e0 	mov	x0, x21
    4000275c:	97ffff39 	bl	40002440 <__sflush_r>
    40002760:	2a0003f4 	mov	w20, w0
    40002764:	b940b261 	ldr	w1, [x19, #176]
    40002768:	37000061 	tbnz	w1, #0, 40002774 <fflush+0x64>
    4000276c:	79402260 	ldrh	w0, [x19, #16]
    40002770:	36480180 	tbz	w0, #9, 400027a0 <fflush+0x90>
    40002774:	2a1403e0 	mov	w0, w20
    40002778:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000277c:	f94013f5 	ldr	x21, [sp, #32]
    40002780:	a8c37bfd 	ldp	x29, x30, [sp], #48
    40002784:	d65f03c0 	ret
    40002788:	aa1503e0 	mov	x0, x21
    4000278c:	94000041 	bl	40002890 <__sinit>
    40002790:	17ffffeb 	b	4000273c <fflush+0x2c>
    40002794:	f9405260 	ldr	x0, [x19, #160]
    40002798:	94006cf0 	bl	4001db58 <__retarget_lock_acquire_recursive>
    4000279c:	17ffffee 	b	40002754 <fflush+0x44>
    400027a0:	f9405260 	ldr	x0, [x19, #160]
    400027a4:	94006cef 	bl	4001db60 <__retarget_lock_release_recursive>
    400027a8:	17fffff3 	b	40002774 <fflush+0x64>
    400027ac:	90000100 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    400027b0:	90000001 	adrp	x1, 40002000 <pow+0x300>
    400027b4:	91194021 	add	x1, x1, #0x650
    400027b8:	f9467c00 	ldr	x0, [x0, #3320]
    400027bc:	14000379 	b	400035a0 <_fwalk_reent>

00000000400027c0 <fgetc>:
    400027c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    400027c4:	90000661 	adrp	x1, 400ce000 <z_interrupt_stacks+0x440>
    400027c8:	910003fd 	mov	x29, sp
    400027cc:	a90153f3 	stp	x19, x20, [sp, #16]
    400027d0:	aa0003f3 	mov	x19, x0
    400027d4:	f9461434 	ldr	x20, [x1, #3112]
    400027d8:	b4000074 	cbz	x20, 400027e4 <fgetc+0x24>
    400027dc:	b9405280 	ldr	w0, [x20, #80]
    400027e0:	340002a0 	cbz	w0, 40002834 <fgetc+0x74>
    400027e4:	b940b260 	ldr	w0, [x19, #176]
    400027e8:	37000060 	tbnz	w0, #0, 400027f4 <fgetc+0x34>
    400027ec:	79402260 	ldrh	w0, [x19, #16]
    400027f0:	364803e0 	tbz	w0, #9, 4000286c <fgetc+0xac>
    400027f4:	b9400a60 	ldr	w0, [x19, #8]
    400027f8:	51000400 	sub	w0, w0, #0x1
    400027fc:	b9000a60 	str	w0, [x19, #8]
    40002800:	37f80200 	tbnz	w0, #31, 40002840 <fgetc+0x80>
    40002804:	f9400260 	ldr	x0, [x19]
    40002808:	91000401 	add	x1, x0, #0x1
    4000280c:	f9000261 	str	x1, [x19]
    40002810:	39400014 	ldrb	w20, [x0]
    40002814:	b940b260 	ldr	w0, [x19, #176]
    40002818:	37000060 	tbnz	w0, #0, 40002824 <fgetc+0x64>
    4000281c:	79402260 	ldrh	w0, [x19, #16]
    40002820:	364801a0 	tbz	w0, #9, 40002854 <fgetc+0x94>
    40002824:	2a1403e0 	mov	w0, w20
    40002828:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000282c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40002830:	d65f03c0 	ret
    40002834:	aa1403e0 	mov	x0, x20
    40002838:	94000016 	bl	40002890 <__sinit>
    4000283c:	17ffffea 	b	400027e4 <fgetc+0x24>
    40002840:	aa1403e0 	mov	x0, x20
    40002844:	aa1303e1 	mov	x1, x19
    40002848:	94000626 	bl	400040e0 <__srget_r>
    4000284c:	2a0003f4 	mov	w20, w0
    40002850:	17fffff1 	b	40002814 <fgetc+0x54>
    40002854:	f9405260 	ldr	x0, [x19, #160]
    40002858:	94006cc2 	bl	4001db60 <__retarget_lock_release_recursive>
    4000285c:	2a1403e0 	mov	w0, w20
    40002860:	a94153f3 	ldp	x19, x20, [sp, #16]
    40002864:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40002868:	d65f03c0 	ret
    4000286c:	f9405260 	ldr	x0, [x19, #160]
    40002870:	94006cba 	bl	4001db58 <__retarget_lock_acquire_recursive>
    40002874:	17ffffe0 	b	400027f4 <fgetc+0x34>
	...

0000000040002880 <_cleanup_r>:
    40002880:	90000001 	adrp	x1, 40002000 <pow+0x300>
    40002884:	91194021 	add	x1, x1, #0x650
    40002888:	14000346 	b	400035a0 <_fwalk_reent>
    4000288c:	00000000 	udf	#0

0000000040002890 <__sinit>:
    40002890:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    40002894:	910003fd 	mov	x29, sp
    40002898:	a90153f3 	stp	x19, x20, [sp, #16]
    4000289c:	aa0003f4 	mov	x20, x0
    400028a0:	a9025bf5 	stp	x21, x22, [sp, #32]
    400028a4:	b0000675 	adrp	x21, 400cf000 <impure_data+0x3d0>
    400028a8:	912a42b5 	add	x21, x21, #0xa90
    400028ac:	aa1503e0 	mov	x0, x21
    400028b0:	94006caa 	bl	4001db58 <__retarget_lock_acquire_recursive>
    400028b4:	b9405280 	ldr	w0, [x20, #80]
    400028b8:	35000a20 	cbnz	w0, 400029fc <__sinit+0x16c>
    400028bc:	f9400693 	ldr	x19, [x20, #8]
    400028c0:	a90363f7 	stp	x23, x24, [sp, #48]
    400028c4:	91086281 	add	x1, x20, #0x218
    400028c8:	f90023f9 	str	x25, [sp, #64]
    400028cc:	52800062 	mov	w2, #0x3                   	// #3
    400028d0:	90000000 	adrp	x0, 40002000 <pow+0x300>
    400028d4:	91220000 	add	x0, x0, #0x880
    400028d8:	f9002e80 	str	x0, [x20, #88]
    400028dc:	52800083 	mov	w3, #0x4                   	// #4
    400028e0:	f901029f 	str	xzr, [x20, #512]
    400028e4:	9102a260 	add	x0, x19, #0xa8
    400028e8:	b9020a82 	str	w2, [x20, #520]
    400028ec:	d0000018 	adrp	x24, 40004000 <_open_r+0x10>
    400028f0:	f9010a81 	str	x1, [x20, #528]
    400028f4:	910ac318 	add	x24, x24, #0x2b0
    400028f8:	a9007e7f 	stp	xzr, xzr, [x19]
    400028fc:	d2800102 	mov	x2, #0x8                   	// #8
    40002900:	52800001 	mov	w1, #0x0                   	// #0
    40002904:	b9001263 	str	w3, [x19, #16]
    40002908:	d0000017 	adrp	x23, 40004000 <_open_r+0x10>
    4000290c:	f9000e7f 	str	xzr, [x19, #24]
    40002910:	910c82f7 	add	x23, x23, #0x320
    40002914:	b900227f 	str	wzr, [x19, #32]
    40002918:	d0000016 	adrp	x22, 40004000 <_open_r+0x10>
    4000291c:	b9002a7f 	str	wzr, [x19, #40]
    40002920:	910dc2d6 	add	x22, x22, #0x370
    40002924:	b900b27f 	str	wzr, [x19, #176]
    40002928:	d0000019 	adrp	x25, 40004000 <_open_r+0x10>
    4000292c:	91098339 	add	x25, x25, #0x260
    40002930:	97fffa04 	bl	40001140 <memset>
    40002934:	a9036673 	stp	x19, x25, [x19, #48]
    40002938:	91028260 	add	x0, x19, #0xa0
    4000293c:	a9045e78 	stp	x24, x23, [x19, #64]
    40002940:	f9002a76 	str	x22, [x19, #80]
    40002944:	94006c7a 	bl	4001db2c <__retarget_lock_init_recursive>
    40002948:	f9400a93 	ldr	x19, [x20, #16]
    4000294c:	52800123 	mov	w3, #0x9                   	// #9
    40002950:	72a00023 	movk	w3, #0x1, lsl #16
    40002954:	d2800102 	mov	x2, #0x8                   	// #8
    40002958:	52800001 	mov	w1, #0x0                   	// #0
    4000295c:	9102a260 	add	x0, x19, #0xa8
    40002960:	a9007e7f 	stp	xzr, xzr, [x19]
    40002964:	b9001263 	str	w3, [x19, #16]
    40002968:	f9000e7f 	str	xzr, [x19, #24]
    4000296c:	b900227f 	str	wzr, [x19, #32]
    40002970:	b9002a7f 	str	wzr, [x19, #40]
    40002974:	b900b27f 	str	wzr, [x19, #176]
    40002978:	97fff9f2 	bl	40001140 <memset>
    4000297c:	a9036673 	stp	x19, x25, [x19, #48]
    40002980:	91028260 	add	x0, x19, #0xa0
    40002984:	a9045e78 	stp	x24, x23, [x19, #64]
    40002988:	f9002a76 	str	x22, [x19, #80]
    4000298c:	94006c68 	bl	4001db2c <__retarget_lock_init_recursive>
    40002990:	f9400e93 	ldr	x19, [x20, #24]
    40002994:	52800243 	mov	w3, #0x12                  	// #18
    40002998:	72a00043 	movk	w3, #0x2, lsl #16
    4000299c:	d2800102 	mov	x2, #0x8                   	// #8
    400029a0:	52800001 	mov	w1, #0x0                   	// #0
    400029a4:	9102a260 	add	x0, x19, #0xa8
    400029a8:	a9007e7f 	stp	xzr, xzr, [x19]
    400029ac:	b9001263 	str	w3, [x19, #16]
    400029b0:	f9000e7f 	str	xzr, [x19, #24]
    400029b4:	b900227f 	str	wzr, [x19, #32]
    400029b8:	b9002a7f 	str	wzr, [x19, #40]
    400029bc:	b900b27f 	str	wzr, [x19, #176]
    400029c0:	97fff9e0 	bl	40001140 <memset>
    400029c4:	a9036673 	stp	x19, x25, [x19, #48]
    400029c8:	91028260 	add	x0, x19, #0xa0
    400029cc:	a9045e78 	stp	x24, x23, [x19, #64]
    400029d0:	f9002a76 	str	x22, [x19, #80]
    400029d4:	94006c56 	bl	4001db2c <__retarget_lock_init_recursive>
    400029d8:	52800020 	mov	w0, #0x1                   	// #1
    400029dc:	a94363f7 	ldp	x23, x24, [sp, #48]
    400029e0:	f94023f9 	ldr	x25, [sp, #64]
    400029e4:	b9005280 	str	w0, [x20, #80]
    400029e8:	aa1503e0 	mov	x0, x21
    400029ec:	a94153f3 	ldp	x19, x20, [sp, #16]
    400029f0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    400029f4:	a8c57bfd 	ldp	x29, x30, [sp], #80
    400029f8:	14006c5a 	b	4001db60 <__retarget_lock_release_recursive>
    400029fc:	aa1503e0 	mov	x0, x21
    40002a00:	a94153f3 	ldp	x19, x20, [sp, #16]
    40002a04:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40002a08:	a8c57bfd 	ldp	x29, x30, [sp], #80
    40002a0c:	14006c55 	b	4001db60 <__retarget_lock_release_recursive>

0000000040002a10 <__sfp>:
    40002a10:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    40002a14:	910003fd 	mov	x29, sp
    40002a18:	a90153f3 	stp	x19, x20, [sp, #16]
    40002a1c:	b0000674 	adrp	x20, 400cf000 <impure_data+0x3d0>
    40002a20:	9129c294 	add	x20, x20, #0xa70
    40002a24:	a9025bf5 	stp	x21, x22, [sp, #32]
    40002a28:	aa0003f5 	mov	x21, x0
    40002a2c:	aa1403e0 	mov	x0, x20
    40002a30:	f9001bf7 	str	x23, [sp, #48]
    40002a34:	94006c49 	bl	4001db58 <__retarget_lock_acquire_recursive>
    40002a38:	90000100 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    40002a3c:	f9467c16 	ldr	x22, [x0, #3320]
    40002a40:	b94052c0 	ldr	w0, [x22, #80]
    40002a44:	34000600 	cbz	w0, 40002b04 <__sfp+0xf4>
    40002a48:	910802d6 	add	x22, x22, #0x200
    40002a4c:	52800097 	mov	w23, #0x4                   	// #4
    40002a50:	b9400ac0 	ldr	w0, [x22, #8]
    40002a54:	f9400ad3 	ldr	x19, [x22, #16]
    40002a58:	7100001f 	cmp	w0, #0x0
    40002a5c:	540004cd 	b.le	40002af4 <__sfp+0xe4>
    40002a60:	51000400 	sub	w0, w0, #0x1
    40002a64:	91000400 	add	x0, x0, #0x1
    40002a68:	8b000402 	add	x2, x0, x0, lsl #1
    40002a6c:	d37df042 	lsl	x2, x2, #3
    40002a70:	cb000042 	sub	x2, x2, x0
    40002a74:	8b020e62 	add	x2, x19, x2, lsl #3
    40002a78:	14000004 	b	40002a88 <__sfp+0x78>
    40002a7c:	9102e273 	add	x19, x19, #0xb8
    40002a80:	eb02027f 	cmp	x19, x2
    40002a84:	54000380 	b.eq	40002af4 <__sfp+0xe4>  // b.none
    40002a88:	79c02261 	ldrsh	w1, [x19, #16]
    40002a8c:	35ffff81 	cbnz	w1, 40002a7c <__sfp+0x6c>
    40002a90:	129fffc0 	mov	w0, #0xffff0001            	// #-65535
    40002a94:	b9001260 	str	w0, [x19, #16]
    40002a98:	b900b27f 	str	wzr, [x19, #176]
    40002a9c:	91028260 	add	x0, x19, #0xa0
    40002aa0:	94006c23 	bl	4001db2c <__retarget_lock_init_recursive>
    40002aa4:	aa1403e0 	mov	x0, x20
    40002aa8:	94006c2e 	bl	4001db60 <__retarget_lock_release_recursive>
    40002aac:	a9007e7f 	stp	xzr, xzr, [x19]
    40002ab0:	9102a260 	add	x0, x19, #0xa8
    40002ab4:	d2800102 	mov	x2, #0x8                   	// #8
    40002ab8:	f9000e7f 	str	xzr, [x19, #24]
    40002abc:	52800001 	mov	w1, #0x0                   	// #0
    40002ac0:	b900227f 	str	wzr, [x19, #32]
    40002ac4:	b9002a7f 	str	wzr, [x19, #40]
    40002ac8:	97fff99e 	bl	40001140 <memset>
    40002acc:	f9002e7f 	str	xzr, [x19, #88]
    40002ad0:	b900627f 	str	wzr, [x19, #96]
    40002ad4:	f9003e7f 	str	xzr, [x19, #120]
    40002ad8:	b900827f 	str	wzr, [x19, #128]
    40002adc:	aa1303e0 	mov	x0, x19
    40002ae0:	a94153f3 	ldp	x19, x20, [sp, #16]
    40002ae4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40002ae8:	f9401bf7 	ldr	x23, [sp, #48]
    40002aec:	a8c47bfd 	ldp	x29, x30, [sp], #64
    40002af0:	d65f03c0 	ret
    40002af4:	f94002d3 	ldr	x19, [x22]
    40002af8:	b40000d3 	cbz	x19, 40002b10 <__sfp+0x100>
    40002afc:	aa1303f6 	mov	x22, x19
    40002b00:	17ffffd4 	b	40002a50 <__sfp+0x40>
    40002b04:	aa1603e0 	mov	x0, x22
    40002b08:	97ffff62 	bl	40002890 <__sinit>
    40002b0c:	17ffffcf 	b	40002a48 <__sfp+0x38>
    40002b10:	aa1503e0 	mov	x0, x21
    40002b14:	d2805f01 	mov	x1, #0x2f8                 	// #760
    40002b18:	94000322 	bl	400037a0 <_malloc_r>
    40002b1c:	aa0003f3 	mov	x19, x0
    40002b20:	b4000160 	cbz	x0, 40002b4c <__sfp+0x13c>
    40002b24:	91006000 	add	x0, x0, #0x18
    40002b28:	f900027f 	str	xzr, [x19]
    40002b2c:	b9000a77 	str	w23, [x19, #8]
    40002b30:	d2805c02 	mov	x2, #0x2e0                 	// #736
    40002b34:	f9000a60 	str	x0, [x19, #16]
    40002b38:	52800001 	mov	w1, #0x0                   	// #0
    40002b3c:	97fff981 	bl	40001140 <memset>
    40002b40:	f90002d3 	str	x19, [x22]
    40002b44:	aa1303f6 	mov	x22, x19
    40002b48:	17ffffc2 	b	40002a50 <__sfp+0x40>
    40002b4c:	f90002df 	str	xzr, [x22]
    40002b50:	aa1403e0 	mov	x0, x20
    40002b54:	94006c03 	bl	4001db60 <__retarget_lock_release_recursive>
    40002b58:	52800180 	mov	w0, #0xc                   	// #12
    40002b5c:	b90002a0 	str	w0, [x21]
    40002b60:	17ffffdf 	b	40002adc <__sfp+0xcc>
	...

0000000040002b70 <__sfp_lock_acquire>:
    40002b70:	b0000660 	adrp	x0, 400cf000 <impure_data+0x3d0>
    40002b74:	9129c000 	add	x0, x0, #0xa70
    40002b78:	14006bf8 	b	4001db58 <__retarget_lock_acquire_recursive>
    40002b7c:	00000000 	udf	#0

0000000040002b80 <__sfp_lock_release>:
    40002b80:	b0000660 	adrp	x0, 400cf000 <impure_data+0x3d0>
    40002b84:	9129c000 	add	x0, x0, #0xa70
    40002b88:	14006bf6 	b	4001db60 <__retarget_lock_release_recursive>
    40002b8c:	00000000 	udf	#0

0000000040002b90 <_fopen_r>:
    40002b90:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    40002b94:	910003fd 	mov	x29, sp
    40002b98:	a90153f3 	stp	x19, x20, [sp, #16]
    40002b9c:	a9025bf5 	stp	x21, x22, [sp, #32]
    40002ba0:	aa0103f6 	mov	x22, x1
    40002ba4:	aa0003f5 	mov	x21, x0
    40002ba8:	aa0203e1 	mov	x1, x2
    40002bac:	9100f3e2 	add	x2, sp, #0x3c
    40002bb0:	94001af4 	bl	40009780 <__sflags>
    40002bb4:	34000500 	cbz	w0, 40002c54 <_fopen_r+0xc4>
    40002bb8:	2a0003f4 	mov	w20, w0
    40002bbc:	aa1503e0 	mov	x0, x21
    40002bc0:	97ffff94 	bl	40002a10 <__sfp>
    40002bc4:	aa0003f3 	mov	x19, x0
    40002bc8:	b4000460 	cbz	x0, 40002c54 <_fopen_r+0xc4>
    40002bcc:	b9403fe2 	ldr	w2, [sp, #60]
    40002bd0:	aa1603e1 	mov	x1, x22
    40002bd4:	aa1503e0 	mov	x0, x21
    40002bd8:	528036c3 	mov	w3, #0x1b6                 	// #438
    40002bdc:	94000505 	bl	40003ff0 <_open_r>
    40002be0:	2a0003f6 	mov	w22, w0
    40002be4:	37f80600 	tbnz	w0, #31, 40002ca4 <_fopen_r+0x114>
    40002be8:	b940b260 	ldr	w0, [x19, #176]
    40002bec:	37000060 	tbnz	w0, #0, 40002bf8 <_fopen_r+0x68>
    40002bf0:	79402260 	ldrh	w0, [x19, #16]
    40002bf4:	364804c0 	tbz	w0, #9, 40002c8c <_fopen_r+0xfc>
    40002bf8:	d0000003 	adrp	x3, 40004000 <_open_r+0x10>
    40002bfc:	d0000002 	adrp	x2, 40004000 <_open_r+0x10>
    40002c00:	91098063 	add	x3, x3, #0x260
    40002c04:	910ac042 	add	x2, x2, #0x2b0
    40002c08:	d0000001 	adrp	x1, 40004000 <_open_r+0x10>
    40002c0c:	d0000000 	adrp	x0, 40004000 <_open_r+0x10>
    40002c10:	910c8021 	add	x1, x1, #0x320
    40002c14:	910dc000 	add	x0, x0, #0x370
    40002c18:	79002274 	strh	w20, [x19, #16]
    40002c1c:	79002676 	strh	w22, [x19, #18]
    40002c20:	a9030e73 	stp	x19, x3, [x19, #48]
    40002c24:	a9040662 	stp	x2, x1, [x19, #64]
    40002c28:	f9002a60 	str	x0, [x19, #80]
    40002c2c:	37400214 	tbnz	w20, #8, 40002c6c <_fopen_r+0xdc>
    40002c30:	b940b260 	ldr	w0, [x19, #176]
    40002c34:	37000060 	tbnz	w0, #0, 40002c40 <_fopen_r+0xb0>
    40002c38:	79402260 	ldrh	w0, [x19, #16]
    40002c3c:	364802e0 	tbz	w0, #9, 40002c98 <_fopen_r+0x108>
    40002c40:	aa1303e0 	mov	x0, x19
    40002c44:	a94153f3 	ldp	x19, x20, [sp, #16]
    40002c48:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40002c4c:	a8c47bfd 	ldp	x29, x30, [sp], #64
    40002c50:	d65f03c0 	ret
    40002c54:	d2800013 	mov	x19, #0x0                   	// #0
    40002c58:	aa1303e0 	mov	x0, x19
    40002c5c:	a94153f3 	ldp	x19, x20, [sp, #16]
    40002c60:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40002c64:	a8c47bfd 	ldp	x29, x30, [sp], #64
    40002c68:	d65f03c0 	ret
    40002c6c:	aa1503e0 	mov	x0, x21
    40002c70:	aa1303e1 	mov	x1, x19
    40002c74:	52800043 	mov	w3, #0x2                   	// #2
    40002c78:	d2800002 	mov	x2, #0x0                   	// #0
    40002c7c:	9400013d 	bl	40003170 <_fseek_r>
    40002c80:	b940b260 	ldr	w0, [x19, #176]
    40002c84:	3707fde0 	tbnz	w0, #0, 40002c40 <_fopen_r+0xb0>
    40002c88:	17ffffec 	b	40002c38 <_fopen_r+0xa8>
    40002c8c:	f9405260 	ldr	x0, [x19, #160]
    40002c90:	94006bb2 	bl	4001db58 <__retarget_lock_acquire_recursive>
    40002c94:	17ffffd9 	b	40002bf8 <_fopen_r+0x68>
    40002c98:	f9405260 	ldr	x0, [x19, #160]
    40002c9c:	94006bb1 	bl	4001db60 <__retarget_lock_release_recursive>
    40002ca0:	17ffffe8 	b	40002c40 <_fopen_r+0xb0>
    40002ca4:	97ffffb3 	bl	40002b70 <__sfp_lock_acquire>
    40002ca8:	7900227f 	strh	wzr, [x19, #16]
    40002cac:	f9405260 	ldr	x0, [x19, #160]
    40002cb0:	d2800013 	mov	x19, #0x0                   	// #0
    40002cb4:	94006ba8 	bl	4001db54 <__retarget_lock_close_recursive>
    40002cb8:	97ffffb2 	bl	40002b80 <__sfp_lock_release>
    40002cbc:	17ffffe1 	b	40002c40 <_fopen_r+0xb0>

0000000040002cc0 <fopen>:
    40002cc0:	90000663 	adrp	x3, 400ce000 <z_interrupt_stacks+0x440>
    40002cc4:	aa0103e2 	mov	x2, x1
    40002cc8:	aa0003e1 	mov	x1, x0
    40002ccc:	f9461460 	ldr	x0, [x3, #3112]
    40002cd0:	17ffffb0 	b	40002b90 <_fopen_r>
	...

0000000040002ce0 <_malloc_trim_r>:
    40002ce0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    40002ce4:	910003fd 	mov	x29, sp
    40002ce8:	a9025bf5 	stp	x21, x22, [sp, #32]
    40002cec:	b0000676 	adrp	x22, 400cf000 <impure_data+0x3d0>
    40002cf0:	9101c2d6 	add	x22, x22, #0x70
    40002cf4:	aa0003f5 	mov	x21, x0
    40002cf8:	a90153f3 	stp	x19, x20, [sp, #16]
    40002cfc:	aa0103f3 	mov	x19, x1
    40002d00:	940004b4 	bl	40003fd0 <__malloc_lock>
    40002d04:	f9400ac0 	ldr	x0, [x22, #16]
    40002d08:	f9400414 	ldr	x20, [x0, #8]
    40002d0c:	927ef694 	and	x20, x20, #0xfffffffffffffffc
    40002d10:	cb130293 	sub	x19, x20, x19
    40002d14:	913f7e73 	add	x19, x19, #0xfdf
    40002d18:	9274ce73 	and	x19, x19, #0xfffffffffffff000
    40002d1c:	d1400673 	sub	x19, x19, #0x1, lsl #12
    40002d20:	f13ffe7f 	cmp	x19, #0xfff
    40002d24:	5400010d 	b.le	40002d44 <_malloc_trim_r+0x64>
    40002d28:	d2800001 	mov	x1, #0x0                   	// #0
    40002d2c:	aa1503e0 	mov	x0, x21
    40002d30:	94000508 	bl	40004150 <_sbrk_r>
    40002d34:	f9400ac1 	ldr	x1, [x22, #16]
    40002d38:	8b140021 	add	x1, x1, x20
    40002d3c:	eb01001f 	cmp	x0, x1
    40002d40:	54000100 	b.eq	40002d60 <_malloc_trim_r+0x80>  // b.none
    40002d44:	aa1503e0 	mov	x0, x21
    40002d48:	940004a6 	bl	40003fe0 <__malloc_unlock>
    40002d4c:	52800000 	mov	w0, #0x0                   	// #0
    40002d50:	a94153f3 	ldp	x19, x20, [sp, #16]
    40002d54:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40002d58:	a8c37bfd 	ldp	x29, x30, [sp], #48
    40002d5c:	d65f03c0 	ret
    40002d60:	cb1303e1 	neg	x1, x19
    40002d64:	aa1503e0 	mov	x0, x21
    40002d68:	940004fa 	bl	40004150 <_sbrk_r>
    40002d6c:	b100041f 	cmn	x0, #0x1
    40002d70:	54000200 	b.eq	40002db0 <_malloc_trim_r+0xd0>  // b.none
    40002d74:	b0000402 	adrp	x2, 40083000 <ws+0x3a40>
    40002d78:	cb130294 	sub	x20, x20, x19
    40002d7c:	f9400ac3 	ldr	x3, [x22, #16]
    40002d80:	b2400294 	orr	x20, x20, #0x1
    40002d84:	b94a4041 	ldr	w1, [x2, #2624]
    40002d88:	aa1503e0 	mov	x0, x21
    40002d8c:	f9000474 	str	x20, [x3, #8]
    40002d90:	4b130033 	sub	w19, w1, w19
    40002d94:	b90a4053 	str	w19, [x2, #2624]
    40002d98:	94000492 	bl	40003fe0 <__malloc_unlock>
    40002d9c:	52800020 	mov	w0, #0x1                   	// #1
    40002da0:	a94153f3 	ldp	x19, x20, [sp, #16]
    40002da4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40002da8:	a8c37bfd 	ldp	x29, x30, [sp], #48
    40002dac:	d65f03c0 	ret
    40002db0:	d2800001 	mov	x1, #0x0                   	// #0
    40002db4:	aa1503e0 	mov	x0, x21
    40002db8:	940004e6 	bl	40004150 <_sbrk_r>
    40002dbc:	f9400ac2 	ldr	x2, [x22, #16]
    40002dc0:	cb020001 	sub	x1, x0, x2
    40002dc4:	f1007c3f 	cmp	x1, #0x1f
    40002dc8:	54fffbed 	b.le	40002d44 <_malloc_trim_r+0x64>
    40002dcc:	b0000664 	adrp	x4, 400cf000 <impure_data+0x3d0>
    40002dd0:	b2400021 	orr	x1, x1, #0x1
    40002dd4:	f9000441 	str	x1, [x2, #8]
    40002dd8:	b0000403 	adrp	x3, 40083000 <ws+0x3a40>
    40002ddc:	f9444081 	ldr	x1, [x4, #2176]
    40002de0:	cb010000 	sub	x0, x0, x1
    40002de4:	b90a4060 	str	w0, [x3, #2624]
    40002de8:	17ffffd7 	b	40002d44 <_malloc_trim_r+0x64>
    40002dec:	00000000 	udf	#0

0000000040002df0 <_free_r>:
    40002df0:	b4000a21 	cbz	x1, 40002f34 <_free_r+0x144>
    40002df4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    40002df8:	910003fd 	mov	x29, sp
    40002dfc:	a90153f3 	stp	x19, x20, [sp, #16]
    40002e00:	aa0103f3 	mov	x19, x1
    40002e04:	aa0003f4 	mov	x20, x0
    40002e08:	94000472 	bl	40003fd0 <__malloc_lock>
    40002e0c:	f85f8265 	ldur	x5, [x19, #-8]
    40002e10:	d1004263 	sub	x3, x19, #0x10
    40002e14:	b0000660 	adrp	x0, 400cf000 <impure_data+0x3d0>
    40002e18:	9101c000 	add	x0, x0, #0x70
    40002e1c:	927ff8a2 	and	x2, x5, #0xfffffffffffffffe
    40002e20:	8b020064 	add	x4, x3, x2
    40002e24:	f9400806 	ldr	x6, [x0, #16]
    40002e28:	f9400481 	ldr	x1, [x4, #8]
    40002e2c:	927ef421 	and	x1, x1, #0xfffffffffffffffc
    40002e30:	eb0400df 	cmp	x6, x4
    40002e34:	54000c60 	b.eq	40002fc0 <_free_r+0x1d0>  // b.none
    40002e38:	f9000481 	str	x1, [x4, #8]
    40002e3c:	8b010086 	add	x6, x4, x1
    40002e40:	37000345 	tbnz	w5, #0, 40002ea8 <_free_r+0xb8>
    40002e44:	f85f0267 	ldur	x7, [x19, #-16]
    40002e48:	b0000665 	adrp	x5, 400cf000 <impure_data+0x3d0>
    40002e4c:	f94004c6 	ldr	x6, [x6, #8]
    40002e50:	cb070063 	sub	x3, x3, x7
    40002e54:	8b070042 	add	x2, x2, x7
    40002e58:	910200a5 	add	x5, x5, #0x80
    40002e5c:	924000c6 	and	x6, x6, #0x1
    40002e60:	f9400867 	ldr	x7, [x3, #16]
    40002e64:	eb0500ff 	cmp	x7, x5
    40002e68:	54000940 	b.eq	40002f90 <_free_r+0x1a0>  // b.none
    40002e6c:	f9400c68 	ldr	x8, [x3, #24]
    40002e70:	f9000ce8 	str	x8, [x7, #24]
    40002e74:	f9000907 	str	x7, [x8, #16]
    40002e78:	b50001c6 	cbnz	x6, 40002eb0 <_free_r+0xc0>
    40002e7c:	8b010042 	add	x2, x2, x1
    40002e80:	f9400881 	ldr	x1, [x4, #16]
    40002e84:	b2400046 	orr	x6, x2, #0x1
    40002e88:	eb05003f 	cmp	x1, x5
    40002e8c:	54000ee0 	b.eq	40003068 <_free_r+0x278>  // b.none
    40002e90:	f9400c84 	ldr	x4, [x4, #24]
    40002e94:	f9000c24 	str	x4, [x1, #24]
    40002e98:	f9000881 	str	x1, [x4, #16]
    40002e9c:	f9000466 	str	x6, [x3, #8]
    40002ea0:	f8226862 	str	x2, [x3, x2]
    40002ea4:	14000006 	b	40002ebc <_free_r+0xcc>
    40002ea8:	f94004c5 	ldr	x5, [x6, #8]
    40002eac:	36000465 	tbz	w5, #0, 40002f38 <_free_r+0x148>
    40002eb0:	b2400041 	orr	x1, x2, #0x1
    40002eb4:	f9000461 	str	x1, [x3, #8]
    40002eb8:	f9000082 	str	x2, [x4]
    40002ebc:	f107fc5f 	cmp	x2, #0x1ff
    40002ec0:	54000449 	b.ls	40002f48 <_free_r+0x158>  // b.plast
    40002ec4:	d349fc41 	lsr	x1, x2, #9
    40002ec8:	f127fc5f 	cmp	x2, #0x9ff
    40002ecc:	54000a28 	b.hi	40003010 <_free_r+0x220>  // b.pmore
    40002ed0:	d346fc41 	lsr	x1, x2, #6
    40002ed4:	1100e424 	add	w4, w1, #0x39
    40002ed8:	1100e025 	add	w5, w1, #0x38
    40002edc:	531f7884 	lsl	w4, w4, #1
    40002ee0:	937d7c84 	sbfiz	x4, x4, #3, #32
    40002ee4:	8b040004 	add	x4, x0, x4
    40002ee8:	f85f0481 	ldr	x1, [x4], #-16
    40002eec:	eb01009f 	cmp	x4, x1
    40002ef0:	54000ae0 	b.eq	4000304c <_free_r+0x25c>  // b.none
    40002ef4:	d503201f 	nop
    40002ef8:	f9400420 	ldr	x0, [x1, #8]
    40002efc:	927ef400 	and	x0, x0, #0xfffffffffffffffc
    40002f00:	eb02001f 	cmp	x0, x2
    40002f04:	54000089 	b.ls	40002f14 <_free_r+0x124>  // b.plast
    40002f08:	f9400821 	ldr	x1, [x1, #16]
    40002f0c:	eb01009f 	cmp	x4, x1
    40002f10:	54ffff41 	b.ne	40002ef8 <_free_r+0x108>  // b.any
    40002f14:	f9400c24 	ldr	x4, [x1, #24]
    40002f18:	a9011061 	stp	x1, x4, [x3, #16]
    40002f1c:	aa1403e0 	mov	x0, x20
    40002f20:	f9000883 	str	x3, [x4, #16]
    40002f24:	f9000c23 	str	x3, [x1, #24]
    40002f28:	a94153f3 	ldp	x19, x20, [sp, #16]
    40002f2c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40002f30:	1400042c 	b	40003fe0 <__malloc_unlock>
    40002f34:	d65f03c0 	ret
    40002f38:	b0000665 	adrp	x5, 400cf000 <impure_data+0x3d0>
    40002f3c:	8b010042 	add	x2, x2, x1
    40002f40:	910200a5 	add	x5, x5, #0x80
    40002f44:	17ffffcf 	b	40002e80 <_free_r+0x90>
    40002f48:	d343fc42 	lsr	x2, x2, #3
    40002f4c:	d2800024 	mov	x4, #0x1                   	// #1
    40002f50:	11000441 	add	w1, w2, #0x1
    40002f54:	f9400405 	ldr	x5, [x0, #8]
    40002f58:	531f7821 	lsl	w1, w1, #1
    40002f5c:	13027c42 	asr	w2, w2, #2
    40002f60:	8b21cc01 	add	x1, x0, w1, sxtw #3
    40002f64:	9ac22082 	lsl	x2, x4, x2
    40002f68:	aa050042 	orr	x2, x2, x5
    40002f6c:	f9000402 	str	x2, [x0, #8]
    40002f70:	f85f0420 	ldr	x0, [x1], #-16
    40002f74:	a9010460 	stp	x0, x1, [x3, #16]
    40002f78:	f9000823 	str	x3, [x1, #16]
    40002f7c:	f9000c03 	str	x3, [x0, #24]
    40002f80:	aa1403e0 	mov	x0, x20
    40002f84:	a94153f3 	ldp	x19, x20, [sp, #16]
    40002f88:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40002f8c:	14000415 	b	40003fe0 <__malloc_unlock>
    40002f90:	b50009c6 	cbnz	x6, 400030c8 <_free_r+0x2d8>
    40002f94:	a9410085 	ldp	x5, x0, [x4, #16]
    40002f98:	8b020021 	add	x1, x1, x2
    40002f9c:	f9000ca0 	str	x0, [x5, #24]
    40002fa0:	b2400022 	orr	x2, x1, #0x1
    40002fa4:	f9000805 	str	x5, [x0, #16]
    40002fa8:	aa1403e0 	mov	x0, x20
    40002fac:	f9000462 	str	x2, [x3, #8]
    40002fb0:	f8216861 	str	x1, [x3, x1]
    40002fb4:	a94153f3 	ldp	x19, x20, [sp, #16]
    40002fb8:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40002fbc:	14000409 	b	40003fe0 <__malloc_unlock>
    40002fc0:	8b010041 	add	x1, x2, x1
    40002fc4:	370000e5 	tbnz	w5, #0, 40002fe0 <_free_r+0x1f0>
    40002fc8:	f85f0262 	ldur	x2, [x19, #-16]
    40002fcc:	cb020063 	sub	x3, x3, x2
    40002fd0:	8b020021 	add	x1, x1, x2
    40002fd4:	a9410864 	ldp	x4, x2, [x3, #16]
    40002fd8:	f9000c82 	str	x2, [x4, #24]
    40002fdc:	f9000844 	str	x4, [x2, #16]
    40002fe0:	b0000662 	adrp	x2, 400cf000 <impure_data+0x3d0>
    40002fe4:	b2400024 	orr	x4, x1, #0x1
    40002fe8:	f9000464 	str	x4, [x3, #8]
    40002fec:	f9444442 	ldr	x2, [x2, #2184]
    40002ff0:	f9000803 	str	x3, [x0, #16]
    40002ff4:	eb01005f 	cmp	x2, x1
    40002ff8:	54fffc48 	b.hi	40002f80 <_free_r+0x190>  // b.pmore
    40002ffc:	b0000401 	adrp	x1, 40083000 <ws+0x3a40>
    40003000:	aa1403e0 	mov	x0, x20
    40003004:	f9453c21 	ldr	x1, [x1, #2680]
    40003008:	97ffff36 	bl	40002ce0 <_malloc_trim_r>
    4000300c:	17ffffdd 	b	40002f80 <_free_r+0x190>
    40003010:	f100503f 	cmp	x1, #0x14
    40003014:	54000129 	b.ls	40003038 <_free_r+0x248>  // b.plast
    40003018:	f101503f 	cmp	x1, #0x54
    4000301c:	54000308 	b.hi	4000307c <_free_r+0x28c>  // b.pmore
    40003020:	d34cfc41 	lsr	x1, x2, #12
    40003024:	1101bc24 	add	w4, w1, #0x6f
    40003028:	1101b825 	add	w5, w1, #0x6e
    4000302c:	531f7884 	lsl	w4, w4, #1
    40003030:	937d7c84 	sbfiz	x4, x4, #3, #32
    40003034:	17ffffac 	b	40002ee4 <_free_r+0xf4>
    40003038:	11017024 	add	w4, w1, #0x5c
    4000303c:	11016c25 	add	w5, w1, #0x5b
    40003040:	531f7884 	lsl	w4, w4, #1
    40003044:	937d7c84 	sbfiz	x4, x4, #3, #32
    40003048:	17ffffa7 	b	40002ee4 <_free_r+0xf4>
    4000304c:	f9400406 	ldr	x6, [x0, #8]
    40003050:	13027ca5 	asr	w5, w5, #2
    40003054:	d2800022 	mov	x2, #0x1                   	// #1
    40003058:	9ac52045 	lsl	x5, x2, x5
    4000305c:	aa0600a5 	orr	x5, x5, x6
    40003060:	f9000405 	str	x5, [x0, #8]
    40003064:	17ffffad 	b	40002f18 <_free_r+0x128>
    40003068:	a9020c03 	stp	x3, x3, [x0, #32]
    4000306c:	a9009466 	stp	x6, x5, [x3, #8]
    40003070:	f9000c65 	str	x5, [x3, #24]
    40003074:	f8226862 	str	x2, [x3, x2]
    40003078:	17ffffc2 	b	40002f80 <_free_r+0x190>
    4000307c:	f105503f 	cmp	x1, #0x154
    40003080:	540000e8 	b.hi	4000309c <_free_r+0x2ac>  // b.pmore
    40003084:	d34ffc41 	lsr	x1, x2, #15
    40003088:	1101e024 	add	w4, w1, #0x78
    4000308c:	1101dc25 	add	w5, w1, #0x77
    40003090:	531f7884 	lsl	w4, w4, #1
    40003094:	937d7c84 	sbfiz	x4, x4, #3, #32
    40003098:	17ffff93 	b	40002ee4 <_free_r+0xf4>
    4000309c:	f115503f 	cmp	x1, #0x554
    400030a0:	540000e8 	b.hi	400030bc <_free_r+0x2cc>  // b.pmore
    400030a4:	d352fc41 	lsr	x1, x2, #18
    400030a8:	1101f424 	add	w4, w1, #0x7d
    400030ac:	1101f025 	add	w5, w1, #0x7c
    400030b0:	531f7884 	lsl	w4, w4, #1
    400030b4:	937d7c84 	sbfiz	x4, x4, #3, #32
    400030b8:	17ffff8b 	b	40002ee4 <_free_r+0xf4>
    400030bc:	d280fe04 	mov	x4, #0x7f0                 	// #2032
    400030c0:	52800fc5 	mov	w5, #0x7e                  	// #126
    400030c4:	17ffff88 	b	40002ee4 <_free_r+0xf4>
    400030c8:	b2400040 	orr	x0, x2, #0x1
    400030cc:	f9000460 	str	x0, [x3, #8]
    400030d0:	f9000082 	str	x2, [x4]
    400030d4:	17ffffab 	b	40002f80 <_free_r+0x190>
	...

00000000400030e0 <fscanf>:
    400030e0:	a9b07bfd 	stp	x29, x30, [sp, #-256]!
    400030e4:	f0000648 	adrp	x8, 400ce000 <z_interrupt_stacks+0x440>
    400030e8:	aa0003eb 	mov	x11, x0
    400030ec:	910003fd 	mov	x29, sp
    400030f0:	910343ec 	add	x12, sp, #0xd0
    400030f4:	910403ea 	add	x10, sp, #0x100
    400030f8:	f9461500 	ldr	x0, [x8, #3112]
    400030fc:	128005e9 	mov	w9, #0xffffffd0            	// #-48
    40003100:	12800fe8 	mov	w8, #0xffffff80            	// #-128
    40003104:	a9032bea 	stp	x10, x10, [sp, #48]
    40003108:	aa0103ea 	mov	x10, x1
    4000310c:	f90023ec 	str	x12, [sp, #64]
    40003110:	aa0b03e1 	mov	x1, x11
    40003114:	290923e9 	stp	w9, w8, [sp, #72]
    40003118:	a94337ec 	ldp	x12, x13, [sp, #48]
    4000311c:	a90137ec 	stp	x12, x13, [sp, #16]
    40003120:	a94427e8 	ldp	x8, x9, [sp, #64]
    40003124:	a90227e8 	stp	x8, x9, [sp, #32]
    40003128:	3d8017e0 	str	q0, [sp, #80]
    4000312c:	3d801be1 	str	q1, [sp, #96]
    40003130:	3d801fe2 	str	q2, [sp, #112]
    40003134:	3d8023e3 	str	q3, [sp, #128]
    40003138:	3d8027e4 	str	q4, [sp, #144]
    4000313c:	3d802be5 	str	q5, [sp, #160]
    40003140:	3d802fe6 	str	q6, [sp, #176]
    40003144:	3d8033e7 	str	q7, [sp, #192]
    40003148:	a90d0fe2 	stp	x2, x3, [sp, #208]
    4000314c:	910043e3 	add	x3, sp, #0x10
    40003150:	aa0a03e2 	mov	x2, x10
    40003154:	a90e17e4 	stp	x4, x5, [sp, #224]
    40003158:	a90f1fe6 	stp	x6, x7, [sp, #240]
    4000315c:	940013d5 	bl	400080b0 <_vfscanf_r>
    40003160:	a8d07bfd 	ldp	x29, x30, [sp], #256
    40003164:	d65f03c0 	ret
	...

0000000040003170 <_fseek_r>:
    40003170:	14000004 	b	40003180 <_fseeko_r>
	...

0000000040003180 <_fseeko_r>:
    40003180:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    40003184:	910003fd 	mov	x29, sp
    40003188:	a90153f3 	stp	x19, x20, [sp, #16]
    4000318c:	aa0103f3 	mov	x19, x1
    40003190:	aa0003f4 	mov	x20, x0
    40003194:	a9025bf5 	stp	x21, x22, [sp, #32]
    40003198:	2a0303f5 	mov	w21, w3
    4000319c:	a90363f7 	stp	x23, x24, [sp, #48]
    400031a0:	aa0203f7 	mov	x23, x2
    400031a4:	b4000060 	cbz	x0, 400031b0 <_fseeko_r+0x30>
    400031a8:	b9405001 	ldr	w1, [x0, #80]
    400031ac:	34000a41 	cbz	w1, 400032f4 <_fseeko_r+0x174>
    400031b0:	b940b261 	ldr	w1, [x19, #176]
    400031b4:	79402260 	ldrh	w0, [x19, #16]
    400031b8:	37000041 	tbnz	w1, #0, 400031c0 <_fseeko_r+0x40>
    400031bc:	36480a80 	tbz	w0, #9, 4000330c <_fseeko_r+0x18c>
    400031c0:	52802101 	mov	w1, #0x108                 	// #264
    400031c4:	0a010000 	and	w0, w0, w1
    400031c8:	6b01001f 	cmp	w0, w1
    400031cc:	54000980 	b.eq	400032fc <_fseeko_r+0x17c>  // b.none
    400031d0:	f9402678 	ldr	x24, [x19, #72]
    400031d4:	b4000c58 	cbz	x24, 4000335c <_fseeko_r+0x1dc>
    400031d8:	710006bf 	cmp	w21, #0x1
    400031dc:	54000200 	b.eq	4000321c <_fseeko_r+0x9c>  // b.none
    400031e0:	721e7abf 	tst	w21, #0xfffffffd
    400031e4:	540002c0 	b.eq	4000323c <_fseeko_r+0xbc>  // b.none
    400031e8:	b940b260 	ldr	w0, [x19, #176]
    400031ec:	528002c1 	mov	w1, #0x16                  	// #22
    400031f0:	b9000281 	str	w1, [x20]
    400031f4:	37000060 	tbnz	w0, #0, 40003200 <_fseeko_r+0x80>
    400031f8:	79402260 	ldrh	w0, [x19, #16]
    400031fc:	36480900 	tbz	w0, #9, 4000331c <_fseeko_r+0x19c>
    40003200:	12800016 	mov	w22, #0xffffffff            	// #-1
    40003204:	2a1603e0 	mov	w0, w22
    40003208:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000320c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40003210:	a94363f7 	ldp	x23, x24, [sp, #48]
    40003214:	a8c47bfd 	ldp	x29, x30, [sp], #64
    40003218:	d65f03c0 	ret
    4000321c:	aa1303e1 	mov	x1, x19
    40003220:	aa1403e0 	mov	x0, x20
    40003224:	9400005b 	bl	40003390 <_ftello_r>
    40003228:	aa0003f6 	mov	x22, x0
    4000322c:	b100041f 	cmn	x0, #0x1
    40003230:	54000a00 	b.eq	40003370 <_fseeko_r+0x1f0>  // b.none
    40003234:	8b0002f7 	add	x23, x23, x0
    40003238:	52800015 	mov	w21, #0x0                   	// #0
    4000323c:	f9400e60 	ldr	x0, [x19, #24]
    40003240:	b4000800 	cbz	x0, 40003340 <_fseeko_r+0x1c0>
    40003244:	aa1303e1 	mov	x1, x19
    40003248:	aa1403e0 	mov	x0, x20
    4000324c:	97fffd01 	bl	40002650 <_fflush_r>
    40003250:	2a0003f6 	mov	w22, w0
    40003254:	350007e0 	cbnz	w0, 40003350 <_fseeko_r+0x1d0>
    40003258:	f9401a61 	ldr	x1, [x19, #48]
    4000325c:	2a1503e3 	mov	w3, w21
    40003260:	aa1703e2 	mov	x2, x23
    40003264:	aa1403e0 	mov	x0, x20
    40003268:	d63f0300 	blr	x24
    4000326c:	b100041f 	cmn	x0, #0x1
    40003270:	54000700 	b.eq	40003350 <_fseeko_r+0x1d0>  // b.none
    40003274:	f9402e61 	ldr	x1, [x19, #88]
    40003278:	b40000e1 	cbz	x1, 40003294 <_fseeko_r+0x114>
    4000327c:	9101d260 	add	x0, x19, #0x74
    40003280:	eb00003f 	cmp	x1, x0
    40003284:	54000060 	b.eq	40003290 <_fseeko_r+0x110>  // b.none
    40003288:	aa1403e0 	mov	x0, x20
    4000328c:	97fffed9 	bl	40002df0 <_free_r>
    40003290:	f9002e7f 	str	xzr, [x19, #88]
    40003294:	79402260 	ldrh	w0, [x19, #16]
    40003298:	12810402 	mov	w2, #0xfffff7df            	// #-2081
    4000329c:	f9400e61 	ldr	x1, [x19, #24]
    400032a0:	0a020000 	and	w0, w0, w2
    400032a4:	f9000261 	str	x1, [x19]
    400032a8:	d2800102 	mov	x2, #0x8                   	// #8
    400032ac:	b9000a7f 	str	wzr, [x19, #8]
    400032b0:	52800001 	mov	w1, #0x0                   	// #0
    400032b4:	79002260 	strh	w0, [x19, #16]
    400032b8:	9102a260 	add	x0, x19, #0xa8
    400032bc:	97fff7a1 	bl	40001140 <memset>
    400032c0:	b940b260 	ldr	w0, [x19, #176]
    400032c4:	3707fa00 	tbnz	w0, #0, 40003204 <_fseeko_r+0x84>
    400032c8:	79402260 	ldrh	w0, [x19, #16]
    400032cc:	52800016 	mov	w22, #0x0                   	// #0
    400032d0:	374ff9a0 	tbnz	w0, #9, 40003204 <_fseeko_r+0x84>
    400032d4:	f9405260 	ldr	x0, [x19, #160]
    400032d8:	94006a22 	bl	4001db60 <__retarget_lock_release_recursive>
    400032dc:	2a1603e0 	mov	w0, w22
    400032e0:	a94153f3 	ldp	x19, x20, [sp, #16]
    400032e4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    400032e8:	a94363f7 	ldp	x23, x24, [sp, #48]
    400032ec:	a8c47bfd 	ldp	x29, x30, [sp], #64
    400032f0:	d65f03c0 	ret
    400032f4:	97fffd67 	bl	40002890 <__sinit>
    400032f8:	17ffffae 	b	400031b0 <_fseeko_r+0x30>
    400032fc:	aa1303e1 	mov	x1, x19
    40003300:	aa1403e0 	mov	x0, x20
    40003304:	97fffcd3 	bl	40002650 <_fflush_r>
    40003308:	17ffffb2 	b	400031d0 <_fseeko_r+0x50>
    4000330c:	f9405260 	ldr	x0, [x19, #160]
    40003310:	94006a12 	bl	4001db58 <__retarget_lock_acquire_recursive>
    40003314:	79402260 	ldrh	w0, [x19, #16]
    40003318:	17ffffaa 	b	400031c0 <_fseeko_r+0x40>
    4000331c:	f9405260 	ldr	x0, [x19, #160]
    40003320:	12800016 	mov	w22, #0xffffffff            	// #-1
    40003324:	94006a0f 	bl	4001db60 <__retarget_lock_release_recursive>
    40003328:	2a1603e0 	mov	w0, w22
    4000332c:	a94153f3 	ldp	x19, x20, [sp, #16]
    40003330:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40003334:	a94363f7 	ldp	x23, x24, [sp, #48]
    40003338:	a8c47bfd 	ldp	x29, x30, [sp], #64
    4000333c:	d65f03c0 	ret
    40003340:	aa1303e1 	mov	x1, x19
    40003344:	aa1403e0 	mov	x0, x20
    40003348:	940000c2 	bl	40003650 <__smakebuf_r>
    4000334c:	17ffffbe 	b	40003244 <_fseeko_r+0xc4>
    40003350:	b940b260 	ldr	w0, [x19, #176]
    40003354:	3607f520 	tbz	w0, #0, 400031f8 <_fseeko_r+0x78>
    40003358:	17ffffaa 	b	40003200 <_fseeko_r+0x80>
    4000335c:	b940b260 	ldr	w0, [x19, #176]
    40003360:	528003a1 	mov	w1, #0x1d                  	// #29
    40003364:	b9000281 	str	w1, [x20]
    40003368:	3607f480 	tbz	w0, #0, 400031f8 <_fseeko_r+0x78>
    4000336c:	17ffffa5 	b	40003200 <_fseeko_r+0x80>
    40003370:	b940b260 	ldr	w0, [x19, #176]
    40003374:	3707f460 	tbnz	w0, #0, 40003200 <_fseeko_r+0x80>
    40003378:	79402260 	ldrh	w0, [x19, #16]
    4000337c:	364ffac0 	tbz	w0, #9, 400032d4 <_fseeko_r+0x154>
    40003380:	12800016 	mov	w22, #0xffffffff            	// #-1
    40003384:	17ffffa0 	b	40003204 <_fseeko_r+0x84>
	...

0000000040003390 <_ftello_r>:
    40003390:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    40003394:	910003fd 	mov	x29, sp
    40003398:	a90153f3 	stp	x19, x20, [sp, #16]
    4000339c:	aa0103f3 	mov	x19, x1
    400033a0:	aa0003f4 	mov	x20, x0
    400033a4:	b4000060 	cbz	x0, 400033b0 <_ftello_r+0x20>
    400033a8:	b9405001 	ldr	w1, [x0, #80]
    400033ac:	340006e1 	cbz	w1, 40003488 <_ftello_r+0xf8>
    400033b0:	b940b260 	ldr	w0, [x19, #176]
    400033b4:	37000060 	tbnz	w0, #0, 400033c0 <_ftello_r+0x30>
    400033b8:	79402260 	ldrh	w0, [x19, #16]
    400033bc:	364806a0 	tbz	w0, #9, 40003490 <_ftello_r+0x100>
    400033c0:	f9402664 	ldr	x4, [x19, #72]
    400033c4:	b4000804 	cbz	x4, 400034c4 <_ftello_r+0x134>
    400033c8:	79402261 	ldrh	w1, [x19, #16]
    400033cc:	121e0420 	and	w0, w1, #0xc
    400033d0:	7100201f 	cmp	w0, #0x8
    400033d4:	54000440 	b.eq	4000345c <_ftello_r+0xcc>  // b.none
    400033d8:	37600301 	tbnz	w1, #12, 40003438 <_ftello_r+0xa8>
    400033dc:	f9401a61 	ldr	x1, [x19, #48]
    400033e0:	aa1403e0 	mov	x0, x20
    400033e4:	52800023 	mov	w3, #0x1                   	// #1
    400033e8:	d2800002 	mov	x2, #0x0                   	// #0
    400033ec:	d63f0080 	blr	x4
    400033f0:	aa0003f4 	mov	x20, x0
    400033f4:	b100041f 	cmn	x0, #0x1
    400033f8:	54000520 	b.eq	4000349c <_ftello_r+0x10c>  // b.none
    400033fc:	79402261 	ldrh	w1, [x19, #16]
    40003400:	36100201 	tbz	w1, #2, 40003440 <_ftello_r+0xb0>
    40003404:	f9402e60 	ldr	x0, [x19, #88]
    40003408:	b9800a62 	ldrsw	x2, [x19, #8]
    4000340c:	cb020294 	sub	x20, x20, x2
    40003410:	b4000060 	cbz	x0, 4000341c <_ftello_r+0x8c>
    40003414:	b9807260 	ldrsw	x0, [x19, #112]
    40003418:	cb000294 	sub	x20, x20, x0
    4000341c:	b940b260 	ldr	w0, [x19, #176]
    40003420:	37000040 	tbnz	w0, #0, 40003428 <_ftello_r+0x98>
    40003424:	36480441 	tbz	w1, #9, 400034ac <_ftello_r+0x11c>
    40003428:	aa1403e0 	mov	x0, x20
    4000342c:	a94153f3 	ldp	x19, x20, [sp, #16]
    40003430:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40003434:	d65f03c0 	ret
    40003438:	f9404a74 	ldr	x20, [x19, #144]
    4000343c:	3717fe41 	tbnz	w1, #2, 40003404 <_ftello_r+0x74>
    40003440:	361ffee1 	tbz	w1, #3, 4000341c <_ftello_r+0x8c>
    40003444:	f9400260 	ldr	x0, [x19]
    40003448:	b4fffea0 	cbz	x0, 4000341c <_ftello_r+0x8c>
    4000344c:	f9400e62 	ldr	x2, [x19, #24]
    40003450:	cb020000 	sub	x0, x0, x2
    40003454:	8b000294 	add	x20, x20, x0
    40003458:	17fffff1 	b	4000341c <_ftello_r+0x8c>
    4000345c:	f9400260 	ldr	x0, [x19]
    40003460:	b4fffbc0 	cbz	x0, 400033d8 <_ftello_r+0x48>
    40003464:	f9400e62 	ldr	x2, [x19, #24]
    40003468:	cb020000 	sub	x0, x0, x2
    4000346c:	f100001f 	cmp	x0, #0x0
    40003470:	54fffb4d 	b.le	400033d8 <_ftello_r+0x48>
    40003474:	3647fb21 	tbz	w1, #8, 400033d8 <_ftello_r+0x48>
    40003478:	aa1403e0 	mov	x0, x20
    4000347c:	52800043 	mov	w3, #0x2                   	// #2
    40003480:	f9401a61 	ldr	x1, [x19, #48]
    40003484:	17ffffd9 	b	400033e8 <_ftello_r+0x58>
    40003488:	97fffd02 	bl	40002890 <__sinit>
    4000348c:	17ffffc9 	b	400033b0 <_ftello_r+0x20>
    40003490:	f9405260 	ldr	x0, [x19, #160]
    40003494:	940069b1 	bl	4001db58 <__retarget_lock_acquire_recursive>
    40003498:	17ffffca 	b	400033c0 <_ftello_r+0x30>
    4000349c:	b940b260 	ldr	w0, [x19, #176]
    400034a0:	370001e0 	tbnz	w0, #0, 400034dc <_ftello_r+0x14c>
    400034a4:	79402260 	ldrh	w0, [x19, #16]
    400034a8:	374801a0 	tbnz	w0, #9, 400034dc <_ftello_r+0x14c>
    400034ac:	f9405260 	ldr	x0, [x19, #160]
    400034b0:	940069ac 	bl	4001db60 <__retarget_lock_release_recursive>
    400034b4:	aa1403e0 	mov	x0, x20
    400034b8:	a94153f3 	ldp	x19, x20, [sp, #16]
    400034bc:	a8c27bfd 	ldp	x29, x30, [sp], #32
    400034c0:	d65f03c0 	ret
    400034c4:	b940b260 	ldr	w0, [x19, #176]
    400034c8:	528003a1 	mov	w1, #0x1d                  	// #29
    400034cc:	b9000281 	str	w1, [x20]
    400034d0:	37000060 	tbnz	w0, #0, 400034dc <_ftello_r+0x14c>
    400034d4:	79402260 	ldrh	w0, [x19, #16]
    400034d8:	36480060 	tbz	w0, #9, 400034e4 <_ftello_r+0x154>
    400034dc:	92800014 	mov	x20, #0xffffffffffffffff    	// #-1
    400034e0:	17ffffd2 	b	40003428 <_ftello_r+0x98>
    400034e4:	f9405260 	ldr	x0, [x19, #160]
    400034e8:	92800014 	mov	x20, #0xffffffffffffffff    	// #-1
    400034ec:	9400699d 	bl	4001db60 <__retarget_lock_release_recursive>
    400034f0:	17ffffce 	b	40003428 <_ftello_r+0x98>
	...

0000000040003500 <_fwalk>:
    40003500:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    40003504:	910003fd 	mov	x29, sp
    40003508:	a9025bf5 	stp	x21, x22, [sp, #32]
    4000350c:	91080015 	add	x21, x0, #0x200
    40003510:	aa0103f6 	mov	x22, x1
    40003514:	a90153f3 	stp	x19, x20, [sp, #16]
    40003518:	f9001bf7 	str	x23, [sp, #48]
    4000351c:	52800017 	mov	w23, #0x0                   	// #0
    40003520:	b9400aa0 	ldr	w0, [x21, #8]
    40003524:	f9400ab3 	ldr	x19, [x21, #16]
    40003528:	7100001f 	cmp	w0, #0x0
    4000352c:	5400026d 	b.le	40003578 <_fwalk+0x78>
    40003530:	51000400 	sub	w0, w0, #0x1
    40003534:	91000400 	add	x0, x0, #0x1
    40003538:	8b000414 	add	x20, x0, x0, lsl #1
    4000353c:	d37df294 	lsl	x20, x20, #3
    40003540:	cb000294 	sub	x20, x20, x0
    40003544:	8b140e74 	add	x20, x19, x20, lsl #3
    40003548:	79402260 	ldrh	w0, [x19, #16]
    4000354c:	7100041f 	cmp	w0, #0x1
    40003550:	540000e9 	b.ls	4000356c <_fwalk+0x6c>  // b.plast
    40003554:	79c02662 	ldrsh	w2, [x19, #18]
    40003558:	aa1303e0 	mov	x0, x19
    4000355c:	3100045f 	cmn	w2, #0x1
    40003560:	54000060 	b.eq	4000356c <_fwalk+0x6c>  // b.none
    40003564:	d63f02c0 	blr	x22
    40003568:	2a0002f7 	orr	w23, w23, w0
    4000356c:	9102e273 	add	x19, x19, #0xb8
    40003570:	eb13029f 	cmp	x20, x19
    40003574:	54fffea1 	b.ne	40003548 <_fwalk+0x48>  // b.any
    40003578:	f94002b5 	ldr	x21, [x21]
    4000357c:	b5fffd35 	cbnz	x21, 40003520 <_fwalk+0x20>
    40003580:	2a1703e0 	mov	w0, w23
    40003584:	a94153f3 	ldp	x19, x20, [sp, #16]
    40003588:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4000358c:	f9401bf7 	ldr	x23, [sp, #48]
    40003590:	a8c47bfd 	ldp	x29, x30, [sp], #64
    40003594:	d65f03c0 	ret
	...

00000000400035a0 <_fwalk_reent>:
    400035a0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    400035a4:	910003fd 	mov	x29, sp
    400035a8:	a9025bf5 	stp	x21, x22, [sp, #32]
    400035ac:	aa0103f6 	mov	x22, x1
    400035b0:	91080015 	add	x21, x0, #0x200
    400035b4:	a90363f7 	stp	x23, x24, [sp, #48]
    400035b8:	aa0003f8 	mov	x24, x0
    400035bc:	52800017 	mov	w23, #0x0                   	// #0
    400035c0:	a90153f3 	stp	x19, x20, [sp, #16]
    400035c4:	d503201f 	nop
    400035c8:	b9400aa2 	ldr	w2, [x21, #8]
    400035cc:	f9400ab3 	ldr	x19, [x21, #16]
    400035d0:	7100005f 	cmp	w2, #0x0
    400035d4:	5400028d 	b.le	40003624 <_fwalk_reent+0x84>
    400035d8:	51000442 	sub	w2, w2, #0x1
    400035dc:	91000442 	add	x2, x2, #0x1
    400035e0:	8b020454 	add	x20, x2, x2, lsl #1
    400035e4:	d37df294 	lsl	x20, x20, #3
    400035e8:	cb020294 	sub	x20, x20, x2
    400035ec:	8b140e74 	add	x20, x19, x20, lsl #3
    400035f0:	79402262 	ldrh	w2, [x19, #16]
    400035f4:	7100045f 	cmp	w2, #0x1
    400035f8:	54000109 	b.ls	40003618 <_fwalk_reent+0x78>  // b.plast
    400035fc:	79c02662 	ldrsh	w2, [x19, #18]
    40003600:	aa1303e1 	mov	x1, x19
    40003604:	aa1803e0 	mov	x0, x24
    40003608:	3100045f 	cmn	w2, #0x1
    4000360c:	54000060 	b.eq	40003618 <_fwalk_reent+0x78>  // b.none
    40003610:	d63f02c0 	blr	x22
    40003614:	2a0002f7 	orr	w23, w23, w0
    40003618:	9102e273 	add	x19, x19, #0xb8
    4000361c:	eb13029f 	cmp	x20, x19
    40003620:	54fffe81 	b.ne	400035f0 <_fwalk_reent+0x50>  // b.any
    40003624:	f94002b5 	ldr	x21, [x21]
    40003628:	b5fffd15 	cbnz	x21, 400035c8 <_fwalk_reent+0x28>
    4000362c:	2a1703e0 	mov	w0, w23
    40003630:	a94153f3 	ldp	x19, x20, [sp, #16]
    40003634:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40003638:	a94363f7 	ldp	x23, x24, [sp, #48]
    4000363c:	a8c47bfd 	ldp	x29, x30, [sp], #64
    40003640:	d65f03c0 	ret
	...

0000000040003650 <__smakebuf_r>:
    40003650:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
    40003654:	910003fd 	mov	x29, sp
    40003658:	79402022 	ldrh	w2, [x1, #16]
    4000365c:	a90153f3 	stp	x19, x20, [sp, #16]
    40003660:	aa0103f3 	mov	x19, x1
    40003664:	36080122 	tbz	w2, #1, 40003688 <__smakebuf_r+0x38>
    40003668:	9101dc20 	add	x0, x1, #0x77
    4000366c:	52800021 	mov	w1, #0x1                   	// #1
    40003670:	f9000260 	str	x0, [x19]
    40003674:	f9000e60 	str	x0, [x19, #24]
    40003678:	b9002261 	str	w1, [x19, #32]
    4000367c:	a94153f3 	ldp	x19, x20, [sp, #16]
    40003680:	a8ca7bfd 	ldp	x29, x30, [sp], #160
    40003684:	d65f03c0 	ret
    40003688:	79c02421 	ldrsh	w1, [x1, #18]
    4000368c:	aa0003f4 	mov	x20, x0
    40003690:	a9025bf5 	stp	x21, x22, [sp, #32]
    40003694:	37f80381 	tbnz	w1, #31, 40003704 <__smakebuf_r+0xb4>
    40003698:	9100e3e2 	add	x2, sp, #0x38
    4000369c:	94001901 	bl	40009aa0 <_fstat_r>
    400036a0:	37f80300 	tbnz	w0, #31, 40003700 <__smakebuf_r+0xb0>
    400036a4:	b9403fe0 	ldr	w0, [sp, #60]
    400036a8:	d2808015 	mov	x21, #0x400                 	// #1024
    400036ac:	aa1503e1 	mov	x1, x21
    400036b0:	12140c00 	and	w0, w0, #0xf000
    400036b4:	7140081f 	cmp	w0, #0x2, lsl #12
    400036b8:	aa1403e0 	mov	x0, x20
    400036bc:	1a9f17f6 	cset	w22, eq  // eq = none
    400036c0:	94000038 	bl	400037a0 <_malloc_r>
    400036c4:	b4000320 	cbz	x0, 40003728 <__smakebuf_r+0xd8>
    400036c8:	79402261 	ldrh	w1, [x19, #16]
    400036cc:	f0ffffe2 	adrp	x2, 40002000 <pow+0x300>
    400036d0:	91220042 	add	x2, x2, #0x880
    400036d4:	f9002e82 	str	x2, [x20, #88]
    400036d8:	32190021 	orr	w1, w1, #0x80
    400036dc:	f9000260 	str	x0, [x19]
    400036e0:	79002261 	strh	w1, [x19, #16]
    400036e4:	f9000e60 	str	x0, [x19, #24]
    400036e8:	b9002275 	str	w21, [x19, #32]
    400036ec:	35000376 	cbnz	w22, 40003758 <__smakebuf_r+0x108>
    400036f0:	a94153f3 	ldp	x19, x20, [sp, #16]
    400036f4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    400036f8:	a8ca7bfd 	ldp	x29, x30, [sp], #160
    400036fc:	d65f03c0 	ret
    40003700:	79402262 	ldrh	w2, [x19, #16]
    40003704:	f279005f 	tst	x2, #0x80
    40003708:	d2808001 	mov	x1, #0x400                 	// #1024
    4000370c:	d2800815 	mov	x21, #0x40                  	// #64
    40003710:	9a8112b5 	csel	x21, x21, x1, ne  // ne = any
    40003714:	aa1503e1 	mov	x1, x21
    40003718:	aa1403e0 	mov	x0, x20
    4000371c:	52800016 	mov	w22, #0x0                   	// #0
    40003720:	94000020 	bl	400037a0 <_malloc_r>
    40003724:	b5fffd20 	cbnz	x0, 400036c8 <__smakebuf_r+0x78>
    40003728:	79c02260 	ldrsh	w0, [x19, #16]
    4000372c:	374ffe20 	tbnz	w0, #9, 400036f0 <__smakebuf_r+0xa0>
    40003730:	121e7400 	and	w0, w0, #0xfffffffc
    40003734:	9101de61 	add	x1, x19, #0x77
    40003738:	321f0000 	orr	w0, w0, #0x2
    4000373c:	52800022 	mov	w2, #0x1                   	// #1
    40003740:	79002260 	strh	w0, [x19, #16]
    40003744:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40003748:	f9000261 	str	x1, [x19]
    4000374c:	f9000e61 	str	x1, [x19, #24]
    40003750:	b9002262 	str	w2, [x19, #32]
    40003754:	17ffffca 	b	4000367c <__smakebuf_r+0x2c>
    40003758:	79c02661 	ldrsh	w1, [x19, #18]
    4000375c:	aa1403e0 	mov	x0, x20
    40003760:	940018f8 	bl	40009b40 <_isatty_r>
    40003764:	34fffc60 	cbz	w0, 400036f0 <__smakebuf_r+0xa0>
    40003768:	79402260 	ldrh	w0, [x19, #16]
    4000376c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40003770:	121e7400 	and	w0, w0, #0xfffffffc
    40003774:	32000000 	orr	w0, w0, #0x1
    40003778:	79002260 	strh	w0, [x19, #16]
    4000377c:	17ffffc0 	b	4000367c <__smakebuf_r+0x2c>

0000000040003780 <malloc>:
    40003780:	f0000642 	adrp	x2, 400ce000 <z_interrupt_stacks+0x440>
    40003784:	aa0003e1 	mov	x1, x0
    40003788:	f9461440 	ldr	x0, [x2, #3112]
    4000378c:	14000005 	b	400037a0 <_malloc_r>

0000000040003790 <free>:
    40003790:	f0000642 	adrp	x2, 400ce000 <z_interrupt_stacks+0x440>
    40003794:	aa0003e1 	mov	x1, x0
    40003798:	f9461440 	ldr	x0, [x2, #3112]
    4000379c:	17fffd95 	b	40002df0 <_free_r>

00000000400037a0 <_malloc_r>:
    400037a0:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    400037a4:	910003fd 	mov	x29, sp
    400037a8:	a90153f3 	stp	x19, x20, [sp, #16]
    400037ac:	91005c33 	add	x19, x1, #0x17
    400037b0:	a9025bf5 	stp	x21, x22, [sp, #32]
    400037b4:	aa0003f5 	mov	x21, x0
    400037b8:	a90363f7 	stp	x23, x24, [sp, #48]
    400037bc:	f100ba7f 	cmp	x19, #0x2e
    400037c0:	54000c88 	b.hi	40003950 <_malloc_r+0x1b0>  // b.pmore
    400037c4:	f100803f 	cmp	x1, #0x20
    400037c8:	54002068 	b.hi	40003bd4 <_malloc_r+0x434>  // b.pmore
    400037cc:	94000201 	bl	40003fd0 <__malloc_lock>
    400037d0:	d2800413 	mov	x19, #0x20                  	// #32
    400037d4:	d2800a00 	mov	x0, #0x50                  	// #80
    400037d8:	52800085 	mov	w5, #0x4                   	// #4
    400037dc:	90000674 	adrp	x20, 400cf000 <impure_data+0x3d0>
    400037e0:	9101c294 	add	x20, x20, #0x70
    400037e4:	8b000280 	add	x0, x20, x0
    400037e8:	110008a5 	add	w5, w5, #0x2
    400037ec:	d1004000 	sub	x0, x0, #0x10
    400037f0:	f9400c01 	ldr	x1, [x0, #24]
    400037f4:	eb00003f 	cmp	x1, x0
    400037f8:	54002181 	b.ne	40003c28 <_malloc_r+0x488>  // b.any
    400037fc:	f9401284 	ldr	x4, [x20, #32]
    40003800:	91004282 	add	x2, x20, #0x10
    40003804:	eb02009f 	cmp	x4, x2
    40003808:	54000f20 	b.eq	400039ec <_malloc_r+0x24c>  // b.none
    4000380c:	f9400481 	ldr	x1, [x4, #8]
    40003810:	927ef421 	and	x1, x1, #0xfffffffffffffffc
    40003814:	cb130023 	sub	x3, x1, x19
    40003818:	f1007c7f 	cmp	x3, #0x1f
    4000381c:	54002d4c 	b.gt	40003dc4 <_malloc_r+0x624>
    40003820:	a9020a82 	stp	x2, x2, [x20, #32]
    40003824:	b6f81f23 	tbz	x3, #63, 40003c08 <_malloc_r+0x468>
    40003828:	f107fc3f 	cmp	x1, #0x1ff
    4000382c:	54002428 	b.hi	40003cb0 <_malloc_r+0x510>  // b.pmore
    40003830:	d343fc22 	lsr	x2, x1, #3
    40003834:	d2800021 	mov	x1, #0x1                   	// #1
    40003838:	11000440 	add	w0, w2, #0x1
    4000383c:	13027c42 	asr	w2, w2, #2
    40003840:	531f7800 	lsl	w0, w0, #1
    40003844:	f9400683 	ldr	x3, [x20, #8]
    40003848:	8b20ce80 	add	x0, x20, w0, sxtw #3
    4000384c:	9ac22021 	lsl	x1, x1, x2
    40003850:	aa030021 	orr	x1, x1, x3
    40003854:	f85f0402 	ldr	x2, [x0], #-16
    40003858:	f9000681 	str	x1, [x20, #8]
    4000385c:	a9010082 	stp	x2, x0, [x4, #16]
    40003860:	f9000804 	str	x4, [x0, #16]
    40003864:	f9000c44 	str	x4, [x2, #24]
    40003868:	13027ca2 	asr	w2, w5, #2
    4000386c:	d2800020 	mov	x0, #0x1                   	// #1
    40003870:	9ac22000 	lsl	x0, x0, x2
    40003874:	eb01001f 	cmp	x0, x1
    40003878:	54000c68 	b.hi	40003a04 <_malloc_r+0x264>  // b.pmore
    4000387c:	ea01001f 	tst	x0, x1
    40003880:	540000c1 	b.ne	40003898 <_malloc_r+0xf8>  // b.any
    40003884:	121e74a5 	and	w5, w5, #0xfffffffc
    40003888:	d37ff800 	lsl	x0, x0, #1
    4000388c:	110010a5 	add	w5, w5, #0x4
    40003890:	ea01001f 	tst	x0, x1
    40003894:	54ffffa0 	b.eq	40003888 <_malloc_r+0xe8>  // b.none
    40003898:	928001e9 	mov	x9, #0xfffffffffffffff0    	// #-16
    4000389c:	110004a7 	add	w7, w5, #0x1
    400038a0:	2a0503e8 	mov	w8, w5
    400038a4:	531f78e7 	lsl	w7, w7, #1
    400038a8:	8b27cd27 	add	x7, x9, w7, sxtw #3
    400038ac:	8b070287 	add	x7, x20, x7
    400038b0:	aa0703e4 	mov	x4, x7
    400038b4:	f9400c81 	ldr	x1, [x4, #24]
    400038b8:	14000009 	b	400038dc <_malloc_r+0x13c>
    400038bc:	f9400422 	ldr	x2, [x1, #8]
    400038c0:	aa0103e6 	mov	x6, x1
    400038c4:	f9400c21 	ldr	x1, [x1, #24]
    400038c8:	927ef442 	and	x2, x2, #0xfffffffffffffffc
    400038cc:	cb130043 	sub	x3, x2, x19
    400038d0:	f1007c7f 	cmp	x3, #0x1f
    400038d4:	5400238c 	b.gt	40003d44 <_malloc_r+0x5a4>
    400038d8:	b6f82563 	tbz	x3, #63, 40003d84 <_malloc_r+0x5e4>
    400038dc:	eb01009f 	cmp	x4, x1
    400038e0:	54fffee1 	b.ne	400038bc <_malloc_r+0x11c>  // b.any
    400038e4:	7100f91f 	cmp	w8, #0x3e
    400038e8:	540029cd 	b.le	40003e20 <_malloc_r+0x680>
    400038ec:	91004084 	add	x4, x4, #0x10
    400038f0:	11000508 	add	w8, w8, #0x1
    400038f4:	f240051f 	tst	x8, #0x3
    400038f8:	54fffde1 	b.ne	400038b4 <_malloc_r+0x114>  // b.any
    400038fc:	14000005 	b	40003910 <_malloc_r+0x170>
    40003900:	f85f04e1 	ldr	x1, [x7], #-16
    40003904:	510004a5 	sub	w5, w5, #0x1
    40003908:	eb07003f 	cmp	x1, x7
    4000390c:	540035a1 	b.ne	40003fc0 <_malloc_r+0x820>  // b.any
    40003910:	f24004bf 	tst	x5, #0x3
    40003914:	54ffff61 	b.ne	40003900 <_malloc_r+0x160>  // b.any
    40003918:	f9400681 	ldr	x1, [x20, #8]
    4000391c:	8a200021 	bic	x1, x1, x0
    40003920:	f9000681 	str	x1, [x20, #8]
    40003924:	d37ff800 	lsl	x0, x0, #1
    40003928:	f100001f 	cmp	x0, #0x0
    4000392c:	fa411002 	ccmp	x0, x1, #0x2, ne  // ne = any
    40003930:	54000089 	b.ls	40003940 <_malloc_r+0x1a0>  // b.plast
    40003934:	14000034 	b	40003a04 <_malloc_r+0x264>
    40003938:	d37ff800 	lsl	x0, x0, #1
    4000393c:	11001108 	add	w8, w8, #0x4
    40003940:	ea01001f 	tst	x0, x1
    40003944:	54ffffa0 	b.eq	40003938 <_malloc_r+0x198>  // b.none
    40003948:	2a0803e5 	mov	w5, w8
    4000394c:	17ffffd4 	b	4000389c <_malloc_r+0xfc>
    40003950:	927cee73 	and	x19, x19, #0xfffffffffffffff0
    40003954:	b2407be2 	mov	x2, #0x7fffffff            	// #2147483647
    40003958:	eb02027f 	cmp	x19, x2
    4000395c:	fa539022 	ccmp	x1, x19, #0x2, ls  // ls = plast
    40003960:	540013a8 	b.hi	40003bd4 <_malloc_r+0x434>  // b.pmore
    40003964:	9400019b 	bl	40003fd0 <__malloc_lock>
    40003968:	f107de7f 	cmp	x19, #0x1f7
    4000396c:	54002229 	b.ls	40003db0 <_malloc_r+0x610>  // b.plast
    40003970:	d349fe60 	lsr	x0, x19, #9
    40003974:	b4001420 	cbz	x0, 40003bf8 <_malloc_r+0x458>
    40003978:	f100101f 	cmp	x0, #0x4
    4000397c:	54001d08 	b.hi	40003d1c <_malloc_r+0x57c>  // b.pmore
    40003980:	d346fe60 	lsr	x0, x19, #6
    40003984:	1100e405 	add	w5, w0, #0x39
    40003988:	1100e000 	add	w0, w0, #0x38
    4000398c:	531f78a4 	lsl	w4, w5, #1
    40003990:	937d7c84 	sbfiz	x4, x4, #3, #32
    40003994:	90000674 	adrp	x20, 400cf000 <impure_data+0x3d0>
    40003998:	9101c294 	add	x20, x20, #0x70
    4000399c:	8b040284 	add	x4, x20, x4
    400039a0:	d1004084 	sub	x4, x4, #0x10
    400039a4:	f9400c81 	ldr	x1, [x4, #24]
    400039a8:	eb01009f 	cmp	x4, x1
    400039ac:	540000c1 	b.ne	400039c4 <_malloc_r+0x224>  // b.any
    400039b0:	17ffff93 	b	400037fc <_malloc_r+0x5c>
    400039b4:	b6f815e3 	tbz	x3, #63, 40003c70 <_malloc_r+0x4d0>
    400039b8:	f9400c21 	ldr	x1, [x1, #24]
    400039bc:	eb01009f 	cmp	x4, x1
    400039c0:	54fff1e0 	b.eq	400037fc <_malloc_r+0x5c>  // b.none
    400039c4:	f9400422 	ldr	x2, [x1, #8]
    400039c8:	927ef442 	and	x2, x2, #0xfffffffffffffffc
    400039cc:	cb130043 	sub	x3, x2, x19
    400039d0:	f1007c7f 	cmp	x3, #0x1f
    400039d4:	54ffff0d 	b.le	400039b4 <_malloc_r+0x214>
    400039d8:	f9401284 	ldr	x4, [x20, #32]
    400039dc:	91004282 	add	x2, x20, #0x10
    400039e0:	2a0003e5 	mov	w5, w0
    400039e4:	eb02009f 	cmp	x4, x2
    400039e8:	54fff121 	b.ne	4000380c <_malloc_r+0x6c>  // b.any
    400039ec:	f9400681 	ldr	x1, [x20, #8]
    400039f0:	13027ca2 	asr	w2, w5, #2
    400039f4:	d2800020 	mov	x0, #0x1                   	// #1
    400039f8:	9ac22000 	lsl	x0, x0, x2
    400039fc:	eb01001f 	cmp	x0, x1
    40003a00:	54fff3e9 	b.ls	4000387c <_malloc_r+0xdc>  // b.plast
    40003a04:	f9400a97 	ldr	x23, [x20, #16]
    40003a08:	f94006f6 	ldr	x22, [x23, #8]
    40003a0c:	927ef6d8 	and	x24, x22, #0xfffffffffffffffc
    40003a10:	eb18027f 	cmp	x19, x24
    40003a14:	cb130300 	sub	x0, x24, x19
    40003a18:	fa5f9804 	ccmp	x0, #0x1f, #0x4, ls  // ls = plast
    40003a1c:	54000bec 	b.gt	40003b98 <_malloc_r+0x3f8>
    40003a20:	90000401 	adrp	x1, 40083000 <ws+0x3a40>
    40003a24:	a90573fb 	stp	x27, x28, [sp, #80]
    40003a28:	9000067b 	adrp	x27, 400cf000 <impure_data+0x3d0>
    40003a2c:	f9453c21 	ldr	x1, [x1, #2680]
    40003a30:	d28203e3 	mov	x3, #0x101f                	// #4127
    40003a34:	f9444362 	ldr	x2, [x27, #2176]
    40003a38:	8b010261 	add	x1, x19, x1
    40003a3c:	8b030036 	add	x22, x1, x3
    40003a40:	91008021 	add	x1, x1, #0x20
    40003a44:	b100045f 	cmn	x2, #0x1
    40003a48:	9274ced6 	and	x22, x22, #0xfffffffffffff000
    40003a4c:	9a8112d6 	csel	x22, x22, x1, ne  // ne = any
    40003a50:	aa1503e0 	mov	x0, x21
    40003a54:	aa1603e1 	mov	x1, x22
    40003a58:	a9046bf9 	stp	x25, x26, [sp, #64]
    40003a5c:	940001bd 	bl	40004150 <_sbrk_r>
    40003a60:	8b1802fa 	add	x26, x23, x24
    40003a64:	aa0003f9 	mov	x25, x0
    40003a68:	b100041f 	cmn	x0, #0x1
    40003a6c:	54001f20 	b.eq	40003e50 <_malloc_r+0x6b0>  // b.none
    40003a70:	eb00035f 	cmp	x26, x0
    40003a74:	fa5482e4 	ccmp	x23, x20, #0x4, hi  // hi = pmore
    40003a78:	54001ec1 	b.ne	40003e50 <_malloc_r+0x6b0>  // b.any
    40003a7c:	9000041c 	adrp	x28, 40083000 <ws+0x3a40>
    40003a80:	b94a4381 	ldr	w1, [x28, #2624]
    40003a84:	0b160021 	add	w1, w1, w22
    40003a88:	b90a4381 	str	w1, [x28, #2624]
    40003a8c:	eb00035f 	cmp	x26, x0
    40003a90:	54001ce0 	b.eq	40003e2c <_malloc_r+0x68c>  // b.none
    40003a94:	f9444360 	ldr	x0, [x27, #2176]
    40003a98:	b100041f 	cmn	x0, #0x1
    40003a9c:	54001d60 	b.eq	40003e48 <_malloc_r+0x6a8>  // b.none
    40003aa0:	cb1a033a 	sub	x26, x25, x26
    40003aa4:	0b1a0021 	add	w1, w1, w26
    40003aa8:	b90a4381 	str	w1, [x28, #2624]
    40003aac:	f2400f3a 	ands	x26, x25, #0xf
    40003ab0:	54001e40 	b.eq	40003e78 <_malloc_r+0x6d8>  // b.none
    40003ab4:	cb1a0339 	sub	x25, x25, x26
    40003ab8:	d2820201 	mov	x1, #0x1010                	// #4112
    40003abc:	91004339 	add	x25, x25, #0x10
    40003ac0:	cb1a0021 	sub	x1, x1, x26
    40003ac4:	8b16033b 	add	x27, x25, x22
    40003ac8:	aa1503e0 	mov	x0, x21
    40003acc:	cb1b0036 	sub	x22, x1, x27
    40003ad0:	92402ed6 	and	x22, x22, #0xfff
    40003ad4:	aa1603e1 	mov	x1, x22
    40003ad8:	9400019e 	bl	40004150 <_sbrk_r>
    40003adc:	b100041f 	cmn	x0, #0x1
    40003ae0:	54002480 	b.eq	40003f70 <_malloc_r+0x7d0>  // b.none
    40003ae4:	cb190000 	sub	x0, x0, x25
    40003ae8:	2a1603e2 	mov	w2, w22
    40003aec:	8b160016 	add	x22, x0, x22
    40003af0:	b94a4381 	ldr	w1, [x28, #2624]
    40003af4:	b24002d6 	orr	x22, x22, #0x1
    40003af8:	f9000a99 	str	x25, [x20, #16]
    40003afc:	0b010041 	add	w1, w2, w1
    40003b00:	b90a4381 	str	w1, [x28, #2624]
    40003b04:	f9000736 	str	x22, [x25, #8]
    40003b08:	eb1402ff 	cmp	x23, x20
    40003b0c:	54002000 	b.eq	40003f0c <_malloc_r+0x76c>  // b.none
    40003b10:	f1007f1f 	cmp	x24, #0x1f
    40003b14:	54001cc9 	b.ls	40003eac <_malloc_r+0x70c>  // b.plast
    40003b18:	d1006300 	sub	x0, x24, #0x18
    40003b1c:	d2800124 	mov	x4, #0x9                   	// #9
    40003b20:	f94006e2 	ldr	x2, [x23, #8]
    40003b24:	927cec00 	and	x0, x0, #0xfffffffffffffff0
    40003b28:	8b0002e3 	add	x3, x23, x0
    40003b2c:	92400042 	and	x2, x2, #0x1
    40003b30:	aa000042 	orr	x2, x2, x0
    40003b34:	f90006e2 	str	x2, [x23, #8]
    40003b38:	f8008c64 	str	x4, [x3, #8]!
    40003b3c:	f9000464 	str	x4, [x3, #8]
    40003b40:	f1007c1f 	cmp	x0, #0x1f
    40003b44:	54002088 	b.hi	40003f54 <_malloc_r+0x7b4>  // b.pmore
    40003b48:	f9400736 	ldr	x22, [x25, #8]
    40003b4c:	aa1903f7 	mov	x23, x25
    40003b50:	90000400 	adrp	x0, 40083000 <ws+0x3a40>
    40003b54:	93407c21 	sxtw	x1, w1
    40003b58:	f9453402 	ldr	x2, [x0, #2664]
    40003b5c:	eb02003f 	cmp	x1, x2
    40003b60:	54000049 	b.ls	40003b68 <_malloc_r+0x3c8>  // b.plast
    40003b64:	f9053401 	str	x1, [x0, #2664]
    40003b68:	90000400 	adrp	x0, 40083000 <ws+0x3a40>
    40003b6c:	f9453802 	ldr	x2, [x0, #2672]
    40003b70:	eb02003f 	cmp	x1, x2
    40003b74:	54000049 	b.ls	40003b7c <_malloc_r+0x3dc>  // b.plast
    40003b78:	f9053801 	str	x1, [x0, #2672]
    40003b7c:	927ef6c0 	and	x0, x22, #0xfffffffffffffffc
    40003b80:	eb00027f 	cmp	x19, x0
    40003b84:	cb130000 	sub	x0, x0, x19
    40003b88:	fa5f9804 	ccmp	x0, #0x1f, #0x4, ls  // ls = plast
    40003b8c:	5400194d 	b.le	40003eb4 <_malloc_r+0x714>
    40003b90:	a9446bf9 	ldp	x25, x26, [sp, #64]
    40003b94:	a94573fb 	ldp	x27, x28, [sp, #80]
    40003b98:	8b1302e2 	add	x2, x23, x19
    40003b9c:	b2400273 	orr	x19, x19, #0x1
    40003ba0:	f90006f3 	str	x19, [x23, #8]
    40003ba4:	b2400001 	orr	x1, x0, #0x1
    40003ba8:	f9000a82 	str	x2, [x20, #16]
    40003bac:	f9000441 	str	x1, [x2, #8]
    40003bb0:	aa1503e0 	mov	x0, x21
    40003bb4:	910042f7 	add	x23, x23, #0x10
    40003bb8:	9400010a 	bl	40003fe0 <__malloc_unlock>
    40003bbc:	aa1703e0 	mov	x0, x23
    40003bc0:	a94153f3 	ldp	x19, x20, [sp, #16]
    40003bc4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40003bc8:	a94363f7 	ldp	x23, x24, [sp, #48]
    40003bcc:	a8c67bfd 	ldp	x29, x30, [sp], #96
    40003bd0:	d65f03c0 	ret
    40003bd4:	52800180 	mov	w0, #0xc                   	// #12
    40003bd8:	d2800017 	mov	x23, #0x0                   	// #0
    40003bdc:	b90002a0 	str	w0, [x21]
    40003be0:	aa1703e0 	mov	x0, x23
    40003be4:	a94153f3 	ldp	x19, x20, [sp, #16]
    40003be8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40003bec:	a94363f7 	ldp	x23, x24, [sp, #48]
    40003bf0:	a8c67bfd 	ldp	x29, x30, [sp], #96
    40003bf4:	d65f03c0 	ret
    40003bf8:	d2808004 	mov	x4, #0x400                 	// #1024
    40003bfc:	52800805 	mov	w5, #0x40                  	// #64
    40003c00:	528007e0 	mov	w0, #0x3f                  	// #63
    40003c04:	17ffff64 	b	40003994 <_malloc_r+0x1f4>
    40003c08:	8b010081 	add	x1, x4, x1
    40003c0c:	aa1503e0 	mov	x0, x21
    40003c10:	91004097 	add	x23, x4, #0x10
    40003c14:	f9400422 	ldr	x2, [x1, #8]
    40003c18:	b2400042 	orr	x2, x2, #0x1
    40003c1c:	f9000422 	str	x2, [x1, #8]
    40003c20:	940000f0 	bl	40003fe0 <__malloc_unlock>
    40003c24:	17ffffef 	b	40003be0 <_malloc_r+0x440>
    40003c28:	a9409022 	ldp	x2, x4, [x1, #8]
    40003c2c:	91004037 	add	x23, x1, #0x10
    40003c30:	f9400c23 	ldr	x3, [x1, #24]
    40003c34:	aa1503e0 	mov	x0, x21
    40003c38:	927ef442 	and	x2, x2, #0xfffffffffffffffc
    40003c3c:	8b020022 	add	x2, x1, x2
    40003c40:	f9400441 	ldr	x1, [x2, #8]
    40003c44:	f9000c83 	str	x3, [x4, #24]
    40003c48:	f9000864 	str	x4, [x3, #16]
    40003c4c:	b2400021 	orr	x1, x1, #0x1
    40003c50:	f9000441 	str	x1, [x2, #8]
    40003c54:	940000e3 	bl	40003fe0 <__malloc_unlock>
    40003c58:	aa1703e0 	mov	x0, x23
    40003c5c:	a94153f3 	ldp	x19, x20, [sp, #16]
    40003c60:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40003c64:	a94363f7 	ldp	x23, x24, [sp, #48]
    40003c68:	a8c67bfd 	ldp	x29, x30, [sp], #96
    40003c6c:	d65f03c0 	ret
    40003c70:	8b020022 	add	x2, x1, x2
    40003c74:	91004037 	add	x23, x1, #0x10
    40003c78:	a9410c24 	ldp	x4, x3, [x1, #16]
    40003c7c:	aa1503e0 	mov	x0, x21
    40003c80:	f9400441 	ldr	x1, [x2, #8]
    40003c84:	f9000c83 	str	x3, [x4, #24]
    40003c88:	b2400021 	orr	x1, x1, #0x1
    40003c8c:	f9000864 	str	x4, [x3, #16]
    40003c90:	f9000441 	str	x1, [x2, #8]
    40003c94:	940000d3 	bl	40003fe0 <__malloc_unlock>
    40003c98:	aa1703e0 	mov	x0, x23
    40003c9c:	a94153f3 	ldp	x19, x20, [sp, #16]
    40003ca0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40003ca4:	a94363f7 	ldp	x23, x24, [sp, #48]
    40003ca8:	a8c67bfd 	ldp	x29, x30, [sp], #96
    40003cac:	d65f03c0 	ret
    40003cb0:	d349fc20 	lsr	x0, x1, #9
    40003cb4:	f127fc3f 	cmp	x1, #0x9ff
    40003cb8:	540009e9 	b.ls	40003df4 <_malloc_r+0x654>  // b.plast
    40003cbc:	f100501f 	cmp	x0, #0x14
    40003cc0:	54001068 	b.hi	40003ecc <_malloc_r+0x72c>  // b.pmore
    40003cc4:	11017003 	add	w3, w0, #0x5c
    40003cc8:	11016c02 	add	w2, w0, #0x5b
    40003ccc:	531f7863 	lsl	w3, w3, #1
    40003cd0:	937d7c63 	sbfiz	x3, x3, #3, #32
    40003cd4:	8b030283 	add	x3, x20, x3
    40003cd8:	f85f0460 	ldr	x0, [x3], #-16
    40003cdc:	eb00007f 	cmp	x3, x0
    40003ce0:	54000be0 	b.eq	40003e5c <_malloc_r+0x6bc>  // b.none
    40003ce4:	d503201f 	nop
    40003ce8:	f9400402 	ldr	x2, [x0, #8]
    40003cec:	927ef442 	and	x2, x2, #0xfffffffffffffffc
    40003cf0:	eb01005f 	cmp	x2, x1
    40003cf4:	54000089 	b.ls	40003d04 <_malloc_r+0x564>  // b.plast
    40003cf8:	f9400800 	ldr	x0, [x0, #16]
    40003cfc:	eb00007f 	cmp	x3, x0
    40003d00:	54ffff41 	b.ne	40003ce8 <_malloc_r+0x548>  // b.any
    40003d04:	f9400681 	ldr	x1, [x20, #8]
    40003d08:	f9400c03 	ldr	x3, [x0, #24]
    40003d0c:	a9010c80 	stp	x0, x3, [x4, #16]
    40003d10:	f9000864 	str	x4, [x3, #16]
    40003d14:	f9000c04 	str	x4, [x0, #24]
    40003d18:	17fffed4 	b	40003868 <_malloc_r+0xc8>
    40003d1c:	f100501f 	cmp	x0, #0x14
    40003d20:	54000769 	b.ls	40003e0c <_malloc_r+0x66c>  // b.plast
    40003d24:	f101501f 	cmp	x0, #0x54
    40003d28:	54000e28 	b.hi	40003eec <_malloc_r+0x74c>  // b.pmore
    40003d2c:	d34cfe60 	lsr	x0, x19, #12
    40003d30:	1101bc05 	add	w5, w0, #0x6f
    40003d34:	1101b800 	add	w0, w0, #0x6e
    40003d38:	531f78a4 	lsl	w4, w5, #1
    40003d3c:	937d7c84 	sbfiz	x4, x4, #3, #32
    40003d40:	17ffff15 	b	40003994 <_malloc_r+0x1f4>
    40003d44:	f94008c7 	ldr	x7, [x6, #16]
    40003d48:	b2400260 	orr	x0, x19, #0x1
    40003d4c:	f90004c0 	str	x0, [x6, #8]
    40003d50:	8b1300c4 	add	x4, x6, x19
    40003d54:	91004285 	add	x5, x20, #0x10
    40003d58:	b2400068 	orr	x8, x3, #0x1
    40003d5c:	f9000ce1 	str	x1, [x7, #24]
    40003d60:	910040d7 	add	x23, x6, #0x10
    40003d64:	f9000827 	str	x7, [x1, #16]
    40003d68:	aa1503e0 	mov	x0, x21
    40003d6c:	a9021284 	stp	x4, x4, [x20, #32]
    40003d70:	a9009488 	stp	x8, x5, [x4, #8]
    40003d74:	f9000c85 	str	x5, [x4, #24]
    40003d78:	f82268c3 	str	x3, [x6, x2]
    40003d7c:	94000099 	bl	40003fe0 <__malloc_unlock>
    40003d80:	17ffff98 	b	40003be0 <_malloc_r+0x440>
    40003d84:	8b0200c2 	add	x2, x6, x2
    40003d88:	aa0603f7 	mov	x23, x6
    40003d8c:	aa1503e0 	mov	x0, x21
    40003d90:	f9400443 	ldr	x3, [x2, #8]
    40003d94:	f8410ee4 	ldr	x4, [x23, #16]!
    40003d98:	b2400063 	orr	x3, x3, #0x1
    40003d9c:	f9000443 	str	x3, [x2, #8]
    40003da0:	f9000c81 	str	x1, [x4, #24]
    40003da4:	f9000824 	str	x4, [x1, #16]
    40003da8:	9400008e 	bl	40003fe0 <__malloc_unlock>
    40003dac:	17ffff8d 	b	40003be0 <_malloc_r+0x440>
    40003db0:	d343fe65 	lsr	x5, x19, #3
    40003db4:	110004a0 	add	w0, w5, #0x1
    40003db8:	531f7800 	lsl	w0, w0, #1
    40003dbc:	937d7c00 	sbfiz	x0, x0, #3, #32
    40003dc0:	17fffe87 	b	400037dc <_malloc_r+0x3c>
    40003dc4:	8b130085 	add	x5, x4, x19
    40003dc8:	b2400273 	orr	x19, x19, #0x1
    40003dcc:	f9000493 	str	x19, [x4, #8]
    40003dd0:	b2400066 	orr	x6, x3, #0x1
    40003dd4:	a9021685 	stp	x5, x5, [x20, #32]
    40003dd8:	aa1503e0 	mov	x0, x21
    40003ddc:	91004097 	add	x23, x4, #0x10
    40003de0:	a90088a6 	stp	x6, x2, [x5, #8]
    40003de4:	f9000ca2 	str	x2, [x5, #24]
    40003de8:	f8216883 	str	x3, [x4, x1]
    40003dec:	9400007d 	bl	40003fe0 <__malloc_unlock>
    40003df0:	17ffff7c 	b	40003be0 <_malloc_r+0x440>
    40003df4:	d346fc20 	lsr	x0, x1, #6
    40003df8:	1100e403 	add	w3, w0, #0x39
    40003dfc:	1100e002 	add	w2, w0, #0x38
    40003e00:	531f7863 	lsl	w3, w3, #1
    40003e04:	937d7c63 	sbfiz	x3, x3, #3, #32
    40003e08:	17ffffb3 	b	40003cd4 <_malloc_r+0x534>
    40003e0c:	11017005 	add	w5, w0, #0x5c
    40003e10:	11016c00 	add	w0, w0, #0x5b
    40003e14:	531f78a4 	lsl	w4, w5, #1
    40003e18:	937d7c84 	sbfiz	x4, x4, #3, #32
    40003e1c:	17fffede 	b	40003994 <_malloc_r+0x1f4>
    40003e20:	11000508 	add	w8, w8, #0x1
    40003e24:	91008084 	add	x4, x4, #0x20
    40003e28:	17fffeb2 	b	400038f0 <_malloc_r+0x150>
    40003e2c:	f2402f5f 	tst	x26, #0xfff
    40003e30:	54ffe321 	b.ne	40003a94 <_malloc_r+0x2f4>  // b.any
    40003e34:	f9400a97 	ldr	x23, [x20, #16]
    40003e38:	8b160316 	add	x22, x24, x22
    40003e3c:	b24002d6 	orr	x22, x22, #0x1
    40003e40:	f90006f6 	str	x22, [x23, #8]
    40003e44:	17ffff43 	b	40003b50 <_malloc_r+0x3b0>
    40003e48:	f9044379 	str	x25, [x27, #2176]
    40003e4c:	17ffff18 	b	40003aac <_malloc_r+0x30c>
    40003e50:	f9400a97 	ldr	x23, [x20, #16]
    40003e54:	f94006f6 	ldr	x22, [x23, #8]
    40003e58:	17ffff49 	b	40003b7c <_malloc_r+0x3dc>
    40003e5c:	f9400686 	ldr	x6, [x20, #8]
    40003e60:	13027c42 	asr	w2, w2, #2
    40003e64:	d2800021 	mov	x1, #0x1                   	// #1
    40003e68:	9ac22021 	lsl	x1, x1, x2
    40003e6c:	aa060021 	orr	x1, x1, x6
    40003e70:	f9000681 	str	x1, [x20, #8]
    40003e74:	17ffffa6 	b	40003d0c <_malloc_r+0x56c>
    40003e78:	8b16033a 	add	x26, x25, x22
    40003e7c:	aa1503e0 	mov	x0, x21
    40003e80:	cb1a03fa 	neg	x26, x26
    40003e84:	92402f5a 	and	x26, x26, #0xfff
    40003e88:	aa1a03e1 	mov	x1, x26
    40003e8c:	940000b1 	bl	40004150 <_sbrk_r>
    40003e90:	52800002 	mov	w2, #0x0                   	// #0
    40003e94:	b100041f 	cmn	x0, #0x1
    40003e98:	54ffe2c0 	b.eq	40003af0 <_malloc_r+0x350>  // b.none
    40003e9c:	cb190000 	sub	x0, x0, x25
    40003ea0:	2a1a03e2 	mov	w2, w26
    40003ea4:	8b1a0016 	add	x22, x0, x26
    40003ea8:	17ffff12 	b	40003af0 <_malloc_r+0x350>
    40003eac:	d2800020 	mov	x0, #0x1                   	// #1
    40003eb0:	f9000720 	str	x0, [x25, #8]
    40003eb4:	aa1503e0 	mov	x0, x21
    40003eb8:	d2800017 	mov	x23, #0x0                   	// #0
    40003ebc:	94000049 	bl	40003fe0 <__malloc_unlock>
    40003ec0:	a9446bf9 	ldp	x25, x26, [sp, #64]
    40003ec4:	a94573fb 	ldp	x27, x28, [sp, #80]
    40003ec8:	17ffff46 	b	40003be0 <_malloc_r+0x440>
    40003ecc:	f101501f 	cmp	x0, #0x54
    40003ed0:	54000228 	b.hi	40003f14 <_malloc_r+0x774>  // b.pmore
    40003ed4:	d34cfc20 	lsr	x0, x1, #12
    40003ed8:	1101bc03 	add	w3, w0, #0x6f
    40003edc:	1101b802 	add	w2, w0, #0x6e
    40003ee0:	531f7863 	lsl	w3, w3, #1
    40003ee4:	937d7c63 	sbfiz	x3, x3, #3, #32
    40003ee8:	17ffff7b 	b	40003cd4 <_malloc_r+0x534>
    40003eec:	f105501f 	cmp	x0, #0x154
    40003ef0:	54000228 	b.hi	40003f34 <_malloc_r+0x794>  // b.pmore
    40003ef4:	d34ffe60 	lsr	x0, x19, #15
    40003ef8:	1101e005 	add	w5, w0, #0x78
    40003efc:	1101dc00 	add	w0, w0, #0x77
    40003f00:	531f78a4 	lsl	w4, w5, #1
    40003f04:	937d7c84 	sbfiz	x4, x4, #3, #32
    40003f08:	17fffea3 	b	40003994 <_malloc_r+0x1f4>
    40003f0c:	aa1903f7 	mov	x23, x25
    40003f10:	17ffff10 	b	40003b50 <_malloc_r+0x3b0>
    40003f14:	f105501f 	cmp	x0, #0x154
    40003f18:	54000368 	b.hi	40003f84 <_malloc_r+0x7e4>  // b.pmore
    40003f1c:	d34ffc20 	lsr	x0, x1, #15
    40003f20:	1101e003 	add	w3, w0, #0x78
    40003f24:	1101dc02 	add	w2, w0, #0x77
    40003f28:	531f7863 	lsl	w3, w3, #1
    40003f2c:	937d7c63 	sbfiz	x3, x3, #3, #32
    40003f30:	17ffff69 	b	40003cd4 <_malloc_r+0x534>
    40003f34:	f115501f 	cmp	x0, #0x554
    40003f38:	54000368 	b.hi	40003fa4 <_malloc_r+0x804>  // b.pmore
    40003f3c:	d352fe60 	lsr	x0, x19, #18
    40003f40:	1101f405 	add	w5, w0, #0x7d
    40003f44:	1101f000 	add	w0, w0, #0x7c
    40003f48:	531f78a4 	lsl	w4, w5, #1
    40003f4c:	937d7c84 	sbfiz	x4, x4, #3, #32
    40003f50:	17fffe91 	b	40003994 <_malloc_r+0x1f4>
    40003f54:	910042e1 	add	x1, x23, #0x10
    40003f58:	aa1503e0 	mov	x0, x21
    40003f5c:	97fffba5 	bl	40002df0 <_free_r>
    40003f60:	f9400a97 	ldr	x23, [x20, #16]
    40003f64:	b94a4381 	ldr	w1, [x28, #2624]
    40003f68:	f94006f6 	ldr	x22, [x23, #8]
    40003f6c:	17fffef9 	b	40003b50 <_malloc_r+0x3b0>
    40003f70:	d100435a 	sub	x26, x26, #0x10
    40003f74:	52800002 	mov	w2, #0x0                   	// #0
    40003f78:	8b1a0376 	add	x22, x27, x26
    40003f7c:	cb1902d6 	sub	x22, x22, x25
    40003f80:	17fffedc 	b	40003af0 <_malloc_r+0x350>
    40003f84:	f115501f 	cmp	x0, #0x554
    40003f88:	54000168 	b.hi	40003fb4 <_malloc_r+0x814>  // b.pmore
    40003f8c:	d352fc20 	lsr	x0, x1, #18
    40003f90:	1101f403 	add	w3, w0, #0x7d
    40003f94:	1101f002 	add	w2, w0, #0x7c
    40003f98:	531f7863 	lsl	w3, w3, #1
    40003f9c:	937d7c63 	sbfiz	x3, x3, #3, #32
    40003fa0:	17ffff4d 	b	40003cd4 <_malloc_r+0x534>
    40003fa4:	d280fe04 	mov	x4, #0x7f0                 	// #2032
    40003fa8:	52800fe5 	mov	w5, #0x7f                  	// #127
    40003fac:	52800fc0 	mov	w0, #0x7e                  	// #126
    40003fb0:	17fffe79 	b	40003994 <_malloc_r+0x1f4>
    40003fb4:	d280fe03 	mov	x3, #0x7f0                 	// #2032
    40003fb8:	52800fc2 	mov	w2, #0x7e                  	// #126
    40003fbc:	17ffff46 	b	40003cd4 <_malloc_r+0x534>
    40003fc0:	f9400681 	ldr	x1, [x20, #8]
    40003fc4:	17fffe58 	b	40003924 <_malloc_r+0x184>
	...

0000000040003fd0 <__malloc_lock>:
    40003fd0:	90000660 	adrp	x0, 400cf000 <impure_data+0x3d0>
    40003fd4:	91294000 	add	x0, x0, #0xa50
    40003fd8:	140066e0 	b	4001db58 <__retarget_lock_acquire_recursive>
    40003fdc:	00000000 	udf	#0

0000000040003fe0 <__malloc_unlock>:
    40003fe0:	90000660 	adrp	x0, 400cf000 <impure_data+0x3d0>
    40003fe4:	91294000 	add	x0, x0, #0xa50
    40003fe8:	140066de 	b	4001db60 <__retarget_lock_release_recursive>
    40003fec:	00000000 	udf	#0

0000000040003ff0 <_open_r>:
    40003ff0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    40003ff4:	910003fd 	mov	x29, sp
    40003ff8:	a90153f3 	stp	x19, x20, [sp, #16]
    40003ffc:	90000414 	adrp	x20, 40083000 <ws+0x3a40>
    40004000:	aa0003f3 	mov	x19, x0
    40004004:	b90b9e9f 	str	wzr, [x20, #2972]
    40004008:	aa0103e0 	mov	x0, x1
    4000400c:	2a0203e1 	mov	w1, w2
    40004010:	2a0303e2 	mov	w2, w3
    40004014:	940066a0 	bl	4001da94 <_open>
    40004018:	3100041f 	cmn	w0, #0x1
    4000401c:	54000080 	b.eq	4000402c <_open_r+0x3c>  // b.none
    40004020:	a94153f3 	ldp	x19, x20, [sp, #16]
    40004024:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40004028:	d65f03c0 	ret
    4000402c:	b94b9e81 	ldr	w1, [x20, #2972]
    40004030:	34ffff81 	cbz	w1, 40004020 <_open_r+0x30>
    40004034:	b9000261 	str	w1, [x19]
    40004038:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000403c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40004040:	d65f03c0 	ret
	...

0000000040004050 <printf>:
    40004050:	a9af7bfd 	stp	x29, x30, [sp, #-272]!
    40004054:	d0000648 	adrp	x8, 400ce000 <z_interrupt_stacks+0x440>
    40004058:	128006eb 	mov	w11, #0xffffffc8            	// #-56
    4000405c:	910003fd 	mov	x29, sp
    40004060:	910343ec 	add	x12, sp, #0xd0
    40004064:	910443ea 	add	x10, sp, #0x110
    40004068:	12800fe9 	mov	w9, #0xffffff80            	// #-128
    4000406c:	a9032bea 	stp	x10, x10, [sp, #48]
    40004070:	aa0003ea 	mov	x10, x0
    40004074:	f90023ec 	str	x12, [sp, #64]
    40004078:	290927eb 	stp	w11, w9, [sp, #72]
    4000407c:	f9461500 	ldr	x0, [x8, #3112]
    40004080:	3d8017e0 	str	q0, [sp, #80]
    40004084:	a94337ec 	ldp	x12, x13, [sp, #48]
    40004088:	a90137ec 	stp	x12, x13, [sp, #16]
    4000408c:	a94427e8 	ldp	x8, x9, [sp, #64]
    40004090:	a90227e8 	stp	x8, x9, [sp, #32]
    40004094:	3d801be1 	str	q1, [sp, #96]
    40004098:	3d801fe2 	str	q2, [sp, #112]
    4000409c:	3d8023e3 	str	q3, [sp, #128]
    400040a0:	3d8027e4 	str	q4, [sp, #144]
    400040a4:	3d802be5 	str	q5, [sp, #160]
    400040a8:	3d802fe6 	str	q6, [sp, #176]
    400040ac:	3d8033e7 	str	q7, [sp, #192]
    400040b0:	a90d8be1 	stp	x1, x2, [sp, #216]
    400040b4:	aa0a03e2 	mov	x2, x10
    400040b8:	a90e93e3 	stp	x3, x4, [sp, #232]
    400040bc:	910043e3 	add	x3, sp, #0x10
    400040c0:	a90f9be5 	stp	x5, x6, [sp, #248]
    400040c4:	f90087e7 	str	x7, [sp, #264]
    400040c8:	f9400801 	ldr	x1, [x0, #16]
    400040cc:	940000b5 	bl	400043a0 <_vfprintf_r>
    400040d0:	a8d17bfd 	ldp	x29, x30, [sp], #272
    400040d4:	d65f03c0 	ret
	...

00000000400040e0 <__srget_r>:
    400040e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    400040e4:	910003fd 	mov	x29, sp
    400040e8:	a90153f3 	stp	x19, x20, [sp, #16]
    400040ec:	aa0103f3 	mov	x19, x1
    400040f0:	aa0003f4 	mov	x20, x0
    400040f4:	b4000060 	cbz	x0, 40004100 <__srget_r+0x20>
    400040f8:	b9405001 	ldr	w1, [x0, #80]
    400040fc:	340001e1 	cbz	w1, 40004138 <__srget_r+0x58>
    40004100:	aa1403e0 	mov	x0, x20
    40004104:	aa1303e1 	mov	x1, x19
    40004108:	94001b12 	bl	4000ad50 <__srefill_r>
    4000410c:	350001a0 	cbnz	w0, 40004140 <__srget_r+0x60>
    40004110:	f9400261 	ldr	x1, [x19]
    40004114:	b9400a60 	ldr	w0, [x19, #8]
    40004118:	91000422 	add	x2, x1, #0x1
    4000411c:	f9000262 	str	x2, [x19]
    40004120:	51000400 	sub	w0, w0, #0x1
    40004124:	b9000a60 	str	w0, [x19, #8]
    40004128:	39400020 	ldrb	w0, [x1]
    4000412c:	a94153f3 	ldp	x19, x20, [sp, #16]
    40004130:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40004134:	d65f03c0 	ret
    40004138:	97fff9d6 	bl	40002890 <__sinit>
    4000413c:	17fffff1 	b	40004100 <__srget_r+0x20>
    40004140:	12800000 	mov	w0, #0xffffffff            	// #-1
    40004144:	17fffffa 	b	4000412c <__srget_r+0x4c>
	...

0000000040004150 <_sbrk_r>:
    40004150:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    40004154:	910003fd 	mov	x29, sp
    40004158:	a90153f3 	stp	x19, x20, [sp, #16]
    4000415c:	f00003f4 	adrp	x20, 40083000 <ws+0x3a40>
    40004160:	aa0003f3 	mov	x19, x0
    40004164:	b90b9e9f 	str	wzr, [x20, #2972]
    40004168:	aa0103e0 	mov	x0, x1
    4000416c:	94006662 	bl	4001daf4 <_sbrk>
    40004170:	b100041f 	cmn	x0, #0x1
    40004174:	54000080 	b.eq	40004184 <_sbrk_r+0x34>  // b.none
    40004178:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000417c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40004180:	d65f03c0 	ret
    40004184:	b94b9e81 	ldr	w1, [x20, #2972]
    40004188:	34ffff81 	cbz	w1, 40004178 <_sbrk_r+0x28>
    4000418c:	b9000261 	str	w1, [x19]
    40004190:	a94153f3 	ldp	x19, x20, [sp, #16]
    40004194:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40004198:	d65f03c0 	ret
    4000419c:	00000000 	udf	#0

00000000400041a0 <__sprintf_chk>:
    400041a0:	a9b07bfd 	stp	x29, x30, [sp, #-256]!
    400041a4:	aa0303e1 	mov	x1, x3
    400041a8:	128003e9 	mov	w9, #0xffffffe0            	// #-32
    400041ac:	910003fd 	mov	x29, sp
    400041b0:	910383ea 	add	x10, sp, #0xe0
    400041b4:	910403e3 	add	x3, sp, #0x100
    400041b8:	12800fe8 	mov	w8, #0xffffff80            	// #-128
    400041bc:	f9000bf3 	str	x19, [sp, #16]
    400041c0:	aa0203f3 	mov	x19, x2
    400041c4:	a9040fe3 	stp	x3, x3, [sp, #64]
    400041c8:	b2407be2 	mov	x2, #0x7fffffff            	// #2147483647
    400041cc:	f9002bea 	str	x10, [sp, #80]
    400041d0:	290b23e9 	stp	w9, w8, [sp, #88]
    400041d4:	3d801be0 	str	q0, [sp, #96]
    400041d8:	3d801fe1 	str	q1, [sp, #112]
    400041dc:	3d8023e2 	str	q2, [sp, #128]
    400041e0:	3d8027e3 	str	q3, [sp, #144]
    400041e4:	3d802be4 	str	q4, [sp, #160]
    400041e8:	3d802fe5 	str	q5, [sp, #176]
    400041ec:	3d8033e6 	str	q6, [sp, #192]
    400041f0:	3d8037e7 	str	q7, [sp, #208]
    400041f4:	a90e17e4 	stp	x4, x5, [sp, #224]
    400041f8:	a90f1fe6 	stp	x6, x7, [sp, #240]
    400041fc:	eb02027f 	cmp	x19, x2
    40004200:	54000149 	b.ls	40004228 <__sprintf_chk+0x88>  // b.plast
    40004204:	a9441fe6 	ldp	x6, x7, [sp, #64]
    40004208:	910083e2 	add	x2, sp, #0x20
    4000420c:	a94517e4 	ldp	x4, x5, [sp, #80]
    40004210:	a9021fe6 	stp	x6, x7, [sp, #32]
    40004214:	a90317e4 	stp	x4, x5, [sp, #48]
    40004218:	94000ff6 	bl	400081f0 <vsprintf>
    4000421c:	f9400bf3 	ldr	x19, [sp, #16]
    40004220:	a8d07bfd 	ldp	x29, x30, [sp], #256
    40004224:	d65f03c0 	ret
    40004228:	a9441fe6 	ldp	x6, x7, [sp, #64]
    4000422c:	aa0103e2 	mov	x2, x1
    40004230:	a94517e4 	ldp	x4, x5, [sp, #80]
    40004234:	910083e3 	add	x3, sp, #0x20
    40004238:	aa1303e1 	mov	x1, x19
    4000423c:	a9021fe6 	stp	x6, x7, [sp, #32]
    40004240:	a90317e4 	stp	x4, x5, [sp, #48]
    40004244:	94000fb3 	bl	40008110 <vsnprintf>
    40004248:	37fffea0 	tbnz	w0, #31, 4000421c <__sprintf_chk+0x7c>
    4000424c:	eb20c27f 	cmp	x19, w0, sxtw
    40004250:	54fffe68 	b.hi	4000421c <__sprintf_chk+0x7c>  // b.pmore
    40004254:	94006645 	bl	4001db68 <__chk_fail>
	...

0000000040004260 <__sread>:
    40004260:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    40004264:	93407c63 	sxtw	x3, w3
    40004268:	910003fd 	mov	x29, sp
    4000426c:	f9000bf3 	str	x19, [sp, #16]
    40004270:	aa0103f3 	mov	x19, x1
    40004274:	79c02421 	ldrsh	w1, [x1, #18]
    40004278:	94001a96 	bl	4000acd0 <_read_r>
    4000427c:	b7f800e0 	tbnz	x0, #63, 40004298 <__sread+0x38>
    40004280:	f9404a61 	ldr	x1, [x19, #144]
    40004284:	8b000021 	add	x1, x1, x0
    40004288:	f9004a61 	str	x1, [x19, #144]
    4000428c:	f9400bf3 	ldr	x19, [sp, #16]
    40004290:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40004294:	d65f03c0 	ret
    40004298:	79402261 	ldrh	w1, [x19, #16]
    4000429c:	12137821 	and	w1, w1, #0xffffefff
    400042a0:	79002261 	strh	w1, [x19, #16]
    400042a4:	f9400bf3 	ldr	x19, [sp, #16]
    400042a8:	a8c27bfd 	ldp	x29, x30, [sp], #32
    400042ac:	d65f03c0 	ret

00000000400042b0 <__swrite>:
    400042b0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    400042b4:	910003fd 	mov	x29, sp
    400042b8:	79c02024 	ldrsh	w4, [x1, #16]
    400042bc:	a90153f3 	stp	x19, x20, [sp, #16]
    400042c0:	aa0103f3 	mov	x19, x1
    400042c4:	aa0003f4 	mov	x20, x0
    400042c8:	a9025bf5 	stp	x21, x22, [sp, #32]
    400042cc:	aa0203f5 	mov	x21, x2
    400042d0:	2a0303f6 	mov	w22, w3
    400042d4:	37400184 	tbnz	w4, #8, 40004304 <__swrite+0x54>
    400042d8:	79c02661 	ldrsh	w1, [x19, #18]
    400042dc:	12137884 	and	w4, w4, #0xffffefff
    400042e0:	79002264 	strh	w4, [x19, #16]
    400042e4:	93407ec3 	sxtw	x3, w22
    400042e8:	aa1503e2 	mov	x2, x21
    400042ec:	aa1403e0 	mov	x0, x20
    400042f0:	94000fdc 	bl	40008260 <_write_r>
    400042f4:	a94153f3 	ldp	x19, x20, [sp, #16]
    400042f8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    400042fc:	a8c37bfd 	ldp	x29, x30, [sp], #48
    40004300:	d65f03c0 	ret
    40004304:	79c02421 	ldrsh	w1, [x1, #18]
    40004308:	52800043 	mov	w3, #0x2                   	// #2
    4000430c:	d2800002 	mov	x2, #0x0                   	// #0
    40004310:	94001638 	bl	40009bf0 <_lseek_r>
    40004314:	79c02264 	ldrsh	w4, [x19, #16]
    40004318:	17fffff0 	b	400042d8 <__swrite+0x28>
    4000431c:	00000000 	udf	#0

0000000040004320 <__sseek>:
    40004320:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    40004324:	910003fd 	mov	x29, sp
    40004328:	f9000bf3 	str	x19, [sp, #16]
    4000432c:	aa0103f3 	mov	x19, x1
    40004330:	79c02421 	ldrsh	w1, [x1, #18]
    40004334:	9400162f 	bl	40009bf0 <_lseek_r>
    40004338:	79402261 	ldrh	w1, [x19, #16]
    4000433c:	b100041f 	cmn	x0, #0x1
    40004340:	540000e0 	b.eq	4000435c <__sseek+0x3c>  // b.none
    40004344:	32140021 	orr	w1, w1, #0x1000
    40004348:	79002261 	strh	w1, [x19, #16]
    4000434c:	f9004a60 	str	x0, [x19, #144]
    40004350:	f9400bf3 	ldr	x19, [sp, #16]
    40004354:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40004358:	d65f03c0 	ret
    4000435c:	12137821 	and	w1, w1, #0xffffefff
    40004360:	79002261 	strh	w1, [x19, #16]
    40004364:	f9400bf3 	ldr	x19, [sp, #16]
    40004368:	a8c27bfd 	ldp	x29, x30, [sp], #32
    4000436c:	d65f03c0 	ret

0000000040004370 <__sclose>:
    40004370:	79c02421 	ldrsh	w1, [x1, #18]
    40004374:	14001027 	b	40008410 <_close_r>
	...

0000000040004380 <gettimeofday>:
    40004380:	d0000643 	adrp	x3, 400ce000 <z_interrupt_stacks+0x440>
    40004384:	aa0103e2 	mov	x2, x1
    40004388:	aa0003e1 	mov	x1, x0
    4000438c:	f9461460 	ldr	x0, [x3, #3112]
    40004390:	140015d8 	b	40009af0 <_gettimeofday_r>
	...

00000000400043a0 <_vfprintf_r>:
    400043a0:	d10803ff 	sub	sp, sp, #0x200
    400043a4:	a9007bfd 	stp	x29, x30, [sp]
    400043a8:	910003fd 	mov	x29, sp
    400043ac:	a90153f3 	stp	x19, x20, [sp, #16]
    400043b0:	aa0103f4 	mov	x20, x1
    400043b4:	aa0303f3 	mov	x19, x3
    400043b8:	f9400061 	ldr	x1, [x3]
    400043bc:	f90047e1 	str	x1, [sp, #136]
    400043c0:	f9400461 	ldr	x1, [x3, #8]
    400043c4:	f90067e1 	str	x1, [sp, #200]
    400043c8:	f9400861 	ldr	x1, [x3, #16]
    400043cc:	f9006fe1 	str	x1, [sp, #216]
    400043d0:	b9401861 	ldr	w1, [x3, #24]
    400043d4:	b9009be1 	str	w1, [sp, #152]
    400043d8:	b9401c61 	ldr	w1, [x3, #28]
    400043dc:	a90363f7 	stp	x23, x24, [sp, #48]
    400043e0:	aa0003f8 	mov	x24, x0
    400043e4:	a90573fb 	stp	x27, x28, [sp, #80]
    400043e8:	aa0203fc 	mov	x28, x2
    400043ec:	b900d7e1 	str	w1, [sp, #212]
    400043f0:	940015fc 	bl	40009be0 <_localeconv_r>
    400043f4:	f9400000 	ldr	x0, [x0]
    400043f8:	f90063e0 	str	x0, [sp, #192]
    400043fc:	97fff3d1 	bl	40001340 <strlen>
    40004400:	f9005be0 	str	x0, [sp, #176]
    40004404:	b4000078 	cbz	x24, 40004410 <_vfprintf_r+0x70>
    40004408:	b9405300 	ldr	w0, [x24, #80]
    4000440c:	34002ca0 	cbz	w0, 400049a0 <_vfprintf_r+0x600>
    40004410:	b940b281 	ldr	w1, [x20, #176]
    40004414:	79402280 	ldrh	w0, [x20, #16]
    40004418:	37000041 	tbnz	w1, #0, 40004420 <_vfprintf_r+0x80>
    4000441c:	36488bc0 	tbz	w0, #9, 40005594 <_vfprintf_r+0x11f4>
    40004420:	36180b60 	tbz	w0, #3, 4000458c <_vfprintf_r+0x1ec>
    40004424:	f9400e81 	ldr	x1, [x20, #24]
    40004428:	b4000b21 	cbz	x1, 4000458c <_vfprintf_r+0x1ec>
    4000442c:	52800341 	mov	w1, #0x1a                  	// #26
    40004430:	0a010001 	and	w1, w0, w1
    40004434:	7100283f 	cmp	w1, #0xa
    40004438:	54000bc0 	b.eq	400045b0 <_vfprintf_r+0x210>  // b.none
    4000443c:	a9025bf5 	stp	x21, x22, [sp, #32]
    40004440:	910603f6 	add	x22, sp, #0x180
    40004444:	aa1603e6 	mov	x6, x22
    40004448:	6d0627e8 	stp	d8, d9, [sp, #96]
    4000444c:	2f00e408 	movi	d8, #0x0
    40004450:	f00000e0 	adrp	x0, 40023000 <fpi.1>
    40004454:	910b7000 	add	x0, x0, #0x2dc
    40004458:	a9046bf9 	stp	x25, x26, [sp, #64]
    4000445c:	b90087ff 	str	wzr, [sp, #132]
    40004460:	f90053e0 	str	x0, [sp, #160]
    40004464:	b900abff 	str	wzr, [sp, #168]
    40004468:	f9005fff 	str	xzr, [sp, #184]
    4000446c:	b900d3ff 	str	wzr, [sp, #208]
    40004470:	f900a3f6 	str	x22, [sp, #320]
    40004474:	b9014bff 	str	wzr, [sp, #328]
    40004478:	f900abff 	str	xzr, [sp, #336]
    4000447c:	39400380 	ldrb	w0, [x28]
    40004480:	aa1c03f3 	mov	x19, x28
    40004484:	7100941f 	cmp	w0, #0x25
    40004488:	7a401804 	ccmp	w0, #0x0, #0x4, ne  // ne = any
    4000448c:	54000300 	b.eq	400044ec <_vfprintf_r+0x14c>  // b.none
    40004490:	aa1303f5 	mov	x21, x19
    40004494:	38401e60 	ldrb	w0, [x19, #1]!
    40004498:	7100941f 	cmp	w0, #0x25
    4000449c:	7a401804 	ccmp	w0, #0x0, #0x4, ne  // ne = any
    400044a0:	54ffff81 	b.ne	40004490 <_vfprintf_r+0xf0>  // b.any
    400044a4:	cb1c0277 	sub	x23, x19, x28
    400044a8:	6b1c027f 	cmp	w19, w28
    400044ac:	54000200 	b.eq	400044ec <_vfprintf_r+0x14c>  // b.none
    400044b0:	f940abe2 	ldr	x2, [sp, #336]
    400044b4:	93407ee1 	sxtw	x1, w23
    400044b8:	b9414be0 	ldr	w0, [sp, #328]
    400044bc:	8b010042 	add	x2, x2, x1
    400044c0:	a90004dc 	stp	x28, x1, [x6]
    400044c4:	11000400 	add	w0, w0, #0x1
    400044c8:	b9014be0 	str	w0, [sp, #328]
    400044cc:	910040c6 	add	x6, x6, #0x10
    400044d0:	f900abe2 	str	x2, [sp, #336]
    400044d4:	71001c1f 	cmp	w0, #0x7
    400044d8:	540017ec 	b.gt	400047d4 <_vfprintf_r+0x434>
    400044dc:	b94087e0 	ldr	w0, [sp, #132]
    400044e0:	0b170000 	add	w0, w0, w23
    400044e4:	b90087e0 	str	w0, [sp, #132]
    400044e8:	394006a0 	ldrb	w0, [x21, #1]
    400044ec:	3400aa80 	cbz	w0, 40005a3c <_vfprintf_r+0x169c>
    400044f0:	39400669 	ldrb	w9, [x19, #1]
    400044f4:	12800007 	mov	w7, #0xffffffff            	// #-1
    400044f8:	9100067c 	add	x28, x19, #0x1
    400044fc:	2a0703e3 	mov	w3, w7
    40004500:	52800001 	mov	w1, #0x0                   	// #0
    40004504:	52800002 	mov	w2, #0x0                   	// #0
    40004508:	52800015 	mov	w21, #0x0                   	// #0
    4000450c:	5280001a 	mov	w26, #0x0                   	// #0
    40004510:	39047fff 	strb	wzr, [sp, #287]
    40004514:	9100079c 	add	x28, x28, #0x1
    40004518:	2a0903fb 	mov	w27, w9
    4000451c:	51008360 	sub	w0, w27, #0x20
    40004520:	7101601f 	cmp	w0, #0x58
    40004524:	54000189 	b.ls	40004554 <_vfprintf_r+0x1b4>  // b.plast
    40004528:	3500cd61 	cbnz	w1, 40005ed4 <_vfprintf_r+0x1b34>
    4000452c:	3400a89b 	cbz	w27, 40005a3c <_vfprintf_r+0x169c>
    40004530:	52800033 	mov	w19, #0x1                   	// #1
    40004534:	910563f7 	add	x23, sp, #0x158
    40004538:	2a1303f9 	mov	w25, w19
    4000453c:	39047fff 	strb	wzr, [sp, #287]
    40004540:	390563fb 	strb	w27, [sp, #344]
    40004544:	52800007 	mov	w7, #0x0                   	// #0
    40004548:	b9007bfa 	str	w26, [sp, #120]
    4000454c:	b9009fff 	str	wzr, [sp, #156]
    40004550:	14000059 	b	400046b4 <_vfprintf_r+0x314>
    40004554:	f94053e4 	ldr	x4, [sp, #160]
    40004558:	78605880 	ldrh	w0, [x4, w0, uxtw #1]
    4000455c:	10000064 	adr	x4, 40004568 <_vfprintf_r+0x1c8>
    40004560:	8b20a880 	add	x0, x4, w0, sxth #2
    40004564:	d61f0000 	br	x0
    40004568:	5100c360 	sub	w0, w27, #0x30
    4000456c:	52800015 	mov	w21, #0x0                   	// #0
    40004570:	3840179b 	ldrb	w27, [x28], #1
    40004574:	0b150ab5 	add	w21, w21, w21, lsl #2
    40004578:	0b150415 	add	w21, w0, w21, lsl #1
    4000457c:	5100c360 	sub	w0, w27, #0x30
    40004580:	7100241f 	cmp	w0, #0x9
    40004584:	54ffff69 	b.ls	40004570 <_vfprintf_r+0x1d0>  // b.plast
    40004588:	17ffffe5 	b	4000451c <_vfprintf_r+0x17c>
    4000458c:	aa1403e1 	mov	x1, x20
    40004590:	aa1803e0 	mov	x0, x24
    40004594:	94000f4b 	bl	400082c0 <__swsetup_r>
    40004598:	3500fc00 	cbnz	w0, 40006518 <_vfprintf_r+0x2178>
    4000459c:	79402280 	ldrh	w0, [x20, #16]
    400045a0:	52800341 	mov	w1, #0x1a                  	// #26
    400045a4:	0a010001 	and	w1, w0, w1
    400045a8:	7100283f 	cmp	w1, #0xa
    400045ac:	54fff481 	b.ne	4000443c <_vfprintf_r+0x9c>  // b.any
    400045b0:	79c02681 	ldrsh	w1, [x20, #18]
    400045b4:	37fff441 	tbnz	w1, #31, 4000443c <_vfprintf_r+0x9c>
    400045b8:	b940b281 	ldr	w1, [x20, #176]
    400045bc:	37000041 	tbnz	w1, #0, 400045c4 <_vfprintf_r+0x224>
    400045c0:	3648ce60 	tbz	w0, #9, 40005f8c <_vfprintf_r+0x1bec>
    400045c4:	a9401e66 	ldp	x6, x7, [x19]
    400045c8:	aa1c03e2 	mov	x2, x28
    400045cc:	a9411664 	ldp	x4, x5, [x19, #16]
    400045d0:	aa1403e1 	mov	x1, x20
    400045d4:	9103c3e3 	add	x3, sp, #0xf0
    400045d8:	aa1803e0 	mov	x0, x24
    400045dc:	a90f1fe6 	stp	x6, x7, [sp, #240]
    400045e0:	a91017e4 	stp	x4, x5, [sp, #256]
    400045e4:	9400081f 	bl	40006660 <__sbprintf>
    400045e8:	b90087e0 	str	w0, [sp, #132]
    400045ec:	a9407bfd 	ldp	x29, x30, [sp]
    400045f0:	b94087e0 	ldr	w0, [sp, #132]
    400045f4:	a94153f3 	ldp	x19, x20, [sp, #16]
    400045f8:	a94363f7 	ldp	x23, x24, [sp, #48]
    400045fc:	a94573fb 	ldp	x27, x28, [sp, #80]
    40004600:	910803ff 	add	sp, sp, #0x200
    40004604:	d65f03c0 	ret
    40004608:	321c035a 	orr	w26, w26, #0x10
    4000460c:	b9409be0 	ldr	w0, [sp, #152]
    40004610:	36281a1a 	tbz	w26, #5, 40004950 <_vfprintf_r+0x5b0>
    40004614:	37f890c0 	tbnz	w0, #31, 4000582c <_vfprintf_r+0x148c>
    40004618:	f94047e0 	ldr	x0, [sp, #136]
    4000461c:	91003c01 	add	x1, x0, #0xf
    40004620:	927df021 	and	x1, x1, #0xfffffffffffffff8
    40004624:	f90047e1 	str	x1, [sp, #136]
    40004628:	52800021 	mov	w1, #0x1                   	// #1
    4000462c:	f9400000 	ldr	x0, [x0]
    40004630:	1400000b 	b	4000465c <_vfprintf_r+0x2bc>
    40004634:	321c035a 	orr	w26, w26, #0x10
    40004638:	b9409be0 	ldr	w0, [sp, #152]
    4000463c:	362819fa 	tbz	w26, #5, 40004978 <_vfprintf_r+0x5d8>
    40004640:	37f88e20 	tbnz	w0, #31, 40005804 <_vfprintf_r+0x1464>
    40004644:	f94047e0 	ldr	x0, [sp, #136]
    40004648:	91003c01 	add	x1, x0, #0xf
    4000464c:	927df021 	and	x1, x1, #0xfffffffffffffff8
    40004650:	f90047e1 	str	x1, [sp, #136]
    40004654:	f9400000 	ldr	x0, [x0]
    40004658:	52800001 	mov	w1, #0x0                   	// #0
    4000465c:	52800003 	mov	w3, #0x0                   	// #0
    40004660:	39047fff 	strb	wzr, [sp, #287]
    40004664:	310004ff 	cmn	w7, #0x1
    40004668:	54004a40 	b.eq	40004fb0 <_vfprintf_r+0xc10>  // b.none
    4000466c:	12187b42 	and	w2, w26, #0xffffff7f
    40004670:	b9007be2 	str	w2, [sp, #120]
    40004674:	f100001f 	cmp	x0, #0x0
    40004678:	7a4008e0 	ccmp	w7, #0x0, #0x0, eq  // eq = none
    4000467c:	54004961 	b.ne	40004fa8 <_vfprintf_r+0xc08>  // b.any
    40004680:	35001be1 	cbnz	w1, 400049fc <_vfprintf_r+0x65c>
    40004684:	12000359 	and	w25, w26, #0x1
    40004688:	3600729a 	tbz	w26, #0, 400054d8 <_vfprintf_r+0x1138>
    4000468c:	9105fff7 	add	x23, sp, #0x17f
    40004690:	52800600 	mov	w0, #0x30                  	// #48
    40004694:	52800007 	mov	w7, #0x0                   	// #0
    40004698:	3905ffe0 	strb	w0, [sp, #383]
    4000469c:	d503201f 	nop
    400046a0:	b9009fff 	str	wzr, [sp, #156]
    400046a4:	6b1900ff 	cmp	w7, w25
    400046a8:	1a99a0f3 	csel	w19, w7, w25, ge  // ge = tcont
    400046ac:	34000043 	cbz	w3, 400046b4 <_vfprintf_r+0x314>
    400046b0:	11000673 	add	w19, w19, #0x1
    400046b4:	b9407be1 	ldr	w1, [sp, #120]
    400046b8:	11000a60 	add	w0, w19, #0x2
    400046bc:	5280109a 	mov	w26, #0x84                  	// #132
    400046c0:	721f002b 	ands	w11, w1, #0x2
    400046c4:	1a931013 	csel	w19, w0, w19, ne  // ne = any
    400046c8:	6a1a0020 	ands	w0, w1, w26
    400046cc:	b90093e0 	str	w0, [sp, #144]
    400046d0:	f940abe0 	ldr	x0, [sp, #336]
    400046d4:	54000081 	b.ne	400046e4 <_vfprintf_r+0x344>  // b.any
    400046d8:	4b1302a3 	sub	w3, w21, w19
    400046dc:	7100007f 	cmp	w3, #0x0
    400046e0:	5400522c 	b.gt	40005124 <_vfprintf_r+0xd84>
    400046e4:	39447fe1 	ldrb	w1, [sp, #287]
    400046e8:	340001a1 	cbz	w1, 4000471c <_vfprintf_r+0x37c>
    400046ec:	b9414be1 	ldr	w1, [sp, #328]
    400046f0:	91047fe2 	add	x2, sp, #0x11f
    400046f4:	91000400 	add	x0, x0, #0x1
    400046f8:	f90000c2 	str	x2, [x6]
    400046fc:	11000421 	add	w1, w1, #0x1
    40004700:	d2800022 	mov	x2, #0x1                   	// #1
    40004704:	f90004c2 	str	x2, [x6, #8]
    40004708:	910040c6 	add	x6, x6, #0x10
    4000470c:	b9014be1 	str	w1, [sp, #328]
    40004710:	f900abe0 	str	x0, [sp, #336]
    40004714:	71001c3f 	cmp	w1, #0x7
    40004718:	54000e0c 	b.gt	400048d8 <_vfprintf_r+0x538>
    4000471c:	340001ab 	cbz	w11, 40004750 <_vfprintf_r+0x3b0>
    40004720:	b9414be1 	ldr	w1, [sp, #328]
    40004724:	910483e2 	add	x2, sp, #0x120
    40004728:	91000800 	add	x0, x0, #0x2
    4000472c:	f90000c2 	str	x2, [x6]
    40004730:	11000421 	add	w1, w1, #0x1
    40004734:	d2800042 	mov	x2, #0x2                   	// #2
    40004738:	f90004c2 	str	x2, [x6, #8]
    4000473c:	910040c6 	add	x6, x6, #0x10
    40004740:	b9014be1 	str	w1, [sp, #328]
    40004744:	f900abe0 	str	x0, [sp, #336]
    40004748:	71001c3f 	cmp	w1, #0x7
    4000474c:	5400576c 	b.gt	40005238 <_vfprintf_r+0xe98>
    40004750:	b94093e1 	ldr	w1, [sp, #144]
    40004754:	7102003f 	cmp	w1, #0x80
    40004758:	540032e0 	b.eq	40004db4 <_vfprintf_r+0xa14>  // b.none
    4000475c:	4b1900fa 	sub	w26, w7, w25
    40004760:	7100035f 	cmp	w26, #0x0
    40004764:	54003b0c 	b.gt	40004ec4 <_vfprintf_r+0xb24>
    40004768:	f9403fe1 	ldr	x1, [sp, #120]
    4000476c:	37402a41 	tbnz	w1, #8, 40004cb4 <_vfprintf_r+0x914>
    40004770:	b9414be1 	ldr	w1, [sp, #328]
    40004774:	93407f39 	sxtw	x25, w25
    40004778:	8b190000 	add	x0, x0, x25
    4000477c:	f900abe0 	str	x0, [sp, #336]
    40004780:	11000421 	add	w1, w1, #0x1
    40004784:	b9014be1 	str	w1, [sp, #328]
    40004788:	f90000d7 	str	x23, [x6]
    4000478c:	f90004d9 	str	x25, [x6, #8]
    40004790:	71001c3f 	cmp	w1, #0x7
    40004794:	54000cec 	b.gt	40004930 <_vfprintf_r+0x590>
    40004798:	910040c6 	add	x6, x6, #0x10
    4000479c:	f9403fe1 	ldr	x1, [sp, #120]
    400047a0:	36100081 	tbz	w1, #2, 400047b0 <_vfprintf_r+0x410>
    400047a4:	4b1302b7 	sub	w23, w21, w19
    400047a8:	710002ff 	cmp	w23, #0x0
    400047ac:	540055ac 	b.gt	40005260 <_vfprintf_r+0xec0>
    400047b0:	b94087e1 	ldr	w1, [sp, #132]
    400047b4:	6b1302bf 	cmp	w21, w19
    400047b8:	1a93a2b3 	csel	w19, w21, w19, ge  // ge = tcont
    400047bc:	0b130021 	add	w1, w1, w19
    400047c0:	b90087e1 	str	w1, [sp, #132]
    400047c4:	b5004340 	cbnz	x0, 4000502c <_vfprintf_r+0xc8c>
    400047c8:	aa1603e6 	mov	x6, x22
    400047cc:	b9014bff 	str	wzr, [sp, #328]
    400047d0:	17ffff2b 	b	4000447c <_vfprintf_r+0xdc>
    400047d4:	910503e2 	add	x2, sp, #0x140
    400047d8:	aa1403e1 	mov	x1, x20
    400047dc:	aa1803e0 	mov	x0, x24
    400047e0:	94002964 	bl	4000ed70 <__sprint_r>
    400047e4:	35000080 	cbnz	w0, 400047f4 <_vfprintf_r+0x454>
    400047e8:	aa1603e6 	mov	x6, x22
    400047ec:	17ffff3c 	b	400044dc <_vfprintf_r+0x13c>
    400047f0:	aa1303f4 	mov	x20, x19
    400047f4:	b940b281 	ldr	w1, [x20, #176]
    400047f8:	79402280 	ldrh	w0, [x20, #16]
    400047fc:	36000181 	tbz	w1, #0, 4000482c <_vfprintf_r+0x48c>
    40004800:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40004804:	a9446bf9 	ldp	x25, x26, [sp, #64]
    40004808:	6d4627e8 	ldp	d8, d9, [sp, #96]
    4000480c:	3730db60 	tbnz	w0, #6, 40006378 <_vfprintf_r+0x1fd8>
    40004810:	b94087e0 	ldr	w0, [sp, #132]
    40004814:	a9407bfd 	ldp	x29, x30, [sp]
    40004818:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000481c:	a94363f7 	ldp	x23, x24, [sp, #48]
    40004820:	a94573fb 	ldp	x27, x28, [sp, #80]
    40004824:	910803ff 	add	sp, sp, #0x200
    40004828:	d65f03c0 	ret
    4000482c:	374ffea0 	tbnz	w0, #9, 40004800 <_vfprintf_r+0x460>
    40004830:	f9405280 	ldr	x0, [x20, #160]
    40004834:	940064cb 	bl	4001db60 <__retarget_lock_release_recursive>
    40004838:	79402280 	ldrh	w0, [x20, #16]
    4000483c:	17fffff1 	b	40004800 <_vfprintf_r+0x460>
    40004840:	3500d221 	cbnz	w1, 40006284 <_vfprintf_r+0x1ee4>
    40004844:	b940d7e0 	ldr	w0, [sp, #212]
    40004848:	36186afa 	tbz	w26, #3, 400055a4 <_vfprintf_r+0x1204>
    4000484c:	37f8a4a0 	tbnz	w0, #31, 40005ce0 <_vfprintf_r+0x1940>
    40004850:	f94047e0 	ldr	x0, [sp, #136]
    40004854:	91003c00 	add	x0, x0, #0xf
    40004858:	927cec00 	and	x0, x0, #0xfffffffffffffff0
    4000485c:	91004001 	add	x1, x0, #0x10
    40004860:	f90047e1 	str	x1, [sp, #136]
    40004864:	3dc00000 	ldr	q0, [x0]
    40004868:	b9007be7 	str	w7, [sp, #120]
    4000486c:	f9004be6 	str	x6, [sp, #144]
    40004870:	97fff45d 	bl	400019e4 <__trunctfdf2>
    40004874:	1e604008 	fmov	d8, d0
    40004878:	b9407be7 	ldr	w7, [sp, #120]
    4000487c:	f9404be6 	ldr	x6, [sp, #144]
    40004880:	1e60c101 	fabs	d1, d8
    40004884:	92f00200 	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
    40004888:	9e670000 	fmov	d0, x0
    4000488c:	1e602020 	fcmp	d1, d0
    40004890:	5400852d 	b.le	40005934 <_vfprintf_r+0x1594>
    40004894:	1e602118 	fcmpe	d8, #0.0
    40004898:	54009f64 	b.mi	40005c84 <_vfprintf_r+0x18e4>  // b.first
    4000489c:	39447fe3 	ldrb	w3, [sp, #287]
    400048a0:	d00000e0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    400048a4:	d00000e4 	adrp	x4, 40022000 <__pow_log_data+0xcc8>
    400048a8:	7101237f 	cmp	w27, #0x48
    400048ac:	91342000 	add	x0, x0, #0xd08
    400048b0:	91340084 	add	x4, x4, #0xd00
    400048b4:	12187b41 	and	w1, w26, #0xffffff7f
    400048b8:	b9007be1 	str	w1, [sp, #120]
    400048bc:	b9009fff 	str	wzr, [sp, #156]
    400048c0:	52800073 	mov	w19, #0x3                   	// #3
    400048c4:	9a80b097 	csel	x23, x4, x0, lt  // lt = tstop
    400048c8:	2a1303f9 	mov	w25, w19
    400048cc:	52800007 	mov	w7, #0x0                   	// #0
    400048d0:	35ffef03 	cbnz	w3, 400046b0 <_vfprintf_r+0x310>
    400048d4:	17ffff78 	b	400046b4 <_vfprintf_r+0x314>
    400048d8:	910503e2 	add	x2, sp, #0x140
    400048dc:	aa1403e1 	mov	x1, x20
    400048e0:	aa1803e0 	mov	x0, x24
    400048e4:	b900e3e7 	str	w7, [sp, #224]
    400048e8:	b900ebeb 	str	w11, [sp, #232]
    400048ec:	94002921 	bl	4000ed70 <__sprint_r>
    400048f0:	35fff820 	cbnz	w0, 400047f4 <_vfprintf_r+0x454>
    400048f4:	b940e3e7 	ldr	w7, [sp, #224]
    400048f8:	aa1603e6 	mov	x6, x22
    400048fc:	b940ebeb 	ldr	w11, [sp, #232]
    40004900:	f940abe0 	ldr	x0, [sp, #336]
    40004904:	17ffff86 	b	4000471c <_vfprintf_r+0x37c>
    40004908:	2a0203e1 	mov	w1, w2
    4000490c:	aa1703e3 	mov	x3, x23
    40004910:	93407f39 	sxtw	x25, w25
    40004914:	11000421 	add	w1, w1, #0x1
    40004918:	8b190000 	add	x0, x0, x25
    4000491c:	b9014be1 	str	w1, [sp, #328]
    40004920:	f900abe0 	str	x0, [sp, #336]
    40004924:	a90064c3 	stp	x3, x25, [x6]
    40004928:	71001c3f 	cmp	w1, #0x7
    4000492c:	54fff36d 	b.le	40004798 <_vfprintf_r+0x3f8>
    40004930:	910503e2 	add	x2, sp, #0x140
    40004934:	aa1403e1 	mov	x1, x20
    40004938:	aa1803e0 	mov	x0, x24
    4000493c:	9400290d 	bl	4000ed70 <__sprint_r>
    40004940:	35fff5a0 	cbnz	w0, 400047f4 <_vfprintf_r+0x454>
    40004944:	aa1603e6 	mov	x6, x22
    40004948:	f940abe0 	ldr	x0, [sp, #336]
    4000494c:	17ffff94 	b	4000479c <_vfprintf_r+0x3fc>
    40004950:	3727e63a 	tbnz	w26, #4, 40004614 <_vfprintf_r+0x274>
    40004954:	36308ffa 	tbz	w26, #6, 40005b50 <_vfprintf_r+0x17b0>
    40004958:	37f8a7a0 	tbnz	w0, #31, 40005e4c <_vfprintf_r+0x1aac>
    4000495c:	f94047e0 	ldr	x0, [sp, #136]
    40004960:	91002c01 	add	x1, x0, #0xb
    40004964:	927df021 	and	x1, x1, #0xfffffffffffffff8
    40004968:	f90047e1 	str	x1, [sp, #136]
    4000496c:	79400000 	ldrh	w0, [x0]
    40004970:	52800021 	mov	w1, #0x1                   	// #1
    40004974:	17ffff3a 	b	4000465c <_vfprintf_r+0x2bc>
    40004978:	3727e65a 	tbnz	w26, #4, 40004640 <_vfprintf_r+0x2a0>
    4000497c:	36308ada 	tbz	w26, #6, 40005ad4 <_vfprintf_r+0x1734>
    40004980:	37f8a7a0 	tbnz	w0, #31, 40005e74 <_vfprintf_r+0x1ad4>
    40004984:	f94047e0 	ldr	x0, [sp, #136]
    40004988:	91002c01 	add	x1, x0, #0xb
    4000498c:	927df021 	and	x1, x1, #0xfffffffffffffff8
    40004990:	f90047e1 	str	x1, [sp, #136]
    40004994:	79400000 	ldrh	w0, [x0]
    40004998:	52800001 	mov	w1, #0x0                   	// #0
    4000499c:	17ffff30 	b	4000465c <_vfprintf_r+0x2bc>
    400049a0:	aa1803e0 	mov	x0, x24
    400049a4:	97fff7bb 	bl	40002890 <__sinit>
    400049a8:	17fffe9a 	b	40004410 <_vfprintf_r+0x70>
    400049ac:	3500c681 	cbnz	w1, 4000627c <_vfprintf_r+0x1edc>
    400049b0:	b9409be0 	ldr	w0, [sp, #152]
    400049b4:	3728005a 	tbnz	w26, #5, 400049bc <_vfprintf_r+0x61c>
    400049b8:	362062ba 	tbz	w26, #4, 4000560c <_vfprintf_r+0x126c>
    400049bc:	37f874c0 	tbnz	w0, #31, 40005854 <_vfprintf_r+0x14b4>
    400049c0:	f94047e0 	ldr	x0, [sp, #136]
    400049c4:	91003c01 	add	x1, x0, #0xf
    400049c8:	927df021 	and	x1, x1, #0xfffffffffffffff8
    400049cc:	f90047e1 	str	x1, [sp, #136]
    400049d0:	f9400001 	ldr	x1, [x0]
    400049d4:	aa0103e0 	mov	x0, x1
    400049d8:	b7f85cc1 	tbnz	x1, #63, 40005570 <_vfprintf_r+0x11d0>
    400049dc:	39447fe3 	ldrb	w3, [sp, #287]
    400049e0:	310004ff 	cmn	w7, #0x1
    400049e4:	54000160 	b.eq	40004a10 <_vfprintf_r+0x670>  // b.none
    400049e8:	12187b41 	and	w1, w26, #0xffffff7f
    400049ec:	b9007be1 	str	w1, [sp, #120]
    400049f0:	710000ff 	cmp	w7, #0x0
    400049f4:	fa400800 	ccmp	x0, #0x0, #0x0, eq  // eq = none
    400049f8:	540000a1 	b.ne	40004a0c <_vfprintf_r+0x66c>  // b.any
    400049fc:	aa1603f7 	mov	x23, x22
    40004a00:	52800007 	mov	w7, #0x0                   	// #0
    40004a04:	52800019 	mov	w25, #0x0                   	// #0
    40004a08:	17ffff26 	b	400046a0 <_vfprintf_r+0x300>
    40004a0c:	b9407bfa 	ldr	w26, [sp, #120]
    40004a10:	f100241f 	cmp	x0, #0x9
    40004a14:	54007de8 	b.hi	400059d0 <_vfprintf_r+0x1630>  // b.pmore
    40004a18:	1100c000 	add	w0, w0, #0x30
    40004a1c:	9105fff7 	add	x23, sp, #0x17f
    40004a20:	52800039 	mov	w25, #0x1                   	// #1
    40004a24:	b9007bfa 	str	w26, [sp, #120]
    40004a28:	3905ffe0 	strb	w0, [sp, #383]
    40004a2c:	17ffff1d 	b	400046a0 <_vfprintf_r+0x300>
    40004a30:	4b1503f5 	neg	w21, w21
    40004a34:	f90047e0 	str	x0, [sp, #136]
    40004a38:	39400389 	ldrb	w9, [x28]
    40004a3c:	321e035a 	orr	w26, w26, #0x4
    40004a40:	17fffeb5 	b	40004514 <_vfprintf_r+0x174>
    40004a44:	39400389 	ldrb	w9, [x28]
    40004a48:	35ffd662 	cbnz	w2, 40004514 <_vfprintf_r+0x174>
    40004a4c:	52800021 	mov	w1, #0x1                   	// #1
    40004a50:	52800402 	mov	w2, #0x20                  	// #32
    40004a54:	17fffeb0 	b	40004514 <_vfprintf_r+0x174>
    40004a58:	39400389 	ldrb	w9, [x28]
    40004a5c:	52800021 	mov	w1, #0x1                   	// #1
    40004a60:	52800562 	mov	w2, #0x2b                  	// #43
    40004a64:	17fffeac 	b	40004514 <_vfprintf_r+0x174>
    40004a68:	b9409be0 	ldr	w0, [sp, #152]
    40004a6c:	37f861c0 	tbnz	w0, #31, 400056a4 <_vfprintf_r+0x1304>
    40004a70:	f94047e0 	ldr	x0, [sp, #136]
    40004a74:	91002c00 	add	x0, x0, #0xb
    40004a78:	927df000 	and	x0, x0, #0xfffffffffffffff8
    40004a7c:	f94047e4 	ldr	x4, [sp, #136]
    40004a80:	b9400095 	ldr	w21, [x4]
    40004a84:	37fffd75 	tbnz	w21, #31, 40004a30 <_vfprintf_r+0x690>
    40004a88:	39400389 	ldrb	w9, [x28]
    40004a8c:	f90047e0 	str	x0, [sp, #136]
    40004a90:	17fffea1 	b	40004514 <_vfprintf_r+0x174>
    40004a94:	39400389 	ldrb	w9, [x28]
    40004a98:	3200035a 	orr	w26, w26, #0x1
    40004a9c:	17fffe9e 	b	40004514 <_vfprintf_r+0x174>
    40004aa0:	b9409be0 	ldr	w0, [sp, #152]
    40004aa4:	37f85ec0 	tbnz	w0, #31, 4000567c <_vfprintf_r+0x12dc>
    40004aa8:	f94047e0 	ldr	x0, [sp, #136]
    40004aac:	91002c01 	add	x1, x0, #0xb
    40004ab0:	927df021 	and	x1, x1, #0xfffffffffffffff8
    40004ab4:	f90047e1 	str	x1, [sp, #136]
    40004ab8:	b9400000 	ldr	w0, [x0]
    40004abc:	52800033 	mov	w19, #0x1                   	// #1
    40004ac0:	910563f7 	add	x23, sp, #0x158
    40004ac4:	2a1303f9 	mov	w25, w19
    40004ac8:	39047fff 	strb	wzr, [sp, #287]
    40004acc:	390563e0 	strb	w0, [sp, #344]
    40004ad0:	17fffe9d 	b	40004544 <_vfprintf_r+0x1a4>
    40004ad4:	39400389 	ldrb	w9, [x28]
    40004ad8:	7101b13f 	cmp	w9, #0x6c
    40004adc:	540062e0 	b.eq	40005738 <_vfprintf_r+0x1398>  // b.none
    40004ae0:	321c035a 	orr	w26, w26, #0x10
    40004ae4:	17fffe8c 	b	40004514 <_vfprintf_r+0x174>
    40004ae8:	39400389 	ldrb	w9, [x28]
    40004aec:	321a035a 	orr	w26, w26, #0x40
    40004af0:	17fffe89 	b	40004514 <_vfprintf_r+0x174>
    40004af4:	b9409be0 	ldr	w0, [sp, #152]
    40004af8:	37f859c0 	tbnz	w0, #31, 40005630 <_vfprintf_r+0x1290>
    40004afc:	f94047e0 	ldr	x0, [sp, #136]
    40004b00:	91003c13 	add	x19, x0, #0xf
    40004b04:	927df273 	and	x19, x19, #0xfffffffffffffff8
    40004b08:	f94047e0 	ldr	x0, [sp, #136]
    40004b0c:	39047fff 	strb	wzr, [sp, #287]
    40004b10:	f9400017 	ldr	x23, [x0]
    40004b14:	b40079d7 	cbz	x23, 40005a4c <_vfprintf_r+0x16ac>
    40004b18:	310004ff 	cmn	w7, #0x1
    40004b1c:	54007a80 	b.eq	40005a6c <_vfprintf_r+0x16cc>  // b.none
    40004b20:	93407ce2 	sxtw	x2, w7
    40004b24:	aa1703e0 	mov	x0, x23
    40004b28:	52800001 	mov	w1, #0x0                   	// #0
    40004b2c:	b9007be7 	str	w7, [sp, #120]
    40004b30:	f90047e6 	str	x6, [sp, #136]
    40004b34:	97fff338 	bl	40001814 <memchr>
    40004b38:	b9407be7 	ldr	w7, [sp, #120]
    40004b3c:	f94047e6 	ldr	x6, [sp, #136]
    40004b40:	b400b620 	cbz	x0, 40006204 <_vfprintf_r+0x1e64>
    40004b44:	39447fe3 	ldrb	w3, [sp, #287]
    40004b48:	cb170019 	sub	x25, x0, x23
    40004b4c:	b9007bfa 	str	w26, [sp, #120]
    40004b50:	7100033f 	cmp	w25, #0x0
    40004b54:	f90047f3 	str	x19, [sp, #136]
    40004b58:	52800007 	mov	w7, #0x0                   	// #0
    40004b5c:	b9009fff 	str	wzr, [sp, #156]
    40004b60:	1a9fa333 	csel	w19, w25, wzr, ge  // ge = tcont
    40004b64:	35ffda63 	cbnz	w3, 400046b0 <_vfprintf_r+0x310>
    40004b68:	17fffed3 	b	400046b4 <_vfprintf_r+0x314>
    40004b6c:	39400389 	ldrb	w9, [x28]
    40004b70:	321b035a 	orr	w26, w26, #0x20
    40004b74:	17fffe68 	b	40004514 <_vfprintf_r+0x174>
    40004b78:	b9409be0 	ldr	w0, [sp, #152]
    40004b7c:	37f856c0 	tbnz	w0, #31, 40005654 <_vfprintf_r+0x12b4>
    40004b80:	f94047e3 	ldr	x3, [sp, #136]
    40004b84:	91003c60 	add	x0, x3, #0xf
    40004b88:	927df000 	and	x0, x0, #0xfffffffffffffff8
    40004b8c:	f90047e0 	str	x0, [sp, #136]
    40004b90:	528f0600 	mov	w0, #0x7830                	// #30768
    40004b94:	d00000e2 	adrp	x2, 40022000 <__pow_log_data+0xcc8>
    40004b98:	321f035a 	orr	w26, w26, #0x2
    40004b9c:	91348042 	add	x2, x2, #0xd20
    40004ba0:	52800041 	mov	w1, #0x2                   	// #2
    40004ba4:	52800f1b 	mov	w27, #0x78                  	// #120
    40004ba8:	f9005fe2 	str	x2, [sp, #184]
    40004bac:	790243e0 	strh	w0, [sp, #288]
    40004bb0:	f9400060 	ldr	x0, [x3]
    40004bb4:	17fffeaa 	b	4000465c <_vfprintf_r+0x2bc>
    40004bb8:	3500b7c1 	cbnz	w1, 400062b0 <_vfprintf_r+0x1f10>
    40004bbc:	b9409be0 	ldr	w0, [sp, #152]
    40004bc0:	3628511a 	tbz	w26, #5, 400055e0 <_vfprintf_r+0x1240>
    40004bc4:	37f87280 	tbnz	w0, #31, 40005a14 <_vfprintf_r+0x1674>
    40004bc8:	f94047e0 	ldr	x0, [sp, #136]
    40004bcc:	91003c01 	add	x1, x0, #0xf
    40004bd0:	927df021 	and	x1, x1, #0xfffffffffffffff8
    40004bd4:	f90047e1 	str	x1, [sp, #136]
    40004bd8:	f9400000 	ldr	x0, [x0]
    40004bdc:	b98087e1 	ldrsw	x1, [sp, #132]
    40004be0:	f9000001 	str	x1, [x0]
    40004be4:	17fffe26 	b	4000447c <_vfprintf_r+0xdc>
    40004be8:	3500b461 	cbnz	w1, 40006274 <_vfprintf_r+0x1ed4>
    40004bec:	d00000e0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    40004bf0:	91348000 	add	x0, x0, #0xd20
    40004bf4:	f9005fe0 	str	x0, [sp, #184]
    40004bf8:	b9409be0 	ldr	w0, [sp, #152]
    40004bfc:	3728005a 	tbnz	w26, #5, 40004c04 <_vfprintf_r+0x864>
    40004c00:	36204e1a 	tbz	w26, #4, 400055c0 <_vfprintf_r+0x1220>
    40004c04:	37f863c0 	tbnz	w0, #31, 4000587c <_vfprintf_r+0x14dc>
    40004c08:	f94047e0 	ldr	x0, [sp, #136]
    40004c0c:	91003c01 	add	x1, x0, #0xf
    40004c10:	927df021 	and	x1, x1, #0xfffffffffffffff8
    40004c14:	f90047e1 	str	x1, [sp, #136]
    40004c18:	f9400000 	ldr	x0, [x0]
    40004c1c:	52800041 	mov	w1, #0x2                   	// #2
    40004c20:	3607d1fa 	tbz	w26, #0, 4000465c <_vfprintf_r+0x2bc>
    40004c24:	b4ffd1c0 	cbz	x0, 4000465c <_vfprintf_r+0x2bc>
    40004c28:	52800602 	mov	w2, #0x30                  	// #48
    40004c2c:	2a01035a 	orr	w26, w26, w1
    40004c30:	390483e2 	strb	w2, [sp, #288]
    40004c34:	390487fb 	strb	w27, [sp, #289]
    40004c38:	17fffe89 	b	4000465c <_vfprintf_r+0x2bc>
    40004c3c:	35009461 	cbnz	w1, 40005ec8 <_vfprintf_r+0x1b28>
    40004c40:	321c035a 	orr	w26, w26, #0x10
    40004c44:	17ffff5b 	b	400049b0 <_vfprintf_r+0x610>
    40004c48:	39400389 	ldrb	w9, [x28]
    40004c4c:	3219035a 	orr	w26, w26, #0x80
    40004c50:	17fffe31 	b	40004514 <_vfprintf_r+0x174>
    40004c54:	aa1c03e4 	mov	x4, x28
    40004c58:	3840149b 	ldrb	w27, [x4], #1
    40004c5c:	7100ab7f 	cmp	w27, #0x2a
    40004c60:	5400c820 	b.eq	40006564 <_vfprintf_r+0x21c4>  // b.none
    40004c64:	5100c360 	sub	w0, w27, #0x30
    40004c68:	aa0403fc 	mov	x28, x4
    40004c6c:	52800007 	mov	w7, #0x0                   	// #0
    40004c70:	7100241f 	cmp	w0, #0x9
    40004c74:	54ffc548 	b.hi	4000451c <_vfprintf_r+0x17c>  // b.pmore
    40004c78:	3840179b 	ldrb	w27, [x28], #1
    40004c7c:	0b0708e7 	add	w7, w7, w7, lsl #2
    40004c80:	0b070407 	add	w7, w0, w7, lsl #1
    40004c84:	5100c360 	sub	w0, w27, #0x30
    40004c88:	7100241f 	cmp	w0, #0x9
    40004c8c:	54ffff69 	b.ls	40004c78 <_vfprintf_r+0x8d8>  // b.plast
    40004c90:	17fffe23 	b	4000451c <_vfprintf_r+0x17c>
    40004c94:	3500aec1 	cbnz	w1, 4000626c <_vfprintf_r+0x1ecc>
    40004c98:	d00000e0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    40004c9c:	9134e000 	add	x0, x0, #0xd38
    40004ca0:	f9005fe0 	str	x0, [sp, #184]
    40004ca4:	17ffffd5 	b	40004bf8 <_vfprintf_r+0x858>
    40004ca8:	39400389 	ldrb	w9, [x28]
    40004cac:	321d035a 	orr	w26, w26, #0x8
    40004cb0:	17fffe19 	b	40004514 <_vfprintf_r+0x174>
    40004cb4:	7101977f 	cmp	w27, #0x65
    40004cb8:	54001c6d 	b.le	40005044 <_vfprintf_r+0xca4>
    40004cbc:	1e602108 	fcmp	d8, #0.0
    40004cc0:	540032c1 	b.ne	40005318 <_vfprintf_r+0xf78>  // b.any
    40004cc4:	b9414be1 	ldr	w1, [sp, #328]
    40004cc8:	91000400 	add	x0, x0, #0x1
    40004ccc:	d00000e2 	adrp	x2, 40022000 <__pow_log_data+0xcc8>
    40004cd0:	d2800023 	mov	x3, #0x1                   	// #1
    40004cd4:	91356042 	add	x2, x2, #0xd58
    40004cd8:	11000421 	add	w1, w1, #0x1
    40004cdc:	a9000cc2 	stp	x2, x3, [x6]
    40004ce0:	910040c6 	add	x6, x6, #0x10
    40004ce4:	b9014be1 	str	w1, [sp, #328]
    40004ce8:	f900abe0 	str	x0, [sp, #336]
    40004cec:	71001c3f 	cmp	w1, #0x7
    40004cf0:	5400660c 	b.gt	400059b0 <_vfprintf_r+0x1610>
    40004cf4:	b940abe2 	ldr	w2, [sp, #168]
    40004cf8:	b9412be1 	ldr	w1, [sp, #296]
    40004cfc:	6b02003f 	cmp	w1, w2
    40004d00:	5400444a 	b.ge	40005588 <_vfprintf_r+0x11e8>  // b.tcont
    40004d04:	f9405be2 	ldr	x2, [sp, #176]
    40004d08:	b9414be1 	ldr	w1, [sp, #328]
    40004d0c:	f94063e3 	ldr	x3, [sp, #192]
    40004d10:	11000421 	add	w1, w1, #0x1
    40004d14:	8b020000 	add	x0, x0, x2
    40004d18:	a90008c3 	stp	x3, x2, [x6]
    40004d1c:	910040c6 	add	x6, x6, #0x10
    40004d20:	b9014be1 	str	w1, [sp, #328]
    40004d24:	f900abe0 	str	x0, [sp, #336]
    40004d28:	71001c3f 	cmp	w1, #0x7
    40004d2c:	54004f6c 	b.gt	40005718 <_vfprintf_r+0x1378>
    40004d30:	b940abe1 	ldr	w1, [sp, #168]
    40004d34:	51000439 	sub	w25, w1, #0x1
    40004d38:	7100033f 	cmp	w25, #0x0
    40004d3c:	54ffd30d 	b.le	4000479c <_vfprintf_r+0x3fc>
    40004d40:	b9414be1 	ldr	w1, [sp, #328]
    40004d44:	d00000e3 	adrp	x3, 40022000 <__pow_log_data+0xcc8>
    40004d48:	9135c063 	add	x3, x3, #0xd70
    40004d4c:	d280021a 	mov	x26, #0x10                  	// #16
    40004d50:	2a0103e2 	mov	w2, w1
    40004d54:	aa0303f7 	mov	x23, x3
    40004d58:	7100433f 	cmp	w25, #0x10
    40004d5c:	540000ac 	b.gt	40004d70 <_vfprintf_r+0x9d0>
    40004d60:	17fffeec 	b	40004910 <_vfprintf_r+0x570>
    40004d64:	51004339 	sub	w25, w25, #0x10
    40004d68:	7100433f 	cmp	w25, #0x10
    40004d6c:	54ffdced 	b.le	40004908 <_vfprintf_r+0x568>
    40004d70:	91004000 	add	x0, x0, #0x10
    40004d74:	11000442 	add	w2, w2, #0x1
    40004d78:	a90068d7 	stp	x23, x26, [x6]
    40004d7c:	910040c6 	add	x6, x6, #0x10
    40004d80:	b9014be2 	str	w2, [sp, #328]
    40004d84:	f900abe0 	str	x0, [sp, #336]
    40004d88:	71001c5f 	cmp	w2, #0x7
    40004d8c:	54fffecd 	b.le	40004d64 <_vfprintf_r+0x9c4>
    40004d90:	910503e2 	add	x2, sp, #0x140
    40004d94:	aa1403e1 	mov	x1, x20
    40004d98:	aa1803e0 	mov	x0, x24
    40004d9c:	940027f5 	bl	4000ed70 <__sprint_r>
    40004da0:	35ffd2a0 	cbnz	w0, 400047f4 <_vfprintf_r+0x454>
    40004da4:	b9414be2 	ldr	w2, [sp, #328]
    40004da8:	aa1603e6 	mov	x6, x22
    40004dac:	f940abe0 	ldr	x0, [sp, #336]
    40004db0:	17ffffed 	b	40004d64 <_vfprintf_r+0x9c4>
    40004db4:	4b1302ba 	sub	w26, w21, w19
    40004db8:	7100035f 	cmp	w26, #0x0
    40004dbc:	54ffcd0d 	b.le	4000475c <_vfprintf_r+0x3bc>
    40004dc0:	d00000e3 	adrp	x3, 40022000 <__pow_log_data+0xcc8>
    40004dc4:	b9414be1 	ldr	w1, [sp, #328]
    40004dc8:	9135c063 	add	x3, x3, #0xd70
    40004dcc:	7100435f 	cmp	w26, #0x10
    40004dd0:	5400054d 	b.le	40004e78 <_vfprintf_r+0xad8>
    40004dd4:	2a0103e2 	mov	w2, w1
    40004dd8:	aa1803e1 	mov	x1, x24
    40004ddc:	d2800205 	mov	x5, #0x10                  	// #16
    40004de0:	2a1303f8 	mov	w24, w19
    40004de4:	aa0103f3 	mov	x19, x1
    40004de8:	b90093f5 	str	w21, [sp, #144]
    40004dec:	aa1403f5 	mov	x21, x20
    40004df0:	aa0303f4 	mov	x20, x3
    40004df4:	b900ebe7 	str	w7, [sp, #232]
    40004df8:	14000004 	b	40004e08 <_vfprintf_r+0xa68>
    40004dfc:	5100435a 	sub	w26, w26, #0x10
    40004e00:	7100435f 	cmp	w26, #0x10
    40004e04:	540002ad 	b.le	40004e58 <_vfprintf_r+0xab8>
    40004e08:	91004000 	add	x0, x0, #0x10
    40004e0c:	11000442 	add	w2, w2, #0x1
    40004e10:	a90014d4 	stp	x20, x5, [x6]
    40004e14:	910040c6 	add	x6, x6, #0x10
    40004e18:	b9014be2 	str	w2, [sp, #328]
    40004e1c:	f900abe0 	str	x0, [sp, #336]
    40004e20:	71001c5f 	cmp	w2, #0x7
    40004e24:	54fffecd 	b.le	40004dfc <_vfprintf_r+0xa5c>
    40004e28:	910503e2 	add	x2, sp, #0x140
    40004e2c:	aa1503e1 	mov	x1, x21
    40004e30:	aa1303e0 	mov	x0, x19
    40004e34:	940027cf 	bl	4000ed70 <__sprint_r>
    40004e38:	35003920 	cbnz	w0, 4000555c <_vfprintf_r+0x11bc>
    40004e3c:	5100435a 	sub	w26, w26, #0x10
    40004e40:	b9414be2 	ldr	w2, [sp, #328]
    40004e44:	aa1603e6 	mov	x6, x22
    40004e48:	d2800205 	mov	x5, #0x10                  	// #16
    40004e4c:	f940abe0 	ldr	x0, [sp, #336]
    40004e50:	7100435f 	cmp	w26, #0x10
    40004e54:	54fffdac 	b.gt	40004e08 <_vfprintf_r+0xa68>
    40004e58:	2a0203e1 	mov	w1, w2
    40004e5c:	aa1403e3 	mov	x3, x20
    40004e60:	aa1303e2 	mov	x2, x19
    40004e64:	aa1503f4 	mov	x20, x21
    40004e68:	b940ebe7 	ldr	w7, [sp, #232]
    40004e6c:	2a1803f3 	mov	w19, w24
    40004e70:	b94093f5 	ldr	w21, [sp, #144]
    40004e74:	aa0203f8 	mov	x24, x2
    40004e78:	93407f5a 	sxtw	x26, w26
    40004e7c:	11000421 	add	w1, w1, #0x1
    40004e80:	8b1a0000 	add	x0, x0, x26
    40004e84:	a90068c3 	stp	x3, x26, [x6]
    40004e88:	910040c6 	add	x6, x6, #0x10
    40004e8c:	b9014be1 	str	w1, [sp, #328]
    40004e90:	f900abe0 	str	x0, [sp, #336]
    40004e94:	71001c3f 	cmp	w1, #0x7
    40004e98:	54ffc62d 	b.le	4000475c <_vfprintf_r+0x3bc>
    40004e9c:	910503e2 	add	x2, sp, #0x140
    40004ea0:	aa1403e1 	mov	x1, x20
    40004ea4:	aa1803e0 	mov	x0, x24
    40004ea8:	b90093e7 	str	w7, [sp, #144]
    40004eac:	940027b1 	bl	4000ed70 <__sprint_r>
    40004eb0:	35ffca20 	cbnz	w0, 400047f4 <_vfprintf_r+0x454>
    40004eb4:	b94093e7 	ldr	w7, [sp, #144]
    40004eb8:	aa1603e6 	mov	x6, x22
    40004ebc:	f940abe0 	ldr	x0, [sp, #336]
    40004ec0:	17fffe27 	b	4000475c <_vfprintf_r+0x3bc>
    40004ec4:	d00000e3 	adrp	x3, 40022000 <__pow_log_data+0xcc8>
    40004ec8:	b9414be1 	ldr	w1, [sp, #328]
    40004ecc:	9135c063 	add	x3, x3, #0xd70
    40004ed0:	7100435f 	cmp	w26, #0x10
    40004ed4:	5400048d 	b.le	40004f64 <_vfprintf_r+0xbc4>
    40004ed8:	2a0103e2 	mov	w2, w1
    40004edc:	d2800205 	mov	x5, #0x10                  	// #16
    40004ee0:	b90093f3 	str	w19, [sp, #144]
    40004ee4:	aa1403f3 	mov	x19, x20
    40004ee8:	aa1803f4 	mov	x20, x24
    40004eec:	aa0303f8 	mov	x24, x3
    40004ef0:	14000004 	b	40004f00 <_vfprintf_r+0xb60>
    40004ef4:	5100435a 	sub	w26, w26, #0x10
    40004ef8:	7100435f 	cmp	w26, #0x10
    40004efc:	540002ad 	b.le	40004f50 <_vfprintf_r+0xbb0>
    40004f00:	91004000 	add	x0, x0, #0x10
    40004f04:	11000442 	add	w2, w2, #0x1
    40004f08:	a90014d8 	stp	x24, x5, [x6]
    40004f0c:	910040c6 	add	x6, x6, #0x10
    40004f10:	b9014be2 	str	w2, [sp, #328]
    40004f14:	f900abe0 	str	x0, [sp, #336]
    40004f18:	71001c5f 	cmp	w2, #0x7
    40004f1c:	54fffecd 	b.le	40004ef4 <_vfprintf_r+0xb54>
    40004f20:	910503e2 	add	x2, sp, #0x140
    40004f24:	aa1303e1 	mov	x1, x19
    40004f28:	aa1403e0 	mov	x0, x20
    40004f2c:	94002791 	bl	4000ed70 <__sprint_r>
    40004f30:	35ffc600 	cbnz	w0, 400047f0 <_vfprintf_r+0x450>
    40004f34:	5100435a 	sub	w26, w26, #0x10
    40004f38:	b9414be2 	ldr	w2, [sp, #328]
    40004f3c:	aa1603e6 	mov	x6, x22
    40004f40:	d2800205 	mov	x5, #0x10                  	// #16
    40004f44:	f940abe0 	ldr	x0, [sp, #336]
    40004f48:	7100435f 	cmp	w26, #0x10
    40004f4c:	54fffdac 	b.gt	40004f00 <_vfprintf_r+0xb60>
    40004f50:	aa1803e3 	mov	x3, x24
    40004f54:	aa1403f8 	mov	x24, x20
    40004f58:	aa1303f4 	mov	x20, x19
    40004f5c:	b94093f3 	ldr	w19, [sp, #144]
    40004f60:	2a0203e1 	mov	w1, w2
    40004f64:	93407f5a 	sxtw	x26, w26
    40004f68:	11000421 	add	w1, w1, #0x1
    40004f6c:	8b1a0000 	add	x0, x0, x26
    40004f70:	a90068c3 	stp	x3, x26, [x6]
    40004f74:	910040c6 	add	x6, x6, #0x10
    40004f78:	b9014be1 	str	w1, [sp, #328]
    40004f7c:	f900abe0 	str	x0, [sp, #336]
    40004f80:	71001c3f 	cmp	w1, #0x7
    40004f84:	54ffbf2d 	b.le	40004768 <_vfprintf_r+0x3c8>
    40004f88:	910503e2 	add	x2, sp, #0x140
    40004f8c:	aa1403e1 	mov	x1, x20
    40004f90:	aa1803e0 	mov	x0, x24
    40004f94:	94002777 	bl	4000ed70 <__sprint_r>
    40004f98:	35ffc2e0 	cbnz	w0, 400047f4 <_vfprintf_r+0x454>
    40004f9c:	aa1603e6 	mov	x6, x22
    40004fa0:	f940abe0 	ldr	x0, [sp, #336]
    40004fa4:	17fffdf1 	b	40004768 <_vfprintf_r+0x3c8>
    40004fa8:	2a0203fa 	mov	w26, w2
    40004fac:	d503201f 	nop
    40004fb0:	7100043f 	cmp	w1, #0x1
    40004fb4:	54ffd2e0 	b.eq	40004a10 <_vfprintf_r+0x670>  // b.none
    40004fb8:	aa1603f7 	mov	x23, x22
    40004fbc:	7100083f 	cmp	w1, #0x2
    40004fc0:	54000141 	b.ne	40004fe8 <_vfprintf_r+0xc48>  // b.any
    40004fc4:	f9405fe2 	ldr	x2, [sp, #184]
    40004fc8:	92400c01 	and	x1, x0, #0xf
    40004fcc:	d344fc00 	lsr	x0, x0, #4
    40004fd0:	38616841 	ldrb	w1, [x2, x1]
    40004fd4:	381ffee1 	strb	w1, [x23, #-1]!
    40004fd8:	b5ffff80 	cbnz	x0, 40004fc8 <_vfprintf_r+0xc28>
    40004fdc:	4b1702d9 	sub	w25, w22, w23
    40004fe0:	b9007bfa 	str	w26, [sp, #120]
    40004fe4:	17fffdaf 	b	400046a0 <_vfprintf_r+0x300>
    40004fe8:	12000801 	and	w1, w0, #0x7
    40004fec:	aa1703e2 	mov	x2, x23
    40004ff0:	1100c021 	add	w1, w1, #0x30
    40004ff4:	381ffee1 	strb	w1, [x23, #-1]!
    40004ff8:	d343fc00 	lsr	x0, x0, #3
    40004ffc:	b5ffff60 	cbnz	x0, 40004fe8 <_vfprintf_r+0xc48>
    40005000:	7100c03f 	cmp	w1, #0x30
    40005004:	1a9f07e0 	cset	w0, ne  // ne = any
    40005008:	6a00035f 	tst	w26, w0
    4000500c:	54fffe80 	b.eq	40004fdc <_vfprintf_r+0xc3c>  // b.none
    40005010:	d1000842 	sub	x2, x2, #0x2
    40005014:	52800600 	mov	w0, #0x30                  	// #48
    40005018:	4b0202d9 	sub	w25, w22, w2
    4000501c:	381ff2e0 	sturb	w0, [x23, #-1]
    40005020:	aa0203f7 	mov	x23, x2
    40005024:	b9007bfa 	str	w26, [sp, #120]
    40005028:	17fffd9e 	b	400046a0 <_vfprintf_r+0x300>
    4000502c:	910503e2 	add	x2, sp, #0x140
    40005030:	aa1403e1 	mov	x1, x20
    40005034:	aa1803e0 	mov	x0, x24
    40005038:	9400274e 	bl	4000ed70 <__sprint_r>
    4000503c:	34ffbc60 	cbz	w0, 400047c8 <_vfprintf_r+0x428>
    40005040:	17fffded 	b	400047f4 <_vfprintf_r+0x454>
    40005044:	b9414be1 	ldr	w1, [sp, #328]
    40005048:	91000400 	add	x0, x0, #0x1
    4000504c:	b940abe3 	ldr	w3, [sp, #168]
    40005050:	910040c2 	add	x2, x6, #0x10
    40005054:	11000421 	add	w1, w1, #0x1
    40005058:	7100047f 	cmp	w3, #0x1
    4000505c:	540021cd 	b.le	40005494 <_vfprintf_r+0x10f4>
    40005060:	d2800023 	mov	x3, #0x1                   	// #1
    40005064:	a9000cd7 	stp	x23, x3, [x6]
    40005068:	b9014be1 	str	w1, [sp, #328]
    4000506c:	f900abe0 	str	x0, [sp, #336]
    40005070:	71001c3f 	cmp	w1, #0x7
    40005074:	54003a4c 	b.gt	400057bc <_vfprintf_r+0x141c>
    40005078:	f9405be3 	ldr	x3, [sp, #176]
    4000507c:	11000421 	add	w1, w1, #0x1
    40005080:	f94063e4 	ldr	x4, [sp, #192]
    40005084:	8b030000 	add	x0, x0, x3
    40005088:	a9000c44 	stp	x4, x3, [x2]
    4000508c:	91004042 	add	x2, x2, #0x10
    40005090:	b9014be1 	str	w1, [sp, #328]
    40005094:	f900abe0 	str	x0, [sp, #336]
    40005098:	71001c3f 	cmp	w1, #0x7
    4000509c:	54003a2c 	b.gt	400057e0 <_vfprintf_r+0x1440>
    400050a0:	1e602108 	fcmp	d8, #0.0
    400050a4:	b940abe3 	ldr	w3, [sp, #168]
    400050a8:	51000479 	sub	w25, w3, #0x1
    400050ac:	540021c0 	b.eq	400054e4 <_vfprintf_r+0x1144>  // b.none
    400050b0:	93407f39 	sxtw	x25, w25
    400050b4:	11000421 	add	w1, w1, #0x1
    400050b8:	8b190000 	add	x0, x0, x25
    400050bc:	b9014be1 	str	w1, [sp, #328]
    400050c0:	f900abe0 	str	x0, [sp, #336]
    400050c4:	910006e4 	add	x4, x23, #0x1
    400050c8:	f9000044 	str	x4, [x2]
    400050cc:	f9000459 	str	x25, [x2, #8]
    400050d0:	71001c3f 	cmp	w1, #0x7
    400050d4:	5400310c 	b.gt	400056f4 <_vfprintf_r+0x1354>
    400050d8:	91004042 	add	x2, x2, #0x10
    400050dc:	b980d3e3 	ldrsw	x3, [sp, #208]
    400050e0:	11000421 	add	w1, w1, #0x1
    400050e4:	9104c3e5 	add	x5, sp, #0x130
    400050e8:	a9000c45 	stp	x5, x3, [x2]
    400050ec:	8b000060 	add	x0, x3, x0
    400050f0:	b9014be1 	str	w1, [sp, #328]
    400050f4:	91004046 	add	x6, x2, #0x10
    400050f8:	f900abe0 	str	x0, [sp, #336]
    400050fc:	71001c3f 	cmp	w1, #0x7
    40005100:	54ffb4ed 	b.le	4000479c <_vfprintf_r+0x3fc>
    40005104:	910503e2 	add	x2, sp, #0x140
    40005108:	aa1403e1 	mov	x1, x20
    4000510c:	aa1803e0 	mov	x0, x24
    40005110:	94002718 	bl	4000ed70 <__sprint_r>
    40005114:	35ffb700 	cbnz	w0, 400047f4 <_vfprintf_r+0x454>
    40005118:	aa1603e6 	mov	x6, x22
    4000511c:	f940abe0 	ldr	x0, [sp, #336]
    40005120:	17fffd9f 	b	4000479c <_vfprintf_r+0x3fc>
    40005124:	b00000e5 	adrp	x5, 40022000 <__pow_log_data+0xcc8>
    40005128:	b9414be1 	ldr	w1, [sp, #328]
    4000512c:	913580ba 	add	x26, x5, #0xd60
    40005130:	7100407f 	cmp	w3, #0x10
    40005134:	5400058d 	b.le	400051e4 <_vfprintf_r+0xe44>
    40005138:	2a0103e2 	mov	w2, w1
    4000513c:	d280020a 	mov	x10, #0x10                  	// #16
    40005140:	f90073f7 	str	x23, [sp, #224]
    40005144:	aa1a03f7 	mov	x23, x26
    40005148:	2a1303fa 	mov	w26, w19
    4000514c:	aa1803f3 	mov	x19, x24
    40005150:	2a0703f8 	mov	w24, w7
    40005154:	291d57eb 	stp	w11, w21, [sp, #232]
    40005158:	aa1403f5 	mov	x21, x20
    4000515c:	2a0303f4 	mov	w20, w3
    40005160:	14000004 	b	40005170 <_vfprintf_r+0xdd0>
    40005164:	51004294 	sub	w20, w20, #0x10
    40005168:	7100429f 	cmp	w20, #0x10
    4000516c:	540002ad 	b.le	400051c0 <_vfprintf_r+0xe20>
    40005170:	91004000 	add	x0, x0, #0x10
    40005174:	11000442 	add	w2, w2, #0x1
    40005178:	a90028d7 	stp	x23, x10, [x6]
    4000517c:	910040c6 	add	x6, x6, #0x10
    40005180:	b9014be2 	str	w2, [sp, #328]
    40005184:	f900abe0 	str	x0, [sp, #336]
    40005188:	71001c5f 	cmp	w2, #0x7
    4000518c:	54fffecd 	b.le	40005164 <_vfprintf_r+0xdc4>
    40005190:	910503e2 	add	x2, sp, #0x140
    40005194:	aa1503e1 	mov	x1, x21
    40005198:	aa1303e0 	mov	x0, x19
    4000519c:	940026f5 	bl	4000ed70 <__sprint_r>
    400051a0:	35001de0 	cbnz	w0, 4000555c <_vfprintf_r+0x11bc>
    400051a4:	51004294 	sub	w20, w20, #0x10
    400051a8:	b9414be2 	ldr	w2, [sp, #328]
    400051ac:	aa1603e6 	mov	x6, x22
    400051b0:	d280020a 	mov	x10, #0x10                  	// #16
    400051b4:	f940abe0 	ldr	x0, [sp, #336]
    400051b8:	7100429f 	cmp	w20, #0x10
    400051bc:	54fffdac 	b.gt	40005170 <_vfprintf_r+0xdd0>
    400051c0:	2a1803e7 	mov	w7, w24
    400051c4:	2a1403e3 	mov	w3, w20
    400051c8:	aa1303f8 	mov	x24, x19
    400051cc:	aa1503f4 	mov	x20, x21
    400051d0:	2a1a03f3 	mov	w19, w26
    400051d4:	aa1703fa 	mov	x26, x23
    400051d8:	295d57eb 	ldp	w11, w21, [sp, #232]
    400051dc:	2a0203e1 	mov	w1, w2
    400051e0:	f94073f7 	ldr	x23, [sp, #224]
    400051e4:	93407c63 	sxtw	x3, w3
    400051e8:	11000421 	add	w1, w1, #0x1
    400051ec:	8b030000 	add	x0, x0, x3
    400051f0:	a9000cda 	stp	x26, x3, [x6]
    400051f4:	910040c6 	add	x6, x6, #0x10
    400051f8:	b9014be1 	str	w1, [sp, #328]
    400051fc:	f900abe0 	str	x0, [sp, #336]
    40005200:	71001c3f 	cmp	w1, #0x7
    40005204:	54ffa70d 	b.le	400046e4 <_vfprintf_r+0x344>
    40005208:	910503e2 	add	x2, sp, #0x140
    4000520c:	aa1403e1 	mov	x1, x20
    40005210:	aa1803e0 	mov	x0, x24
    40005214:	b900e3e7 	str	w7, [sp, #224]
    40005218:	b900ebeb 	str	w11, [sp, #232]
    4000521c:	940026d5 	bl	4000ed70 <__sprint_r>
    40005220:	35ffaea0 	cbnz	w0, 400047f4 <_vfprintf_r+0x454>
    40005224:	b940e3e7 	ldr	w7, [sp, #224]
    40005228:	aa1603e6 	mov	x6, x22
    4000522c:	b940ebeb 	ldr	w11, [sp, #232]
    40005230:	f940abe0 	ldr	x0, [sp, #336]
    40005234:	17fffd2c 	b	400046e4 <_vfprintf_r+0x344>
    40005238:	910503e2 	add	x2, sp, #0x140
    4000523c:	aa1403e1 	mov	x1, x20
    40005240:	aa1803e0 	mov	x0, x24
    40005244:	b900ebe7 	str	w7, [sp, #232]
    40005248:	940026ca 	bl	4000ed70 <__sprint_r>
    4000524c:	35ffad40 	cbnz	w0, 400047f4 <_vfprintf_r+0x454>
    40005250:	b940ebe7 	ldr	w7, [sp, #232]
    40005254:	aa1603e6 	mov	x6, x22
    40005258:	f940abe0 	ldr	x0, [sp, #336]
    4000525c:	17fffd3d 	b	40004750 <_vfprintf_r+0x3b0>
    40005260:	b9414be1 	ldr	w1, [sp, #328]
    40005264:	b00000e5 	adrp	x5, 40022000 <__pow_log_data+0xcc8>
    40005268:	d2800219 	mov	x25, #0x10                  	// #16
    4000526c:	913580ba 	add	x26, x5, #0xd60
    40005270:	2a0103e2 	mov	w2, w1
    40005274:	710042ff 	cmp	w23, #0x10
    40005278:	540000ac 	b.gt	4000528c <_vfprintf_r+0xeec>
    4000527c:	14000018 	b	400052dc <_vfprintf_r+0xf3c>
    40005280:	510042f7 	sub	w23, w23, #0x10
    40005284:	710042ff 	cmp	w23, #0x10
    40005288:	5400028d 	b.le	400052d8 <_vfprintf_r+0xf38>
    4000528c:	91004000 	add	x0, x0, #0x10
    40005290:	11000442 	add	w2, w2, #0x1
    40005294:	a90064da 	stp	x26, x25, [x6]
    40005298:	910040c6 	add	x6, x6, #0x10
    4000529c:	b9014be2 	str	w2, [sp, #328]
    400052a0:	f900abe0 	str	x0, [sp, #336]
    400052a4:	71001c5f 	cmp	w2, #0x7
    400052a8:	54fffecd 	b.le	40005280 <_vfprintf_r+0xee0>
    400052ac:	910503e2 	add	x2, sp, #0x140
    400052b0:	aa1403e1 	mov	x1, x20
    400052b4:	aa1803e0 	mov	x0, x24
    400052b8:	940026ae 	bl	4000ed70 <__sprint_r>
    400052bc:	35ffa9c0 	cbnz	w0, 400047f4 <_vfprintf_r+0x454>
    400052c0:	510042f7 	sub	w23, w23, #0x10
    400052c4:	b9414be2 	ldr	w2, [sp, #328]
    400052c8:	aa1603e6 	mov	x6, x22
    400052cc:	f940abe0 	ldr	x0, [sp, #336]
    400052d0:	710042ff 	cmp	w23, #0x10
    400052d4:	54fffdcc 	b.gt	4000528c <_vfprintf_r+0xeec>
    400052d8:	2a0203e1 	mov	w1, w2
    400052dc:	93407ef7 	sxtw	x23, w23
    400052e0:	11000421 	add	w1, w1, #0x1
    400052e4:	8b170000 	add	x0, x0, x23
    400052e8:	a9005cda 	stp	x26, x23, [x6]
    400052ec:	b9014be1 	str	w1, [sp, #328]
    400052f0:	f900abe0 	str	x0, [sp, #336]
    400052f4:	71001c3f 	cmp	w1, #0x7
    400052f8:	54ffa5cd 	b.le	400047b0 <_vfprintf_r+0x410>
    400052fc:	910503e2 	add	x2, sp, #0x140
    40005300:	aa1403e1 	mov	x1, x20
    40005304:	aa1803e0 	mov	x0, x24
    40005308:	9400269a 	bl	4000ed70 <__sprint_r>
    4000530c:	35ffa740 	cbnz	w0, 400047f4 <_vfprintf_r+0x454>
    40005310:	f940abe0 	ldr	x0, [sp, #336]
    40005314:	17fffd27 	b	400047b0 <_vfprintf_r+0x410>
    40005318:	b9412be2 	ldr	w2, [sp, #296]
    4000531c:	7100005f 	cmp	w2, #0x0
    40005320:	54002c2d 	b.le	400058a4 <_vfprintf_r+0x1504>
    40005324:	b9409fe1 	ldr	w1, [sp, #156]
    40005328:	b940abe2 	ldr	w2, [sp, #168]
    4000532c:	6b02003f 	cmp	w1, w2
    40005330:	1a82d039 	csel	w25, w1, w2, le
    40005334:	7100033f 	cmp	w25, #0x0
    40005338:	5400016d 	b.le	40005364 <_vfprintf_r+0xfc4>
    4000533c:	b9414be1 	ldr	w1, [sp, #328]
    40005340:	93407f22 	sxtw	x2, w25
    40005344:	8b020000 	add	x0, x0, x2
    40005348:	a90008d7 	stp	x23, x2, [x6]
    4000534c:	11000421 	add	w1, w1, #0x1
    40005350:	b9014be1 	str	w1, [sp, #328]
    40005354:	910040c6 	add	x6, x6, #0x10
    40005358:	f900abe0 	str	x0, [sp, #336]
    4000535c:	71001c3f 	cmp	w1, #0x7
    40005360:	54004fac 	b.gt	40005d54 <_vfprintf_r+0x19b4>
    40005364:	b9409fe1 	ldr	w1, [sp, #156]
    40005368:	7100033f 	cmp	w25, #0x0
    4000536c:	1a9fa339 	csel	w25, w25, wzr, ge  // ge = tcont
    40005370:	4b190039 	sub	w25, w1, w25
    40005374:	7100033f 	cmp	w25, #0x0
    40005378:	54001e8c 	b.gt	40005748 <_vfprintf_r+0x13a8>
    4000537c:	b940abe1 	ldr	w1, [sp, #168]
    40005380:	b9412bf9 	ldr	w25, [sp, #296]
    40005384:	6b01033f 	cmp	w25, w1
    40005388:	5400006b 	b.lt	40005394 <_vfprintf_r+0xff4>  // b.tstop
    4000538c:	f9403fe1 	ldr	x1, [sp, #120]
    40005390:	36004d41 	tbz	w1, #0, 40005d38 <_vfprintf_r+0x1998>
    40005394:	f9405be2 	ldr	x2, [sp, #176]
    40005398:	b9414be1 	ldr	w1, [sp, #328]
    4000539c:	f94063e3 	ldr	x3, [sp, #192]
    400053a0:	11000421 	add	w1, w1, #0x1
    400053a4:	8b020000 	add	x0, x0, x2
    400053a8:	a90008c3 	stp	x3, x2, [x6]
    400053ac:	910040c6 	add	x6, x6, #0x10
    400053b0:	b9014be1 	str	w1, [sp, #328]
    400053b4:	f900abe0 	str	x0, [sp, #336]
    400053b8:	71001c3f 	cmp	w1, #0x7
    400053bc:	54006c8c 	b.gt	4000614c <_vfprintf_r+0x1dac>
    400053c0:	b940abe1 	ldr	w1, [sp, #168]
    400053c4:	b9409fe2 	ldr	w2, [sp, #156]
    400053c8:	4b190039 	sub	w25, w1, w25
    400053cc:	4b02003a 	sub	w26, w1, w2
    400053d0:	6b1a033f 	cmp	w25, w26
    400053d4:	1a9ad33a 	csel	w26, w25, w26, le
    400053d8:	7100035f 	cmp	w26, #0x0
    400053dc:	5400018d 	b.le	4000540c <_vfprintf_r+0x106c>
    400053e0:	b9414be1 	ldr	w1, [sp, #328]
    400053e4:	8b22c2e4 	add	x4, x23, w2, sxtw
    400053e8:	93407f42 	sxtw	x2, w26
    400053ec:	a90008c4 	stp	x4, x2, [x6]
    400053f0:	8b020000 	add	x0, x0, x2
    400053f4:	11000421 	add	w1, w1, #0x1
    400053f8:	b9014be1 	str	w1, [sp, #328]
    400053fc:	f900abe0 	str	x0, [sp, #336]
    40005400:	910040c6 	add	x6, x6, #0x10
    40005404:	71001c3f 	cmp	w1, #0x7
    40005408:	54006e8c 	b.gt	400061d8 <_vfprintf_r+0x1e38>
    4000540c:	7100035f 	cmp	w26, #0x0
    40005410:	1a9fa35a 	csel	w26, w26, wzr, ge  // ge = tcont
    40005414:	4b1a0339 	sub	w25, w25, w26
    40005418:	7100033f 	cmp	w25, #0x0
    4000541c:	54ff9c0d 	b.le	4000479c <_vfprintf_r+0x3fc>
    40005420:	b9414be1 	ldr	w1, [sp, #328]
    40005424:	b00000e3 	adrp	x3, 40022000 <__pow_log_data+0xcc8>
    40005428:	9135c063 	add	x3, x3, #0xd70
    4000542c:	d280021a 	mov	x26, #0x10                  	// #16
    40005430:	2a0103e2 	mov	w2, w1
    40005434:	aa0303f7 	mov	x23, x3
    40005438:	7100433f 	cmp	w25, #0x10
    4000543c:	540000ac 	b.gt	40005450 <_vfprintf_r+0x10b0>
    40005440:	17fffd34 	b	40004910 <_vfprintf_r+0x570>
    40005444:	51004339 	sub	w25, w25, #0x10
    40005448:	7100433f 	cmp	w25, #0x10
    4000544c:	54ffa5ed 	b.le	40004908 <_vfprintf_r+0x568>
    40005450:	91004000 	add	x0, x0, #0x10
    40005454:	11000442 	add	w2, w2, #0x1
    40005458:	a90068d7 	stp	x23, x26, [x6]
    4000545c:	910040c6 	add	x6, x6, #0x10
    40005460:	b9014be2 	str	w2, [sp, #328]
    40005464:	f900abe0 	str	x0, [sp, #336]
    40005468:	71001c5f 	cmp	w2, #0x7
    4000546c:	54fffecd 	b.le	40005444 <_vfprintf_r+0x10a4>
    40005470:	910503e2 	add	x2, sp, #0x140
    40005474:	aa1403e1 	mov	x1, x20
    40005478:	aa1803e0 	mov	x0, x24
    4000547c:	9400263d 	bl	4000ed70 <__sprint_r>
    40005480:	35ff9ba0 	cbnz	w0, 400047f4 <_vfprintf_r+0x454>
    40005484:	b9414be2 	ldr	w2, [sp, #328]
    40005488:	aa1603e6 	mov	x6, x22
    4000548c:	f940abe0 	ldr	x0, [sp, #336]
    40005490:	17ffffed 	b	40005444 <_vfprintf_r+0x10a4>
    40005494:	f9403fe3 	ldr	x3, [sp, #120]
    40005498:	3707de43 	tbnz	w3, #0, 40005060 <_vfprintf_r+0xcc0>
    4000549c:	d2800023 	mov	x3, #0x1                   	// #1
    400054a0:	a9000cd7 	stp	x23, x3, [x6]
    400054a4:	b9014be1 	str	w1, [sp, #328]
    400054a8:	f900abe0 	str	x0, [sp, #336]
    400054ac:	71001c3f 	cmp	w1, #0x7
    400054b0:	54ffe16d 	b.le	400050dc <_vfprintf_r+0xd3c>
    400054b4:	910503e2 	add	x2, sp, #0x140
    400054b8:	aa1403e1 	mov	x1, x20
    400054bc:	aa1803e0 	mov	x0, x24
    400054c0:	9400262c 	bl	4000ed70 <__sprint_r>
    400054c4:	35ff9980 	cbnz	w0, 400047f4 <_vfprintf_r+0x454>
    400054c8:	b9414be1 	ldr	w1, [sp, #328]
    400054cc:	aa1603e2 	mov	x2, x22
    400054d0:	f940abe0 	ldr	x0, [sp, #336]
    400054d4:	17ffff02 	b	400050dc <_vfprintf_r+0xd3c>
    400054d8:	aa1603f7 	mov	x23, x22
    400054dc:	52800007 	mov	w7, #0x0                   	// #0
    400054e0:	17fffc70 	b	400046a0 <_vfprintf_r+0x300>
    400054e4:	7100033f 	cmp	w25, #0x0
    400054e8:	54ffdfad 	b.le	400050dc <_vfprintf_r+0xd3c>
    400054ec:	b00000e3 	adrp	x3, 40022000 <__pow_log_data+0xcc8>
    400054f0:	9135c063 	add	x3, x3, #0xd70
    400054f4:	2a0103e4 	mov	w4, w1
    400054f8:	aa0303f7 	mov	x23, x3
    400054fc:	d280021a 	mov	x26, #0x10                  	// #16
    40005500:	7100433f 	cmp	w25, #0x10
    40005504:	540000ac 	b.gt	40005518 <_vfprintf_r+0x1178>
    40005508:	14000072 	b	400056d0 <_vfprintf_r+0x1330>
    4000550c:	51004339 	sub	w25, w25, #0x10
    40005510:	7100433f 	cmp	w25, #0x10
    40005514:	54000dad 	b.le	400056c8 <_vfprintf_r+0x1328>
    40005518:	91004000 	add	x0, x0, #0x10
    4000551c:	11000484 	add	w4, w4, #0x1
    40005520:	a9006857 	stp	x23, x26, [x2]
    40005524:	91004042 	add	x2, x2, #0x10
    40005528:	b9014be4 	str	w4, [sp, #328]
    4000552c:	f900abe0 	str	x0, [sp, #336]
    40005530:	71001c9f 	cmp	w4, #0x7
    40005534:	54fffecd 	b.le	4000550c <_vfprintf_r+0x116c>
    40005538:	910503e2 	add	x2, sp, #0x140
    4000553c:	aa1403e1 	mov	x1, x20
    40005540:	aa1803e0 	mov	x0, x24
    40005544:	9400260b 	bl	4000ed70 <__sprint_r>
    40005548:	35ff9560 	cbnz	w0, 400047f4 <_vfprintf_r+0x454>
    4000554c:	b9414be4 	ldr	w4, [sp, #328]
    40005550:	aa1603e2 	mov	x2, x22
    40005554:	f940abe0 	ldr	x0, [sp, #336]
    40005558:	17ffffed 	b	4000550c <_vfprintf_r+0x116c>
    4000555c:	aa1503f4 	mov	x20, x21
    40005560:	b940b281 	ldr	w1, [x20, #176]
    40005564:	79402280 	ldrh	w0, [x20, #16]
    40005568:	370794c1 	tbnz	w1, #0, 40004800 <_vfprintf_r+0x460>
    4000556c:	17fffcb0 	b	4000482c <_vfprintf_r+0x48c>
    40005570:	528005a1 	mov	w1, #0x2d                  	// #45
    40005574:	cb0003e0 	neg	x0, x0
    40005578:	528005a3 	mov	w3, #0x2d                  	// #45
    4000557c:	39047fe1 	strb	w1, [sp, #287]
    40005580:	52800021 	mov	w1, #0x1                   	// #1
    40005584:	17fffc38 	b	40004664 <_vfprintf_r+0x2c4>
    40005588:	f9403fe1 	ldr	x1, [sp, #120]
    4000558c:	36079081 	tbz	w1, #0, 4000479c <_vfprintf_r+0x3fc>
    40005590:	17fffddd 	b	40004d04 <_vfprintf_r+0x964>
    40005594:	f9405280 	ldr	x0, [x20, #160]
    40005598:	94006170 	bl	4001db58 <__retarget_lock_acquire_recursive>
    4000559c:	79402280 	ldrh	w0, [x20, #16]
    400055a0:	17fffba0 	b	40004420 <_vfprintf_r+0x80>
    400055a4:	37f83b40 	tbnz	w0, #31, 40005d0c <_vfprintf_r+0x196c>
    400055a8:	f94047e0 	ldr	x0, [sp, #136]
    400055ac:	91003c01 	add	x1, x0, #0xf
    400055b0:	927df021 	and	x1, x1, #0xfffffffffffffff8
    400055b4:	f90047e1 	str	x1, [sp, #136]
    400055b8:	fd400008 	ldr	d8, [x0]
    400055bc:	17fffcb1 	b	40004880 <_vfprintf_r+0x4e0>
    400055c0:	363027da 	tbz	w26, #6, 40005ab8 <_vfprintf_r+0x1718>
    400055c4:	37f846c0 	tbnz	w0, #31, 40005e9c <_vfprintf_r+0x1afc>
    400055c8:	f94047e0 	ldr	x0, [sp, #136]
    400055cc:	91002c01 	add	x1, x0, #0xb
    400055d0:	927df021 	and	x1, x1, #0xfffffffffffffff8
    400055d4:	79400000 	ldrh	w0, [x0]
    400055d8:	f90047e1 	str	x1, [sp, #136]
    400055dc:	17fffd90 	b	40004c1c <_vfprintf_r+0x87c>
    400055e0:	3727af3a 	tbnz	w26, #4, 40004bc4 <_vfprintf_r+0x824>
    400055e4:	36303ffa 	tbz	w26, #6, 40005de0 <_vfprintf_r+0x1a40>
    400055e8:	37f87100 	tbnz	w0, #31, 40006408 <_vfprintf_r+0x2068>
    400055ec:	f94047e0 	ldr	x0, [sp, #136]
    400055f0:	91003c01 	add	x1, x0, #0xf
    400055f4:	927df021 	and	x1, x1, #0xfffffffffffffff8
    400055f8:	f90047e1 	str	x1, [sp, #136]
    400055fc:	f9400000 	ldr	x0, [x0]
    40005600:	79410be1 	ldrh	w1, [sp, #132]
    40005604:	79000001 	strh	w1, [x0]
    40005608:	17fffb9d 	b	4000447c <_vfprintf_r+0xdc>
    4000560c:	3630275a 	tbz	w26, #6, 40005af4 <_vfprintf_r+0x1754>
    40005610:	37f84960 	tbnz	w0, #31, 40005f3c <_vfprintf_r+0x1b9c>
    40005614:	f94047e0 	ldr	x0, [sp, #136]
    40005618:	91002c01 	add	x1, x0, #0xb
    4000561c:	927df021 	and	x1, x1, #0xfffffffffffffff8
    40005620:	f90047e1 	str	x1, [sp, #136]
    40005624:	79800000 	ldrsh	x0, [x0]
    40005628:	aa0003e1 	mov	x1, x0
    4000562c:	17fffceb 	b	400049d8 <_vfprintf_r+0x638>
    40005630:	b9409be0 	ldr	w0, [sp, #152]
    40005634:	11002000 	add	w0, w0, #0x8
    40005638:	7100001f 	cmp	w0, #0x0
    4000563c:	54005bcd 	b.le	400061b4 <_vfprintf_r+0x1e14>
    40005640:	f94047e1 	ldr	x1, [sp, #136]
    40005644:	b9009be0 	str	w0, [sp, #152]
    40005648:	91003c33 	add	x19, x1, #0xf
    4000564c:	927df273 	and	x19, x19, #0xfffffffffffffff8
    40005650:	17fffd2e 	b	40004b08 <_vfprintf_r+0x768>
    40005654:	b9409be0 	ldr	w0, [sp, #152]
    40005658:	11002000 	add	w0, w0, #0x8
    4000565c:	7100001f 	cmp	w0, #0x0
    40005660:	54005a0d 	b.le	400061a0 <_vfprintf_r+0x1e00>
    40005664:	f94047e3 	ldr	x3, [sp, #136]
    40005668:	b9009be0 	str	w0, [sp, #152]
    4000566c:	91003c61 	add	x1, x3, #0xf
    40005670:	927df020 	and	x0, x1, #0xfffffffffffffff8
    40005674:	f90047e0 	str	x0, [sp, #136]
    40005678:	17fffd46 	b	40004b90 <_vfprintf_r+0x7f0>
    4000567c:	b9409be0 	ldr	w0, [sp, #152]
    40005680:	11002001 	add	w1, w0, #0x8
    40005684:	7100003f 	cmp	w1, #0x0
    40005688:	5400582d 	b.le	4000618c <_vfprintf_r+0x1dec>
    4000568c:	f94047e0 	ldr	x0, [sp, #136]
    40005690:	b9009be1 	str	w1, [sp, #152]
    40005694:	91002c02 	add	x2, x0, #0xb
    40005698:	927df041 	and	x1, x2, #0xfffffffffffffff8
    4000569c:	f90047e1 	str	x1, [sp, #136]
    400056a0:	17fffd06 	b	40004ab8 <_vfprintf_r+0x718>
    400056a4:	b9409be0 	ldr	w0, [sp, #152]
    400056a8:	11002004 	add	w4, w0, #0x8
    400056ac:	7100009f 	cmp	w4, #0x0
    400056b0:	5400560d 	b.le	40006170 <_vfprintf_r+0x1dd0>
    400056b4:	f94047e0 	ldr	x0, [sp, #136]
    400056b8:	b9009be4 	str	w4, [sp, #152]
    400056bc:	91002c00 	add	x0, x0, #0xb
    400056c0:	927df000 	and	x0, x0, #0xfffffffffffffff8
    400056c4:	17fffcee 	b	40004a7c <_vfprintf_r+0x6dc>
    400056c8:	2a0403e1 	mov	w1, w4
    400056cc:	aa1703e3 	mov	x3, x23
    400056d0:	93407f39 	sxtw	x25, w25
    400056d4:	11000421 	add	w1, w1, #0x1
    400056d8:	8b190000 	add	x0, x0, x25
    400056dc:	b9014be1 	str	w1, [sp, #328]
    400056e0:	f900abe0 	str	x0, [sp, #336]
    400056e4:	f9000043 	str	x3, [x2]
    400056e8:	f9000459 	str	x25, [x2, #8]
    400056ec:	71001c3f 	cmp	w1, #0x7
    400056f0:	54ffcf4d 	b.le	400050d8 <_vfprintf_r+0xd38>
    400056f4:	910503e2 	add	x2, sp, #0x140
    400056f8:	aa1403e1 	mov	x1, x20
    400056fc:	aa1803e0 	mov	x0, x24
    40005700:	9400259c 	bl	4000ed70 <__sprint_r>
    40005704:	35ff8780 	cbnz	w0, 400047f4 <_vfprintf_r+0x454>
    40005708:	b9414be1 	ldr	w1, [sp, #328]
    4000570c:	aa1603e2 	mov	x2, x22
    40005710:	f940abe0 	ldr	x0, [sp, #336]
    40005714:	17fffe72 	b	400050dc <_vfprintf_r+0xd3c>
    40005718:	910503e2 	add	x2, sp, #0x140
    4000571c:	aa1403e1 	mov	x1, x20
    40005720:	aa1803e0 	mov	x0, x24
    40005724:	94002593 	bl	4000ed70 <__sprint_r>
    40005728:	35ff8660 	cbnz	w0, 400047f4 <_vfprintf_r+0x454>
    4000572c:	aa1603e6 	mov	x6, x22
    40005730:	f940abe0 	ldr	x0, [sp, #336]
    40005734:	17fffd7f 	b	40004d30 <_vfprintf_r+0x990>
    40005738:	39400789 	ldrb	w9, [x28, #1]
    4000573c:	321b035a 	orr	w26, w26, #0x20
    40005740:	9100079c 	add	x28, x28, #0x1
    40005744:	17fffb74 	b	40004514 <_vfprintf_r+0x174>
    40005748:	b9414be1 	ldr	w1, [sp, #328]
    4000574c:	b00000e3 	adrp	x3, 40022000 <__pow_log_data+0xcc8>
    40005750:	9135c063 	add	x3, x3, #0xd70
    40005754:	d280021a 	mov	x26, #0x10                  	// #16
    40005758:	2a0103e2 	mov	w2, w1
    4000575c:	aa0303fb 	mov	x27, x3
    40005760:	7100433f 	cmp	w25, #0x10
    40005764:	540000ac 	b.gt	40005778 <_vfprintf_r+0x13d8>
    40005768:	1400014d 	b	40005c9c <_vfprintf_r+0x18fc>
    4000576c:	51004339 	sub	w25, w25, #0x10
    40005770:	7100433f 	cmp	w25, #0x10
    40005774:	5400290d 	b.le	40005c94 <_vfprintf_r+0x18f4>
    40005778:	91004000 	add	x0, x0, #0x10
    4000577c:	11000442 	add	w2, w2, #0x1
    40005780:	a90068db 	stp	x27, x26, [x6]
    40005784:	910040c6 	add	x6, x6, #0x10
    40005788:	b9014be2 	str	w2, [sp, #328]
    4000578c:	f900abe0 	str	x0, [sp, #336]
    40005790:	71001c5f 	cmp	w2, #0x7
    40005794:	54fffecd 	b.le	4000576c <_vfprintf_r+0x13cc>
    40005798:	910503e2 	add	x2, sp, #0x140
    4000579c:	aa1403e1 	mov	x1, x20
    400057a0:	aa1803e0 	mov	x0, x24
    400057a4:	94002573 	bl	4000ed70 <__sprint_r>
    400057a8:	35ff8260 	cbnz	w0, 400047f4 <_vfprintf_r+0x454>
    400057ac:	b9414be2 	ldr	w2, [sp, #328]
    400057b0:	aa1603e6 	mov	x6, x22
    400057b4:	f940abe0 	ldr	x0, [sp, #336]
    400057b8:	17ffffed 	b	4000576c <_vfprintf_r+0x13cc>
    400057bc:	910503e2 	add	x2, sp, #0x140
    400057c0:	aa1403e1 	mov	x1, x20
    400057c4:	aa1803e0 	mov	x0, x24
    400057c8:	9400256a 	bl	4000ed70 <__sprint_r>
    400057cc:	35ff8140 	cbnz	w0, 400047f4 <_vfprintf_r+0x454>
    400057d0:	b9414be1 	ldr	w1, [sp, #328]
    400057d4:	aa1603e2 	mov	x2, x22
    400057d8:	f940abe0 	ldr	x0, [sp, #336]
    400057dc:	17fffe27 	b	40005078 <_vfprintf_r+0xcd8>
    400057e0:	910503e2 	add	x2, sp, #0x140
    400057e4:	aa1403e1 	mov	x1, x20
    400057e8:	aa1803e0 	mov	x0, x24
    400057ec:	94002561 	bl	4000ed70 <__sprint_r>
    400057f0:	35ff8020 	cbnz	w0, 400047f4 <_vfprintf_r+0x454>
    400057f4:	b9414be1 	ldr	w1, [sp, #328]
    400057f8:	aa1603e2 	mov	x2, x22
    400057fc:	f940abe0 	ldr	x0, [sp, #336]
    40005800:	17fffe28 	b	400050a0 <_vfprintf_r+0xd00>
    40005804:	b9409be0 	ldr	w0, [sp, #152]
    40005808:	11002001 	add	w1, w0, #0x8
    4000580c:	7100003f 	cmp	w1, #0x0
    40005810:	540018cd 	b.le	40005b28 <_vfprintf_r+0x1788>
    40005814:	f94047e0 	ldr	x0, [sp, #136]
    40005818:	b9009be1 	str	w1, [sp, #152]
    4000581c:	91003c02 	add	x2, x0, #0xf
    40005820:	927df041 	and	x1, x2, #0xfffffffffffffff8
    40005824:	f90047e1 	str	x1, [sp, #136]
    40005828:	17fffb8b 	b	40004654 <_vfprintf_r+0x2b4>
    4000582c:	b9409be0 	ldr	w0, [sp, #152]
    40005830:	11002001 	add	w1, w0, #0x8
    40005834:	7100003f 	cmp	w1, #0x0
    40005838:	5400182d 	b.le	40005b3c <_vfprintf_r+0x179c>
    4000583c:	f94047e0 	ldr	x0, [sp, #136]
    40005840:	b9009be1 	str	w1, [sp, #152]
    40005844:	91003c02 	add	x2, x0, #0xf
    40005848:	927df041 	and	x1, x2, #0xfffffffffffffff8
    4000584c:	f90047e1 	str	x1, [sp, #136]
    40005850:	17fffb76 	b	40004628 <_vfprintf_r+0x288>
    40005854:	b9409be0 	ldr	w0, [sp, #152]
    40005858:	11002001 	add	w1, w0, #0x8
    4000585c:	7100003f 	cmp	w1, #0x0
    40005860:	5400122d 	b.le	40005aa4 <_vfprintf_r+0x1704>
    40005864:	f94047e0 	ldr	x0, [sp, #136]
    40005868:	b9009be1 	str	w1, [sp, #152]
    4000586c:	91003c02 	add	x2, x0, #0xf
    40005870:	927df041 	and	x1, x2, #0xfffffffffffffff8
    40005874:	f90047e1 	str	x1, [sp, #136]
    40005878:	17fffc56 	b	400049d0 <_vfprintf_r+0x630>
    4000587c:	b9409be0 	ldr	w0, [sp, #152]
    40005880:	11002001 	add	w1, w0, #0x8
    40005884:	7100003f 	cmp	w1, #0x0
    40005888:	5400146d 	b.le	40005b14 <_vfprintf_r+0x1774>
    4000588c:	f94047e0 	ldr	x0, [sp, #136]
    40005890:	b9009be1 	str	w1, [sp, #152]
    40005894:	91003c02 	add	x2, x0, #0xf
    40005898:	927df041 	and	x1, x2, #0xfffffffffffffff8
    4000589c:	f90047e1 	str	x1, [sp, #136]
    400058a0:	17fffcde 	b	40004c18 <_vfprintf_r+0x878>
    400058a4:	b9414be1 	ldr	w1, [sp, #328]
    400058a8:	91000400 	add	x0, x0, #0x1
    400058ac:	b00000e3 	adrp	x3, 40022000 <__pow_log_data+0xcc8>
    400058b0:	d2800025 	mov	x5, #0x1                   	// #1
    400058b4:	91356063 	add	x3, x3, #0xd58
    400058b8:	11000421 	add	w1, w1, #0x1
    400058bc:	a90014c3 	stp	x3, x5, [x6]
    400058c0:	910040c6 	add	x6, x6, #0x10
    400058c4:	b9014be1 	str	w1, [sp, #328]
    400058c8:	f900abe0 	str	x0, [sp, #336]
    400058cc:	71001c3f 	cmp	w1, #0x7
    400058d0:	540042cc 	b.gt	40006128 <_vfprintf_r+0x1d88>
    400058d4:	b940abe1 	ldr	w1, [sp, #168]
    400058d8:	2a020021 	orr	w1, w1, w2
    400058dc:	340024c1 	cbz	w1, 40005d74 <_vfprintf_r+0x19d4>
    400058e0:	f9405be3 	ldr	x3, [sp, #176]
    400058e4:	b9414be1 	ldr	w1, [sp, #328]
    400058e8:	f94063e4 	ldr	x4, [sp, #192]
    400058ec:	11000421 	add	w1, w1, #0x1
    400058f0:	8b000060 	add	x0, x3, x0
    400058f4:	a9000cc4 	stp	x4, x3, [x6]
    400058f8:	910040c6 	add	x6, x6, #0x10
    400058fc:	b9014be1 	str	w1, [sp, #328]
    40005900:	f900abe0 	str	x0, [sp, #336]
    40005904:	71001c3f 	cmp	w1, #0x7
    40005908:	540024ec 	b.gt	40005da4 <_vfprintf_r+0x1a04>
    4000590c:	37f84d62 	tbnz	w2, #31, 400062b8 <_vfprintf_r+0x1f18>
    40005910:	b980abe2 	ldrsw	x2, [sp, #168]
    40005914:	11000421 	add	w1, w1, #0x1
    40005918:	a90008d7 	stp	x23, x2, [x6]
    4000591c:	8b000040 	add	x0, x2, x0
    40005920:	b9014be1 	str	w1, [sp, #328]
    40005924:	f900abe0 	str	x0, [sp, #336]
    40005928:	71001c3f 	cmp	w1, #0x7
    4000592c:	54ff736d 	b.le	40004798 <_vfprintf_r+0x3f8>
    40005930:	17fffc00 	b	40004930 <_vfprintf_r+0x590>
    40005934:	1e682100 	fcmp	d8, d8
    40005938:	54005566 	b.vs	400063e4 <_vfprintf_r+0x2044>
    4000593c:	121a7b73 	and	w19, w27, #0xffffffdf
    40005940:	310004ff 	cmn	w7, #0x1
    40005944:	54001160 	b.eq	40005b70 <_vfprintf_r+0x17d0>  // b.none
    40005948:	71011e7f 	cmp	w19, #0x47
    4000594c:	7a4008e0 	ccmp	w7, #0x0, #0x0, eq  // eq = none
    40005950:	54001121 	b.ne	40005b74 <_vfprintf_r+0x17d4>  // b.any
    40005954:	9e660100 	fmov	x0, d8
    40005958:	32180341 	orr	w1, w26, #0x100
    4000595c:	b9007be1 	str	w1, [sp, #120]
    40005960:	d360fc00 	lsr	x0, x0, #32
    40005964:	37f82e40 	tbnz	w0, #31, 40005f2c <_vfprintf_r+0x1b8c>
    40005968:	1e604100 	fmov	d0, d8
    4000596c:	52800041 	mov	w1, #0x2                   	// #2
    40005970:	9104e3e5 	add	x5, sp, #0x138
    40005974:	9104b3e4 	add	x4, sp, #0x12c
    40005978:	9104a3e3 	add	x3, sp, #0x128
    4000597c:	aa1803e0 	mov	x0, x24
    40005980:	52800022 	mov	w2, #0x1                   	// #1
    40005984:	f9004be6 	str	x6, [sp, #144]
    40005988:	94000b1e 	bl	40008600 <_dtoa_r>
    4000598c:	1e604109 	fmov	d9, d8
    40005990:	f9404be6 	ldr	x6, [sp, #144]
    40005994:	52800021 	mov	w1, #0x1                   	// #1
    40005998:	aa0003f7 	mov	x23, x0
    4000599c:	2a0103e7 	mov	w7, w1
    400059a0:	5280000a 	mov	w10, #0x0                   	// #0
    400059a4:	3600319a 	tbz	w26, #0, 40005fd4 <_vfprintf_r+0x1c34>
    400059a8:	8b21c2e1 	add	x1, x23, w1, sxtw
    400059ac:	14000093 	b	40005bf8 <_vfprintf_r+0x1858>
    400059b0:	910503e2 	add	x2, sp, #0x140
    400059b4:	aa1403e1 	mov	x1, x20
    400059b8:	aa1803e0 	mov	x0, x24
    400059bc:	940024ed 	bl	4000ed70 <__sprint_r>
    400059c0:	35ff71a0 	cbnz	w0, 400047f4 <_vfprintf_r+0x454>
    400059c4:	aa1603e6 	mov	x6, x22
    400059c8:	f940abe0 	ldr	x0, [sp, #336]
    400059cc:	17fffcca 	b	40004cf4 <_vfprintf_r+0x954>
    400059d0:	aa1603f7 	mov	x23, x22
    400059d4:	d503201f 	nop
    400059d8:	b202e7e1 	mov	x1, #0xcccccccccccccccc    	// #-3689348814741910324
    400059dc:	aa0003e4 	mov	x4, x0
    400059e0:	f29999a1 	movk	x1, #0xcccd
    400059e4:	9bc17c02 	umulh	x2, x0, x1
    400059e8:	d343fc42 	lsr	x2, x2, #3
    400059ec:	8b020841 	add	x1, x2, x2, lsl #2
    400059f0:	cb010401 	sub	x1, x0, x1, lsl #1
    400059f4:	aa0203e0 	mov	x0, x2
    400059f8:	1100c021 	add	w1, w1, #0x30
    400059fc:	381ffee1 	strb	w1, [x23, #-1]!
    40005a00:	f100249f 	cmp	x4, #0x9
    40005a04:	54fffea8 	b.hi	400059d8 <_vfprintf_r+0x1638>  // b.pmore
    40005a08:	4b1702d9 	sub	w25, w22, w23
    40005a0c:	b9007bfa 	str	w26, [sp, #120]
    40005a10:	17fffb24 	b	400046a0 <_vfprintf_r+0x300>
    40005a14:	b9409be0 	ldr	w0, [sp, #152]
    40005a18:	11002001 	add	w1, w0, #0x8
    40005a1c:	7100003f 	cmp	w1, #0x0
    40005a20:	54001d6d 	b.le	40005dcc <_vfprintf_r+0x1a2c>
    40005a24:	f94047e0 	ldr	x0, [sp, #136]
    40005a28:	b9009be1 	str	w1, [sp, #152]
    40005a2c:	91003c02 	add	x2, x0, #0xf
    40005a30:	927df041 	and	x1, x2, #0xfffffffffffffff8
    40005a34:	f90047e1 	str	x1, [sp, #136]
    40005a38:	17fffc68 	b	40004bd8 <_vfprintf_r+0x838>
    40005a3c:	f940abe0 	ldr	x0, [sp, #336]
    40005a40:	b5001f80 	cbnz	x0, 40005e30 <_vfprintf_r+0x1a90>
    40005a44:	b9014bff 	str	wzr, [sp, #328]
    40005a48:	17fffb6b 	b	400047f4 <_vfprintf_r+0x454>
    40005a4c:	710018ff 	cmp	w7, #0x6
    40005a50:	528000d9 	mov	w25, #0x6                   	// #6
    40005a54:	1a9990f9 	csel	w25, w7, w25, ls  // ls = plast
    40005a58:	b00000e4 	adrp	x4, 40022000 <__pow_log_data+0xcc8>
    40005a5c:	91354097 	add	x23, x4, #0xd50
    40005a60:	f90047f3 	str	x19, [sp, #136]
    40005a64:	2a1903f3 	mov	w19, w25
    40005a68:	17fffab7 	b	40004544 <_vfprintf_r+0x1a4>
    40005a6c:	aa1703e0 	mov	x0, x23
    40005a70:	f9004be6 	str	x6, [sp, #144]
    40005a74:	97ffee33 	bl	40001340 <strlen>
    40005a78:	b9007bfa 	str	w26, [sp, #120]
    40005a7c:	39447fe3 	ldrb	w3, [sp, #287]
    40005a80:	7100001f 	cmp	w0, #0x0
    40005a84:	f90047f3 	str	x19, [sp, #136]
    40005a88:	2a0003f9 	mov	w25, w0
    40005a8c:	b9009fff 	str	wzr, [sp, #156]
    40005a90:	1a9fa013 	csel	w19, w0, wzr, ge  // ge = tcont
    40005a94:	52800007 	mov	w7, #0x0                   	// #0
    40005a98:	f9404be6 	ldr	x6, [sp, #144]
    40005a9c:	35ff60a3 	cbnz	w3, 400046b0 <_vfprintf_r+0x310>
    40005aa0:	17fffb05 	b	400046b4 <_vfprintf_r+0x314>
    40005aa4:	f94067e2 	ldr	x2, [sp, #200]
    40005aa8:	b9409be0 	ldr	w0, [sp, #152]
    40005aac:	b9009be1 	str	w1, [sp, #152]
    40005ab0:	8b20c040 	add	x0, x2, w0, sxtw
    40005ab4:	17fffbc7 	b	400049d0 <_vfprintf_r+0x630>
    40005ab8:	37f81a60 	tbnz	w0, #31, 40005e04 <_vfprintf_r+0x1a64>
    40005abc:	f94047e0 	ldr	x0, [sp, #136]
    40005ac0:	91002c01 	add	x1, x0, #0xb
    40005ac4:	927df021 	and	x1, x1, #0xfffffffffffffff8
    40005ac8:	b9400000 	ldr	w0, [x0]
    40005acc:	f90047e1 	str	x1, [sp, #136]
    40005ad0:	17fffc53 	b	40004c1c <_vfprintf_r+0x87c>
    40005ad4:	37f82180 	tbnz	w0, #31, 40005f04 <_vfprintf_r+0x1b64>
    40005ad8:	f94047e0 	ldr	x0, [sp, #136]
    40005adc:	91002c01 	add	x1, x0, #0xb
    40005ae0:	927df021 	and	x1, x1, #0xfffffffffffffff8
    40005ae4:	f90047e1 	str	x1, [sp, #136]
    40005ae8:	b9400000 	ldr	w0, [x0]
    40005aec:	52800001 	mov	w1, #0x0                   	// #0
    40005af0:	17fffadb 	b	4000465c <_vfprintf_r+0x2bc>
    40005af4:	37f81f40 	tbnz	w0, #31, 40005edc <_vfprintf_r+0x1b3c>
    40005af8:	f94047e0 	ldr	x0, [sp, #136]
    40005afc:	91002c01 	add	x1, x0, #0xb
    40005b00:	927df021 	and	x1, x1, #0xfffffffffffffff8
    40005b04:	f90047e1 	str	x1, [sp, #136]
    40005b08:	b9800000 	ldrsw	x0, [x0]
    40005b0c:	aa0003e1 	mov	x1, x0
    40005b10:	17fffbb2 	b	400049d8 <_vfprintf_r+0x638>
    40005b14:	f94067e2 	ldr	x2, [sp, #200]
    40005b18:	b9409be0 	ldr	w0, [sp, #152]
    40005b1c:	b9009be1 	str	w1, [sp, #152]
    40005b20:	8b20c040 	add	x0, x2, w0, sxtw
    40005b24:	17fffc3d 	b	40004c18 <_vfprintf_r+0x878>
    40005b28:	f94067e2 	ldr	x2, [sp, #200]
    40005b2c:	b9409be0 	ldr	w0, [sp, #152]
    40005b30:	b9009be1 	str	w1, [sp, #152]
    40005b34:	8b20c040 	add	x0, x2, w0, sxtw
    40005b38:	17fffac7 	b	40004654 <_vfprintf_r+0x2b4>
    40005b3c:	f94067e2 	ldr	x2, [sp, #200]
    40005b40:	b9409be0 	ldr	w0, [sp, #152]
    40005b44:	b9009be1 	str	w1, [sp, #152]
    40005b48:	8b20c040 	add	x0, x2, w0, sxtw
    40005b4c:	17fffab7 	b	40004628 <_vfprintf_r+0x288>
    40005b50:	37f820a0 	tbnz	w0, #31, 40005f64 <_vfprintf_r+0x1bc4>
    40005b54:	f94047e0 	ldr	x0, [sp, #136]
    40005b58:	91002c01 	add	x1, x0, #0xb
    40005b5c:	927df021 	and	x1, x1, #0xfffffffffffffff8
    40005b60:	f90047e1 	str	x1, [sp, #136]
    40005b64:	b9400000 	ldr	w0, [x0]
    40005b68:	52800021 	mov	w1, #0x1                   	// #1
    40005b6c:	17fffabc 	b	4000465c <_vfprintf_r+0x2bc>
    40005b70:	528000c7 	mov	w7, #0x6                   	// #6
    40005b74:	9e660100 	fmov	x0, d8
    40005b78:	32180341 	orr	w1, w26, #0x100
    40005b7c:	b9007be1 	str	w1, [sp, #120]
    40005b80:	1e604109 	fmov	d9, d8
    40005b84:	5280000a 	mov	w10, #0x0                   	// #0
    40005b88:	d360fc00 	lsr	x0, x0, #32
    40005b8c:	37f81d20 	tbnz	w0, #31, 40005f30 <_vfprintf_r+0x1b90>
    40005b90:	b9009fea 	str	w10, [sp, #156]
    40005b94:	1e604120 	fmov	d0, d9
    40005b98:	f90057e6 	str	x6, [sp, #168]
    40005b9c:	71011a7f 	cmp	w19, #0x46
    40005ba0:	54003441 	b.ne	40006228 <_vfprintf_r+0x1e88>  // b.any
    40005ba4:	2a0703e2 	mov	w2, w7
    40005ba8:	52800061 	mov	w1, #0x3                   	// #3
    40005bac:	9104e3e5 	add	x5, sp, #0x138
    40005bb0:	9104b3e4 	add	x4, sp, #0x12c
    40005bb4:	9104a3e3 	add	x3, sp, #0x128
    40005bb8:	aa1803e0 	mov	x0, x24
    40005bbc:	b90093e7 	str	w7, [sp, #144]
    40005bc0:	94000a90 	bl	40008600 <_dtoa_r>
    40005bc4:	aa0003f7 	mov	x23, x0
    40005bc8:	39400000 	ldrb	w0, [x0]
    40005bcc:	2f00e400 	movi	d0, #0x0
    40005bd0:	b94093e7 	ldr	w7, [sp, #144]
    40005bd4:	7100c01f 	cmp	w0, #0x30
    40005bd8:	b9409fea 	ldr	w10, [sp, #156]
    40005bdc:	f94057e6 	ldr	x6, [sp, #168]
    40005be0:	93407ce1 	sxtw	x1, w7
    40005be4:	1e600524 	fccmp	d9, d0, #0x4, eq  // eq = none
    40005be8:	54001ee1 	b.ne	40005fc4 <_vfprintf_r+0x1c24>  // b.any
    40005bec:	b9412be0 	ldr	w0, [sp, #296]
    40005bf0:	8b20c020 	add	x0, x1, w0, sxtw
    40005bf4:	8b0002e1 	add	x1, x23, x0
    40005bf8:	1e602128 	fcmp	d9, #0.0
    40005bfc:	aa0103e0 	mov	x0, x1
    40005c00:	54000180 	b.eq	40005c30 <_vfprintf_r+0x1890>  // b.none
    40005c04:	f9409fe0 	ldr	x0, [sp, #312]
    40005c08:	eb00003f 	cmp	x1, x0
    40005c0c:	54000129 	b.ls	40005c30 <_vfprintf_r+0x1890>  // b.plast
    40005c10:	52800603 	mov	w3, #0x30                  	// #48
    40005c14:	d503201f 	nop
    40005c18:	91000402 	add	x2, x0, #0x1
    40005c1c:	f9009fe2 	str	x2, [sp, #312]
    40005c20:	39000003 	strb	w3, [x0]
    40005c24:	f9409fe0 	ldr	x0, [sp, #312]
    40005c28:	eb00003f 	cmp	x1, x0
    40005c2c:	54ffff68 	b.hi	40005c18 <_vfprintf_r+0x1878>  // b.pmore
    40005c30:	b9412be1 	ldr	w1, [sp, #296]
    40005c34:	cb170000 	sub	x0, x0, x23
    40005c38:	b9009fe1 	str	w1, [sp, #156]
    40005c3c:	b900abe0 	str	w0, [sp, #168]
    40005c40:	71011e7f 	cmp	w19, #0x47
    40005c44:	54001d20 	b.eq	40005fe8 <_vfprintf_r+0x1c48>  // b.none
    40005c48:	71019b7f 	cmp	w27, #0x66
    40005c4c:	54001d81 	b.ne	40005ffc <_vfprintf_r+0x1c5c>  // b.any
    40005c50:	b9409fe1 	ldr	w1, [sp, #156]
    40005c54:	12000340 	and	w0, w26, #0x1
    40005c58:	2a070000 	orr	w0, w0, w7
    40005c5c:	7100003f 	cmp	w1, #0x0
    40005c60:	540049ad 	b.le	40006594 <_vfprintf_r+0x21f4>
    40005c64:	35003aa0 	cbnz	w0, 400063b8 <_vfprintf_r+0x2018>
    40005c68:	b9409ff9 	ldr	w25, [sp, #156]
    40005c6c:	2a1903f3 	mov	w19, w25
    40005c70:	3400240a 	cbz	w10, 400060f0 <_vfprintf_r+0x1d50>
    40005c74:	528005a0 	mov	w0, #0x2d                  	// #45
    40005c78:	52800007 	mov	w7, #0x0                   	// #0
    40005c7c:	39047fe0 	strb	w0, [sp, #287]
    40005c80:	17fffa8c 	b	400046b0 <_vfprintf_r+0x310>
    40005c84:	528005a0 	mov	w0, #0x2d                  	// #45
    40005c88:	528005a3 	mov	w3, #0x2d                  	// #45
    40005c8c:	39047fe0 	strb	w0, [sp, #287]
    40005c90:	17fffb04 	b	400048a0 <_vfprintf_r+0x500>
    40005c94:	2a0203e1 	mov	w1, w2
    40005c98:	aa1b03e3 	mov	x3, x27
    40005c9c:	93407f39 	sxtw	x25, w25
    40005ca0:	11000421 	add	w1, w1, #0x1
    40005ca4:	8b190000 	add	x0, x0, x25
    40005ca8:	a90064c3 	stp	x3, x25, [x6]
    40005cac:	910040c6 	add	x6, x6, #0x10
    40005cb0:	b9014be1 	str	w1, [sp, #328]
    40005cb4:	f900abe0 	str	x0, [sp, #336]
    40005cb8:	71001c3f 	cmp	w1, #0x7
    40005cbc:	54ffb60d 	b.le	4000537c <_vfprintf_r+0xfdc>
    40005cc0:	910503e2 	add	x2, sp, #0x140
    40005cc4:	aa1403e1 	mov	x1, x20
    40005cc8:	aa1803e0 	mov	x0, x24
    40005ccc:	94002429 	bl	4000ed70 <__sprint_r>
    40005cd0:	35ff5920 	cbnz	w0, 400047f4 <_vfprintf_r+0x454>
    40005cd4:	aa1603e6 	mov	x6, x22
    40005cd8:	f940abe0 	ldr	x0, [sp, #336]
    40005cdc:	17fffda8 	b	4000537c <_vfprintf_r+0xfdc>
    40005ce0:	b940d7e0 	ldr	w0, [sp, #212]
    40005ce4:	11004001 	add	w1, w0, #0x10
    40005ce8:	7100003f 	cmp	w1, #0x0
    40005cec:	5400162d 	b.le	40005fb0 <_vfprintf_r+0x1c10>
    40005cf0:	f94047e0 	ldr	x0, [sp, #136]
    40005cf4:	b900d7e1 	str	w1, [sp, #212]
    40005cf8:	91003c00 	add	x0, x0, #0xf
    40005cfc:	927cec00 	and	x0, x0, #0xfffffffffffffff0
    40005d00:	91004001 	add	x1, x0, #0x10
    40005d04:	f90047e1 	str	x1, [sp, #136]
    40005d08:	17fffad7 	b	40004864 <_vfprintf_r+0x4c4>
    40005d0c:	b940d7e0 	ldr	w0, [sp, #212]
    40005d10:	11004001 	add	w1, w0, #0x10
    40005d14:	7100003f 	cmp	w1, #0x0
    40005d18:	5400140d 	b.le	40005f98 <_vfprintf_r+0x1bf8>
    40005d1c:	f94047e0 	ldr	x0, [sp, #136]
    40005d20:	b900d7e1 	str	w1, [sp, #212]
    40005d24:	91003c02 	add	x2, x0, #0xf
    40005d28:	927df041 	and	x1, x2, #0xfffffffffffffff8
    40005d2c:	f90047e1 	str	x1, [sp, #136]
    40005d30:	fd400008 	ldr	d8, [x0]
    40005d34:	17fffad3 	b	40004880 <_vfprintf_r+0x4e0>
    40005d38:	b940abe2 	ldr	w2, [sp, #168]
    40005d3c:	b9409fe1 	ldr	w1, [sp, #156]
    40005d40:	4b190059 	sub	w25, w2, w25
    40005d44:	4b010041 	sub	w1, w2, w1
    40005d48:	6b01033f 	cmp	w25, w1
    40005d4c:	1a81d33a 	csel	w26, w25, w1, le
    40005d50:	17fffdaf 	b	4000540c <_vfprintf_r+0x106c>
    40005d54:	910503e2 	add	x2, sp, #0x140
    40005d58:	aa1403e1 	mov	x1, x20
    40005d5c:	aa1803e0 	mov	x0, x24
    40005d60:	94002404 	bl	4000ed70 <__sprint_r>
    40005d64:	35ff5480 	cbnz	w0, 400047f4 <_vfprintf_r+0x454>
    40005d68:	aa1603e6 	mov	x6, x22
    40005d6c:	f940abe0 	ldr	x0, [sp, #336]
    40005d70:	17fffd7d 	b	40005364 <_vfprintf_r+0xfc4>
    40005d74:	f9403fe1 	ldr	x1, [sp, #120]
    40005d78:	36075121 	tbz	w1, #0, 4000479c <_vfprintf_r+0x3fc>
    40005d7c:	f9405be2 	ldr	x2, [sp, #176]
    40005d80:	b9414be1 	ldr	w1, [sp, #328]
    40005d84:	f94063e3 	ldr	x3, [sp, #192]
    40005d88:	11000421 	add	w1, w1, #0x1
    40005d8c:	8b000040 	add	x0, x2, x0
    40005d90:	a90008c3 	stp	x3, x2, [x6]
    40005d94:	b9014be1 	str	w1, [sp, #328]
    40005d98:	f900abe0 	str	x0, [sp, #336]
    40005d9c:	71001c3f 	cmp	w1, #0x7
    40005da0:	5400218d 	b.le	400061d0 <_vfprintf_r+0x1e30>
    40005da4:	910503e2 	add	x2, sp, #0x140
    40005da8:	aa1403e1 	mov	x1, x20
    40005dac:	aa1803e0 	mov	x0, x24
    40005db0:	940023f0 	bl	4000ed70 <__sprint_r>
    40005db4:	35ff5200 	cbnz	w0, 400047f4 <_vfprintf_r+0x454>
    40005db8:	b9412be2 	ldr	w2, [sp, #296]
    40005dbc:	aa1603e6 	mov	x6, x22
    40005dc0:	b9414be1 	ldr	w1, [sp, #328]
    40005dc4:	f940abe0 	ldr	x0, [sp, #336]
    40005dc8:	17fffed1 	b	4000590c <_vfprintf_r+0x156c>
    40005dcc:	f94067e2 	ldr	x2, [sp, #200]
    40005dd0:	b9409be0 	ldr	w0, [sp, #152]
    40005dd4:	b9009be1 	str	w1, [sp, #152]
    40005dd8:	8b20c040 	add	x0, x2, w0, sxtw
    40005ddc:	17fffb7f 	b	40004bd8 <_vfprintf_r+0x838>
    40005de0:	37f83280 	tbnz	w0, #31, 40006430 <_vfprintf_r+0x2090>
    40005de4:	f94047e0 	ldr	x0, [sp, #136]
    40005de8:	91003c01 	add	x1, x0, #0xf
    40005dec:	927df021 	and	x1, x1, #0xfffffffffffffff8
    40005df0:	f90047e1 	str	x1, [sp, #136]
    40005df4:	f9400000 	ldr	x0, [x0]
    40005df8:	b94087e1 	ldr	w1, [sp, #132]
    40005dfc:	b9000001 	str	w1, [x0]
    40005e00:	17fff99f 	b	4000447c <_vfprintf_r+0xdc>
    40005e04:	b9409be0 	ldr	w0, [sp, #152]
    40005e08:	11002001 	add	w1, w0, #0x8
    40005e0c:	7100003f 	cmp	w1, #0x0
    40005e10:	540035ad 	b.le	400064c4 <_vfprintf_r+0x2124>
    40005e14:	f94047e0 	ldr	x0, [sp, #136]
    40005e18:	b9009be1 	str	w1, [sp, #152]
    40005e1c:	91002c02 	add	x2, x0, #0xb
    40005e20:	927df041 	and	x1, x2, #0xfffffffffffffff8
    40005e24:	b9400000 	ldr	w0, [x0]
    40005e28:	f90047e1 	str	x1, [sp, #136]
    40005e2c:	17fffb7c 	b	40004c1c <_vfprintf_r+0x87c>
    40005e30:	aa1803e0 	mov	x0, x24
    40005e34:	910503e2 	add	x2, sp, #0x140
    40005e38:	aa1403e1 	mov	x1, x20
    40005e3c:	940023cd 	bl	4000ed70 <__sprint_r>
    40005e40:	35ff4da0 	cbnz	w0, 400047f4 <_vfprintf_r+0x454>
    40005e44:	b9014bff 	str	wzr, [sp, #328]
    40005e48:	17fffa6b 	b	400047f4 <_vfprintf_r+0x454>
    40005e4c:	b9409be0 	ldr	w0, [sp, #152]
    40005e50:	11002001 	add	w1, w0, #0x8
    40005e54:	7100003f 	cmp	w1, #0x0
    40005e58:	540030ad 	b.le	4000646c <_vfprintf_r+0x20cc>
    40005e5c:	f94047e0 	ldr	x0, [sp, #136]
    40005e60:	b9009be1 	str	w1, [sp, #152]
    40005e64:	91002c02 	add	x2, x0, #0xb
    40005e68:	927df041 	and	x1, x2, #0xfffffffffffffff8
    40005e6c:	f90047e1 	str	x1, [sp, #136]
    40005e70:	17fffabf 	b	4000496c <_vfprintf_r+0x5cc>
    40005e74:	b9409be0 	ldr	w0, [sp, #152]
    40005e78:	11002001 	add	w1, w0, #0x8
    40005e7c:	7100003f 	cmp	w1, #0x0
    40005e80:	5400300d 	b.le	40006480 <_vfprintf_r+0x20e0>
    40005e84:	f94047e0 	ldr	x0, [sp, #136]
    40005e88:	b9009be1 	str	w1, [sp, #152]
    40005e8c:	91002c02 	add	x2, x0, #0xb
    40005e90:	927df041 	and	x1, x2, #0xfffffffffffffff8
    40005e94:	f90047e1 	str	x1, [sp, #136]
    40005e98:	17fffabf 	b	40004994 <_vfprintf_r+0x5f4>
    40005e9c:	b9409be0 	ldr	w0, [sp, #152]
    40005ea0:	11002001 	add	w1, w0, #0x8
    40005ea4:	7100003f 	cmp	w1, #0x0
    40005ea8:	5400302d 	b.le	400064ac <_vfprintf_r+0x210c>
    40005eac:	f94047e0 	ldr	x0, [sp, #136]
    40005eb0:	b9009be1 	str	w1, [sp, #152]
    40005eb4:	91002c02 	add	x2, x0, #0xb
    40005eb8:	927df041 	and	x1, x2, #0xfffffffffffffff8
    40005ebc:	79400000 	ldrh	w0, [x0]
    40005ec0:	f90047e1 	str	x1, [sp, #136]
    40005ec4:	17fffb56 	b	40004c1c <_vfprintf_r+0x87c>
    40005ec8:	321c035a 	orr	w26, w26, #0x10
    40005ecc:	39047fe2 	strb	w2, [sp, #287]
    40005ed0:	17fffab8 	b	400049b0 <_vfprintf_r+0x610>
    40005ed4:	39047fe2 	strb	w2, [sp, #287]
    40005ed8:	17fff995 	b	4000452c <_vfprintf_r+0x18c>
    40005edc:	b9409be0 	ldr	w0, [sp, #152]
    40005ee0:	11002001 	add	w1, w0, #0x8
    40005ee4:	7100003f 	cmp	w1, #0x0
    40005ee8:	54002fad 	b.le	400064dc <_vfprintf_r+0x213c>
    40005eec:	f94047e0 	ldr	x0, [sp, #136]
    40005ef0:	b9009be1 	str	w1, [sp, #152]
    40005ef4:	91002c02 	add	x2, x0, #0xb
    40005ef8:	927df041 	and	x1, x2, #0xfffffffffffffff8
    40005efc:	f90047e1 	str	x1, [sp, #136]
    40005f00:	17ffff02 	b	40005b08 <_vfprintf_r+0x1768>
    40005f04:	b9409be0 	ldr	w0, [sp, #152]
    40005f08:	11002001 	add	w1, w0, #0x8
    40005f0c:	7100003f 	cmp	w1, #0x0
    40005f10:	54002a4d 	b.le	40006458 <_vfprintf_r+0x20b8>
    40005f14:	f94047e0 	ldr	x0, [sp, #136]
    40005f18:	b9009be1 	str	w1, [sp, #152]
    40005f1c:	91002c02 	add	x2, x0, #0xb
    40005f20:	927df041 	and	x1, x2, #0xfffffffffffffff8
    40005f24:	f90047e1 	str	x1, [sp, #136]
    40005f28:	17fffef0 	b	40005ae8 <_vfprintf_r+0x1748>
    40005f2c:	52800027 	mov	w7, #0x1                   	// #1
    40005f30:	1e614109 	fneg	d9, d8
    40005f34:	528005aa 	mov	w10, #0x2d                  	// #45
    40005f38:	17ffff16 	b	40005b90 <_vfprintf_r+0x17f0>
    40005f3c:	b9409be0 	ldr	w0, [sp, #152]
    40005f40:	11002001 	add	w1, w0, #0x8
    40005f44:	7100003f 	cmp	w1, #0x0
    40005f48:	54002ded 	b.le	40006504 <_vfprintf_r+0x2164>
    40005f4c:	f94047e0 	ldr	x0, [sp, #136]
    40005f50:	b9009be1 	str	w1, [sp, #152]
    40005f54:	91002c02 	add	x2, x0, #0xb
    40005f58:	927df041 	and	x1, x2, #0xfffffffffffffff8
    40005f5c:	f90047e1 	str	x1, [sp, #136]
    40005f60:	17fffdb1 	b	40005624 <_vfprintf_r+0x1284>
    40005f64:	b9409be0 	ldr	w0, [sp, #152]
    40005f68:	11002001 	add	w1, w0, #0x8
    40005f6c:	7100003f 	cmp	w1, #0x0
    40005f70:	54002c0d 	b.le	400064f0 <_vfprintf_r+0x2150>
    40005f74:	f94047e0 	ldr	x0, [sp, #136]
    40005f78:	b9009be1 	str	w1, [sp, #152]
    40005f7c:	91002c02 	add	x2, x0, #0xb
    40005f80:	927df041 	and	x1, x2, #0xfffffffffffffff8
    40005f84:	f90047e1 	str	x1, [sp, #136]
    40005f88:	17fffef7 	b	40005b64 <_vfprintf_r+0x17c4>
    40005f8c:	f9405280 	ldr	x0, [x20, #160]
    40005f90:	94005ef4 	bl	4001db60 <__retarget_lock_release_recursive>
    40005f94:	17fff98c 	b	400045c4 <_vfprintf_r+0x224>
    40005f98:	f9406fe2 	ldr	x2, [sp, #216]
    40005f9c:	b940d7e0 	ldr	w0, [sp, #212]
    40005fa0:	b900d7e1 	str	w1, [sp, #212]
    40005fa4:	8b20c040 	add	x0, x2, w0, sxtw
    40005fa8:	fd400008 	ldr	d8, [x0]
    40005fac:	17fffa35 	b	40004880 <_vfprintf_r+0x4e0>
    40005fb0:	f9406fe2 	ldr	x2, [sp, #216]
    40005fb4:	b940d7e0 	ldr	w0, [sp, #212]
    40005fb8:	b900d7e1 	str	w1, [sp, #212]
    40005fbc:	8b20c040 	add	x0, x2, w0, sxtw
    40005fc0:	17fffa29 	b	40004864 <_vfprintf_r+0x4c4>
    40005fc4:	52800020 	mov	w0, #0x1                   	// #1
    40005fc8:	4b070000 	sub	w0, w0, w7
    40005fcc:	b9012be0 	str	w0, [sp, #296]
    40005fd0:	17ffff08 	b	40005bf0 <_vfprintf_r+0x1850>
    40005fd4:	f9409fe0 	ldr	x0, [sp, #312]
    40005fd8:	b9412be1 	ldr	w1, [sp, #296]
    40005fdc:	cb170000 	sub	x0, x0, x23
    40005fe0:	b9009fe1 	str	w1, [sp, #156]
    40005fe4:	b900abe0 	str	w0, [sp, #168]
    40005fe8:	b9409fe1 	ldr	w1, [sp, #156]
    40005fec:	51000b7b 	sub	w27, w27, #0x2
    40005ff0:	6b0100ff 	cmp	w7, w1
    40005ff4:	3a43a821 	ccmn	w1, #0x3, #0x1, ge  // ge = tcont
    40005ff8:	5400084a 	b.ge	40006100 <_vfprintf_r+0x1d60>  // b.tcont
    40005ffc:	b9409fe2 	ldr	w2, [sp, #156]
    40006000:	52800561 	mov	w1, #0x2b                  	// #43
    40006004:	3904c3fb 	strb	w27, [sp, #304]
    40006008:	51000440 	sub	w0, w2, #0x1
    4000600c:	b9012be0 	str	w0, [sp, #296]
    40006010:	36f80080 	tbz	w0, #31, 40006020 <_vfprintf_r+0x1c80>
    40006014:	52800020 	mov	w0, #0x1                   	// #1
    40006018:	4b020000 	sub	w0, w0, w2
    4000601c:	528005a1 	mov	w1, #0x2d                  	// #45
    40006020:	3904c7e1 	strb	w1, [sp, #305]
    40006024:	7100241f 	cmp	w0, #0x9
    40006028:	54001aed 	b.le	40006384 <_vfprintf_r+0x1fe4>
    4000602c:	9104ffe7 	add	x7, sp, #0x13f
    40006030:	528cccec 	mov	w12, #0x6667                	// #26215
    40006034:	aa0703e5 	mov	x5, x7
    40006038:	72accccc 	movk	w12, #0x6666, lsl #16
    4000603c:	9b2c7c01 	smull	x1, w0, w12
    40006040:	aa0503e3 	mov	x3, x5
    40006044:	2a0003e4 	mov	w4, w0
    40006048:	d10004a5 	sub	x5, x5, #0x1
    4000604c:	9362fc21 	asr	x1, x1, #34
    40006050:	4b807c21 	sub	w1, w1, w0, asr #31
    40006054:	0b010822 	add	w2, w1, w1, lsl #2
    40006058:	4b020402 	sub	w2, w0, w2, lsl #1
    4000605c:	2a0103e0 	mov	w0, w1
    40006060:	1100c041 	add	w1, w2, #0x30
    40006064:	381ff061 	sturb	w1, [x3, #-1]
    40006068:	71018c9f 	cmp	w4, #0x63
    4000606c:	54fffe8c 	b.gt	4000603c <_vfprintf_r+0x1c9c>
    40006070:	1100c000 	add	w0, w0, #0x30
    40006074:	d1000861 	sub	x1, x3, #0x2
    40006078:	12001c00 	and	w0, w0, #0xff
    4000607c:	381ff0a0 	sturb	w0, [x5, #-1]
    40006080:	eb0100ff 	cmp	x7, x1
    40006084:	54002a29 	b.ls	400065c8 <_vfprintf_r+0x2228>  // b.plast
    40006088:	cb0300e2 	sub	x2, x7, x3
    4000608c:	9104c3e5 	add	x5, sp, #0x130
    40006090:	92800001 	mov	x1, #0xffffffffffffffff    	// #-1
    40006094:	14000003 	b	400060a0 <_vfprintf_r+0x1d00>
    40006098:	38616860 	ldrb	w0, [x3, x1]
    4000609c:	91000421 	add	x1, x1, #0x1
    400060a0:	8b0100a4 	add	x4, x5, x1
    400060a4:	39000c80 	strb	w0, [x4, #3]
    400060a8:	eb01005f 	cmp	x2, x1
    400060ac:	54ffff61 	b.ne	40006098 <_vfprintf_r+0x1cf8>  // b.any
    400060b0:	910507e0 	add	x0, sp, #0x141
    400060b4:	9104cbe1 	add	x1, sp, #0x132
    400060b8:	cb030000 	sub	x0, x0, x3
    400060bc:	8b000020 	add	x0, x1, x0
    400060c0:	4b050000 	sub	w0, w0, w5
    400060c4:	b900d3e0 	str	w0, [sp, #208]
    400060c8:	b940abe0 	ldr	w0, [sp, #168]
    400060cc:	b940d3e1 	ldr	w1, [sp, #208]
    400060d0:	0b000039 	add	w25, w1, w0
    400060d4:	7100041f 	cmp	w0, #0x1
    400060d8:	5400164d 	b.le	400063a0 <_vfprintf_r+0x2000>
    400060dc:	b940b3e0 	ldr	w0, [sp, #176]
    400060e0:	b9009fff 	str	wzr, [sp, #156]
    400060e4:	2b000339 	adds	w25, w25, w0
    400060e8:	1a9f5333 	csel	w19, w25, wzr, pl  // pl = nfrst
    400060ec:	17fffee1 	b	40005c70 <_vfprintf_r+0x18d0>
    400060f0:	39447fe3 	ldrb	w3, [sp, #287]
    400060f4:	52800007 	mov	w7, #0x0                   	// #0
    400060f8:	35ff2dc3 	cbnz	w3, 400046b0 <_vfprintf_r+0x310>
    400060fc:	17fff96e 	b	400046b4 <_vfprintf_r+0x314>
    40006100:	b9409fe1 	ldr	w1, [sp, #156]
    40006104:	b940abe2 	ldr	w2, [sp, #168]
    40006108:	6b01005f 	cmp	w2, w1
    4000610c:	54000c0c 	b.gt	4000628c <_vfprintf_r+0x1eec>
    40006110:	370015fa 	tbnz	w26, #0, 400063cc <_vfprintf_r+0x202c>
    40006114:	7100003f 	cmp	w1, #0x0
    40006118:	2a0103f9 	mov	w25, w1
    4000611c:	1a9fa033 	csel	w19, w1, wzr, ge  // ge = tcont
    40006120:	52800cfb 	mov	w27, #0x67                  	// #103
    40006124:	17fffed3 	b	40005c70 <_vfprintf_r+0x18d0>
    40006128:	910503e2 	add	x2, sp, #0x140
    4000612c:	aa1403e1 	mov	x1, x20
    40006130:	aa1803e0 	mov	x0, x24
    40006134:	9400230f 	bl	4000ed70 <__sprint_r>
    40006138:	35ff35e0 	cbnz	w0, 400047f4 <_vfprintf_r+0x454>
    4000613c:	b9412be2 	ldr	w2, [sp, #296]
    40006140:	aa1603e6 	mov	x6, x22
    40006144:	f940abe0 	ldr	x0, [sp, #336]
    40006148:	17fffde3 	b	400058d4 <_vfprintf_r+0x1534>
    4000614c:	910503e2 	add	x2, sp, #0x140
    40006150:	aa1403e1 	mov	x1, x20
    40006154:	aa1803e0 	mov	x0, x24
    40006158:	94002306 	bl	4000ed70 <__sprint_r>
    4000615c:	35ff34c0 	cbnz	w0, 400047f4 <_vfprintf_r+0x454>
    40006160:	b9412bf9 	ldr	w25, [sp, #296]
    40006164:	aa1603e6 	mov	x6, x22
    40006168:	f940abe0 	ldr	x0, [sp, #336]
    4000616c:	17fffc95 	b	400053c0 <_vfprintf_r+0x1020>
    40006170:	f94067e5 	ldr	x5, [sp, #200]
    40006174:	b9409be0 	ldr	w0, [sp, #152]
    40006178:	b9009be4 	str	w4, [sp, #152]
    4000617c:	8b20c0a5 	add	x5, x5, w0, sxtw
    40006180:	f94047e0 	ldr	x0, [sp, #136]
    40006184:	f90047e5 	str	x5, [sp, #136]
    40006188:	17fffa3d 	b	40004a7c <_vfprintf_r+0x6dc>
    4000618c:	f94067e2 	ldr	x2, [sp, #200]
    40006190:	b9409be0 	ldr	w0, [sp, #152]
    40006194:	b9009be1 	str	w1, [sp, #152]
    40006198:	8b20c040 	add	x0, x2, w0, sxtw
    4000619c:	17fffa47 	b	40004ab8 <_vfprintf_r+0x718>
    400061a0:	f94067e2 	ldr	x2, [sp, #200]
    400061a4:	b9409be1 	ldr	w1, [sp, #152]
    400061a8:	b9009be0 	str	w0, [sp, #152]
    400061ac:	8b21c043 	add	x3, x2, w1, sxtw
    400061b0:	17fffa78 	b	40004b90 <_vfprintf_r+0x7f0>
    400061b4:	f94067e2 	ldr	x2, [sp, #200]
    400061b8:	b9409be1 	ldr	w1, [sp, #152]
    400061bc:	b9009be0 	str	w0, [sp, #152]
    400061c0:	f94047f3 	ldr	x19, [sp, #136]
    400061c4:	8b21c041 	add	x1, x2, w1, sxtw
    400061c8:	f90047e1 	str	x1, [sp, #136]
    400061cc:	17fffa4f 	b	40004b08 <_vfprintf_r+0x768>
    400061d0:	910040c6 	add	x6, x6, #0x10
    400061d4:	17fffdcf 	b	40005910 <_vfprintf_r+0x1570>
    400061d8:	910503e2 	add	x2, sp, #0x140
    400061dc:	aa1403e1 	mov	x1, x20
    400061e0:	aa1803e0 	mov	x0, x24
    400061e4:	940022e3 	bl	4000ed70 <__sprint_r>
    400061e8:	35ff3060 	cbnz	w0, 400047f4 <_vfprintf_r+0x454>
    400061ec:	b940abe1 	ldr	w1, [sp, #168]
    400061f0:	aa1603e6 	mov	x6, x22
    400061f4:	b9412bf9 	ldr	w25, [sp, #296]
    400061f8:	f940abe0 	ldr	x0, [sp, #336]
    400061fc:	4b190039 	sub	w25, w1, w25
    40006200:	17fffc83 	b	4000540c <_vfprintf_r+0x106c>
    40006204:	39447fe3 	ldrb	w3, [sp, #287]
    40006208:	2a0703f9 	mov	w25, w7
    4000620c:	b9007bfa 	str	w26, [sp, #120]
    40006210:	f90047f3 	str	x19, [sp, #136]
    40006214:	2a0703f3 	mov	w19, w7
    40006218:	b9009fff 	str	wzr, [sp, #156]
    4000621c:	52800007 	mov	w7, #0x0                   	// #0
    40006220:	35ff2483 	cbnz	w3, 400046b0 <_vfprintf_r+0x310>
    40006224:	17fff924 	b	400046b4 <_vfprintf_r+0x314>
    40006228:	7101167f 	cmp	w19, #0x45
    4000622c:	54001e81 	b.ne	400065fc <_vfprintf_r+0x225c>  // b.any
    40006230:	110004f9 	add	w25, w7, #0x1
    40006234:	9104e3e5 	add	x5, sp, #0x138
    40006238:	2a1903e2 	mov	w2, w25
    4000623c:	9104b3e4 	add	x4, sp, #0x12c
    40006240:	9104a3e3 	add	x3, sp, #0x128
    40006244:	aa1803e0 	mov	x0, x24
    40006248:	52800041 	mov	w1, #0x2                   	// #2
    4000624c:	b90093e7 	str	w7, [sp, #144]
    40006250:	940008ec 	bl	40008600 <_dtoa_r>
    40006254:	aa0003f7 	mov	x23, x0
    40006258:	b94093e7 	ldr	w7, [sp, #144]
    4000625c:	b9409fea 	ldr	w10, [sp, #156]
    40006260:	f94057e6 	ldr	x6, [sp, #168]
    40006264:	8b39c2e1 	add	x1, x23, w25, sxtw
    40006268:	17fffe64 	b	40005bf8 <_vfprintf_r+0x1858>
    4000626c:	39047fe2 	strb	w2, [sp, #287]
    40006270:	17fffa8a 	b	40004c98 <_vfprintf_r+0x8f8>
    40006274:	39047fe2 	strb	w2, [sp, #287]
    40006278:	17fffa5d 	b	40004bec <_vfprintf_r+0x84c>
    4000627c:	39047fe2 	strb	w2, [sp, #287]
    40006280:	17fff9cc 	b	400049b0 <_vfprintf_r+0x610>
    40006284:	39047fe2 	strb	w2, [sp, #287]
    40006288:	17fff96f 	b	40004844 <_vfprintf_r+0x4a4>
    4000628c:	b940b3e1 	ldr	w1, [sp, #176]
    40006290:	0b000039 	add	w25, w1, w0
    40006294:	b9409fe0 	ldr	w0, [sp, #156]
    40006298:	7100001f 	cmp	w0, #0x0
    4000629c:	54000fcd 	b.le	40006494 <_vfprintf_r+0x20f4>
    400062a0:	7100033f 	cmp	w25, #0x0
    400062a4:	52800cfb 	mov	w27, #0x67                  	// #103
    400062a8:	1a9fa333 	csel	w19, w25, wzr, ge  // ge = tcont
    400062ac:	17fffe71 	b	40005c70 <_vfprintf_r+0x18d0>
    400062b0:	39047fe2 	strb	w2, [sp, #287]
    400062b4:	17fffa42 	b	40004bbc <_vfprintf_r+0x81c>
    400062b8:	900000e3 	adrp	x3, 40022000 <__pow_log_data+0xcc8>
    400062bc:	4b0203f9 	neg	w25, w2
    400062c0:	9135c063 	add	x3, x3, #0xd70
    400062c4:	3100405f 	cmn	w2, #0x10
    400062c8:	5400036a 	b.ge	40006334 <_vfprintf_r+0x1f94>  // b.tcont
    400062cc:	2a0103e2 	mov	w2, w1
    400062d0:	aa0303fb 	mov	x27, x3
    400062d4:	d280021a 	mov	x26, #0x10                  	// #16
    400062d8:	14000004 	b	400062e8 <_vfprintf_r+0x1f48>
    400062dc:	51004339 	sub	w25, w25, #0x10
    400062e0:	7100433f 	cmp	w25, #0x10
    400062e4:	5400024d 	b.le	4000632c <_vfprintf_r+0x1f8c>
    400062e8:	91004000 	add	x0, x0, #0x10
    400062ec:	11000442 	add	w2, w2, #0x1
    400062f0:	a90068db 	stp	x27, x26, [x6]
    400062f4:	910040c6 	add	x6, x6, #0x10
    400062f8:	b9014be2 	str	w2, [sp, #328]
    400062fc:	f900abe0 	str	x0, [sp, #336]
    40006300:	71001c5f 	cmp	w2, #0x7
    40006304:	54fffecd 	b.le	400062dc <_vfprintf_r+0x1f3c>
    40006308:	910503e2 	add	x2, sp, #0x140
    4000630c:	aa1403e1 	mov	x1, x20
    40006310:	aa1803e0 	mov	x0, x24
    40006314:	94002297 	bl	4000ed70 <__sprint_r>
    40006318:	35ff26e0 	cbnz	w0, 400047f4 <_vfprintf_r+0x454>
    4000631c:	b9414be2 	ldr	w2, [sp, #328]
    40006320:	aa1603e6 	mov	x6, x22
    40006324:	f940abe0 	ldr	x0, [sp, #336]
    40006328:	17ffffed 	b	400062dc <_vfprintf_r+0x1f3c>
    4000632c:	2a0203e1 	mov	w1, w2
    40006330:	aa1b03e3 	mov	x3, x27
    40006334:	93407f39 	sxtw	x25, w25
    40006338:	11000421 	add	w1, w1, #0x1
    4000633c:	8b190000 	add	x0, x0, x25
    40006340:	a90064c3 	stp	x3, x25, [x6]
    40006344:	b9014be1 	str	w1, [sp, #328]
    40006348:	f900abe0 	str	x0, [sp, #336]
    4000634c:	71001c3f 	cmp	w1, #0x7
    40006350:	54fff40d 	b.le	400061d0 <_vfprintf_r+0x1e30>
    40006354:	910503e2 	add	x2, sp, #0x140
    40006358:	aa1403e1 	mov	x1, x20
    4000635c:	aa1803e0 	mov	x0, x24
    40006360:	94002284 	bl	4000ed70 <__sprint_r>
    40006364:	35ff2480 	cbnz	w0, 400047f4 <_vfprintf_r+0x454>
    40006368:	b9414be1 	ldr	w1, [sp, #328]
    4000636c:	aa1603e6 	mov	x6, x22
    40006370:	f940abe0 	ldr	x0, [sp, #336]
    40006374:	17fffd67 	b	40005910 <_vfprintf_r+0x1570>
    40006378:	12800000 	mov	w0, #0xffffffff            	// #-1
    4000637c:	b90087e0 	str	w0, [sp, #132]
    40006380:	17fff924 	b	40004810 <_vfprintf_r+0x470>
    40006384:	1100c000 	add	w0, w0, #0x30
    40006388:	3904cfe0 	strb	w0, [sp, #307]
    4000638c:	52800600 	mov	w0, #0x30                  	// #48
    40006390:	3904cbe0 	strb	w0, [sp, #306]
    40006394:	52800080 	mov	w0, #0x4                   	// #4
    40006398:	b900d3e0 	str	w0, [sp, #208]
    4000639c:	17ffff4b 	b	400060c8 <_vfprintf_r+0x1d28>
    400063a0:	12000340 	and	w0, w26, #0x1
    400063a4:	b9009fe0 	str	w0, [sp, #156]
    400063a8:	3707e9ba 	tbnz	w26, #0, 400060dc <_vfprintf_r+0x1d3c>
    400063ac:	7100033f 	cmp	w25, #0x0
    400063b0:	1a9fa333 	csel	w19, w25, wzr, ge  // ge = tcont
    400063b4:	17fffe2f 	b	40005c70 <_vfprintf_r+0x18d0>
    400063b8:	b940b3e0 	ldr	w0, [sp, #176]
    400063bc:	0b000039 	add	w25, w1, w0
    400063c0:	2b070339 	adds	w25, w25, w7
    400063c4:	1a9f5333 	csel	w19, w25, wzr, pl  // pl = nfrst
    400063c8:	17fffe2a 	b	40005c70 <_vfprintf_r+0x18d0>
    400063cc:	b9409fe0 	ldr	w0, [sp, #156]
    400063d0:	52800cfb 	mov	w27, #0x67                  	// #103
    400063d4:	b940b3e1 	ldr	w1, [sp, #176]
    400063d8:	2b010019 	adds	w25, w0, w1
    400063dc:	1a9f5333 	csel	w19, w25, wzr, pl  // pl = nfrst
    400063e0:	17fffe24 	b	40005c70 <_vfprintf_r+0x18d0>
    400063e4:	9e660100 	fmov	x0, d8
    400063e8:	b7f80e80 	tbnz	x0, #63, 400065b8 <_vfprintf_r+0x2218>
    400063ec:	39447fe3 	ldrb	w3, [sp, #287]
    400063f0:	900000e0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    400063f4:	900000e4 	adrp	x4, 40022000 <__pow_log_data+0xcc8>
    400063f8:	7101237f 	cmp	w27, #0x48
    400063fc:	91346000 	add	x0, x0, #0xd18
    40006400:	91344084 	add	x4, x4, #0xd10
    40006404:	17fff92c 	b	400048b4 <_vfprintf_r+0x514>
    40006408:	b9409be0 	ldr	w0, [sp, #152]
    4000640c:	11002001 	add	w1, w0, #0x8
    40006410:	7100003f 	cmp	w1, #0x0
    40006414:	540009ed 	b.le	40006550 <_vfprintf_r+0x21b0>
    40006418:	f94047e0 	ldr	x0, [sp, #136]
    4000641c:	b9009be1 	str	w1, [sp, #152]
    40006420:	91003c02 	add	x2, x0, #0xf
    40006424:	927df041 	and	x1, x2, #0xfffffffffffffff8
    40006428:	f90047e1 	str	x1, [sp, #136]
    4000642c:	17fffc74 	b	400055fc <_vfprintf_r+0x125c>
    40006430:	b9409be0 	ldr	w0, [sp, #152]
    40006434:	11002001 	add	w1, w0, #0x8
    40006438:	7100003f 	cmp	w1, #0x0
    4000643c:	5400080d 	b.le	4000653c <_vfprintf_r+0x219c>
    40006440:	f94047e0 	ldr	x0, [sp, #136]
    40006444:	b9009be1 	str	w1, [sp, #152]
    40006448:	91003c02 	add	x2, x0, #0xf
    4000644c:	927df041 	and	x1, x2, #0xfffffffffffffff8
    40006450:	f90047e1 	str	x1, [sp, #136]
    40006454:	17fffe68 	b	40005df4 <_vfprintf_r+0x1a54>
    40006458:	f94067e2 	ldr	x2, [sp, #200]
    4000645c:	b9409be0 	ldr	w0, [sp, #152]
    40006460:	b9009be1 	str	w1, [sp, #152]
    40006464:	8b20c040 	add	x0, x2, w0, sxtw
    40006468:	17fffda0 	b	40005ae8 <_vfprintf_r+0x1748>
    4000646c:	f94067e2 	ldr	x2, [sp, #200]
    40006470:	b9409be0 	ldr	w0, [sp, #152]
    40006474:	b9009be1 	str	w1, [sp, #152]
    40006478:	8b20c040 	add	x0, x2, w0, sxtw
    4000647c:	17fff93c 	b	4000496c <_vfprintf_r+0x5cc>
    40006480:	f94067e2 	ldr	x2, [sp, #200]
    40006484:	b9409be0 	ldr	w0, [sp, #152]
    40006488:	b9009be1 	str	w1, [sp, #152]
    4000648c:	8b20c040 	add	x0, x2, w0, sxtw
    40006490:	17fff941 	b	40004994 <_vfprintf_r+0x5f4>
    40006494:	b9409fe0 	ldr	w0, [sp, #156]
    40006498:	52800cfb 	mov	w27, #0x67                  	// #103
    4000649c:	4b000339 	sub	w25, w25, w0
    400064a0:	31000739 	adds	w25, w25, #0x1
    400064a4:	1a9f5333 	csel	w19, w25, wzr, pl  // pl = nfrst
    400064a8:	17fffdf2 	b	40005c70 <_vfprintf_r+0x18d0>
    400064ac:	f94067e2 	ldr	x2, [sp, #200]
    400064b0:	b9409be0 	ldr	w0, [sp, #152]
    400064b4:	b9009be1 	str	w1, [sp, #152]
    400064b8:	8b20c040 	add	x0, x2, w0, sxtw
    400064bc:	79400000 	ldrh	w0, [x0]
    400064c0:	17fff9d7 	b	40004c1c <_vfprintf_r+0x87c>
    400064c4:	f94067e2 	ldr	x2, [sp, #200]
    400064c8:	b9409be0 	ldr	w0, [sp, #152]
    400064cc:	b9009be1 	str	w1, [sp, #152]
    400064d0:	8b20c040 	add	x0, x2, w0, sxtw
    400064d4:	b9400000 	ldr	w0, [x0]
    400064d8:	17fff9d1 	b	40004c1c <_vfprintf_r+0x87c>
    400064dc:	f94067e2 	ldr	x2, [sp, #200]
    400064e0:	b9409be0 	ldr	w0, [sp, #152]
    400064e4:	b9009be1 	str	w1, [sp, #152]
    400064e8:	8b20c040 	add	x0, x2, w0, sxtw
    400064ec:	17fffd87 	b	40005b08 <_vfprintf_r+0x1768>
    400064f0:	f94067e2 	ldr	x2, [sp, #200]
    400064f4:	b9409be0 	ldr	w0, [sp, #152]
    400064f8:	b9009be1 	str	w1, [sp, #152]
    400064fc:	8b20c040 	add	x0, x2, w0, sxtw
    40006500:	17fffd99 	b	40005b64 <_vfprintf_r+0x17c4>
    40006504:	f94067e2 	ldr	x2, [sp, #200]
    40006508:	b9409be0 	ldr	w0, [sp, #152]
    4000650c:	b9009be1 	str	w1, [sp, #152]
    40006510:	8b20c040 	add	x0, x2, w0, sxtw
    40006514:	17fffc44 	b	40005624 <_vfprintf_r+0x1284>
    40006518:	b940b280 	ldr	w0, [x20, #176]
    4000651c:	3707f2e0 	tbnz	w0, #0, 40006378 <_vfprintf_r+0x1fd8>
    40006520:	79402280 	ldrh	w0, [x20, #16]
    40006524:	374ff2a0 	tbnz	w0, #9, 40006378 <_vfprintf_r+0x1fd8>
    40006528:	f9405280 	ldr	x0, [x20, #160]
    4000652c:	12800001 	mov	w1, #0xffffffff            	// #-1
    40006530:	b90087e1 	str	w1, [sp, #132]
    40006534:	94005d8b 	bl	4001db60 <__retarget_lock_release_recursive>
    40006538:	17fff8b6 	b	40004810 <_vfprintf_r+0x470>
    4000653c:	f94067e2 	ldr	x2, [sp, #200]
    40006540:	b9409be0 	ldr	w0, [sp, #152]
    40006544:	b9009be1 	str	w1, [sp, #152]
    40006548:	8b20c040 	add	x0, x2, w0, sxtw
    4000654c:	17fffe2a 	b	40005df4 <_vfprintf_r+0x1a54>
    40006550:	f94067e2 	ldr	x2, [sp, #200]
    40006554:	b9409be0 	ldr	w0, [sp, #152]
    40006558:	b9009be1 	str	w1, [sp, #152]
    4000655c:	8b20c040 	add	x0, x2, w0, sxtw
    40006560:	17fffc27 	b	400055fc <_vfprintf_r+0x125c>
    40006564:	b9409be0 	ldr	w0, [sp, #152]
    40006568:	37f80360 	tbnz	w0, #31, 400065d4 <_vfprintf_r+0x2234>
    4000656c:	f94047e0 	ldr	x0, [sp, #136]
    40006570:	91002c05 	add	x5, x0, #0xb
    40006574:	927df0a5 	and	x5, x5, #0xfffffffffffffff8
    40006578:	f90047e5 	str	x5, [sp, #136]
    4000657c:	b9400007 	ldr	w7, [x0]
    40006580:	39400789 	ldrb	w9, [x28, #1]
    40006584:	aa0403fc 	mov	x28, x4
    40006588:	710000ff 	cmp	w7, #0x0
    4000658c:	1a83a0e7 	csel	w7, w7, w3, ge  // ge = tcont
    40006590:	17fff7e1 	b	40004514 <_vfprintf_r+0x174>
    40006594:	35000080 	cbnz	w0, 400065a4 <_vfprintf_r+0x2204>
    40006598:	52800033 	mov	w19, #0x1                   	// #1
    4000659c:	2a1303f9 	mov	w25, w19
    400065a0:	17fffdb4 	b	40005c70 <_vfprintf_r+0x18d0>
    400065a4:	b940b3e0 	ldr	w0, [sp, #176]
    400065a8:	11000419 	add	w25, w0, #0x1
    400065ac:	2b070339 	adds	w25, w25, w7
    400065b0:	1a9f5333 	csel	w19, w25, wzr, pl  // pl = nfrst
    400065b4:	17fffdaf 	b	40005c70 <_vfprintf_r+0x18d0>
    400065b8:	528005a0 	mov	w0, #0x2d                  	// #45
    400065bc:	528005a3 	mov	w3, #0x2d                  	// #45
    400065c0:	39047fe0 	strb	w0, [sp, #287]
    400065c4:	17ffff8b 	b	400063f0 <_vfprintf_r+0x2050>
    400065c8:	52800040 	mov	w0, #0x2                   	// #2
    400065cc:	b900d3e0 	str	w0, [sp, #208]
    400065d0:	17fffebe 	b	400060c8 <_vfprintf_r+0x1d28>
    400065d4:	b9409be0 	ldr	w0, [sp, #152]
    400065d8:	11002005 	add	w5, w0, #0x8
    400065dc:	710000bf 	cmp	w5, #0x0
    400065e0:	5400030d 	b.le	40006640 <_vfprintf_r+0x22a0>
    400065e4:	f94047e0 	ldr	x0, [sp, #136]
    400065e8:	b9009be5 	str	w5, [sp, #152]
    400065ec:	91002c07 	add	x7, x0, #0xb
    400065f0:	927df0e5 	and	x5, x7, #0xfffffffffffffff8
    400065f4:	f90047e5 	str	x5, [sp, #136]
    400065f8:	17ffffe1 	b	4000657c <_vfprintf_r+0x21dc>
    400065fc:	2a0703e2 	mov	w2, w7
    40006600:	9104e3e5 	add	x5, sp, #0x138
    40006604:	9104b3e4 	add	x4, sp, #0x12c
    40006608:	9104a3e3 	add	x3, sp, #0x128
    4000660c:	aa1803e0 	mov	x0, x24
    40006610:	52800041 	mov	w1, #0x2                   	// #2
    40006614:	b90093e7 	str	w7, [sp, #144]
    40006618:	940007fa 	bl	40008600 <_dtoa_r>
    4000661c:	b94093e7 	ldr	w7, [sp, #144]
    40006620:	aa0003f7 	mov	x23, x0
    40006624:	b9409fea 	ldr	w10, [sp, #156]
    40006628:	71011e7f 	cmp	w19, #0x47
    4000662c:	2a0703f9 	mov	w25, w7
    40006630:	f94057e6 	ldr	x6, [sp, #168]
    40006634:	54ffe181 	b.ne	40006264 <_vfprintf_r+0x1ec4>  // b.any
    40006638:	2a0703e1 	mov	w1, w7
    4000663c:	17fffcda 	b	400059a4 <_vfprintf_r+0x1604>
    40006640:	f94067e7 	ldr	x7, [sp, #200]
    40006644:	b9409be0 	ldr	w0, [sp, #152]
    40006648:	b9009be5 	str	w5, [sp, #152]
    4000664c:	8b20c0e0 	add	x0, x7, w0, sxtw
    40006650:	17ffffcb 	b	4000657c <_vfprintf_r+0x21dc>
	...

0000000040006660 <__sbprintf>:
    40006660:	d11443ff 	sub	sp, sp, #0x510
    40006664:	a9007bfd 	stp	x29, x30, [sp]
    40006668:	910003fd 	mov	x29, sp
    4000666c:	a90153f3 	stp	x19, x20, [sp, #16]
    40006670:	aa0103f3 	mov	x19, x1
    40006674:	79402021 	ldrh	w1, [x1, #16]
    40006678:	aa0303f4 	mov	x20, x3
    4000667c:	910443e3 	add	x3, sp, #0x110
    40006680:	79402667 	ldrh	w7, [x19, #18]
    40006684:	121e7821 	and	w1, w1, #0xfffffffd
    40006688:	b940b264 	ldr	w4, [x19, #176]
    4000668c:	f9401a66 	ldr	x6, [x19, #48]
    40006690:	a9025bf5 	stp	x21, x22, [sp, #32]
    40006694:	aa0203f6 	mov	x22, x2
    40006698:	f9402265 	ldr	x5, [x19, #64]
    4000669c:	52808002 	mov	w2, #0x400                 	// #1024
    400066a0:	aa0003f5 	mov	x21, x0
    400066a4:	9103e3e0 	add	x0, sp, #0xf8
    400066a8:	f9002fe3 	str	x3, [sp, #88]
    400066ac:	b90067e2 	str	w2, [sp, #100]
    400066b0:	7900d3e1 	strh	w1, [sp, #104]
    400066b4:	7900d7e7 	strh	w7, [sp, #106]
    400066b8:	f9003be3 	str	x3, [sp, #112]
    400066bc:	b9007be2 	str	w2, [sp, #120]
    400066c0:	b90083ff 	str	wzr, [sp, #128]
    400066c4:	f90047e6 	str	x6, [sp, #136]
    400066c8:	f9004fe5 	str	x5, [sp, #152]
    400066cc:	b9010be4 	str	w4, [sp, #264]
    400066d0:	94005d17 	bl	4001db2c <__retarget_lock_init_recursive>
    400066d4:	a9401e86 	ldp	x6, x7, [x20]
    400066d8:	aa1603e2 	mov	x2, x22
    400066dc:	a9411684 	ldp	x4, x5, [x20, #16]
    400066e0:	9100c3e3 	add	x3, sp, #0x30
    400066e4:	aa1503e0 	mov	x0, x21
    400066e8:	910163e1 	add	x1, sp, #0x58
    400066ec:	a9031fe6 	stp	x6, x7, [sp, #48]
    400066f0:	a90417e4 	stp	x4, x5, [sp, #64]
    400066f4:	97fff72b 	bl	400043a0 <_vfprintf_r>
    400066f8:	2a0003f4 	mov	w20, w0
    400066fc:	37f800c0 	tbnz	w0, #31, 40006714 <__sbprintf+0xb4>
    40006700:	910163e1 	add	x1, sp, #0x58
    40006704:	aa1503e0 	mov	x0, x21
    40006708:	97ffefd2 	bl	40002650 <_fflush_r>
    4000670c:	7100001f 	cmp	w0, #0x0
    40006710:	5a9f0294 	csinv	w20, w20, wzr, eq  // eq = none
    40006714:	7940d3e0 	ldrh	w0, [sp, #104]
    40006718:	36300080 	tbz	w0, #6, 40006728 <__sbprintf+0xc8>
    4000671c:	79402260 	ldrh	w0, [x19, #16]
    40006720:	321a0000 	orr	w0, w0, #0x40
    40006724:	79002260 	strh	w0, [x19, #16]
    40006728:	f9407fe0 	ldr	x0, [sp, #248]
    4000672c:	94005d0a 	bl	4001db54 <__retarget_lock_close_recursive>
    40006730:	2a1403e0 	mov	w0, w20
    40006734:	a9407bfd 	ldp	x29, x30, [sp]
    40006738:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000673c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40006740:	911443ff 	add	sp, sp, #0x510
    40006744:	d65f03c0 	ret
	...

0000000040006750 <__svfscanf_r>:
    40006750:	d10d43ff 	sub	sp, sp, #0x350
    40006754:	a9007bfd 	stp	x29, x30, [sp]
    40006758:	910003fd 	mov	x29, sp
    4000675c:	a90153f3 	stp	x19, x20, [sp, #16]
    40006760:	aa0003f4 	mov	x20, x0
    40006764:	b940b020 	ldr	w0, [x1, #176]
    40006768:	a90573fb 	stp	x27, x28, [sp, #80]
    4000676c:	aa0103fb 	mov	x27, x1
    40006770:	aa0203f3 	mov	x19, x2
    40006774:	f9400061 	ldr	x1, [x3]
    40006778:	f9003fe1 	str	x1, [sp, #120]
    4000677c:	f9400461 	ldr	x1, [x3, #8]
    40006780:	f9004fe1 	str	x1, [sp, #152]
    40006784:	b9401861 	ldr	w1, [x3, #24]
    40006788:	b900b3e1 	str	w1, [sp, #176]
    4000678c:	37000060 	tbnz	w0, #0, 40006798 <__svfscanf_r+0x48>
    40006790:	79402360 	ldrh	w0, [x27, #16]
    40006794:	36480ec0 	tbz	w0, #9, 4000696c <__svfscanf_r+0x21c>
    40006798:	38401660 	ldrb	w0, [x19], #1
    4000679c:	b900dfe0 	str	w0, [sp, #220]
    400067a0:	3400a2e0 	cbz	w0, 40007bfc <__svfscanf_r+0x14ac>
    400067a4:	5280001c 	mov	w28, #0x0                   	// #0
    400067a8:	a9025bf5 	stp	x21, x22, [sp, #32]
    400067ac:	2a1c03f6 	mov	w22, w28
    400067b0:	900000e2 	adrp	x2, 40022000 <__pow_log_data+0xcc8>
    400067b4:	b00000e1 	adrp	x1, 40023000 <fpi.1>
    400067b8:	912fc042 	add	x2, x2, #0xbf0
    400067bc:	910e4021 	add	x1, x1, #0x390
    400067c0:	a90363f7 	stp	x23, x24, [sp, #48]
    400067c4:	a9046bf9 	stp	x25, x26, [sp, #64]
    400067c8:	f90033e2 	str	x2, [sp, #96]
    400067cc:	b9006bff 	str	wzr, [sp, #104]
    400067d0:	b90077ff 	str	wzr, [sp, #116]
    400067d4:	a9087fe1 	stp	x1, xzr, [sp, #128]
    400067d8:	f9004bff 	str	xzr, [sp, #144]
    400067dc:	f94033e2 	ldr	x2, [sp, #96]
    400067e0:	11000401 	add	w1, w0, #0x1
    400067e4:	38614841 	ldrb	w1, [x2, w1, uxtw]
    400067e8:	121d0037 	and	w23, w1, #0x8
    400067ec:	371804c1 	tbnz	w1, #3, 40006884 <__svfscanf_r+0x134>
    400067f0:	7100941f 	cmp	w0, #0x25
    400067f4:	540001e1 	b.ne	40006830 <__svfscanf_r+0xe0>  // b.any
    400067f8:	39400262 	ldrb	w2, [x19]
    400067fc:	52800018 	mov	w24, #0x0                   	// #0
    40006800:	d2800015 	mov	x21, #0x0                   	// #0
    40006804:	528011e3 	mov	w3, #0x8f                  	// #143
    40006808:	51009440 	sub	w0, w2, #0x25
    4000680c:	91000661 	add	x1, x19, #0x1
    40006810:	71014c1f 	cmp	w0, #0x53
    40006814:	540001e8 	b.hi	40006850 <__svfscanf_r+0x100>  // b.pmore
    40006818:	f94043e4 	ldr	x4, [sp, #128]
    4000681c:	78605880 	ldrh	w0, [x4, w0, uxtw #1]
    40006820:	10000064 	adr	x4, 4000682c <__svfscanf_r+0xdc>
    40006824:	8b20a880 	add	x0, x4, w0, sxth #2
    40006828:	d61f0000 	br	x0
    4000682c:	aa0103f3 	mov	x19, x1
    40006830:	b9400b60 	ldr	w0, [x27, #8]
    40006834:	7100001f 	cmp	w0, #0x0
    40006838:	540006cd 	b.le	40006910 <__svfscanf_r+0x1c0>
    4000683c:	f9400360 	ldr	x0, [x27]
    40006840:	385ff261 	ldurb	w1, [x19, #-1]
    40006844:	39400002 	ldrb	w2, [x0]
    40006848:	6b01005f 	cmp	w2, w1
    4000684c:	540004e0 	b.eq	400068e8 <__svfscanf_r+0x198>  // b.none
    40006850:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40006854:	a94363f7 	ldp	x23, x24, [sp, #48]
    40006858:	a9446bf9 	ldp	x25, x26, [sp, #64]
    4000685c:	b940b360 	ldr	w0, [x27, #176]
    40006860:	37000060 	tbnz	w0, #0, 4000686c <__svfscanf_r+0x11c>
    40006864:	79402360 	ldrh	w0, [x27, #16]
    40006868:	36480880 	tbz	w0, #9, 40006978 <__svfscanf_r+0x228>
    4000686c:	b94077e0 	ldr	w0, [sp, #116]
    40006870:	a9407bfd 	ldp	x29, x30, [sp]
    40006874:	a94153f3 	ldp	x19, x20, [sp, #16]
    40006878:	a94573fb 	ldp	x27, x28, [sp, #80]
    4000687c:	910d43ff 	add	sp, sp, #0x350
    40006880:	d65f03c0 	ret
    40006884:	900000f7 	adrp	x23, 40022000 <__pow_log_data+0xcc8>
    40006888:	b9400b60 	ldr	w0, [x27, #8]
    4000688c:	912fc6f7 	add	x23, x23, #0xbf1
    40006890:	1400000b 	b	400068bc <__svfscanf_r+0x16c>
    40006894:	f9400360 	ldr	x0, [x27]
    40006898:	39400001 	ldrb	w1, [x0]
    4000689c:	38776821 	ldrb	w1, [x1, x23]
    400068a0:	361801c1 	tbz	w1, #3, 400068d8 <__svfscanf_r+0x188>
    400068a4:	b9400b62 	ldr	w2, [x27, #8]
    400068a8:	91000400 	add	x0, x0, #0x1
    400068ac:	110006d6 	add	w22, w22, #0x1
    400068b0:	f9000360 	str	x0, [x27]
    400068b4:	51000440 	sub	w0, w2, #0x1
    400068b8:	b9000b60 	str	w0, [x27, #8]
    400068bc:	7100001f 	cmp	w0, #0x0
    400068c0:	54fffeac 	b.gt	40006894 <__svfscanf_r+0x144>
    400068c4:	aa1b03e1 	mov	x1, x27
    400068c8:	aa1403e0 	mov	x0, x20
    400068cc:	94001121 	bl	4000ad50 <__srefill_r>
    400068d0:	34fffe20 	cbz	w0, 40006894 <__svfscanf_r+0x144>
    400068d4:	d503201f 	nop
    400068d8:	38401660 	ldrb	w0, [x19], #1
    400068dc:	b900dfe0 	str	w0, [sp, #220]
    400068e0:	35fff7e0 	cbnz	w0, 400067dc <__svfscanf_r+0x8c>
    400068e4:	17ffffdb 	b	40006850 <__svfscanf_r+0x100>
    400068e8:	b9400b61 	ldr	w1, [x27, #8]
    400068ec:	91000400 	add	x0, x0, #0x1
    400068f0:	f9000360 	str	x0, [x27]
    400068f4:	110006d6 	add	w22, w22, #0x1
    400068f8:	51000420 	sub	w0, w1, #0x1
    400068fc:	b9000b60 	str	w0, [x27, #8]
    40006900:	38401660 	ldrb	w0, [x19], #1
    40006904:	b900dfe0 	str	w0, [sp, #220]
    40006908:	35fff6a0 	cbnz	w0, 400067dc <__svfscanf_r+0x8c>
    4000690c:	17ffffd1 	b	40006850 <__svfscanf_r+0x100>
    40006910:	aa1b03e1 	mov	x1, x27
    40006914:	aa1403e0 	mov	x0, x20
    40006918:	9400110e 	bl	4000ad50 <__srefill_r>
    4000691c:	34fff900 	cbz	w0, 4000683c <__svfscanf_r+0xec>
    40006920:	b94077e1 	ldr	w1, [sp, #116]
    40006924:	3400b1e1 	cbz	w1, 40007f60 <__svfscanf_r+0x1810>
    40006928:	79402360 	ldrh	w0, [x27, #16]
    4000692c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40006930:	f27a001f 	tst	x0, #0x40
    40006934:	5a9f0020 	csinv	w0, w1, wzr, eq  // eq = none
    40006938:	b90077e0 	str	w0, [sp, #116]
    4000693c:	a94363f7 	ldp	x23, x24, [sp, #48]
    40006940:	a9446bf9 	ldp	x25, x26, [sp, #64]
    40006944:	17ffffc6 	b	4000685c <__svfscanf_r+0x10c>
    40006948:	6a03031f 	tst	w24, w3
    4000694c:	54fff821 	b.ne	40006850 <__svfscanf_r+0x100>  // b.any
    40006950:	8b150ab5 	add	x21, x21, x21, lsl #2
    40006954:	92401c40 	and	x0, x2, #0xff
    40006958:	39400662 	ldrb	w2, [x19, #1]
    4000695c:	aa0103f3 	mov	x19, x1
    40006960:	8b150415 	add	x21, x0, x21, lsl #1
    40006964:	d100c2b5 	sub	x21, x21, #0x30
    40006968:	17ffffa8 	b	40006808 <__svfscanf_r+0xb8>
    4000696c:	f9405360 	ldr	x0, [x27, #160]
    40006970:	94005c7a 	bl	4001db58 <__retarget_lock_acquire_recursive>
    40006974:	17ffff89 	b	40006798 <__svfscanf_r+0x48>
    40006978:	f9405360 	ldr	x0, [x27, #160]
    4000697c:	94005c79 	bl	4001db60 <__retarget_lock_release_recursive>
    40006980:	b94077e0 	ldr	w0, [sp, #116]
    40006984:	a9407bfd 	ldp	x29, x30, [sp]
    40006988:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000698c:	a94573fb 	ldp	x27, x28, [sp, #80]
    40006990:	910d43ff 	add	sp, sp, #0x350
    40006994:	d65f03c0 	ret
    40006998:	aa0103f3 	mov	x19, x1
    4000699c:	52800099 	mov	w25, #0x4                   	// #4
    400069a0:	b9400b60 	ldr	w0, [x27, #8]
    400069a4:	7100001f 	cmp	w0, #0x0
    400069a8:	540006cd 	b.le	40006a80 <__svfscanf_r+0x330>
    400069ac:	36300758 	tbz	w24, #6, 40006a94 <__svfscanf_r+0x344>
    400069b0:	71000f3f 	cmp	w25, #0x3
    400069b4:	540017a0 	b.eq	40006ca8 <__svfscanf_r+0x558>  // b.none
    400069b8:	7100133f 	cmp	w25, #0x4
    400069bc:	54002ec0 	b.eq	40006f94 <__svfscanf_r+0x844>  // b.none
    400069c0:	7100073f 	cmp	w25, #0x1
    400069c4:	540029c0 	b.eq	40006efc <__svfscanf_r+0x7ac>  // b.none
    400069c8:	71000b3f 	cmp	w25, #0x2
    400069cc:	540026a1 	b.ne	40006ea0 <__svfscanf_r+0x750>  // b.any
    400069d0:	f9400361 	ldr	x1, [x27]
    400069d4:	900000fa 	adrp	x26, 40022000 <__pow_log_data+0xcc8>
    400069d8:	912fc75a 	add	x26, x26, #0xbf1
    400069dc:	f10002bf 	cmp	x21, #0x0
    400069e0:	da9f12b5 	csinv	x21, x21, xzr, ne  // ne = any
    400069e4:	121c0317 	and	w23, w24, #0x10
    400069e8:	39400020 	ldrb	w0, [x1]
    400069ec:	38606b40 	ldrb	w0, [x26, x0]
    400069f0:	121d0000 	and	w0, w0, #0x8
    400069f4:	370048d8 	tbnz	w24, #0, 4000730c <__svfscanf_r+0xbbc>
    400069f8:	34005a37 	cbz	w23, 4000753c <__svfscanf_r+0xdec>
    400069fc:	35fff6e0 	cbnz	w0, 400068d8 <__svfscanf_r+0x188>
    40006a00:	b9400b60 	ldr	w0, [x27, #8]
    40006a04:	91000421 	add	x1, x1, #0x1
    40006a08:	f9000361 	str	x1, [x27]
    40006a0c:	f10006b5 	subs	x21, x21, #0x1
    40006a10:	51000400 	sub	w0, w0, #0x1
    40006a14:	b9000b60 	str	w0, [x27, #8]
    40006a18:	52800038 	mov	w24, #0x1                   	// #1
    40006a1c:	540001c1 	b.ne	40006a54 <__svfscanf_r+0x304>  // b.any
    40006a20:	14000013 	b	40006a6c <__svfscanf_r+0x31c>
    40006a24:	f9400360 	ldr	x0, [x27]
    40006a28:	39400001 	ldrb	w1, [x0]
    40006a2c:	38616b41 	ldrb	w1, [x26, x1]
    40006a30:	371801e1 	tbnz	w1, #3, 40006a6c <__svfscanf_r+0x31c>
    40006a34:	b9400b62 	ldr	w2, [x27, #8]
    40006a38:	91000400 	add	x0, x0, #0x1
    40006a3c:	f9000360 	str	x0, [x27]
    40006a40:	11000718 	add	w24, w24, #0x1
    40006a44:	51000440 	sub	w0, w2, #0x1
    40006a48:	b9000b60 	str	w0, [x27, #8]
    40006a4c:	f10006b5 	subs	x21, x21, #0x1
    40006a50:	540000e0 	b.eq	40006a6c <__svfscanf_r+0x31c>  // b.none
    40006a54:	7100001f 	cmp	w0, #0x0
    40006a58:	54fffe6c 	b.gt	40006a24 <__svfscanf_r+0x2d4>
    40006a5c:	aa1b03e1 	mov	x1, x27
    40006a60:	aa1403e0 	mov	x0, x20
    40006a64:	940010bb 	bl	4000ad50 <__srefill_r>
    40006a68:	34fffde0 	cbz	w0, 40006a24 <__svfscanf_r+0x2d4>
    40006a6c:	0b1802d6 	add	w22, w22, w24
    40006a70:	38401660 	ldrb	w0, [x19], #1
    40006a74:	b900dfe0 	str	w0, [sp, #220]
    40006a78:	35ffeb20 	cbnz	w0, 400067dc <__svfscanf_r+0x8c>
    40006a7c:	17ffff75 	b	40006850 <__svfscanf_r+0x100>
    40006a80:	aa1b03e1 	mov	x1, x27
    40006a84:	aa1403e0 	mov	x0, x20
    40006a88:	940010b2 	bl	4000ad50 <__srefill_r>
    40006a8c:	35fff4a0 	cbnz	w0, 40006920 <__svfscanf_r+0x1d0>
    40006a90:	3737f918 	tbnz	w24, #6, 400069b0 <__svfscanf_r+0x260>
    40006a94:	f9400361 	ldr	x1, [x27]
    40006a98:	900000fa 	adrp	x26, 40022000 <__pow_log_data+0xcc8>
    40006a9c:	912fc75a 	add	x26, x26, #0xbf1
    40006aa0:	39400020 	ldrb	w0, [x1]
    40006aa4:	38606b40 	ldrb	w0, [x26, x0]
    40006aa8:	361ff840 	tbz	w0, #3, 400069b0 <__svfscanf_r+0x260>
    40006aac:	aa0103e2 	mov	x2, x1
    40006ab0:	14000006 	b	40006ac8 <__svfscanf_r+0x378>
    40006ab4:	91000442 	add	x2, x2, #0x1
    40006ab8:	f9000362 	str	x2, [x27]
    40006abc:	39400040 	ldrb	w0, [x2]
    40006ac0:	38606b40 	ldrb	w0, [x26, x0]
    40006ac4:	361ff760 	tbz	w0, #3, 400069b0 <__svfscanf_r+0x260>
    40006ac8:	b9400b60 	ldr	w0, [x27, #8]
    40006acc:	110006d6 	add	w22, w22, #0x1
    40006ad0:	51000400 	sub	w0, w0, #0x1
    40006ad4:	b9000b60 	str	w0, [x27, #8]
    40006ad8:	7100001f 	cmp	w0, #0x0
    40006adc:	54fffecc 	b.gt	40006ab4 <__svfscanf_r+0x364>
    40006ae0:	aa1b03e1 	mov	x1, x27
    40006ae4:	aa1403e0 	mov	x0, x20
    40006ae8:	9400109a 	bl	4000ad50 <__srefill_r>
    40006aec:	35fff1a0 	cbnz	w0, 40006920 <__svfscanf_r+0x1d0>
    40006af0:	f9400362 	ldr	x2, [x27]
    40006af4:	17fffff2 	b	40006abc <__svfscanf_r+0x36c>
    40006af8:	aa0103f3 	mov	x19, x1
    40006afc:	d0000020 	adrp	x0, 4000c000 <_strtod_l+0xf40>
    40006b00:	52800201 	mov	w1, #0x10                  	// #16
    40006b04:	911c8000 	add	x0, x0, #0x720
    40006b08:	32170318 	orr	w24, w24, #0x200
    40006b0c:	52800079 	mov	w25, #0x3                   	// #3
    40006b10:	b9006be1 	str	w1, [sp, #104]
    40006b14:	f90047e0 	str	x0, [sp, #136]
    40006b18:	17ffffa2 	b	400069a0 <__svfscanf_r+0x250>
    40006b1c:	32000318 	orr	w24, w24, #0x1
    40006b20:	aa0103f3 	mov	x19, x1
    40006b24:	d0000020 	adrp	x0, 4000c000 <_strtod_l+0xf40>
    40006b28:	52800141 	mov	w1, #0xa                   	// #10
    40006b2c:	910ec000 	add	x0, x0, #0x3b0
    40006b30:	52800079 	mov	w25, #0x3                   	// #3
    40006b34:	b9006be1 	str	w1, [sp, #104]
    40006b38:	f90047e0 	str	x0, [sp, #136]
    40006b3c:	17ffff99 	b	400069a0 <__svfscanf_r+0x250>
    40006b40:	f2400f1f 	tst	x24, #0xf
    40006b44:	54ffe861 	b.ne	40006850 <__svfscanf_r+0x100>  // b.any
    40006b48:	39400662 	ldrb	w2, [x19, #1]
    40006b4c:	321e0318 	orr	w24, w24, #0x4
    40006b50:	aa0103f3 	mov	x19, x1
    40006b54:	17ffff2d 	b	40006808 <__svfscanf_r+0xb8>
    40006b58:	f2400f1f 	tst	x24, #0xf
    40006b5c:	54ffe7a1 	b.ne	40006850 <__svfscanf_r+0x100>  // b.any
    40006b60:	39400662 	ldrb	w2, [x19, #1]
    40006b64:	7101b05f 	cmp	w2, #0x6c
    40006b68:	54008260 	b.eq	40007bb4 <__svfscanf_r+0x1464>  // b.none
    40006b6c:	32000318 	orr	w24, w24, #0x1
    40006b70:	aa0103f3 	mov	x19, x1
    40006b74:	17ffff25 	b	40006808 <__svfscanf_r+0xb8>
    40006b78:	7100031f 	cmp	w24, #0x0
    40006b7c:	fa400aa0 	ccmp	x21, #0x0, #0x0, eq  // eq = none
    40006b80:	54ffe681 	b.ne	40006850 <__svfscanf_r+0x100>  // b.any
    40006b84:	39400662 	ldrb	w2, [x19, #1]
    40006b88:	52800218 	mov	w24, #0x10                  	// #16
    40006b8c:	aa0103f3 	mov	x19, x1
    40006b90:	d2800015 	mov	x21, #0x0                   	// #0
    40006b94:	17ffff1d 	b	40006808 <__svfscanf_r+0xb8>
    40006b98:	aa0103f3 	mov	x19, x1
    40006b9c:	d0000020 	adrp	x0, 4000c000 <_strtod_l+0xf40>
    40006ba0:	52800141 	mov	w1, #0xa                   	// #10
    40006ba4:	911c8000 	add	x0, x0, #0x720
    40006ba8:	52800079 	mov	w25, #0x3                   	// #3
    40006bac:	b9006be1 	str	w1, [sp, #104]
    40006bb0:	f90047e0 	str	x0, [sp, #136]
    40006bb4:	17ffff7b 	b	400069a0 <__svfscanf_r+0x250>
    40006bb8:	aa0103f3 	mov	x19, x1
    40006bbc:	3727e8f8 	tbnz	w24, #4, 400068d8 <__svfscanf_r+0x188>
    40006bc0:	b940b3e0 	ldr	w0, [sp, #176]
    40006bc4:	37107458 	tbnz	w24, #2, 40007a4c <__svfscanf_r+0x12fc>
    40006bc8:	37008338 	tbnz	w24, #0, 40007c2c <__svfscanf_r+0x14dc>
    40006bcc:	37088318 	tbnz	w24, #1, 40007c2c <__svfscanf_r+0x14dc>
    40006bd0:	37f8a180 	tbnz	w0, #31, 40008000 <__svfscanf_r+0x18b0>
    40006bd4:	f9403fe0 	ldr	x0, [sp, #120]
    40006bd8:	91003c02 	add	x2, x0, #0xf
    40006bdc:	927df042 	and	x2, x2, #0xfffffffffffffff8
    40006be0:	f9003fe2 	str	x2, [sp, #120]
    40006be4:	f9400000 	ldr	x0, [x0]
    40006be8:	aa0103f3 	mov	x19, x1
    40006bec:	b9000016 	str	w22, [x0]
    40006bf0:	17ffff3a 	b	400068d8 <__svfscanf_r+0x188>
    40006bf4:	d0000020 	adrp	x0, 4000c000 <_strtod_l+0xf40>
    40006bf8:	911c8000 	add	x0, x0, #0x720
    40006bfc:	aa0103f3 	mov	x19, x1
    40006c00:	52800079 	mov	w25, #0x3                   	// #3
    40006c04:	52804401 	mov	w1, #0x220                 	// #544
    40006c08:	2a010318 	orr	w24, w24, w1
    40006c0c:	f90047e0 	str	x0, [sp, #136]
    40006c10:	52800200 	mov	w0, #0x10                  	// #16
    40006c14:	b9006be0 	str	w0, [sp, #104]
    40006c18:	17ffff62 	b	400069a0 <__svfscanf_r+0x250>
    40006c1c:	aa0103f3 	mov	x19, x1
    40006c20:	52800059 	mov	w25, #0x2                   	// #2
    40006c24:	17ffff5f 	b	400069a0 <__svfscanf_r+0x250>
    40006c28:	9103c3e0 	add	x0, sp, #0xf0
    40006c2c:	321a0318 	orr	w24, w24, #0x40
    40006c30:	940010bc 	bl	4000af20 <__sccl>
    40006c34:	52800039 	mov	w25, #0x1                   	// #1
    40006c38:	aa0003f3 	mov	x19, x0
    40006c3c:	17ffff59 	b	400069a0 <__svfscanf_r+0x250>
    40006c40:	321a0318 	orr	w24, w24, #0x40
    40006c44:	aa0103f3 	mov	x19, x1
    40006c48:	52800019 	mov	w25, #0x0                   	// #0
    40006c4c:	17ffff55 	b	400069a0 <__svfscanf_r+0x250>
    40006c50:	aa0103f3 	mov	x19, x1
    40006c54:	d0000020 	adrp	x0, 4000c000 <_strtod_l+0xf40>
    40006c58:	52800101 	mov	w1, #0x8                   	// #8
    40006c5c:	911c8000 	add	x0, x0, #0x720
    40006c60:	32000318 	orr	w24, w24, #0x1
    40006c64:	52800079 	mov	w25, #0x3                   	// #3
    40006c68:	b9006be1 	str	w1, [sp, #104]
    40006c6c:	f90047e0 	str	x0, [sp, #136]
    40006c70:	17ffff4c 	b	400069a0 <__svfscanf_r+0x250>
    40006c74:	f2400f1f 	tst	x24, #0xf
    40006c78:	54ffdec1 	b.ne	40006850 <__svfscanf_r+0x100>  // b.any
    40006c7c:	39400662 	ldrb	w2, [x19, #1]
    40006c80:	321f0318 	orr	w24, w24, #0x2
    40006c84:	aa0103f3 	mov	x19, x1
    40006c88:	17fffee0 	b	40006808 <__svfscanf_r+0xb8>
    40006c8c:	d0000020 	adrp	x0, 4000c000 <_strtod_l+0xf40>
    40006c90:	aa0103f3 	mov	x19, x1
    40006c94:	910ec000 	add	x0, x0, #0x3b0
    40006c98:	52800079 	mov	w25, #0x3                   	// #3
    40006c9c:	b9006bff 	str	wzr, [sp, #104]
    40006ca0:	f90047e0 	str	x0, [sp, #136]
    40006ca4:	17ffff3f 	b	400069a0 <__svfscanf_r+0x250>
    40006ca8:	d10006a0 	sub	x0, x21, #0x1
    40006cac:	b900a3ff 	str	wzr, [sp, #160]
    40006cb0:	f105701f 	cmp	x0, #0x15c
    40006cb4:	54000089 	b.ls	40006cc4 <__svfscanf_r+0x574>  // b.plast
    40006cb8:	510576a0 	sub	w0, w21, #0x15d
    40006cbc:	d2802bb5 	mov	x21, #0x15d                 	// #349
    40006cc0:	b900a3e0 	str	w0, [sp, #160]
    40006cc4:	aa1503e4 	mov	x4, x21
    40006cc8:	b9406bf5 	ldr	w21, [sp, #104]
    40006ccc:	900000e7 	adrp	x7, 40022000 <__pow_log_data+0xcc8>
    40006cd0:	9107c3f7 	add	x23, sp, #0x1f0
    40006cd4:	913620f9 	add	x25, x7, #0xd88
    40006cd8:	5281b01c 	mov	w28, #0xd80                 	// #3456
    40006cdc:	1281701a 	mov	w26, #0xfffff47f            	// #-2945
    40006ce0:	2a1c031c 	orr	w28, w24, w28
    40006ce4:	52800018 	mov	w24, #0x0                   	// #0
    40006ce8:	f9400363 	ldr	x3, [x27]
    40006cec:	39400060 	ldrb	w0, [x3]
    40006cf0:	7100e41f 	cmp	w0, #0x39
    40006cf4:	54000968 	b.hi	40006e20 <__svfscanf_r+0x6d0>  // b.pmore
    40006cf8:	7100dc1f 	cmp	w0, #0x37
    40006cfc:	54002ee8 	b.hi	400072d8 <__svfscanf_r+0xb88>  // b.pmore
    40006d00:	7100c01f 	cmp	w0, #0x30
    40006d04:	54002f40 	b.eq	400072ec <__svfscanf_r+0xb9c>  // b.none
    40006d08:	540007e9 	b.ls	40006e04 <__svfscanf_r+0x6b4>  // b.plast
    40006d0c:	78f5db35 	ldrsh	w21, [x25, w21, sxtw #1]
    40006d10:	0a1a039c 	and	w28, w28, w26
    40006d14:	380016e0 	strb	w0, [x23], #1
    40006d18:	b9400b60 	ldr	w0, [x27, #8]
    40006d1c:	51000400 	sub	w0, w0, #0x1
    40006d20:	b9000b60 	str	w0, [x27, #8]
    40006d24:	7100001f 	cmp	w0, #0x0
    40006d28:	54000aed 	b.le	40006e84 <__svfscanf_r+0x734>
    40006d2c:	91000463 	add	x3, x3, #0x1
    40006d30:	f9000363 	str	x3, [x27]
    40006d34:	f1000484 	subs	x4, x4, #0x1
    40006d38:	54fffd81 	b.ne	40006ce8 <__svfscanf_r+0x598>  // b.any
    40006d3c:	d503201f 	nop
    40006d40:	b9006bf5 	str	w21, [sp, #104]
    40006d44:	364000fc 	tbz	w28, #8, 40006d60 <__svfscanf_r+0x610>
    40006d48:	9107c3e0 	add	x0, sp, #0x1f0
    40006d4c:	eb0002ff 	cmp	x23, x0
    40006d50:	54007068 	b.hi	40007b5c <__svfscanf_r+0x140c>  // b.pmore
    40006d54:	9107c3e0 	add	x0, sp, #0x1f0
    40006d58:	eb0002ff 	cmp	x23, x0
    40006d5c:	54ffd7a0 	b.eq	40006850 <__svfscanf_r+0x100>  // b.none
    40006d60:	3720043c 	tbnz	w28, #4, 40006de4 <__svfscanf_r+0x694>
    40006d64:	b9406be3 	ldr	w3, [sp, #104]
    40006d68:	9107c3e1 	add	x1, sp, #0x1f0
    40006d6c:	f94047e4 	ldr	x4, [sp, #136]
    40006d70:	aa1403e0 	mov	x0, x20
    40006d74:	d2800002 	mov	x2, #0x0                   	// #0
    40006d78:	390002ff 	strb	wzr, [x23]
    40006d7c:	d63f0080 	blr	x4
    40006d80:	372801dc 	tbnz	w28, #5, 40006db8 <__svfscanf_r+0x668>
    40006d84:	371062dc 	tbnz	w28, #2, 400079dc <__svfscanf_r+0x128c>
    40006d88:	3700019c 	tbnz	w28, #0, 40006db8 <__svfscanf_r+0x668>
    40006d8c:	3608881c 	tbz	w28, #1, 40007e8c <__svfscanf_r+0x173c>
    40006d90:	f94047e1 	ldr	x1, [sp, #136]
    40006d94:	d0000020 	adrp	x0, 4000c000 <_strtod_l+0xf40>
    40006d98:	911c8000 	add	x0, x0, #0x720
    40006d9c:	b9406be3 	ldr	w3, [sp, #104]
    40006da0:	eb00003f 	cmp	x1, x0
    40006da4:	d2800002 	mov	x2, #0x0                   	// #0
    40006da8:	9107c3e1 	add	x1, sp, #0x1f0
    40006dac:	aa1403e0 	mov	x0, x20
    40006db0:	54009020 	b.eq	40007fb4 <__svfscanf_r+0x1864>  // b.none
    40006db4:	940015ef 	bl	4000c570 <_strtoll_r>
    40006db8:	b940b3e1 	ldr	w1, [sp, #176]
    40006dbc:	37f85dc1 	tbnz	w1, #31, 40007974 <__svfscanf_r+0x1224>
    40006dc0:	f9403fe1 	ldr	x1, [sp, #120]
    40006dc4:	91003c22 	add	x2, x1, #0xf
    40006dc8:	927df042 	and	x2, x2, #0xfffffffffffffff8
    40006dcc:	f9003fe2 	str	x2, [sp, #120]
    40006dd0:	f9400021 	ldr	x1, [x1]
    40006dd4:	f9000020 	str	x0, [x1]
    40006dd8:	b94077e0 	ldr	w0, [sp, #116]
    40006ddc:	11000400 	add	w0, w0, #0x1
    40006de0:	b90077e0 	str	w0, [sp, #116]
    40006de4:	9107c3e0 	add	x0, sp, #0x1f0
    40006de8:	0b160305 	add	w5, w24, w22
    40006dec:	cb0002e1 	sub	x1, x23, x0
    40006df0:	38401660 	ldrb	w0, [x19], #1
    40006df4:	b900dfe0 	str	w0, [sp, #220]
    40006df8:	0b0100b6 	add	w22, w5, w1
    40006dfc:	35ffcf00 	cbnz	w0, 400067dc <__svfscanf_r+0x8c>
    40006e00:	17fffe94 	b	40006850 <__svfscanf_r+0x100>
    40006e04:	5100ac02 	sub	w2, w0, #0x2b
    40006e08:	52801fa1 	mov	w1, #0xfd                  	// #253
    40006e0c:	6a01005f 	tst	w2, w1
    40006e10:	54fff981 	b.ne	40006d40 <__svfscanf_r+0x5f0>  // b.any
    40006e14:	363ff97c 	tbz	w28, #7, 40006d40 <__svfscanf_r+0x5f0>
    40006e18:	12187b9c 	and	w28, w28, #0xffffff7f
    40006e1c:	17ffffbe 	b	40006d14 <__svfscanf_r+0x5c4>
    40006e20:	7101981f 	cmp	w0, #0x66
    40006e24:	54000168 	b.hi	40006e50 <__svfscanf_r+0x700>  // b.pmore
    40006e28:	7101801f 	cmp	w0, #0x60
    40006e2c:	540000a8 	b.hi	40006e40 <__svfscanf_r+0x6f0>  // b.pmore
    40006e30:	7101181f 	cmp	w0, #0x46
    40006e34:	54000228 	b.hi	40006e78 <__svfscanf_r+0x728>  // b.pmore
    40006e38:	7101001f 	cmp	w0, #0x40
    40006e3c:	54fff829 	b.ls	40006d40 <__svfscanf_r+0x5f0>  // b.plast
    40006e40:	71002abf 	cmp	w21, #0xa
    40006e44:	54fff7ed 	b.le	40006d40 <__svfscanf_r+0x5f0>
    40006e48:	0a1a039c 	and	w28, w28, w26
    40006e4c:	17ffffb2 	b	40006d14 <__svfscanf_r+0x5c4>
    40006e50:	7101e01f 	cmp	w0, #0x78
    40006e54:	54fff761 	b.ne	40006d40 <__svfscanf_r+0x5f0>  // b.any
    40006e58:	12170781 	and	w1, w28, #0x600
    40006e5c:	7108003f 	cmp	w1, #0x200
    40006e60:	54fff701 	b.ne	40006d40 <__svfscanf_r+0x5f0>  // b.any
    40006e64:	12167b9c 	and	w28, w28, #0xfffffdff
    40006e68:	5280a001 	mov	w1, #0x500                 	// #1280
    40006e6c:	52800215 	mov	w21, #0x10                  	// #16
    40006e70:	2a01039c 	orr	w28, w28, w1
    40006e74:	17ffffa8 	b	40006d14 <__svfscanf_r+0x5c4>
    40006e78:	7101601f 	cmp	w0, #0x58
    40006e7c:	54fffee0 	b.eq	40006e58 <__svfscanf_r+0x708>  // b.none
    40006e80:	17ffffb0 	b	40006d40 <__svfscanf_r+0x5f0>
    40006e84:	aa1b03e1 	mov	x1, x27
    40006e88:	aa1403e0 	mov	x0, x20
    40006e8c:	f90037e4 	str	x4, [sp, #104]
    40006e90:	94000fb0 	bl	4000ad50 <__srefill_r>
    40006e94:	f94037e4 	ldr	x4, [sp, #104]
    40006e98:	34fff4e0 	cbz	w0, 40006d34 <__svfscanf_r+0x5e4>
    40006e9c:	17ffffa9 	b	40006d40 <__svfscanf_r+0x5f0>
    40006ea0:	f10002bf 	cmp	x21, #0x0
    40006ea4:	121c031a 	and	w26, w24, #0x10
    40006ea8:	9a9f16b5 	csinc	x21, x21, xzr, ne  // ne = any
    40006eac:	370047b8 	tbnz	w24, #0, 400077a0 <__svfscanf_r+0x1050>
    40006eb0:	350031ba 	cbnz	w26, 400074e4 <__svfscanf_r+0xd94>
    40006eb4:	b940b3e0 	ldr	w0, [sp, #176]
    40006eb8:	37f863e0 	tbnz	w0, #31, 40007b34 <__svfscanf_r+0x13e4>
    40006ebc:	f9403fe0 	ldr	x0, [sp, #120]
    40006ec0:	91003c01 	add	x1, x0, #0xf
    40006ec4:	927df021 	and	x1, x1, #0xfffffffffffffff8
    40006ec8:	f9003fe1 	str	x1, [sp, #120]
    40006ecc:	f9400001 	ldr	x1, [x0]
    40006ed0:	aa1503e3 	mov	x3, x21
    40006ed4:	aa1b03e4 	mov	x4, x27
    40006ed8:	aa1403e0 	mov	x0, x20
    40006edc:	d2800022 	mov	x2, #0x1                   	// #1
    40006ee0:	94000a54 	bl	40009830 <_fread_r>
    40006ee4:	b4ffd1e0 	cbz	x0, 40006920 <__svfscanf_r+0x1d0>
    40006ee8:	0b0002d6 	add	w22, w22, w0
    40006eec:	b94077e0 	ldr	w0, [sp, #116]
    40006ef0:	11000400 	add	w0, w0, #0x1
    40006ef4:	b90077e0 	str	w0, [sp, #116]
    40006ef8:	17fffe78 	b	400068d8 <__svfscanf_r+0x188>
    40006efc:	f10002bf 	cmp	x21, #0x0
    40006f00:	121c031a 	and	w26, w24, #0x10
    40006f04:	da9f12b5 	csinv	x21, x21, xzr, ne  // ne = any
    40006f08:	37003798 	tbnz	w24, #0, 400075f8 <__svfscanf_r+0xea8>
    40006f0c:	f9400361 	ldr	x1, [x27]
    40006f10:	9103c3fc 	add	x28, sp, #0xf0
    40006f14:	39400020 	ldrb	w0, [x1]
    40006f18:	3860cb80 	ldrb	w0, [x28, w0, sxtw]
    40006f1c:	3400279a 	cbz	w26, 4000740c <__svfscanf_r+0xcbc>
    40006f20:	34ffc980 	cbz	w0, 40006850 <__svfscanf_r+0x100>
    40006f24:	b9400b60 	ldr	w0, [x27, #8]
    40006f28:	91000421 	add	x1, x1, #0x1
    40006f2c:	f9000361 	str	x1, [x27]
    40006f30:	f10006b5 	subs	x21, x21, #0x1
    40006f34:	51000400 	sub	w0, w0, #0x1
    40006f38:	b9000b60 	str	w0, [x27, #8]
    40006f3c:	540001c1 	b.ne	40006f74 <__svfscanf_r+0x824>  // b.any
    40006f40:	14000013 	b	40006f8c <__svfscanf_r+0x83c>
    40006f44:	f9400360 	ldr	x0, [x27]
    40006f48:	39400001 	ldrb	w1, [x0]
    40006f4c:	3861cb81 	ldrb	w1, [x28, w1, sxtw]
    40006f50:	340001e1 	cbz	w1, 40006f8c <__svfscanf_r+0x83c>
    40006f54:	b9400b62 	ldr	w2, [x27, #8]
    40006f58:	91000400 	add	x0, x0, #0x1
    40006f5c:	f9000360 	str	x0, [x27]
    40006f60:	11000739 	add	w25, w25, #0x1
    40006f64:	51000440 	sub	w0, w2, #0x1
    40006f68:	b9000b60 	str	w0, [x27, #8]
    40006f6c:	f10006b5 	subs	x21, x21, #0x1
    40006f70:	540000e0 	b.eq	40006f8c <__svfscanf_r+0x83c>  // b.none
    40006f74:	7100001f 	cmp	w0, #0x0
    40006f78:	54fffe6c 	b.gt	40006f44 <__svfscanf_r+0x7f4>
    40006f7c:	aa1b03e1 	mov	x1, x27
    40006f80:	aa1403e0 	mov	x0, x20
    40006f84:	94000f73 	bl	4000ad50 <__srefill_r>
    40006f88:	34fffde0 	cbz	w0, 40006f44 <__svfscanf_r+0x7f4>
    40006f8c:	0b1902d6 	add	w22, w22, w25
    40006f90:	17fffe52 	b	400068d8 <__svfscanf_r+0x188>
    40006f94:	aa1403e0 	mov	x0, x20
    40006f98:	94000b12 	bl	40009be0 <_localeconv_r>
    40006f9c:	f9400000 	ldr	x0, [x0]
    40006fa0:	d10006a1 	sub	x1, x21, #0x1
    40006fa4:	f90057e0 	str	x0, [sp, #168]
    40006fa8:	b900b7ff 	str	wzr, [sp, #180]
    40006fac:	f105703f 	cmp	x1, #0x15c
    40006fb0:	54000089 	b.ls	40006fc0 <__svfscanf_r+0x870>  // b.plast
    40006fb4:	510576a0 	sub	w0, w21, #0x15d
    40006fb8:	d2802bb5 	mov	x21, #0x15d                 	// #349
    40006fbc:	b900b7e0 	str	w0, [sp, #180]
    40006fc0:	2a1703e0 	mov	w0, w23
    40006fc4:	5280001a 	mov	w26, #0x0                   	// #0
    40006fc8:	32190f19 	orr	w25, w24, #0x780
    40006fcc:	2a1a03f7 	mov	w23, w26
    40006fd0:	b00000e9 	adrp	x9, 40023000 <fpi.1>
    40006fd4:	d2800001 	mov	x1, #0x0                   	// #0
    40006fd8:	9107c3fc 	add	x28, sp, #0x1f0
    40006fdc:	9110e138 	add	x24, x9, #0x438
    40006fe0:	2a0003fa 	mov	w26, w0
    40006fe4:	a90bfff3 	stp	x19, xzr, [sp, #184]
    40006fe8:	aa1403f3 	mov	x19, x20
    40006fec:	aa1503f4 	mov	x20, x21
    40006ff0:	aa0103f5 	mov	x21, x1
    40006ff4:	f90053ff 	str	xzr, [sp, #160]
    40006ff8:	f90067ff 	str	xzr, [sp, #200]
    40006ffc:	d503201f 	nop
    40007000:	f9400362 	ldr	x2, [x27]
    40007004:	39400040 	ldrb	w0, [x2]
    40007008:	5100ac01 	sub	w1, w0, #0x2b
    4000700c:	7101383f 	cmp	w1, #0x4e
    40007010:	54000b49 	b.ls	40007178 <__svfscanf_r+0xa28>  // b.plast
    40007014:	f94057e1 	ldr	x1, [sp, #168]
    40007018:	39400021 	ldrb	w1, [x1]
    4000701c:	6b00003f 	cmp	w1, w0
    40007020:	54000221 	b.ne	40007064 <__svfscanf_r+0x914>  // b.any
    40007024:	36480219 	tbz	w25, #9, 40007064 <__svfscanf_r+0x914>
    40007028:	12805001 	mov	w1, #0xfffffd7f            	// #-641
    4000702c:	0a010339 	and	w25, w25, w1
    40007030:	f90053f5 	str	x21, [sp, #160]
    40007034:	d503201f 	nop
    40007038:	d1000694 	sub	x20, x20, #0x1
    4000703c:	38001780 	strb	w0, [x28], #1
    40007040:	b9400b60 	ldr	w0, [x27, #8]
    40007044:	110006d6 	add	w22, w22, #0x1
    40007048:	51000400 	sub	w0, w0, #0x1
    4000704c:	b9000b60 	str	w0, [x27, #8]
    40007050:	7100001f 	cmp	w0, #0x0
    40007054:	5400124d 	b.le	4000729c <__svfscanf_r+0xb4c>
    40007058:	91000442 	add	x2, x2, #0x1
    4000705c:	f9000362 	str	x2, [x27]
    40007060:	b5fffd14 	cbnz	x20, 40007000 <__svfscanf_r+0x8b0>
    40007064:	2a1a03e0 	mov	w0, w26
    40007068:	aa1303f4 	mov	x20, x19
    4000706c:	2a1703fa 	mov	w26, w23
    40007070:	aa1503f8 	mov	x24, x21
    40007074:	2a0003f7 	mov	w23, w0
    40007078:	f9405ff3 	ldr	x19, [sp, #184]
    4000707c:	b4000055 	cbz	x21, 40007084 <__svfscanf_r+0x934>
    40007080:	12177b39 	and	w25, w25, #0xfffffeff
    40007084:	51000748 	sub	w8, w26, #0x1
    40007088:	7100051f 	cmp	w8, #0x1
    4000708c:	540073e9 	b.ls	40007f08 <__svfscanf_r+0x17b8>  // b.plast
    40007090:	510006e0 	sub	w0, w23, #0x1
    40007094:	7100181f 	cmp	w0, #0x6
    40007098:	54000248 	b.hi	400070e0 <__svfscanf_r+0x990>  // b.pmore
    4000709c:	71000aff 	cmp	w23, #0x2
    400070a0:	54007d89 	b.ls	40008050 <__svfscanf_r+0x1900>  // b.plast
    400070a4:	71000eff 	cmp	w23, #0x3
    400070a8:	540001c0 	b.eq	400070e0 <__svfscanf_r+0x990>  // b.none
    400070ac:	510012e7 	sub	w7, w23, #0x4
    400070b0:	92401cfa 	and	x26, x7, #0xff
    400070b4:	12001cf5 	and	w21, w7, #0xff
    400070b8:	aa3a03fa 	mvn	x26, x26
    400070bc:	8b1a039a 	add	x26, x28, x26
    400070c0:	385fff81 	ldrb	w1, [x28, #-1]!
    400070c4:	aa1b03e2 	mov	x2, x27
    400070c8:	aa1403e0 	mov	x0, x20
    400070cc:	94001ea9 	bl	4000eb70 <_ungetc_r>
    400070d0:	eb1a039f 	cmp	x28, x26
    400070d4:	54ffff61 	b.ne	400070c0 <__svfscanf_r+0x970>  // b.any
    400070d8:	510006c5 	sub	w5, w22, #0x1
    400070dc:	4b1500b6 	sub	w22, w5, w21
    400070e0:	36400179 	tbz	w25, #8, 4000710c <__svfscanf_r+0x9bc>
    400070e4:	375076d9 	tbnz	w25, #10, 40007fbc <__svfscanf_r+0x186c>
    400070e8:	385ff381 	ldurb	w1, [x28, #-1]
    400070ec:	121a7820 	and	w0, w1, #0xffffffdf
    400070f0:	7101141f 	cmp	w0, #0x45
    400070f4:	540054c1 	b.ne	40007b8c <__svfscanf_r+0x143c>  // b.any
    400070f8:	d100079c 	sub	x28, x28, #0x1
    400070fc:	510006d6 	sub	w22, w22, #0x1
    40007100:	aa1b03e2 	mov	x2, x27
    40007104:	aa1403e0 	mov	x0, x20
    40007108:	94001e9a 	bl	4000eb70 <_ungetc_r>
    4000710c:	3727be79 	tbnz	w25, #4, 400068d8 <__svfscanf_r+0x188>
    40007110:	12170720 	and	w0, w25, #0x600
    40007114:	3900039f 	strb	wzr, [x28]
    40007118:	7110001f 	cmp	w0, #0x400
    4000711c:	540052e0 	b.eq	40007b78 <__svfscanf_r+0x1428>  // b.none
    40007120:	f94063e0 	ldr	x0, [sp, #192]
    40007124:	b5004a60 	cbnz	x0, 40007a70 <__svfscanf_r+0x1320>
    40007128:	aa1403e0 	mov	x0, x20
    4000712c:	9107c3e1 	add	x1, sp, #0x1f0
    40007130:	d2800002 	mov	x2, #0x0                   	// #0
    40007134:	94001437 	bl	4000c210 <_strtod_r>
    40007138:	b940b3e0 	ldr	w0, [sp, #176]
    4000713c:	36003d79 	tbz	w25, #0, 400078e8 <__svfscanf_r+0x1198>
    40007140:	37f84b80 	tbnz	w0, #31, 40007ab0 <__svfscanf_r+0x1360>
    40007144:	f9403fe0 	ldr	x0, [sp, #120]
    40007148:	91003c01 	add	x1, x0, #0xf
    4000714c:	927df021 	and	x1, x1, #0xfffffffffffffff8
    40007150:	f9003fe1 	str	x1, [sp, #120]
    40007154:	f9400000 	ldr	x0, [x0]
    40007158:	fd000000 	str	d0, [x0]
    4000715c:	b94077e0 	ldr	w0, [sp, #116]
    40007160:	11000400 	add	w0, w0, #0x1
    40007164:	b90077e0 	str	w0, [sp, #116]
    40007168:	38401660 	ldrb	w0, [x19], #1
    4000716c:	b900dfe0 	str	w0, [sp, #220]
    40007170:	35ffb360 	cbnz	w0, 400067dc <__svfscanf_r+0x8c>
    40007174:	17fffdb7 	b	40006850 <__svfscanf_r+0x100>
    40007178:	38614b01 	ldrb	w1, [x24, w1, uxtw]
    4000717c:	10000063 	adr	x3, 40007188 <__svfscanf_r+0xa38>
    40007180:	8b218861 	add	x1, x3, w1, sxtb #2
    40007184:	d61f0020 	br	x1
    40007188:	2b1a02ff 	cmn	w23, w26
    4000718c:	54fff6c1 	b.ne	40007064 <__svfscanf_r+0x914>  // b.any
    40007190:	12177739 	and	w25, w25, #0xfffffe7f
    40007194:	17ffffa9 	b	40007038 <__svfscanf_r+0x8e8>
    40007198:	363ff679 	tbz	w25, #7, 40007064 <__svfscanf_r+0x914>
    4000719c:	12187b39 	and	w25, w25, #0xffffff7f
    400071a0:	17ffffa6 	b	40007038 <__svfscanf_r+0x8e8>
    400071a4:	71001f5f 	cmp	w26, #0x7
    400071a8:	54fff5e1 	b.ne	40007064 <__svfscanf_r+0x914>  // b.any
    400071ac:	5280011a 	mov	w26, #0x8                   	// #8
    400071b0:	17ffffa2 	b	40007038 <__svfscanf_r+0x8e8>
    400071b4:	71001b5f 	cmp	w26, #0x6
    400071b8:	54fff561 	b.ne	40007064 <__svfscanf_r+0x914>  // b.any
    400071bc:	528000fa 	mov	w26, #0x7                   	// #7
    400071c0:	17ffff9e 	b	40007038 <__svfscanf_r+0x8e8>
    400071c4:	710002ff 	cmp	w23, #0x0
    400071c8:	fa400aa0 	ccmp	x21, #0x0, #0x0, eq  // eq = none
    400071cc:	540007e1 	b.ne	400072c8 <__svfscanf_r+0xb78>  // b.any
    400071d0:	12180b21 	and	w1, w25, #0x700
    400071d4:	711c003f 	cmp	w1, #0x700
    400071d8:	54004a60 	b.eq	40007b24 <__svfscanf_r+0x13d4>  // b.none
    400071dc:	7100075f 	cmp	w26, #0x1
    400071e0:	7a441b44 	ccmp	w26, #0x4, #0x4, ne  // ne = any
    400071e4:	54fff401 	b.ne	40007064 <__svfscanf_r+0x914>  // b.any
    400071e8:	1100075a 	add	w26, w26, #0x1
    400071ec:	12001f5a 	and	w26, w26, #0xff
    400071f0:	17ffff92 	b	40007038 <__svfscanf_r+0x8e8>
    400071f4:	7100035f 	cmp	w26, #0x0
    400071f8:	fa400aa0 	ccmp	x21, #0x0, #0x0, eq  // eq = none
    400071fc:	540005c1 	b.ne	400072b4 <__svfscanf_r+0xb64>  // b.any
    40007200:	12180b21 	and	w1, w25, #0x700
    40007204:	711c003f 	cmp	w1, #0x700
    40007208:	54004860 	b.eq	40007b14 <__svfscanf_r+0x13c4>  // b.none
    4000720c:	510006e8 	sub	w8, w23, #0x1
    40007210:	aa1303f4 	mov	x20, x19
    40007214:	f9405ff3 	ldr	x19, [sp, #184]
    40007218:	7100051f 	cmp	w8, #0x1
    4000721c:	54006769 	b.ls	40007f08 <__svfscanf_r+0x17b8>  // b.plast
    40007220:	d2800018 	mov	x24, #0x0                   	// #0
    40007224:	17ffffaf 	b	400070e0 <__svfscanf_r+0x990>
    40007228:	5280a001 	mov	w1, #0x500                 	// #1280
    4000722c:	0a010321 	and	w1, w25, w1
    40007230:	7110003f 	cmp	w1, #0x400
    40007234:	54000060 	b.eq	40007240 <__svfscanf_r+0xaf0>  // b.none
    40007238:	3657f179 	tbz	w25, #10, 40007064 <__svfscanf_r+0x914>
    4000723c:	b40045f5 	cbz	x21, 40007af8 <__svfscanf_r+0x13a8>
    40007240:	37480099 	tbnz	w25, #9, 40007250 <__svfscanf_r+0xb00>
    40007244:	f94053e1 	ldr	x1, [sp, #160]
    40007248:	cb0102a1 	sub	x1, x21, x1
    4000724c:	a90c73e1 	stp	x1, x28, [sp, #192]
    40007250:	12156f39 	and	w25, w25, #0xfffff87f
    40007254:	32190739 	orr	w25, w25, #0x180
    40007258:	d2800015 	mov	x21, #0x0                   	// #0
    4000725c:	17ffff77 	b	40007038 <__svfscanf_r+0x8e8>
    40007260:	71000b5f 	cmp	w26, #0x2
    40007264:	54fff001 	b.ne	40007064 <__svfscanf_r+0x914>  // b.any
    40007268:	5280007a 	mov	w26, #0x3                   	// #3
    4000726c:	17ffff73 	b	40007038 <__svfscanf_r+0x8e8>
    40007270:	710006ff 	cmp	w23, #0x1
    40007274:	54ffef81 	b.ne	40007064 <__svfscanf_r+0x914>  // b.any
    40007278:	52800057 	mov	w23, #0x2                   	// #2
    4000727c:	17ffff6f 	b	40007038 <__svfscanf_r+0x8e8>
    40007280:	3647f859 	tbz	w25, #8, 40007188 <__svfscanf_r+0xa38>
    40007284:	b940b7e0 	ldr	w0, [sp, #180]
    40007288:	12187b39 	and	w25, w25, #0xffffff7f
    4000728c:	910006b5 	add	x21, x21, #0x1
    40007290:	35001220 	cbnz	w0, 400074d4 <__svfscanf_r+0xd84>
    40007294:	d1000694 	sub	x20, x20, #0x1
    40007298:	17ffff6a 	b	40007040 <__svfscanf_r+0x8f0>
    4000729c:	aa1b03e1 	mov	x1, x27
    400072a0:	aa1303e0 	mov	x0, x19
    400072a4:	94000eab 	bl	4000ad50 <__srefill_r>
    400072a8:	35ffede0 	cbnz	w0, 40007064 <__svfscanf_r+0x914>
    400072ac:	b5ffeab4 	cbnz	x20, 40007000 <__svfscanf_r+0x8b0>
    400072b0:	17ffff6d 	b	40007064 <__svfscanf_r+0x914>
    400072b4:	51000f41 	sub	w1, w26, #0x3
    400072b8:	52801fa5 	mov	w5, #0xfd                  	// #253
    400072bc:	6a05003f 	tst	w1, w5
    400072c0:	54fff940 	b.eq	400071e8 <__svfscanf_r+0xa98>  // b.none
    400072c4:	17ffff68 	b	40007064 <__svfscanf_r+0x914>
    400072c8:	71000aff 	cmp	w23, #0x2
    400072cc:	54fff881 	b.ne	400071dc <__svfscanf_r+0xa8c>  // b.any
    400072d0:	52800077 	mov	w23, #0x3                   	// #3
    400072d4:	17ffff59 	b	40007038 <__svfscanf_r+0x8e8>
    400072d8:	78f5db35 	ldrsh	w21, [x25, w21, sxtw #1]
    400072dc:	710022bf 	cmp	w21, #0x8
    400072e0:	54ffd30d 	b.le	40006d40 <__svfscanf_r+0x5f0>
    400072e4:	0a1a039c 	and	w28, w28, w26
    400072e8:	17fffe8b 	b	40006d14 <__svfscanf_r+0x5c4>
    400072ec:	365fd15c 	tbz	w28, #11, 40006d14 <__svfscanf_r+0x5c4>
    400072f0:	35000075 	cbnz	w21, 400072fc <__svfscanf_r+0xbac>
    400072f4:	3217039c 	orr	w28, w28, #0x200
    400072f8:	52800115 	mov	w21, #0x8                   	// #8
    400072fc:	36502e7c 	tbz	w28, #10, 400078c8 <__svfscanf_r+0x1178>
    40007300:	1280b001 	mov	w1, #0xfffffa7f            	// #-1409
    40007304:	0a01039c 	and	w28, w28, w1
    40007308:	17fffe83 	b	40006d14 <__svfscanf_r+0x5c4>
    4000730c:	34003077 	cbz	w23, 40007918 <__svfscanf_r+0x11c8>
    40007310:	35ffae40 	cbnz	w0, 400068d8 <__svfscanf_r+0x188>
    40007314:	910373f8 	add	x24, sp, #0xdc
    40007318:	5280001c 	mov	w28, #0x0                   	// #0
    4000731c:	f90053f3 	str	x19, [sp, #160]
    40007320:	f9404bf9 	ldr	x25, [sp, #144]
    40007324:	2a1c03f3 	mov	w19, w28
    40007328:	aa1a03fc 	mov	x28, x26
    4000732c:	aa1503fa 	mov	x26, x21
    40007330:	94000a28 	bl	40009bd0 <__locale_mb_cur_max>
    40007334:	6b13001f 	cmp	w0, w19
    40007338:	54ffaf40 	b.eq	40006920 <__svfscanf_r+0x1d0>  // b.none
    4000733c:	f9400361 	ldr	x1, [x27]
    40007340:	9107c3e2 	add	x2, sp, #0x1f0
    40007344:	b9400b60 	ldr	w0, [x27, #8]
    40007348:	11000675 	add	w21, w19, #0x1
    4000734c:	38401423 	ldrb	w3, [x1], #1
    40007350:	51000400 	sub	w0, w0, #0x1
    40007354:	3833c843 	strb	w3, [x2, w19, sxtw]
    40007358:	f9000361 	str	x1, [x27]
    4000735c:	b9000b60 	str	w0, [x27, #8]
    40007360:	f1000f3f 	cmp	x25, #0x3
    40007364:	54000081 	b.ne	40007374 <__svfscanf_r+0xc24>  // b.any
    40007368:	b940ebe0 	ldr	w0, [sp, #232]
    4000736c:	7100101f 	cmp	w0, #0x4
    40007370:	540000a0 	b.eq	40007384 <__svfscanf_r+0xc34>  // b.none
    40007374:	9103a3e0 	add	x0, sp, #0xe8
    40007378:	d2800102 	mov	x2, #0x8                   	// #8
    4000737c:	52800001 	mov	w1, #0x0                   	// #0
    40007380:	97ffe770 	bl	40001140 <memset>
    40007384:	93407eb3 	sxtw	x19, w21
    40007388:	9103a3e4 	add	x4, sp, #0xe8
    4000738c:	aa1303e3 	mov	x3, x19
    40007390:	9107c3e2 	add	x2, sp, #0x1f0
    40007394:	aa1803e1 	mov	x1, x24
    40007398:	aa1403e0 	mov	x0, x20
    4000739c:	94000a2d 	bl	40009c50 <_mbrtowc_r>
    400073a0:	aa0003f9 	mov	x25, x0
    400073a4:	b100041f 	cmn	x0, #0x1
    400073a8:	54ffabc0 	b.eq	40006920 <__svfscanf_r+0x1d0>  // b.none
    400073ac:	b5004100 	cbnz	x0, 40007bcc <__svfscanf_r+0x147c>
    400073b0:	b900031f 	str	wzr, [x24]
    400073b4:	52800000 	mov	w0, #0x0                   	// #0
    400073b8:	940009f6 	bl	40009b90 <iswspace>
    400073bc:	35005060 	cbnz	w0, 40007dc8 <__svfscanf_r+0x1678>
    400073c0:	0b1502d6 	add	w22, w22, w21
    400073c4:	d100075a 	sub	x26, x26, #0x1
    400073c8:	710002ff 	cmp	w23, #0x0
    400073cc:	91001300 	add	x0, x24, #0x4
    400073d0:	9a980018 	csel	x24, x0, x24, eq  // eq = none
    400073d4:	52800015 	mov	w21, #0x0                   	// #0
    400073d8:	b9400b60 	ldr	w0, [x27, #8]
    400073dc:	7100001f 	cmp	w0, #0x0
    400073e0:	54004c4d 	b.le	40007d68 <__svfscanf_r+0x1618>
    400073e4:	f9400360 	ldr	x0, [x27]
    400073e8:	39400000 	ldrb	w0, [x0]
    400073ec:	38606b80 	ldrb	w0, [x28, x0]
    400073f0:	f27d001f 	tst	x0, #0x8
    400073f4:	fa400b44 	ccmp	x26, #0x0, #0x4, eq  // eq = none
    400073f8:	54004381 	b.ne	40007c68 <__svfscanf_r+0x1518>  // b.any
    400073fc:	f94053f3 	ldr	x19, [sp, #160]
    40007400:	f9004bf9 	str	x25, [sp, #144]
    40007404:	35ffa6b7 	cbnz	w23, 400068d8 <__svfscanf_r+0x188>
    40007408:	1400014c 	b	40007938 <__svfscanf_r+0x11e8>
    4000740c:	b940b3e2 	ldr	w2, [sp, #176]
    40007410:	37f829e2 	tbnz	w2, #31, 4000794c <__svfscanf_r+0x11fc>
    40007414:	f9403fe2 	ldr	x2, [sp, #120]
    40007418:	91003c43 	add	x3, x2, #0xf
    4000741c:	927df063 	and	x3, x3, #0xfffffffffffffff8
    40007420:	f9003fe3 	str	x3, [sp, #120]
    40007424:	f9400058 	ldr	x24, [x2]
    40007428:	34ffa140 	cbz	w0, 40006850 <__svfscanf_r+0x100>
    4000742c:	b9400b60 	ldr	w0, [x27, #8]
    40007430:	91000422 	add	x2, x1, #0x1
    40007434:	aa1803fa 	mov	x26, x24
    40007438:	f9000362 	str	x2, [x27]
    4000743c:	51000400 	sub	w0, w0, #0x1
    40007440:	b9000b60 	str	w0, [x27, #8]
    40007444:	39400020 	ldrb	w0, [x1]
    40007448:	38001740 	strb	w0, [x26], #1
    4000744c:	f10006bf 	cmp	x21, #0x1
    40007450:	54000360 	b.eq	400074bc <__svfscanf_r+0xd6c>  // b.none
    40007454:	8b150315 	add	x21, x24, x21
    40007458:	1400000e 	b	40007490 <__svfscanf_r+0xd40>
    4000745c:	f9400360 	ldr	x0, [x27]
    40007460:	39400001 	ldrb	w1, [x0]
    40007464:	3861cb81 	ldrb	w1, [x28, w1, sxtw]
    40007468:	34000261 	cbz	w1, 400074b4 <__svfscanf_r+0xd64>
    4000746c:	b9400b61 	ldr	w1, [x27, #8]
    40007470:	91000402 	add	x2, x0, #0x1
    40007474:	f9000362 	str	x2, [x27]
    40007478:	51000421 	sub	w1, w1, #0x1
    4000747c:	b9000b61 	str	w1, [x27, #8]
    40007480:	39400000 	ldrb	w0, [x0]
    40007484:	38001740 	strb	w0, [x26], #1
    40007488:	eb15035f 	cmp	x26, x21
    4000748c:	54000140 	b.eq	400074b4 <__svfscanf_r+0xd64>  // b.none
    40007490:	b9400b60 	ldr	w0, [x27, #8]
    40007494:	7100001f 	cmp	w0, #0x0
    40007498:	54fffe2c 	b.gt	4000745c <__svfscanf_r+0xd0c>
    4000749c:	aa1b03e1 	mov	x1, x27
    400074a0:	aa1403e0 	mov	x0, x20
    400074a4:	94000e2b 	bl	4000ad50 <__srefill_r>
    400074a8:	34fffda0 	cbz	w0, 4000745c <__svfscanf_r+0xd0c>
    400074ac:	eb1a031f 	cmp	x24, x26
    400074b0:	54ffa380 	b.eq	40006920 <__svfscanf_r+0x1d0>  // b.none
    400074b4:	4b180359 	sub	w25, w26, w24
    400074b8:	34ff9cd9 	cbz	w25, 40006850 <__svfscanf_r+0x100>
    400074bc:	b94077e0 	ldr	w0, [sp, #116]
    400074c0:	0b1902d6 	add	w22, w22, w25
    400074c4:	3900035f 	strb	wzr, [x26]
    400074c8:	11000400 	add	w0, w0, #0x1
    400074cc:	b90077e0 	str	w0, [sp, #116]
    400074d0:	17fffd02 	b	400068d8 <__svfscanf_r+0x188>
    400074d4:	b940b7e0 	ldr	w0, [sp, #180]
    400074d8:	51000400 	sub	w0, w0, #0x1
    400074dc:	b900b7e0 	str	w0, [sp, #180]
    400074e0:	17fffed8 	b	40007040 <__svfscanf_r+0x8f0>
    400074e4:	d2800018 	mov	x24, #0x0                   	// #0
    400074e8:	1400000a 	b	40007510 <__svfscanf_r+0xdc0>
    400074ec:	93407c00 	sxtw	x0, w0
    400074f0:	aa1b03e1 	mov	x1, x27
    400074f4:	8b000042 	add	x2, x2, x0
    400074f8:	f9000362 	str	x2, [x27]
    400074fc:	8b000318 	add	x24, x24, x0
    40007500:	cb0002b5 	sub	x21, x21, x0
    40007504:	aa1403e0 	mov	x0, x20
    40007508:	94000e12 	bl	4000ad50 <__srefill_r>
    4000750c:	350034e0 	cbnz	w0, 40007ba8 <__svfscanf_r+0x1458>
    40007510:	b9400b60 	ldr	w0, [x27, #8]
    40007514:	f9400362 	ldr	x2, [x27]
    40007518:	6b15001f 	cmp	w0, w21
    4000751c:	54fffe8b 	b.lt	400074ec <__svfscanf_r+0xd9c>  // b.tstop
    40007520:	8b150318 	add	x24, x24, x21
    40007524:	4b150000 	sub	w0, w0, w21
    40007528:	8b150042 	add	x2, x2, x21
    4000752c:	0b1802d6 	add	w22, w22, w24
    40007530:	f9000362 	str	x2, [x27]
    40007534:	b9000b60 	str	w0, [x27, #8]
    40007538:	17fffd4e 	b	40006a70 <__svfscanf_r+0x320>
    4000753c:	b940b3e2 	ldr	w2, [sp, #176]
    40007540:	37f82722 	tbnz	w2, #31, 40007a24 <__svfscanf_r+0x12d4>
    40007544:	f9403fe2 	ldr	x2, [sp, #120]
    40007548:	91003c43 	add	x3, x2, #0xf
    4000754c:	927df063 	and	x3, x3, #0xfffffffffffffff8
    40007550:	f9003fe3 	str	x3, [sp, #120]
    40007554:	f9400058 	ldr	x24, [x2]
    40007558:	350054e0 	cbnz	w0, 40007ff4 <__svfscanf_r+0x18a4>
    4000755c:	b9400b60 	ldr	w0, [x27, #8]
    40007560:	91000422 	add	x2, x1, #0x1
    40007564:	aa1803f9 	mov	x25, x24
    40007568:	f9000362 	str	x2, [x27]
    4000756c:	51000400 	sub	w0, w0, #0x1
    40007570:	b9000b60 	str	w0, [x27, #8]
    40007574:	39400020 	ldrb	w0, [x1]
    40007578:	38001720 	strb	w0, [x25], #1
    4000757c:	f10006bf 	cmp	x21, #0x1
    40007580:	54005360 	b.eq	40007fec <__svfscanf_r+0x189c>  // b.none
    40007584:	8b150315 	add	x21, x24, x21
    40007588:	1400000e 	b	400075c0 <__svfscanf_r+0xe70>
    4000758c:	f9400360 	ldr	x0, [x27]
    40007590:	39400001 	ldrb	w1, [x0]
    40007594:	38616b41 	ldrb	w1, [x26, x1]
    40007598:	37180221 	tbnz	w1, #3, 400075dc <__svfscanf_r+0xe8c>
    4000759c:	b9400b61 	ldr	w1, [x27, #8]
    400075a0:	91000402 	add	x2, x0, #0x1
    400075a4:	f9000362 	str	x2, [x27]
    400075a8:	51000421 	sub	w1, w1, #0x1
    400075ac:	b9000b61 	str	w1, [x27, #8]
    400075b0:	39400000 	ldrb	w0, [x0]
    400075b4:	38001720 	strb	w0, [x25], #1
    400075b8:	eb15033f 	cmp	x25, x21
    400075bc:	54000100 	b.eq	400075dc <__svfscanf_r+0xe8c>  // b.none
    400075c0:	b9400b60 	ldr	w0, [x27, #8]
    400075c4:	7100001f 	cmp	w0, #0x0
    400075c8:	54fffe2c 	b.gt	4000758c <__svfscanf_r+0xe3c>
    400075cc:	aa1b03e1 	mov	x1, x27
    400075d0:	aa1403e0 	mov	x0, x20
    400075d4:	94000ddf 	bl	4000ad50 <__srefill_r>
    400075d8:	34fffda0 	cbz	w0, 4000758c <__svfscanf_r+0xe3c>
    400075dc:	4b180338 	sub	w24, w25, w24
    400075e0:	b94077e0 	ldr	w0, [sp, #116]
    400075e4:	0b1802d6 	add	w22, w22, w24
    400075e8:	3900033f 	strb	wzr, [x25]
    400075ec:	11000400 	add	w0, w0, #0x1
    400075f0:	b90077e0 	str	w0, [sp, #116]
    400075f4:	17fffcb9 	b	400068d8 <__svfscanf_r+0x188>
    400075f8:	910373f7 	add	x23, sp, #0xdc
    400075fc:	34001d1a 	cbz	w26, 4000799c <__svfscanf_r+0x124c>
    40007600:	aa1b03e0 	mov	x0, x27
    40007604:	52800019 	mov	w25, #0x0                   	// #0
    40007608:	f9404bf8 	ldr	x24, [sp, #144]
    4000760c:	2a1903fb 	mov	w27, w25
    40007610:	9000065c 	adrp	x28, 400cf000 <impure_data+0x3d0>
    40007614:	aa0003f9 	mov	x25, x0
    40007618:	9122439c 	add	x28, x28, #0x890
    4000761c:	f90053f3 	str	x19, [sp, #160]
    40007620:	aa1503f3 	mov	x19, x21
    40007624:	d503201f 	nop
    40007628:	9400096a 	bl	40009bd0 <__locale_mb_cur_max>
    4000762c:	6b1b001f 	cmp	w0, w27
    40007630:	54002ca0 	b.eq	40007bc4 <__svfscanf_r+0x1474>  // b.none
    40007634:	f9400321 	ldr	x1, [x25]
    40007638:	9107c3e3 	add	x3, sp, #0x1f0
    4000763c:	b9400b20 	ldr	w0, [x25, #8]
    40007640:	11000775 	add	w21, w27, #0x1
    40007644:	38401422 	ldrb	w2, [x1], #1
    40007648:	51000400 	sub	w0, w0, #0x1
    4000764c:	383bc862 	strb	w2, [x3, w27, sxtw]
    40007650:	f9000321 	str	x1, [x25]
    40007654:	b9000b20 	str	w0, [x25, #8]
    40007658:	f1000f1f 	cmp	x24, #0x3
    4000765c:	54000081 	b.ne	4000766c <__svfscanf_r+0xf1c>  // b.any
    40007660:	b940e3e0 	ldr	w0, [sp, #224]
    40007664:	7100101f 	cmp	w0, #0x4
    40007668:	540000a0 	b.eq	4000767c <__svfscanf_r+0xf2c>  // b.none
    4000766c:	910383e0 	add	x0, sp, #0xe0
    40007670:	d2800102 	mov	x2, #0x8                   	// #8
    40007674:	52800001 	mov	w1, #0x0                   	// #0
    40007678:	97ffe6b2 	bl	40001140 <memset>
    4000767c:	93407ebb 	sxtw	x27, w21
    40007680:	910383e4 	add	x4, sp, #0xe0
    40007684:	aa1b03e3 	mov	x3, x27
    40007688:	9107c3e2 	add	x2, sp, #0x1f0
    4000768c:	aa1703e1 	mov	x1, x23
    40007690:	aa1403e0 	mov	x0, x20
    40007694:	9400096f 	bl	40009c50 <_mbrtowc_r>
    40007698:	aa0003f8 	mov	x24, x0
    4000769c:	b100041f 	cmn	x0, #0x1
    400076a0:	54002920 	b.eq	40007bc4 <__svfscanf_r+0x1474>  // b.none
    400076a4:	b50005c0 	cbnz	x0, 4000775c <__svfscanf_r+0x100c>
    400076a8:	52800004 	mov	w4, #0x0                   	// #0
    400076ac:	b90002ff 	str	wzr, [x23]
    400076b0:	d2800102 	mov	x2, #0x8                   	// #8
    400076b4:	52800001 	mov	w1, #0x0                   	// #0
    400076b8:	9103a3e0 	add	x0, sp, #0xe8
    400076bc:	b90093e4 	str	w4, [sp, #144]
    400076c0:	97ffe6a0 	bl	40001140 <memset>
    400076c4:	b94093e4 	ldr	w4, [sp, #144]
    400076c8:	9103a3e3 	add	x3, sp, #0xe8
    400076cc:	f9407386 	ldr	x6, [x28, #224]
    400076d0:	2a0403e2 	mov	w2, w4
    400076d4:	910363e1 	add	x1, sp, #0xd8
    400076d8:	aa1403e0 	mov	x0, x20
    400076dc:	d63f00c0 	blr	x6
    400076e0:	7100041f 	cmp	w0, #0x1
    400076e4:	394363e4 	ldrb	w4, [sp, #216]
    400076e8:	1a9f0084 	csel	w4, w4, wzr, eq  // eq = none
    400076ec:	9103c3e0 	add	x0, sp, #0xf0
    400076f0:	3864c800 	ldrb	w0, [x0, w4, sxtw]
    400076f4:	34003900 	cbz	w0, 40007e14 <__svfscanf_r+0x16c4>
    400076f8:	0b1502d6 	add	w22, w22, w21
    400076fc:	f1000f1f 	cmp	x24, #0x3
    40007700:	54000260 	b.eq	4000774c <__svfscanf_r+0xffc>  // b.none
    40007704:	d1000673 	sub	x19, x19, #0x1
    40007708:	b9400b20 	ldr	w0, [x25, #8]
    4000770c:	7100035f 	cmp	w26, #0x0
    40007710:	910012e1 	add	x1, x23, #0x4
    40007714:	5280001b 	mov	w27, #0x0                   	// #0
    40007718:	9a970037 	csel	x23, x1, x23, eq  // eq = none
    4000771c:	7100001f 	cmp	w0, #0x0
    40007720:	540002ad 	b.le	40007774 <__svfscanf_r+0x1024>
    40007724:	b5fff833 	cbnz	x19, 40007628 <__svfscanf_r+0xed8>
    40007728:	f94053f3 	ldr	x19, [sp, #160]
    4000772c:	aa1903fb 	mov	x27, x25
    40007730:	f9004bf8 	str	x24, [sp, #144]
    40007734:	35ff8d3a 	cbnz	w26, 400068d8 <__svfscanf_r+0x188>
    40007738:	b94077e0 	ldr	w0, [sp, #116]
    4000773c:	b90002ff 	str	wzr, [x23]
    40007740:	11000400 	add	w0, w0, #0x1
    40007744:	b90077e0 	str	w0, [sp, #116]
    40007748:	17fffc64 	b	400068d8 <__svfscanf_r+0x188>
    4000774c:	b940e3e0 	ldr	w0, [sp, #224]
    40007750:	7100101f 	cmp	w0, #0x4
    40007754:	54fffd81 	b.ne	40007704 <__svfscanf_r+0xfb4>  // b.any
    40007758:	17ffffec 	b	40007708 <__svfscanf_r+0xfb8>
    4000775c:	b100081f 	cmn	x0, #0x2
    40007760:	540049a1 	b.ne	40008094 <__svfscanf_r+0x1944>  // b.any
    40007764:	b9400b20 	ldr	w0, [x25, #8]
    40007768:	2a1503fb 	mov	w27, w21
    4000776c:	7100001f 	cmp	w0, #0x0
    40007770:	54fff5cc 	b.gt	40007628 <__svfscanf_r+0xed8>
    40007774:	aa1903e1 	mov	x1, x25
    40007778:	aa1403e0 	mov	x0, x20
    4000777c:	94000d75 	bl	4000ad50 <__srefill_r>
    40007780:	34fffd20 	cbz	w0, 40007724 <__svfscanf_r+0xfd4>
    40007784:	f9004bf8 	str	x24, [sp, #144]
    40007788:	aa1903e0 	mov	x0, x25
    4000778c:	2a1b03f9 	mov	w25, w27
    40007790:	aa0003fb 	mov	x27, x0
    40007794:	f94053f3 	ldr	x19, [sp, #160]
    40007798:	34fffcf9 	cbz	w25, 40007734 <__svfscanf_r+0xfe4>
    4000779c:	17fffc61 	b	40006920 <__svfscanf_r+0x1d0>
    400077a0:	d2800018 	mov	x24, #0x0                   	// #0
    400077a4:	340010da 	cbz	w26, 400079bc <__svfscanf_r+0x126c>
    400077a8:	f9404bf7 	ldr	x23, [sp, #144]
    400077ac:	5280001c 	mov	w28, #0x0                   	// #0
    400077b0:	94000908 	bl	40009bd0 <__locale_mb_cur_max>
    400077b4:	6b1c001f 	cmp	w0, w28
    400077b8:	54ff8b40 	b.eq	40006920 <__svfscanf_r+0x1d0>  // b.none
    400077bc:	f9400361 	ldr	x1, [x27]
    400077c0:	9107c3e3 	add	x3, sp, #0x1f0
    400077c4:	b9400b60 	ldr	w0, [x27, #8]
    400077c8:	11000799 	add	w25, w28, #0x1
    400077cc:	38401422 	ldrb	w2, [x1], #1
    400077d0:	51000400 	sub	w0, w0, #0x1
    400077d4:	383cc862 	strb	w2, [x3, w28, sxtw]
    400077d8:	f9000361 	str	x1, [x27]
    400077dc:	b9000b60 	str	w0, [x27, #8]
    400077e0:	f1000eff 	cmp	x23, #0x3
    400077e4:	54000081 	b.ne	400077f4 <__svfscanf_r+0x10a4>  // b.any
    400077e8:	b940ebe0 	ldr	w0, [sp, #232]
    400077ec:	7100101f 	cmp	w0, #0x4
    400077f0:	540000a0 	b.eq	40007804 <__svfscanf_r+0x10b4>  // b.none
    400077f4:	9103a3e0 	add	x0, sp, #0xe8
    400077f8:	d2800102 	mov	x2, #0x8                   	// #8
    400077fc:	52800001 	mov	w1, #0x0                   	// #0
    40007800:	97ffe650 	bl	40001140 <memset>
    40007804:	9103a3e4 	add	x4, sp, #0xe8
    40007808:	93407f23 	sxtw	x3, w25
    4000780c:	9107c3e2 	add	x2, sp, #0x1f0
    40007810:	aa1803e1 	mov	x1, x24
    40007814:	aa1403e0 	mov	x0, x20
    40007818:	9400090e 	bl	40009c50 <_mbrtowc_r>
    4000781c:	aa0003f7 	mov	x23, x0
    40007820:	b100041f 	cmn	x0, #0x1
    40007824:	54ff87e0 	b.eq	40006920 <__svfscanf_r+0x1d0>  // b.none
    40007828:	7100035f 	cmp	w26, #0x0
    4000782c:	fa400800 	ccmp	x0, #0x0, #0x0, eq  // eq = none
    40007830:	54000460 	b.eq	400078bc <__svfscanf_r+0x116c>  // b.none
    40007834:	b100081f 	cmn	x0, #0x2
    40007838:	540002c0 	b.eq	40007890 <__svfscanf_r+0x1140>  // b.none
    4000783c:	0b1902d6 	add	w22, w22, w25
    40007840:	f1000c1f 	cmp	x0, #0x3
    40007844:	54000081 	b.ne	40007854 <__svfscanf_r+0x1104>  // b.any
    40007848:	b940ebe0 	ldr	w0, [sp, #232]
    4000784c:	7100101f 	cmp	w0, #0x4
    40007850:	54000040 	b.eq	40007858 <__svfscanf_r+0x1108>  // b.none
    40007854:	d10006b5 	sub	x21, x21, #0x1
    40007858:	b9400b60 	ldr	w0, [x27, #8]
    4000785c:	7100035f 	cmp	w26, #0x0
    40007860:	91001301 	add	x1, x24, #0x4
    40007864:	5280001c 	mov	w28, #0x0                   	// #0
    40007868:	9a980038 	csel	x24, x1, x24, eq  // eq = none
    4000786c:	7100001f 	cmp	w0, #0x0
    40007870:	5400018d 	b.le	400078a0 <__svfscanf_r+0x1150>
    40007874:	b5fff9f5 	cbnz	x21, 400077b0 <__svfscanf_r+0x1060>
    40007878:	f9004bf7 	str	x23, [sp, #144]
    4000787c:	b94077e0 	ldr	w0, [sp, #116]
    40007880:	7100035f 	cmp	w26, #0x0
    40007884:	1a801400 	cinc	w0, w0, eq  // eq = none
    40007888:	b90077e0 	str	w0, [sp, #116]
    4000788c:	17fffc13 	b	400068d8 <__svfscanf_r+0x188>
    40007890:	b9400b60 	ldr	w0, [x27, #8]
    40007894:	2a1903fc 	mov	w28, w25
    40007898:	7100001f 	cmp	w0, #0x0
    4000789c:	54fff8ac 	b.gt	400077b0 <__svfscanf_r+0x1060>
    400078a0:	aa1b03e1 	mov	x1, x27
    400078a4:	aa1403e0 	mov	x0, x20
    400078a8:	94000d2a 	bl	4000ad50 <__srefill_r>
    400078ac:	34fffe40 	cbz	w0, 40007874 <__svfscanf_r+0x1124>
    400078b0:	f9004bf7 	str	x23, [sp, #144]
    400078b4:	34fffe5c 	cbz	w28, 4000787c <__svfscanf_r+0x112c>
    400078b8:	17fffc1a 	b	40006920 <__svfscanf_r+0x1d0>
    400078bc:	0b1902d6 	add	w22, w22, w25
    400078c0:	b900031f 	str	wzr, [x24]
    400078c4:	17ffffe4 	b	40007854 <__svfscanf_r+0x1104>
    400078c8:	b940a3e0 	ldr	w0, [sp, #160]
    400078cc:	1216739c 	and	w28, w28, #0xfffffc7f
    400078d0:	34000080 	cbz	w0, 400078e0 <__svfscanf_r+0x1190>
    400078d4:	91000484 	add	x4, x4, #0x1
    400078d8:	51000400 	sub	w0, w0, #0x1
    400078dc:	b900a3e0 	str	w0, [sp, #160]
    400078e0:	11000718 	add	w24, w24, #0x1
    400078e4:	17fffd0d 	b	40006d18 <__svfscanf_r+0x5c8>
    400078e8:	370808d9 	tbnz	w25, #1, 40007a00 <__svfscanf_r+0x12b0>
    400078ec:	37f822a0 	tbnz	w0, #31, 40007d40 <__svfscanf_r+0x15f0>
    400078f0:	f9403fe0 	ldr	x0, [sp, #120]
    400078f4:	91003c01 	add	x1, x0, #0xf
    400078f8:	927df021 	and	x1, x1, #0xfffffffffffffff8
    400078fc:	f9003fe1 	str	x1, [sp, #120]
    40007900:	1e602000 	fcmp	d0, d0
    40007904:	f9400017 	ldr	x23, [x0]
    40007908:	54003906 	b.vs	40008028 <__svfscanf_r+0x18d8>
    4000790c:	1e624000 	fcvt	s0, d0
    40007910:	bd0002e0 	str	s0, [x23]
    40007914:	17fffe12 	b	4000715c <__svfscanf_r+0xa0c>
    40007918:	b940b3e1 	ldr	w1, [sp, #176]
    4000791c:	37f81741 	tbnz	w1, #31, 40007c04 <__svfscanf_r+0x14b4>
    40007920:	f9403fe1 	ldr	x1, [sp, #120]
    40007924:	91003c22 	add	x2, x1, #0xf
    40007928:	927df042 	and	x2, x2, #0xfffffffffffffff8
    4000792c:	f9003fe2 	str	x2, [sp, #120]
    40007930:	f9400038 	ldr	x24, [x1]
    40007934:	34ffcf20 	cbz	w0, 40007318 <__svfscanf_r+0xbc8>
    40007938:	b94077e0 	ldr	w0, [sp, #116]
    4000793c:	b900031f 	str	wzr, [x24]
    40007940:	11000400 	add	w0, w0, #0x1
    40007944:	b90077e0 	str	w0, [sp, #116]
    40007948:	17fffbe4 	b	400068d8 <__svfscanf_r+0x188>
    4000794c:	b940b3e2 	ldr	w2, [sp, #176]
    40007950:	11002043 	add	w3, w2, #0x8
    40007954:	7100007f 	cmp	w3, #0x0
    40007958:	540018cd 	b.le	40007c70 <__svfscanf_r+0x1520>
    4000795c:	f9403fe2 	ldr	x2, [sp, #120]
    40007960:	b900b3e3 	str	w3, [sp, #176]
    40007964:	91003c44 	add	x4, x2, #0xf
    40007968:	927df083 	and	x3, x4, #0xfffffffffffffff8
    4000796c:	f9003fe3 	str	x3, [sp, #120]
    40007970:	17fffead 	b	40007424 <__svfscanf_r+0xcd4>
    40007974:	b940b3e1 	ldr	w1, [sp, #176]
    40007978:	11002022 	add	w2, w1, #0x8
    4000797c:	7100005f 	cmp	w2, #0x0
    40007980:	5400182d 	b.le	40007c84 <__svfscanf_r+0x1534>
    40007984:	f9403fe1 	ldr	x1, [sp, #120]
    40007988:	b900b3e2 	str	w2, [sp, #176]
    4000798c:	91003c23 	add	x3, x1, #0xf
    40007990:	927df062 	and	x2, x3, #0xfffffffffffffff8
    40007994:	f9003fe2 	str	x2, [sp, #120]
    40007998:	17fffd0e 	b	40006dd0 <__svfscanf_r+0x680>
    4000799c:	b940b3e0 	ldr	w0, [sp, #176]
    400079a0:	37f81920 	tbnz	w0, #31, 40007cc4 <__svfscanf_r+0x1574>
    400079a4:	f9403fe0 	ldr	x0, [sp, #120]
    400079a8:	91003c01 	add	x1, x0, #0xf
    400079ac:	927df021 	and	x1, x1, #0xfffffffffffffff8
    400079b0:	f9003fe1 	str	x1, [sp, #120]
    400079b4:	f9400017 	ldr	x23, [x0]
    400079b8:	17ffff12 	b	40007600 <__svfscanf_r+0xeb0>
    400079bc:	b940b3e0 	ldr	w0, [sp, #176]
    400079c0:	37f816c0 	tbnz	w0, #31, 40007c98 <__svfscanf_r+0x1548>
    400079c4:	f9403fe0 	ldr	x0, [sp, #120]
    400079c8:	91003c01 	add	x1, x0, #0xf
    400079cc:	927df021 	and	x1, x1, #0xfffffffffffffff8
    400079d0:	f9003fe1 	str	x1, [sp, #120]
    400079d4:	f9400018 	ldr	x24, [x0]
    400079d8:	17ffff74 	b	400077a8 <__svfscanf_r+0x1058>
    400079dc:	b940b3e1 	ldr	w1, [sp, #176]
    400079e0:	37f819c1 	tbnz	w1, #31, 40007d18 <__svfscanf_r+0x15c8>
    400079e4:	f9403fe1 	ldr	x1, [sp, #120]
    400079e8:	91003c22 	add	x2, x1, #0xf
    400079ec:	927df042 	and	x2, x2, #0xfffffffffffffff8
    400079f0:	f9003fe2 	str	x2, [sp, #120]
    400079f4:	f9400021 	ldr	x1, [x1]
    400079f8:	79000020 	strh	w0, [x1]
    400079fc:	17fffcf7 	b	40006dd8 <__svfscanf_r+0x688>
    40007a00:	37f81780 	tbnz	w0, #31, 40007cf0 <__svfscanf_r+0x15a0>
    40007a04:	f9403fe0 	ldr	x0, [sp, #120]
    40007a08:	91003c01 	add	x1, x0, #0xf
    40007a0c:	927df021 	and	x1, x1, #0xfffffffffffffff8
    40007a10:	f9003fe1 	str	x1, [sp, #120]
    40007a14:	f9400017 	ldr	x23, [x0]
    40007a18:	97ffe7b5 	bl	400018ec <__extenddftf2>
    40007a1c:	3d8002e0 	str	q0, [x23]
    40007a20:	17fffdcf 	b	4000715c <__svfscanf_r+0xa0c>
    40007a24:	b940b3e2 	ldr	w2, [sp, #176]
    40007a28:	11002043 	add	w3, w2, #0x8
    40007a2c:	7100007f 	cmp	w3, #0x0
    40007a30:	54001c2d 	b.le	40007db4 <__svfscanf_r+0x1664>
    40007a34:	f9403fe2 	ldr	x2, [sp, #120]
    40007a38:	b900b3e3 	str	w3, [sp, #176]
    40007a3c:	91003c44 	add	x4, x2, #0xf
    40007a40:	927df083 	and	x3, x4, #0xfffffffffffffff8
    40007a44:	f9003fe3 	str	x3, [sp, #120]
    40007a48:	17fffec3 	b	40007554 <__svfscanf_r+0xe04>
    40007a4c:	37f81a00 	tbnz	w0, #31, 40007d8c <__svfscanf_r+0x163c>
    40007a50:	f9403fe0 	ldr	x0, [sp, #120]
    40007a54:	91003c02 	add	x2, x0, #0xf
    40007a58:	927df042 	and	x2, x2, #0xfffffffffffffff8
    40007a5c:	f9003fe2 	str	x2, [sp, #120]
    40007a60:	f9400000 	ldr	x0, [x0]
    40007a64:	aa0103f3 	mov	x19, x1
    40007a68:	79000016 	strh	w22, [x0]
    40007a6c:	17fffb9b 	b	400068d8 <__svfscanf_r+0x188>
    40007a70:	f94067fc 	ldr	x28, [sp, #200]
    40007a74:	d2800002 	mov	x2, #0x0                   	// #0
    40007a78:	aa1403e0 	mov	x0, x20
    40007a7c:	52800143 	mov	w3, #0xa                   	// #10
    40007a80:	91000781 	add	x1, x28, #0x1
    40007a84:	9400124b 	bl	4000c3b0 <_strtol_r>
    40007a88:	f94063e1 	ldr	x1, [sp, #192]
    40007a8c:	cb010002 	sub	x2, x0, x1
    40007a90:	910ce7e1 	add	x1, sp, #0x339
    40007a94:	910ce3e0 	add	x0, sp, #0x338
    40007a98:	eb01039f 	cmp	x28, x1
    40007a9c:	f00000c1 	adrp	x1, 40022000 <__pow_log_data+0xcc8>
    40007aa0:	9a9c2000 	csel	x0, x0, x28, cs  // cs = hs, nlast
    40007aa4:	91360021 	add	x1, x1, #0xd80
    40007aa8:	94000d5a 	bl	4000b010 <sprintf>
    40007aac:	17fffd9f 	b	40007128 <__svfscanf_r+0x9d8>
    40007ab0:	b940b3e0 	ldr	w0, [sp, #176]
    40007ab4:	11002001 	add	w1, w0, #0x8
    40007ab8:	7100003f 	cmp	w1, #0x0
    40007abc:	54001a2d 	b.le	40007e00 <__svfscanf_r+0x16b0>
    40007ac0:	f9403fe0 	ldr	x0, [sp, #120]
    40007ac4:	b900b3e1 	str	w1, [sp, #176]
    40007ac8:	91003c02 	add	x2, x0, #0xf
    40007acc:	927df041 	and	x1, x2, #0xfffffffffffffff8
    40007ad0:	f9003fe1 	str	x1, [sp, #120]
    40007ad4:	17fffda0 	b	40007154 <__svfscanf_r+0xa04>
    40007ad8:	b0000020 	adrp	x0, 4000c000 <_strtod_l+0xf40>
    40007adc:	911c8000 	add	x0, x0, #0x720
    40007ae0:	aa0103f3 	mov	x19, x1
    40007ae4:	52800079 	mov	w25, #0x3                   	// #3
    40007ae8:	f90047e0 	str	x0, [sp, #136]
    40007aec:	52800100 	mov	w0, #0x8                   	// #8
    40007af0:	b9006be0 	str	w0, [sp, #104]
    40007af4:	17fffbab 	b	400069a0 <__svfscanf_r+0x250>
    40007af8:	2a1a03e0 	mov	w0, w26
    40007afc:	aa1303f4 	mov	x20, x19
    40007b00:	2a1703fa 	mov	w26, w23
    40007b04:	aa1503f8 	mov	x24, x21
    40007b08:	2a0003f7 	mov	w23, w0
    40007b0c:	f9405ff3 	ldr	x19, [sp, #184]
    40007b10:	17fffd5d 	b	40007084 <__svfscanf_r+0x934>
    40007b14:	12156f39 	and	w25, w25, #0xfffff87f
    40007b18:	5280003a 	mov	w26, #0x1                   	// #1
    40007b1c:	d2800015 	mov	x21, #0x0                   	// #0
    40007b20:	17fffd46 	b	40007038 <__svfscanf_r+0x8e8>
    40007b24:	12156f39 	and	w25, w25, #0xfffff87f
    40007b28:	52800037 	mov	w23, #0x1                   	// #1
    40007b2c:	d2800015 	mov	x21, #0x0                   	// #0
    40007b30:	17fffd42 	b	40007038 <__svfscanf_r+0x8e8>
    40007b34:	b940b3e0 	ldr	w0, [sp, #176]
    40007b38:	11002001 	add	w1, w0, #0x8
    40007b3c:	7100003f 	cmp	w1, #0x0
    40007b40:	540008ad 	b.le	40007c54 <__svfscanf_r+0x1504>
    40007b44:	f9403fe0 	ldr	x0, [sp, #120]
    40007b48:	b900b3e1 	str	w1, [sp, #176]
    40007b4c:	91003c02 	add	x2, x0, #0xf
    40007b50:	927df041 	and	x1, x2, #0xfffffffffffffff8
    40007b54:	f9003fe1 	str	x1, [sp, #120]
    40007b58:	17fffcdd 	b	40006ecc <__svfscanf_r+0x77c>
    40007b5c:	385ff2e1 	ldurb	w1, [x23, #-1]
    40007b60:	d10006e0 	sub	x0, x23, #0x1
    40007b64:	aa0003f7 	mov	x23, x0
    40007b68:	aa1b03e2 	mov	x2, x27
    40007b6c:	aa1403e0 	mov	x0, x20
    40007b70:	94001c00 	bl	4000eb70 <_ungetc_r>
    40007b74:	17fffc78 	b	40006d54 <__svfscanf_r+0x604>
    40007b78:	f94053e0 	ldr	x0, [sp, #160]
    40007b7c:	cb180002 	sub	x2, x0, x24
    40007b80:	eb00031f 	cmp	x24, x0
    40007b84:	54fff861 	b.ne	40007a90 <__svfscanf_r+0x1340>  // b.any
    40007b88:	17fffd68 	b	40007128 <__svfscanf_r+0x9d8>
    40007b8c:	aa1b03e2 	mov	x2, x27
    40007b90:	aa1403e0 	mov	x0, x20
    40007b94:	94001bf7 	bl	4000eb70 <_ungetc_r>
    40007b98:	51000ad6 	sub	w22, w22, #0x2
    40007b9c:	385fe381 	ldurb	w1, [x28, #-2]
    40007ba0:	d1000b9c 	sub	x28, x28, #0x2
    40007ba4:	17fffd57 	b	40007100 <__svfscanf_r+0x9b0>
    40007ba8:	b4ff6bd8 	cbz	x24, 40006920 <__svfscanf_r+0x1d0>
    40007bac:	0b1802d6 	add	w22, w22, w24
    40007bb0:	17fffbb0 	b	40006a70 <__svfscanf_r+0x320>
    40007bb4:	39400a62 	ldrb	w2, [x19, #2]
    40007bb8:	321f0318 	orr	w24, w24, #0x2
    40007bbc:	91000a73 	add	x19, x19, #0x2
    40007bc0:	17fffb12 	b	40006808 <__svfscanf_r+0xb8>
    40007bc4:	aa1903fb 	mov	x27, x25
    40007bc8:	17fffb56 	b	40006920 <__svfscanf_r+0x1d0>
    40007bcc:	b100081f 	cmn	x0, #0x2
    40007bd0:	54ffc040 	b.eq	400073d8 <__svfscanf_r+0xc88>  // b.none
    40007bd4:	b9400300 	ldr	w0, [x24]
    40007bd8:	940007ee 	bl	40009b90 <iswspace>
    40007bdc:	35000f60 	cbnz	w0, 40007dc8 <__svfscanf_r+0x1678>
    40007be0:	0b1502d6 	add	w22, w22, w21
    40007be4:	f1000f3f 	cmp	x25, #0x3
    40007be8:	54ffbee1 	b.ne	400073c4 <__svfscanf_r+0xc74>  // b.any
    40007bec:	b940ebe0 	ldr	w0, [sp, #232]
    40007bf0:	7100101f 	cmp	w0, #0x4
    40007bf4:	54ffbe81 	b.ne	400073c4 <__svfscanf_r+0xc74>  // b.any
    40007bf8:	17fffdf4 	b	400073c8 <__svfscanf_r+0xc78>
    40007bfc:	b90077ff 	str	wzr, [sp, #116]
    40007c00:	17fffb17 	b	4000685c <__svfscanf_r+0x10c>
    40007c04:	b940b3e1 	ldr	w1, [sp, #176]
    40007c08:	11002022 	add	w2, w1, #0x8
    40007c0c:	7100005f 	cmp	w2, #0x0
    40007c10:	5400134d 	b.le	40007e78 <__svfscanf_r+0x1728>
    40007c14:	f9403fe1 	ldr	x1, [sp, #120]
    40007c18:	b900b3e2 	str	w2, [sp, #176]
    40007c1c:	91003c23 	add	x3, x1, #0xf
    40007c20:	927df062 	and	x2, x3, #0xfffffffffffffff8
    40007c24:	f9003fe2 	str	x2, [sp, #120]
    40007c28:	17ffff42 	b	40007930 <__svfscanf_r+0x11e0>
    40007c2c:	37f81120 	tbnz	w0, #31, 40007e50 <__svfscanf_r+0x1700>
    40007c30:	f9403fe0 	ldr	x0, [sp, #120]
    40007c34:	91003c02 	add	x2, x0, #0xf
    40007c38:	927df042 	and	x2, x2, #0xfffffffffffffff8
    40007c3c:	f9003fe2 	str	x2, [sp, #120]
    40007c40:	f9400000 	ldr	x0, [x0]
    40007c44:	aa0103f3 	mov	x19, x1
    40007c48:	93407ec1 	sxtw	x1, w22
    40007c4c:	f9000001 	str	x1, [x0]
    40007c50:	17fffb22 	b	400068d8 <__svfscanf_r+0x188>
    40007c54:	f9404fe2 	ldr	x2, [sp, #152]
    40007c58:	b940b3e0 	ldr	w0, [sp, #176]
    40007c5c:	b900b3e1 	str	w1, [sp, #176]
    40007c60:	8b20c040 	add	x0, x2, w0, sxtw
    40007c64:	17fffc9a 	b	40006ecc <__svfscanf_r+0x77c>
    40007c68:	2a1503f3 	mov	w19, w21
    40007c6c:	17fffdb1 	b	40007330 <__svfscanf_r+0xbe0>
    40007c70:	f9404fe4 	ldr	x4, [sp, #152]
    40007c74:	b940b3e2 	ldr	w2, [sp, #176]
    40007c78:	b900b3e3 	str	w3, [sp, #176]
    40007c7c:	8b22c082 	add	x2, x4, w2, sxtw
    40007c80:	17fffde9 	b	40007424 <__svfscanf_r+0xcd4>
    40007c84:	f9404fe3 	ldr	x3, [sp, #152]
    40007c88:	b940b3e1 	ldr	w1, [sp, #176]
    40007c8c:	b900b3e2 	str	w2, [sp, #176]
    40007c90:	8b21c061 	add	x1, x3, w1, sxtw
    40007c94:	17fffc4f 	b	40006dd0 <__svfscanf_r+0x680>
    40007c98:	b940b3e0 	ldr	w0, [sp, #176]
    40007c9c:	11002001 	add	w1, w0, #0x8
    40007ca0:	7100003f 	cmp	w1, #0x0
    40007ca4:	540011cd 	b.le	40007edc <__svfscanf_r+0x178c>
    40007ca8:	f9403fe0 	ldr	x0, [sp, #120]
    40007cac:	b900b3e1 	str	w1, [sp, #176]
    40007cb0:	91003c02 	add	x2, x0, #0xf
    40007cb4:	927df041 	and	x1, x2, #0xfffffffffffffff8
    40007cb8:	f9003fe1 	str	x1, [sp, #120]
    40007cbc:	f9400018 	ldr	x24, [x0]
    40007cc0:	17fffeba 	b	400077a8 <__svfscanf_r+0x1058>
    40007cc4:	b940b3e0 	ldr	w0, [sp, #176]
    40007cc8:	11002001 	add	w1, w0, #0x8
    40007ccc:	7100003f 	cmp	w1, #0x0
    40007cd0:	54000fad 	b.le	40007ec4 <__svfscanf_r+0x1774>
    40007cd4:	f9403fe0 	ldr	x0, [sp, #120]
    40007cd8:	b900b3e1 	str	w1, [sp, #176]
    40007cdc:	91003c02 	add	x2, x0, #0xf
    40007ce0:	927df041 	and	x1, x2, #0xfffffffffffffff8
    40007ce4:	f9003fe1 	str	x1, [sp, #120]
    40007ce8:	f9400017 	ldr	x23, [x0]
    40007cec:	17fffe45 	b	40007600 <__svfscanf_r+0xeb0>
    40007cf0:	b940b3e0 	ldr	w0, [sp, #176]
    40007cf4:	11002001 	add	w1, w0, #0x8
    40007cf8:	7100003f 	cmp	w1, #0x0
    40007cfc:	54000fcd 	b.le	40007ef4 <__svfscanf_r+0x17a4>
    40007d00:	f9403fe0 	ldr	x0, [sp, #120]
    40007d04:	b900b3e1 	str	w1, [sp, #176]
    40007d08:	91003c02 	add	x2, x0, #0xf
    40007d0c:	927df041 	and	x1, x2, #0xfffffffffffffff8
    40007d10:	f9003fe1 	str	x1, [sp, #120]
    40007d14:	17ffff40 	b	40007a14 <__svfscanf_r+0x12c4>
    40007d18:	b940b3e1 	ldr	w1, [sp, #176]
    40007d1c:	11002022 	add	w2, w1, #0x8
    40007d20:	7100005f 	cmp	w2, #0x0
    40007d24:	540010ad 	b.le	40007f38 <__svfscanf_r+0x17e8>
    40007d28:	f9403fe1 	ldr	x1, [sp, #120]
    40007d2c:	b900b3e2 	str	w2, [sp, #176]
    40007d30:	91003c23 	add	x3, x1, #0xf
    40007d34:	927df062 	and	x2, x3, #0xfffffffffffffff8
    40007d38:	f9003fe2 	str	x2, [sp, #120]
    40007d3c:	17ffff2e 	b	400079f4 <__svfscanf_r+0x12a4>
    40007d40:	b940b3e0 	ldr	w0, [sp, #176]
    40007d44:	11002001 	add	w1, w0, #0x8
    40007d48:	7100003f 	cmp	w1, #0x0
    40007d4c:	54000b2d 	b.le	40007eb0 <__svfscanf_r+0x1760>
    40007d50:	f9403fe0 	ldr	x0, [sp, #120]
    40007d54:	b900b3e1 	str	w1, [sp, #176]
    40007d58:	91003c02 	add	x2, x0, #0xf
    40007d5c:	927df041 	and	x1, x2, #0xfffffffffffffff8
    40007d60:	f9003fe1 	str	x1, [sp, #120]
    40007d64:	17fffee7 	b	40007900 <__svfscanf_r+0x11b0>
    40007d68:	aa1b03e1 	mov	x1, x27
    40007d6c:	aa1403e0 	mov	x0, x20
    40007d70:	94000bf8 	bl	4000ad50 <__srefill_r>
    40007d74:	34ffb380 	cbz	w0, 400073e4 <__svfscanf_r+0xc94>
    40007d78:	f9004bf9 	str	x25, [sp, #144]
    40007d7c:	f94053f3 	ldr	x19, [sp, #160]
    40007d80:	35ff5d15 	cbnz	w21, 40006920 <__svfscanf_r+0x1d0>
    40007d84:	35ff5ab7 	cbnz	w23, 400068d8 <__svfscanf_r+0x188>
    40007d88:	17fffeec 	b	40007938 <__svfscanf_r+0x11e8>
    40007d8c:	b940b3e0 	ldr	w0, [sp, #176]
    40007d90:	11002002 	add	w2, w0, #0x8
    40007d94:	7100005f 	cmp	w2, #0x0
    40007d98:	54000dad 	b.le	40007f4c <__svfscanf_r+0x17fc>
    40007d9c:	f9403fe0 	ldr	x0, [sp, #120]
    40007da0:	b900b3e2 	str	w2, [sp, #176]
    40007da4:	91003c03 	add	x3, x0, #0xf
    40007da8:	927df062 	and	x2, x3, #0xfffffffffffffff8
    40007dac:	f9003fe2 	str	x2, [sp, #120]
    40007db0:	17ffff2c 	b	40007a60 <__svfscanf_r+0x1310>
    40007db4:	f9404fe4 	ldr	x4, [sp, #152]
    40007db8:	b940b3e2 	ldr	w2, [sp, #176]
    40007dbc:	b900b3e3 	str	w3, [sp, #176]
    40007dc0:	8b22c082 	add	x2, x4, w2, sxtw
    40007dc4:	17fffde4 	b	40007554 <__svfscanf_r+0xe04>
    40007dc8:	f9004bf9 	str	x25, [sp, #144]
    40007dcc:	aa1303fc 	mov	x28, x19
    40007dd0:	f94053f3 	ldr	x19, [sp, #160]
    40007dd4:	34ffb195 	cbz	w21, 40007404 <__svfscanf_r+0xcb4>
    40007dd8:	9107c3e0 	add	x0, sp, #0x1f0
    40007ddc:	aa1b03e2 	mov	x2, x27
    40007de0:	8b1c0001 	add	x1, x0, x28
    40007de4:	d100079c 	sub	x28, x28, #0x1
    40007de8:	aa1403e0 	mov	x0, x20
    40007dec:	385ff021 	ldurb	w1, [x1, #-1]
    40007df0:	94001b60 	bl	4000eb70 <_ungetc_r>
    40007df4:	35ffff3c 	cbnz	w28, 40007dd8 <__svfscanf_r+0x1688>
    40007df8:	35ff5717 	cbnz	w23, 400068d8 <__svfscanf_r+0x188>
    40007dfc:	17fffecf 	b	40007938 <__svfscanf_r+0x11e8>
    40007e00:	f9404fe2 	ldr	x2, [sp, #152]
    40007e04:	b940b3e0 	ldr	w0, [sp, #176]
    40007e08:	b900b3e1 	str	w1, [sp, #176]
    40007e0c:	8b20c040 	add	x0, x2, w0, sxtw
    40007e10:	17fffcd1 	b	40007154 <__svfscanf_r+0xa04>
    40007e14:	f9004bf8 	str	x24, [sp, #144]
    40007e18:	aa1903e0 	mov	x0, x25
    40007e1c:	aa1b03f9 	mov	x25, x27
    40007e20:	aa0003fb 	mov	x27, x0
    40007e24:	f94053f3 	ldr	x19, [sp, #160]
    40007e28:	34ffc875 	cbz	w21, 40007734 <__svfscanf_r+0xfe4>
    40007e2c:	9107c3e0 	add	x0, sp, #0x1f0
    40007e30:	aa1b03e2 	mov	x2, x27
    40007e34:	8b190001 	add	x1, x0, x25
    40007e38:	d1000739 	sub	x25, x25, #0x1
    40007e3c:	aa1403e0 	mov	x0, x20
    40007e40:	385ff021 	ldurb	w1, [x1, #-1]
    40007e44:	94001b4b 	bl	4000eb70 <_ungetc_r>
    40007e48:	35ffff39 	cbnz	w25, 40007e2c <__svfscanf_r+0x16dc>
    40007e4c:	17fffe3a 	b	40007734 <__svfscanf_r+0xfe4>
    40007e50:	b940b3e0 	ldr	w0, [sp, #176]
    40007e54:	11002002 	add	w2, w0, #0x8
    40007e58:	7100005f 	cmp	w2, #0x0
    40007e5c:	54000a2d 	b.le	40007fa0 <__svfscanf_r+0x1850>
    40007e60:	f9403fe0 	ldr	x0, [sp, #120]
    40007e64:	b900b3e2 	str	w2, [sp, #176]
    40007e68:	91003c03 	add	x3, x0, #0xf
    40007e6c:	927df062 	and	x2, x3, #0xfffffffffffffff8
    40007e70:	f9003fe2 	str	x2, [sp, #120]
    40007e74:	17ffff73 	b	40007c40 <__svfscanf_r+0x14f0>
    40007e78:	f9404fe3 	ldr	x3, [sp, #152]
    40007e7c:	b940b3e1 	ldr	w1, [sp, #176]
    40007e80:	b900b3e2 	str	w2, [sp, #176]
    40007e84:	8b21c061 	add	x1, x3, w1, sxtw
    40007e88:	17fffeaa 	b	40007930 <__svfscanf_r+0x11e0>
    40007e8c:	b940b3e1 	ldr	w1, [sp, #176]
    40007e90:	37f80741 	tbnz	w1, #31, 40007f78 <__svfscanf_r+0x1828>
    40007e94:	f9403fe1 	ldr	x1, [sp, #120]
    40007e98:	91003c22 	add	x2, x1, #0xf
    40007e9c:	927df042 	and	x2, x2, #0xfffffffffffffff8
    40007ea0:	f9003fe2 	str	x2, [sp, #120]
    40007ea4:	f9400021 	ldr	x1, [x1]
    40007ea8:	b9000020 	str	w0, [x1]
    40007eac:	17fffbcb 	b	40006dd8 <__svfscanf_r+0x688>
    40007eb0:	f9404fe2 	ldr	x2, [sp, #152]
    40007eb4:	b940b3e0 	ldr	w0, [sp, #176]
    40007eb8:	b900b3e1 	str	w1, [sp, #176]
    40007ebc:	8b20c040 	add	x0, x2, w0, sxtw
    40007ec0:	17fffe90 	b	40007900 <__svfscanf_r+0x11b0>
    40007ec4:	f9404fe2 	ldr	x2, [sp, #152]
    40007ec8:	b940b3e0 	ldr	w0, [sp, #176]
    40007ecc:	b900b3e1 	str	w1, [sp, #176]
    40007ed0:	8b20c040 	add	x0, x2, w0, sxtw
    40007ed4:	f9400017 	ldr	x23, [x0]
    40007ed8:	17fffdca 	b	40007600 <__svfscanf_r+0xeb0>
    40007edc:	f9404fe2 	ldr	x2, [sp, #152]
    40007ee0:	b940b3e0 	ldr	w0, [sp, #176]
    40007ee4:	b900b3e1 	str	w1, [sp, #176]
    40007ee8:	8b20c040 	add	x0, x2, w0, sxtw
    40007eec:	f9400018 	ldr	x24, [x0]
    40007ef0:	17fffe2e 	b	400077a8 <__svfscanf_r+0x1058>
    40007ef4:	f9404fe2 	ldr	x2, [sp, #152]
    40007ef8:	b940b3e0 	ldr	w0, [sp, #176]
    40007efc:	b900b3e1 	str	w1, [sp, #176]
    40007f00:	8b20c040 	add	x0, x2, w0, sxtw
    40007f04:	17fffec4 	b	40007a14 <__svfscanf_r+0x12c4>
    40007f08:	9107c3e0 	add	x0, sp, #0x1f0
    40007f0c:	aa1c03fa 	mov	x26, x28
    40007f10:	eb00039f 	cmp	x28, x0
    40007f14:	54ff49e9 	b.ls	40006850 <__svfscanf_r+0x100>  // b.plast
    40007f18:	385fff41 	ldrb	w1, [x26, #-1]!
    40007f1c:	aa1b03e2 	mov	x2, x27
    40007f20:	aa1403e0 	mov	x0, x20
    40007f24:	94001b13 	bl	4000eb70 <_ungetc_r>
    40007f28:	9107c3e0 	add	x0, sp, #0x1f0
    40007f2c:	eb00035f 	cmp	x26, x0
    40007f30:	54ffff41 	b.ne	40007f18 <__svfscanf_r+0x17c8>  // b.any
    40007f34:	17fffa47 	b	40006850 <__svfscanf_r+0x100>
    40007f38:	f9404fe3 	ldr	x3, [sp, #152]
    40007f3c:	b940b3e1 	ldr	w1, [sp, #176]
    40007f40:	b900b3e2 	str	w2, [sp, #176]
    40007f44:	8b21c061 	add	x1, x3, w1, sxtw
    40007f48:	17fffeab 	b	400079f4 <__svfscanf_r+0x12a4>
    40007f4c:	f9404fe3 	ldr	x3, [sp, #152]
    40007f50:	b940b3e0 	ldr	w0, [sp, #176]
    40007f54:	b900b3e2 	str	w2, [sp, #176]
    40007f58:	8b20c060 	add	x0, x3, w0, sxtw
    40007f5c:	17fffec1 	b	40007a60 <__svfscanf_r+0x1310>
    40007f60:	12800000 	mov	w0, #0xffffffff            	// #-1
    40007f64:	b90077e0 	str	w0, [sp, #116]
    40007f68:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40007f6c:	a94363f7 	ldp	x23, x24, [sp, #48]
    40007f70:	a9446bf9 	ldp	x25, x26, [sp, #64]
    40007f74:	17fffa3a 	b	4000685c <__svfscanf_r+0x10c>
    40007f78:	b940b3e1 	ldr	w1, [sp, #176]
    40007f7c:	11002022 	add	w2, w1, #0x8
    40007f80:	7100005f 	cmp	w2, #0x0
    40007f84:	540005cd 	b.le	4000803c <__svfscanf_r+0x18ec>
    40007f88:	f9403fe1 	ldr	x1, [sp, #120]
    40007f8c:	b900b3e2 	str	w2, [sp, #176]
    40007f90:	91003c23 	add	x3, x1, #0xf
    40007f94:	927df062 	and	x2, x3, #0xfffffffffffffff8
    40007f98:	f9003fe2 	str	x2, [sp, #120]
    40007f9c:	17ffffc2 	b	40007ea4 <__svfscanf_r+0x1754>
    40007fa0:	f9404fe3 	ldr	x3, [sp, #152]
    40007fa4:	b940b3e0 	ldr	w0, [sp, #176]
    40007fa8:	b900b3e2 	str	w2, [sp, #176]
    40007fac:	8b20c060 	add	x0, x3, w0, sxtw
    40007fb0:	17ffff24 	b	40007c40 <__svfscanf_r+0x14f0>
    40007fb4:	94001247 	bl	4000c8d0 <_strtoull_r>
    40007fb8:	17fffb80 	b	40006db8 <__svfscanf_r+0x668>
    40007fbc:	9107c3e0 	add	x0, sp, #0x1f0
    40007fc0:	aa1c03fa 	mov	x26, x28
    40007fc4:	eb00039f 	cmp	x28, x0
    40007fc8:	54ff4449 	b.ls	40006850 <__svfscanf_r+0x100>  // b.plast
    40007fcc:	385fff41 	ldrb	w1, [x26, #-1]!
    40007fd0:	aa1b03e2 	mov	x2, x27
    40007fd4:	aa1403e0 	mov	x0, x20
    40007fd8:	94001ae6 	bl	4000eb70 <_ungetc_r>
    40007fdc:	9107c3e0 	add	x0, sp, #0x1f0
    40007fe0:	eb00035f 	cmp	x26, x0
    40007fe4:	54ffff41 	b.ne	40007fcc <__svfscanf_r+0x187c>  // b.any
    40007fe8:	17fffa1a 	b	40006850 <__svfscanf_r+0x100>
    40007fec:	2a1503f8 	mov	w24, w21
    40007ff0:	17fffd7c 	b	400075e0 <__svfscanf_r+0xe90>
    40007ff4:	aa1803f9 	mov	x25, x24
    40007ff8:	52800018 	mov	w24, #0x0                   	// #0
    40007ffc:	17fffd79 	b	400075e0 <__svfscanf_r+0xe90>
    40008000:	b940b3e0 	ldr	w0, [sp, #176]
    40008004:	11002002 	add	w2, w0, #0x8
    40008008:	7100005f 	cmp	w2, #0x0
    4000800c:	540003ad 	b.le	40008080 <__svfscanf_r+0x1930>
    40008010:	f9403fe0 	ldr	x0, [sp, #120]
    40008014:	b900b3e2 	str	w2, [sp, #176]
    40008018:	91003c03 	add	x3, x0, #0xf
    4000801c:	927df062 	and	x2, x3, #0xfffffffffffffff8
    40008020:	f9003fe2 	str	x2, [sp, #120]
    40008024:	17fffaf0 	b	40006be4 <__svfscanf_r+0x494>
    40008028:	d00000c0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    4000802c:	91352000 	add	x0, x0, #0xd48
    40008030:	94000bf4 	bl	4000b000 <nanf>
    40008034:	bd0002e0 	str	s0, [x23]
    40008038:	17fffc49 	b	4000715c <__svfscanf_r+0xa0c>
    4000803c:	f9404fe3 	ldr	x3, [sp, #152]
    40008040:	b940b3e1 	ldr	w1, [sp, #176]
    40008044:	b900b3e2 	str	w2, [sp, #176]
    40008048:	8b21c061 	add	x1, x3, w1, sxtw
    4000804c:	17ffff96 	b	40007ea4 <__svfscanf_r+0x1754>
    40008050:	9107c3e0 	add	x0, sp, #0x1f0
    40008054:	aa1c03fa 	mov	x26, x28
    40008058:	eb00039f 	cmp	x28, x0
    4000805c:	54ff3fa9 	b.ls	40006850 <__svfscanf_r+0x100>  // b.plast
    40008060:	385fff41 	ldrb	w1, [x26, #-1]!
    40008064:	aa1b03e2 	mov	x2, x27
    40008068:	aa1403e0 	mov	x0, x20
    4000806c:	94001ac1 	bl	4000eb70 <_ungetc_r>
    40008070:	9107c3e0 	add	x0, sp, #0x1f0
    40008074:	eb00035f 	cmp	x26, x0
    40008078:	54ffff41 	b.ne	40008060 <__svfscanf_r+0x1910>  // b.any
    4000807c:	17fff9f5 	b	40006850 <__svfscanf_r+0x100>
    40008080:	f9404fe3 	ldr	x3, [sp, #152]
    40008084:	b940b3e0 	ldr	w0, [sp, #176]
    40008088:	b900b3e2 	str	w2, [sp, #176]
    4000808c:	8b20c060 	add	x0, x3, w0, sxtw
    40008090:	17fffad5 	b	40006be4 <__svfscanf_r+0x494>
    40008094:	b94002e4 	ldr	w4, [x23]
    40008098:	3100049f 	cmn	w4, #0x1
    4000809c:	54ffb0a1 	b.ne	400076b0 <__svfscanf_r+0xf60>  // b.any
    400080a0:	17fffd93 	b	400076ec <__svfscanf_r+0xf9c>
	...

00000000400080b0 <_vfscanf_r>:
    400080b0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    400080b4:	910003fd 	mov	x29, sp
    400080b8:	a90153f3 	stp	x19, x20, [sp, #16]
    400080bc:	aa0303f4 	mov	x20, x3
    400080c0:	aa0003f3 	mov	x19, x0
    400080c4:	b4000060 	cbz	x0, 400080d0 <_vfscanf_r+0x20>
    400080c8:	b9405003 	ldr	w3, [x0, #80]
    400080cc:	34000163 	cbz	w3, 400080f8 <_vfscanf_r+0x48>
    400080d0:	a9401e86 	ldp	x6, x7, [x20]
    400080d4:	9100c3e3 	add	x3, sp, #0x30
    400080d8:	a9411684 	ldp	x4, x5, [x20, #16]
    400080dc:	aa1303e0 	mov	x0, x19
    400080e0:	a9031fe6 	stp	x6, x7, [sp, #48]
    400080e4:	a90417e4 	stp	x4, x5, [sp, #64]
    400080e8:	97fff99a 	bl	40006750 <__svfscanf_r>
    400080ec:	a94153f3 	ldp	x19, x20, [sp, #16]
    400080f0:	a8c57bfd 	ldp	x29, x30, [sp], #80
    400080f4:	d65f03c0 	ret
    400080f8:	a9020be1 	stp	x1, x2, [sp, #32]
    400080fc:	97ffe9e5 	bl	40002890 <__sinit>
    40008100:	a9420be1 	ldp	x1, x2, [sp, #32]
    40008104:	17fffff3 	b	400080d0 <_vfscanf_r+0x20>
	...

0000000040008110 <vsnprintf>:
    40008110:	a9ae7bfd 	stp	x29, x30, [sp, #-288]!
    40008114:	d0000625 	adrp	x5, 400ce000 <z_interrupt_stacks+0x440>
    40008118:	b2407be4 	mov	x4, #0x7fffffff            	// #2147483647
    4000811c:	910003fd 	mov	x29, sp
    40008120:	a9402468 	ldp	x8, x9, [x3]
    40008124:	a9411c66 	ldp	x6, x7, [x3, #16]
    40008128:	f9000bf3 	str	x19, [sp, #16]
    4000812c:	f94614b3 	ldr	x19, [x5, #3112]
    40008130:	eb04003f 	cmp	x1, x4
    40008134:	54000568 	b.hi	400081e0 <vsnprintf+0xd0>  // b.pmore
    40008138:	52804103 	mov	w3, #0x208                 	// #520
    4000813c:	f90037e0 	str	x0, [sp, #104]
    40008140:	7900f3e3 	strh	w3, [sp, #120]
    40008144:	f90043e0 	str	x0, [sp, #128]
    40008148:	b40002a1 	cbz	x1, 4000819c <vsnprintf+0x8c>
    4000814c:	51000424 	sub	w4, w1, #0x1
    40008150:	12800005 	mov	w5, #0xffffffff            	// #-1
    40008154:	910083e3 	add	x3, sp, #0x20
    40008158:	9101a3e1 	add	x1, sp, #0x68
    4000815c:	aa1303e0 	mov	x0, x19
    40008160:	a90227e8 	stp	x8, x9, [sp, #32]
    40008164:	a9031fe6 	stp	x6, x7, [sp, #48]
    40008168:	b90077e4 	str	w4, [sp, #116]
    4000816c:	7900f7e5 	strh	w5, [sp, #122]
    40008170:	b9008be4 	str	w4, [sp, #136]
    40008174:	940011db 	bl	4000c8e0 <_svfprintf_r>
    40008178:	3100041f 	cmn	w0, #0x1
    4000817c:	5400006a 	b.ge	40008188 <vsnprintf+0x78>  // b.tcont
    40008180:	52801161 	mov	w1, #0x8b                  	// #139
    40008184:	b9000261 	str	w1, [x19]
    40008188:	f94037e1 	ldr	x1, [sp, #104]
    4000818c:	3900003f 	strb	wzr, [x1]
    40008190:	f9400bf3 	ldr	x19, [sp, #16]
    40008194:	a8d27bfd 	ldp	x29, x30, [sp], #288
    40008198:	d65f03c0 	ret
    4000819c:	12800004 	mov	w4, #0xffffffff            	// #-1
    400081a0:	910083e3 	add	x3, sp, #0x20
    400081a4:	9101a3e1 	add	x1, sp, #0x68
    400081a8:	aa1303e0 	mov	x0, x19
    400081ac:	a90227e8 	stp	x8, x9, [sp, #32]
    400081b0:	a9031fe6 	stp	x6, x7, [sp, #48]
    400081b4:	b90077ff 	str	wzr, [sp, #116]
    400081b8:	7900f7e4 	strh	w4, [sp, #122]
    400081bc:	b9008bff 	str	wzr, [sp, #136]
    400081c0:	940011c8 	bl	4000c8e0 <_svfprintf_r>
    400081c4:	3100041f 	cmn	w0, #0x1
    400081c8:	5400006a 	b.ge	400081d4 <vsnprintf+0xc4>  // b.tcont
    400081cc:	52801161 	mov	w1, #0x8b                  	// #139
    400081d0:	b9000261 	str	w1, [x19]
    400081d4:	f9400bf3 	ldr	x19, [sp, #16]
    400081d8:	a8d27bfd 	ldp	x29, x30, [sp], #288
    400081dc:	d65f03c0 	ret
    400081e0:	52801161 	mov	w1, #0x8b                  	// #139
    400081e4:	12800000 	mov	w0, #0xffffffff            	// #-1
    400081e8:	b9000261 	str	w1, [x19]
    400081ec:	17fffffa 	b	400081d4 <vsnprintf+0xc4>

00000000400081f0 <vsprintf>:
    400081f0:	aa0203e3 	mov	x3, x2
    400081f4:	a9af7bfd 	stp	x29, x30, [sp, #-272]!
    400081f8:	d0000625 	adrp	x5, 400ce000 <z_interrupt_stacks+0x440>
    400081fc:	910003fd 	mov	x29, sp
    40008200:	a9402c4a 	ldp	x10, x11, [x2]
    40008204:	aa0003e4 	mov	x4, x0
    40008208:	a9411c66 	ldp	x6, x7, [x3, #16]
    4000820c:	92b00008 	mov	x8, #0xffffffff7fffffff    	// #-2147483649
    40008210:	f94614a0 	ldr	x0, [x5, #3112]
    40008214:	f2c04108 	movk	x8, #0x208, lsl #32
    40008218:	12b00005 	mov	w5, #0x7fffffff            	// #2147483647
    4000821c:	aa0103e2 	mov	x2, x1
    40008220:	910043e3 	add	x3, sp, #0x10
    40008224:	910163e1 	add	x1, sp, #0x58
    40008228:	a9012fea 	stp	x10, x11, [sp, #16]
    4000822c:	a9021fe6 	stp	x6, x7, [sp, #32]
    40008230:	f9002fe4 	str	x4, [sp, #88]
    40008234:	f80643e8 	stur	x8, [sp, #100]
    40008238:	f9003be4 	str	x4, [sp, #112]
    4000823c:	b9007be5 	str	w5, [sp, #120]
    40008240:	940011a8 	bl	4000c8e0 <_svfprintf_r>
    40008244:	f9402fe1 	ldr	x1, [sp, #88]
    40008248:	3900003f 	strb	wzr, [x1]
    4000824c:	a8d17bfd 	ldp	x29, x30, [sp], #272
    40008250:	d65f03c0 	ret
	...

0000000040008260 <_write_r>:
    40008260:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    40008264:	910003fd 	mov	x29, sp
    40008268:	a90153f3 	stp	x19, x20, [sp, #16]
    4000826c:	f00003d4 	adrp	x20, 40083000 <ws+0x3a40>
    40008270:	aa0003f3 	mov	x19, x0
    40008274:	2a0103e0 	mov	w0, w1
    40008278:	aa0203e1 	mov	x1, x2
    4000827c:	b90b9e9f 	str	wzr, [x20, #2972]
    40008280:	aa0303e2 	mov	x2, x3
    40008284:	94005601 	bl	4001da88 <_write>
    40008288:	93407c01 	sxtw	x1, w0
    4000828c:	3100041f 	cmn	w0, #0x1
    40008290:	540000a0 	b.eq	400082a4 <_write_r+0x44>  // b.none
    40008294:	aa0103e0 	mov	x0, x1
    40008298:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000829c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    400082a0:	d65f03c0 	ret
    400082a4:	b94b9e80 	ldr	w0, [x20, #2972]
    400082a8:	34ffff60 	cbz	w0, 40008294 <_write_r+0x34>
    400082ac:	b9000260 	str	w0, [x19]
    400082b0:	aa0103e0 	mov	x0, x1
    400082b4:	a94153f3 	ldp	x19, x20, [sp, #16]
    400082b8:	a8c27bfd 	ldp	x29, x30, [sp], #32
    400082bc:	d65f03c0 	ret

00000000400082c0 <__swsetup_r>:
    400082c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    400082c4:	d0000622 	adrp	x2, 400ce000 <z_interrupt_stacks+0x440>
    400082c8:	910003fd 	mov	x29, sp
    400082cc:	a90153f3 	stp	x19, x20, [sp, #16]
    400082d0:	aa0003f4 	mov	x20, x0
    400082d4:	aa0103f3 	mov	x19, x1
    400082d8:	f9461440 	ldr	x0, [x2, #3112]
    400082dc:	b4000060 	cbz	x0, 400082e8 <__swsetup_r+0x28>
    400082e0:	b9405001 	ldr	w1, [x0, #80]
    400082e4:	340004e1 	cbz	w1, 40008380 <__swsetup_r+0xc0>
    400082e8:	79c02262 	ldrsh	w2, [x19, #16]
    400082ec:	12003c41 	and	w1, w2, #0xffff
    400082f0:	36180502 	tbz	w2, #3, 40008390 <__swsetup_r+0xd0>
    400082f4:	f9400e63 	ldr	x3, [x19, #24]
    400082f8:	b40002c3 	cbz	x3, 40008350 <__swsetup_r+0x90>
    400082fc:	36000141 	tbz	w1, #0, 40008324 <__swsetup_r+0x64>
    40008300:	b9402260 	ldr	w0, [x19, #32]
    40008304:	b9000e7f 	str	wzr, [x19, #12]
    40008308:	4b0003e0 	neg	w0, w0
    4000830c:	b9002a60 	str	w0, [x19, #40]
    40008310:	52800000 	mov	w0, #0x0                   	// #0
    40008314:	b4000143 	cbz	x3, 4000833c <__swsetup_r+0x7c>
    40008318:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000831c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40008320:	d65f03c0 	ret
    40008324:	52800000 	mov	w0, #0x0                   	// #0
    40008328:	37080041 	tbnz	w1, #1, 40008330 <__swsetup_r+0x70>
    4000832c:	b9402260 	ldr	w0, [x19, #32]
    40008330:	b9000e60 	str	w0, [x19, #12]
    40008334:	52800000 	mov	w0, #0x0                   	// #0
    40008338:	b5ffff03 	cbnz	x3, 40008318 <__swsetup_r+0x58>
    4000833c:	363ffee1 	tbz	w1, #7, 40008318 <__swsetup_r+0x58>
    40008340:	321a0042 	orr	w2, w2, #0x40
    40008344:	12800000 	mov	w0, #0xffffffff            	// #-1
    40008348:	79002262 	strh	w2, [x19, #16]
    4000834c:	17fffff3 	b	40008318 <__swsetup_r+0x58>
    40008350:	52805000 	mov	w0, #0x280                 	// #640
    40008354:	0a000020 	and	w0, w1, w0
    40008358:	7108001f 	cmp	w0, #0x200
    4000835c:	54fffd00 	b.eq	400082fc <__swsetup_r+0x3c>  // b.none
    40008360:	aa1303e1 	mov	x1, x19
    40008364:	aa1403e0 	mov	x0, x20
    40008368:	97ffecba 	bl	40003650 <__smakebuf_r>
    4000836c:	79c02262 	ldrsh	w2, [x19, #16]
    40008370:	f9400e63 	ldr	x3, [x19, #24]
    40008374:	12003c41 	and	w1, w2, #0xffff
    40008378:	3607fd61 	tbz	w1, #0, 40008324 <__swsetup_r+0x64>
    4000837c:	17ffffe1 	b	40008300 <__swsetup_r+0x40>
    40008380:	97ffe944 	bl	40002890 <__sinit>
    40008384:	79c02262 	ldrsh	w2, [x19, #16]
    40008388:	12003c41 	and	w1, w2, #0xffff
    4000838c:	371ffb42 	tbnz	w2, #3, 400082f4 <__swsetup_r+0x34>
    40008390:	362002e1 	tbz	w1, #4, 400083ec <__swsetup_r+0x12c>
    40008394:	371000e1 	tbnz	w1, #2, 400083b0 <__swsetup_r+0xf0>
    40008398:	f9400e63 	ldr	x3, [x19, #24]
    4000839c:	321d0042 	orr	w2, w2, #0x8
    400083a0:	79002262 	strh	w2, [x19, #16]
    400083a4:	12003c41 	and	w1, w2, #0xffff
    400083a8:	b5fffaa3 	cbnz	x3, 400082fc <__swsetup_r+0x3c>
    400083ac:	17ffffe9 	b	40008350 <__swsetup_r+0x90>
    400083b0:	f9402e61 	ldr	x1, [x19, #88]
    400083b4:	b4000101 	cbz	x1, 400083d4 <__swsetup_r+0x114>
    400083b8:	9101d260 	add	x0, x19, #0x74
    400083bc:	eb00003f 	cmp	x1, x0
    400083c0:	54000080 	b.eq	400083d0 <__swsetup_r+0x110>  // b.none
    400083c4:	aa1403e0 	mov	x0, x20
    400083c8:	97ffea8a 	bl	40002df0 <_free_r>
    400083cc:	79c02262 	ldrsh	w2, [x19, #16]
    400083d0:	f9002e7f 	str	xzr, [x19, #88]
    400083d4:	f9400e63 	ldr	x3, [x19, #24]
    400083d8:	12800480 	mov	w0, #0xffffffdb            	// #-37
    400083dc:	0a000042 	and	w2, w2, w0
    400083e0:	f9000263 	str	x3, [x19]
    400083e4:	b9000a7f 	str	wzr, [x19, #8]
    400083e8:	17ffffed 	b	4000839c <__swsetup_r+0xdc>
    400083ec:	52800120 	mov	w0, #0x9                   	// #9
    400083f0:	b9000280 	str	w0, [x20]
    400083f4:	321a0042 	orr	w2, w2, #0x40
    400083f8:	12800000 	mov	w0, #0xffffffff            	// #-1
    400083fc:	79002262 	strh	w2, [x19, #16]
    40008400:	17ffffc6 	b	40008318 <__swsetup_r+0x58>
	...

0000000040008410 <_close_r>:
    40008410:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    40008414:	910003fd 	mov	x29, sp
    40008418:	a90153f3 	stp	x19, x20, [sp, #16]
    4000841c:	f00003d4 	adrp	x20, 40083000 <ws+0x3a40>
    40008420:	aa0003f3 	mov	x19, x0
    40008424:	b90b9e9f 	str	wzr, [x20, #2972]
    40008428:	2a0103e0 	mov	w0, w1
    4000842c:	9400559c 	bl	4001da9c <_close>
    40008430:	3100041f 	cmn	w0, #0x1
    40008434:	54000080 	b.eq	40008444 <_close_r+0x34>  // b.none
    40008438:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000843c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40008440:	d65f03c0 	ret
    40008444:	b94b9e81 	ldr	w1, [x20, #2972]
    40008448:	34ffff81 	cbz	w1, 40008438 <_close_r+0x28>
    4000844c:	b9000261 	str	w1, [x19]
    40008450:	a94153f3 	ldp	x19, x20, [sp, #16]
    40008454:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40008458:	d65f03c0 	ret
    4000845c:	00000000 	udf	#0

0000000040008460 <quorem>:
    40008460:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    40008464:	910003fd 	mov	x29, sp
    40008468:	a90153f3 	stp	x19, x20, [sp, #16]
    4000846c:	b9401434 	ldr	w20, [x1, #20]
    40008470:	a90363f7 	stp	x23, x24, [sp, #48]
    40008474:	aa0003f8 	mov	x24, x0
    40008478:	b9401400 	ldr	w0, [x0, #20]
    4000847c:	6b14001f 	cmp	w0, w20
    40008480:	54000b4b 	b.lt	400085e8 <quorem+0x188>  // b.tstop
    40008484:	51000694 	sub	w20, w20, #0x1
    40008488:	91006033 	add	x19, x1, #0x18
    4000848c:	91006317 	add	x23, x24, #0x18
    40008490:	a9025bf5 	stp	x21, x22, [sp, #32]
    40008494:	93407e8a 	sxtw	x10, w20
    40008498:	937e7e80 	sbfiz	x0, x20, #2, #32
    4000849c:	8b000276 	add	x22, x19, x0
    400084a0:	8b0002e9 	add	x9, x23, x0
    400084a4:	b86a7a60 	ldr	w0, [x19, x10, lsl #2]
    400084a8:	b86a7ae2 	ldr	w2, [x23, x10, lsl #2]
    400084ac:	11000400 	add	w0, w0, #0x1
    400084b0:	1ac00855 	udiv	w21, w2, w0
    400084b4:	6b00005f 	cmp	w2, w0
    400084b8:	540004a3 	b.cc	4000854c <quorem+0xec>  // b.lo, b.ul, b.last
    400084bc:	aa1303e8 	mov	x8, x19
    400084c0:	aa1703e7 	mov	x7, x23
    400084c4:	52800003 	mov	w3, #0x0                   	// #0
    400084c8:	52800000 	mov	w0, #0x0                   	// #0
    400084cc:	d503201f 	nop
    400084d0:	b8404504 	ldr	w4, [x8], #4
    400084d4:	b94000e2 	ldr	w2, [x7]
    400084d8:	12003c86 	and	w6, w4, #0xffff
    400084dc:	53107c84 	lsr	w4, w4, #16
    400084e0:	53107c45 	lsr	w5, w2, #16
    400084e4:	1b150cc6 	madd	w6, w6, w21, w3
    400084e8:	53107cc3 	lsr	w3, w6, #16
    400084ec:	4b262000 	sub	w0, w0, w6, uxth
    400084f0:	0b222002 	add	w2, w0, w2, uxth
    400084f4:	1b150c83 	madd	w3, w4, w21, w3
    400084f8:	4b2320a4 	sub	w4, w5, w3, uxth
    400084fc:	53107c63 	lsr	w3, w3, #16
    40008500:	0b824084 	add	w4, w4, w2, asr #16
    40008504:	33103c82 	bfi	w2, w4, #16, #16
    40008508:	b80044e2 	str	w2, [x7], #4
    4000850c:	13107c80 	asr	w0, w4, #16
    40008510:	eb0802df 	cmp	x22, x8
    40008514:	54fffde2 	b.cs	400084d0 <quorem+0x70>  // b.hs, b.nlast
    40008518:	b86a7ae0 	ldr	w0, [x23, x10, lsl #2]
    4000851c:	35000180 	cbnz	w0, 4000854c <quorem+0xec>
    40008520:	d1001120 	sub	x0, x9, #0x4
    40008524:	eb0002ff 	cmp	x23, x0
    40008528:	540000a3 	b.cc	4000853c <quorem+0xdc>  // b.lo, b.ul, b.last
    4000852c:	14000007 	b	40008548 <quorem+0xe8>
    40008530:	51000694 	sub	w20, w20, #0x1
    40008534:	eb0002ff 	cmp	x23, x0
    40008538:	54000082 	b.cs	40008548 <quorem+0xe8>  // b.hs, b.nlast
    4000853c:	b9400002 	ldr	w2, [x0]
    40008540:	d1001000 	sub	x0, x0, #0x4
    40008544:	34ffff62 	cbz	w2, 40008530 <quorem+0xd0>
    40008548:	b9001714 	str	w20, [x24, #20]
    4000854c:	aa1803e0 	mov	x0, x24
    40008550:	94000844 	bl	4000a660 <__mcmp>
    40008554:	37f803e0 	tbnz	w0, #31, 400085d0 <quorem+0x170>
    40008558:	110006b5 	add	w21, w21, #0x1
    4000855c:	aa1703e0 	mov	x0, x23
    40008560:	52800001 	mov	w1, #0x0                   	// #0
    40008564:	d503201f 	nop
    40008568:	b8404662 	ldr	w2, [x19], #4
    4000856c:	b9400003 	ldr	w3, [x0]
    40008570:	4b222021 	sub	w1, w1, w2, uxth
    40008574:	0b232021 	add	w1, w1, w3, uxth
    40008578:	53107c63 	lsr	w3, w3, #16
    4000857c:	4b424062 	sub	w2, w3, w2, lsr #16
    40008580:	0b814042 	add	w2, w2, w1, asr #16
    40008584:	33103c41 	bfi	w1, w2, #16, #16
    40008588:	b8004401 	str	w1, [x0], #4
    4000858c:	13107c41 	asr	w1, w2, #16
    40008590:	eb1302df 	cmp	x22, x19
    40008594:	54fffea2 	b.cs	40008568 <quorem+0x108>  // b.hs, b.nlast
    40008598:	b874dae1 	ldr	w1, [x23, w20, sxtw #2]
    4000859c:	8b34cae0 	add	x0, x23, w20, sxtw #2
    400085a0:	35000181 	cbnz	w1, 400085d0 <quorem+0x170>
    400085a4:	d1001000 	sub	x0, x0, #0x4
    400085a8:	eb0002ff 	cmp	x23, x0
    400085ac:	540000a3 	b.cc	400085c0 <quorem+0x160>  // b.lo, b.ul, b.last
    400085b0:	14000007 	b	400085cc <quorem+0x16c>
    400085b4:	51000694 	sub	w20, w20, #0x1
    400085b8:	eb0002ff 	cmp	x23, x0
    400085bc:	54000082 	b.cs	400085cc <quorem+0x16c>  // b.hs, b.nlast
    400085c0:	b9400001 	ldr	w1, [x0]
    400085c4:	d1001000 	sub	x0, x0, #0x4
    400085c8:	34ffff61 	cbz	w1, 400085b4 <quorem+0x154>
    400085cc:	b9001714 	str	w20, [x24, #20]
    400085d0:	2a1503e0 	mov	w0, w21
    400085d4:	a94153f3 	ldp	x19, x20, [sp, #16]
    400085d8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    400085dc:	a94363f7 	ldp	x23, x24, [sp, #48]
    400085e0:	a8c47bfd 	ldp	x29, x30, [sp], #64
    400085e4:	d65f03c0 	ret
    400085e8:	52800000 	mov	w0, #0x0                   	// #0
    400085ec:	a94153f3 	ldp	x19, x20, [sp, #16]
    400085f0:	a94363f7 	ldp	x23, x24, [sp, #48]
    400085f4:	a8c47bfd 	ldp	x29, x30, [sp], #64
    400085f8:	d65f03c0 	ret
    400085fc:	00000000 	udf	#0

0000000040008600 <_dtoa_r>:
    40008600:	a9b47bfd 	stp	x29, x30, [sp, #-192]!
    40008604:	910003fd 	mov	x29, sp
    40008608:	f9403006 	ldr	x6, [x0, #96]
    4000860c:	a90153f3 	stp	x19, x20, [sp, #16]
    40008610:	aa0003f3 	mov	x19, x0
    40008614:	a9025bf5 	stp	x21, x22, [sp, #32]
    40008618:	aa0403f4 	mov	x20, x4
    4000861c:	2a0103f5 	mov	w21, w1
    40008620:	a90363f7 	stp	x23, x24, [sp, #48]
    40008624:	aa0503f8 	mov	x24, x5
    40008628:	a9046bf9 	stp	x25, x26, [sp, #64]
    4000862c:	9e66001a 	fmov	x26, d0
    40008630:	a90573fb 	stp	x27, x28, [sp, #80]
    40008634:	2a0203fc 	mov	w28, w2
    40008638:	f9003be3 	str	x3, [sp, #112]
    4000863c:	6d0627e8 	stp	d8, d9, [sp, #96]
    40008640:	1e604008 	fmov	d8, d0
    40008644:	b4000106 	cbz	x6, 40008664 <_dtoa_r+0x64>
    40008648:	b9406803 	ldr	w3, [x0, #104]
    4000864c:	52800022 	mov	w2, #0x1                   	// #1
    40008650:	aa0603e1 	mov	x1, x6
    40008654:	1ac32042 	lsl	w2, w2, w3
    40008658:	290108c3 	stp	w3, w2, [x6, #8]
    4000865c:	940005d5 	bl	40009db0 <_Bfree>
    40008660:	f900327f 	str	xzr, [x19, #96]
    40008664:	9e660100 	fmov	x0, d8
    40008668:	d360fc00 	lsr	x0, x0, #32
    4000866c:	2a0003f6 	mov	w22, w0
    40008670:	37f81f60 	tbnz	w0, #31, 40008a5c <_dtoa_r+0x45c>
    40008674:	120c2ac1 	and	w1, w22, #0x7ff00000
    40008678:	b900029f 	str	wzr, [x20]
    4000867c:	1e604109 	fmov	d9, d8
    40008680:	52affe00 	mov	w0, #0x7ff00000            	// #2146435072
    40008684:	6b00003f 	cmp	w1, w0
    40008688:	54001fc0 	b.eq	40008a80 <_dtoa_r+0x480>  // b.none
    4000868c:	1e602128 	fcmp	d9, #0.0
    40008690:	54000261 	b.ne	400086dc <_dtoa_r+0xdc>  // b.any
    40008694:	f9403be1 	ldr	x1, [sp, #112]
    40008698:	52800020 	mov	w0, #0x1                   	// #1
    4000869c:	b9000020 	str	w0, [x1]
    400086a0:	b40026d8 	cbz	x24, 40008b78 <_dtoa_r+0x578>
    400086a4:	d00000c0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    400086a8:	d00000d6 	adrp	x22, 40022000 <__pow_log_data+0xcc8>
    400086ac:	91356400 	add	x0, x0, #0xd59
    400086b0:	913562d6 	add	x22, x22, #0xd58
    400086b4:	f9000300 	str	x0, [x24]
    400086b8:	aa1603e0 	mov	x0, x22
    400086bc:	a94153f3 	ldp	x19, x20, [sp, #16]
    400086c0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    400086c4:	a94363f7 	ldp	x23, x24, [sp, #48]
    400086c8:	a9446bf9 	ldp	x25, x26, [sp, #64]
    400086cc:	a94573fb 	ldp	x27, x28, [sp, #80]
    400086d0:	6d4627e8 	ldp	d8, d9, [sp, #96]
    400086d4:	a8cc7bfd 	ldp	x29, x30, [sp], #192
    400086d8:	d65f03c0 	ret
    400086dc:	1e604120 	fmov	d0, d9
    400086e0:	9102e3e2 	add	x2, sp, #0xb8
    400086e4:	9102f3e1 	add	x1, sp, #0xbc
    400086e8:	aa1303e0 	mov	x0, x19
    400086ec:	940008cd 	bl	4000aa20 <__d2b>
    400086f0:	aa0003f4 	mov	x20, x0
    400086f4:	53147ec0 	lsr	w0, w22, #20
    400086f8:	35001dc0 	cbnz	w0, 40008ab0 <_dtoa_r+0x4b0>
    400086fc:	295707e3 	ldp	w3, w1, [sp, #184]
    40008700:	9e660100 	fmov	x0, d8
    40008704:	0b010061 	add	w1, w3, w1
    40008708:	1110c822 	add	w2, w1, #0x432
    4000870c:	7100805f 	cmp	w2, #0x20
    40008710:	5400240d 	b.le	40008b90 <_dtoa_r+0x590>
    40008714:	11104825 	add	w5, w1, #0x412
    40008718:	52800804 	mov	w4, #0x40                  	// #64
    4000871c:	4b020082 	sub	w2, w4, w2
    40008720:	1ac52400 	lsr	w0, w0, w5
    40008724:	1ac222d6 	lsl	w22, w22, w2
    40008728:	2a0002c0 	orr	w0, w22, w0
    4000872c:	1e630000 	ucvtf	d0, w0
    40008730:	51000420 	sub	w0, w1, #0x1
    40008734:	52800021 	mov	w1, #0x1                   	// #1
    40008738:	b900a7e1 	str	w1, [sp, #164]
    4000873c:	52bfc204 	mov	w4, #0xfe100000            	// #-32505856
    40008740:	9e660002 	fmov	x2, d0
    40008744:	d360fc41 	lsr	x1, x2, #32
    40008748:	0b040021 	add	w1, w1, w4
    4000874c:	b3607c22 	bfi	x2, x1, #32, #32
    40008750:	9e670042 	fmov	d2, x2
    40008754:	1e6f1001 	fmov	d1, #1.500000000000000000e+00
    40008758:	d00000c1 	adrp	x1, 40022000 <__pow_log_data+0xcc8>
    4000875c:	1e620003 	scvtf	d3, w0
    40008760:	1e613841 	fsub	d1, d2, d1
    40008764:	fd472024 	ldr	d4, [x1, #3648]
    40008768:	d00000c1 	adrp	x1, 40022000 <__pow_log_data+0xcc8>
    4000876c:	fd472420 	ldr	d0, [x1, #3656]
    40008770:	d00000c1 	adrp	x1, 40022000 <__pow_log_data+0xcc8>
    40008774:	1f440020 	fmadd	d0, d1, d4, d0
    40008778:	fd472822 	ldr	d2, [x1, #3664]
    4000877c:	1f420060 	fmadd	d0, d3, d2, d0
    40008780:	1e602018 	fcmpe	d0, #0.0
    40008784:	1e780004 	fcvtzs	w4, d0
    40008788:	54001ee4 	b.mi	40008b64 <_dtoa_r+0x564>  // b.first
    4000878c:	4b000060 	sub	w0, w3, w0
    40008790:	51000406 	sub	w6, w0, #0x1
    40008794:	7100589f 	cmp	w4, #0x16
    40008798:	54001ca8 	b.hi	40008b2c <_dtoa_r+0x52c>  // b.pmore
    4000879c:	d00000c1 	adrp	x1, 40022000 <__pow_log_data+0xcc8>
    400087a0:	913be021 	add	x1, x1, #0xef8
    400087a4:	fc64d820 	ldr	d0, [x1, w4, sxtw #3]
    400087a8:	1e692010 	fcmpe	d0, d9
    400087ac:	54001ecc 	b.gt	40008b84 <_dtoa_r+0x584>
    400087b0:	b9009bff 	str	wzr, [sp, #152]
    400087b4:	52800007 	mov	w7, #0x0                   	// #0
    400087b8:	37f81ce6 	tbnz	w6, #31, 40008b54 <_dtoa_r+0x554>
    400087bc:	0b0400c6 	add	w6, w6, w4
    400087c0:	5280001b 	mov	w27, #0x0                   	// #0
    400087c4:	b9007be4 	str	w4, [sp, #120]
    400087c8:	52800039 	mov	w25, #0x1                   	// #1
    400087cc:	710026bf 	cmp	w21, #0x9
    400087d0:	540019e8 	b.hi	40008b0c <_dtoa_r+0x50c>  // b.pmore
    400087d4:	710016bf 	cmp	w21, #0x5
    400087d8:	5400006d 	b.le	400087e4 <_dtoa_r+0x1e4>
    400087dc:	510012b5 	sub	w21, w21, #0x4
    400087e0:	52800019 	mov	w25, #0x0                   	// #0
    400087e4:	710012bf 	cmp	w21, #0x4
    400087e8:	54005ae0 	b.eq	40009344 <_dtoa_r+0xd44>  // b.none
    400087ec:	710016bf 	cmp	w21, #0x5
    400087f0:	54003e40 	b.eq	40008fb8 <_dtoa_r+0x9b8>  // b.none
    400087f4:	b90083ff 	str	wzr, [sp, #128]
    400087f8:	71000abf 	cmp	w21, #0x2
    400087fc:	54001761 	b.ne	40008ae8 <_dtoa_r+0x4e8>  // b.any
    40008800:	7100039f 	cmp	w28, #0x0
    40008804:	5400490d 	b.le	40009124 <_dtoa_r+0xb24>
    40008808:	2a1c03f6 	mov	w22, w28
    4000880c:	2a1c03e0 	mov	w0, w28
    40008810:	b900abfc 	str	w28, [sp, #168]
    40008814:	b9006a7f 	str	wzr, [x19, #104]
    40008818:	93407c05 	sxtw	x5, w0
    4000881c:	71007c1f 	cmp	w0, #0x1f
    40008820:	540078ad 	b.le	40009734 <_dtoa_r+0x1134>
    40008824:	52800023 	mov	w3, #0x1                   	// #1
    40008828:	52800082 	mov	w2, #0x4                   	// #4
    4000882c:	d503201f 	nop
    40008830:	531f7842 	lsl	w2, w2, #1
    40008834:	2a0303e1 	mov	w1, w3
    40008838:	11000463 	add	w3, w3, #0x1
    4000883c:	93407c40 	sxtw	x0, w2
    40008840:	91007000 	add	x0, x0, #0x1c
    40008844:	eb05001f 	cmp	x0, x5
    40008848:	54ffff49 	b.ls	40008830 <_dtoa_r+0x230>  // b.plast
    4000884c:	b9006a61 	str	w1, [x19, #104]
    40008850:	aa1303e0 	mov	x0, x19
    40008854:	291193e7 	stp	w7, w4, [sp, #140]
    40008858:	b900a3e6 	str	w6, [sp, #160]
    4000885c:	94000531 	bl	40009d20 <_Balloc>
    40008860:	295193e7 	ldp	w7, w4, [sp, #140]
    40008864:	aa0003f7 	mov	x23, x0
    40008868:	b940a3e6 	ldr	w6, [sp, #160]
    4000886c:	b40076e0 	cbz	x0, 40009748 <_dtoa_r+0x1148>
    40008870:	71003adf 	cmp	w22, #0xe
    40008874:	f9003277 	str	x23, [x19, #96]
    40008878:	1a9f87e0 	cset	w0, ls  // ls = plast
    4000887c:	2a1603e3 	mov	w3, w22
    40008880:	6a190000 	ands	w0, w0, w25
    40008884:	54000aa0 	b.eq	400089d8 <_dtoa_r+0x3d8>  // b.none
    40008888:	b9407be5 	ldr	w5, [sp, #120]
    4000888c:	710000bf 	cmp	w5, #0x0
    40008890:	5400316d 	b.le	40008ebc <_dtoa_r+0x8bc>
    40008894:	92400ca2 	and	x2, x5, #0xf
    40008898:	d00000c1 	adrp	x1, 40022000 <__pow_log_data+0xcc8>
    4000889c:	913be021 	add	x1, x1, #0xef8
    400088a0:	13047ca0 	asr	w0, w5, #4
    400088a4:	fc627820 	ldr	d0, [x1, x2, lsl #3]
    400088a8:	36404385 	tbz	w5, #8, 40009118 <_dtoa_r+0xb18>
    400088ac:	d00000c1 	adrp	x1, 40022000 <__pow_log_data+0xcc8>
    400088b0:	12000c00 	and	w0, w0, #0xf
    400088b4:	52800062 	mov	w2, #0x3                   	// #3
    400088b8:	fd477821 	ldr	d1, [x1, #3824]
    400088bc:	1e611921 	fdiv	d1, d9, d1
    400088c0:	34000160 	cbz	w0, 400088ec <_dtoa_r+0x2ec>
    400088c4:	d00000c1 	adrp	x1, 40022000 <__pow_log_data+0xcc8>
    400088c8:	913b4021 	add	x1, x1, #0xed0
    400088cc:	d503201f 	nop
    400088d0:	36000080 	tbz	w0, #0, 400088e0 <_dtoa_r+0x2e0>
    400088d4:	fd400022 	ldr	d2, [x1]
    400088d8:	11000442 	add	w2, w2, #0x1
    400088dc:	1e620800 	fmul	d0, d0, d2
    400088e0:	13017c00 	asr	w0, w0, #1
    400088e4:	91002021 	add	x1, x1, #0x8
    400088e8:	35ffff40 	cbnz	w0, 400088d0 <_dtoa_r+0x2d0>
    400088ec:	1e601821 	fdiv	d1, d1, d0
    400088f0:	b9409be0 	ldr	w0, [sp, #152]
    400088f4:	34000080 	cbz	w0, 40008904 <_dtoa_r+0x304>
    400088f8:	1e6e1000 	fmov	d0, #1.000000000000000000e+00
    400088fc:	1e602030 	fcmpe	d1, d0
    40008900:	54005344 	b.mi	40009368 <_dtoa_r+0xd68>  // b.first
    40008904:	1e620042 	scvtf	d2, w2
    40008908:	1e639000 	fmov	d0, #7.000000000000000000e+00
    4000890c:	52bf9802 	mov	w2, #0xfcc00000            	// #-54525952
    40008910:	1f410040 	fmadd	d0, d2, d1, d0
    40008914:	9e660000 	fmov	x0, d0
    40008918:	d360fc01 	lsr	x1, x0, #32
    4000891c:	0b020021 	add	w1, w1, w2
    40008920:	b3607c20 	bfi	x0, x1, #32, #32
    40008924:	340014d6 	cbz	w22, 40008bbc <_dtoa_r+0x5bc>
    40008928:	b9407be8 	ldr	w8, [sp, #120]
    4000892c:	2a1603e5 	mov	w5, w22
    40008930:	1e780021 	fcvtzs	w1, d1
    40008934:	510004aa 	sub	w10, w5, #0x1
    40008938:	d00000c9 	adrp	x9, 40022000 <__pow_log_data+0xcc8>
    4000893c:	9e670002 	fmov	d2, x0
    40008940:	913be129 	add	x9, x9, #0xef8
    40008944:	2a0a03e0 	mov	w0, w10
    40008948:	910006e2 	add	x2, x23, #0x1
    4000894c:	1e620020 	scvtf	d0, w1
    40008950:	fc60d923 	ldr	d3, [x9, w0, sxtw #3]
    40008954:	1100c020 	add	w0, w1, #0x30
    40008958:	b94083e1 	ldr	w1, [sp, #128]
    4000895c:	12001c00 	and	w0, w0, #0xff
    40008960:	1e603821 	fsub	d1, d1, d0
    40008964:	34003e61 	cbz	w1, 40009130 <_dtoa_r+0xb30>
    40008968:	1e6c1000 	fmov	d0, #5.000000000000000000e-01
    4000896c:	390002e0 	strb	w0, [x23]
    40008970:	1e631800 	fdiv	d0, d0, d3
    40008974:	1e623800 	fsub	d0, d0, d2
    40008978:	1e612010 	fcmpe	d0, d1
    4000897c:	540044cc 	b.gt	40009214 <_dtoa_r+0xc14>
    40008980:	aa0203e0 	mov	x0, x2
    40008984:	1e6e1004 	fmov	d4, #1.000000000000000000e+00
    40008988:	52800022 	mov	w2, #0x1                   	// #1
    4000898c:	1e649003 	fmov	d3, #1.000000000000000000e+01
    40008990:	4b000042 	sub	w2, w2, w0
    40008994:	1400000a 	b	400089bc <_dtoa_r+0x3bc>
    40008998:	1e630821 	fmul	d1, d1, d3
    4000899c:	1e630800 	fmul	d0, d0, d3
    400089a0:	1e780021 	fcvtzs	w1, d1
    400089a4:	1e620022 	scvtf	d2, w1
    400089a8:	1100c021 	add	w1, w1, #0x30
    400089ac:	38001401 	strb	w1, [x0], #1
    400089b0:	1e623821 	fsub	d1, d1, d2
    400089b4:	1e602030 	fcmpe	d1, d0
    400089b8:	54005f24 	b.mi	4000959c <_dtoa_r+0xf9c>  // b.first
    400089bc:	1e613882 	fsub	d2, d4, d1
    400089c0:	1e602050 	fcmpe	d2, d0
    400089c4:	54003e84 	b.mi	40009194 <_dtoa_r+0xb94>  // b.first
    400089c8:	0b000041 	add	w1, w2, w0
    400089cc:	6b05003f 	cmp	w1, w5
    400089d0:	54fffe4b 	b.lt	40008998 <_dtoa_r+0x398>  // b.tstop
    400089d4:	9e66013a 	fmov	x26, d9
    400089d8:	b940bfe0 	ldr	w0, [sp, #188]
    400089dc:	b9407be1 	ldr	w1, [sp, #120]
    400089e0:	7100001f 	cmp	w0, #0x0
    400089e4:	7a4ea820 	ccmp	w1, #0xe, #0x0, ge  // ge = tcont
    400089e8:	540029ed 	b.le	40008f24 <_dtoa_r+0x924>
    400089ec:	b94083e1 	ldr	w1, [sp, #128]
    400089f0:	34000fa1 	cbz	w1, 40008be4 <_dtoa_r+0x5e4>
    400089f4:	710006bf 	cmp	w21, #0x1
    400089f8:	54004dcd 	b.le	400093b0 <_dtoa_r+0xdb0>
    400089fc:	510006c3 	sub	w3, w22, #0x1
    40008a00:	6b03037f 	cmp	w27, w3
    40008a04:	540045ea 	b.ge	400092c0 <_dtoa_r+0xcc0>  // b.tcont
    40008a08:	4b1b0060 	sub	w0, w3, w27
    40008a0c:	2a0303fb 	mov	w27, w3
    40008a10:	0b000084 	add	w4, w4, w0
    40008a14:	52800003 	mov	w3, #0x0                   	// #0
    40008a18:	4b1600e0 	sub	w0, w7, w22
    40008a1c:	b9008fe0 	str	w0, [sp, #140]
    40008a20:	37f80096 	tbnz	w22, #31, 40008a30 <_dtoa_r+0x430>
    40008a24:	0b1600c6 	add	w6, w6, w22
    40008a28:	b9008fe7 	str	w7, [sp, #140]
    40008a2c:	0b1600e7 	add	w7, w7, w22
    40008a30:	aa1303e0 	mov	x0, x19
    40008a34:	52800021 	mov	w1, #0x1                   	// #1
    40008a38:	b90093e7 	str	w7, [sp, #144]
    40008a3c:	29140fe4 	stp	w4, w3, [sp, #160]
    40008a40:	b900afe6 	str	w6, [sp, #172]
    40008a44:	940005b7 	bl	4000a120 <__i2b>
    40008a48:	b94093e7 	ldr	w7, [sp, #144]
    40008a4c:	aa0003f9 	mov	x25, x0
    40008a50:	29540fe4 	ldp	w4, w3, [sp, #160]
    40008a54:	b940afe6 	ldr	w6, [sp, #172]
    40008a58:	14000066 	b	40008bf0 <_dtoa_r+0x5f0>
    40008a5c:	12007816 	and	w22, w0, #0x7fffffff
    40008a60:	52800020 	mov	w0, #0x1                   	// #1
    40008a64:	120c2ac1 	and	w1, w22, #0x7ff00000
    40008a68:	b9000280 	str	w0, [x20]
    40008a6c:	b3607eda 	bfi	x26, x22, #32, #32
    40008a70:	52affe00 	mov	w0, #0x7ff00000            	// #2146435072
    40008a74:	9e670349 	fmov	d9, x26
    40008a78:	6b00003f 	cmp	w1, w0
    40008a7c:	54ffe081 	b.ne	4000868c <_dtoa_r+0x8c>  // b.any
    40008a80:	f9403be1 	ldr	x1, [sp, #112]
    40008a84:	5284e1e0 	mov	w0, #0x270f                	// #9999
    40008a88:	b9000020 	str	w0, [x1]
    40008a8c:	9e660120 	fmov	x0, d9
    40008a90:	f240cc1f 	tst	x0, #0xfffffffffffff
    40008a94:	540001e1 	b.ne	40008ad0 <_dtoa_r+0x4d0>  // b.any
    40008a98:	d00000d6 	adrp	x22, 40022000 <__pow_log_data+0xcc8>
    40008a9c:	b4004b58 	cbz	x24, 40009404 <_dtoa_r+0xe04>
    40008aa0:	d00000c0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    40008aa4:	9136c2d6 	add	x22, x22, #0xdb0
    40008aa8:	9136e000 	add	x0, x0, #0xdb8
    40008aac:	17ffff02 	b	400086b4 <_dtoa_r+0xb4>
    40008ab0:	9e660122 	fmov	x2, d9
    40008ab4:	b940bbe3 	ldr	w3, [sp, #184]
    40008ab8:	510ffc00 	sub	w0, w0, #0x3ff
    40008abc:	b900a7ff 	str	wzr, [sp, #164]
    40008ac0:	d360cc41 	ubfx	x1, x2, #32, #20
    40008ac4:	320c2421 	orr	w1, w1, #0x3ff00000
    40008ac8:	b3607c22 	bfi	x2, x1, #32, #32
    40008acc:	17ffff21 	b	40008750 <_dtoa_r+0x150>
    40008ad0:	d00000d6 	adrp	x22, 40022000 <__pow_log_data+0xcc8>
    40008ad4:	b40049d8 	cbz	x24, 4000940c <_dtoa_r+0xe0c>
    40008ad8:	d00000c0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    40008adc:	913702d6 	add	x22, x22, #0xdc0
    40008ae0:	91370c00 	add	x0, x0, #0xdc3
    40008ae4:	17fffef4 	b	400086b4 <_dtoa_r+0xb4>
    40008ae8:	71000ebf 	cmp	w21, #0x3
    40008aec:	54005f81 	b.ne	400096dc <_dtoa_r+0x10dc>  // b.any
    40008af0:	b9407be0 	ldr	w0, [sp, #120]
    40008af4:	0b000380 	add	w0, w28, w0
    40008af8:	b900abe0 	str	w0, [sp, #168]
    40008afc:	11000416 	add	w22, w0, #0x1
    40008b00:	710002df 	cmp	w22, #0x0
    40008b04:	1a9fc6c0 	csinc	w0, w22, wzr, gt
    40008b08:	17ffff43 	b	40008814 <_dtoa_r+0x214>
    40008b0c:	52800015 	mov	w21, #0x0                   	// #0
    40008b10:	12800016 	mov	w22, #0xffffffff            	// #-1
    40008b14:	5280001c 	mov	w28, #0x0                   	// #0
    40008b18:	b90083f9 	str	w25, [sp, #128]
    40008b1c:	52800001 	mov	w1, #0x0                   	// #0
    40008b20:	b9006a7f 	str	wzr, [x19, #104]
    40008b24:	b900abf6 	str	w22, [sp, #168]
    40008b28:	17ffff4a 	b	40008850 <_dtoa_r+0x250>
    40008b2c:	52800021 	mov	w1, #0x1                   	// #1
    40008b30:	b9009be1 	str	w1, [sp, #152]
    40008b34:	52800007 	mov	w7, #0x0                   	// #0
    40008b38:	37f800e6 	tbnz	w6, #31, 40008b54 <_dtoa_r+0x554>
    40008b3c:	36ffe404 	tbz	w4, #31, 400087bc <_dtoa_r+0x1bc>
    40008b40:	4b0400e7 	sub	w7, w7, w4
    40008b44:	4b0403fb 	neg	w27, w4
    40008b48:	b9007be4 	str	w4, [sp, #120]
    40008b4c:	52800004 	mov	w4, #0x0                   	// #0
    40008b50:	17ffff1e 	b	400087c8 <_dtoa_r+0x1c8>
    40008b54:	52800027 	mov	w7, #0x1                   	// #1
    40008b58:	52800006 	mov	w6, #0x0                   	// #0
    40008b5c:	4b0000e7 	sub	w7, w7, w0
    40008b60:	17fffff7 	b	40008b3c <_dtoa_r+0x53c>
    40008b64:	1e620081 	scvtf	d1, w4
    40008b68:	1e602020 	fcmp	d1, d0
    40008b6c:	1a9f07e1 	cset	w1, ne  // ne = any
    40008b70:	4b010084 	sub	w4, w4, w1
    40008b74:	17ffff06 	b	4000878c <_dtoa_r+0x18c>
    40008b78:	d00000d6 	adrp	x22, 40022000 <__pow_log_data+0xcc8>
    40008b7c:	913562d6 	add	x22, x22, #0xd58
    40008b80:	17fffece 	b	400086b8 <_dtoa_r+0xb8>
    40008b84:	51000484 	sub	w4, w4, #0x1
    40008b88:	b9009bff 	str	wzr, [sp, #152]
    40008b8c:	17ffffea 	b	40008b34 <_dtoa_r+0x534>
    40008b90:	4b0203e2 	neg	w2, w2
    40008b94:	1ac22000 	lsl	w0, w0, w2
    40008b98:	17fffee5 	b	4000872c <_dtoa_r+0x12c>
    40008b9c:	1e620042 	scvtf	d2, w2
    40008ba0:	1e639000 	fmov	d0, #7.000000000000000000e+00
    40008ba4:	52bf9802 	mov	w2, #0xfcc00000            	// #-54525952
    40008ba8:	1f420020 	fmadd	d0, d1, d2, d0
    40008bac:	9e660000 	fmov	x0, d0
    40008bb0:	d360fc01 	lsr	x1, x0, #32
    40008bb4:	0b020021 	add	w1, w1, w2
    40008bb8:	b3607c20 	bfi	x0, x1, #32, #32
    40008bbc:	1e629002 	fmov	d2, #5.000000000000000000e+00
    40008bc0:	9e670000 	fmov	d0, x0
    40008bc4:	1e623821 	fsub	d1, d1, d2
    40008bc8:	1e602030 	fcmpe	d1, d0
    40008bcc:	5400416c 	b.gt	400093f8 <_dtoa_r+0xdf8>
    40008bd0:	1e614000 	fneg	d0, d0
    40008bd4:	1e602030 	fcmpe	d1, d0
    40008bd8:	54003464 	b.mi	40009264 <_dtoa_r+0xc64>  // b.first
    40008bdc:	9e66013a 	fmov	x26, d9
    40008be0:	17ffff7e 	b	400089d8 <_dtoa_r+0x3d8>
    40008be4:	2a1b03e3 	mov	w3, w27
    40008be8:	d2800019 	mov	x25, #0x0                   	// #0
    40008bec:	b9008fe7 	str	w7, [sp, #140]
    40008bf0:	b9408fe1 	ldr	w1, [sp, #140]
    40008bf4:	7100003f 	cmp	w1, #0x0
    40008bf8:	7a40c8c4 	ccmp	w6, #0x0, #0x4, gt
    40008bfc:	540000ed 	b.le	40008c18 <_dtoa_r+0x618>
    40008c00:	6b06003f 	cmp	w1, w6
    40008c04:	1a86d020 	csel	w0, w1, w6, le
    40008c08:	4b0000e7 	sub	w7, w7, w0
    40008c0c:	4b0000c6 	sub	w6, w6, w0
    40008c10:	4b000021 	sub	w1, w1, w0
    40008c14:	b9008fe1 	str	w1, [sp, #140]
    40008c18:	340000fb 	cbz	w27, 40008c34 <_dtoa_r+0x634>
    40008c1c:	b94083e0 	ldr	w0, [sp, #128]
    40008c20:	34003d80 	cbz	w0, 400093d0 <_dtoa_r+0xdd0>
    40008c24:	7100007f 	cmp	w3, #0x0
    40008c28:	5400324c 	b.gt	40009270 <_dtoa_r+0xc70>
    40008c2c:	6b030362 	subs	w2, w27, w3
    40008c30:	540034c1 	b.ne	400092c8 <_dtoa_r+0xcc8>  // b.any
    40008c34:	aa1303e0 	mov	x0, x19
    40008c38:	52800021 	mov	w1, #0x1                   	// #1
    40008c3c:	b90093e7 	str	w7, [sp, #144]
    40008c40:	29141be4 	stp	w4, w6, [sp, #160]
    40008c44:	94000537 	bl	4000a120 <__i2b>
    40008c48:	29541be4 	ldp	w4, w6, [sp, #160]
    40008c4c:	aa0003fb 	mov	x27, x0
    40008c50:	b94093e7 	ldr	w7, [sp, #144]
    40008c54:	7100009f 	cmp	w4, #0x0
    40008c58:	5400184c 	b.gt	40008f60 <_dtoa_r+0x960>
    40008c5c:	b90093ff 	str	wzr, [sp, #144]
    40008c60:	710006bf 	cmp	w21, #0x1
    40008c64:	5400376d 	b.le	40009350 <_dtoa_r+0xd50>
    40008c68:	52800020 	mov	w0, #0x1                   	// #1
    40008c6c:	35001924 	cbnz	w4, 40008f90 <_dtoa_r+0x990>
    40008c70:	0b060000 	add	w0, w0, w6
    40008c74:	72001000 	ands	w0, w0, #0x1f
    40008c78:	540011e0 	b.eq	40008eb4 <_dtoa_r+0x8b4>  // b.none
    40008c7c:	52800401 	mov	w1, #0x20                  	// #32
    40008c80:	4b000021 	sub	w1, w1, w0
    40008c84:	7100103f 	cmp	w1, #0x4
    40008c88:	5400522d 	b.le	400096cc <_dtoa_r+0x10cc>
    40008c8c:	52800381 	mov	w1, #0x1c                  	// #28
    40008c90:	4b000020 	sub	w0, w1, w0
    40008c94:	b9408fe1 	ldr	w1, [sp, #140]
    40008c98:	0b0000e7 	add	w7, w7, w0
    40008c9c:	0b0000c6 	add	w6, w6, w0
    40008ca0:	0b000021 	add	w1, w1, w0
    40008ca4:	b9008fe1 	str	w1, [sp, #140]
    40008ca8:	710000ff 	cmp	w7, #0x0
    40008cac:	5400010d 	b.le	40008ccc <_dtoa_r+0x6cc>
    40008cb0:	aa1403e1 	mov	x1, x20
    40008cb4:	2a0703e2 	mov	w2, w7
    40008cb8:	aa1303e0 	mov	x0, x19
    40008cbc:	b900a3e6 	str	w6, [sp, #160]
    40008cc0:	9400060c 	bl	4000a4f0 <__lshift>
    40008cc4:	aa0003f4 	mov	x20, x0
    40008cc8:	b940a3e6 	ldr	w6, [sp, #160]
    40008ccc:	710000df 	cmp	w6, #0x0
    40008cd0:	540000cd 	b.le	40008ce8 <_dtoa_r+0x6e8>
    40008cd4:	aa1b03e1 	mov	x1, x27
    40008cd8:	2a0603e2 	mov	w2, w6
    40008cdc:	aa1303e0 	mov	x0, x19
    40008ce0:	94000604 	bl	4000a4f0 <__lshift>
    40008ce4:	aa0003fb 	mov	x27, x0
    40008ce8:	b9409be0 	ldr	w0, [sp, #152]
    40008cec:	71000abf 	cmp	w21, #0x2
    40008cf0:	1a9fd7e4 	cset	w4, gt
    40008cf4:	35001680 	cbnz	w0, 40008fc4 <_dtoa_r+0x9c4>
    40008cf8:	710002df 	cmp	w22, #0x0
    40008cfc:	7a40d884 	ccmp	w4, #0x0, #0x4, le
    40008d00:	540002a0 	b.eq	40008d54 <_dtoa_r+0x754>  // b.none
    40008d04:	340025f6 	cbz	w22, 400091c0 <_dtoa_r+0xbc0>
    40008d08:	2a3c03f5 	mvn	w21, w28
    40008d0c:	aa1703f6 	mov	x22, x23
    40008d10:	aa1b03e1 	mov	x1, x27
    40008d14:	110006b5 	add	w21, w21, #0x1
    40008d18:	aa1303e0 	mov	x0, x19
    40008d1c:	94000425 	bl	40009db0 <_Bfree>
    40008d20:	b4000099 	cbz	x25, 40008d30 <_dtoa_r+0x730>
    40008d24:	aa1903e1 	mov	x1, x25
    40008d28:	aa1303e0 	mov	x0, x19
    40008d2c:	94000421 	bl	40009db0 <_Bfree>
    40008d30:	aa1303e0 	mov	x0, x19
    40008d34:	aa1403e1 	mov	x1, x20
    40008d38:	9400041e 	bl	40009db0 <_Bfree>
    40008d3c:	390002ff 	strb	wzr, [x23]
    40008d40:	f9403be0 	ldr	x0, [sp, #112]
    40008d44:	b9000015 	str	w21, [x0]
    40008d48:	b4ffcb98 	cbz	x24, 400086b8 <_dtoa_r+0xb8>
    40008d4c:	f9000317 	str	x23, [x24]
    40008d50:	17fffe5a 	b	400086b8 <_dtoa_r+0xb8>
    40008d54:	b94083e0 	ldr	w0, [sp, #128]
    40008d58:	34002660 	cbz	w0, 40009224 <_dtoa_r+0xc24>
    40008d5c:	b9408fe0 	ldr	w0, [sp, #140]
    40008d60:	7100001f 	cmp	w0, #0x0
    40008d64:	540000cd 	b.le	40008d7c <_dtoa_r+0x77c>
    40008d68:	2a0003e2 	mov	w2, w0
    40008d6c:	aa1903e1 	mov	x1, x25
    40008d70:	aa1303e0 	mov	x0, x19
    40008d74:	940005df 	bl	4000a4f0 <__lshift>
    40008d78:	aa0003f9 	mov	x25, x0
    40008d7c:	b94093e0 	ldr	w0, [sp, #144]
    40008d80:	aa1903fc 	mov	x28, x25
    40008d84:	35003ea0 	cbnz	w0, 40009558 <_dtoa_r+0xf58>
    40008d88:	510006c0 	sub	w0, w22, #0x1
    40008d8c:	12000341 	and	w1, w26, #0x1
    40008d90:	91000400 	add	x0, x0, #0x1
    40008d94:	f90043f7 	str	x23, [sp, #128]
    40008d98:	8b0002e0 	add	x0, x23, x0
    40008d9c:	b9008fe1 	str	w1, [sp, #140]
    40008da0:	f9004fe0 	str	x0, [sp, #152]
    40008da4:	d503201f 	nop
    40008da8:	aa1b03e1 	mov	x1, x27
    40008dac:	aa1403e0 	mov	x0, x20
    40008db0:	97fffdac 	bl	40008460 <quorem>
    40008db4:	2a0003fa 	mov	w26, w0
    40008db8:	aa1903e1 	mov	x1, x25
    40008dbc:	aa1403e0 	mov	x0, x20
    40008dc0:	b900a7fa 	str	w26, [sp, #164]
    40008dc4:	94000627 	bl	4000a660 <__mcmp>
    40008dc8:	aa1b03e1 	mov	x1, x27
    40008dcc:	aa1c03e2 	mov	x2, x28
    40008dd0:	2a0003f6 	mov	w22, w0
    40008dd4:	aa1303e0 	mov	x0, x19
    40008dd8:	94000636 	bl	4000a6b0 <__mdiff>
    40008ddc:	aa0003e1 	mov	x1, x0
    40008de0:	1100c343 	add	w3, w26, #0x30
    40008de4:	aa0003fa 	mov	x26, x0
    40008de8:	b9401000 	ldr	w0, [x0, #16]
    40008dec:	b900a3e3 	str	w3, [sp, #160]
    40008df0:	35002920 	cbnz	w0, 40009314 <_dtoa_r+0xd14>
    40008df4:	aa1403e0 	mov	x0, x20
    40008df8:	9400061a 	bl	4000a660 <__mcmp>
    40008dfc:	2a0003e2 	mov	w2, w0
    40008e00:	aa1a03e1 	mov	x1, x26
    40008e04:	aa1303e0 	mov	x0, x19
    40008e08:	b90093e2 	str	w2, [sp, #144]
    40008e0c:	940003e9 	bl	40009db0 <_Bfree>
    40008e10:	29518be1 	ldp	w1, w2, [sp, #140]
    40008e14:	b940a3e3 	ldr	w3, [sp, #160]
    40008e18:	2a150040 	orr	w0, w2, w21
    40008e1c:	2a000020 	orr	w0, w1, w0
    40008e20:	340040c0 	cbz	w0, 40009638 <_dtoa_r+0x1038>
    40008e24:	f94043e0 	ldr	x0, [sp, #128]
    40008e28:	91000404 	add	x4, x0, #0x1
    40008e2c:	aa0403fa 	mov	x26, x4
    40008e30:	37f83616 	tbnz	w22, #31, 400094f0 <_dtoa_r+0xef0>
    40008e34:	b9408fe0 	ldr	w0, [sp, #140]
    40008e38:	2a1502d6 	orr	w22, w22, w21
    40008e3c:	2a160016 	orr	w22, w0, w22
    40008e40:	34003596 	cbz	w22, 400094f0 <_dtoa_r+0xef0>
    40008e44:	7100005f 	cmp	w2, #0x0
    40008e48:	54003cac 	b.gt	400095dc <_dtoa_r+0xfdc>
    40008e4c:	f9404fe0 	ldr	x0, [sp, #152]
    40008e50:	381ff083 	sturb	w3, [x4, #-1]
    40008e54:	eb04001f 	cmp	x0, x4
    40008e58:	54003ca0 	b.eq	400095ec <_dtoa_r+0xfec>  // b.none
    40008e5c:	aa1403e1 	mov	x1, x20
    40008e60:	52800003 	mov	w3, #0x0                   	// #0
    40008e64:	52800142 	mov	w2, #0xa                   	// #10
    40008e68:	aa1303e0 	mov	x0, x19
    40008e6c:	940003d9 	bl	40009dd0 <__multadd>
    40008e70:	aa0003f4 	mov	x20, x0
    40008e74:	aa1903e1 	mov	x1, x25
    40008e78:	aa1303e0 	mov	x0, x19
    40008e7c:	52800003 	mov	w3, #0x0                   	// #0
    40008e80:	52800142 	mov	w2, #0xa                   	// #10
    40008e84:	eb1c033f 	cmp	x25, x28
    40008e88:	54002540 	b.eq	40009330 <_dtoa_r+0xd30>  // b.none
    40008e8c:	940003d1 	bl	40009dd0 <__multadd>
    40008e90:	aa0003f9 	mov	x25, x0
    40008e94:	aa1c03e1 	mov	x1, x28
    40008e98:	aa1303e0 	mov	x0, x19
    40008e9c:	52800003 	mov	w3, #0x0                   	// #0
    40008ea0:	52800142 	mov	w2, #0xa                   	// #10
    40008ea4:	940003cb 	bl	40009dd0 <__multadd>
    40008ea8:	aa0003fc 	mov	x28, x0
    40008eac:	f90043fa 	str	x26, [sp, #128]
    40008eb0:	17ffffbe 	b	40008da8 <_dtoa_r+0x7a8>
    40008eb4:	52800380 	mov	w0, #0x1c                  	// #28
    40008eb8:	17ffff77 	b	40008c94 <_dtoa_r+0x694>
    40008ebc:	54001ba0 	b.eq	40009230 <_dtoa_r+0xc30>  // b.none
    40008ec0:	b9407be1 	ldr	w1, [sp, #120]
    40008ec4:	d00000c2 	adrp	x2, 40022000 <__pow_log_data+0xcc8>
    40008ec8:	913be042 	add	x2, x2, #0xef8
    40008ecc:	4b0103e1 	neg	w1, w1
    40008ed0:	92400c25 	and	x5, x1, #0xf
    40008ed4:	13047c21 	asr	w1, w1, #4
    40008ed8:	fc657842 	ldr	d2, [x2, x5, lsl #3]
    40008edc:	1e620922 	fmul	d2, d9, d2
    40008ee0:	34003f01 	cbz	w1, 400096c0 <_dtoa_r+0x10c0>
    40008ee4:	1e604041 	fmov	d1, d2
    40008ee8:	d00000c5 	adrp	x5, 40022000 <__pow_log_data+0xcc8>
    40008eec:	913b40a5 	add	x5, x5, #0xed0
    40008ef0:	52800008 	mov	w8, #0x0                   	// #0
    40008ef4:	52800042 	mov	w2, #0x2                   	// #2
    40008ef8:	360000a1 	tbz	w1, #0, 40008f0c <_dtoa_r+0x90c>
    40008efc:	fd4000a0 	ldr	d0, [x5]
    40008f00:	11000442 	add	w2, w2, #0x1
    40008f04:	2a0003e8 	mov	w8, w0
    40008f08:	1e600821 	fmul	d1, d1, d0
    40008f0c:	13017c21 	asr	w1, w1, #1
    40008f10:	910020a5 	add	x5, x5, #0x8
    40008f14:	35ffff21 	cbnz	w1, 40008ef8 <_dtoa_r+0x8f8>
    40008f18:	7100011f 	cmp	w8, #0x0
    40008f1c:	1e621c21 	fcsel	d1, d1, d2, ne  // ne = any
    40008f20:	17fffe74 	b	400088f0 <_dtoa_r+0x2f0>
    40008f24:	d00000c0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    40008f28:	913be000 	add	x0, x0, #0xef8
    40008f2c:	7100039f 	cmp	w28, #0x0
    40008f30:	7a40bac0 	ccmp	w22, #0x0, #0x0, lt  // lt = tstop
    40008f34:	fc61d801 	ldr	d1, [x0, w1, sxtw #3]
    40008f38:	540027ac 	b.gt	4000942c <_dtoa_r+0xe2c>
    40008f3c:	35001956 	cbnz	w22, 40009264 <_dtoa_r+0xc64>
    40008f40:	1e629000 	fmov	d0, #5.000000000000000000e+00
    40008f44:	d280001b 	mov	x27, #0x0                   	// #0
    40008f48:	d2800019 	mov	x25, #0x0                   	// #0
    40008f4c:	1e600821 	fmul	d1, d1, d0
    40008f50:	9e670340 	fmov	d0, x26
    40008f54:	1e602030 	fcmpe	d1, d0
    40008f58:	54ffed8a 	b.ge	40008d08 <_dtoa_r+0x708>  // b.tcont
    40008f5c:	140000a4 	b	400091ec <_dtoa_r+0xbec>
    40008f60:	aa0003e1 	mov	x1, x0
    40008f64:	2a0403e2 	mov	w2, w4
    40008f68:	aa1303e0 	mov	x0, x19
    40008f6c:	b90093e4 	str	w4, [sp, #144]
    40008f70:	29141be7 	stp	w7, w6, [sp, #160]
    40008f74:	94000513 	bl	4000a3c0 <__pow5mult>
    40008f78:	b94093e4 	ldr	w4, [sp, #144]
    40008f7c:	aa0003fb 	mov	x27, x0
    40008f80:	29541be7 	ldp	w7, w6, [sp, #160]
    40008f84:	710006bf 	cmp	w21, #0x1
    40008f88:	540015ad 	b.le	4000923c <_dtoa_r+0xc3c>
    40008f8c:	b90093ff 	str	wzr, [sp, #144]
    40008f90:	b9401760 	ldr	w0, [x27, #20]
    40008f94:	29141be7 	stp	w7, w6, [sp, #160]
    40008f98:	51000400 	sub	w0, w0, #0x1
    40008f9c:	8b20cb60 	add	x0, x27, w0, sxtw #2
    40008fa0:	b9401800 	ldr	w0, [x0, #24]
    40008fa4:	9400041f 	bl	4000a020 <__hi0bits>
    40008fa8:	52800401 	mov	w1, #0x20                  	// #32
    40008fac:	4b000020 	sub	w0, w1, w0
    40008fb0:	29541be7 	ldp	w7, w6, [sp, #160]
    40008fb4:	17ffff2f 	b	40008c70 <_dtoa_r+0x670>
    40008fb8:	52800020 	mov	w0, #0x1                   	// #1
    40008fbc:	b90083e0 	str	w0, [sp, #128]
    40008fc0:	17fffecc 	b	40008af0 <_dtoa_r+0x4f0>
    40008fc4:	aa1b03e1 	mov	x1, x27
    40008fc8:	aa1403e0 	mov	x0, x20
    40008fcc:	b900a3e4 	str	w4, [sp, #160]
    40008fd0:	940005a4 	bl	4000a660 <__mcmp>
    40008fd4:	b940a3e4 	ldr	w4, [sp, #160]
    40008fd8:	36ffe900 	tbz	w0, #31, 40008cf8 <_dtoa_r+0x6f8>
    40008fdc:	aa1403e1 	mov	x1, x20
    40008fe0:	aa1303e0 	mov	x0, x19
    40008fe4:	52800003 	mov	w3, #0x0                   	// #0
    40008fe8:	52800142 	mov	w2, #0xa                   	// #10
    40008fec:	b900a3e4 	str	w4, [sp, #160]
    40008ff0:	94000378 	bl	40009dd0 <__multadd>
    40008ff4:	aa0003f4 	mov	x20, x0
    40008ff8:	b9407be0 	ldr	w0, [sp, #120]
    40008ffc:	b940abe1 	ldr	w1, [sp, #168]
    40009000:	51000405 	sub	w5, w0, #0x1
    40009004:	b94083e0 	ldr	w0, [sp, #128]
    40009008:	b940a3e4 	ldr	w4, [sp, #160]
    4000900c:	7100003f 	cmp	w1, #0x0
    40009010:	1a9fc7f6 	cset	w22, le
    40009014:	0a160096 	and	w22, w4, w22
    40009018:	35003320 	cbnz	w0, 4000967c <_dtoa_r+0x107c>
    4000901c:	35003296 	cbnz	w22, 4000966c <_dtoa_r+0x106c>
    40009020:	b9407bf5 	ldr	w21, [sp, #120]
    40009024:	b940abf6 	ldr	w22, [sp, #168]
    40009028:	d280001a 	mov	x26, #0x0                   	// #0
    4000902c:	14000007 	b	40009048 <_dtoa_r+0xa48>
    40009030:	aa1403e1 	mov	x1, x20
    40009034:	aa1303e0 	mov	x0, x19
    40009038:	52800003 	mov	w3, #0x0                   	// #0
    4000903c:	52800142 	mov	w2, #0xa                   	// #10
    40009040:	94000364 	bl	40009dd0 <__multadd>
    40009044:	aa0003f4 	mov	x20, x0
    40009048:	aa1b03e1 	mov	x1, x27
    4000904c:	aa1403e0 	mov	x0, x20
    40009050:	97fffd04 	bl	40008460 <quorem>
    40009054:	1100c003 	add	w3, w0, #0x30
    40009058:	383a6ae3 	strb	w3, [x23, x26]
    4000905c:	9100075a 	add	x26, x26, #0x1
    40009060:	6b1a02df 	cmp	w22, w26
    40009064:	54fffe6c 	b.gt	40009030 <_dtoa_r+0xa30>
    40009068:	710002df 	cmp	w22, #0x0
    4000906c:	510006c4 	sub	w4, w22, #0x1
    40009070:	d2800020 	mov	x0, #0x1                   	// #1
    40009074:	9a84d404 	csinc	x4, x0, x4, le
    40009078:	8b0402e4 	add	x4, x23, x4
    4000907c:	d2800016 	mov	x22, #0x0                   	// #0
    40009080:	52800022 	mov	w2, #0x1                   	// #1
    40009084:	aa1403e1 	mov	x1, x20
    40009088:	aa1303e0 	mov	x0, x19
    4000908c:	f9003fe4 	str	x4, [sp, #120]
    40009090:	b90083e3 	str	w3, [sp, #128]
    40009094:	94000517 	bl	4000a4f0 <__lshift>
    40009098:	aa1b03e1 	mov	x1, x27
    4000909c:	aa0003f4 	mov	x20, x0
    400090a0:	94000570 	bl	4000a660 <__mcmp>
    400090a4:	7100001f 	cmp	w0, #0x0
    400090a8:	f9403fe4 	ldr	x4, [sp, #120]
    400090ac:	5400120d 	b.le	400092ec <_dtoa_r+0xcec>
    400090b0:	385ff081 	ldurb	w1, [x4, #-1]
    400090b4:	14000005 	b	400090c8 <_dtoa_r+0xac8>
    400090b8:	eb17001f 	cmp	x0, x23
    400090bc:	54001f60 	b.eq	400094a8 <_dtoa_r+0xea8>  // b.none
    400090c0:	385ff001 	ldurb	w1, [x0, #-1]
    400090c4:	aa0003e4 	mov	x4, x0
    400090c8:	d1000480 	sub	x0, x4, #0x1
    400090cc:	7100e43f 	cmp	w1, #0x39
    400090d0:	54ffff40 	b.eq	400090b8 <_dtoa_r+0xab8>  // b.none
    400090d4:	11000421 	add	w1, w1, #0x1
    400090d8:	39000001 	strb	w1, [x0]
    400090dc:	aa1b03e1 	mov	x1, x27
    400090e0:	aa1303e0 	mov	x0, x19
    400090e4:	f9003fe4 	str	x4, [sp, #120]
    400090e8:	94000332 	bl	40009db0 <_Bfree>
    400090ec:	f9403fe4 	ldr	x4, [sp, #120]
    400090f0:	b4001e59 	cbz	x25, 400094b8 <_dtoa_r+0xeb8>
    400090f4:	f10002df 	cmp	x22, #0x0
    400090f8:	fa5912c4 	ccmp	x22, x25, #0x4, ne  // ne = any
    400090fc:	54003200 	b.eq	4000973c <_dtoa_r+0x113c>  // b.none
    40009100:	aa1603e1 	mov	x1, x22
    40009104:	aa1303e0 	mov	x0, x19
    40009108:	aa1703f6 	mov	x22, x23
    4000910c:	aa0403f7 	mov	x23, x4
    40009110:	94000328 	bl	40009db0 <_Bfree>
    40009114:	17ffff04 	b	40008d24 <_dtoa_r+0x724>
    40009118:	1e604121 	fmov	d1, d9
    4000911c:	52800042 	mov	w2, #0x2                   	// #2
    40009120:	17fffde8 	b	400088c0 <_dtoa_r+0x2c0>
    40009124:	5280003c 	mov	w28, #0x1                   	// #1
    40009128:	2a1c03f6 	mov	w22, w28
    4000912c:	17fffe7c 	b	40008b1c <_dtoa_r+0x51c>
    40009130:	390002e0 	strb	w0, [x23]
    40009134:	1e630840 	fmul	d0, d2, d3
    40009138:	8b2542e0 	add	x0, x23, w5, uxtw
    4000913c:	1e649003 	fmov	d3, #1.000000000000000000e+01
    40009140:	710004bf 	cmp	w5, #0x1
    40009144:	54002b40 	b.eq	400096ac <_dtoa_r+0x10ac>  // b.none
    40009148:	1e630821 	fmul	d1, d1, d3
    4000914c:	1e780021 	fcvtzs	w1, d1
    40009150:	1e620022 	scvtf	d2, w1
    40009154:	1100c021 	add	w1, w1, #0x30
    40009158:	38001441 	strb	w1, [x2], #1
    4000915c:	1e623821 	fsub	d1, d1, d2
    40009160:	eb02001f 	cmp	x0, x2
    40009164:	54ffff21 	b.ne	40009148 <_dtoa_r+0xb48>  // b.any
    40009168:	1e6c1002 	fmov	d2, #5.000000000000000000e-01
    4000916c:	1e622803 	fadd	d3, d0, d2
    40009170:	1e632030 	fcmpe	d1, d3
    40009174:	5400010c 	b.gt	40009194 <_dtoa_r+0xb94>
    40009178:	1e603842 	fsub	d2, d2, d0
    4000917c:	1e622030 	fcmpe	d1, d2
    40009180:	54000424 	b.mi	40009204 <_dtoa_r+0xc04>  // b.first
    40009184:	9e66013a 	fmov	x26, d9
    40009188:	17fffe14 	b	400089d8 <_dtoa_r+0x3d8>
    4000918c:	eb0002ff 	cmp	x23, x0
    40009190:	540019a0 	b.eq	400094c4 <_dtoa_r+0xec4>  // b.none
    40009194:	aa0003e2 	mov	x2, x0
    40009198:	385ffc01 	ldrb	w1, [x0, #-1]!
    4000919c:	7100e43f 	cmp	w1, #0x39
    400091a0:	54ffff60 	b.eq	4000918c <_dtoa_r+0xb8c>  // b.none
    400091a4:	11000421 	add	w1, w1, #0x1
    400091a8:	12001c21 	and	w1, w1, #0xff
    400091ac:	aa1703f6 	mov	x22, x23
    400091b0:	11000515 	add	w21, w8, #0x1
    400091b4:	aa0203f7 	mov	x23, x2
    400091b8:	39000001 	strb	w1, [x0]
    400091bc:	17fffedd 	b	40008d30 <_dtoa_r+0x730>
    400091c0:	52800003 	mov	w3, #0x0                   	// #0
    400091c4:	528000a2 	mov	w2, #0x5                   	// #5
    400091c8:	aa1b03e1 	mov	x1, x27
    400091cc:	aa1303e0 	mov	x0, x19
    400091d0:	94000300 	bl	40009dd0 <__multadd>
    400091d4:	aa0003fb 	mov	x27, x0
    400091d8:	aa1b03e1 	mov	x1, x27
    400091dc:	aa1403e0 	mov	x0, x20
    400091e0:	94000520 	bl	4000a660 <__mcmp>
    400091e4:	7100001f 	cmp	w0, #0x0
    400091e8:	54ffd90d 	b.le	40008d08 <_dtoa_r+0x708>
    400091ec:	b9407be1 	ldr	w1, [sp, #120]
    400091f0:	aa1703f6 	mov	x22, x23
    400091f4:	52800620 	mov	w0, #0x31                  	// #49
    400091f8:	380016e0 	strb	w0, [x23], #1
    400091fc:	11000435 	add	w21, w1, #0x1
    40009200:	17fffec4 	b	40008d10 <_dtoa_r+0x710>
    40009204:	aa0003e2 	mov	x2, x0
    40009208:	385ffc01 	ldrb	w1, [x0, #-1]!
    4000920c:	7100c03f 	cmp	w1, #0x30
    40009210:	54ffffa0 	b.eq	40009204 <_dtoa_r+0xc04>  // b.none
    40009214:	aa1703f6 	mov	x22, x23
    40009218:	11000515 	add	w21, w8, #0x1
    4000921c:	aa0203f7 	mov	x23, x2
    40009220:	17fffec4 	b	40008d30 <_dtoa_r+0x730>
    40009224:	b9407be0 	ldr	w0, [sp, #120]
    40009228:	11000415 	add	w21, w0, #0x1
    4000922c:	17ffff7f 	b	40009028 <_dtoa_r+0xa28>
    40009230:	1e604121 	fmov	d1, d9
    40009234:	52800042 	mov	w2, #0x2                   	// #2
    40009238:	17fffdae 	b	400088f0 <_dtoa_r+0x2f0>
    4000923c:	f240cf5f 	tst	x26, #0xfffffffffffff
    40009240:	54ffea61 	b.ne	40008f8c <_dtoa_r+0x98c>  // b.any
    40009244:	d360ff40 	lsr	x0, x26, #32
    40009248:	f26c281f 	tst	x0, #0x7ff00000
    4000924c:	54ffea00 	b.eq	40008f8c <_dtoa_r+0x98c>  // b.none
    40009250:	52800020 	mov	w0, #0x1                   	// #1
    40009254:	110004e7 	add	w7, w7, #0x1
    40009258:	110004c6 	add	w6, w6, #0x1
    4000925c:	b90093e0 	str	w0, [sp, #144]
    40009260:	17fffe82 	b	40008c68 <_dtoa_r+0x668>
    40009264:	d280001b 	mov	x27, #0x0                   	// #0
    40009268:	d2800019 	mov	x25, #0x0                   	// #0
    4000926c:	17fffea7 	b	40008d08 <_dtoa_r+0x708>
    40009270:	2a0303e2 	mov	w2, w3
    40009274:	aa1903e1 	mov	x1, x25
    40009278:	aa1303e0 	mov	x0, x19
    4000927c:	b90093e3 	str	w3, [sp, #144]
    40009280:	291413e7 	stp	w7, w4, [sp, #160]
    40009284:	b900afe6 	str	w6, [sp, #172]
    40009288:	9400044e 	bl	4000a3c0 <__pow5mult>
    4000928c:	aa1403e2 	mov	x2, x20
    40009290:	aa0003f9 	mov	x25, x0
    40009294:	aa1903e1 	mov	x1, x25
    40009298:	aa1303e0 	mov	x0, x19
    4000929c:	940003cd 	bl	4000a1d0 <__multiply>
    400092a0:	aa1403e1 	mov	x1, x20
    400092a4:	aa0003f4 	mov	x20, x0
    400092a8:	aa1303e0 	mov	x0, x19
    400092ac:	940002c1 	bl	40009db0 <_Bfree>
    400092b0:	b94093e3 	ldr	w3, [sp, #144]
    400092b4:	295413e7 	ldp	w7, w4, [sp, #160]
    400092b8:	b940afe6 	ldr	w6, [sp, #172]
    400092bc:	17fffe5c 	b	40008c2c <_dtoa_r+0x62c>
    400092c0:	4b030363 	sub	w3, w27, w3
    400092c4:	17fffdd5 	b	40008a18 <_dtoa_r+0x418>
    400092c8:	aa1403e1 	mov	x1, x20
    400092cc:	aa1303e0 	mov	x0, x19
    400092d0:	b90093e7 	str	w7, [sp, #144]
    400092d4:	29141be4 	stp	w4, w6, [sp, #160]
    400092d8:	9400043a 	bl	4000a3c0 <__pow5mult>
    400092dc:	b94093e7 	ldr	w7, [sp, #144]
    400092e0:	aa0003f4 	mov	x20, x0
    400092e4:	29541be4 	ldp	w4, w6, [sp, #160]
    400092e8:	17fffe53 	b	40008c34 <_dtoa_r+0x634>
    400092ec:	54000061 	b.ne	400092f8 <_dtoa_r+0xcf8>  // b.any
    400092f0:	b94083e3 	ldr	w3, [sp, #128]
    400092f4:	3707ede3 	tbnz	w3, #0, 400090b0 <_dtoa_r+0xab0>
    400092f8:	aa0403e0 	mov	x0, x4
    400092fc:	d503201f 	nop
    40009300:	aa0003e4 	mov	x4, x0
    40009304:	385ffc01 	ldrb	w1, [x0, #-1]!
    40009308:	7100c03f 	cmp	w1, #0x30
    4000930c:	54ffffa0 	b.eq	40009300 <_dtoa_r+0xd00>  // b.none
    40009310:	17ffff73 	b	400090dc <_dtoa_r+0xadc>
    40009314:	52800022 	mov	w2, #0x1                   	// #1
    40009318:	aa1303e0 	mov	x0, x19
    4000931c:	b90093e2 	str	w2, [sp, #144]
    40009320:	940002a4 	bl	40009db0 <_Bfree>
    40009324:	b94093e2 	ldr	w2, [sp, #144]
    40009328:	b940a3e3 	ldr	w3, [sp, #160]
    4000932c:	17fffebe 	b	40008e24 <_dtoa_r+0x824>
    40009330:	940002a8 	bl	40009dd0 <__multadd>
    40009334:	aa0003f9 	mov	x25, x0
    40009338:	aa0003fc 	mov	x28, x0
    4000933c:	f90043fa 	str	x26, [sp, #128]
    40009340:	17fffe9a 	b	40008da8 <_dtoa_r+0x7a8>
    40009344:	52800020 	mov	w0, #0x1                   	// #1
    40009348:	b90083e0 	str	w0, [sp, #128]
    4000934c:	17fffd2d 	b	40008800 <_dtoa_r+0x200>
    40009350:	f240cf5f 	tst	x26, #0xfffffffffffff
    40009354:	54ffc8a1 	b.ne	40008c68 <_dtoa_r+0x668>  // b.any
    40009358:	d360ff40 	lsr	x0, x26, #32
    4000935c:	f26c281f 	tst	x0, #0x7ff00000
    40009360:	54ffc840 	b.eq	40008c68 <_dtoa_r+0x668>  // b.none
    40009364:	17ffffbb 	b	40009250 <_dtoa_r+0xc50>
    40009368:	34ffc1b6 	cbz	w22, 40008b9c <_dtoa_r+0x59c>
    4000936c:	b940abe5 	ldr	w5, [sp, #168]
    40009370:	710000bf 	cmp	w5, #0x0
    40009374:	54ffb30d 	b.le	400089d4 <_dtoa_r+0x3d4>
    40009378:	11000442 	add	w2, w2, #0x1
    4000937c:	1e649003 	fmov	d3, #1.000000000000000000e+01
    40009380:	1e639000 	fmov	d0, #7.000000000000000000e+00
    40009384:	b9407be0 	ldr	w0, [sp, #120]
    40009388:	1e620042 	scvtf	d2, w2
    4000938c:	1e630821 	fmul	d1, d1, d3
    40009390:	51000408 	sub	w8, w0, #0x1
    40009394:	52bf9809 	mov	w9, #0xfcc00000            	// #-54525952
    40009398:	1f420020 	fmadd	d0, d1, d2, d0
    4000939c:	9e660000 	fmov	x0, d0
    400093a0:	d360fc01 	lsr	x1, x0, #32
    400093a4:	0b090021 	add	w1, w1, w9
    400093a8:	b3607c20 	bfi	x0, x1, #32, #32
    400093ac:	17fffd61 	b	40008930 <_dtoa_r+0x330>
    400093b0:	b940a7e1 	ldr	w1, [sp, #164]
    400093b4:	340008e1 	cbz	w1, 400094d0 <_dtoa_r+0xed0>
    400093b8:	1110cc00 	add	w0, w0, #0x433
    400093bc:	2a1b03e3 	mov	w3, w27
    400093c0:	0b0000c6 	add	w6, w6, w0
    400093c4:	b9008fe7 	str	w7, [sp, #140]
    400093c8:	0b0000e7 	add	w7, w7, w0
    400093cc:	17fffd99 	b	40008a30 <_dtoa_r+0x430>
    400093d0:	aa1403e1 	mov	x1, x20
    400093d4:	2a1b03e2 	mov	w2, w27
    400093d8:	aa1303e0 	mov	x0, x19
    400093dc:	b90093e7 	str	w7, [sp, #144]
    400093e0:	29141be4 	stp	w4, w6, [sp, #160]
    400093e4:	940003f7 	bl	4000a3c0 <__pow5mult>
    400093e8:	b94093e7 	ldr	w7, [sp, #144]
    400093ec:	aa0003f4 	mov	x20, x0
    400093f0:	29541be4 	ldp	w4, w6, [sp, #160]
    400093f4:	17fffe10 	b	40008c34 <_dtoa_r+0x634>
    400093f8:	d280001b 	mov	x27, #0x0                   	// #0
    400093fc:	d2800019 	mov	x25, #0x0                   	// #0
    40009400:	17ffff7b 	b	400091ec <_dtoa_r+0xbec>
    40009404:	9136c2d6 	add	x22, x22, #0xdb0
    40009408:	17fffcac 	b	400086b8 <_dtoa_r+0xb8>
    4000940c:	913702d6 	add	x22, x22, #0xdc0
    40009410:	17fffcaa 	b	400086b8 <_dtoa_r+0xb8>
    40009414:	b9407be1 	ldr	w1, [sp, #120]
    40009418:	b00000c0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    4000941c:	913be000 	add	x0, x0, #0xef8
    40009420:	12800016 	mov	w22, #0xffffffff            	// #-1
    40009424:	2a1603e3 	mov	w3, w22
    40009428:	fc61d801 	ldr	d1, [x0, w1, sxtw #3]
    4000942c:	9e670340 	fmov	d0, x26
    40009430:	aa1703e1 	mov	x1, x23
    40009434:	1e611802 	fdiv	d2, d0, d1
    40009438:	1e780042 	fcvtzs	w2, d2
    4000943c:	1e620042 	scvtf	d2, w2
    40009440:	1100c040 	add	w0, w2, #0x30
    40009444:	38001420 	strb	w0, [x1], #1
    40009448:	1f418040 	fmsub	d0, d2, d1, d0
    4000944c:	710006df 	cmp	w22, #0x1
    40009450:	54000ae0 	b.eq	400095ac <_dtoa_r+0xfac>  // b.none
    40009454:	51000860 	sub	w0, w3, #0x2
    40009458:	1e649003 	fmov	d3, #1.000000000000000000e+01
    4000945c:	91000800 	add	x0, x0, #0x2
    40009460:	8b0002e0 	add	x0, x23, x0
    40009464:	14000009 	b	40009488 <_dtoa_r+0xe88>
    40009468:	1e611802 	fdiv	d2, d0, d1
    4000946c:	1e780042 	fcvtzs	w2, d2
    40009470:	1e620042 	scvtf	d2, w2
    40009474:	1100c043 	add	w3, w2, #0x30
    40009478:	38001423 	strb	w3, [x1], #1
    4000947c:	1f418040 	fmsub	d0, d2, d1, d0
    40009480:	eb00003f 	cmp	x1, x0
    40009484:	54000960 	b.eq	400095b0 <_dtoa_r+0xfb0>  // b.none
    40009488:	1e630800 	fmul	d0, d0, d3
    4000948c:	1e602008 	fcmp	d0, #0.0
    40009490:	54fffec1 	b.ne	40009468 <_dtoa_r+0xe68>  // b.any
    40009494:	b9407be0 	ldr	w0, [sp, #120]
    40009498:	aa1703f6 	mov	x22, x23
    4000949c:	aa0103f7 	mov	x23, x1
    400094a0:	11000415 	add	w21, w0, #0x1
    400094a4:	17fffe23 	b	40008d30 <_dtoa_r+0x730>
    400094a8:	52800620 	mov	w0, #0x31                  	// #49
    400094ac:	110006b5 	add	w21, w21, #0x1
    400094b0:	390002e0 	strb	w0, [x23]
    400094b4:	17ffff0a 	b	400090dc <_dtoa_r+0xadc>
    400094b8:	aa1703f6 	mov	x22, x23
    400094bc:	aa0403f7 	mov	x23, x4
    400094c0:	17fffe1c 	b	40008d30 <_dtoa_r+0x730>
    400094c4:	11000508 	add	w8, w8, #0x1
    400094c8:	52800621 	mov	w1, #0x31                  	// #49
    400094cc:	17ffff38 	b	400091ac <_dtoa_r+0xbac>
    400094d0:	b940bbe1 	ldr	w1, [sp, #184]
    400094d4:	528006c0 	mov	w0, #0x36                  	// #54
    400094d8:	2a1b03e3 	mov	w3, w27
    400094dc:	b9008fe7 	str	w7, [sp, #140]
    400094e0:	4b010000 	sub	w0, w0, w1
    400094e4:	0b0000c6 	add	w6, w6, w0
    400094e8:	0b0000e7 	add	w7, w7, w0
    400094ec:	17fffd51 	b	40008a30 <_dtoa_r+0x430>
    400094f0:	7100005f 	cmp	w2, #0x0
    400094f4:	5400024d 	b.le	4000953c <_dtoa_r+0xf3c>
    400094f8:	52800022 	mov	w2, #0x1                   	// #1
    400094fc:	aa1403e1 	mov	x1, x20
    40009500:	aa1303e0 	mov	x0, x19
    40009504:	b9008fe3 	str	w3, [sp, #140]
    40009508:	f9004be4 	str	x4, [sp, #144]
    4000950c:	940003f9 	bl	4000a4f0 <__lshift>
    40009510:	aa1b03e1 	mov	x1, x27
    40009514:	aa0003f4 	mov	x20, x0
    40009518:	94000452 	bl	4000a660 <__mcmp>
    4000951c:	7100001f 	cmp	w0, #0x0
    40009520:	b9408fe3 	ldr	w3, [sp, #140]
    40009524:	f9404be4 	ldr	x4, [sp, #144]
    40009528:	54000c6d 	b.le	400096b4 <_dtoa_r+0x10b4>
    4000952c:	7100e47f 	cmp	w3, #0x39
    40009530:	540006c0 	b.eq	40009608 <_dtoa_r+0x1008>  // b.none
    40009534:	b940a7e0 	ldr	w0, [sp, #164]
    40009538:	1100c403 	add	w3, w0, #0x31
    4000953c:	b9407be0 	ldr	w0, [sp, #120]
    40009540:	aa1903f6 	mov	x22, x25
    40009544:	aa1c03f9 	mov	x25, x28
    40009548:	11000415 	add	w21, w0, #0x1
    4000954c:	f94043e0 	ldr	x0, [sp, #128]
    40009550:	39000003 	strb	w3, [x0]
    40009554:	17fffee2 	b	400090dc <_dtoa_r+0xadc>
    40009558:	b9400b21 	ldr	w1, [x25, #8]
    4000955c:	aa1303e0 	mov	x0, x19
    40009560:	940001f0 	bl	40009d20 <_Balloc>
    40009564:	aa0003fc 	mov	x28, x0
    40009568:	b4000fe0 	cbz	x0, 40009764 <_dtoa_r+0x1164>
    4000956c:	b9801722 	ldrsw	x2, [x25, #20]
    40009570:	91004321 	add	x1, x25, #0x10
    40009574:	91004000 	add	x0, x0, #0x10
    40009578:	91000842 	add	x2, x2, #0x2
    4000957c:	d37ef442 	lsl	x2, x2, #2
    40009580:	97ffde90 	bl	40000fc0 <memcpy>
    40009584:	aa1c03e1 	mov	x1, x28
    40009588:	aa1303e0 	mov	x0, x19
    4000958c:	52800022 	mov	w2, #0x1                   	// #1
    40009590:	940003d8 	bl	4000a4f0 <__lshift>
    40009594:	aa0003fc 	mov	x28, x0
    40009598:	17fffdfc 	b	40008d88 <_dtoa_r+0x788>
    4000959c:	aa1703f6 	mov	x22, x23
    400095a0:	11000515 	add	w21, w8, #0x1
    400095a4:	aa0003f7 	mov	x23, x0
    400095a8:	17fffde2 	b	40008d30 <_dtoa_r+0x730>
    400095ac:	aa0103e0 	mov	x0, x1
    400095b0:	1e602800 	fadd	d0, d0, d0
    400095b4:	b9407be1 	ldr	w1, [sp, #120]
    400095b8:	11000435 	add	w21, w1, #0x1
    400095bc:	1e612010 	fcmpe	d0, d1
    400095c0:	5400038c 	b.gt	40009630 <_dtoa_r+0x1030>
    400095c4:	1e612000 	fcmp	d0, d1
    400095c8:	54000041 	b.ne	400095d0 <_dtoa_r+0xfd0>  // b.any
    400095cc:	37000322 	tbnz	w2, #0, 40009630 <_dtoa_r+0x1030>
    400095d0:	aa1703f6 	mov	x22, x23
    400095d4:	aa0003f7 	mov	x23, x0
    400095d8:	17fffdd6 	b	40008d30 <_dtoa_r+0x730>
    400095dc:	7100e47f 	cmp	w3, #0x39
    400095e0:	54000140 	b.eq	40009608 <_dtoa_r+0x1008>  // b.none
    400095e4:	11000463 	add	w3, w3, #0x1
    400095e8:	17ffffd5 	b	4000953c <_dtoa_r+0xf3c>
    400095ec:	b9407be0 	ldr	w0, [sp, #120]
    400095f0:	aa1903f6 	mov	x22, x25
    400095f4:	aa1c03f9 	mov	x25, x28
    400095f8:	11000415 	add	w21, w0, #0x1
    400095fc:	17fffea1 	b	40009080 <_dtoa_r+0xa80>
    40009600:	f94043e0 	ldr	x0, [sp, #128]
    40009604:	9100041a 	add	x26, x0, #0x1
    40009608:	f94043e2 	ldr	x2, [sp, #128]
    4000960c:	aa1903f6 	mov	x22, x25
    40009610:	b9407be0 	ldr	w0, [sp, #120]
    40009614:	aa1a03e4 	mov	x4, x26
    40009618:	aa1c03f9 	mov	x25, x28
    4000961c:	52800721 	mov	w1, #0x39                  	// #57
    40009620:	11000415 	add	w21, w0, #0x1
    40009624:	52800720 	mov	w0, #0x39                  	// #57
    40009628:	39000040 	strb	w0, [x2]
    4000962c:	17fffea7 	b	400090c8 <_dtoa_r+0xac8>
    40009630:	b9407be8 	ldr	w8, [sp, #120]
    40009634:	17fffed8 	b	40009194 <_dtoa_r+0xb94>
    40009638:	7100e47f 	cmp	w3, #0x39
    4000963c:	54fffe20 	b.eq	40009600 <_dtoa_r+0x1000>  // b.none
    40009640:	b940a7e0 	ldr	w0, [sp, #164]
    40009644:	710002df 	cmp	w22, #0x0
    40009648:	f94043e4 	ldr	x4, [sp, #128]
    4000964c:	1100c400 	add	w0, w0, #0x31
    40009650:	1a83c003 	csel	w3, w0, w3, gt
    40009654:	b9407be0 	ldr	w0, [sp, #120]
    40009658:	aa1903f6 	mov	x22, x25
    4000965c:	aa1c03f9 	mov	x25, x28
    40009660:	11000415 	add	w21, w0, #0x1
    40009664:	38001483 	strb	w3, [x4], #1
    40009668:	17fffe9d 	b	400090dc <_dtoa_r+0xadc>
    4000966c:	b9007be5 	str	w5, [sp, #120]
    40009670:	b940abf6 	ldr	w22, [sp, #168]
    40009674:	35ffb4b6 	cbnz	w22, 40008d08 <_dtoa_r+0x708>
    40009678:	17fffed2 	b	400091c0 <_dtoa_r+0xbc0>
    4000967c:	aa1903e1 	mov	x1, x25
    40009680:	aa1303e0 	mov	x0, x19
    40009684:	52800003 	mov	w3, #0x0                   	// #0
    40009688:	52800142 	mov	w2, #0xa                   	// #10
    4000968c:	b9007be5 	str	w5, [sp, #120]
    40009690:	940001d0 	bl	40009dd0 <__multadd>
    40009694:	b9407be5 	ldr	w5, [sp, #120]
    40009698:	aa0003f9 	mov	x25, x0
    4000969c:	b9007be5 	str	w5, [sp, #120]
    400096a0:	35fffe96 	cbnz	w22, 40009670 <_dtoa_r+0x1070>
    400096a4:	b940abf6 	ldr	w22, [sp, #168]
    400096a8:	17fffdad 	b	40008d5c <_dtoa_r+0x75c>
    400096ac:	aa0203e0 	mov	x0, x2
    400096b0:	17fffeae 	b	40009168 <_dtoa_r+0xb68>
    400096b4:	54fff441 	b.ne	4000953c <_dtoa_r+0xf3c>  // b.any
    400096b8:	3707f3a3 	tbnz	w3, #0, 4000952c <_dtoa_r+0xf2c>
    400096bc:	17ffffa0 	b	4000953c <_dtoa_r+0xf3c>
    400096c0:	1e604041 	fmov	d1, d2
    400096c4:	52800042 	mov	w2, #0x2                   	// #2
    400096c8:	17fffc8a 	b	400088f0 <_dtoa_r+0x2f0>
    400096cc:	54ffaee0 	b.eq	40008ca8 <_dtoa_r+0x6a8>  // b.none
    400096d0:	52800781 	mov	w1, #0x3c                  	// #60
    400096d4:	4b000020 	sub	w0, w1, w0
    400096d8:	17fffd6f 	b	40008c94 <_dtoa_r+0x694>
    400096dc:	b9006a7f 	str	wzr, [x19, #104]
    400096e0:	aa1303e0 	mov	x0, x19
    400096e4:	52800001 	mov	w1, #0x0                   	// #0
    400096e8:	b90083e7 	str	w7, [sp, #128]
    400096ec:	29119be4 	stp	w4, w6, [sp, #140]
    400096f0:	9400018c 	bl	40009d20 <_Balloc>
    400096f4:	b94083e7 	ldr	w7, [sp, #128]
    400096f8:	aa0003f7 	mov	x23, x0
    400096fc:	29519be4 	ldp	w4, w6, [sp, #140]
    40009700:	b4000240 	cbz	x0, 40009748 <_dtoa_r+0x1148>
    40009704:	b940bfe0 	ldr	w0, [sp, #188]
    40009708:	b9407be1 	ldr	w1, [sp, #120]
    4000970c:	f9003277 	str	x23, [x19, #96]
    40009710:	7100001f 	cmp	w0, #0x0
    40009714:	7a4ea820 	ccmp	w1, #0xe, #0x0, ge  // ge = tcont
    40009718:	54ffe7ed 	b.le	40009414 <_dtoa_r+0xe14>
    4000971c:	12800016 	mov	w22, #0xffffffff            	// #-1
    40009720:	52800021 	mov	w1, #0x1                   	// #1
    40009724:	5280001c 	mov	w28, #0x0                   	// #0
    40009728:	b90083e1 	str	w1, [sp, #128]
    4000972c:	b900abf6 	str	w22, [sp, #168]
    40009730:	17fffcb1 	b	400089f4 <_dtoa_r+0x3f4>
    40009734:	52800001 	mov	w1, #0x0                   	// #0
    40009738:	17fffc46 	b	40008850 <_dtoa_r+0x250>
    4000973c:	aa1703f6 	mov	x22, x23
    40009740:	aa0403f7 	mov	x23, x4
    40009744:	17fffd78 	b	40008d24 <_dtoa_r+0x724>
    40009748:	b00000c3 	adrp	x3, 40022000 <__pow_log_data+0xcc8>
    4000974c:	b00000c0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    40009750:	91372063 	add	x3, x3, #0xdc8
    40009754:	91378000 	add	x0, x0, #0xde0
    40009758:	d2800002 	mov	x2, #0x0                   	// #0
    4000975c:	52803541 	mov	w1, #0x1aa                 	// #426
    40009760:	94001b60 	bl	400104e0 <__assert_func>
    40009764:	b00000c3 	adrp	x3, 40022000 <__pow_log_data+0xcc8>
    40009768:	b00000c0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    4000976c:	91372063 	add	x3, x3, #0xdc8
    40009770:	91378000 	add	x0, x0, #0xde0
    40009774:	d2800002 	mov	x2, #0x0                   	// #0
    40009778:	52805d41 	mov	w1, #0x2ea                 	// #746
    4000977c:	94001b59 	bl	400104e0 <__assert_func>

0000000040009780 <__sflags>:
    40009780:	39400023 	ldrb	w3, [x1]
    40009784:	aa0003e4 	mov	x4, x0
    40009788:	7101c87f 	cmp	w3, #0x72
    4000978c:	54000480 	b.eq	4000981c <__sflags+0x9c>  // b.none
    40009790:	7101dc7f 	cmp	w3, #0x77
    40009794:	540000e0 	b.eq	400097b0 <__sflags+0x30>  // b.none
    40009798:	7101847f 	cmp	w3, #0x61
    4000979c:	54000380 	b.eq	4000980c <__sflags+0x8c>  // b.none
    400097a0:	528002c1 	mov	w1, #0x16                  	// #22
    400097a4:	52800000 	mov	w0, #0x0                   	// #0
    400097a8:	b9000081 	str	w1, [x4]
    400097ac:	d65f03c0 	ret
    400097b0:	5280c006 	mov	w6, #0x600                 	// #1536
    400097b4:	52800023 	mov	w3, #0x1                   	// #1
    400097b8:	52800100 	mov	w0, #0x8                   	// #8
    400097bc:	39400424 	ldrb	w4, [x1, #1]
    400097c0:	91000421 	add	x1, x1, #0x1
    400097c4:	350000c4 	cbnz	w4, 400097dc <__sflags+0x5c>
    400097c8:	1400000e 	b	40009800 <__sflags+0x80>
    400097cc:	7101e09f 	cmp	w4, #0x78
    400097d0:	38401c24 	ldrb	w4, [x1, #1]!
    400097d4:	1a8300a3 	csel	w3, w5, w3, eq  // eq = none
    400097d8:	34000144 	cbz	w4, 40009800 <__sflags+0x80>
    400097dc:	32150065 	orr	w5, w3, #0x800
    400097e0:	7100ac9f 	cmp	w4, #0x2b
    400097e4:	54ffff41 	b.ne	400097cc <__sflags+0x4c>  // b.any
    400097e8:	38401c24 	ldrb	w4, [x1, #1]!
    400097ec:	121b7000 	and	w0, w0, #0xffffffe3
    400097f0:	121e7463 	and	w3, w3, #0xfffffffc
    400097f4:	321c0000 	orr	w0, w0, #0x10
    400097f8:	321f0063 	orr	w3, w3, #0x2
    400097fc:	35ffff04 	cbnz	w4, 400097dc <__sflags+0x5c>
    40009800:	2a0300c3 	orr	w3, w6, w3
    40009804:	b9000043 	str	w3, [x2]
    40009808:	d65f03c0 	ret
    4000980c:	52804106 	mov	w6, #0x208                 	// #520
    40009810:	52800023 	mov	w3, #0x1                   	// #1
    40009814:	52802100 	mov	w0, #0x108                 	// #264
    40009818:	17ffffe9 	b	400097bc <__sflags+0x3c>
    4000981c:	52800006 	mov	w6, #0x0                   	// #0
    40009820:	52800003 	mov	w3, #0x0                   	// #0
    40009824:	52800080 	mov	w0, #0x4                   	// #4
    40009828:	17ffffe5 	b	400097bc <__sflags+0x3c>
    4000982c:	00000000 	udf	#0

0000000040009830 <_fread_r>:
    40009830:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
    40009834:	910003fd 	mov	x29, sp
    40009838:	a90363f7 	stp	x23, x24, [sp, #48]
    4000983c:	9b027c78 	mul	x24, x3, x2
    40009840:	f90037e2 	str	x2, [sp, #104]
    40009844:	b4000778 	cbz	x24, 40009930 <_fread_r+0x100>
    40009848:	a90153f3 	stp	x19, x20, [sp, #16]
    4000984c:	aa0403f3 	mov	x19, x4
    40009850:	a9025bf5 	stp	x21, x22, [sp, #32]
    40009854:	aa0103f5 	mov	x21, x1
    40009858:	aa0003f6 	mov	x22, x0
    4000985c:	a9046bf9 	stp	x25, x26, [sp, #64]
    40009860:	aa0303f9 	mov	x25, x3
    40009864:	b4000060 	cbz	x0, 40009870 <_fread_r+0x40>
    40009868:	b9405001 	ldr	w1, [x0, #80]
    4000986c:	34000fe1 	cbz	w1, 40009a68 <_fread_r+0x238>
    40009870:	b940b261 	ldr	w1, [x19, #176]
    40009874:	79402260 	ldrh	w0, [x19, #16]
    40009878:	37000041 	tbnz	w1, #0, 40009880 <_fread_r+0x50>
    4000987c:	36481000 	tbz	w0, #9, 40009a7c <_fread_r+0x24c>
    40009880:	b9400a74 	ldr	w20, [x19, #8]
    40009884:	93407e82 	sxtw	x2, w20
    40009888:	37f805d4 	tbnz	w20, #31, 40009940 <_fread_r+0x110>
    4000988c:	aa1803fa 	mov	x26, x24
    40009890:	37080620 	tbnz	w0, #1, 40009954 <_fread_r+0x124>
    40009894:	a90573fb 	stp	x27, x28, [sp, #80]
    40009898:	1400000c 	b	400098c8 <_fread_r+0x98>
    4000989c:	97ffddc9 	bl	40000fc0 <memcpy>
    400098a0:	8b1402b5 	add	x21, x21, x20
    400098a4:	f9400264 	ldr	x4, [x19]
    400098a8:	aa1303e1 	mov	x1, x19
    400098ac:	aa1603e0 	mov	x0, x22
    400098b0:	8b140084 	add	x4, x4, x20
    400098b4:	f9000264 	str	x4, [x19]
    400098b8:	94000526 	bl	4000ad50 <__srefill_r>
    400098bc:	35000a40 	cbnz	w0, 40009a04 <_fread_r+0x1d4>
    400098c0:	b9400a74 	ldr	w20, [x19, #8]
    400098c4:	aa1b03fa 	mov	x26, x27
    400098c8:	93407e94 	sxtw	x20, w20
    400098cc:	aa1503e0 	mov	x0, x21
    400098d0:	aa1403e2 	mov	x2, x20
    400098d4:	cb14035b 	sub	x27, x26, x20
    400098d8:	f9400261 	ldr	x1, [x19]
    400098dc:	eb1a029f 	cmp	x20, x26
    400098e0:	54fffde3 	b.cc	4000989c <_fread_r+0x6c>  // b.lo, b.ul, b.last
    400098e4:	aa1a03e2 	mov	x2, x26
    400098e8:	97ffddb6 	bl	40000fc0 <memcpy>
    400098ec:	f9400260 	ldr	x0, [x19]
    400098f0:	b9400a74 	ldr	w20, [x19, #8]
    400098f4:	8b1a0000 	add	x0, x0, x26
    400098f8:	f9000260 	str	x0, [x19]
    400098fc:	4b1a0294 	sub	w20, w20, w26
    40009900:	b9000a74 	str	w20, [x19, #8]
    40009904:	a94573fb 	ldp	x27, x28, [sp, #80]
    40009908:	aa1903f8 	mov	x24, x25
    4000990c:	b940b260 	ldr	w0, [x19, #176]
    40009910:	370009e0 	tbnz	w0, #0, 40009a4c <_fread_r+0x21c>
    40009914:	79402260 	ldrh	w0, [x19, #16]
    40009918:	374809a0 	tbnz	w0, #9, 40009a4c <_fread_r+0x21c>
    4000991c:	f9405260 	ldr	x0, [x19, #160]
    40009920:	94005090 	bl	4001db60 <__retarget_lock_release_recursive>
    40009924:	a94153f3 	ldp	x19, x20, [sp, #16]
    40009928:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4000992c:	a9446bf9 	ldp	x25, x26, [sp, #64]
    40009930:	aa1803e0 	mov	x0, x24
    40009934:	a94363f7 	ldp	x23, x24, [sp, #48]
    40009938:	a8c77bfd 	ldp	x29, x30, [sp], #112
    4000993c:	d65f03c0 	ret
    40009940:	b9000a7f 	str	wzr, [x19, #8]
    40009944:	aa1803fa 	mov	x26, x24
    40009948:	d2800002 	mov	x2, #0x0                   	// #0
    4000994c:	52800014 	mov	w20, #0x0                   	// #0
    40009950:	360ffa20 	tbz	w0, #1, 40009894 <_fread_r+0x64>
    40009954:	f9400261 	ldr	x1, [x19]
    40009958:	eb02031f 	cmp	x24, x2
    4000995c:	9a829314 	csel	x20, x24, x2, ls  // ls = plast
    40009960:	aa1503e0 	mov	x0, x21
    40009964:	aa1403e2 	mov	x2, x20
    40009968:	cb14031a 	sub	x26, x24, x20
    4000996c:	97ffdd95 	bl	40000fc0 <memcpy>
    40009970:	f9400262 	ldr	x2, [x19]
    40009974:	b9400a60 	ldr	w0, [x19, #8]
    40009978:	f9402e61 	ldr	x1, [x19, #88]
    4000997c:	4b140000 	sub	w0, w0, w20
    40009980:	8b140042 	add	x2, x2, x20
    40009984:	f9000262 	str	x2, [x19]
    40009988:	b9000a60 	str	w0, [x19, #8]
    4000998c:	b4000861 	cbz	x1, 40009a98 <_fread_r+0x268>
    40009990:	b4fffbda 	cbz	x26, 40009908 <_fread_r+0xd8>
    40009994:	9101d260 	add	x0, x19, #0x74
    40009998:	a90573fb 	stp	x27, x28, [sp, #80]
    4000999c:	eb00003f 	cmp	x1, x0
    400099a0:	54000060 	b.eq	400099ac <_fread_r+0x17c>  // b.none
    400099a4:	aa1603e0 	mov	x0, x22
    400099a8:	97ffe512 	bl	40002df0 <_free_r>
    400099ac:	f9002e7f 	str	xzr, [x19, #88]
    400099b0:	8b1402b5 	add	x21, x21, x20
    400099b4:	14000002 	b	400099bc <_fread_r+0x18c>
    400099b8:	aa0103fa 	mov	x26, x1
    400099bc:	aa1303e1 	mov	x1, x19
    400099c0:	aa1603e0 	mov	x0, x22
    400099c4:	b4fffa1a 	cbz	x26, 40009904 <_fread_r+0xd4>
    400099c8:	b940227b 	ldr	w27, [x19, #32]
    400099cc:	b900227a 	str	w26, [x19, #32]
    400099d0:	f9400277 	ldr	x23, [x19]
    400099d4:	f9000275 	str	x21, [x19]
    400099d8:	f9400e7c 	ldr	x28, [x19, #24]
    400099dc:	f9000e75 	str	x21, [x19, #24]
    400099e0:	940004dc 	bl	4000ad50 <__srefill_r>
    400099e4:	b9800a74 	ldrsw	x20, [x19, #8]
    400099e8:	f9000277 	str	x23, [x19]
    400099ec:	b9000a7f 	str	wzr, [x19, #8]
    400099f0:	8b1402b5 	add	x21, x21, x20
    400099f4:	f9000e7c 	str	x28, [x19, #24]
    400099f8:	cb140341 	sub	x1, x26, x20
    400099fc:	b900227b 	str	w27, [x19, #32]
    40009a00:	34fffdc0 	cbz	w0, 400099b8 <_fread_r+0x188>
    40009a04:	b940b260 	ldr	w0, [x19, #176]
    40009a08:	370000a0 	tbnz	w0, #0, 40009a1c <_fread_r+0x1ec>
    40009a0c:	79402260 	ldrh	w0, [x19, #16]
    40009a10:	37480060 	tbnz	w0, #9, 40009a1c <_fread_r+0x1ec>
    40009a14:	f9405260 	ldr	x0, [x19, #160]
    40009a18:	94005052 	bl	4001db60 <__retarget_lock_release_recursive>
    40009a1c:	8b180294 	add	x20, x20, x24
    40009a20:	f94037e0 	ldr	x0, [sp, #104]
    40009a24:	cb1a0294 	sub	x20, x20, x26
    40009a28:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40009a2c:	9ac00a98 	udiv	x24, x20, x0
    40009a30:	a94153f3 	ldp	x19, x20, [sp, #16]
    40009a34:	a9446bf9 	ldp	x25, x26, [sp, #64]
    40009a38:	aa1803e0 	mov	x0, x24
    40009a3c:	a94363f7 	ldp	x23, x24, [sp, #48]
    40009a40:	a94573fb 	ldp	x27, x28, [sp, #80]
    40009a44:	a8c77bfd 	ldp	x29, x30, [sp], #112
    40009a48:	d65f03c0 	ret
    40009a4c:	aa1803e0 	mov	x0, x24
    40009a50:	a94153f3 	ldp	x19, x20, [sp, #16]
    40009a54:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40009a58:	a94363f7 	ldp	x23, x24, [sp, #48]
    40009a5c:	a9446bf9 	ldp	x25, x26, [sp, #64]
    40009a60:	a8c77bfd 	ldp	x29, x30, [sp], #112
    40009a64:	d65f03c0 	ret
    40009a68:	97ffe38a 	bl	40002890 <__sinit>
    40009a6c:	b940b261 	ldr	w1, [x19, #176]
    40009a70:	79402260 	ldrh	w0, [x19, #16]
    40009a74:	3707f061 	tbnz	w1, #0, 40009880 <_fread_r+0x50>
    40009a78:	17ffff81 	b	4000987c <_fread_r+0x4c>
    40009a7c:	f9405260 	ldr	x0, [x19, #160]
    40009a80:	94005036 	bl	4001db58 <__retarget_lock_acquire_recursive>
    40009a84:	b9400a74 	ldr	w20, [x19, #8]
    40009a88:	79402260 	ldrh	w0, [x19, #16]
    40009a8c:	93407e82 	sxtw	x2, w20
    40009a90:	36ffeff4 	tbz	w20, #31, 4000988c <_fread_r+0x5c>
    40009a94:	17ffffab 	b	40009940 <_fread_r+0x110>
    40009a98:	a90573fb 	stp	x27, x28, [sp, #80]
    40009a9c:	17ffffc5 	b	400099b0 <_fread_r+0x180>

0000000040009aa0 <_fstat_r>:
    40009aa0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    40009aa4:	910003fd 	mov	x29, sp
    40009aa8:	a90153f3 	stp	x19, x20, [sp, #16]
    40009aac:	d00003d4 	adrp	x20, 40083000 <ws+0x3a40>
    40009ab0:	aa0003f3 	mov	x19, x0
    40009ab4:	b90b9e9f 	str	wzr, [x20, #2972]
    40009ab8:	2a0103e0 	mov	w0, w1
    40009abc:	aa0203e1 	mov	x1, x2
    40009ac0:	94005002 	bl	4001dac8 <_fstat>
    40009ac4:	3100041f 	cmn	w0, #0x1
    40009ac8:	54000080 	b.eq	40009ad8 <_fstat_r+0x38>  // b.none
    40009acc:	a94153f3 	ldp	x19, x20, [sp, #16]
    40009ad0:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40009ad4:	d65f03c0 	ret
    40009ad8:	b94b9e81 	ldr	w1, [x20, #2972]
    40009adc:	34ffff81 	cbz	w1, 40009acc <_fstat_r+0x2c>
    40009ae0:	b9000261 	str	w1, [x19]
    40009ae4:	a94153f3 	ldp	x19, x20, [sp, #16]
    40009ae8:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40009aec:	d65f03c0 	ret

0000000040009af0 <_gettimeofday_r>:
    40009af0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    40009af4:	910003fd 	mov	x29, sp
    40009af8:	a90153f3 	stp	x19, x20, [sp, #16]
    40009afc:	d00003d4 	adrp	x20, 40083000 <ws+0x3a40>
    40009b00:	aa0003f3 	mov	x19, x0
    40009b04:	b90b9e9f 	str	wzr, [x20, #2972]
    40009b08:	aa0103e0 	mov	x0, x1
    40009b0c:	aa0203e1 	mov	x1, x2
    40009b10:	9400501e 	bl	4001db88 <_gettimeofday>
    40009b14:	3100041f 	cmn	w0, #0x1
    40009b18:	54000080 	b.eq	40009b28 <_gettimeofday_r+0x38>  // b.none
    40009b1c:	a94153f3 	ldp	x19, x20, [sp, #16]
    40009b20:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40009b24:	d65f03c0 	ret
    40009b28:	b94b9e81 	ldr	w1, [x20, #2972]
    40009b2c:	34ffff81 	cbz	w1, 40009b1c <_gettimeofday_r+0x2c>
    40009b30:	b9000261 	str	w1, [x19]
    40009b34:	a94153f3 	ldp	x19, x20, [sp, #16]
    40009b38:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40009b3c:	d65f03c0 	ret

0000000040009b40 <_isatty_r>:
    40009b40:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    40009b44:	910003fd 	mov	x29, sp
    40009b48:	a90153f3 	stp	x19, x20, [sp, #16]
    40009b4c:	d00003d4 	adrp	x20, 40083000 <ws+0x3a40>
    40009b50:	aa0003f3 	mov	x19, x0
    40009b54:	b90b9e9f 	str	wzr, [x20, #2972]
    40009b58:	2a0103e0 	mov	w0, w1
    40009b5c:	94004fd4 	bl	4001daac <_isatty>
    40009b60:	3100041f 	cmn	w0, #0x1
    40009b64:	54000080 	b.eq	40009b74 <_isatty_r+0x34>  // b.none
    40009b68:	a94153f3 	ldp	x19, x20, [sp, #16]
    40009b6c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40009b70:	d65f03c0 	ret
    40009b74:	b94b9e81 	ldr	w1, [x20, #2972]
    40009b78:	34ffff81 	cbz	w1, 40009b68 <_isatty_r+0x28>
    40009b7c:	b9000261 	str	w1, [x19]
    40009b80:	a94153f3 	ldp	x19, x20, [sp, #16]
    40009b84:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40009b88:	d65f03c0 	ret
    40009b8c:	00000000 	udf	#0

0000000040009b90 <iswspace>:
    40009b90:	d2800001 	mov	x1, #0x0                   	// #0
    40009b94:	14000003 	b	40009ba0 <iswspace_l>
	...

0000000040009ba0 <iswspace_l>:
    40009ba0:	7103fc1f 	cmp	w0, #0xff
    40009ba4:	540000e8 	b.hi	40009bc0 <iswspace_l+0x20>  // b.pmore
    40009ba8:	11000400 	add	w0, w0, #0x1
    40009bac:	b00000c1 	adrp	x1, 40022000 <__pow_log_data+0xcc8>
    40009bb0:	912fc021 	add	x1, x1, #0xbf0
    40009bb4:	3860c820 	ldrb	w0, [x1, w0, sxtw]
    40009bb8:	121d0000 	and	w0, w0, #0x8
    40009bbc:	d65f03c0 	ret
    40009bc0:	52800000 	mov	w0, #0x0                   	// #0
    40009bc4:	d65f03c0 	ret
	...

0000000040009bd0 <__locale_mb_cur_max>:
    40009bd0:	d0000620 	adrp	x0, 400cf000 <impure_data+0x3d0>
    40009bd4:	3967c000 	ldrb	w0, [x0, #2544]
    40009bd8:	d65f03c0 	ret
    40009bdc:	00000000 	udf	#0

0000000040009be0 <_localeconv_r>:
    40009be0:	d0000620 	adrp	x0, 400cf000 <impure_data+0x3d0>
    40009be4:	91264000 	add	x0, x0, #0x990
    40009be8:	d65f03c0 	ret
    40009bec:	00000000 	udf	#0

0000000040009bf0 <_lseek_r>:
    40009bf0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    40009bf4:	910003fd 	mov	x29, sp
    40009bf8:	a90153f3 	stp	x19, x20, [sp, #16]
    40009bfc:	d00003d4 	adrp	x20, 40083000 <ws+0x3a40>
    40009c00:	aa0003f3 	mov	x19, x0
    40009c04:	b90b9e9f 	str	wzr, [x20, #2972]
    40009c08:	2a0103e0 	mov	w0, w1
    40009c0c:	aa0203e1 	mov	x1, x2
    40009c10:	2a0303e2 	mov	w2, w3
    40009c14:	94004fa4 	bl	4001daa4 <_lseek>
    40009c18:	b100041f 	cmn	x0, #0x1
    40009c1c:	54000080 	b.eq	40009c2c <_lseek_r+0x3c>  // b.none
    40009c20:	a94153f3 	ldp	x19, x20, [sp, #16]
    40009c24:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40009c28:	d65f03c0 	ret
    40009c2c:	b94b9e81 	ldr	w1, [x20, #2972]
    40009c30:	34ffff81 	cbz	w1, 40009c20 <_lseek_r+0x30>
    40009c34:	b9000261 	str	w1, [x19]
    40009c38:	a94153f3 	ldp	x19, x20, [sp, #16]
    40009c3c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40009c40:	d65f03c0 	ret
	...

0000000040009c50 <_mbrtowc_r>:
    40009c50:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    40009c54:	d0000625 	adrp	x5, 400cf000 <impure_data+0x3d0>
    40009c58:	910003fd 	mov	x29, sp
    40009c5c:	a90153f3 	stp	x19, x20, [sp, #16]
    40009c60:	aa0003f4 	mov	x20, x0
    40009c64:	aa0403f3 	mov	x19, x4
    40009c68:	f944bca5 	ldr	x5, [x5, #2424]
    40009c6c:	b4000122 	cbz	x2, 40009c90 <_mbrtowc_r+0x40>
    40009c70:	d63f00a0 	blr	x5
    40009c74:	2a0003e1 	mov	w1, w0
    40009c78:	93407c20 	sxtw	x0, w1
    40009c7c:	3100043f 	cmn	w1, #0x1
    40009c80:	540001a0 	b.eq	40009cb4 <_mbrtowc_r+0x64>  // b.none
    40009c84:	a94153f3 	ldp	x19, x20, [sp, #16]
    40009c88:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40009c8c:	d65f03c0 	ret
    40009c90:	d2800001 	mov	x1, #0x0                   	// #0
    40009c94:	b00000c2 	adrp	x2, 40022000 <__pow_log_data+0xcc8>
    40009c98:	d2800023 	mov	x3, #0x1                   	// #1
    40009c9c:	91352042 	add	x2, x2, #0xd48
    40009ca0:	d63f00a0 	blr	x5
    40009ca4:	2a0003e1 	mov	w1, w0
    40009ca8:	93407c20 	sxtw	x0, w1
    40009cac:	3100043f 	cmn	w1, #0x1
    40009cb0:	54fffea1 	b.ne	40009c84 <_mbrtowc_r+0x34>  // b.any
    40009cb4:	b900027f 	str	wzr, [x19]
    40009cb8:	52801141 	mov	w1, #0x8a                  	// #138
    40009cbc:	b9000281 	str	w1, [x20]
    40009cc0:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
    40009cc4:	a94153f3 	ldp	x19, x20, [sp, #16]
    40009cc8:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40009ccc:	d65f03c0 	ret

0000000040009cd0 <__ascii_mbtowc>:
    40009cd0:	d10043ff 	sub	sp, sp, #0x10
    40009cd4:	f100003f 	cmp	x1, #0x0
    40009cd8:	910033e0 	add	x0, sp, #0xc
    40009cdc:	9a810001 	csel	x1, x0, x1, eq  // eq = none
    40009ce0:	b4000122 	cbz	x2, 40009d04 <__ascii_mbtowc+0x34>
    40009ce4:	b4000163 	cbz	x3, 40009d10 <__ascii_mbtowc+0x40>
    40009ce8:	39400040 	ldrb	w0, [x2]
    40009cec:	b9000020 	str	w0, [x1]
    40009cf0:	39400040 	ldrb	w0, [x2]
    40009cf4:	7100001f 	cmp	w0, #0x0
    40009cf8:	1a9f07e0 	cset	w0, ne  // ne = any
    40009cfc:	910043ff 	add	sp, sp, #0x10
    40009d00:	d65f03c0 	ret
    40009d04:	52800000 	mov	w0, #0x0                   	// #0
    40009d08:	910043ff 	add	sp, sp, #0x10
    40009d0c:	d65f03c0 	ret
    40009d10:	12800020 	mov	w0, #0xfffffffe            	// #-2
    40009d14:	17fffffa 	b	40009cfc <__ascii_mbtowc+0x2c>
	...

0000000040009d20 <_Balloc>:
    40009d20:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    40009d24:	910003fd 	mov	x29, sp
    40009d28:	f9403c02 	ldr	x2, [x0, #120]
    40009d2c:	a90153f3 	stp	x19, x20, [sp, #16]
    40009d30:	aa0003f3 	mov	x19, x0
    40009d34:	2a0103f4 	mov	w20, w1
    40009d38:	b4000142 	cbz	x2, 40009d60 <_Balloc+0x40>
    40009d3c:	93407e81 	sxtw	x1, w20
    40009d40:	f8617840 	ldr	x0, [x2, x1, lsl #3]
    40009d44:	b40001e0 	cbz	x0, 40009d80 <_Balloc+0x60>
    40009d48:	f9400003 	ldr	x3, [x0]
    40009d4c:	f8217843 	str	x3, [x2, x1, lsl #3]
    40009d50:	f900081f 	str	xzr, [x0, #16]
    40009d54:	a94153f3 	ldp	x19, x20, [sp, #16]
    40009d58:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40009d5c:	d65f03c0 	ret
    40009d60:	d2800822 	mov	x2, #0x41                  	// #65
    40009d64:	d2800101 	mov	x1, #0x8                   	// #8
    40009d68:	940019f6 	bl	40010540 <_calloc_r>
    40009d6c:	f9003e60 	str	x0, [x19, #120]
    40009d70:	aa0003e2 	mov	x2, x0
    40009d74:	b5fffe40 	cbnz	x0, 40009d3c <_Balloc+0x1c>
    40009d78:	d2800000 	mov	x0, #0x0                   	// #0
    40009d7c:	17fffff6 	b	40009d54 <_Balloc+0x34>
    40009d80:	52800021 	mov	w1, #0x1                   	// #1
    40009d84:	aa1303e0 	mov	x0, x19
    40009d88:	1ad42033 	lsl	w19, w1, w20
    40009d8c:	d2800021 	mov	x1, #0x1                   	// #1
    40009d90:	93407e62 	sxtw	x2, w19
    40009d94:	91001c42 	add	x2, x2, #0x7
    40009d98:	d37ef442 	lsl	x2, x2, #2
    40009d9c:	940019e9 	bl	40010540 <_calloc_r>
    40009da0:	b4fffec0 	cbz	x0, 40009d78 <_Balloc+0x58>
    40009da4:	29014c14 	stp	w20, w19, [x0, #8]
    40009da8:	17ffffea 	b	40009d50 <_Balloc+0x30>
    40009dac:	00000000 	udf	#0

0000000040009db0 <_Bfree>:
    40009db0:	b40000c1 	cbz	x1, 40009dc8 <_Bfree+0x18>
    40009db4:	b9800822 	ldrsw	x2, [x1, #8]
    40009db8:	f9403c00 	ldr	x0, [x0, #120]
    40009dbc:	f8627803 	ldr	x3, [x0, x2, lsl #3]
    40009dc0:	f9000023 	str	x3, [x1]
    40009dc4:	f8227801 	str	x1, [x0, x2, lsl #3]
    40009dc8:	d65f03c0 	ret
    40009dcc:	00000000 	udf	#0

0000000040009dd0 <__multadd>:
    40009dd0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    40009dd4:	91006027 	add	x7, x1, #0x18
    40009dd8:	d2800005 	mov	x5, #0x0                   	// #0
    40009ddc:	910003fd 	mov	x29, sp
    40009de0:	a90153f3 	stp	x19, x20, [sp, #16]
    40009de4:	2a0303f3 	mov	w19, w3
    40009de8:	b9401434 	ldr	w20, [x1, #20]
    40009dec:	a9025bf5 	stp	x21, x22, [sp, #32]
    40009df0:	aa0103f5 	mov	x21, x1
    40009df4:	aa0003f6 	mov	x22, x0
    40009df8:	b86578e4 	ldr	w4, [x7, x5, lsl #2]
    40009dfc:	12003c83 	and	w3, w4, #0xffff
    40009e00:	53107c84 	lsr	w4, w4, #16
    40009e04:	1b024c63 	madd	w3, w3, w2, w19
    40009e08:	12003c66 	and	w6, w3, #0xffff
    40009e0c:	53107c63 	lsr	w3, w3, #16
    40009e10:	1b020c83 	madd	w3, w4, w2, w3
    40009e14:	0b0340c4 	add	w4, w6, w3, lsl #16
    40009e18:	b82578e4 	str	w4, [x7, x5, lsl #2]
    40009e1c:	910004a5 	add	x5, x5, #0x1
    40009e20:	53107c73 	lsr	w19, w3, #16
    40009e24:	6b05029f 	cmp	w20, w5
    40009e28:	54fffe8c 	b.gt	40009df8 <__multadd+0x28>
    40009e2c:	34000113 	cbz	w19, 40009e4c <__multadd+0x7c>
    40009e30:	b9400ea0 	ldr	w0, [x21, #12]
    40009e34:	6b14001f 	cmp	w0, w20
    40009e38:	5400014d 	b.le	40009e60 <__multadd+0x90>
    40009e3c:	8b34caa0 	add	x0, x21, w20, sxtw #2
    40009e40:	11000694 	add	w20, w20, #0x1
    40009e44:	b9001813 	str	w19, [x0, #24]
    40009e48:	b90016b4 	str	w20, [x21, #20]
    40009e4c:	aa1503e0 	mov	x0, x21
    40009e50:	a94153f3 	ldp	x19, x20, [sp, #16]
    40009e54:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40009e58:	a8c47bfd 	ldp	x29, x30, [sp], #64
    40009e5c:	d65f03c0 	ret
    40009e60:	b9400aa1 	ldr	w1, [x21, #8]
    40009e64:	aa1603e0 	mov	x0, x22
    40009e68:	f9001bf7 	str	x23, [sp, #48]
    40009e6c:	11000421 	add	w1, w1, #0x1
    40009e70:	97ffffac 	bl	40009d20 <_Balloc>
    40009e74:	aa0003f7 	mov	x23, x0
    40009e78:	b4000260 	cbz	x0, 40009ec4 <__multadd+0xf4>
    40009e7c:	b98016a2 	ldrsw	x2, [x21, #20]
    40009e80:	910042a1 	add	x1, x21, #0x10
    40009e84:	91004000 	add	x0, x0, #0x10
    40009e88:	91000842 	add	x2, x2, #0x2
    40009e8c:	d37ef442 	lsl	x2, x2, #2
    40009e90:	97ffdc4c 	bl	40000fc0 <memcpy>
    40009e94:	b9800aa1 	ldrsw	x1, [x21, #8]
    40009e98:	f9403ec0 	ldr	x0, [x22, #120]
    40009e9c:	f8617802 	ldr	x2, [x0, x1, lsl #3]
    40009ea0:	f90002a2 	str	x2, [x21]
    40009ea4:	f8217815 	str	x21, [x0, x1, lsl #3]
    40009ea8:	aa1703f5 	mov	x21, x23
    40009eac:	8b34caa0 	add	x0, x21, w20, sxtw #2
    40009eb0:	11000694 	add	w20, w20, #0x1
    40009eb4:	f9401bf7 	ldr	x23, [sp, #48]
    40009eb8:	b9001813 	str	w19, [x0, #24]
    40009ebc:	b90016b4 	str	w20, [x21, #20]
    40009ec0:	17ffffe3 	b	40009e4c <__multadd+0x7c>
    40009ec4:	b00000c3 	adrp	x3, 40022000 <__pow_log_data+0xcc8>
    40009ec8:	b00000c0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    40009ecc:	91372063 	add	x3, x3, #0xdc8
    40009ed0:	9139c000 	add	x0, x0, #0xe70
    40009ed4:	d2800002 	mov	x2, #0x0                   	// #0
    40009ed8:	528016a1 	mov	w1, #0xb5                  	// #181
    40009edc:	94001981 	bl	400104e0 <__assert_func>

0000000040009ee0 <__s2b>:
    40009ee0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    40009ee4:	5291c725 	mov	w5, #0x8e39                	// #36409
    40009ee8:	72a71c65 	movk	w5, #0x38e3, lsl #16
    40009eec:	910003fd 	mov	x29, sp
    40009ef0:	a9025bf5 	stp	x21, x22, [sp, #32]
    40009ef4:	2a0303f5 	mov	w21, w3
    40009ef8:	11002063 	add	w3, w3, #0x8
    40009efc:	a90153f3 	stp	x19, x20, [sp, #16]
    40009f00:	2a0203f6 	mov	w22, w2
    40009f04:	aa0003f4 	mov	x20, x0
    40009f08:	9b257c65 	smull	x5, w3, w5
    40009f0c:	a90363f7 	stp	x23, x24, [sp, #48]
    40009f10:	aa0103f3 	mov	x19, x1
    40009f14:	2a0403f7 	mov	w23, w4
    40009f18:	9361fca5 	asr	x5, x5, #33
    40009f1c:	4b837ca2 	sub	w2, w5, w3, asr #31
    40009f20:	710026bf 	cmp	w21, #0x9
    40009f24:	5400068d 	b.le	40009ff4 <__s2b+0x114>
    40009f28:	52800020 	mov	w0, #0x1                   	// #1
    40009f2c:	52800001 	mov	w1, #0x0                   	// #0
    40009f30:	531f7800 	lsl	w0, w0, #1
    40009f34:	11000421 	add	w1, w1, #0x1
    40009f38:	6b00005f 	cmp	w2, w0
    40009f3c:	54ffffac 	b.gt	40009f30 <__s2b+0x50>
    40009f40:	aa1403e0 	mov	x0, x20
    40009f44:	97ffff77 	bl	40009d20 <_Balloc>
    40009f48:	aa0003e1 	mov	x1, x0
    40009f4c:	b4000580 	cbz	x0, 40009ffc <__s2b+0x11c>
    40009f50:	52800020 	mov	w0, #0x1                   	// #1
    40009f54:	2902dc20 	stp	w0, w23, [x1, #20]
    40009f58:	710026df 	cmp	w22, #0x9
    40009f5c:	540002ec 	b.gt	40009fb8 <__s2b+0xd8>
    40009f60:	91002a73 	add	x19, x19, #0xa
    40009f64:	52800136 	mov	w22, #0x9                   	// #9
    40009f68:	6b1602bf 	cmp	w21, w22
    40009f6c:	540001ad 	b.le	40009fa0 <__s2b+0xc0>
    40009f70:	510006b5 	sub	w21, w21, #0x1
    40009f74:	4b1602b5 	sub	w21, w21, w22
    40009f78:	910006b5 	add	x21, x21, #0x1
    40009f7c:	8b150275 	add	x21, x19, x21
    40009f80:	38401663 	ldrb	w3, [x19], #1
    40009f84:	aa1403e0 	mov	x0, x20
    40009f88:	52800142 	mov	w2, #0xa                   	// #10
    40009f8c:	5100c063 	sub	w3, w3, #0x30
    40009f90:	97ffff90 	bl	40009dd0 <__multadd>
    40009f94:	aa0003e1 	mov	x1, x0
    40009f98:	eb15027f 	cmp	x19, x21
    40009f9c:	54ffff21 	b.ne	40009f80 <__s2b+0xa0>  // b.any
    40009fa0:	aa0103e0 	mov	x0, x1
    40009fa4:	a94153f3 	ldp	x19, x20, [sp, #16]
    40009fa8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40009fac:	a94363f7 	ldp	x23, x24, [sp, #48]
    40009fb0:	a8c47bfd 	ldp	x29, x30, [sp], #64
    40009fb4:	d65f03c0 	ret
    40009fb8:	91002678 	add	x24, x19, #0x9
    40009fbc:	8b364273 	add	x19, x19, w22, uxtw
    40009fc0:	aa1803f7 	mov	x23, x24
    40009fc4:	d503201f 	nop
    40009fc8:	384016e3 	ldrb	w3, [x23], #1
    40009fcc:	aa1403e0 	mov	x0, x20
    40009fd0:	52800142 	mov	w2, #0xa                   	// #10
    40009fd4:	5100c063 	sub	w3, w3, #0x30
    40009fd8:	97ffff7e 	bl	40009dd0 <__multadd>
    40009fdc:	aa0003e1 	mov	x1, x0
    40009fe0:	eb1302ff 	cmp	x23, x19
    40009fe4:	54ffff21 	b.ne	40009fc8 <__s2b+0xe8>  // b.any
    40009fe8:	510022d3 	sub	w19, w22, #0x8
    40009fec:	8b130313 	add	x19, x24, x19
    40009ff0:	17ffffde 	b	40009f68 <__s2b+0x88>
    40009ff4:	52800001 	mov	w1, #0x0                   	// #0
    40009ff8:	17ffffd2 	b	40009f40 <__s2b+0x60>
    40009ffc:	b00000c3 	adrp	x3, 40022000 <__pow_log_data+0xcc8>
    4000a000:	900000c0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    4000a004:	91372063 	add	x3, x3, #0xdc8
    4000a008:	9139c000 	add	x0, x0, #0xe70
    4000a00c:	d2800002 	mov	x2, #0x0                   	// #0
    4000a010:	528019c1 	mov	w1, #0xce                  	// #206
    4000a014:	94001933 	bl	400104e0 <__assert_func>
	...

000000004000a020 <__hi0bits>:
    4000a020:	2a0003e1 	mov	w1, w0
    4000a024:	52800000 	mov	w0, #0x0                   	// #0
    4000a028:	72103c3f 	tst	w1, #0xffff0000
    4000a02c:	54000061 	b.ne	4000a038 <__hi0bits+0x18>  // b.any
    4000a030:	53103c21 	lsl	w1, w1, #16
    4000a034:	52800200 	mov	w0, #0x10                  	// #16
    4000a038:	72081c3f 	tst	w1, #0xff000000
    4000a03c:	54000061 	b.ne	4000a048 <__hi0bits+0x28>  // b.any
    4000a040:	11002000 	add	w0, w0, #0x8
    4000a044:	53185c21 	lsl	w1, w1, #8
    4000a048:	72040c3f 	tst	w1, #0xf0000000
    4000a04c:	54000061 	b.ne	4000a058 <__hi0bits+0x38>  // b.any
    4000a050:	11001000 	add	w0, w0, #0x4
    4000a054:	531c6c21 	lsl	w1, w1, #4
    4000a058:	7202043f 	tst	w1, #0xc0000000
    4000a05c:	54000061 	b.ne	4000a068 <__hi0bits+0x48>  // b.any
    4000a060:	11000800 	add	w0, w0, #0x2
    4000a064:	531e7421 	lsl	w1, w1, #2
    4000a068:	37f80081 	tbnz	w1, #31, 4000a078 <__hi0bits+0x58>
    4000a06c:	f262003f 	tst	x1, #0x40000000
    4000a070:	52800401 	mov	w1, #0x20                  	// #32
    4000a074:	1a800420 	csinc	w0, w1, w0, eq  // eq = none
    4000a078:	d65f03c0 	ret
    4000a07c:	00000000 	udf	#0

000000004000a080 <__lo0bits>:
    4000a080:	aa0003e2 	mov	x2, x0
    4000a084:	52800000 	mov	w0, #0x0                   	// #0
    4000a088:	b9400041 	ldr	w1, [x2]
    4000a08c:	f240083f 	tst	x1, #0x7
    4000a090:	540000e0 	b.eq	4000a0ac <__lo0bits+0x2c>  // b.none
    4000a094:	370000a1 	tbnz	w1, #0, 4000a0a8 <__lo0bits+0x28>
    4000a098:	360803a1 	tbz	w1, #1, 4000a10c <__lo0bits+0x8c>
    4000a09c:	53017c21 	lsr	w1, w1, #1
    4000a0a0:	52800020 	mov	w0, #0x1                   	// #1
    4000a0a4:	b9000041 	str	w1, [x2]
    4000a0a8:	d65f03c0 	ret
    4000a0ac:	72003c3f 	tst	w1, #0xffff
    4000a0b0:	54000061 	b.ne	4000a0bc <__lo0bits+0x3c>  // b.any
    4000a0b4:	53107c21 	lsr	w1, w1, #16
    4000a0b8:	52800200 	mov	w0, #0x10                  	// #16
    4000a0bc:	72001c3f 	tst	w1, #0xff
    4000a0c0:	54000061 	b.ne	4000a0cc <__lo0bits+0x4c>  // b.any
    4000a0c4:	11002000 	add	w0, w0, #0x8
    4000a0c8:	53087c21 	lsr	w1, w1, #8
    4000a0cc:	f2400c3f 	tst	x1, #0xf
    4000a0d0:	54000061 	b.ne	4000a0dc <__lo0bits+0x5c>  // b.any
    4000a0d4:	11001000 	add	w0, w0, #0x4
    4000a0d8:	53047c21 	lsr	w1, w1, #4
    4000a0dc:	f240043f 	tst	x1, #0x3
    4000a0e0:	54000061 	b.ne	4000a0ec <__lo0bits+0x6c>  // b.any
    4000a0e4:	11000800 	add	w0, w0, #0x2
    4000a0e8:	53027c21 	lsr	w1, w1, #2
    4000a0ec:	37000081 	tbnz	w1, #0, 4000a0fc <__lo0bits+0x7c>
    4000a0f0:	11000400 	add	w0, w0, #0x1
    4000a0f4:	53017c21 	lsr	w1, w1, #1
    4000a0f8:	34000061 	cbz	w1, 4000a104 <__lo0bits+0x84>
    4000a0fc:	b9000041 	str	w1, [x2]
    4000a100:	d65f03c0 	ret
    4000a104:	52800400 	mov	w0, #0x20                  	// #32
    4000a108:	d65f03c0 	ret
    4000a10c:	53027c21 	lsr	w1, w1, #2
    4000a110:	52800040 	mov	w0, #0x2                   	// #2
    4000a114:	b9000041 	str	w1, [x2]
    4000a118:	d65f03c0 	ret
    4000a11c:	00000000 	udf	#0

000000004000a120 <__i2b>:
    4000a120:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    4000a124:	910003fd 	mov	x29, sp
    4000a128:	f9403c02 	ldr	x2, [x0, #120]
    4000a12c:	a90153f3 	stp	x19, x20, [sp, #16]
    4000a130:	aa0003f3 	mov	x19, x0
    4000a134:	2a0103f4 	mov	w20, w1
    4000a138:	b4000162 	cbz	x2, 4000a164 <__i2b+0x44>
    4000a13c:	f9400440 	ldr	x0, [x2, #8]
    4000a140:	b40002c0 	cbz	x0, 4000a198 <__i2b+0x78>
    4000a144:	f9400001 	ldr	x1, [x0]
    4000a148:	f9000441 	str	x1, [x2, #8]
    4000a14c:	d2c00021 	mov	x1, #0x100000000           	// #4294967296
    4000a150:	f9000801 	str	x1, [x0, #16]
    4000a154:	b9001814 	str	w20, [x0, #24]
    4000a158:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000a15c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    4000a160:	d65f03c0 	ret
    4000a164:	d2800822 	mov	x2, #0x41                  	// #65
    4000a168:	d2800101 	mov	x1, #0x8                   	// #8
    4000a16c:	940018f5 	bl	40010540 <_calloc_r>
    4000a170:	f9003e60 	str	x0, [x19, #120]
    4000a174:	aa0003e2 	mov	x2, x0
    4000a178:	b5fffe20 	cbnz	x0, 4000a13c <__i2b+0x1c>
    4000a17c:	900000c3 	adrp	x3, 40022000 <__pow_log_data+0xcc8>
    4000a180:	900000c0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    4000a184:	91372063 	add	x3, x3, #0xdc8
    4000a188:	9139c000 	add	x0, x0, #0xe70
    4000a18c:	d2800002 	mov	x2, #0x0                   	// #0
    4000a190:	52802801 	mov	w1, #0x140                 	// #320
    4000a194:	940018d3 	bl	400104e0 <__assert_func>
    4000a198:	aa1303e0 	mov	x0, x19
    4000a19c:	d2800482 	mov	x2, #0x24                  	// #36
    4000a1a0:	d2800021 	mov	x1, #0x1                   	// #1
    4000a1a4:	940018e7 	bl	40010540 <_calloc_r>
    4000a1a8:	b4fffea0 	cbz	x0, 4000a17c <__i2b+0x5c>
    4000a1ac:	d2800021 	mov	x1, #0x1                   	// #1
    4000a1b0:	b9001814 	str	w20, [x0, #24]
    4000a1b4:	f2c00041 	movk	x1, #0x2, lsl #32
    4000a1b8:	f9000401 	str	x1, [x0, #8]
    4000a1bc:	d2c00021 	mov	x1, #0x100000000           	// #4294967296
    4000a1c0:	f9000801 	str	x1, [x0, #16]
    4000a1c4:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000a1c8:	a8c27bfd 	ldp	x29, x30, [sp], #32
    4000a1cc:	d65f03c0 	ret

000000004000a1d0 <__multiply>:
    4000a1d0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    4000a1d4:	910003fd 	mov	x29, sp
    4000a1d8:	a9025bf5 	stp	x21, x22, [sp, #32]
    4000a1dc:	aa0103f5 	mov	x21, x1
    4000a1e0:	b9401436 	ldr	w22, [x1, #20]
    4000a1e4:	f9001bf7 	str	x23, [sp, #48]
    4000a1e8:	b9401457 	ldr	w23, [x2, #20]
    4000a1ec:	a90153f3 	stp	x19, x20, [sp, #16]
    4000a1f0:	aa0203f4 	mov	x20, x2
    4000a1f4:	6b1702df 	cmp	w22, w23
    4000a1f8:	540000eb 	b.lt	4000a214 <__multiply+0x44>  // b.tstop
    4000a1fc:	2a1703e2 	mov	w2, w23
    4000a200:	aa1403e1 	mov	x1, x20
    4000a204:	2a1603f7 	mov	w23, w22
    4000a208:	aa1503f4 	mov	x20, x21
    4000a20c:	2a0203f6 	mov	w22, w2
    4000a210:	aa0103f5 	mov	x21, x1
    4000a214:	29410a81 	ldp	w1, w2, [x20, #8]
    4000a218:	0b1602f3 	add	w19, w23, w22
    4000a21c:	6b13005f 	cmp	w2, w19
    4000a220:	1a81a421 	cinc	w1, w1, lt  // lt = tstop
    4000a224:	97fffebf 	bl	40009d20 <_Balloc>
    4000a228:	b4000ba0 	cbz	x0, 4000a39c <__multiply+0x1cc>
    4000a22c:	91006007 	add	x7, x0, #0x18
    4000a230:	8b33c8e8 	add	x8, x7, w19, sxtw #2
    4000a234:	aa0703e3 	mov	x3, x7
    4000a238:	eb0800ff 	cmp	x7, x8
    4000a23c:	54000082 	b.cs	4000a24c <__multiply+0x7c>  // b.hs, b.nlast
    4000a240:	b800447f 	str	wzr, [x3], #4
    4000a244:	eb03011f 	cmp	x8, x3
    4000a248:	54ffffc8 	b.hi	4000a240 <__multiply+0x70>  // b.pmore
    4000a24c:	910062a6 	add	x6, x21, #0x18
    4000a250:	9100628b 	add	x11, x20, #0x18
    4000a254:	8b36c8c9 	add	x9, x6, w22, sxtw #2
    4000a258:	8b37c965 	add	x5, x11, w23, sxtw #2
    4000a25c:	eb0900df 	cmp	x6, x9
    4000a260:	54000842 	b.cs	4000a368 <__multiply+0x198>  // b.hs, b.nlast
    4000a264:	cb1400aa 	sub	x10, x5, x20
    4000a268:	91006694 	add	x20, x20, #0x19
    4000a26c:	d100654a 	sub	x10, x10, #0x19
    4000a270:	d2800081 	mov	x1, #0x4                   	// #4
    4000a274:	927ef54a 	and	x10, x10, #0xfffffffffffffffc
    4000a278:	eb1400bf 	cmp	x5, x20
    4000a27c:	8b01014a 	add	x10, x10, x1
    4000a280:	9a81214a 	csel	x10, x10, x1, cs  // cs = hs, nlast
    4000a284:	14000007 	b	4000a2a0 <__multiply+0xd0>
    4000a288:	53107c84 	lsr	w4, w4, #16
    4000a28c:	350003c4 	cbnz	w4, 4000a304 <__multiply+0x134>
    4000a290:	910010c6 	add	x6, x6, #0x4
    4000a294:	910010e7 	add	x7, x7, #0x4
    4000a298:	eb06013f 	cmp	x9, x6
    4000a29c:	54000669 	b.ls	4000a368 <__multiply+0x198>  // b.plast
    4000a2a0:	b94000c4 	ldr	w4, [x6]
    4000a2a4:	72003c8e 	ands	w14, w4, #0xffff
    4000a2a8:	54ffff00 	b.eq	4000a288 <__multiply+0xb8>  // b.none
    4000a2ac:	aa0703ed 	mov	x13, x7
    4000a2b0:	aa0b03ec 	mov	x12, x11
    4000a2b4:	5280000f 	mov	w15, #0x0                   	// #0
    4000a2b8:	b8404582 	ldr	w2, [x12], #4
    4000a2bc:	b94001a4 	ldr	w4, [x13]
    4000a2c0:	12003c43 	and	w3, w2, #0xffff
    4000a2c4:	12003c90 	and	w16, w4, #0xffff
    4000a2c8:	53107c41 	lsr	w1, w2, #16
    4000a2cc:	53107c84 	lsr	w4, w4, #16
    4000a2d0:	1b0e4062 	madd	w2, w3, w14, w16
    4000a2d4:	1b0e1021 	madd	w1, w1, w14, w4
    4000a2d8:	0b0f0042 	add	w2, w2, w15
    4000a2dc:	0b424021 	add	w1, w1, w2, lsr #16
    4000a2e0:	33103c22 	bfi	w2, w1, #16, #16
    4000a2e4:	b80045a2 	str	w2, [x13], #4
    4000a2e8:	53107c2f 	lsr	w15, w1, #16
    4000a2ec:	eb0c00bf 	cmp	x5, x12
    4000a2f0:	54fffe48 	b.hi	4000a2b8 <__multiply+0xe8>  // b.pmore
    4000a2f4:	b82a68ef 	str	w15, [x7, x10]
    4000a2f8:	b94000c4 	ldr	w4, [x6]
    4000a2fc:	53107c84 	lsr	w4, w4, #16
    4000a300:	34fffc84 	cbz	w4, 4000a290 <__multiply+0xc0>
    4000a304:	b94000e1 	ldr	w1, [x7]
    4000a308:	aa0703ed 	mov	x13, x7
    4000a30c:	aa0b03ec 	mov	x12, x11
    4000a310:	5280000e 	mov	w14, #0x0                   	// #0
    4000a314:	2a0103e3 	mov	w3, w1
    4000a318:	79400182 	ldrh	w2, [x12]
    4000a31c:	53107c63 	lsr	w3, w3, #16
    4000a320:	1b040c42 	madd	w2, w2, w4, w3
    4000a324:	0b0e0042 	add	w2, w2, w14
    4000a328:	33103c41 	bfi	w1, w2, #16, #16
    4000a32c:	b80045a1 	str	w1, [x13], #4
    4000a330:	b8404581 	ldr	w1, [x12], #4
    4000a334:	b94001a3 	ldr	w3, [x13]
    4000a338:	53107c21 	lsr	w1, w1, #16
    4000a33c:	12003c6e 	and	w14, w3, #0xffff
    4000a340:	1b043821 	madd	w1, w1, w4, w14
    4000a344:	0b424021 	add	w1, w1, w2, lsr #16
    4000a348:	53107c2e 	lsr	w14, w1, #16
    4000a34c:	eb0c00bf 	cmp	x5, x12
    4000a350:	54fffe48 	b.hi	4000a318 <__multiply+0x148>  // b.pmore
    4000a354:	910010c6 	add	x6, x6, #0x4
    4000a358:	b82a68e1 	str	w1, [x7, x10]
    4000a35c:	910010e7 	add	x7, x7, #0x4
    4000a360:	eb06013f 	cmp	x9, x6
    4000a364:	54fff9e8 	b.hi	4000a2a0 <__multiply+0xd0>  // b.pmore
    4000a368:	7100027f 	cmp	w19, #0x0
    4000a36c:	5400008c 	b.gt	4000a37c <__multiply+0x1ac>
    4000a370:	14000005 	b	4000a384 <__multiply+0x1b4>
    4000a374:	71000673 	subs	w19, w19, #0x1
    4000a378:	54000060 	b.eq	4000a384 <__multiply+0x1b4>  // b.none
    4000a37c:	b85fcd01 	ldr	w1, [x8, #-4]!
    4000a380:	34ffffa1 	cbz	w1, 4000a374 <__multiply+0x1a4>
    4000a384:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4000a388:	f9401bf7 	ldr	x23, [sp, #48]
    4000a38c:	b9001413 	str	w19, [x0, #20]
    4000a390:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000a394:	a8c47bfd 	ldp	x29, x30, [sp], #64
    4000a398:	d65f03c0 	ret
    4000a39c:	900000c3 	adrp	x3, 40022000 <__pow_log_data+0xcc8>
    4000a3a0:	900000c0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    4000a3a4:	91372063 	add	x3, x3, #0xdc8
    4000a3a8:	9139c000 	add	x0, x0, #0xe70
    4000a3ac:	d2800002 	mov	x2, #0x0                   	// #0
    4000a3b0:	52802ba1 	mov	w1, #0x15d                 	// #349
    4000a3b4:	9400184b 	bl	400104e0 <__assert_func>
	...

000000004000a3c0 <__pow5mult>:
    4000a3c0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    4000a3c4:	910003fd 	mov	x29, sp
    4000a3c8:	a90153f3 	stp	x19, x20, [sp, #16]
    4000a3cc:	2a0203f3 	mov	w19, w2
    4000a3d0:	72000442 	ands	w2, w2, #0x3
    4000a3d4:	a9025bf5 	stp	x21, x22, [sp, #32]
    4000a3d8:	aa0003f6 	mov	x22, x0
    4000a3dc:	aa0103f5 	mov	x21, x1
    4000a3e0:	54000501 	b.ne	4000a480 <__pow5mult+0xc0>  // b.any
    4000a3e4:	13027e73 	asr	w19, w19, #2
    4000a3e8:	340002f3 	cbz	w19, 4000a444 <__pow5mult+0x84>
    4000a3ec:	f9403ad4 	ldr	x20, [x22, #112]
    4000a3f0:	b4000594 	cbz	x20, 4000a4a0 <__pow5mult+0xe0>
    4000a3f4:	370000f3 	tbnz	w19, #0, 4000a410 <__pow5mult+0x50>
    4000a3f8:	13017e73 	asr	w19, w19, #1
    4000a3fc:	34000253 	cbz	w19, 4000a444 <__pow5mult+0x84>
    4000a400:	f9400280 	ldr	x0, [x20]
    4000a404:	b40002a0 	cbz	x0, 4000a458 <__pow5mult+0x98>
    4000a408:	aa0003f4 	mov	x20, x0
    4000a40c:	3607ff73 	tbz	w19, #0, 4000a3f8 <__pow5mult+0x38>
    4000a410:	aa1403e2 	mov	x2, x20
    4000a414:	aa1503e1 	mov	x1, x21
    4000a418:	aa1603e0 	mov	x0, x22
    4000a41c:	97ffff6d 	bl	4000a1d0 <__multiply>
    4000a420:	b40002d5 	cbz	x21, 4000a478 <__pow5mult+0xb8>
    4000a424:	b9800aa2 	ldrsw	x2, [x21, #8]
    4000a428:	13017e73 	asr	w19, w19, #1
    4000a42c:	f9403ec1 	ldr	x1, [x22, #120]
    4000a430:	f8627823 	ldr	x3, [x1, x2, lsl #3]
    4000a434:	f90002a3 	str	x3, [x21]
    4000a438:	f8227835 	str	x21, [x1, x2, lsl #3]
    4000a43c:	aa0003f5 	mov	x21, x0
    4000a440:	35fffe13 	cbnz	w19, 4000a400 <__pow5mult+0x40>
    4000a444:	aa1503e0 	mov	x0, x21
    4000a448:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000a44c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4000a450:	a8c37bfd 	ldp	x29, x30, [sp], #48
    4000a454:	d65f03c0 	ret
    4000a458:	aa1403e2 	mov	x2, x20
    4000a45c:	aa1403e1 	mov	x1, x20
    4000a460:	aa1603e0 	mov	x0, x22
    4000a464:	97ffff5b 	bl	4000a1d0 <__multiply>
    4000a468:	f9000280 	str	x0, [x20]
    4000a46c:	aa0003f4 	mov	x20, x0
    4000a470:	f900001f 	str	xzr, [x0]
    4000a474:	17ffffe6 	b	4000a40c <__pow5mult+0x4c>
    4000a478:	aa0003f5 	mov	x21, x0
    4000a47c:	17ffffdf 	b	4000a3f8 <__pow5mult+0x38>
    4000a480:	51000442 	sub	w2, w2, #0x1
    4000a484:	900000c4 	adrp	x4, 40022000 <__pow_log_data+0xcc8>
    4000a488:	913f0084 	add	x4, x4, #0xfc0
    4000a48c:	52800003 	mov	w3, #0x0                   	// #0
    4000a490:	b862d882 	ldr	w2, [x4, w2, sxtw #2]
    4000a494:	97fffe4f 	bl	40009dd0 <__multadd>
    4000a498:	aa0003f5 	mov	x21, x0
    4000a49c:	17ffffd2 	b	4000a3e4 <__pow5mult+0x24>
    4000a4a0:	aa1603e0 	mov	x0, x22
    4000a4a4:	52800021 	mov	w1, #0x1                   	// #1
    4000a4a8:	97fffe1e 	bl	40009d20 <_Balloc>
    4000a4ac:	aa0003f4 	mov	x20, x0
    4000a4b0:	b40000e0 	cbz	x0, 4000a4cc <__pow5mult+0x10c>
    4000a4b4:	d2800020 	mov	x0, #0x1                   	// #1
    4000a4b8:	f2c04e20 	movk	x0, #0x271, lsl #32
    4000a4bc:	f8014280 	stur	x0, [x20, #20]
    4000a4c0:	f9003ad4 	str	x20, [x22, #112]
    4000a4c4:	f900029f 	str	xzr, [x20]
    4000a4c8:	17ffffcb 	b	4000a3f4 <__pow5mult+0x34>
    4000a4cc:	900000c3 	adrp	x3, 40022000 <__pow_log_data+0xcc8>
    4000a4d0:	900000c0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    4000a4d4:	91372063 	add	x3, x3, #0xdc8
    4000a4d8:	9139c000 	add	x0, x0, #0xe70
    4000a4dc:	d2800002 	mov	x2, #0x0                   	// #0
    4000a4e0:	52802801 	mov	w1, #0x140                 	// #320
    4000a4e4:	940017ff 	bl	400104e0 <__assert_func>
	...

000000004000a4f0 <__lshift>:
    4000a4f0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    4000a4f4:	910003fd 	mov	x29, sp
    4000a4f8:	a9025bf5 	stp	x21, x22, [sp, #32]
    4000a4fc:	b9401436 	ldr	w22, [x1, #20]
    4000a500:	a90363f7 	stp	x23, x24, [sp, #48]
    4000a504:	13057c58 	asr	w24, w2, #5
    4000a508:	b9400c23 	ldr	w3, [x1, #12]
    4000a50c:	0b160316 	add	w22, w24, w22
    4000a510:	a90153f3 	stp	x19, x20, [sp, #16]
    4000a514:	110006d5 	add	w21, w22, #0x1
    4000a518:	aa0103f4 	mov	x20, x1
    4000a51c:	2a0203f3 	mov	w19, w2
    4000a520:	b9400821 	ldr	w1, [x1, #8]
    4000a524:	aa0003f7 	mov	x23, x0
    4000a528:	6b0302bf 	cmp	w21, w3
    4000a52c:	540000ad 	b.le	4000a540 <__lshift+0x50>
    4000a530:	531f7863 	lsl	w3, w3, #1
    4000a534:	11000421 	add	w1, w1, #0x1
    4000a538:	6b0302bf 	cmp	w21, w3
    4000a53c:	54ffffac 	b.gt	4000a530 <__lshift+0x40>
    4000a540:	aa1703e0 	mov	x0, x23
    4000a544:	97fffdf7 	bl	40009d20 <_Balloc>
    4000a548:	b40007a0 	cbz	x0, 4000a63c <__lshift+0x14c>
    4000a54c:	91006005 	add	x5, x0, #0x18
    4000a550:	7100031f 	cmp	w24, #0x0
    4000a554:	5400012d 	b.le	4000a578 <__lshift+0x88>
    4000a558:	11001b04 	add	w4, w24, #0x6
    4000a55c:	aa0503e3 	mov	x3, x5
    4000a560:	8b040804 	add	x4, x0, x4, lsl #2
    4000a564:	d503201f 	nop
    4000a568:	b800447f 	str	wzr, [x3], #4
    4000a56c:	eb04007f 	cmp	x3, x4
    4000a570:	54ffffc1 	b.ne	4000a568 <__lshift+0x78>  // b.any
    4000a574:	8b3848a5 	add	x5, x5, w24, uxtw #2
    4000a578:	b9801686 	ldrsw	x6, [x20, #20]
    4000a57c:	91006283 	add	x3, x20, #0x18
    4000a580:	72001267 	ands	w7, w19, #0x1f
    4000a584:	8b060866 	add	x6, x3, x6, lsl #2
    4000a588:	54000480 	b.eq	4000a618 <__lshift+0x128>  // b.none
    4000a58c:	52800408 	mov	w8, #0x20                  	// #32
    4000a590:	aa0503e1 	mov	x1, x5
    4000a594:	4b070108 	sub	w8, w8, w7
    4000a598:	52800004 	mov	w4, #0x0                   	// #0
    4000a59c:	d503201f 	nop
    4000a5a0:	b9400062 	ldr	w2, [x3]
    4000a5a4:	1ac72042 	lsl	w2, w2, w7
    4000a5a8:	2a040042 	orr	w2, w2, w4
    4000a5ac:	b8004422 	str	w2, [x1], #4
    4000a5b0:	b8404462 	ldr	w2, [x3], #4
    4000a5b4:	1ac82444 	lsr	w4, w2, w8
    4000a5b8:	eb0300df 	cmp	x6, x3
    4000a5bc:	54ffff28 	b.hi	4000a5a0 <__lshift+0xb0>  // b.pmore
    4000a5c0:	cb1400c1 	sub	x1, x6, x20
    4000a5c4:	91006682 	add	x2, x20, #0x19
    4000a5c8:	d1006421 	sub	x1, x1, #0x19
    4000a5cc:	eb0200df 	cmp	x6, x2
    4000a5d0:	927ef421 	and	x1, x1, #0xfffffffffffffffc
    4000a5d4:	d2800082 	mov	x2, #0x4                   	// #4
    4000a5d8:	8b020021 	add	x1, x1, x2
    4000a5dc:	9a822021 	csel	x1, x1, x2, cs  // cs = hs, nlast
    4000a5e0:	7100009f 	cmp	w4, #0x0
    4000a5e4:	1a9502d6 	csel	w22, w22, w21, eq  // eq = none
    4000a5e8:	b82168a4 	str	w4, [x5, x1]
    4000a5ec:	b9800a82 	ldrsw	x2, [x20, #8]
    4000a5f0:	f9403ee1 	ldr	x1, [x23, #120]
    4000a5f4:	a94363f7 	ldp	x23, x24, [sp, #48]
    4000a5f8:	f8627823 	ldr	x3, [x1, x2, lsl #3]
    4000a5fc:	b9001416 	str	w22, [x0, #20]
    4000a600:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4000a604:	f9000283 	str	x3, [x20]
    4000a608:	f8227834 	str	x20, [x1, x2, lsl #3]
    4000a60c:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000a610:	a8c47bfd 	ldp	x29, x30, [sp], #64
    4000a614:	d65f03c0 	ret
    4000a618:	b8404461 	ldr	w1, [x3], #4
    4000a61c:	b80044a1 	str	w1, [x5], #4
    4000a620:	eb0300df 	cmp	x6, x3
    4000a624:	54fffe49 	b.ls	4000a5ec <__lshift+0xfc>  // b.plast
    4000a628:	b8404461 	ldr	w1, [x3], #4
    4000a62c:	b80044a1 	str	w1, [x5], #4
    4000a630:	eb0300df 	cmp	x6, x3
    4000a634:	54ffff28 	b.hi	4000a618 <__lshift+0x128>  // b.pmore
    4000a638:	17ffffed 	b	4000a5ec <__lshift+0xfc>
    4000a63c:	900000c3 	adrp	x3, 40022000 <__pow_log_data+0xcc8>
    4000a640:	900000c0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    4000a644:	91372063 	add	x3, x3, #0xdc8
    4000a648:	9139c000 	add	x0, x0, #0xe70
    4000a64c:	d2800002 	mov	x2, #0x0                   	// #0
    4000a650:	52803b21 	mov	w1, #0x1d9                 	// #473
    4000a654:	940017a3 	bl	400104e0 <__assert_func>
	...

000000004000a660 <__mcmp>:
    4000a660:	b9401422 	ldr	w2, [x1, #20]
    4000a664:	aa0003e5 	mov	x5, x0
    4000a668:	b9401400 	ldr	w0, [x0, #20]
    4000a66c:	6b020000 	subs	w0, w0, w2
    4000a670:	540001e1 	b.ne	4000a6ac <__mcmp+0x4c>  // b.any
    4000a674:	937e7c43 	sbfiz	x3, x2, #2, #32
    4000a678:	910060a5 	add	x5, x5, #0x18
    4000a67c:	91006021 	add	x1, x1, #0x18
    4000a680:	8b0300a2 	add	x2, x5, x3
    4000a684:	8b030021 	add	x1, x1, x3
    4000a688:	14000003 	b	4000a694 <__mcmp+0x34>
    4000a68c:	eb0200bf 	cmp	x5, x2
    4000a690:	540000e2 	b.cs	4000a6ac <__mcmp+0x4c>  // b.hs, b.nlast
    4000a694:	b85fcc44 	ldr	w4, [x2, #-4]!
    4000a698:	b85fcc23 	ldr	w3, [x1, #-4]!
    4000a69c:	6b03009f 	cmp	w4, w3
    4000a6a0:	54ffff60 	b.eq	4000a68c <__mcmp+0x2c>  // b.none
    4000a6a4:	52800020 	mov	w0, #0x1                   	// #1
    4000a6a8:	5a9f2000 	csinv	w0, w0, wzr, cs  // cs = hs, nlast
    4000a6ac:	d65f03c0 	ret

000000004000a6b0 <__mdiff>:
    4000a6b0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    4000a6b4:	910003fd 	mov	x29, sp
    4000a6b8:	b9401443 	ldr	w3, [x2, #20]
    4000a6bc:	a90153f3 	stp	x19, x20, [sp, #16]
    4000a6c0:	aa0103f4 	mov	x20, x1
    4000a6c4:	aa0203f3 	mov	x19, x2
    4000a6c8:	f90013f5 	str	x21, [sp, #32]
    4000a6cc:	b9401435 	ldr	w21, [x1, #20]
    4000a6d0:	6b0302b5 	subs	w21, w21, w3
    4000a6d4:	35000a35 	cbnz	w21, 4000a818 <__mdiff+0x168>
    4000a6d8:	937e7c61 	sbfiz	x1, x3, #2, #32
    4000a6dc:	91006285 	add	x5, x20, #0x18
    4000a6e0:	91006043 	add	x3, x2, #0x18
    4000a6e4:	8b0100a2 	add	x2, x5, x1
    4000a6e8:	8b010063 	add	x3, x3, x1
    4000a6ec:	14000003 	b	4000a6f8 <__mdiff+0x48>
    4000a6f0:	eb0200bf 	cmp	x5, x2
    4000a6f4:	54000a02 	b.cs	4000a834 <__mdiff+0x184>  // b.hs, b.nlast
    4000a6f8:	b85fcc44 	ldr	w4, [x2, #-4]!
    4000a6fc:	b85fcc61 	ldr	w1, [x3, #-4]!
    4000a700:	6b01009f 	cmp	w4, w1
    4000a704:	54ffff60 	b.eq	4000a6f0 <__mdiff+0x40>  // b.none
    4000a708:	540008c3 	b.cc	4000a820 <__mdiff+0x170>  // b.lo, b.ul, b.last
    4000a70c:	b9400a81 	ldr	w1, [x20, #8]
    4000a710:	97fffd84 	bl	40009d20 <_Balloc>
    4000a714:	b4000a20 	cbz	x0, 4000a858 <__mdiff+0x1a8>
    4000a718:	b9801661 	ldrsw	x1, [x19, #20]
    4000a71c:	9100628b 	add	x11, x20, #0x18
    4000a720:	b9401689 	ldr	w9, [x20, #20]
    4000a724:	9100626a 	add	x10, x19, #0x18
    4000a728:	9100600c 	add	x12, x0, #0x18
    4000a72c:	d2800306 	mov	x6, #0x18                  	// #24
    4000a730:	8b01094a 	add	x10, x10, x1, lsl #2
    4000a734:	52800008 	mov	w8, #0x0                   	// #0
    4000a738:	8b29c96d 	add	x13, x11, w9, sxtw #2
    4000a73c:	b9001015 	str	w21, [x0, #16]
    4000a740:	b8666a87 	ldr	w7, [x20, x6]
    4000a744:	b8666a65 	ldr	w5, [x19, x6]
    4000a748:	0b272103 	add	w3, w8, w7, uxth
    4000a74c:	53107ce4 	lsr	w4, w7, #16
    4000a750:	4b252063 	sub	w3, w3, w5, uxth
    4000a754:	4b454084 	sub	w4, w4, w5, lsr #16
    4000a758:	0b834084 	add	w4, w4, w3, asr #16
    4000a75c:	33103c83 	bfi	w3, w4, #16, #16
    4000a760:	b8266803 	str	w3, [x0, x6]
    4000a764:	910010c6 	add	x6, x6, #0x4
    4000a768:	13107c88 	asr	w8, w4, #16
    4000a76c:	8b060261 	add	x1, x19, x6
    4000a770:	eb01015f 	cmp	x10, x1
    4000a774:	54fffe68 	b.hi	4000a740 <__mdiff+0x90>  // b.pmore
    4000a778:	cb130141 	sub	x1, x10, x19
    4000a77c:	91006673 	add	x19, x19, #0x19
    4000a780:	d1006421 	sub	x1, x1, #0x19
    4000a784:	eb13015f 	cmp	x10, x19
    4000a788:	927ef42a 	and	x10, x1, #0xfffffffffffffffc
    4000a78c:	d2800082 	mov	x2, #0x4                   	// #4
    4000a790:	aa0a03e1 	mov	x1, x10
    4000a794:	9100114a 	add	x10, x10, #0x4
    4000a798:	9a82214a 	csel	x10, x10, x2, cs  // cs = hs, nlast
    4000a79c:	9a9f2021 	csel	x1, x1, xzr, cs  // cs = hs, nlast
    4000a7a0:	8b0a0167 	add	x7, x11, x10
    4000a7a4:	8b010181 	add	x1, x12, x1
    4000a7a8:	8b0a018a 	add	x10, x12, x10
    4000a7ac:	eb0701bf 	cmp	x13, x7
    4000a7b0:	54000229 	b.ls	4000a7f4 <__mdiff+0x144>  // b.plast
    4000a7b4:	d10005a2 	sub	x2, x13, #0x1
    4000a7b8:	d2800001 	mov	x1, #0x0                   	// #0
    4000a7bc:	cb070042 	sub	x2, x2, x7
    4000a7c0:	d342fc42 	lsr	x2, x2, #2
    4000a7c4:	d503201f 	nop
    4000a7c8:	b86178e4 	ldr	w4, [x7, x1, lsl #2]
    4000a7cc:	eb01005f 	cmp	x2, x1
    4000a7d0:	0b242103 	add	w3, w8, w4, uxth
    4000a7d4:	13107c66 	asr	w6, w3, #16
    4000a7d8:	0b4440c4 	add	w4, w6, w4, lsr #16
    4000a7dc:	33103c83 	bfi	w3, w4, #16, #16
    4000a7e0:	b8217943 	str	w3, [x10, x1, lsl #2]
    4000a7e4:	13107c88 	asr	w8, w4, #16
    4000a7e8:	91000421 	add	x1, x1, #0x1
    4000a7ec:	54fffee1 	b.ne	4000a7c8 <__mdiff+0x118>  // b.any
    4000a7f0:	8b020941 	add	x1, x10, x2, lsl #2
    4000a7f4:	35000083 	cbnz	w3, 4000a804 <__mdiff+0x154>
    4000a7f8:	b85fcc22 	ldr	w2, [x1, #-4]!
    4000a7fc:	51000529 	sub	w9, w9, #0x1
    4000a800:	34ffffc2 	cbz	w2, 4000a7f8 <__mdiff+0x148>
    4000a804:	b9001409 	str	w9, [x0, #20]
    4000a808:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000a80c:	f94013f5 	ldr	x21, [sp, #32]
    4000a810:	a8c37bfd 	ldp	x29, x30, [sp], #48
    4000a814:	d65f03c0 	ret
    4000a818:	52800015 	mov	w21, #0x0                   	// #0
    4000a81c:	54fff785 	b.pl	4000a70c <__mdiff+0x5c>  // b.nfrst
    4000a820:	aa1403e1 	mov	x1, x20
    4000a824:	52800035 	mov	w21, #0x1                   	// #1
    4000a828:	aa1303f4 	mov	x20, x19
    4000a82c:	aa0103f3 	mov	x19, x1
    4000a830:	17ffffb7 	b	4000a70c <__mdiff+0x5c>
    4000a834:	52800001 	mov	w1, #0x0                   	// #0
    4000a838:	97fffd3a 	bl	40009d20 <_Balloc>
    4000a83c:	b40001c0 	cbz	x0, 4000a874 <__mdiff+0x1c4>
    4000a840:	d2800021 	mov	x1, #0x1                   	// #1
    4000a844:	f8014001 	stur	x1, [x0, #20]
    4000a848:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000a84c:	f94013f5 	ldr	x21, [sp, #32]
    4000a850:	a8c37bfd 	ldp	x29, x30, [sp], #48
    4000a854:	d65f03c0 	ret
    4000a858:	900000c3 	adrp	x3, 40022000 <__pow_log_data+0xcc8>
    4000a85c:	900000c0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    4000a860:	91372063 	add	x3, x3, #0xdc8
    4000a864:	9139c000 	add	x0, x0, #0xe70
    4000a868:	d2800002 	mov	x2, #0x0                   	// #0
    4000a86c:	52804801 	mov	w1, #0x240                 	// #576
    4000a870:	9400171c 	bl	400104e0 <__assert_func>
    4000a874:	900000c3 	adrp	x3, 40022000 <__pow_log_data+0xcc8>
    4000a878:	900000c0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    4000a87c:	91372063 	add	x3, x3, #0xdc8
    4000a880:	9139c000 	add	x0, x0, #0xe70
    4000a884:	d2800002 	mov	x2, #0x0                   	// #0
    4000a888:	52804641 	mov	w1, #0x232                 	// #562
    4000a88c:	94001715 	bl	400104e0 <__assert_func>

000000004000a890 <__ulp>:
    4000a890:	9e660000 	fmov	x0, d0
    4000a894:	52bf9801 	mov	w1, #0xfcc00000            	// #-54525952
    4000a898:	d360fc00 	lsr	x0, x0, #32
    4000a89c:	120c2800 	and	w0, w0, #0x7ff00000
    4000a8a0:	0b010000 	add	w0, w0, w1
    4000a8a4:	7100001f 	cmp	w0, #0x0
    4000a8a8:	5400008d 	b.le	4000a8b8 <__ulp+0x28>
    4000a8ac:	d3607c00 	lsl	x0, x0, #32
    4000a8b0:	9e670000 	fmov	d0, x0
    4000a8b4:	d65f03c0 	ret
    4000a8b8:	4b0003e0 	neg	w0, w0
    4000a8bc:	13147c00 	asr	w0, w0, #20
    4000a8c0:	71004c1f 	cmp	w0, #0x13
    4000a8c4:	5400008c 	b.gt	4000a8d4 <__ulp+0x44>
    4000a8c8:	52a00101 	mov	w1, #0x80000               	// #524288
    4000a8cc:	1ac02820 	asr	w0, w1, w0
    4000a8d0:	17fffff7 	b	4000a8ac <__ulp+0x1c>
    4000a8d4:	51005002 	sub	w2, w0, #0x14
    4000a8d8:	52b00001 	mov	w1, #0x80000000            	// #-2147483648
    4000a8dc:	71007c5f 	cmp	w2, #0x1f
    4000a8e0:	d2800000 	mov	x0, #0x0                   	// #0
    4000a8e4:	1ac22421 	lsr	w1, w1, w2
    4000a8e8:	1a9fb421 	csinc	w1, w1, wzr, lt  // lt = tstop
    4000a8ec:	b3407c20 	bfxil	x0, x1, #0, #32
    4000a8f0:	9e670000 	fmov	d0, x0
    4000a8f4:	d65f03c0 	ret
	...

000000004000a900 <__b2d>:
    4000a900:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    4000a904:	91006005 	add	x5, x0, #0x18
    4000a908:	aa0103e4 	mov	x4, x1
    4000a90c:	910003fd 	mov	x29, sp
    4000a910:	b9801403 	ldrsw	x3, [x0, #20]
    4000a914:	8b0308a3 	add	x3, x5, x3, lsl #2
    4000a918:	d1001066 	sub	x6, x3, #0x4
    4000a91c:	b85fc062 	ldur	w2, [x3, #-4]
    4000a920:	2a0203e0 	mov	w0, w2
    4000a924:	97fffdbf 	bl	4000a020 <__hi0bits>
    4000a928:	52800401 	mov	w1, #0x20                  	// #32
    4000a92c:	4b000027 	sub	w7, w1, w0
    4000a930:	b9000087 	str	w7, [x4]
    4000a934:	7100281f 	cmp	w0, #0xa
    4000a938:	5400042d 	b.le	4000a9bc <__b2d+0xbc>
    4000a93c:	51002c00 	sub	w0, w0, #0xb
    4000a940:	eb0600bf 	cmp	x5, x6
    4000a944:	540002a2 	b.cs	4000a998 <__b2d+0x98>  // b.hs, b.nlast
    4000a948:	b85f8066 	ldur	w6, [x3, #-8]
    4000a94c:	340002a0 	cbz	w0, 4000a9a0 <__b2d+0xa0>
    4000a950:	4b000024 	sub	w4, w1, w0
    4000a954:	1ac02042 	lsl	w2, w2, w0
    4000a958:	d2800001 	mov	x1, #0x0                   	// #0
    4000a95c:	d1002067 	sub	x7, x3, #0x8
    4000a960:	1ac424c8 	lsr	w8, w6, w4
    4000a964:	2a080042 	orr	w2, w2, w8
    4000a968:	320c2442 	orr	w2, w2, #0x3ff00000
    4000a96c:	1ac020c0 	lsl	w0, w6, w0
    4000a970:	b3607c41 	bfi	x1, x2, #32, #32
    4000a974:	eb0700bf 	cmp	x5, x7
    4000a978:	54000082 	b.cs	4000a988 <__b2d+0x88>  // b.hs, b.nlast
    4000a97c:	b85f4062 	ldur	w2, [x3, #-12]
    4000a980:	1ac42444 	lsr	w4, w2, w4
    4000a984:	2a040000 	orr	w0, w0, w4
    4000a988:	b3407c01 	bfxil	x1, x0, #0, #32
    4000a98c:	9e670020 	fmov	d0, x1
    4000a990:	a8c17bfd 	ldp	x29, x30, [sp], #16
    4000a994:	d65f03c0 	ret
    4000a998:	52800006 	mov	w6, #0x0                   	// #0
    4000a99c:	35000340 	cbnz	w0, 4000aa04 <__b2d+0x104>
    4000a9a0:	320c2442 	orr	w2, w2, #0x3ff00000
    4000a9a4:	d2800001 	mov	x1, #0x0                   	// #0
    4000a9a8:	a8c17bfd 	ldp	x29, x30, [sp], #16
    4000a9ac:	b3607c41 	bfi	x1, x2, #32, #32
    4000a9b0:	b3407cc1 	bfxil	x1, x6, #0, #32
    4000a9b4:	9e670020 	fmov	d0, x1
    4000a9b8:	d65f03c0 	ret
    4000a9bc:	52800164 	mov	w4, #0xb                   	// #11
    4000a9c0:	4b000084 	sub	w4, w4, w0
    4000a9c4:	d2800001 	mov	x1, #0x0                   	// #0
    4000a9c8:	52800008 	mov	w8, #0x0                   	// #0
    4000a9cc:	1ac42447 	lsr	w7, w2, w4
    4000a9d0:	320c24e7 	orr	w7, w7, #0x3ff00000
    4000a9d4:	b3607ce1 	bfi	x1, x7, #32, #32
    4000a9d8:	eb0600bf 	cmp	x5, x6
    4000a9dc:	54000062 	b.cs	4000a9e8 <__b2d+0xe8>  // b.hs, b.nlast
    4000a9e0:	b85f8068 	ldur	w8, [x3, #-8]
    4000a9e4:	1ac42508 	lsr	w8, w8, w4
    4000a9e8:	11005400 	add	w0, w0, #0x15
    4000a9ec:	a8c17bfd 	ldp	x29, x30, [sp], #16
    4000a9f0:	1ac02040 	lsl	w0, w2, w0
    4000a9f4:	2a080000 	orr	w0, w0, w8
    4000a9f8:	b3407c01 	bfxil	x1, x0, #0, #32
    4000a9fc:	9e670020 	fmov	d0, x1
    4000aa00:	d65f03c0 	ret
    4000aa04:	1ac02040 	lsl	w0, w2, w0
    4000aa08:	320c2402 	orr	w2, w0, #0x3ff00000
    4000aa0c:	d2800001 	mov	x1, #0x0                   	// #0
    4000aa10:	52800000 	mov	w0, #0x0                   	// #0
    4000aa14:	b3607c41 	bfi	x1, x2, #32, #32
    4000aa18:	b3407c01 	bfxil	x1, x0, #0, #32
    4000aa1c:	17ffffdc 	b	4000a98c <__b2d+0x8c>

000000004000aa20 <__d2b>:
    4000aa20:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    4000aa24:	910003fd 	mov	x29, sp
    4000aa28:	fd0013e8 	str	d8, [sp, #32]
    4000aa2c:	1e604008 	fmov	d8, d0
    4000aa30:	a90153f3 	stp	x19, x20, [sp, #16]
    4000aa34:	aa0103f4 	mov	x20, x1
    4000aa38:	aa0203f3 	mov	x19, x2
    4000aa3c:	52800021 	mov	w1, #0x1                   	// #1
    4000aa40:	97fffcb8 	bl	40009d20 <_Balloc>
    4000aa44:	b40007e0 	cbz	x0, 4000ab40 <__d2b+0x120>
    4000aa48:	9e660103 	fmov	x3, d8
    4000aa4c:	aa0003e4 	mov	x4, x0
    4000aa50:	d374f865 	ubfx	x5, x3, #52, #11
    4000aa54:	d360cc60 	ubfx	x0, x3, #32, #20
    4000aa58:	320c0001 	orr	w1, w0, #0x100000
    4000aa5c:	710000bf 	cmp	w5, #0x0
    4000aa60:	1a810000 	csel	w0, w0, w1, eq  // eq = none
    4000aa64:	b9003fe0 	str	w0, [sp, #60]
    4000aa68:	340003c3 	cbz	w3, 4000aae0 <__d2b+0xc0>
    4000aa6c:	9100e3e0 	add	x0, sp, #0x38
    4000aa70:	bd003be8 	str	s8, [sp, #56]
    4000aa74:	97fffd83 	bl	4000a080 <__lo0bits>
    4000aa78:	b9403fe1 	ldr	w1, [sp, #60]
    4000aa7c:	340005c0 	cbz	w0, 4000ab34 <__d2b+0x114>
    4000aa80:	b9403be3 	ldr	w3, [sp, #56]
    4000aa84:	4b0003e2 	neg	w2, w0
    4000aa88:	1ac22022 	lsl	w2, w1, w2
    4000aa8c:	2a030042 	orr	w2, w2, w3
    4000aa90:	1ac02421 	lsr	w1, w1, w0
    4000aa94:	b9001882 	str	w2, [x4, #24]
    4000aa98:	b9003fe1 	str	w1, [sp, #60]
    4000aa9c:	7100003f 	cmp	w1, #0x0
    4000aaa0:	b9001c81 	str	w1, [x4, #28]
    4000aaa4:	1a9f07e2 	cset	w2, ne  // ne = any
    4000aaa8:	11000442 	add	w2, w2, #0x1
    4000aaac:	b9001482 	str	w2, [x4, #20]
    4000aab0:	34000285 	cbz	w5, 4000ab00 <__d2b+0xe0>
    4000aab4:	5110cca5 	sub	w5, w5, #0x433
    4000aab8:	528006a1 	mov	w1, #0x35                  	// #53
    4000aabc:	0b0000a5 	add	w5, w5, w0
    4000aac0:	b9000285 	str	w5, [x20]
    4000aac4:	4b000020 	sub	w0, w1, w0
    4000aac8:	b9000260 	str	w0, [x19]
    4000aacc:	aa0403e0 	mov	x0, x4
    4000aad0:	fd4013e8 	ldr	d8, [sp, #32]
    4000aad4:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000aad8:	a8c47bfd 	ldp	x29, x30, [sp], #64
    4000aadc:	d65f03c0 	ret
    4000aae0:	9100f3e0 	add	x0, sp, #0x3c
    4000aae4:	97fffd67 	bl	4000a080 <__lo0bits>
    4000aae8:	b9403fe3 	ldr	w3, [sp, #60]
    4000aaec:	52800021 	mov	w1, #0x1                   	// #1
    4000aaf0:	29028c81 	stp	w1, w3, [x4, #20]
    4000aaf4:	11008000 	add	w0, w0, #0x20
    4000aaf8:	2a0103e2 	mov	w2, w1
    4000aafc:	35fffdc5 	cbnz	w5, 4000aab4 <__d2b+0x94>
    4000ab00:	8b22c881 	add	x1, x4, w2, sxtw #2
    4000ab04:	5110c800 	sub	w0, w0, #0x432
    4000ab08:	b9000280 	str	w0, [x20]
    4000ab0c:	531b6842 	lsl	w2, w2, #5
    4000ab10:	b9401420 	ldr	w0, [x1, #20]
    4000ab14:	97fffd43 	bl	4000a020 <__hi0bits>
    4000ab18:	4b000042 	sub	w2, w2, w0
    4000ab1c:	b9000262 	str	w2, [x19]
    4000ab20:	aa0403e0 	mov	x0, x4
    4000ab24:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000ab28:	fd4013e8 	ldr	d8, [sp, #32]
    4000ab2c:	a8c47bfd 	ldp	x29, x30, [sp], #64
    4000ab30:	d65f03c0 	ret
    4000ab34:	b9403be2 	ldr	w2, [sp, #56]
    4000ab38:	b9001882 	str	w2, [x4, #24]
    4000ab3c:	17ffffd8 	b	4000aa9c <__d2b+0x7c>
    4000ab40:	900000c3 	adrp	x3, 40022000 <__pow_log_data+0xcc8>
    4000ab44:	900000c0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    4000ab48:	91372063 	add	x3, x3, #0xdc8
    4000ab4c:	9139c000 	add	x0, x0, #0xe70
    4000ab50:	d2800002 	mov	x2, #0x0                   	// #0
    4000ab54:	52806141 	mov	w1, #0x30a                 	// #778
    4000ab58:	94001662 	bl	400104e0 <__assert_func>
    4000ab5c:	00000000 	udf	#0

000000004000ab60 <__ratio>:
    4000ab60:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    4000ab64:	aa0103e9 	mov	x9, x1
    4000ab68:	aa0003ea 	mov	x10, x0
    4000ab6c:	910003fd 	mov	x29, sp
    4000ab70:	910063e1 	add	x1, sp, #0x18
    4000ab74:	97ffff63 	bl	4000a900 <__b2d>
    4000ab78:	aa0903e0 	mov	x0, x9
    4000ab7c:	910073e1 	add	x1, sp, #0x1c
    4000ab80:	1e604001 	fmov	d1, d0
    4000ab84:	97ffff5f 	bl	4000a900 <__b2d>
    4000ab88:	b9401524 	ldr	w4, [x9, #20]
    4000ab8c:	b9401540 	ldr	w0, [x10, #20]
    4000ab90:	29430fe1 	ldp	w1, w3, [sp, #24]
    4000ab94:	4b040000 	sub	w0, w0, w4
    4000ab98:	4b030021 	sub	w1, w1, w3
    4000ab9c:	0b001420 	add	w0, w1, w0, lsl #5
    4000aba0:	7100001f 	cmp	w0, #0x0
    4000aba4:	5400012d 	b.le	4000abc8 <__ratio+0x68>
    4000aba8:	9e660022 	fmov	x2, d1
    4000abac:	a8c27bfd 	ldp	x29, x30, [sp], #32
    4000abb0:	d360fc41 	lsr	x1, x2, #32
    4000abb4:	0b005020 	add	w0, w1, w0, lsl #20
    4000abb8:	b3607c02 	bfi	x2, x0, #32, #32
    4000abbc:	9e670041 	fmov	d1, x2
    4000abc0:	1e601820 	fdiv	d0, d1, d0
    4000abc4:	d65f03c0 	ret
    4000abc8:	9e660001 	fmov	x1, d0
    4000abcc:	a8c27bfd 	ldp	x29, x30, [sp], #32
    4000abd0:	d360fc22 	lsr	x2, x1, #32
    4000abd4:	4b005040 	sub	w0, w2, w0, lsl #20
    4000abd8:	b3607c01 	bfi	x1, x0, #32, #32
    4000abdc:	9e670020 	fmov	d0, x1
    4000abe0:	1e601820 	fdiv	d0, d1, d0
    4000abe4:	d65f03c0 	ret
	...

000000004000abf0 <__copybits>:
    4000abf0:	51000421 	sub	w1, w1, #0x1
    4000abf4:	91006046 	add	x6, x2, #0x18
    4000abf8:	13057c24 	asr	w4, w1, #5
    4000abfc:	b9801441 	ldrsw	x1, [x2, #20]
    4000ac00:	11000484 	add	w4, w4, #0x1
    4000ac04:	8b0108c1 	add	x1, x6, x1, lsl #2
    4000ac08:	8b24c804 	add	x4, x0, w4, sxtw #2
    4000ac0c:	eb0100df 	cmp	x6, x1
    4000ac10:	540001e2 	b.cs	4000ac4c <__copybits+0x5c>  // b.hs, b.nlast
    4000ac14:	cb020023 	sub	x3, x1, x2
    4000ac18:	d2800001 	mov	x1, #0x0                   	// #0
    4000ac1c:	d1006463 	sub	x3, x3, #0x19
    4000ac20:	d342fc63 	lsr	x3, x3, #2
    4000ac24:	91000467 	add	x7, x3, #0x1
    4000ac28:	b86178c5 	ldr	w5, [x6, x1, lsl #2]
    4000ac2c:	eb03003f 	cmp	x1, x3
    4000ac30:	b8217805 	str	w5, [x0, x1, lsl #2]
    4000ac34:	91000421 	add	x1, x1, #0x1
    4000ac38:	54ffff81 	b.ne	4000ac28 <__copybits+0x38>  // b.any
    4000ac3c:	8b070800 	add	x0, x0, x7, lsl #2
    4000ac40:	eb00009f 	cmp	x4, x0
    4000ac44:	54000089 	b.ls	4000ac54 <__copybits+0x64>  // b.plast
    4000ac48:	b800441f 	str	wzr, [x0], #4
    4000ac4c:	eb00009f 	cmp	x4, x0
    4000ac50:	54ffffc8 	b.hi	4000ac48 <__copybits+0x58>  // b.pmore
    4000ac54:	d65f03c0 	ret
	...

000000004000ac60 <__any_on>:
    4000ac60:	91006003 	add	x3, x0, #0x18
    4000ac64:	b9401400 	ldr	w0, [x0, #20]
    4000ac68:	13057c22 	asr	w2, w1, #5
    4000ac6c:	6b02001f 	cmp	w0, w2
    4000ac70:	5400012a 	b.ge	4000ac94 <__any_on+0x34>  // b.tcont
    4000ac74:	8b20c862 	add	x2, x3, w0, sxtw #2
    4000ac78:	14000003 	b	4000ac84 <__any_on+0x24>
    4000ac7c:	b85fcc40 	ldr	w0, [x2, #-4]!
    4000ac80:	35000220 	cbnz	w0, 4000acc4 <__any_on+0x64>
    4000ac84:	eb03005f 	cmp	x2, x3
    4000ac88:	54ffffa8 	b.hi	4000ac7c <__any_on+0x1c>  // b.pmore
    4000ac8c:	52800000 	mov	w0, #0x0                   	// #0
    4000ac90:	d65f03c0 	ret
    4000ac94:	93407c40 	sxtw	x0, w2
    4000ac98:	8b22c862 	add	x2, x3, w2, sxtw #2
    4000ac9c:	54ffff4d 	b.le	4000ac84 <__any_on+0x24>
    4000aca0:	72001021 	ands	w1, w1, #0x1f
    4000aca4:	54ffff00 	b.eq	4000ac84 <__any_on+0x24>  // b.none
    4000aca8:	b8607865 	ldr	w5, [x3, x0, lsl #2]
    4000acac:	52800020 	mov	w0, #0x1                   	// #1
    4000acb0:	1ac124a4 	lsr	w4, w5, w1
    4000acb4:	1ac12081 	lsl	w1, w4, w1
    4000acb8:	6b0100bf 	cmp	w5, w1
    4000acbc:	54fffe40 	b.eq	4000ac84 <__any_on+0x24>  // b.none
    4000acc0:	d65f03c0 	ret
    4000acc4:	52800020 	mov	w0, #0x1                   	// #1
    4000acc8:	d65f03c0 	ret
    4000accc:	00000000 	udf	#0

000000004000acd0 <_read_r>:
    4000acd0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    4000acd4:	910003fd 	mov	x29, sp
    4000acd8:	a90153f3 	stp	x19, x20, [sp, #16]
    4000acdc:	b00003d4 	adrp	x20, 40083000 <ws+0x3a40>
    4000ace0:	aa0003f3 	mov	x19, x0
    4000ace4:	2a0103e0 	mov	w0, w1
    4000ace8:	aa0203e1 	mov	x1, x2
    4000acec:	b90b9e9f 	str	wzr, [x20, #2972]
    4000acf0:	aa0303e2 	mov	x2, x3
    4000acf4:	94004b62 	bl	4001da7c <_read>
    4000acf8:	93407c01 	sxtw	x1, w0
    4000acfc:	3100041f 	cmn	w0, #0x1
    4000ad00:	540000a0 	b.eq	4000ad14 <_read_r+0x44>  // b.none
    4000ad04:	aa0103e0 	mov	x0, x1
    4000ad08:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000ad0c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    4000ad10:	d65f03c0 	ret
    4000ad14:	b94b9e80 	ldr	w0, [x20, #2972]
    4000ad18:	34ffff60 	cbz	w0, 4000ad04 <_read_r+0x34>
    4000ad1c:	b9000260 	str	w0, [x19]
    4000ad20:	aa0103e0 	mov	x0, x1
    4000ad24:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000ad28:	a8c27bfd 	ldp	x29, x30, [sp], #32
    4000ad2c:	d65f03c0 	ret

000000004000ad30 <lflush>:
    4000ad30:	79402002 	ldrh	w2, [x0, #16]
    4000ad34:	52800121 	mov	w1, #0x9                   	// #9
    4000ad38:	0a020021 	and	w1, w1, w2
    4000ad3c:	7100243f 	cmp	w1, #0x9
    4000ad40:	54000060 	b.eq	4000ad4c <lflush+0x1c>  // b.none
    4000ad44:	52800000 	mov	w0, #0x0                   	// #0
    4000ad48:	d65f03c0 	ret
    4000ad4c:	17ffde71 	b	40002710 <fflush>

000000004000ad50 <__srefill_r>:
    4000ad50:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    4000ad54:	910003fd 	mov	x29, sp
    4000ad58:	a90153f3 	stp	x19, x20, [sp, #16]
    4000ad5c:	aa0103f3 	mov	x19, x1
    4000ad60:	aa0003f4 	mov	x20, x0
    4000ad64:	b4000060 	cbz	x0, 4000ad70 <__srefill_r+0x20>
    4000ad68:	b9405001 	ldr	w1, [x0, #80]
    4000ad6c:	340008a1 	cbz	w1, 4000ae80 <__srefill_r+0x130>
    4000ad70:	79c02260 	ldrsh	w0, [x19, #16]
    4000ad74:	b9000a7f 	str	wzr, [x19, #8]
    4000ad78:	12003c01 	and	w1, w0, #0xffff
    4000ad7c:	37280a60 	tbnz	w0, #5, 4000aec8 <__srefill_r+0x178>
    4000ad80:	37100361 	tbnz	w1, #2, 4000adec <__srefill_r+0x9c>
    4000ad84:	36200b41 	tbz	w1, #4, 4000aeec <__srefill_r+0x19c>
    4000ad88:	371808c1 	tbnz	w1, #3, 4000aea0 <__srefill_r+0x150>
    4000ad8c:	a9025bf5 	stp	x21, x22, [sp, #32]
    4000ad90:	321e0000 	orr	w0, w0, #0x4
    4000ad94:	79002260 	strh	w0, [x19, #16]
    4000ad98:	f9400e60 	ldr	x0, [x19, #24]
    4000ad9c:	b4000440 	cbz	x0, 4000ae24 <__srefill_r+0xd4>
    4000ada0:	79c02275 	ldrsh	w21, [x19, #16]
    4000ada4:	12003eb6 	and	w22, w21, #0xffff
    4000ada8:	f24006bf 	tst	x21, #0x3
    4000adac:	540004a1 	b.ne	4000ae40 <__srefill_r+0xf0>  // b.any
    4000adb0:	a9431261 	ldp	x1, x4, [x19, #48]
    4000adb4:	aa1403e0 	mov	x0, x20
    4000adb8:	b9402263 	ldr	w3, [x19, #32]
    4000adbc:	f9400e62 	ldr	x2, [x19, #24]
    4000adc0:	f9000262 	str	x2, [x19]
    4000adc4:	d63f0080 	blr	x4
    4000adc8:	2a0003e1 	mov	w1, w0
    4000adcc:	b9000a61 	str	w1, [x19, #8]
    4000add0:	52800000 	mov	w0, #0x0                   	// #0
    4000add4:	7100003f 	cmp	w1, #0x0
    4000add8:	540007cd 	b.le	4000aed0 <__srefill_r+0x180>
    4000addc:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4000ade0:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000ade4:	a8c37bfd 	ldp	x29, x30, [sp], #48
    4000ade8:	d65f03c0 	ret
    4000adec:	f9402e61 	ldr	x1, [x19, #88]
    4000adf0:	b4000141 	cbz	x1, 4000ae18 <__srefill_r+0xc8>
    4000adf4:	9101d260 	add	x0, x19, #0x74
    4000adf8:	eb00003f 	cmp	x1, x0
    4000adfc:	54000060 	b.eq	4000ae08 <__srefill_r+0xb8>  // b.none
    4000ae00:	aa1403e0 	mov	x0, x20
    4000ae04:	97ffdffb 	bl	40002df0 <_free_r>
    4000ae08:	b9407260 	ldr	w0, [x19, #112]
    4000ae0c:	b9000a60 	str	w0, [x19, #8]
    4000ae10:	f9002e7f 	str	xzr, [x19, #88]
    4000ae14:	350003a0 	cbnz	w0, 4000ae88 <__srefill_r+0x138>
    4000ae18:	f9400e60 	ldr	x0, [x19, #24]
    4000ae1c:	a9025bf5 	stp	x21, x22, [sp, #32]
    4000ae20:	b5fffc00 	cbnz	x0, 4000ada0 <__srefill_r+0x50>
    4000ae24:	aa1303e1 	mov	x1, x19
    4000ae28:	aa1403e0 	mov	x0, x20
    4000ae2c:	97ffe209 	bl	40003650 <__smakebuf_r>
    4000ae30:	79c02275 	ldrsh	w21, [x19, #16]
    4000ae34:	12003eb6 	and	w22, w21, #0xffff
    4000ae38:	f24006bf 	tst	x21, #0x3
    4000ae3c:	54fffba0 	b.eq	4000adb0 <__srefill_r+0x60>  // b.none
    4000ae40:	900000c0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    4000ae44:	52800021 	mov	w1, #0x1                   	// #1
    4000ae48:	79002261 	strh	w1, [x19, #16]
    4000ae4c:	90000001 	adrp	x1, 4000a000 <__s2b+0x120>
    4000ae50:	f9467c00 	ldr	x0, [x0, #3320]
    4000ae54:	9134c021 	add	x1, x1, #0xd30
    4000ae58:	97ffe1aa 	bl	40003500 <_fwalk>
    4000ae5c:	79002275 	strh	w21, [x19, #16]
    4000ae60:	52800120 	mov	w0, #0x9                   	// #9
    4000ae64:	0a0002d6 	and	w22, w22, w0
    4000ae68:	6b0002df 	cmp	w22, w0
    4000ae6c:	54fffa21 	b.ne	4000adb0 <__srefill_r+0x60>  // b.any
    4000ae70:	aa1303e1 	mov	x1, x19
    4000ae74:	aa1403e0 	mov	x0, x20
    4000ae78:	97ffdd72 	bl	40002440 <__sflush_r>
    4000ae7c:	17ffffcd 	b	4000adb0 <__srefill_r+0x60>
    4000ae80:	97ffde84 	bl	40002890 <__sinit>
    4000ae84:	17ffffbb 	b	4000ad70 <__srefill_r+0x20>
    4000ae88:	f9403661 	ldr	x1, [x19, #104]
    4000ae8c:	f9000261 	str	x1, [x19]
    4000ae90:	52800000 	mov	w0, #0x0                   	// #0
    4000ae94:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000ae98:	a8c37bfd 	ldp	x29, x30, [sp], #48
    4000ae9c:	d65f03c0 	ret
    4000aea0:	aa1303e1 	mov	x1, x19
    4000aea4:	aa1403e0 	mov	x0, x20
    4000aea8:	97ffddea 	bl	40002650 <_fflush_r>
    4000aeac:	350000e0 	cbnz	w0, 4000aec8 <__srefill_r+0x178>
    4000aeb0:	79c02260 	ldrsh	w0, [x19, #16]
    4000aeb4:	a9025bf5 	stp	x21, x22, [sp, #32]
    4000aeb8:	121c7800 	and	w0, w0, #0xfffffff7
    4000aebc:	b9000e7f 	str	wzr, [x19, #12]
    4000aec0:	b9002a7f 	str	wzr, [x19, #40]
    4000aec4:	17ffffb3 	b	4000ad90 <__srefill_r+0x40>
    4000aec8:	12800000 	mov	w0, #0xffffffff            	// #-1
    4000aecc:	17ffffc5 	b	4000ade0 <__srefill_r+0x90>
    4000aed0:	79c02260 	ldrsh	w0, [x19, #16]
    4000aed4:	54000181 	b.ne	4000af04 <__srefill_r+0x1b4>  // b.any
    4000aed8:	321b0001 	orr	w1, w0, #0x20
    4000aedc:	12800000 	mov	w0, #0xffffffff            	// #-1
    4000aee0:	79002261 	strh	w1, [x19, #16]
    4000aee4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4000aee8:	17ffffbe 	b	4000ade0 <__srefill_r+0x90>
    4000aeec:	52800121 	mov	w1, #0x9                   	// #9
    4000aef0:	b9000281 	str	w1, [x20]
    4000aef4:	321a0001 	orr	w1, w0, #0x40
    4000aef8:	12800000 	mov	w0, #0xffffffff            	// #-1
    4000aefc:	79002261 	strh	w1, [x19, #16]
    4000af00:	17ffffb8 	b	4000ade0 <__srefill_r+0x90>
    4000af04:	321a0001 	orr	w1, w0, #0x40
    4000af08:	12800000 	mov	w0, #0xffffffff            	// #-1
    4000af0c:	79002261 	strh	w1, [x19, #16]
    4000af10:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4000af14:	b9000a7f 	str	wzr, [x19, #8]
    4000af18:	17ffffb2 	b	4000ade0 <__srefill_r+0x90>
    4000af1c:	00000000 	udf	#0

000000004000af20 <__sccl>:
    4000af20:	39400025 	ldrb	w5, [x1]
    4000af24:	aa0003e6 	mov	x6, x0
    4000af28:	710178bf 	cmp	w5, #0x5e
    4000af2c:	54000360 	b.eq	4000af98 <__sccl+0x78>  // b.none
    4000af30:	91000424 	add	x4, x1, #0x1
    4000af34:	52800002 	mov	w2, #0x0                   	// #0
    4000af38:	52800000 	mov	w0, #0x0                   	// #0
    4000af3c:	aa0603e1 	mov	x1, x6
    4000af40:	910400c3 	add	x3, x6, #0x100
    4000af44:	d503201f 	nop
    4000af48:	38001422 	strb	w2, [x1], #1
    4000af4c:	eb03003f 	cmp	x1, x3
    4000af50:	54ffffc1 	b.ne	4000af48 <__sccl+0x28>  // b.any
    4000af54:	52000002 	eor	w2, w0, #0x1
    4000af58:	910004c7 	add	x7, x6, #0x1
    4000af5c:	d1000480 	sub	x0, x4, #0x1
    4000af60:	340001a5 	cbz	w5, 4000af94 <__sccl+0x74>
    4000af64:	3825c8c2 	strb	w2, [x6, w5, sxtw]
    4000af68:	aa0403e0 	mov	x0, x4
    4000af6c:	38401401 	ldrb	w1, [x0], #1
    4000af70:	7100b43f 	cmp	w1, #0x2d
    4000af74:	540001c0 	b.eq	4000afac <__sccl+0x8c>  // b.none
    4000af78:	7101743f 	cmp	w1, #0x5d
    4000af7c:	540000c0 	b.eq	4000af94 <__sccl+0x74>  // b.none
    4000af80:	34000081 	cbz	w1, 4000af90 <__sccl+0x70>
    4000af84:	2a0103e5 	mov	w5, w1
    4000af88:	aa0003e4 	mov	x4, x0
    4000af8c:	17fffff6 	b	4000af64 <__sccl+0x44>
    4000af90:	aa0403e0 	mov	x0, x4
    4000af94:	d65f03c0 	ret
    4000af98:	52800022 	mov	w2, #0x1                   	// #1
    4000af9c:	39400425 	ldrb	w5, [x1, #1]
    4000afa0:	91000824 	add	x4, x1, #0x2
    4000afa4:	2a0203e0 	mov	w0, w2
    4000afa8:	17ffffe5 	b	4000af3c <__sccl+0x1c>
    4000afac:	39400483 	ldrb	w3, [x4, #1]
    4000afb0:	7101747f 	cmp	w3, #0x5d
    4000afb4:	7a4310a0 	ccmp	w5, w3, #0x0, ne  // ne = any
    4000afb8:	54fffe6c 	b.gt	4000af84 <__sccl+0x64>
    4000afbc:	91000884 	add	x4, x4, #0x2
    4000afc0:	93407ca1 	sxtw	x1, w5
    4000afc4:	d503201f 	nop
    4000afc8:	382168e2 	strb	w2, [x7, x1]
    4000afcc:	91000421 	add	x1, x1, #0x1
    4000afd0:	6b01007f 	cmp	w3, w1
    4000afd4:	54ffffac 	b.gt	4000afc8 <__sccl+0xa8>
    4000afd8:	4b050060 	sub	w0, w3, w5
    4000afdc:	6b0300bf 	cmp	w5, w3
    4000afe0:	51000400 	sub	w0, w0, #0x1
    4000afe4:	110004a5 	add	w5, w5, #0x1
    4000afe8:	1a9fb000 	csel	w0, w0, wzr, lt  // lt = tstop
    4000afec:	0b0000a5 	add	w5, w5, w0
    4000aff0:	17ffffde 	b	4000af68 <__sccl+0x48>
	...

000000004000b000 <nanf>:
    4000b000:	52aff800 	mov	w0, #0x7fc00000            	// #2143289344
    4000b004:	1e270000 	fmov	s0, w0
    4000b008:	d65f03c0 	ret
    4000b00c:	00000000 	udf	#0

000000004000b010 <sprintf>:
    4000b010:	a9a47bfd 	stp	x29, x30, [sp, #-448]!
    4000b014:	f0000609 	adrp	x9, 400ce000 <z_interrupt_stacks+0x440>
    4000b018:	aa0003e8 	mov	x8, x0
    4000b01c:	910003fd 	mov	x29, sp
    4000b020:	910643ec 	add	x12, sp, #0x190
    4000b024:	128005eb 	mov	w11, #0xffffffd0            	// #-48
    4000b028:	f9461520 	ldr	x0, [x9, #3112]
    4000b02c:	12800fea 	mov	w10, #0xffffff80            	// #-128
    4000b030:	910703e9 	add	x9, sp, #0x1c0
    4000b034:	a903a7e9 	stp	x9, x9, [sp, #56]
    4000b038:	92b0000d 	mov	x13, #0xffffffff7fffffff    	// #-2147483649
    4000b03c:	f90027ec 	str	x12, [sp, #72]
    4000b040:	aa0103e9 	mov	x9, x1
    4000b044:	290a2beb 	stp	w11, w10, [sp, #80]
    4000b048:	f2c0410d 	movk	x13, #0x208, lsl #32
    4000b04c:	a943bfee 	ldp	x14, x15, [sp, #56]
    4000b050:	12b0000c 	mov	w12, #0x7fffffff            	// #2147483647
    4000b054:	a944afea 	ldp	x10, x11, [sp, #72]
    4000b058:	910163e1 	add	x1, sp, #0x58
    4000b05c:	a9013fee 	stp	x14, x15, [sp, #16]
    4000b060:	a9022fea 	stp	x10, x11, [sp, #32]
    4000b064:	f9002fe8 	str	x8, [sp, #88]
    4000b068:	f80643ed 	stur	x13, [sp, #100]
    4000b06c:	f9003be8 	str	x8, [sp, #112]
    4000b070:	b9007bec 	str	w12, [sp, #120]
    4000b074:	3d8047e0 	str	q0, [sp, #272]
    4000b078:	3d804be1 	str	q1, [sp, #288]
    4000b07c:	3d804fe2 	str	q2, [sp, #304]
    4000b080:	3d8053e3 	str	q3, [sp, #320]
    4000b084:	3d8057e4 	str	q4, [sp, #336]
    4000b088:	3d805be5 	str	q5, [sp, #352]
    4000b08c:	3d805fe6 	str	q6, [sp, #368]
    4000b090:	3d8063e7 	str	q7, [sp, #384]
    4000b094:	a9190fe2 	stp	x2, x3, [sp, #400]
    4000b098:	910043e3 	add	x3, sp, #0x10
    4000b09c:	aa0903e2 	mov	x2, x9
    4000b0a0:	a91a17e4 	stp	x4, x5, [sp, #416]
    4000b0a4:	a91b1fe6 	stp	x6, x7, [sp, #432]
    4000b0a8:	9400060e 	bl	4000c8e0 <_svfprintf_r>
    4000b0ac:	f9402fe1 	ldr	x1, [sp, #88]
    4000b0b0:	3900003f 	strb	wzr, [x1]
    4000b0b4:	a8dc7bfd 	ldp	x29, x30, [sp], #448
    4000b0b8:	d65f03c0 	ret
    4000b0bc:	00000000 	udf	#0

000000004000b0c0 <_strtod_l>:
    4000b0c0:	a9b07bfd 	stp	x29, x30, [sp, #-256]!
    4000b0c4:	900000c4 	adrp	x4, 40023000 <fpi.1>
    4000b0c8:	910003fd 	mov	x29, sp
    4000b0cc:	f9412084 	ldr	x4, [x4, #576]
    4000b0d0:	a90573fb 	stp	x27, x28, [sp, #80]
    4000b0d4:	aa0103fc 	mov	x28, x1
    4000b0d8:	a90153f3 	stp	x19, x20, [sp, #16]
    4000b0dc:	aa0003f3 	mov	x19, x0
    4000b0e0:	aa0403e0 	mov	x0, x4
    4000b0e4:	a9025bf5 	stp	x21, x22, [sp, #32]
    4000b0e8:	aa0203f5 	mov	x21, x2
    4000b0ec:	d2800014 	mov	x20, #0x0                   	// #0
    4000b0f0:	a90363f7 	stp	x23, x24, [sp, #48]
    4000b0f4:	aa0303f8 	mov	x24, x3
    4000b0f8:	a9046bf9 	stp	x25, x26, [sp, #64]
    4000b0fc:	aa0103fa 	mov	x26, x1
    4000b100:	f90057e4 	str	x4, [sp, #168]
    4000b104:	f9007bff 	str	xzr, [sp, #240]
    4000b108:	97ffd88e 	bl	40001340 <strlen>
    4000b10c:	f90077fa 	str	x26, [sp, #232]
    4000b110:	39400396 	ldrb	w22, [x28]
    4000b114:	7100aedf 	cmp	w22, #0x2b
    4000b118:	54000300 	b.eq	4000b178 <_strtod_l+0xb8>  // b.none
    4000b11c:	54000748 	b.hi	4000b204 <_strtod_l+0x144>  // b.pmore
    4000b120:	710036df 	cmp	w22, #0xd
    4000b124:	540001c8 	b.hi	4000b15c <_strtod_l+0x9c>  // b.pmore
    4000b128:	710022df 	cmp	w22, #0x8
    4000b12c:	540001c8 	b.hi	4000b164 <_strtod_l+0xa4>  // b.pmore
    4000b130:	350007b6 	cbnz	w22, 4000b224 <_strtod_l+0x164>
    4000b134:	2f00e400 	movi	d0, #0x0
    4000b138:	b4000055 	cbz	x21, 4000b140 <_strtod_l+0x80>
    4000b13c:	f90002ba 	str	x26, [x21]
    4000b140:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000b144:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4000b148:	a94363f7 	ldp	x23, x24, [sp, #48]
    4000b14c:	a9446bf9 	ldp	x25, x26, [sp, #64]
    4000b150:	a94573fb 	ldp	x27, x28, [sp, #80]
    4000b154:	a8d07bfd 	ldp	x29, x30, [sp], #256
    4000b158:	d65f03c0 	ret
    4000b15c:	710082df 	cmp	w22, #0x20
    4000b160:	54000621 	b.ne	4000b224 <_strtod_l+0x164>  // b.any
    4000b164:	9100079c 	add	x28, x28, #0x1
    4000b168:	f90077fc 	str	x28, [sp, #232]
    4000b16c:	39400396 	ldrb	w22, [x28]
    4000b170:	7100aedf 	cmp	w22, #0x2b
    4000b174:	54fffd41 	b.ne	4000b11c <_strtod_l+0x5c>  // b.any
    4000b178:	91000781 	add	x1, x28, #0x1
    4000b17c:	f90077e1 	str	x1, [sp, #232]
    4000b180:	52800019 	mov	w25, #0x0                   	// #0
    4000b184:	39400796 	ldrb	w22, [x28, #1]
    4000b188:	34fffd76 	cbz	w22, 4000b134 <_strtod_l+0x74>
    4000b18c:	aa0103fc 	mov	x28, x1
    4000b190:	7100c2df 	cmp	w22, #0x30
    4000b194:	54008381 	b.ne	4000c204 <_strtod_l+0x1144>  // b.any
    4000b198:	aa1c03f7 	mov	x23, x28
    4000b19c:	38401ee1 	ldrb	w1, [x23, #1]!
    4000b1a0:	121a7821 	and	w1, w1, #0xffffffdf
    4000b1a4:	12001c21 	and	w1, w1, #0xff
    4000b1a8:	7101603f 	cmp	w1, #0x58
    4000b1ac:	540062a0 	b.eq	4000be00 <_strtod_l+0xd40>  // b.none
    4000b1b0:	f90077f7 	str	x23, [sp, #232]
    4000b1b4:	aa1703fc 	mov	x28, x23
    4000b1b8:	384016f6 	ldrb	w22, [x23], #1
    4000b1bc:	7100c2df 	cmp	w22, #0x30
    4000b1c0:	54ffff80 	b.eq	4000b1b0 <_strtod_l+0xf0>  // b.none
    4000b1c4:	52800026 	mov	w6, #0x1                   	// #1
    4000b1c8:	35000336 	cbnz	w22, 4000b22c <_strtod_l+0x16c>
    4000b1cc:	2f00e400 	movi	d0, #0x0
    4000b1d0:	b4000075 	cbz	x21, 4000b1dc <_strtod_l+0x11c>
    4000b1d4:	f94077e0 	ldr	x0, [sp, #232]
    4000b1d8:	f90002a0 	str	x0, [x21]
    4000b1dc:	1e614001 	fneg	d1, d0
    4000b1e0:	7100033f 	cmp	w25, #0x0
    4000b1e4:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000b1e8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4000b1ec:	1e601c20 	fcsel	d0, d1, d0, ne  // ne = any
    4000b1f0:	a94363f7 	ldp	x23, x24, [sp, #48]
    4000b1f4:	a9446bf9 	ldp	x25, x26, [sp, #64]
    4000b1f8:	a94573fb 	ldp	x27, x28, [sp, #80]
    4000b1fc:	a8d07bfd 	ldp	x29, x30, [sp], #256
    4000b200:	d65f03c0 	ret
    4000b204:	52800039 	mov	w25, #0x1                   	// #1
    4000b208:	7100b6df 	cmp	w22, #0x2d
    4000b20c:	54000c01 	b.ne	4000b38c <_strtod_l+0x2cc>  // b.any
    4000b210:	91000781 	add	x1, x28, #0x1
    4000b214:	f90077e1 	str	x1, [sp, #232]
    4000b218:	39400796 	ldrb	w22, [x28, #1]
    4000b21c:	35fffb96 	cbnz	w22, 4000b18c <_strtod_l+0xcc>
    4000b220:	17ffffc5 	b	4000b134 <_strtod_l+0x74>
    4000b224:	52800019 	mov	w25, #0x0                   	// #0
    4000b228:	52800006 	mov	w6, #0x0                   	// #0
    4000b22c:	5100c2c5 	sub	w5, w22, #0x30
    4000b230:	93407c02 	sxtw	x2, w0
    4000b234:	710024bf 	cmp	w5, #0x9
    4000b238:	54003ee8 	b.hi	4000ba14 <_strtod_l+0x954>  // b.pmore
    4000b23c:	91000783 	add	x3, x28, #0x1
    4000b240:	5280001b 	mov	w27, #0x0                   	// #0
    4000b244:	52800018 	mov	w24, #0x0                   	// #0
    4000b248:	52800017 	mov	w23, #0x0                   	// #0
    4000b24c:	14000009 	b	4000b270 <_strtod_l+0x1b0>
    4000b250:	f90077e3 	str	x3, [sp, #232]
    4000b254:	aa0303e0 	mov	x0, x3
    4000b258:	0b0104b8 	add	w24, w5, w1, lsl #1
    4000b25c:	110006f7 	add	w23, w23, #0x1
    4000b260:	38401476 	ldrb	w22, [x3], #1
    4000b264:	5100c2c5 	sub	w5, w22, #0x30
    4000b268:	710024bf 	cmp	w5, #0x9
    4000b26c:	540001a8 	b.hi	4000b2a0 <_strtod_l+0x1e0>  // b.pmore
    4000b270:	0b1b0b60 	add	w0, w27, w27, lsl #2
    4000b274:	0b180b01 	add	w1, w24, w24, lsl #2
    4000b278:	710022ff 	cmp	w23, #0x8
    4000b27c:	54fffead 	b.le	4000b250 <_strtod_l+0x190>
    4000b280:	f90077e3 	str	x3, [sp, #232]
    4000b284:	0b0004bb 	add	w27, w5, w0, lsl #1
    4000b288:	aa0303e0 	mov	x0, x3
    4000b28c:	110006f7 	add	w23, w23, #0x1
    4000b290:	38401476 	ldrb	w22, [x3], #1
    4000b294:	5100c2c5 	sub	w5, w22, #0x30
    4000b298:	710024bf 	cmp	w5, #0x9
    4000b29c:	54fffea9 	b.ls	4000b270 <_strtod_l+0x1b0>  // b.plast
    4000b2a0:	f94057e1 	ldr	x1, [sp, #168]
    4000b2a4:	f90057e2 	str	x2, [sp, #168]
    4000b2a8:	b900b7e6 	str	w6, [sp, #180]
    4000b2ac:	97ffd8ec 	bl	4000165c <strncmp>
    4000b2b0:	b940b7e6 	ldr	w6, [sp, #180]
    4000b2b4:	f94057e2 	ldr	x2, [sp, #168]
    4000b2b8:	34000e20 	cbz	w0, 4000b47c <_strtod_l+0x3bc>
    4000b2bc:	121a7ad6 	and	w22, w22, #0xffffffdf
    4000b2c0:	2a1703e3 	mov	w3, w23
    4000b2c4:	710116df 	cmp	w22, #0x45
    4000b2c8:	54000660 	b.eq	4000b394 <_strtod_l+0x2d4>  // b.none
    4000b2cc:	5280000b 	mov	w11, #0x0                   	// #0
    4000b2d0:	52800005 	mov	w5, #0x0                   	// #0
    4000b2d4:	1e630300 	ucvtf	d0, w24
    4000b2d8:	710002ff 	cmp	w23, #0x0
    4000b2dc:	1a8312f7 	csel	w23, w23, w3, ne  // ne = any
    4000b2e0:	4b0b00a1 	sub	w1, w5, w11
    4000b2e4:	7100407f 	cmp	w3, #0x10
    4000b2e8:	b900b7e1 	str	w1, [sp, #180]
    4000b2ec:	52800200 	mov	w0, #0x10                  	// #16
    4000b2f0:	1a80d060 	csel	w0, w3, w0, le
    4000b2f4:	9e660014 	fmov	x20, d0
    4000b2f8:	7100247f 	cmp	w3, #0x9
    4000b2fc:	5400010d 	b.le	4000b31c <_strtod_l+0x25c>
    4000b300:	51002402 	sub	w2, w0, #0x9
    4000b304:	f00000a1 	adrp	x1, 40022000 <__pow_log_data+0xcc8>
    4000b308:	913be021 	add	x1, x1, #0xef8
    4000b30c:	1e630361 	ucvtf	d1, w27
    4000b310:	fc62d822 	ldr	d2, [x1, w2, sxtw #3]
    4000b314:	1f420400 	fmadd	d0, d0, d2, d1
    4000b318:	9e660014 	fmov	x20, d0
    4000b31c:	71003c7f 	cmp	w3, #0xf
    4000b320:	54000ecc 	b.gt	4000b4f8 <_strtod_l+0x438>
    4000b324:	4b0b00a1 	sub	w1, w5, w11
    4000b328:	7100003f 	cmp	w1, #0x0
    4000b32c:	34004e21 	cbz	w1, 4000bcf0 <_strtod_l+0xc30>
    4000b330:	4b0b00a1 	sub	w1, w5, w11
    4000b334:	54005dad 	b.le	4000bee8 <_strtod_l+0xe28>
    4000b338:	7100583f 	cmp	w1, #0x16
    4000b33c:	5400644d 	b.le	4000bfc4 <_strtod_l+0xf04>
    4000b340:	4b000060 	sub	w0, w3, w0
    4000b344:	4b0b00a2 	sub	w2, w5, w11
    4000b348:	528004a1 	mov	w1, #0x25                  	// #37
    4000b34c:	4b030021 	sub	w1, w1, w3
    4000b350:	0b020000 	add	w0, w0, w2
    4000b354:	6b02003f 	cmp	w1, w2
    4000b358:	54000dab 	b.lt	4000b50c <_strtod_l+0x44c>  // b.tstop
    4000b35c:	528001e1 	mov	w1, #0xf                   	// #15
    4000b360:	f00000a0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    4000b364:	4b030023 	sub	w3, w1, w3
    4000b368:	913be000 	add	x0, x0, #0xef8
    4000b36c:	b940b7e1 	ldr	w1, [sp, #180]
    4000b370:	9e670282 	fmov	d2, x20
    4000b374:	fc63d800 	ldr	d0, [x0, w3, sxtw #3]
    4000b378:	4b030021 	sub	w1, w1, w3
    4000b37c:	1e620800 	fmul	d0, d0, d2
    4000b380:	fc61d801 	ldr	d1, [x0, w1, sxtw #3]
    4000b384:	1e610800 	fmul	d0, d0, d1
    4000b388:	17ffff92 	b	4000b1d0 <_strtod_l+0x110>
    4000b38c:	52800019 	mov	w25, #0x0                   	// #0
    4000b390:	17ffff80 	b	4000b190 <_strtod_l+0xd0>
    4000b394:	52800000 	mov	w0, #0x0                   	// #0
    4000b398:	5280000b 	mov	w11, #0x0                   	// #0
    4000b39c:	52800007 	mov	w7, #0x0                   	// #0
    4000b3a0:	f94077fa 	ldr	x26, [sp, #232]
    4000b3a4:	91000741 	add	x1, x26, #0x1
    4000b3a8:	f90077e1 	str	x1, [sp, #232]
    4000b3ac:	39400756 	ldrb	w22, [x26, #1]
    4000b3b0:	7100aedf 	cmp	w22, #0x2b
    4000b3b4:	54005220 	b.eq	4000bdf8 <_strtod_l+0xd38>  // b.none
    4000b3b8:	52800009 	mov	w9, #0x0                   	// #0
    4000b3bc:	7100b6df 	cmp	w22, #0x2d
    4000b3c0:	540000a1 	b.ne	4000b3d4 <_strtod_l+0x314>  // b.any
    4000b3c4:	52800029 	mov	w9, #0x1                   	// #1
    4000b3c8:	91000b41 	add	x1, x26, #0x2
    4000b3cc:	f90077e1 	str	x1, [sp, #232]
    4000b3d0:	39400b56 	ldrb	w22, [x26, #2]
    4000b3d4:	5100c2c1 	sub	w1, w22, #0x30
    4000b3d8:	7100243f 	cmp	w1, #0x9
    4000b3dc:	54003168 	b.hi	4000ba08 <_strtod_l+0x948>  // b.pmore
    4000b3e0:	7100c2df 	cmp	w22, #0x30
    4000b3e4:	540000e1 	b.ne	4000b400 <_strtod_l+0x340>  // b.any
    4000b3e8:	f94077e1 	ldr	x1, [sp, #232]
    4000b3ec:	91000421 	add	x1, x1, #0x1
    4000b3f0:	f90077e1 	str	x1, [sp, #232]
    4000b3f4:	38401436 	ldrb	w22, [x1], #1
    4000b3f8:	7100c2df 	cmp	w22, #0x30
    4000b3fc:	54ffffa0 	b.eq	4000b3f0 <_strtod_l+0x330>  // b.none
    4000b400:	5100c6c1 	sub	w1, w22, #0x31
    4000b404:	52800005 	mov	w5, #0x0                   	// #0
    4000b408:	7100203f 	cmp	w1, #0x8
    4000b40c:	54003d29 	b.ls	4000bbb0 <_strtod_l+0xaf0>  // b.plast
    4000b410:	35fff623 	cbnz	w3, 4000b2d4 <_strtod_l+0x214>
    4000b414:	2a0000c0 	orr	w0, w6, w0
    4000b418:	35ffeda0 	cbnz	w0, 4000b1cc <_strtod_l+0x10c>
    4000b41c:	35ffe8c7 	cbnz	w7, 4000b134 <_strtod_l+0x74>
    4000b420:	7101a6df 	cmp	w22, #0x69
    4000b424:	540046a0 	b.eq	4000bcf8 <_strtod_l+0xc38>  // b.none
    4000b428:	5400024c 	b.gt	4000b470 <_strtod_l+0x3b0>
    4000b42c:	710126df 	cmp	w22, #0x49
    4000b430:	54004640 	b.eq	4000bcf8 <_strtod_l+0xc38>  // b.none
    4000b434:	71013adf 	cmp	w22, #0x4e
    4000b438:	54ffe7e1 	b.ne	4000b134 <_strtod_l+0x74>  // b.any
    4000b43c:	f00000a1 	adrp	x1, 40022000 <__pow_log_data+0xcc8>
    4000b440:	9103a3e0 	add	x0, sp, #0xe8
    4000b444:	913f8021 	add	x1, x1, #0xfe0
    4000b448:	9400181a 	bl	400114b0 <__match>
    4000b44c:	34ffe740 	cbz	w0, 4000b134 <_strtod_l+0x74>
    4000b450:	f94077e0 	ldr	x0, [sp, #232]
    4000b454:	39400000 	ldrb	w0, [x0]
    4000b458:	7100a01f 	cmp	w0, #0x28
    4000b45c:	54004340 	b.eq	4000bcc4 <_strtod_l+0xc04>  // b.none
    4000b460:	f00000a0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    4000b464:	91352000 	add	x0, x0, #0xd48
    4000b468:	94001a0e 	bl	40011ca0 <nan>
    4000b46c:	17ffff59 	b	4000b1d0 <_strtod_l+0x110>
    4000b470:	7101badf 	cmp	w22, #0x6e
    4000b474:	54fffe40 	b.eq	4000b43c <_strtod_l+0x37c>  // b.none
    4000b478:	17ffff2f 	b	4000b134 <_strtod_l+0x74>
    4000b47c:	f94077e1 	ldr	x1, [sp, #232]
    4000b480:	2a1703e8 	mov	w8, w23
    4000b484:	5280000b 	mov	w11, #0x0                   	// #0
    4000b488:	8b020023 	add	x3, x1, x2
    4000b48c:	f90077e3 	str	x3, [sp, #232]
    4000b490:	38626836 	ldrb	w22, [x1, x2]
    4000b494:	5100c2c5 	sub	w5, w22, #0x30
    4000b498:	710024bf 	cmp	w5, #0x9
    4000b49c:	540001a8 	b.hi	4000b4d0 <_strtod_l+0x410>  // b.pmore
    4000b4a0:	11000400 	add	w0, w0, #0x1
    4000b4a4:	2a0503f6 	mov	w22, w5
    4000b4a8:	f94077ea 	ldr	x10, [sp, #232]
    4000b4ac:	35004e25 	cbnz	w5, 4000be70 <_strtod_l+0xdb0>
    4000b4b0:	91000541 	add	x1, x10, #0x1
    4000b4b4:	f90077e1 	str	x1, [sp, #232]
    4000b4b8:	39400556 	ldrb	w22, [x10, #1]
    4000b4bc:	17fffff6 	b	4000b494 <_strtod_l+0x3d4>
    4000b4c0:	5280000b 	mov	w11, #0x0                   	// #0
    4000b4c4:	52800017 	mov	w23, #0x0                   	// #0
    4000b4c8:	5280001b 	mov	w27, #0x0                   	// #0
    4000b4cc:	52800018 	mov	w24, #0x0                   	// #0
    4000b4d0:	52800027 	mov	w7, #0x1                   	// #1
    4000b4d4:	121a7ac1 	and	w1, w22, #0xffffffdf
    4000b4d8:	7101143f 	cmp	w1, #0x45
    4000b4dc:	54005281 	b.ne	4000bf2c <_strtod_l+0xe6c>  // b.any
    4000b4e0:	2a0002e1 	orr	w1, w23, w0
    4000b4e4:	2a060021 	orr	w1, w1, w6
    4000b4e8:	34ffe261 	cbz	w1, 4000b134 <_strtod_l+0x74>
    4000b4ec:	2a1703e3 	mov	w3, w23
    4000b4f0:	2a0803f7 	mov	w23, w8
    4000b4f4:	17ffffab 	b	4000b3a0 <_strtod_l+0x2e0>
    4000b4f8:	4b000060 	sub	w0, w3, w0
    4000b4fc:	4b0b00a1 	sub	w1, w5, w11
    4000b500:	0b010000 	add	w0, w0, w1
    4000b504:	7100001f 	cmp	w0, #0x0
    4000b508:	54002d4d 	b.le	4000bab0 <_strtod_l+0x9f0>
    4000b50c:	72000c02 	ands	w2, w0, #0xf
    4000b510:	540000e0 	b.eq	4000b52c <_strtod_l+0x46c>  // b.none
    4000b514:	f00000a1 	adrp	x1, 40022000 <__pow_log_data+0xcc8>
    4000b518:	913be021 	add	x1, x1, #0xef8
    4000b51c:	9e670281 	fmov	d1, x20
    4000b520:	fc62d820 	ldr	d0, [x1, w2, sxtw #3]
    4000b524:	1e610800 	fmul	d0, d0, d1
    4000b528:	9e660014 	fmov	x20, d0
    4000b52c:	721c6c00 	ands	w0, w0, #0xfffffff0
    4000b530:	54003741 	b.ne	4000bc18 <_strtod_l+0xb58>  // b.any
    4000b534:	5280001b 	mov	w27, #0x0                   	// #0
    4000b538:	2a1803e4 	mov	w4, w24
    4000b53c:	2a1703e2 	mov	w2, w23
    4000b540:	aa1c03e1 	mov	x1, x28
    4000b544:	aa1303e0 	mov	x0, x19
    4000b548:	b900abe5 	str	w5, [sp, #168]
    4000b54c:	b900c3eb 	str	w11, [sp, #192]
    4000b550:	97fffa64 	bl	40009ee0 <__s2b>
    4000b554:	f9005fe0 	str	x0, [sp, #184]
    4000b558:	b4004820 	cbz	x0, 4000be5c <_strtod_l+0xd9c>
    4000b55c:	91004000 	add	x0, x0, #0x10
    4000b560:	f90067e0 	str	x0, [sp, #200]
    4000b564:	b26a67e0 	mov	x0, #0xffffffc00000        	// #281474972516352
    4000b568:	6d0627e8 	stp	d8, d9, [sp, #96]
    4000b56c:	f2e83be0 	movk	x0, #0x41df, lsl #48
    4000b570:	9e670009 	fmov	d9, x0
    4000b574:	f00000a0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    4000b578:	6d072fea 	stp	d10, d11, [sp, #112]
    4000b57c:	d2800018 	mov	x24, #0x0                   	// #0
    4000b580:	fd47f40b 	ldr	d11, [x0, #4072]
    4000b584:	f00000a0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    4000b588:	b940abe5 	ldr	w5, [sp, #168]
    4000b58c:	b940b7e1 	ldr	w1, [sp, #180]
    4000b590:	d2800016 	mov	x22, #0x0                   	// #0
    4000b594:	b940c3eb 	ldr	w11, [sp, #192]
    4000b598:	fd47f80a 	ldr	d10, [x0, #4080]
    4000b59c:	f00000a0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    4000b5a0:	7100003f 	cmp	w1, #0x0
    4000b5a4:	4b05017a 	sub	w26, w11, w5
    4000b5a8:	1a9fb342 	csel	w2, w26, wzr, lt  // lt = tstop
    4000b5ac:	1a9fa021 	csel	w1, w1, wzr, ge  // ge = tcont
    4000b5b0:	6d0837ec 	stp	d12, d13, [sp, #128]
    4000b5b4:	fd47fc0c 	ldr	d12, [x0, #4088]
    4000b5b8:	6d093fee 	stp	d14, d15, [sp, #144]
    4000b5bc:	b900abe2 	str	w2, [sp, #168]
    4000b5c0:	b900c3e1 	str	w1, [sp, #192]
    4000b5c4:	1400006a 	b	4000b76c <_strtod_l+0x6ac>
    4000b5c8:	12807fa2 	mov	w2, #0xfffffc02            	// #-1022
    4000b5cc:	4b000042 	sub	w2, w2, w0
    4000b5d0:	4b020021 	sub	w1, w1, w2
    4000b5d4:	71007c5f 	cmp	w2, #0x1f
    4000b5d8:	54001bcc 	b.gt	4000b950 <_strtod_l+0x890>
    4000b5dc:	52800020 	mov	w0, #0x1                   	// #1
    4000b5e0:	b900d3ff 	str	wzr, [sp, #208]
    4000b5e4:	1ac22000 	lsl	w0, w0, w2
    4000b5e8:	b900c7e0 	str	w0, [sp, #196]
    4000b5ec:	0b010345 	add	w5, w26, w1
    4000b5f0:	0b010063 	add	w3, w3, w1
    4000b5f4:	6b05035f 	cmp	w26, w5
    4000b5f8:	0b03037c 	add	w28, w27, w3
    4000b5fc:	1a85d340 	csel	w0, w26, w5, le
    4000b600:	6b1c001f 	cmp	w0, w28
    4000b604:	1a9cd000 	csel	w0, w0, w28, le
    4000b608:	7100001f 	cmp	w0, #0x0
    4000b60c:	5400008d 	b.le	4000b61c <_strtod_l+0x55c>
    4000b610:	4b0000a5 	sub	w5, w5, w0
    4000b614:	4b00039c 	sub	w28, w28, w0
    4000b618:	4b00035a 	sub	w26, w26, w0
    4000b61c:	b940abe2 	ldr	w2, [sp, #168]
    4000b620:	7100005f 	cmp	w2, #0x0
    4000b624:	5400100c 	b.gt	4000b824 <_strtod_l+0x764>
    4000b628:	710000bf 	cmp	w5, #0x0
    4000b62c:	540012ec 	b.gt	4000b888 <_strtod_l+0x7c8>
    4000b630:	b940b7e0 	ldr	w0, [sp, #180]
    4000b634:	7100001f 	cmp	w0, #0x0
    4000b638:	540016cc 	b.gt	4000b910 <_strtod_l+0x850>
    4000b63c:	7100039f 	cmp	w28, #0x0
    4000b640:	5400178c 	b.gt	4000b930 <_strtod_l+0x870>
    4000b644:	7100035f 	cmp	w26, #0x0
    4000b648:	540000ed 	b.le	4000b664 <_strtod_l+0x5a4>
    4000b64c:	aa1603e1 	mov	x1, x22
    4000b650:	2a1a03e2 	mov	w2, w26
    4000b654:	aa1303e0 	mov	x0, x19
    4000b658:	97fffba6 	bl	4000a4f0 <__lshift>
    4000b65c:	aa0003f6 	mov	x22, x0
    4000b660:	b4001640 	cbz	x0, 4000b928 <_strtod_l+0x868>
    4000b664:	f9407be1 	ldr	x1, [sp, #240]
    4000b668:	aa1703e2 	mov	x2, x23
    4000b66c:	aa1303e0 	mov	x0, x19
    4000b670:	97fffc10 	bl	4000a6b0 <__mdiff>
    4000b674:	aa0003f8 	mov	x24, x0
    4000b678:	b4001580 	cbz	x0, 4000b928 <_strtod_l+0x868>
    4000b67c:	b9401001 	ldr	w1, [x0, #16]
    4000b680:	b900101f 	str	wzr, [x0, #16]
    4000b684:	2a0103fc 	mov	w28, w1
    4000b688:	aa1603e1 	mov	x1, x22
    4000b68c:	97fffbf5 	bl	4000a660 <__mcmp>
    4000b690:	7100001f 	cmp	w0, #0x0
    4000b694:	540036ab 	b.lt	4000bd68 <_strtod_l+0xca8>  // b.tstop
    4000b698:	54004a40 	b.eq	4000bfe0 <_strtod_l+0xf20>  // b.none
    4000b69c:	aa1603e1 	mov	x1, x22
    4000b6a0:	aa1803e0 	mov	x0, x24
    4000b6a4:	97fffd2f 	bl	4000ab60 <__ratio>
    4000b6a8:	1e601001 	fmov	d1, #2.000000000000000000e+00
    4000b6ac:	1e612010 	fcmpe	d0, d1
    4000b6b0:	54000b29 	b.ls	4000b814 <_strtod_l+0x754>  // b.plast
    4000b6b4:	1e6c1008 	fmov	d8, #5.000000000000000000e-01
    4000b6b8:	7100039f 	cmp	w28, #0x0
    4000b6bc:	1e680808 	fmul	d8, d0, d8
    4000b6c0:	1e614100 	fneg	d0, d8
    4000b6c4:	1e680c00 	fcsel	d0, d0, d8, eq  // eq = none
    4000b6c8:	9e660000 	fmov	x0, d0
    4000b6cc:	d360fe82 	lsr	x2, x20, #32
    4000b6d0:	52affc03 	mov	w3, #0x7fe00000            	// #2145386496
    4000b6d4:	120c2841 	and	w1, w2, #0x7ff00000
    4000b6d8:	6b03003f 	cmp	w1, w3
    4000b6dc:	54001580 	b.eq	4000b98c <_strtod_l+0x8cc>  // b.none
    4000b6e0:	7100037f 	cmp	w27, #0x0
    4000b6e4:	52a0d402 	mov	w2, #0x6a00000             	// #111149056
    4000b6e8:	7a421022 	ccmp	w1, w2, #0x2, ne  // ne = any
    4000b6ec:	54000108 	b.hi	4000b70c <_strtod_l+0x64c>  // b.pmore
    4000b6f0:	1e692110 	fcmpe	d8, d9
    4000b6f4:	54001789 	b.ls	4000b9e4 <_strtod_l+0x924>  // b.plast
    4000b6f8:	d360fc02 	lsr	x2, x0, #32
    4000b6fc:	52a0d603 	mov	w3, #0x6b00000             	// #112197632
    4000b700:	0b030042 	add	w2, w2, w3
    4000b704:	4b010042 	sub	w2, w2, w1
    4000b708:	b3607c40 	bfi	x0, x2, #32, #32
    4000b70c:	1e6041a0 	fmov	d0, d13
    4000b710:	9e67000e 	fmov	d14, x0
    4000b714:	b900c7e1 	str	w1, [sp, #196]
    4000b718:	97fffc5e 	bl	4000a890 <__ulp>
    4000b71c:	1f4035c0 	fmadd	d0, d14, d0, d13
    4000b720:	b940c7e1 	ldr	w1, [sp, #196]
    4000b724:	9e660014 	fmov	x20, d0
    4000b728:	d360fe80 	lsr	x0, x20, #32
    4000b72c:	120c2800 	and	w0, w0, #0x7ff00000
    4000b730:	7100037f 	cmp	w27, #0x0
    4000b734:	7a410000 	ccmp	w0, w1, #0x0, eq  // eq = none
    4000b738:	54003060 	b.eq	4000bd44 <_strtod_l+0xc84>  // b.none
    4000b73c:	f9407be1 	ldr	x1, [sp, #240]
    4000b740:	aa1303e0 	mov	x0, x19
    4000b744:	97fff99b 	bl	40009db0 <_Bfree>
    4000b748:	aa1703e1 	mov	x1, x23
    4000b74c:	aa1303e0 	mov	x0, x19
    4000b750:	97fff998 	bl	40009db0 <_Bfree>
    4000b754:	aa1603e1 	mov	x1, x22
    4000b758:	aa1303e0 	mov	x0, x19
    4000b75c:	97fff995 	bl	40009db0 <_Bfree>
    4000b760:	aa1803e1 	mov	x1, x24
    4000b764:	aa1303e0 	mov	x0, x19
    4000b768:	97fff992 	bl	40009db0 <_Bfree>
    4000b76c:	f9405ffa 	ldr	x26, [sp, #184]
    4000b770:	aa1303e0 	mov	x0, x19
    4000b774:	b9400b41 	ldr	w1, [x26, #8]
    4000b778:	97fff96a 	bl	40009d20 <_Balloc>
    4000b77c:	aa0003f7 	mov	x23, x0
    4000b780:	b4000d40 	cbz	x0, 4000b928 <_strtod_l+0x868>
    4000b784:	b9801742 	ldrsw	x2, [x26, #20]
    4000b788:	9e67028d 	fmov	d13, x20
    4000b78c:	f94067e1 	ldr	x1, [sp, #200]
    4000b790:	91000842 	add	x2, x2, #0x2
    4000b794:	91004000 	add	x0, x0, #0x10
    4000b798:	d37ef442 	lsl	x2, x2, #2
    4000b79c:	97ffd609 	bl	40000fc0 <memcpy>
    4000b7a0:	9e670280 	fmov	d0, x20
    4000b7a4:	9103e3e2 	add	x2, sp, #0xf8
    4000b7a8:	910393e1 	add	x1, sp, #0xe4
    4000b7ac:	aa1303e0 	mov	x0, x19
    4000b7b0:	97fffc9c 	bl	4000aa20 <__d2b>
    4000b7b4:	f9007be0 	str	x0, [sp, #240]
    4000b7b8:	b4000740 	cbz	x0, 4000b8a0 <_strtod_l+0x7e0>
    4000b7bc:	aa1303e0 	mov	x0, x19
    4000b7c0:	52800021 	mov	w1, #0x1                   	// #1
    4000b7c4:	97fffa57 	bl	4000a120 <__i2b>
    4000b7c8:	aa0003f6 	mov	x22, x0
    4000b7cc:	b4000ae0 	cbz	x0, 4000b928 <_strtod_l+0x868>
    4000b7d0:	b940e7e0 	ldr	w0, [sp, #228]
    4000b7d4:	37f80960 	tbnz	w0, #31, 4000b900 <_strtod_l+0x840>
    4000b7d8:	b940abe1 	ldr	w1, [sp, #168]
    4000b7dc:	b940c3e3 	ldr	w3, [sp, #192]
    4000b7e0:	0b01001a 	add	w26, w0, w1
    4000b7e4:	b940fbe2 	ldr	w2, [sp, #248]
    4000b7e8:	4b1b0000 	sub	w0, w0, w27
    4000b7ec:	528006c1 	mov	w1, #0x36                  	// #54
    4000b7f0:	0b020000 	add	w0, w0, w2
    4000b7f4:	4b020021 	sub	w1, w1, w2
    4000b7f8:	51000400 	sub	w0, w0, #0x1
    4000b7fc:	310ff81f 	cmn	w0, #0x3fe
    4000b800:	54ffee4b 	b.lt	4000b5c8 <_strtod_l+0x508>  // b.tstop
    4000b804:	52800020 	mov	w0, #0x1                   	// #1
    4000b808:	b900c7e0 	str	w0, [sp, #196]
    4000b80c:	b900d3ff 	str	wzr, [sp, #208]
    4000b810:	17ffff77 	b	4000b5ec <_strtod_l+0x52c>
    4000b814:	34000adc 	cbz	w28, 4000b96c <_strtod_l+0x8ac>
    4000b818:	d2e7fe00 	mov	x0, #0x3ff0000000000000    	// #4607182418800017408
    4000b81c:	1e6e1008 	fmov	d8, #1.000000000000000000e+00
    4000b820:	17ffffab 	b	4000b6cc <_strtod_l+0x60c>
    4000b824:	aa1603e1 	mov	x1, x22
    4000b828:	aa1303e0 	mov	x0, x19
    4000b82c:	b900d7e5 	str	w5, [sp, #212]
    4000b830:	97fffae4 	bl	4000a3c0 <__pow5mult>
    4000b834:	b940d7e5 	ldr	w5, [sp, #212]
    4000b838:	aa0003f6 	mov	x22, x0
    4000b83c:	b4000760 	cbz	x0, 4000b928 <_strtod_l+0x868>
    4000b840:	f9407be2 	ldr	x2, [sp, #240]
    4000b844:	aa0003e1 	mov	x1, x0
    4000b848:	aa1303e0 	mov	x0, x19
    4000b84c:	b900d7e5 	str	w5, [sp, #212]
    4000b850:	97fffa60 	bl	4000a1d0 <__multiply>
    4000b854:	aa0003e2 	mov	x2, x0
    4000b858:	b940d7e5 	ldr	w5, [sp, #212]
    4000b85c:	b4000660 	cbz	x0, 4000b928 <_strtod_l+0x868>
    4000b860:	f9407be1 	ldr	x1, [sp, #240]
    4000b864:	aa1303e0 	mov	x0, x19
    4000b868:	b900d7e5 	str	w5, [sp, #212]
    4000b86c:	f9006fe2 	str	x2, [sp, #216]
    4000b870:	97fff950 	bl	40009db0 <_Bfree>
    4000b874:	b940d7e5 	ldr	w5, [sp, #212]
    4000b878:	f9406fe2 	ldr	x2, [sp, #216]
    4000b87c:	f9007be2 	str	x2, [sp, #240]
    4000b880:	710000bf 	cmp	w5, #0x0
    4000b884:	54ffed6d 	b.le	4000b630 <_strtod_l+0x570>
    4000b888:	f9407be1 	ldr	x1, [sp, #240]
    4000b88c:	2a0503e2 	mov	w2, w5
    4000b890:	aa1303e0 	mov	x0, x19
    4000b894:	97fffb17 	bl	4000a4f0 <__lshift>
    4000b898:	f9007be0 	str	x0, [sp, #240]
    4000b89c:	b5ffeca0 	cbnz	x0, 4000b630 <_strtod_l+0x570>
    4000b8a0:	52800441 	mov	w1, #0x22                  	// #34
    4000b8a4:	d2effe14 	mov	x20, #0x7ff0000000000000    	// #9218868437227405312
    4000b8a8:	b9000261 	str	w1, [x19]
    4000b8ac:	aa0003e1 	mov	x1, x0
    4000b8b0:	aa1303e0 	mov	x0, x19
    4000b8b4:	97fff93f 	bl	40009db0 <_Bfree>
    4000b8b8:	aa1703e1 	mov	x1, x23
    4000b8bc:	aa1303e0 	mov	x0, x19
    4000b8c0:	97fff93c 	bl	40009db0 <_Bfree>
    4000b8c4:	aa1603e1 	mov	x1, x22
    4000b8c8:	aa1303e0 	mov	x0, x19
    4000b8cc:	97fff939 	bl	40009db0 <_Bfree>
    4000b8d0:	f9405fe1 	ldr	x1, [sp, #184]
    4000b8d4:	aa1303e0 	mov	x0, x19
    4000b8d8:	97fff936 	bl	40009db0 <_Bfree>
    4000b8dc:	aa1803e1 	mov	x1, x24
    4000b8e0:	aa1303e0 	mov	x0, x19
    4000b8e4:	97fff933 	bl	40009db0 <_Bfree>
    4000b8e8:	9e670280 	fmov	d0, x20
    4000b8ec:	6d4627e8 	ldp	d8, d9, [sp, #96]
    4000b8f0:	6d472fea 	ldp	d10, d11, [sp, #112]
    4000b8f4:	6d4837ec 	ldp	d12, d13, [sp, #128]
    4000b8f8:	6d493fee 	ldp	d14, d15, [sp, #144]
    4000b8fc:	17fffe35 	b	4000b1d0 <_strtod_l+0x110>
    4000b900:	b940c3e1 	ldr	w1, [sp, #192]
    4000b904:	b940abfa 	ldr	w26, [sp, #168]
    4000b908:	4b000023 	sub	w3, w1, w0
    4000b90c:	17ffffb6 	b	4000b7e4 <_strtod_l+0x724>
    4000b910:	b940c3e2 	ldr	w2, [sp, #192]
    4000b914:	aa1703e1 	mov	x1, x23
    4000b918:	aa1303e0 	mov	x0, x19
    4000b91c:	97fffaa9 	bl	4000a3c0 <__pow5mult>
    4000b920:	aa0003f7 	mov	x23, x0
    4000b924:	b5ffe8c0 	cbnz	x0, 4000b63c <_strtod_l+0x57c>
    4000b928:	f9407be0 	ldr	x0, [sp, #240]
    4000b92c:	17ffffdd 	b	4000b8a0 <_strtod_l+0x7e0>
    4000b930:	aa1703e1 	mov	x1, x23
    4000b934:	2a1c03e2 	mov	w2, w28
    4000b938:	aa1303e0 	mov	x0, x19
    4000b93c:	97fffaed 	bl	4000a4f0 <__lshift>
    4000b940:	aa0003f7 	mov	x23, x0
    4000b944:	b5ffe800 	cbnz	x0, 4000b644 <_strtod_l+0x584>
    4000b948:	f9407be0 	ldr	x0, [sp, #240]
    4000b94c:	17ffffd5 	b	4000b8a0 <_strtod_l+0x7e0>
    4000b950:	128083a2 	mov	w2, #0xfffffbe2            	// #-1054
    4000b954:	4b000040 	sub	w0, w2, w0
    4000b958:	52800022 	mov	w2, #0x1                   	// #1
    4000b95c:	b900c7e2 	str	w2, [sp, #196]
    4000b960:	1ac02040 	lsl	w0, w2, w0
    4000b964:	b900d3e0 	str	w0, [sp, #208]
    4000b968:	17ffff21 	b	4000b5ec <_strtod_l+0x52c>
    4000b96c:	9e6601a0 	fmov	x0, d13
    4000b970:	f240cc1f 	tst	x0, #0xfffffffffffff
    4000b974:	54001060 	b.eq	4000bb80 <_strtod_l+0xac0>  // b.none
    4000b978:	f100041f 	cmp	x0, #0x1
    4000b97c:	54002340 	b.eq	4000bde4 <_strtod_l+0xd24>  // b.none
    4000b980:	d2f7fe00 	mov	x0, #0xbff0000000000000    	// #-4616189618054758400
    4000b984:	1e6e1008 	fmov	d8, #1.000000000000000000e+00
    4000b988:	17ffff51 	b	4000b6cc <_strtod_l+0x60c>
    4000b98c:	52bf9603 	mov	w3, #0xfcb00000            	// #-55574528
    4000b990:	0b020062 	add	w2, w3, w2
    4000b994:	9e67000e 	fmov	d14, x0
    4000b998:	b900c7e1 	str	w1, [sp, #196]
    4000b99c:	b3607c54 	bfi	x20, x2, #32, #32
    4000b9a0:	9e67028f 	fmov	d15, x20
    4000b9a4:	9e670280 	fmov	d0, x20
    4000b9a8:	97fffbba 	bl	4000a890 <__ulp>
    4000b9ac:	1f403dc0 	fmadd	d0, d14, d0, d15
    4000b9b0:	12b06c00 	mov	w0, #0x7c9fffff            	// #2090860543
    4000b9b4:	b940c7e1 	ldr	w1, [sp, #196]
    4000b9b8:	9e660014 	fmov	x20, d0
    4000b9bc:	d360fe82 	lsr	x2, x20, #32
    4000b9c0:	120c2843 	and	w3, w2, #0x7ff00000
    4000b9c4:	6b00007f 	cmp	w3, w0
    4000b9c8:	54000ec9 	b.ls	4000bba0 <_strtod_l+0xae0>  // b.plast
    4000b9cc:	9e6601a0 	fmov	x0, d13
    4000b9d0:	92f00214 	mov	x20, #0x7fefffffffffffff    	// #9218868437227405311
    4000b9d4:	eb14001f 	cmp	x0, x20
    4000b9d8:	54ffeb21 	b.ne	4000b73c <_strtod_l+0x67c>  // b.any
    4000b9dc:	f9407be0 	ldr	x0, [sp, #240]
    4000b9e0:	17ffffb0 	b	4000b8a0 <_strtod_l+0x7e0>
    4000b9e4:	1e790100 	fcvtzu	w0, d8
    4000b9e8:	7100001f 	cmp	w0, #0x0
    4000b9ec:	1a9f1400 	csinc	w0, w0, wzr, ne  // ne = any
    4000b9f0:	7100039f 	cmp	w28, #0x0
    4000b9f4:	1e630008 	ucvtf	d8, w0
    4000b9f8:	1e614100 	fneg	d0, d8
    4000b9fc:	1e680c00 	fcsel	d0, d0, d8, eq  // eq = none
    4000ba00:	9e660000 	fmov	x0, d0
    4000ba04:	17ffff3d 	b	4000b6f8 <_strtod_l+0x638>
    4000ba08:	52800005 	mov	w5, #0x0                   	// #0
    4000ba0c:	f90077fa 	str	x26, [sp, #232]
    4000ba10:	17fffe80 	b	4000b410 <_strtod_l+0x350>
    4000ba14:	f94057e1 	ldr	x1, [sp, #168]
    4000ba18:	aa1c03e0 	mov	x0, x28
    4000ba1c:	f90057e2 	str	x2, [sp, #168]
    4000ba20:	b900b7e6 	str	w6, [sp, #180]
    4000ba24:	97ffd70e 	bl	4000165c <strncmp>
    4000ba28:	2a0003e8 	mov	w8, w0
    4000ba2c:	b940b7e6 	ldr	w6, [sp, #180]
    4000ba30:	f94057e2 	ldr	x2, [sp, #168]
    4000ba34:	35003d80 	cbnz	w0, 4000c1e4 <_strtod_l+0x1124>
    4000ba38:	f94077e0 	ldr	x0, [sp, #232]
    4000ba3c:	52800023 	mov	w3, #0x1                   	// #1
    4000ba40:	8b020001 	add	x1, x0, x2
    4000ba44:	f90077e1 	str	x1, [sp, #232]
    4000ba48:	38626816 	ldrb	w22, [x0, x2]
    4000ba4c:	4b010062 	sub	w2, w3, w1
    4000ba50:	52800000 	mov	w0, #0x0                   	// #0
    4000ba54:	7100c2df 	cmp	w22, #0x30
    4000ba58:	54000101 	b.ne	4000ba78 <_strtod_l+0x9b8>  // b.any
    4000ba5c:	d503201f 	nop
    4000ba60:	0b010040 	add	w0, w2, w1
    4000ba64:	91000421 	add	x1, x1, #0x1
    4000ba68:	f90077e1 	str	x1, [sp, #232]
    4000ba6c:	39400036 	ldrb	w22, [x1]
    4000ba70:	7100c2df 	cmp	w22, #0x30
    4000ba74:	54ffff60 	b.eq	4000ba60 <_strtod_l+0x9a0>  // b.none
    4000ba78:	5100c6c1 	sub	w1, w22, #0x31
    4000ba7c:	7100203f 	cmp	w1, #0x8
    4000ba80:	54ffd208 	b.hi	4000b4c0 <_strtod_l+0x400>  // b.pmore
    4000ba84:	f94077fc 	ldr	x28, [sp, #232]
    4000ba88:	5100c2d6 	sub	w22, w22, #0x30
    4000ba8c:	1100040b 	add	w11, w0, #0x1
    4000ba90:	5280001b 	mov	w27, #0x0                   	// #0
    4000ba94:	aa1c03ea 	mov	x10, x28
    4000ba98:	52800037 	mov	w23, #0x1                   	// #1
    4000ba9c:	52800018 	mov	w24, #0x0                   	// #0
    4000baa0:	0b180b18 	add	w24, w24, w24, lsl #2
    4000baa4:	52800000 	mov	w0, #0x0                   	// #0
    4000baa8:	0b1806d8 	add	w24, w22, w24, lsl #1
    4000baac:	17fffe81 	b	4000b4b0 <_strtod_l+0x3f0>
    4000bab0:	54ffd420 	b.eq	4000b534 <_strtod_l+0x474>  // b.none
    4000bab4:	4b0003e0 	neg	w0, w0
    4000bab8:	72000c02 	ands	w2, w0, #0xf
    4000babc:	540000e0 	b.eq	4000bad8 <_strtod_l+0xa18>  // b.none
    4000bac0:	f00000a1 	adrp	x1, 40022000 <__pow_log_data+0xcc8>
    4000bac4:	913be021 	add	x1, x1, #0xef8
    4000bac8:	9e670281 	fmov	d1, x20
    4000bacc:	fc62d820 	ldr	d0, [x1, w2, sxtw #3]
    4000bad0:	1e601820 	fdiv	d0, d1, d0
    4000bad4:	9e660014 	fmov	x20, d0
    4000bad8:	13047c00 	asr	w0, w0, #4
    4000badc:	34ffd2c0 	cbz	w0, 4000b534 <_strtod_l+0x474>
    4000bae0:	71007c1f 	cmp	w0, #0x1f
    4000bae4:	5400046c 	b.gt	4000bb70 <_strtod_l+0xab0>
    4000bae8:	52800d42 	mov	w2, #0x6a                  	// #106
    4000baec:	721c001b 	ands	w27, w0, #0x10
    4000baf0:	900000c1 	adrp	x1, 40023000 <fpi.1>
    4000baf4:	9100c021 	add	x1, x1, #0x30
    4000baf8:	1a82037b 	csel	w27, w27, w2, eq  // eq = none
    4000bafc:	9e670280 	fmov	d0, x20
    4000bb00:	52800002 	mov	w2, #0x0                   	// #0
    4000bb04:	36000080 	tbz	w0, #0, 4000bb14 <_strtod_l+0xa54>
    4000bb08:	fd400021 	ldr	d1, [x1]
    4000bb0c:	52800022 	mov	w2, #0x1                   	// #1
    4000bb10:	1e610800 	fmul	d0, d0, d1
    4000bb14:	13017c00 	asr	w0, w0, #1
    4000bb18:	91002021 	add	x1, x1, #0x8
    4000bb1c:	35ffff40 	cbnz	w0, 4000bb04 <_strtod_l+0xa44>
    4000bb20:	9e660000 	fmov	x0, d0
    4000bb24:	7100005f 	cmp	w2, #0x0
    4000bb28:	9a800294 	csel	x20, x20, x0, eq  // eq = none
    4000bb2c:	340001db 	cbz	w27, 4000bb64 <_strtod_l+0xaa4>
    4000bb30:	d374fa81 	ubfx	x1, x20, #52, #11
    4000bb34:	52800d60 	mov	w0, #0x6b                  	// #107
    4000bb38:	4b010000 	sub	w0, w0, w1
    4000bb3c:	d360fe9a 	lsr	x26, x20, #32
    4000bb40:	7100001f 	cmp	w0, #0x0
    4000bb44:	5400010d 	b.le	4000bb64 <_strtod_l+0xaa4>
    4000bb48:	71007c1f 	cmp	w0, #0x1f
    4000bb4c:	540031ed 	b.le	4000c188 <_strtod_l+0x10c8>
    4000bb50:	92607e94 	and	x20, x20, #0xffffffff00000000
    4000bb54:	7100d01f 	cmp	w0, #0x34
    4000bb58:	5400322d 	b.le	4000c19c <_strtod_l+0x10dc>
    4000bb5c:	d2a06e00 	mov	x0, #0x3700000             	// #57671680
    4000bb60:	b3607c14 	bfi	x20, x0, #32, #32
    4000bb64:	9e670280 	fmov	d0, x20
    4000bb68:	1e602008 	fcmp	d0, #0.0
    4000bb6c:	54ffce61 	b.ne	4000b538 <_strtod_l+0x478>  // b.any
    4000bb70:	52800440 	mov	w0, #0x22                  	// #34
    4000bb74:	2f00e400 	movi	d0, #0x0
    4000bb78:	b9000260 	str	w0, [x19]
    4000bb7c:	17fffd95 	b	4000b1d0 <_strtod_l+0x110>
    4000bb80:	1e6e1001 	fmov	d1, #1.000000000000000000e+00
    4000bb84:	1e612010 	fcmpe	d0, d1
    4000bb88:	54001c24 	b.mi	4000bf0c <_strtod_l+0xe4c>  // b.first
    4000bb8c:	1e6c1008 	fmov	d8, #5.000000000000000000e-01
    4000bb90:	1e680808 	fmul	d8, d0, d8
    4000bb94:	1e614100 	fneg	d0, d8
    4000bb98:	9e660000 	fmov	x0, d0
    4000bb9c:	17fffecc 	b	4000b6cc <_strtod_l+0x60c>
    4000bba0:	52a06a00 	mov	w0, #0x3500000             	// #55574528
    4000bba4:	0b020000 	add	w0, w0, w2
    4000bba8:	b3607c14 	bfi	x20, x0, #32, #32
    4000bbac:	17fffee0 	b	4000b72c <_strtod_l+0x66c>
    4000bbb0:	f94077ea 	ldr	x10, [sp, #232]
    4000bbb4:	5100c2c1 	sub	w1, w22, #0x30
    4000bbb8:	91000542 	add	x2, x10, #0x1
    4000bbbc:	f90077e2 	str	x2, [sp, #232]
    4000bbc0:	39400556 	ldrb	w22, [x10, #1]
    4000bbc4:	5100c2c2 	sub	w2, w22, #0x30
    4000bbc8:	7100245f 	cmp	w2, #0x9
    4000bbcc:	54001a88 	b.hi	4000bf1c <_strtod_l+0xe5c>  // b.pmore
    4000bbd0:	91000942 	add	x2, x10, #0x2
    4000bbd4:	d503201f 	nop
    4000bbd8:	0b010821 	add	w1, w1, w1, lsl #2
    4000bbdc:	f90077e2 	str	x2, [sp, #232]
    4000bbe0:	aa0203e8 	mov	x8, x2
    4000bbe4:	0b0106c1 	add	w1, w22, w1, lsl #1
    4000bbe8:	38401456 	ldrb	w22, [x2], #1
    4000bbec:	5100c021 	sub	w1, w1, #0x30
    4000bbf0:	5100c2c5 	sub	w5, w22, #0x30
    4000bbf4:	710024bf 	cmp	w5, #0x9
    4000bbf8:	54ffff09 	b.ls	4000bbd8 <_strtod_l+0xb18>  // b.plast
    4000bbfc:	cb0a0108 	sub	x8, x8, x10
    4000bc00:	5289c3e5 	mov	w5, #0x4e1f                	// #19999
    4000bc04:	f100211f 	cmp	x8, #0x8
    4000bc08:	540018ad 	b.le	4000bf1c <_strtod_l+0xe5c>
    4000bc0c:	7100013f 	cmp	w9, #0x0
    4000bc10:	5a8504a5 	cneg	w5, w5, ne  // ne = any
    4000bc14:	17fffdff 	b	4000b410 <_strtod_l+0x350>
    4000bc18:	7104d01f 	cmp	w0, #0x134
    4000bc1c:	5400120c 	b.gt	4000be5c <_strtod_l+0xd9c>
    4000bc20:	13047c01 	asr	w1, w0, #4
    4000bc24:	7100401f 	cmp	w0, #0x10
    4000bc28:	5400252d 	b.le	4000c0cc <_strtod_l+0x100c>
    4000bc2c:	f00000a4 	adrp	x4, 40022000 <__pow_log_data+0xcc8>
    4000bc30:	913b2084 	add	x4, x4, #0xec8
    4000bc34:	9e670280 	fmov	d0, x20
    4000bc38:	d2800020 	mov	x0, #0x1                   	// #1
    4000bc3c:	52800006 	mov	w6, #0x0                   	// #0
    4000bc40:	36000081 	tbz	w1, #0, 4000bc50 <_strtod_l+0xb90>
    4000bc44:	fc607881 	ldr	d1, [x4, x0, lsl #3]
    4000bc48:	52800026 	mov	w6, #0x1                   	// #1
    4000bc4c:	1e610800 	fmul	d0, d0, d1
    4000bc50:	13017c21 	asr	w1, w1, #1
    4000bc54:	2a0003e2 	mov	w2, w0
    4000bc58:	91000400 	add	x0, x0, #0x1
    4000bc5c:	7100043f 	cmp	w1, #0x1
    4000bc60:	54ffff01 	b.ne	4000bc40 <_strtod_l+0xb80>  // b.any
    4000bc64:	9e660000 	fmov	x0, d0
    4000bc68:	710000df 	cmp	w6, #0x0
    4000bc6c:	9a800294 	csel	x20, x20, x0, eq  // eq = none
    4000bc70:	f00000a0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    4000bc74:	913b4000 	add	x0, x0, #0xed0
    4000bc78:	d360fe81 	lsr	x1, x20, #32
    4000bc7c:	52bf9604 	mov	w4, #0xfcb00000            	// #-55574528
    4000bc80:	0b040021 	add	w1, w1, w4
    4000bc84:	52af9404 	mov	w4, #0x7ca00000            	// #2090860544
    4000bc88:	fc62d800 	ldr	d0, [x0, w2, sxtw #3]
    4000bc8c:	b3607c34 	bfi	x20, x1, #32, #32
    4000bc90:	9e670281 	fmov	d1, x20
    4000bc94:	1e610800 	fmul	d0, d0, d1
    4000bc98:	9e660014 	fmov	x20, d0
    4000bc9c:	d360fe81 	lsr	x1, x20, #32
    4000bca0:	120c2820 	and	w0, w1, #0x7ff00000
    4000bca4:	6b04001f 	cmp	w0, w4
    4000bca8:	54000da8 	b.hi	4000be5c <_strtod_l+0xd9c>  // b.pmore
    4000bcac:	52af9202 	mov	w2, #0x7c900000            	// #2089811968
    4000bcb0:	6b02001f 	cmp	w0, w2
    4000bcb4:	54001e49 	b.ls	4000c07c <_strtod_l+0xfbc>  // b.plast
    4000bcb8:	92f00214 	mov	x20, #0x7fefffffffffffff    	// #9218868437227405311
    4000bcbc:	5280001b 	mov	w27, #0x0                   	// #0
    4000bcc0:	17fffe1e 	b	4000b538 <_strtod_l+0x478>
    4000bcc4:	900000c1 	adrp	x1, 40023000 <fpi.1>
    4000bcc8:	9103a3e0 	add	x0, sp, #0xe8
    4000bccc:	9103e3e2 	add	x2, sp, #0xf8
    4000bcd0:	91006021 	add	x1, x1, #0x18
    4000bcd4:	9400160b 	bl	40011500 <__hexnan>
    4000bcd8:	7100141f 	cmp	w0, #0x5
    4000bcdc:	54ffbc21 	b.ne	4000b460 <_strtod_l+0x3a0>  // b.any
    4000bce0:	295f03e1 	ldp	w1, w0, [sp, #248]
    4000bce4:	320c2800 	orr	w0, w0, #0x7ff00000
    4000bce8:	b3607c14 	bfi	x20, x0, #32, #32
    4000bcec:	b3407c34 	bfxil	x20, x1, #0, #32
    4000bcf0:	9e670280 	fmov	d0, x20
    4000bcf4:	17fffd37 	b	4000b1d0 <_strtod_l+0x110>
    4000bcf8:	f00000a1 	adrp	x1, 40022000 <__pow_log_data+0xcc8>
    4000bcfc:	9103a3e0 	add	x0, sp, #0xe8
    4000bd00:	913f4021 	add	x1, x1, #0xfd0
    4000bd04:	940015eb 	bl	400114b0 <__match>
    4000bd08:	34ffa160 	cbz	w0, 4000b134 <_strtod_l+0x74>
    4000bd0c:	f94077e2 	ldr	x2, [sp, #232]
    4000bd10:	f00000a1 	adrp	x1, 40022000 <__pow_log_data+0xcc8>
    4000bd14:	9103a3e0 	add	x0, sp, #0xe8
    4000bd18:	913f6021 	add	x1, x1, #0xfd8
    4000bd1c:	d1000442 	sub	x2, x2, #0x1
    4000bd20:	f90077e2 	str	x2, [sp, #232]
    4000bd24:	940015e3 	bl	400114b0 <__match>
    4000bd28:	35000080 	cbnz	w0, 4000bd38 <_strtod_l+0xc78>
    4000bd2c:	f94077e0 	ldr	x0, [sp, #232]
    4000bd30:	91000400 	add	x0, x0, #0x1
    4000bd34:	f90077e0 	str	x0, [sp, #232]
    4000bd38:	d2effe00 	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
    4000bd3c:	9e670000 	fmov	d0, x0
    4000bd40:	17fffd24 	b	4000b1d0 <_strtod_l+0x110>
    4000bd44:	5ee1b900 	fcvtzs	d0, d8
    4000bd48:	5e61d800 	scvtf	d0, d0
    4000bd4c:	1e603908 	fsub	d8, d8, d0
    4000bd50:	350007dc 	cbnz	w28, 4000be48 <_strtod_l+0xd88>
    4000bd54:	f240ce9f 	tst	x20, #0xfffffffffffff
    4000bd58:	54000781 	b.ne	4000be48 <_strtod_l+0xd88>  // b.any
    4000bd5c:	1e6c2110 	fcmpe	d8, d12
    4000bd60:	54000484 	b.mi	4000bdf0 <_strtod_l+0xd30>  // b.first
    4000bd64:	17fffe76 	b	4000b73c <_strtod_l+0x67c>
    4000bd68:	3500177c 	cbnz	w28, 4000c054 <_strtod_l+0xf94>
    4000bd6c:	9e6601a0 	fmov	x0, d13
    4000bd70:	f240cc1f 	tst	x0, #0xfffffffffffff
    4000bd74:	54001701 	b.ne	4000c054 <_strtod_l+0xf94>  // b.any
    4000bd78:	d360fe9a 	lsr	x26, x20, #32
    4000bd7c:	52a0d600 	mov	w0, #0x6b00000             	// #112197632
    4000bd80:	120c2b41 	and	w1, w26, #0x7ff00000
    4000bd84:	6b00003f 	cmp	w1, w0
    4000bd88:	54001669 	b.ls	4000c054 <_strtod_l+0xf94>  // b.plast
    4000bd8c:	b9401b00 	ldr	w0, [x24, #24]
    4000bd90:	35000080 	cbnz	w0, 4000bda0 <_strtod_l+0xce0>
    4000bd94:	b9401700 	ldr	w0, [x24, #20]
    4000bd98:	7100041f 	cmp	w0, #0x1
    4000bd9c:	540015cd 	b.le	4000c054 <_strtod_l+0xf94>
    4000bda0:	52800022 	mov	w2, #0x1                   	// #1
    4000bda4:	aa1803e1 	mov	x1, x24
    4000bda8:	aa1303e0 	mov	x0, x19
    4000bdac:	97fff9d1 	bl	4000a4f0 <__lshift>
    4000bdb0:	aa1603e1 	mov	x1, x22
    4000bdb4:	aa0003f8 	mov	x24, x0
    4000bdb8:	97fffa2a 	bl	4000a660 <__mcmp>
    4000bdbc:	7100001f 	cmp	w0, #0x0
    4000bdc0:	540014ad 	b.le	4000c054 <_strtod_l+0xf94>
    4000bdc4:	120c2b44 	and	w4, w26, #0x7ff00000
    4000bdc8:	34001d5b 	cbz	w27, 4000c170 <_strtod_l+0x10b0>
    4000bdcc:	52a0d600 	mov	w0, #0x6b00000             	// #112197632
    4000bdd0:	6b00009f 	cmp	w4, w0
    4000bdd4:	54001cec 	b.gt	4000c170 <_strtod_l+0x10b0>
    4000bdd8:	52a06e00 	mov	w0, #0x3700000             	// #57671680
    4000bddc:	6b00009f 	cmp	w4, w0
    4000bde0:	540013cc 	b.gt	4000c058 <_strtod_l+0xf98>
    4000bde4:	52800440 	mov	w0, #0x22                  	// #34
    4000bde8:	d2800014 	mov	x20, #0x0                   	// #0
    4000bdec:	b9000260 	str	w0, [x19]
    4000bdf0:	f9407be0 	ldr	x0, [sp, #240]
    4000bdf4:	17fffeae 	b	4000b8ac <_strtod_l+0x7ec>
    4000bdf8:	52800009 	mov	w9, #0x0                   	// #0
    4000bdfc:	17fffd73 	b	4000b3c8 <_strtod_l+0x308>
    4000be00:	aa1803e6 	mov	x6, x24
    4000be04:	2a1903e5 	mov	w5, w25
    4000be08:	9103c3e4 	add	x4, sp, #0xf0
    4000be0c:	910393e3 	add	x3, sp, #0xe4
    4000be10:	9103a3e1 	add	x1, sp, #0xe8
    4000be14:	aa1303e0 	mov	x0, x19
    4000be18:	900000c2 	adrp	x2, 40023000 <fpi.1>
    4000be1c:	91000042 	add	x2, x2, #0x0
    4000be20:	94001388 	bl	40010c40 <__gethex>
    4000be24:	2a0003f6 	mov	w22, w0
    4000be28:	72000818 	ands	w24, w0, #0x7
    4000be2c:	54ff9d00 	b.eq	4000b1cc <_strtod_l+0x10c>  // b.none
    4000be30:	71001b1f 	cmp	w24, #0x6
    4000be34:	54000841 	b.ne	4000bf3c <_strtod_l+0xe7c>  // b.any
    4000be38:	2f00e400 	movi	d0, #0x0
    4000be3c:	b4ff9835 	cbz	x21, 4000b140 <_strtod_l+0x80>
    4000be40:	f90002b7 	str	x23, [x21]
    4000be44:	17fffcbf 	b	4000b140 <_strtod_l+0x80>
    4000be48:	1e6b2110 	fcmpe	d8, d11
    4000be4c:	54fffd24 	b.mi	4000bdf0 <_strtod_l+0xd30>  // b.first
    4000be50:	1e6a2110 	fcmpe	d8, d10
    4000be54:	54fffcec 	b.gt	4000bdf0 <_strtod_l+0xd30>
    4000be58:	17fffe39 	b	4000b73c <_strtod_l+0x67c>
    4000be5c:	52800441 	mov	w1, #0x22                  	// #34
    4000be60:	d2effe00 	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
    4000be64:	9e670000 	fmov	d0, x0
    4000be68:	b9000261 	str	w1, [x19]
    4000be6c:	17fffcd9 	b	4000b1d0 <_strtod_l+0x110>
    4000be70:	0b00016b 	add	w11, w11, w0
    4000be74:	110006e2 	add	w2, w23, #0x1
    4000be78:	7100041f 	cmp	w0, #0x1
    4000be7c:	54001ae0 	b.eq	4000c1d8 <_strtod_l+0x1118>  // b.none
    4000be80:	0b170000 	add	w0, w0, w23
    4000be84:	51000409 	sub	w9, w0, #0x1
    4000be88:	14000005 	b	4000be9c <_strtod_l+0xddc>
    4000be8c:	531f78f8 	lsl	w24, w7, #1
    4000be90:	6b09005f 	cmp	w2, w9
    4000be94:	54000180 	b.eq	4000bec4 <_strtod_l+0xe04>  // b.none
    4000be98:	11000442 	add	w2, w2, #0x1
    4000be9c:	0b1b0b61 	add	w1, w27, w27, lsl #2
    4000bea0:	2a1703e3 	mov	w3, w23
    4000bea4:	0b180b07 	add	w7, w24, w24, lsl #2
    4000bea8:	2a0203f7 	mov	w23, w2
    4000beac:	531f7821 	lsl	w1, w1, #1
    4000beb0:	7100207f 	cmp	w3, #0x8
    4000beb4:	54fffec9 	b.ls	4000be8c <_strtod_l+0xdcc>  // b.plast
    4000beb8:	7100445f 	cmp	w2, #0x11
    4000bebc:	1a9bb03b 	csel	w27, w1, w27, lt  // lt = tstop
    4000bec0:	17fffff4 	b	4000be90 <_strtod_l+0xdd0>
    4000bec4:	2a0003f7 	mov	w23, w0
    4000bec8:	7100213f 	cmp	w9, #0x8
    4000becc:	54ffdead 	b.le	4000baa0 <_strtod_l+0x9e0>
    4000bed0:	0b1b0b61 	add	w1, w27, w27, lsl #2
    4000bed4:	710046ff 	cmp	w23, #0x11
    4000bed8:	52800000 	mov	w0, #0x0                   	// #0
    4000bedc:	0b0104a5 	add	w5, w5, w1, lsl #1
    4000bee0:	1a9bb0bb 	csel	w27, w5, w27, lt  // lt = tstop
    4000bee4:	17fffd73 	b	4000b4b0 <_strtod_l+0x3f0>
    4000bee8:	3100583f 	cmn	w1, #0x16
    4000beec:	54ffb06b 	b.lt	4000b4f8 <_strtod_l+0x438>  // b.tstop
    4000bef0:	4b050165 	sub	w5, w11, w5
    4000bef4:	f00000a0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    4000bef8:	913be000 	add	x0, x0, #0xef8
    4000befc:	9e670280 	fmov	d0, x20
    4000bf00:	fc65d801 	ldr	d1, [x0, w5, sxtw #3]
    4000bf04:	1e611800 	fdiv	d0, d0, d1
    4000bf08:	17fffcb2 	b	4000b1d0 <_strtod_l+0x110>
    4000bf0c:	1e7c1000 	fmov	d0, #-5.000000000000000000e-01
    4000bf10:	1e6c1008 	fmov	d8, #5.000000000000000000e-01
    4000bf14:	9e660000 	fmov	x0, d0
    4000bf18:	17fffded 	b	4000b6cc <_strtod_l+0x60c>
    4000bf1c:	5289c3e5 	mov	w5, #0x4e1f                	// #19999
    4000bf20:	6b05003f 	cmp	w1, w5
    4000bf24:	1a85d025 	csel	w5, w1, w5, le
    4000bf28:	17ffff39 	b	4000bc0c <_strtod_l+0xb4c>
    4000bf2c:	2a1703e3 	mov	w3, w23
    4000bf30:	52800005 	mov	w5, #0x0                   	// #0
    4000bf34:	2a0803f7 	mov	w23, w8
    4000bf38:	17fffd36 	b	4000b410 <_strtod_l+0x350>
    4000bf3c:	f9407be2 	ldr	x2, [sp, #240]
    4000bf40:	b40000e2 	cbz	x2, 4000bf5c <_strtod_l+0xe9c>
    4000bf44:	9103e3e0 	add	x0, sp, #0xf8
    4000bf48:	528006a1 	mov	w1, #0x35                  	// #53
    4000bf4c:	97fffb29 	bl	4000abf0 <__copybits>
    4000bf50:	f9407be1 	ldr	x1, [sp, #240]
    4000bf54:	aa1303e0 	mov	x0, x19
    4000bf58:	97fff796 	bl	40009db0 <_Bfree>
    4000bf5c:	71000f1f 	cmp	w24, #0x3
    4000bf60:	54000a20 	b.eq	4000c0a4 <_strtod_l+0xfe4>  // b.none
    4000bf64:	37100196 	tbnz	w22, #2, 4000bf94 <_strtod_l+0xed4>
    4000bf68:	7100071f 	cmp	w24, #0x1
    4000bf6c:	540001c0 	b.eq	4000bfa4 <_strtod_l+0xee4>  // b.none
    4000bf70:	f9407ff4 	ldr	x20, [sp, #248]
    4000bf74:	71000b1f 	cmp	w24, #0x2
    4000bf78:	9a9f0294 	csel	x20, x20, xzr, eq  // eq = none
    4000bf7c:	361febb6 	tbz	w22, #3, 4000bcf0 <_strtod_l+0xc30>
    4000bf80:	d360fe80 	lsr	x0, x20, #32
    4000bf84:	32010000 	orr	w0, w0, #0x80000000
    4000bf88:	b3607c14 	bfi	x20, x0, #32, #32
    4000bf8c:	9e670280 	fmov	d0, x20
    4000bf90:	17fffc90 	b	4000b1d0 <_strtod_l+0x110>
    4000bf94:	7100131f 	cmp	w24, #0x4
    4000bf98:	54000960 	b.eq	4000c0c4 <_strtod_l+0x1004>  // b.none
    4000bf9c:	7100171f 	cmp	w24, #0x5
    4000bfa0:	54fffee1 	b.ne	4000bf7c <_strtod_l+0xebc>  // b.any
    4000bfa4:	295f07e2 	ldp	w2, w1, [sp, #248]
    4000bfa8:	b940e7e0 	ldr	w0, [sp, #228]
    4000bfac:	120b7821 	and	w1, w1, #0xffefffff
    4000bfb0:	1110cc00 	add	w0, w0, #0x433
    4000bfb4:	b3407c54 	bfxil	x20, x2, #0, #32
    4000bfb8:	2a005020 	orr	w0, w1, w0, lsl #20
    4000bfbc:	b3607c14 	bfi	x20, x0, #32, #32
    4000bfc0:	17ffffef 	b	4000bf7c <_strtod_l+0xebc>
    4000bfc4:	b940b7e1 	ldr	w1, [sp, #180]
    4000bfc8:	f00000a0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    4000bfcc:	913be000 	add	x0, x0, #0xef8
    4000bfd0:	9e670281 	fmov	d1, x20
    4000bfd4:	fc61d800 	ldr	d0, [x0, w1, sxtw #3]
    4000bfd8:	1e610800 	fmul	d0, d0, d1
    4000bfdc:	17fffc7d 	b	4000b1d0 <_strtod_l+0x110>
    4000bfe0:	3400059c 	cbz	w28, 4000c090 <_strtod_l+0xfd0>
    4000bfe4:	d360ce82 	ubfx	x2, x20, #32, #20
    4000bfe8:	d360fe81 	lsr	x1, x20, #32
    4000bfec:	12bffe00 	mov	w0, #0xfffff               	// #1048575
    4000bff0:	6b00005f 	cmp	w2, w0
    4000bff4:	54000920 	b.eq	4000c118 <_strtod_l+0x1058>  // b.none
    4000bff8:	b940d3e1 	ldr	w1, [sp, #208]
    4000bffc:	340005a1 	cbz	w1, 4000c0b0 <_strtod_l+0xff0>
    4000c000:	d360fe80 	lsr	x0, x20, #32
    4000c004:	2a0003fa 	mov	w26, w0
    4000c008:	6a00003f 	tst	w1, w0
    4000c00c:	54000240 	b.eq	4000c054 <_strtod_l+0xf94>  // b.none
    4000c010:	1e6041a0 	fmov	d0, d13
    4000c014:	3400061c 	cbz	w28, 4000c0d4 <_strtod_l+0x1014>
    4000c018:	97fffa1e 	bl	4000a890 <__ulp>
    4000c01c:	1e604001 	fmov	d1, d0
    4000c020:	3400017b 	cbz	w27, 4000c04c <_strtod_l+0xf8c>
    4000c024:	d3547b5a 	ubfx	x26, x26, #20, #11
    4000c028:	52800d60 	mov	w0, #0x6b                  	// #107
    4000c02c:	4b1a0000 	sub	w0, w0, w26
    4000c030:	7100001f 	cmp	w0, #0x0
    4000c034:	540000cd 	b.le	4000c04c <_strtod_l+0xf8c>
    4000c038:	52a7fe01 	mov	w1, #0x3ff00000            	// #1072693248
    4000c03c:	0b005020 	add	w0, w1, w0, lsl #20
    4000c040:	9e670000 	fmov	d0, x0
    4000c044:	5f605400 	shl	d0, d0, #32
    4000c048:	1e600821 	fmul	d1, d1, d0
    4000c04c:	1e6129ad 	fadd	d13, d13, d1
    4000c050:	9e6601b4 	fmov	x20, d13
    4000c054:	34ffecfb 	cbz	w27, 4000bdf0 <_strtod_l+0xd30>
    4000c058:	d2e72a00 	mov	x0, #0x3950000000000000    	// #4129800858298744832
    4000c05c:	9e670000 	fmov	d0, x0
    4000c060:	f9407be0 	ldr	x0, [sp, #240]
    4000c064:	1e6009a0 	fmul	d0, d13, d0
    4000c068:	9e660014 	fmov	x20, d0
    4000c06c:	b5ffc214 	cbnz	x20, 4000b8ac <_strtod_l+0x7ec>
    4000c070:	52800441 	mov	w1, #0x22                  	// #34
    4000c074:	b9000261 	str	w1, [x19]
    4000c078:	17fffe0d 	b	4000b8ac <_strtod_l+0x7ec>
    4000c07c:	52a06a00 	mov	w0, #0x3500000             	// #55574528
    4000c080:	0b010001 	add	w1, w0, w1
    4000c084:	5280001b 	mov	w27, #0x0                   	// #0
    4000c088:	b3607c34 	bfi	x20, x1, #32, #32
    4000c08c:	17fffd2b 	b	4000b538 <_strtod_l+0x478>
    4000c090:	9e6601a0 	fmov	x0, d13
    4000c094:	f240cc1f 	tst	x0, #0xfffffffffffff
    4000c098:	54fffb01 	b.ne	4000bff8 <_strtod_l+0xf38>  // b.any
    4000c09c:	d360fe9a 	lsr	x26, x20, #32
    4000c0a0:	17ffff49 	b	4000bdc4 <_strtod_l+0xd04>
    4000c0a4:	d2affe00 	mov	x0, #0x7ff00000            	// #2146435072
    4000c0a8:	b3607c14 	bfi	x20, x0, #32, #32
    4000c0ac:	17ffffb4 	b	4000bf7c <_strtod_l+0xebc>
    4000c0b0:	b940c7e0 	ldr	w0, [sp, #196]
    4000c0b4:	6a14001f 	tst	w0, w20
    4000c0b8:	54fffce0 	b.eq	4000c054 <_strtod_l+0xf94>  // b.none
    4000c0bc:	d360fe9a 	lsr	x26, x20, #32
    4000c0c0:	17ffffd4 	b	4000c010 <_strtod_l+0xf50>
    4000c0c4:	92f00014 	mov	x20, #0x7fffffffffffffff    	// #9223372036854775807
    4000c0c8:	17ffffad 	b	4000bf7c <_strtod_l+0xebc>
    4000c0cc:	52800002 	mov	w2, #0x0                   	// #0
    4000c0d0:	17fffee8 	b	4000bc70 <_strtod_l+0xbb0>
    4000c0d4:	97fff9ef 	bl	4000a890 <__ulp>
    4000c0d8:	1e604001 	fmov	d1, d0
    4000c0dc:	3400073b 	cbz	w27, 4000c1c0 <_strtod_l+0x1100>
    4000c0e0:	d3547b5a 	ubfx	x26, x26, #20, #11
    4000c0e4:	52800d60 	mov	w0, #0x6b                  	// #107
    4000c0e8:	4b1a0000 	sub	w0, w0, w26
    4000c0ec:	7100001f 	cmp	w0, #0x0
    4000c0f0:	540000cd 	b.le	4000c108 <_strtod_l+0x1048>
    4000c0f4:	52a7fe01 	mov	w1, #0x3ff00000            	// #1072693248
    4000c0f8:	0b005020 	add	w0, w1, w0, lsl #20
    4000c0fc:	9e670000 	fmov	d0, x0
    4000c100:	5f605400 	shl	d0, d0, #32
    4000c104:	1e600821 	fmul	d1, d1, d0
    4000c108:	1e6139ad 	fsub	d13, d13, d1
    4000c10c:	1e6021a8 	fcmp	d13, #0.0
    4000c110:	54fffa41 	b.ne	4000c058 <_strtod_l+0xf98>  // b.any
    4000c114:	17ffff34 	b	4000bde4 <_strtod_l+0xd24>
    4000c118:	2a1403e4 	mov	w4, w20
    4000c11c:	340004fb 	cbz	w27, 4000c1b8 <_strtod_l+0x10f8>
    4000c120:	53147823 	ubfx	w3, w1, #20, #11
    4000c124:	120c2822 	and	w2, w1, #0x7ff00000
    4000c128:	52800d60 	mov	w0, #0x6b                  	// #107
    4000c12c:	4b030000 	sub	w0, w0, w3
    4000c130:	52a0d405 	mov	w5, #0x6a00000             	// #111149056
    4000c134:	12800003 	mov	w3, #0xffffffff            	// #-1
    4000c138:	6b05005f 	cmp	w2, w5
    4000c13c:	1ac02060 	lsl	w0, w3, w0
    4000c140:	1a839000 	csel	w0, w0, w3, ls  // ls = plast
    4000c144:	6b00009f 	cmp	w4, w0
    4000c148:	54fff581 	b.ne	4000bff8 <_strtod_l+0xf38>  // b.any
    4000c14c:	9e6601a2 	fmov	x2, d13
    4000c150:	92f00200 	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
    4000c154:	eb00005f 	cmp	x2, x0
    4000c158:	54ffbe80 	b.eq	4000b928 <_strtod_l+0x868>  // b.none
    4000c15c:	120c2834 	and	w20, w1, #0x7ff00000
    4000c160:	11440294 	add	w20, w20, #0x100, lsl #12
    4000c164:	d3607e94 	lsl	x20, x20, #32
    4000c168:	9e67028d 	fmov	d13, x20
    4000c16c:	17ffffba 	b	4000c054 <_strtod_l+0xf94>
    4000c170:	51440084 	sub	w4, w4, #0x100, lsl #12
    4000c174:	32004c80 	orr	w0, w4, #0xfffff
    4000c178:	b3607c14 	bfi	x20, x0, #32, #32
    4000c17c:	b2407e94 	orr	x20, x20, #0xffffffff
    4000c180:	9e67028d 	fmov	d13, x20
    4000c184:	17ffffb4 	b	4000c054 <_strtod_l+0xf94>
    4000c188:	12800001 	mov	w1, #0xffffffff            	// #-1
    4000c18c:	1ac02020 	lsl	w0, w1, w0
    4000c190:	0a140000 	and	w0, w0, w20
    4000c194:	b3407c14 	bfxil	x20, x0, #0, #32
    4000c198:	17fffe73 	b	4000bb64 <_strtod_l+0xaa4>
    4000c19c:	52800960 	mov	w0, #0x4b                  	// #75
    4000c1a0:	4b010001 	sub	w1, w0, w1
    4000c1a4:	12800000 	mov	w0, #0xffffffff            	// #-1
    4000c1a8:	1ac12000 	lsl	w0, w0, w1
    4000c1ac:	0a1a0004 	and	w4, w0, w26
    4000c1b0:	b3607c94 	bfi	x20, x4, #32, #32
    4000c1b4:	17fffe6c 	b	4000bb64 <_strtod_l+0xaa4>
    4000c1b8:	12800000 	mov	w0, #0xffffffff            	// #-1
    4000c1bc:	17ffffe2 	b	4000c144 <_strtod_l+0x1084>
    4000c1c0:	1e6039ad 	fsub	d13, d13, d0
    4000c1c4:	1e6021a8 	fcmp	d13, #0.0
    4000c1c8:	9e6601b4 	fmov	x20, d13
    4000c1cc:	54ffe0c0 	b.eq	4000bde4 <_strtod_l+0xd24>  // b.none
    4000c1d0:	f9407be0 	ldr	x0, [sp, #240]
    4000c1d4:	17fffdb6 	b	4000b8ac <_strtod_l+0x7ec>
    4000c1d8:	2a1703e9 	mov	w9, w23
    4000c1dc:	2a0203f7 	mov	w23, w2
    4000c1e0:	17ffff3a 	b	4000bec8 <_strtod_l+0xe08>
    4000c1e4:	52800008 	mov	w8, #0x0                   	// #0
    4000c1e8:	5280001b 	mov	w27, #0x0                   	// #0
    4000c1ec:	52800018 	mov	w24, #0x0                   	// #0
    4000c1f0:	52800000 	mov	w0, #0x0                   	// #0
    4000c1f4:	5280000b 	mov	w11, #0x0                   	// #0
    4000c1f8:	52800017 	mov	w23, #0x0                   	// #0
    4000c1fc:	52800007 	mov	w7, #0x0                   	// #0
    4000c200:	17fffcb5 	b	4000b4d4 <_strtod_l+0x414>
    4000c204:	52800006 	mov	w6, #0x0                   	// #0
    4000c208:	17fffc09 	b	4000b22c <_strtod_l+0x16c>
    4000c20c:	00000000 	udf	#0

000000004000c210 <_strtod_r>:
    4000c210:	f0000603 	adrp	x3, 400cf000 <impure_data+0x3d0>
    4000c214:	91224063 	add	x3, x3, #0x890
    4000c218:	17fffbaa 	b	4000b0c0 <_strtod_l>
    4000c21c:	00000000 	udf	#0

000000004000c220 <_strtol_l.part.0>:
    4000c220:	d00000a7 	adrp	x7, 40022000 <__pow_log_data+0xcc8>
    4000c224:	aa0003ec 	mov	x12, x0
    4000c228:	aa0103e6 	mov	x6, x1
    4000c22c:	912fc4e7 	add	x7, x7, #0xbf1
    4000c230:	aa0603e8 	mov	x8, x6
    4000c234:	384014c4 	ldrb	w4, [x6], #1
    4000c238:	92401c85 	and	x5, x4, #0xff
    4000c23c:	386568e5 	ldrb	w5, [x7, x5]
    4000c240:	371fff85 	tbnz	w5, #3, 4000c230 <_strtol_l.part.0+0x10>
    4000c244:	2a0403e5 	mov	w5, w4
    4000c248:	7100b49f 	cmp	w4, #0x2d
    4000c24c:	54000880 	b.eq	4000c35c <_strtol_l.part.0+0x13c>  // b.none
    4000c250:	92f0000b 	mov	x11, #0x7fffffffffffffff    	// #9223372036854775807
    4000c254:	5280000d 	mov	w13, #0x0                   	// #0
    4000c258:	7100ac9f 	cmp	w4, #0x2b
    4000c25c:	540006a0 	b.eq	4000c330 <_strtol_l.part.0+0x110>  // b.none
    4000c260:	721b787f 	tst	w3, #0xffffffef
    4000c264:	54000121 	b.ne	4000c288 <_strtol_l.part.0+0x68>  // b.any
    4000c268:	7100c0bf 	cmp	w5, #0x30
    4000c26c:	54000820 	b.eq	4000c370 <_strtol_l.part.0+0x150>  // b.none
    4000c270:	350000c3 	cbnz	w3, 4000c288 <_strtol_l.part.0+0x68>
    4000c274:	d280014a 	mov	x10, #0xa                   	// #10
    4000c278:	2a0a03e3 	mov	w3, w10
    4000c27c:	14000004 	b	4000c28c <_strtol_l.part.0+0x6c>
    4000c280:	34000903 	cbz	w3, 4000c3a0 <_strtol_l.part.0+0x180>
    4000c284:	d503201f 	nop
    4000c288:	93407c6a 	sxtw	x10, w3
    4000c28c:	9aca0968 	udiv	x8, x11, x10
    4000c290:	52800007 	mov	w7, #0x0                   	// #0
    4000c294:	d2800000 	mov	x0, #0x0                   	// #0
    4000c298:	1b0aad09 	msub	w9, w8, w10, w11
    4000c29c:	d503201f 	nop
    4000c2a0:	5100c0a4 	sub	w4, w5, #0x30
    4000c2a4:	7100249f 	cmp	w4, #0x9
    4000c2a8:	540000a9 	b.ls	4000c2bc <_strtol_l.part.0+0x9c>  // b.plast
    4000c2ac:	510104a4 	sub	w4, w5, #0x41
    4000c2b0:	7100649f 	cmp	w4, #0x19
    4000c2b4:	54000208 	b.hi	4000c2f4 <_strtol_l.part.0+0xd4>  // b.pmore
    4000c2b8:	5100dca4 	sub	w4, w5, #0x37
    4000c2bc:	6b04007f 	cmp	w3, w4
    4000c2c0:	5400028d 	b.le	4000c310 <_strtol_l.part.0+0xf0>
    4000c2c4:	710000ff 	cmp	w7, #0x0
    4000c2c8:	12800007 	mov	w7, #0xffffffff            	// #-1
    4000c2cc:	fa40a100 	ccmp	x8, x0, #0x0, ge  // ge = tcont
    4000c2d0:	540000e3 	b.cc	4000c2ec <_strtol_l.part.0+0xcc>  // b.lo, b.ul, b.last
    4000c2d4:	eb00011f 	cmp	x8, x0
    4000c2d8:	7a440120 	ccmp	w9, w4, #0x0, eq  // eq = none
    4000c2dc:	5400008b 	b.lt	4000c2ec <_strtol_l.part.0+0xcc>  // b.tstop
    4000c2e0:	93407c84 	sxtw	x4, w4
    4000c2e4:	52800027 	mov	w7, #0x1                   	// #1
    4000c2e8:	9b0a1000 	madd	x0, x0, x10, x4
    4000c2ec:	384014c5 	ldrb	w5, [x6], #1
    4000c2f0:	17ffffec 	b	4000c2a0 <_strtol_l.part.0+0x80>
    4000c2f4:	510184a4 	sub	w4, w5, #0x61
    4000c2f8:	7100649f 	cmp	w4, #0x19
    4000c2fc:	540000a8 	b.hi	4000c310 <_strtol_l.part.0+0xf0>  // b.pmore
    4000c300:	51015ca4 	sub	w4, w5, #0x57
    4000c304:	6b04007f 	cmp	w3, w4
    4000c308:	54fffdec 	b.gt	4000c2c4 <_strtol_l.part.0+0xa4>
    4000c30c:	d503201f 	nop
    4000c310:	310004ff 	cmn	w7, #0x1
    4000c314:	54000140 	b.eq	4000c33c <_strtol_l.part.0+0x11c>  // b.none
    4000c318:	710001bf 	cmp	w13, #0x0
    4000c31c:	da800400 	cneg	x0, x0, ne  // ne = any
    4000c320:	b4000062 	cbz	x2, 4000c32c <_strtol_l.part.0+0x10c>
    4000c324:	350003a7 	cbnz	w7, 4000c398 <_strtol_l.part.0+0x178>
    4000c328:	f9000041 	str	x1, [x2]
    4000c32c:	d65f03c0 	ret
    4000c330:	394000c5 	ldrb	w5, [x6]
    4000c334:	91000906 	add	x6, x8, #0x2
    4000c338:	17ffffca 	b	4000c260 <_strtol_l.part.0+0x40>
    4000c33c:	52800440 	mov	w0, #0x22                  	// #34
    4000c340:	b9000180 	str	w0, [x12]
    4000c344:	aa0b03e0 	mov	x0, x11
    4000c348:	b4ffff22 	cbz	x2, 4000c32c <_strtol_l.part.0+0x10c>
    4000c34c:	d10004c1 	sub	x1, x6, #0x1
    4000c350:	aa0b03e0 	mov	x0, x11
    4000c354:	f9000041 	str	x1, [x2]
    4000c358:	17fffff5 	b	4000c32c <_strtol_l.part.0+0x10c>
    4000c35c:	394000c5 	ldrb	w5, [x6]
    4000c360:	d2f0000b 	mov	x11, #0x8000000000000000    	// #-9223372036854775808
    4000c364:	91000906 	add	x6, x8, #0x2
    4000c368:	5280002d 	mov	w13, #0x1                   	// #1
    4000c36c:	17ffffbd 	b	4000c260 <_strtol_l.part.0+0x40>
    4000c370:	394000c0 	ldrb	w0, [x6]
    4000c374:	121a7800 	and	w0, w0, #0xffffffdf
    4000c378:	12001c00 	and	w0, w0, #0xff
    4000c37c:	7101601f 	cmp	w0, #0x58
    4000c380:	54fff801 	b.ne	4000c280 <_strtol_l.part.0+0x60>  // b.any
    4000c384:	394004c5 	ldrb	w5, [x6, #1]
    4000c388:	d280020a 	mov	x10, #0x10                  	// #16
    4000c38c:	910008c6 	add	x6, x6, #0x2
    4000c390:	2a0a03e3 	mov	w3, w10
    4000c394:	17ffffbe 	b	4000c28c <_strtol_l.part.0+0x6c>
    4000c398:	aa0003eb 	mov	x11, x0
    4000c39c:	17ffffec 	b	4000c34c <_strtol_l.part.0+0x12c>
    4000c3a0:	d280010a 	mov	x10, #0x8                   	// #8
    4000c3a4:	2a0a03e3 	mov	w3, w10
    4000c3a8:	17ffffb9 	b	4000c28c <_strtol_l.part.0+0x6c>
    4000c3ac:	00000000 	udf	#0

000000004000c3b0 <_strtol_r>:
    4000c3b0:	7100907f 	cmp	w3, #0x24
    4000c3b4:	7a419864 	ccmp	w3, #0x1, #0x4, ls  // ls = plast
    4000c3b8:	54000040 	b.eq	4000c3c0 <_strtol_r+0x10>  // b.none
    4000c3bc:	17ffff99 	b	4000c220 <_strtol_l.part.0>
    4000c3c0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    4000c3c4:	910003fd 	mov	x29, sp
    4000c3c8:	940045e7 	bl	4001db64 <__errno>
    4000c3cc:	528002c1 	mov	w1, #0x16                  	// #22
    4000c3d0:	b9000001 	str	w1, [x0]
    4000c3d4:	d2800000 	mov	x0, #0x0                   	// #0
    4000c3d8:	a8c17bfd 	ldp	x29, x30, [sp], #16
    4000c3dc:	d65f03c0 	ret

000000004000c3e0 <_strtoll_l.constprop.0>:
    4000c3e0:	d00000a7 	adrp	x7, 40022000 <__pow_log_data+0xcc8>
    4000c3e4:	aa0003ec 	mov	x12, x0
    4000c3e8:	aa0103e6 	mov	x6, x1
    4000c3ec:	912fc4e7 	add	x7, x7, #0xbf1
    4000c3f0:	aa0603e8 	mov	x8, x6
    4000c3f4:	384014c4 	ldrb	w4, [x6], #1
    4000c3f8:	92401c85 	and	x5, x4, #0xff
    4000c3fc:	386568e5 	ldrb	w5, [x7, x5]
    4000c400:	371fff85 	tbnz	w5, #3, 4000c3f0 <_strtoll_l.constprop.0+0x10>
    4000c404:	2a0403e5 	mov	w5, w4
    4000c408:	7100b49f 	cmp	w4, #0x2d
    4000c40c:	54000880 	b.eq	4000c51c <_strtoll_l.constprop.0+0x13c>  // b.none
    4000c410:	92f0000b 	mov	x11, #0x7fffffffffffffff    	// #9223372036854775807
    4000c414:	5280000d 	mov	w13, #0x0                   	// #0
    4000c418:	7100ac9f 	cmp	w4, #0x2b
    4000c41c:	540006a0 	b.eq	4000c4f0 <_strtoll_l.constprop.0+0x110>  // b.none
    4000c420:	721b787f 	tst	w3, #0xffffffef
    4000c424:	54000121 	b.ne	4000c448 <_strtoll_l.constprop.0+0x68>  // b.any
    4000c428:	7100c0bf 	cmp	w5, #0x30
    4000c42c:	54000820 	b.eq	4000c530 <_strtoll_l.constprop.0+0x150>  // b.none
    4000c430:	350000c3 	cbnz	w3, 4000c448 <_strtoll_l.constprop.0+0x68>
    4000c434:	d280014a 	mov	x10, #0xa                   	// #10
    4000c438:	2a0a03e3 	mov	w3, w10
    4000c43c:	14000004 	b	4000c44c <_strtoll_l.constprop.0+0x6c>
    4000c440:	34000903 	cbz	w3, 4000c560 <_strtoll_l.constprop.0+0x180>
    4000c444:	d503201f 	nop
    4000c448:	93407c6a 	sxtw	x10, w3
    4000c44c:	9aca0968 	udiv	x8, x11, x10
    4000c450:	52800007 	mov	w7, #0x0                   	// #0
    4000c454:	d2800000 	mov	x0, #0x0                   	// #0
    4000c458:	1b0aad09 	msub	w9, w8, w10, w11
    4000c45c:	d503201f 	nop
    4000c460:	5100c0a4 	sub	w4, w5, #0x30
    4000c464:	7100249f 	cmp	w4, #0x9
    4000c468:	540000a9 	b.ls	4000c47c <_strtoll_l.constprop.0+0x9c>  // b.plast
    4000c46c:	510104a4 	sub	w4, w5, #0x41
    4000c470:	7100649f 	cmp	w4, #0x19
    4000c474:	54000208 	b.hi	4000c4b4 <_strtoll_l.constprop.0+0xd4>  // b.pmore
    4000c478:	5100dca4 	sub	w4, w5, #0x37
    4000c47c:	6b04007f 	cmp	w3, w4
    4000c480:	5400028d 	b.le	4000c4d0 <_strtoll_l.constprop.0+0xf0>
    4000c484:	710000ff 	cmp	w7, #0x0
    4000c488:	12800007 	mov	w7, #0xffffffff            	// #-1
    4000c48c:	fa40a100 	ccmp	x8, x0, #0x0, ge  // ge = tcont
    4000c490:	540000e3 	b.cc	4000c4ac <_strtoll_l.constprop.0+0xcc>  // b.lo, b.ul, b.last
    4000c494:	eb00011f 	cmp	x8, x0
    4000c498:	7a440120 	ccmp	w9, w4, #0x0, eq  // eq = none
    4000c49c:	5400008b 	b.lt	4000c4ac <_strtoll_l.constprop.0+0xcc>  // b.tstop
    4000c4a0:	93407c84 	sxtw	x4, w4
    4000c4a4:	52800027 	mov	w7, #0x1                   	// #1
    4000c4a8:	9b0a1000 	madd	x0, x0, x10, x4
    4000c4ac:	384014c5 	ldrb	w5, [x6], #1
    4000c4b0:	17ffffec 	b	4000c460 <_strtoll_l.constprop.0+0x80>
    4000c4b4:	510184a4 	sub	w4, w5, #0x61
    4000c4b8:	7100649f 	cmp	w4, #0x19
    4000c4bc:	540000a8 	b.hi	4000c4d0 <_strtoll_l.constprop.0+0xf0>  // b.pmore
    4000c4c0:	51015ca4 	sub	w4, w5, #0x57
    4000c4c4:	6b04007f 	cmp	w3, w4
    4000c4c8:	54fffdec 	b.gt	4000c484 <_strtoll_l.constprop.0+0xa4>
    4000c4cc:	d503201f 	nop
    4000c4d0:	310004ff 	cmn	w7, #0x1
    4000c4d4:	54000140 	b.eq	4000c4fc <_strtoll_l.constprop.0+0x11c>  // b.none
    4000c4d8:	710001bf 	cmp	w13, #0x0
    4000c4dc:	da800400 	cneg	x0, x0, ne  // ne = any
    4000c4e0:	b4000062 	cbz	x2, 4000c4ec <_strtoll_l.constprop.0+0x10c>
    4000c4e4:	350003a7 	cbnz	w7, 4000c558 <_strtoll_l.constprop.0+0x178>
    4000c4e8:	f9000041 	str	x1, [x2]
    4000c4ec:	d65f03c0 	ret
    4000c4f0:	394000c5 	ldrb	w5, [x6]
    4000c4f4:	91000906 	add	x6, x8, #0x2
    4000c4f8:	17ffffca 	b	4000c420 <_strtoll_l.constprop.0+0x40>
    4000c4fc:	52800440 	mov	w0, #0x22                  	// #34
    4000c500:	b9000180 	str	w0, [x12]
    4000c504:	aa0b03e0 	mov	x0, x11
    4000c508:	b4ffff22 	cbz	x2, 4000c4ec <_strtoll_l.constprop.0+0x10c>
    4000c50c:	d10004c1 	sub	x1, x6, #0x1
    4000c510:	aa0b03e0 	mov	x0, x11
    4000c514:	f9000041 	str	x1, [x2]
    4000c518:	17fffff5 	b	4000c4ec <_strtoll_l.constprop.0+0x10c>
    4000c51c:	394000c5 	ldrb	w5, [x6]
    4000c520:	d2f0000b 	mov	x11, #0x8000000000000000    	// #-9223372036854775808
    4000c524:	91000906 	add	x6, x8, #0x2
    4000c528:	5280002d 	mov	w13, #0x1                   	// #1
    4000c52c:	17ffffbd 	b	4000c420 <_strtoll_l.constprop.0+0x40>
    4000c530:	394000c0 	ldrb	w0, [x6]
    4000c534:	121a7800 	and	w0, w0, #0xffffffdf
    4000c538:	12001c00 	and	w0, w0, #0xff
    4000c53c:	7101601f 	cmp	w0, #0x58
    4000c540:	54fff801 	b.ne	4000c440 <_strtoll_l.constprop.0+0x60>  // b.any
    4000c544:	394004c5 	ldrb	w5, [x6, #1]
    4000c548:	d280020a 	mov	x10, #0x10                  	// #16
    4000c54c:	910008c6 	add	x6, x6, #0x2
    4000c550:	2a0a03e3 	mov	w3, w10
    4000c554:	17ffffbe 	b	4000c44c <_strtoll_l.constprop.0+0x6c>
    4000c558:	aa0003eb 	mov	x11, x0
    4000c55c:	17ffffec 	b	4000c50c <_strtoll_l.constprop.0+0x12c>
    4000c560:	d280010a 	mov	x10, #0x8                   	// #8
    4000c564:	2a0a03e3 	mov	w3, w10
    4000c568:	17ffffb9 	b	4000c44c <_strtoll_l.constprop.0+0x6c>
    4000c56c:	00000000 	udf	#0

000000004000c570 <_strtoll_r>:
    4000c570:	17ffff9c 	b	4000c3e0 <_strtoll_l.constprop.0>
	...

000000004000c580 <_strtoul_l.constprop.0>:
    4000c580:	d00000a7 	adrp	x7, 40022000 <__pow_log_data+0xcc8>
    4000c584:	aa0003eb 	mov	x11, x0
    4000c588:	aa0103e6 	mov	x6, x1
    4000c58c:	912fc4e7 	add	x7, x7, #0xbf1
    4000c590:	aa0603e8 	mov	x8, x6
    4000c594:	384014c4 	ldrb	w4, [x6], #1
    4000c598:	92401c85 	and	x5, x4, #0xff
    4000c59c:	386568e5 	ldrb	w5, [x7, x5]
    4000c5a0:	371fff85 	tbnz	w5, #3, 4000c590 <_strtoul_l.constprop.0+0x10>
    4000c5a4:	2a0403e5 	mov	w5, w4
    4000c5a8:	7100b49f 	cmp	w4, #0x2d
    4000c5ac:	540008e0 	b.eq	4000c6c8 <_strtoul_l.constprop.0+0x148>  // b.none
    4000c5b0:	5280000c 	mov	w12, #0x0                   	// #0
    4000c5b4:	7100ac9f 	cmp	w4, #0x2b
    4000c5b8:	54000740 	b.eq	4000c6a0 <_strtoul_l.constprop.0+0x120>  // b.none
    4000c5bc:	721b787f 	tst	w3, #0xffffffef
    4000c5c0:	54000181 	b.ne	4000c5f0 <_strtoul_l.constprop.0+0x70>  // b.any
    4000c5c4:	7100c0bf 	cmp	w5, #0x30
    4000c5c8:	54000880 	b.eq	4000c6d8 <_strtoul_l.constprop.0+0x158>  // b.none
    4000c5cc:	35000123 	cbnz	w3, 4000c5f0 <_strtoul_l.constprop.0+0x70>
    4000c5d0:	b201e7e8 	mov	x8, #0x9999999999999999    	// #-7378697629483820647
    4000c5d4:	d280014a 	mov	x10, #0xa                   	// #10
    4000c5d8:	528000a9 	mov	w9, #0x5                   	// #5
    4000c5dc:	2a0a03e3 	mov	w3, w10
    4000c5e0:	f2e33328 	movk	x8, #0x1999, lsl #48
    4000c5e4:	14000008 	b	4000c604 <_strtoul_l.constprop.0+0x84>
    4000c5e8:	34000903 	cbz	w3, 4000c708 <_strtoul_l.constprop.0+0x188>
    4000c5ec:	d503201f 	nop
    4000c5f0:	93407c6a 	sxtw	x10, w3
    4000c5f4:	92800008 	mov	x8, #0xffffffffffffffff    	// #-1
    4000c5f8:	9aca0908 	udiv	x8, x8, x10
    4000c5fc:	9b0a7d09 	mul	x9, x8, x10
    4000c600:	2a2903e9 	mvn	w9, w9
    4000c604:	52800007 	mov	w7, #0x0                   	// #0
    4000c608:	d2800000 	mov	x0, #0x0                   	// #0
    4000c60c:	d503201f 	nop
    4000c610:	5100c0a4 	sub	w4, w5, #0x30
    4000c614:	7100249f 	cmp	w4, #0x9
    4000c618:	540000a9 	b.ls	4000c62c <_strtoul_l.constprop.0+0xac>  // b.plast
    4000c61c:	510104a4 	sub	w4, w5, #0x41
    4000c620:	7100649f 	cmp	w4, #0x19
    4000c624:	54000208 	b.hi	4000c664 <_strtoul_l.constprop.0+0xe4>  // b.pmore
    4000c628:	5100dca4 	sub	w4, w5, #0x37
    4000c62c:	6b04007f 	cmp	w3, w4
    4000c630:	5400028d 	b.le	4000c680 <_strtoul_l.constprop.0+0x100>
    4000c634:	710000ff 	cmp	w7, #0x0
    4000c638:	12800007 	mov	w7, #0xffffffff            	// #-1
    4000c63c:	fa48a002 	ccmp	x0, x8, #0x2, ge  // ge = tcont
    4000c640:	540000e8 	b.hi	4000c65c <_strtoul_l.constprop.0+0xdc>  // b.pmore
    4000c644:	eb08001f 	cmp	x0, x8
    4000c648:	7a490084 	ccmp	w4, w9, #0x4, eq  // eq = none
    4000c64c:	5400008c 	b.gt	4000c65c <_strtoul_l.constprop.0+0xdc>
    4000c650:	93407c84 	sxtw	x4, w4
    4000c654:	52800027 	mov	w7, #0x1                   	// #1
    4000c658:	9b0a1000 	madd	x0, x0, x10, x4
    4000c65c:	384014c5 	ldrb	w5, [x6], #1
    4000c660:	17ffffec 	b	4000c610 <_strtoul_l.constprop.0+0x90>
    4000c664:	510184a4 	sub	w4, w5, #0x61
    4000c668:	7100649f 	cmp	w4, #0x19
    4000c66c:	540000a8 	b.hi	4000c680 <_strtoul_l.constprop.0+0x100>  // b.pmore
    4000c670:	51015ca4 	sub	w4, w5, #0x57
    4000c674:	6b04007f 	cmp	w3, w4
    4000c678:	54fffdec 	b.gt	4000c634 <_strtoul_l.constprop.0+0xb4>
    4000c67c:	d503201f 	nop
    4000c680:	310004ff 	cmn	w7, #0x1
    4000c684:	54000140 	b.eq	4000c6ac <_strtoul_l.constprop.0+0x12c>  // b.none
    4000c688:	7100019f 	cmp	w12, #0x0
    4000c68c:	da800400 	cneg	x0, x0, ne  // ne = any
    4000c690:	b4000062 	cbz	x2, 4000c69c <_strtoul_l.constprop.0+0x11c>
    4000c694:	35000147 	cbnz	w7, 4000c6bc <_strtoul_l.constprop.0+0x13c>
    4000c698:	f9000041 	str	x1, [x2]
    4000c69c:	d65f03c0 	ret
    4000c6a0:	394000c5 	ldrb	w5, [x6]
    4000c6a4:	91000906 	add	x6, x8, #0x2
    4000c6a8:	17ffffc5 	b	4000c5bc <_strtoul_l.constprop.0+0x3c>
    4000c6ac:	52800440 	mov	w0, #0x22                  	// #34
    4000c6b0:	b9000160 	str	w0, [x11]
    4000c6b4:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
    4000c6b8:	b4ffff22 	cbz	x2, 4000c69c <_strtoul_l.constprop.0+0x11c>
    4000c6bc:	d10004c1 	sub	x1, x6, #0x1
    4000c6c0:	f9000041 	str	x1, [x2]
    4000c6c4:	17fffff6 	b	4000c69c <_strtoul_l.constprop.0+0x11c>
    4000c6c8:	394000c5 	ldrb	w5, [x6]
    4000c6cc:	5280002c 	mov	w12, #0x1                   	// #1
    4000c6d0:	91000906 	add	x6, x8, #0x2
    4000c6d4:	17ffffba 	b	4000c5bc <_strtoul_l.constprop.0+0x3c>
    4000c6d8:	394000c0 	ldrb	w0, [x6]
    4000c6dc:	121a7800 	and	w0, w0, #0xffffffdf
    4000c6e0:	12001c00 	and	w0, w0, #0xff
    4000c6e4:	7101601f 	cmp	w0, #0x58
    4000c6e8:	54fff801 	b.ne	4000c5e8 <_strtoul_l.constprop.0+0x68>  // b.any
    4000c6ec:	394004c5 	ldrb	w5, [x6, #1]
    4000c6f0:	d280020a 	mov	x10, #0x10                  	// #16
    4000c6f4:	910008c6 	add	x6, x6, #0x2
    4000c6f8:	2a0a03e3 	mov	w3, w10
    4000c6fc:	528001e9 	mov	w9, #0xf                   	// #15
    4000c700:	92fe0008 	mov	x8, #0xfffffffffffffff     	// #1152921504606846975
    4000c704:	17ffffc0 	b	4000c604 <_strtoul_l.constprop.0+0x84>
    4000c708:	d280010a 	mov	x10, #0x8                   	// #8
    4000c70c:	528000e9 	mov	w9, #0x7                   	// #7
    4000c710:	2a0a03e3 	mov	w3, w10
    4000c714:	92fc0008 	mov	x8, #0x1fffffffffffffff    	// #2305843009213693951
    4000c718:	17ffffbb 	b	4000c604 <_strtoul_l.constprop.0+0x84>
    4000c71c:	00000000 	udf	#0

000000004000c720 <_strtoul_r>:
    4000c720:	17ffff98 	b	4000c580 <_strtoul_l.constprop.0>
	...

000000004000c730 <_strtoull_l.constprop.0>:
    4000c730:	d00000a7 	adrp	x7, 40022000 <__pow_log_data+0xcc8>
    4000c734:	aa0003eb 	mov	x11, x0
    4000c738:	aa0103e6 	mov	x6, x1
    4000c73c:	912fc4e7 	add	x7, x7, #0xbf1
    4000c740:	aa0603e8 	mov	x8, x6
    4000c744:	384014c4 	ldrb	w4, [x6], #1
    4000c748:	92401c85 	and	x5, x4, #0xff
    4000c74c:	386568e5 	ldrb	w5, [x7, x5]
    4000c750:	371fff85 	tbnz	w5, #3, 4000c740 <_strtoull_l.constprop.0+0x10>
    4000c754:	2a0403e5 	mov	w5, w4
    4000c758:	7100b49f 	cmp	w4, #0x2d
    4000c75c:	540008e0 	b.eq	4000c878 <_strtoull_l.constprop.0+0x148>  // b.none
    4000c760:	5280000c 	mov	w12, #0x0                   	// #0
    4000c764:	7100ac9f 	cmp	w4, #0x2b
    4000c768:	54000740 	b.eq	4000c850 <_strtoull_l.constprop.0+0x120>  // b.none
    4000c76c:	721b787f 	tst	w3, #0xffffffef
    4000c770:	54000181 	b.ne	4000c7a0 <_strtoull_l.constprop.0+0x70>  // b.any
    4000c774:	7100c0bf 	cmp	w5, #0x30
    4000c778:	54000880 	b.eq	4000c888 <_strtoull_l.constprop.0+0x158>  // b.none
    4000c77c:	35000123 	cbnz	w3, 4000c7a0 <_strtoull_l.constprop.0+0x70>
    4000c780:	b201e7e8 	mov	x8, #0x9999999999999999    	// #-7378697629483820647
    4000c784:	d280014a 	mov	x10, #0xa                   	// #10
    4000c788:	528000a9 	mov	w9, #0x5                   	// #5
    4000c78c:	2a0a03e3 	mov	w3, w10
    4000c790:	f2e33328 	movk	x8, #0x1999, lsl #48
    4000c794:	14000008 	b	4000c7b4 <_strtoull_l.constprop.0+0x84>
    4000c798:	34000903 	cbz	w3, 4000c8b8 <_strtoull_l.constprop.0+0x188>
    4000c79c:	d503201f 	nop
    4000c7a0:	93407c6a 	sxtw	x10, w3
    4000c7a4:	92800008 	mov	x8, #0xffffffffffffffff    	// #-1
    4000c7a8:	9aca0908 	udiv	x8, x8, x10
    4000c7ac:	9b0a7d09 	mul	x9, x8, x10
    4000c7b0:	2a2903e9 	mvn	w9, w9
    4000c7b4:	52800007 	mov	w7, #0x0                   	// #0
    4000c7b8:	d2800000 	mov	x0, #0x0                   	// #0
    4000c7bc:	d503201f 	nop
    4000c7c0:	5100c0a4 	sub	w4, w5, #0x30
    4000c7c4:	7100249f 	cmp	w4, #0x9
    4000c7c8:	540000a9 	b.ls	4000c7dc <_strtoull_l.constprop.0+0xac>  // b.plast
    4000c7cc:	510104a4 	sub	w4, w5, #0x41
    4000c7d0:	7100649f 	cmp	w4, #0x19
    4000c7d4:	54000208 	b.hi	4000c814 <_strtoull_l.constprop.0+0xe4>  // b.pmore
    4000c7d8:	5100dca4 	sub	w4, w5, #0x37
    4000c7dc:	6b04007f 	cmp	w3, w4
    4000c7e0:	5400028d 	b.le	4000c830 <_strtoull_l.constprop.0+0x100>
    4000c7e4:	710000ff 	cmp	w7, #0x0
    4000c7e8:	12800007 	mov	w7, #0xffffffff            	// #-1
    4000c7ec:	fa48a002 	ccmp	x0, x8, #0x2, ge  // ge = tcont
    4000c7f0:	540000e8 	b.hi	4000c80c <_strtoull_l.constprop.0+0xdc>  // b.pmore
    4000c7f4:	eb08001f 	cmp	x0, x8
    4000c7f8:	7a490084 	ccmp	w4, w9, #0x4, eq  // eq = none
    4000c7fc:	5400008c 	b.gt	4000c80c <_strtoull_l.constprop.0+0xdc>
    4000c800:	93407c84 	sxtw	x4, w4
    4000c804:	52800027 	mov	w7, #0x1                   	// #1
    4000c808:	9b0a1000 	madd	x0, x0, x10, x4
    4000c80c:	384014c5 	ldrb	w5, [x6], #1
    4000c810:	17ffffec 	b	4000c7c0 <_strtoull_l.constprop.0+0x90>
    4000c814:	510184a4 	sub	w4, w5, #0x61
    4000c818:	7100649f 	cmp	w4, #0x19
    4000c81c:	540000a8 	b.hi	4000c830 <_strtoull_l.constprop.0+0x100>  // b.pmore
    4000c820:	51015ca4 	sub	w4, w5, #0x57
    4000c824:	6b04007f 	cmp	w3, w4
    4000c828:	54fffdec 	b.gt	4000c7e4 <_strtoull_l.constprop.0+0xb4>
    4000c82c:	d503201f 	nop
    4000c830:	310004ff 	cmn	w7, #0x1
    4000c834:	54000140 	b.eq	4000c85c <_strtoull_l.constprop.0+0x12c>  // b.none
    4000c838:	7100019f 	cmp	w12, #0x0
    4000c83c:	da800400 	cneg	x0, x0, ne  // ne = any
    4000c840:	b4000062 	cbz	x2, 4000c84c <_strtoull_l.constprop.0+0x11c>
    4000c844:	35000147 	cbnz	w7, 4000c86c <_strtoull_l.constprop.0+0x13c>
    4000c848:	f9000041 	str	x1, [x2]
    4000c84c:	d65f03c0 	ret
    4000c850:	394000c5 	ldrb	w5, [x6]
    4000c854:	91000906 	add	x6, x8, #0x2
    4000c858:	17ffffc5 	b	4000c76c <_strtoull_l.constprop.0+0x3c>
    4000c85c:	52800440 	mov	w0, #0x22                  	// #34
    4000c860:	b9000160 	str	w0, [x11]
    4000c864:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
    4000c868:	b4ffff22 	cbz	x2, 4000c84c <_strtoull_l.constprop.0+0x11c>
    4000c86c:	d10004c1 	sub	x1, x6, #0x1
    4000c870:	f9000041 	str	x1, [x2]
    4000c874:	17fffff6 	b	4000c84c <_strtoull_l.constprop.0+0x11c>
    4000c878:	394000c5 	ldrb	w5, [x6]
    4000c87c:	5280002c 	mov	w12, #0x1                   	// #1
    4000c880:	91000906 	add	x6, x8, #0x2
    4000c884:	17ffffba 	b	4000c76c <_strtoull_l.constprop.0+0x3c>
    4000c888:	394000c0 	ldrb	w0, [x6]
    4000c88c:	121a7800 	and	w0, w0, #0xffffffdf
    4000c890:	12001c00 	and	w0, w0, #0xff
    4000c894:	7101601f 	cmp	w0, #0x58
    4000c898:	54fff801 	b.ne	4000c798 <_strtoull_l.constprop.0+0x68>  // b.any
    4000c89c:	394004c5 	ldrb	w5, [x6, #1]
    4000c8a0:	d280020a 	mov	x10, #0x10                  	// #16
    4000c8a4:	910008c6 	add	x6, x6, #0x2
    4000c8a8:	2a0a03e3 	mov	w3, w10
    4000c8ac:	528001e9 	mov	w9, #0xf                   	// #15
    4000c8b0:	92fe0008 	mov	x8, #0xfffffffffffffff     	// #1152921504606846975
    4000c8b4:	17ffffc0 	b	4000c7b4 <_strtoull_l.constprop.0+0x84>
    4000c8b8:	d280010a 	mov	x10, #0x8                   	// #8
    4000c8bc:	528000e9 	mov	w9, #0x7                   	// #7
    4000c8c0:	2a0a03e3 	mov	w3, w10
    4000c8c4:	92fc0008 	mov	x8, #0x1fffffffffffffff    	// #2305843009213693951
    4000c8c8:	17ffffbb 	b	4000c7b4 <_strtoull_l.constprop.0+0x84>
    4000c8cc:	00000000 	udf	#0

000000004000c8d0 <_strtoull_r>:
    4000c8d0:	17ffff98 	b	4000c730 <_strtoull_l.constprop.0>
	...

000000004000c8e0 <_svfprintf_r>:
    4000c8e0:	a9a27bfd 	stp	x29, x30, [sp, #-480]!
    4000c8e4:	910003fd 	mov	x29, sp
    4000c8e8:	a90363f7 	stp	x23, x24, [sp, #48]
    4000c8ec:	aa0103f8 	mov	x24, x1
    4000c8f0:	f9400061 	ldr	x1, [x3]
    4000c8f4:	f90047e1 	str	x1, [sp, #136]
    4000c8f8:	f9400461 	ldr	x1, [x3, #8]
    4000c8fc:	f90067e1 	str	x1, [sp, #200]
    4000c900:	f9400861 	ldr	x1, [x3, #16]
    4000c904:	f90077e1 	str	x1, [sp, #232]
    4000c908:	b9401861 	ldr	w1, [x3, #24]
    4000c90c:	b9009be1 	str	w1, [sp, #152]
    4000c910:	b9401c61 	ldr	w1, [x3, #28]
    4000c914:	a9046bf9 	stp	x25, x26, [sp, #64]
    4000c918:	aa0003f9 	mov	x25, x0
    4000c91c:	a90573fb 	stp	x27, x28, [sp, #80]
    4000c920:	aa0203fc 	mov	x28, x2
    4000c924:	b900d7e1 	str	w1, [sp, #212]
    4000c928:	97fff4ae 	bl	40009be0 <_localeconv_r>
    4000c92c:	f9400000 	ldr	x0, [x0]
    4000c930:	f90063e0 	str	x0, [sp, #192]
    4000c934:	97ffd283 	bl	40001340 <strlen>
    4000c938:	f9005fe0 	str	x0, [sp, #184]
    4000c93c:	79402301 	ldrh	w1, [x24, #16]
    4000c940:	36380061 	tbz	w1, #7, 4000c94c <_svfprintf_r+0x6c>
    4000c944:	f9400f00 	ldr	x0, [x24, #24]
    4000c948:	b4009620 	cbz	x0, 4000dc0c <_svfprintf_r+0x132c>
    4000c94c:	a90153f3 	stp	x19, x20, [sp, #16]
    4000c950:	a9025bf5 	stp	x21, x22, [sp, #32]
    4000c954:	6d0627e8 	stp	d8, d9, [sp, #96]
    4000c958:	910583f5 	add	x21, sp, #0x160
    4000c95c:	2f00e408 	movi	d8, #0x0
    4000c960:	aa1503e6 	mov	x6, x21
    4000c964:	f00000a0 	adrp	x0, 40023000 <fpi.1>
    4000c968:	91122000 	add	x0, x0, #0x488
    4000c96c:	b90087ff 	str	wzr, [sp, #132]
    4000c970:	f90053e0 	str	x0, [sp, #160]
    4000c974:	b900abff 	str	wzr, [sp, #168]
    4000c978:	f9005bff 	str	xzr, [sp, #176]
    4000c97c:	b900d3ff 	str	wzr, [sp, #208]
    4000c980:	f90093f5 	str	x21, [sp, #288]
    4000c984:	b9012bff 	str	wzr, [sp, #296]
    4000c988:	f9009bff 	str	xzr, [sp, #304]
    4000c98c:	39400380 	ldrb	w0, [x28]
    4000c990:	aa1c03f3 	mov	x19, x28
    4000c994:	7100941f 	cmp	w0, #0x25
    4000c998:	7a401804 	ccmp	w0, #0x0, #0x4, ne  // ne = any
    4000c99c:	54000300 	b.eq	4000c9fc <_svfprintf_r+0x11c>  // b.none
    4000c9a0:	aa1303f4 	mov	x20, x19
    4000c9a4:	38401e60 	ldrb	w0, [x19, #1]!
    4000c9a8:	7100941f 	cmp	w0, #0x25
    4000c9ac:	7a401804 	ccmp	w0, #0x0, #0x4, ne  // ne = any
    4000c9b0:	54ffff81 	b.ne	4000c9a0 <_svfprintf_r+0xc0>  // b.any
    4000c9b4:	cb1c0276 	sub	x22, x19, x28
    4000c9b8:	6b1c027f 	cmp	w19, w28
    4000c9bc:	54000200 	b.eq	4000c9fc <_svfprintf_r+0x11c>  // b.none
    4000c9c0:	f9409be2 	ldr	x2, [sp, #304]
    4000c9c4:	93407ec1 	sxtw	x1, w22
    4000c9c8:	b9412be0 	ldr	w0, [sp, #296]
    4000c9cc:	8b010042 	add	x2, x2, x1
    4000c9d0:	a90004dc 	stp	x28, x1, [x6]
    4000c9d4:	11000400 	add	w0, w0, #0x1
    4000c9d8:	b9012be0 	str	w0, [sp, #296]
    4000c9dc:	910040c6 	add	x6, x6, #0x10
    4000c9e0:	f9009be2 	str	x2, [sp, #304]
    4000c9e4:	71001c1f 	cmp	w0, #0x7
    4000c9e8:	540013ec 	b.gt	4000cc64 <_svfprintf_r+0x384>
    4000c9ec:	b94087e0 	ldr	w0, [sp, #132]
    4000c9f0:	0b160000 	add	w0, w0, w22
    4000c9f4:	b90087e0 	str	w0, [sp, #132]
    4000c9f8:	39400680 	ldrb	w0, [x20, #1]
    4000c9fc:	3400a800 	cbz	w0, 4000defc <_svfprintf_r+0x161c>
    4000ca00:	39400669 	ldrb	w9, [x19, #1]
    4000ca04:	12800007 	mov	w7, #0xffffffff            	// #-1
    4000ca08:	9100067c 	add	x28, x19, #0x1
    4000ca0c:	2a0703e3 	mov	w3, w7
    4000ca10:	52800001 	mov	w1, #0x0                   	// #0
    4000ca14:	52800002 	mov	w2, #0x0                   	// #0
    4000ca18:	52800014 	mov	w20, #0x0                   	// #0
    4000ca1c:	5280001a 	mov	w26, #0x0                   	// #0
    4000ca20:	3903ffff 	strb	wzr, [sp, #255]
    4000ca24:	9100079c 	add	x28, x28, #0x1
    4000ca28:	2a0903fb 	mov	w27, w9
    4000ca2c:	51008360 	sub	w0, w27, #0x20
    4000ca30:	7101601f 	cmp	w0, #0x58
    4000ca34:	54000189 	b.ls	4000ca64 <_svfprintf_r+0x184>  // b.plast
    4000ca38:	3500d941 	cbnz	w1, 4000e560 <_svfprintf_r+0x1c80>
    4000ca3c:	3400a61b 	cbz	w27, 4000defc <_svfprintf_r+0x161c>
    4000ca40:	52800033 	mov	w19, #0x1                   	// #1
    4000ca44:	9104e3f6 	add	x22, sp, #0x138
    4000ca48:	2a1303f7 	mov	w23, w19
    4000ca4c:	3903ffff 	strb	wzr, [sp, #255]
    4000ca50:	3904e3fb 	strb	w27, [sp, #312]
    4000ca54:	52800007 	mov	w7, #0x0                   	// #0
    4000ca58:	b9007bfa 	str	w26, [sp, #120]
    4000ca5c:	b9009fff 	str	wzr, [sp, #156]
    4000ca60:	14000039 	b	4000cb44 <_svfprintf_r+0x264>
    4000ca64:	f94053e4 	ldr	x4, [sp, #160]
    4000ca68:	78605880 	ldrh	w0, [x4, w0, uxtw #1]
    4000ca6c:	10000064 	adr	x4, 4000ca78 <_svfprintf_r+0x198>
    4000ca70:	8b20a880 	add	x0, x4, w0, sxth #2
    4000ca74:	d61f0000 	br	x0
    4000ca78:	5100c360 	sub	w0, w27, #0x30
    4000ca7c:	52800014 	mov	w20, #0x0                   	// #0
    4000ca80:	3840179b 	ldrb	w27, [x28], #1
    4000ca84:	0b140a94 	add	w20, w20, w20, lsl #2
    4000ca88:	0b140414 	add	w20, w0, w20, lsl #1
    4000ca8c:	5100c360 	sub	w0, w27, #0x30
    4000ca90:	7100241f 	cmp	w0, #0x9
    4000ca94:	54ffff69 	b.ls	4000ca80 <_svfprintf_r+0x1a0>  // b.plast
    4000ca98:	17ffffe5 	b	4000ca2c <_svfprintf_r+0x14c>
    4000ca9c:	321c035a 	orr	w26, w26, #0x10
    4000caa0:	b9409be0 	ldr	w0, [sp, #152]
    4000caa4:	3628197a 	tbz	w26, #5, 4000cdd0 <_svfprintf_r+0x4f0>
    4000caa8:	37f89180 	tbnz	w0, #31, 4000dcd8 <_svfprintf_r+0x13f8>
    4000caac:	f94047e0 	ldr	x0, [sp, #136]
    4000cab0:	91003c01 	add	x1, x0, #0xf
    4000cab4:	927df021 	and	x1, x1, #0xfffffffffffffff8
    4000cab8:	f90047e1 	str	x1, [sp, #136]
    4000cabc:	52800001 	mov	w1, #0x0                   	// #0
    4000cac0:	f9400000 	ldr	x0, [x0]
    4000cac4:	1400000b 	b	4000caf0 <_svfprintf_r+0x210>
    4000cac8:	321c035a 	orr	w26, w26, #0x10
    4000cacc:	b9409be0 	ldr	w0, [sp, #152]
    4000cad0:	3628195a 	tbz	w26, #5, 4000cdf8 <_svfprintf_r+0x518>
    4000cad4:	37f892a0 	tbnz	w0, #31, 4000dd28 <_svfprintf_r+0x1448>
    4000cad8:	f94047e0 	ldr	x0, [sp, #136]
    4000cadc:	91003c01 	add	x1, x0, #0xf
    4000cae0:	927df021 	and	x1, x1, #0xfffffffffffffff8
    4000cae4:	f90047e1 	str	x1, [sp, #136]
    4000cae8:	f9400000 	ldr	x0, [x0]
    4000caec:	52800021 	mov	w1, #0x1                   	// #1
    4000caf0:	52800003 	mov	w3, #0x0                   	// #0
    4000caf4:	3903ffff 	strb	wzr, [sp, #255]
    4000caf8:	310004ff 	cmn	w7, #0x1
    4000cafc:	540049e0 	b.eq	4000d438 <_svfprintf_r+0xb58>  // b.none
    4000cb00:	12187b42 	and	w2, w26, #0xffffff7f
    4000cb04:	b9007be2 	str	w2, [sp, #120]
    4000cb08:	f100001f 	cmp	x0, #0x0
    4000cb0c:	7a4008e0 	ccmp	w7, #0x0, #0x0, eq  // eq = none
    4000cb10:	54004921 	b.ne	4000d434 <_svfprintf_r+0xb54>  // b.any
    4000cb14:	35001ae1 	cbnz	w1, 4000ce70 <_svfprintf_r+0x590>
    4000cb18:	12000357 	and	w23, w26, #0x1
    4000cb1c:	360070fa 	tbz	w26, #0, 4000d938 <_svfprintf_r+0x1058>
    4000cb20:	91057ff6 	add	x22, sp, #0x15f
    4000cb24:	52800600 	mov	w0, #0x30                  	// #48
    4000cb28:	52800007 	mov	w7, #0x0                   	// #0
    4000cb2c:	39057fe0 	strb	w0, [sp, #351]
    4000cb30:	b9009fff 	str	wzr, [sp, #156]
    4000cb34:	6b1700ff 	cmp	w7, w23
    4000cb38:	1a97a0f3 	csel	w19, w7, w23, ge  // ge = tcont
    4000cb3c:	34000043 	cbz	w3, 4000cb44 <_svfprintf_r+0x264>
    4000cb40:	11000673 	add	w19, w19, #0x1
    4000cb44:	b9407be1 	ldr	w1, [sp, #120]
    4000cb48:	11000a60 	add	w0, w19, #0x2
    4000cb4c:	5280109a 	mov	w26, #0x84                  	// #132
    4000cb50:	721f002b 	ands	w11, w1, #0x2
    4000cb54:	1a931013 	csel	w19, w0, w19, ne  // ne = any
    4000cb58:	6a1a0020 	ands	w0, w1, w26
    4000cb5c:	b90093e0 	str	w0, [sp, #144]
    4000cb60:	f9409be0 	ldr	x0, [sp, #304]
    4000cb64:	54000081 	b.ne	4000cb74 <_svfprintf_r+0x294>  // b.any
    4000cb68:	4b130283 	sub	w3, w20, w19
    4000cb6c:	7100007f 	cmp	w3, #0x0
    4000cb70:	540051cc 	b.gt	4000d5a8 <_svfprintf_r+0xcc8>
    4000cb74:	3943ffe1 	ldrb	w1, [sp, #255]
    4000cb78:	340001a1 	cbz	w1, 4000cbac <_svfprintf_r+0x2cc>
    4000cb7c:	b9412be1 	ldr	w1, [sp, #296]
    4000cb80:	9103ffe2 	add	x2, sp, #0xff
    4000cb84:	91000400 	add	x0, x0, #0x1
    4000cb88:	f90000c2 	str	x2, [x6]
    4000cb8c:	11000421 	add	w1, w1, #0x1
    4000cb90:	d2800022 	mov	x2, #0x1                   	// #1
    4000cb94:	f90004c2 	str	x2, [x6, #8]
    4000cb98:	910040c6 	add	x6, x6, #0x10
    4000cb9c:	b9012be1 	str	w1, [sp, #296]
    4000cba0:	f9009be0 	str	x0, [sp, #304]
    4000cba4:	71001c3f 	cmp	w1, #0x7
    4000cba8:	54000d6c 	b.gt	4000cd54 <_svfprintf_r+0x474>
    4000cbac:	340001ab 	cbz	w11, 4000cbe0 <_svfprintf_r+0x300>
    4000cbb0:	b9412be1 	ldr	w1, [sp, #296]
    4000cbb4:	910403e2 	add	x2, sp, #0x100
    4000cbb8:	91000800 	add	x0, x0, #0x2
    4000cbbc:	f90000c2 	str	x2, [x6]
    4000cbc0:	11000421 	add	w1, w1, #0x1
    4000cbc4:	d2800042 	mov	x2, #0x2                   	// #2
    4000cbc8:	f90004c2 	str	x2, [x6, #8]
    4000cbcc:	910040c6 	add	x6, x6, #0x10
    4000cbd0:	b9012be1 	str	w1, [sp, #296]
    4000cbd4:	f9009be0 	str	x0, [sp, #304]
    4000cbd8:	71001c3f 	cmp	w1, #0x7
    4000cbdc:	5400574c 	b.gt	4000d6c4 <_svfprintf_r+0xde4>
    4000cbe0:	b94093e1 	ldr	w1, [sp, #144]
    4000cbe4:	7102003f 	cmp	w1, #0x80
    4000cbe8:	54003280 	b.eq	4000d238 <_svfprintf_r+0x958>  // b.none
    4000cbec:	4b1700fa 	sub	w26, w7, w23
    4000cbf0:	7100035f 	cmp	w26, #0x0
    4000cbf4:	54003aec 	b.gt	4000d350 <_svfprintf_r+0xa70>
    4000cbf8:	f9403fe1 	ldr	x1, [sp, #120]
    4000cbfc:	374029c1 	tbnz	w1, #8, 4000d134 <_svfprintf_r+0x854>
    4000cc00:	b9412be1 	ldr	w1, [sp, #296]
    4000cc04:	93407ef7 	sxtw	x23, w23
    4000cc08:	8b170000 	add	x0, x0, x23
    4000cc0c:	f9009be0 	str	x0, [sp, #304]
    4000cc10:	11000421 	add	w1, w1, #0x1
    4000cc14:	b9012be1 	str	w1, [sp, #296]
    4000cc18:	f90000d6 	str	x22, [x6]
    4000cc1c:	f90004d7 	str	x23, [x6, #8]
    4000cc20:	71001c3f 	cmp	w1, #0x7
    4000cc24:	54000c6c 	b.gt	4000cdb0 <_svfprintf_r+0x4d0>
    4000cc28:	910040c6 	add	x6, x6, #0x10
    4000cc2c:	f9403fe1 	ldr	x1, [sp, #120]
    4000cc30:	36100081 	tbz	w1, #2, 4000cc40 <_svfprintf_r+0x360>
    4000cc34:	4b130296 	sub	w22, w20, w19
    4000cc38:	710002df 	cmp	w22, #0x0
    4000cc3c:	5400558c 	b.gt	4000d6ec <_svfprintf_r+0xe0c>
    4000cc40:	b94087e1 	ldr	w1, [sp, #132]
    4000cc44:	6b13029f 	cmp	w20, w19
    4000cc48:	1a93a293 	csel	w19, w20, w19, ge  // ge = tcont
    4000cc4c:	0b130021 	add	w1, w1, w19
    4000cc50:	b90087e1 	str	w1, [sp, #132]
    4000cc54:	b5004300 	cbnz	x0, 4000d4b4 <_svfprintf_r+0xbd4>
    4000cc58:	aa1503e6 	mov	x6, x21
    4000cc5c:	b9012bff 	str	wzr, [sp, #296]
    4000cc60:	17ffff4b 	b	4000c98c <_svfprintf_r+0xac>
    4000cc64:	910483e2 	add	x2, sp, #0x120
    4000cc68:	aa1803e1 	mov	x1, x24
    4000cc6c:	aa1903e0 	mov	x0, x25
    4000cc70:	94001410 	bl	40011cb0 <__ssprint_r>
    4000cc74:	35000080 	cbnz	w0, 4000cc84 <_svfprintf_r+0x3a4>
    4000cc78:	aa1503e6 	mov	x6, x21
    4000cc7c:	17ffff5c 	b	4000c9ec <_svfprintf_r+0x10c>
    4000cc80:	aa1303f8 	mov	x24, x19
    4000cc84:	79402300 	ldrh	w0, [x24, #16]
    4000cc88:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000cc8c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4000cc90:	f27a001f 	tst	x0, #0x40
    4000cc94:	b94087e0 	ldr	w0, [sp, #132]
    4000cc98:	6d4627e8 	ldp	d8, d9, [sp, #96]
    4000cc9c:	5a9f0000 	csinv	w0, w0, wzr, eq  // eq = none
    4000cca0:	b90087e0 	str	w0, [sp, #132]
    4000cca4:	b94087e0 	ldr	w0, [sp, #132]
    4000cca8:	a94363f7 	ldp	x23, x24, [sp, #48]
    4000ccac:	a9446bf9 	ldp	x25, x26, [sp, #64]
    4000ccb0:	a94573fb 	ldp	x27, x28, [sp, #80]
    4000ccb4:	a8de7bfd 	ldp	x29, x30, [sp], #480
    4000ccb8:	d65f03c0 	ret
    4000ccbc:	3500d241 	cbnz	w1, 4000e704 <_svfprintf_r+0x1e24>
    4000ccc0:	b940d7e0 	ldr	w0, [sp, #212]
    4000ccc4:	36186e3a 	tbz	w26, #3, 4000da88 <_svfprintf_r+0x11a8>
    4000ccc8:	37f8ae00 	tbnz	w0, #31, 4000e288 <_svfprintf_r+0x19a8>
    4000cccc:	f94047e0 	ldr	x0, [sp, #136]
    4000ccd0:	91003c00 	add	x0, x0, #0xf
    4000ccd4:	927cec00 	and	x0, x0, #0xfffffffffffffff0
    4000ccd8:	91004001 	add	x1, x0, #0x10
    4000ccdc:	f90047e1 	str	x1, [sp, #136]
    4000cce0:	3dc00000 	ldr	q0, [x0]
    4000cce4:	b9007be7 	str	w7, [sp, #120]
    4000cce8:	f9004be6 	str	x6, [sp, #144]
    4000ccec:	97ffd33e 	bl	400019e4 <__trunctfdf2>
    4000ccf0:	1e604008 	fmov	d8, d0
    4000ccf4:	b9407be7 	ldr	w7, [sp, #120]
    4000ccf8:	f9404be6 	ldr	x6, [sp, #144]
    4000ccfc:	1e60c101 	fabs	d1, d8
    4000cd00:	92f00200 	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
    4000cd04:	9e670000 	fmov	d0, x0
    4000cd08:	1e602020 	fcmp	d1, d0
    4000cd0c:	5400868d 	b.le	4000dddc <_svfprintf_r+0x14fc>
    4000cd10:	1e602118 	fcmpe	d8, #0.0
    4000cd14:	5400ab24 	b.mi	4000e278 <_svfprintf_r+0x1998>  // b.first
    4000cd18:	3943ffe3 	ldrb	w3, [sp, #255]
    4000cd1c:	d00000a0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    4000cd20:	d00000a4 	adrp	x4, 40022000 <__pow_log_data+0xcc8>
    4000cd24:	7101237f 	cmp	w27, #0x48
    4000cd28:	91342000 	add	x0, x0, #0xd08
    4000cd2c:	91340084 	add	x4, x4, #0xd00
    4000cd30:	12187b41 	and	w1, w26, #0xffffff7f
    4000cd34:	b9007be1 	str	w1, [sp, #120]
    4000cd38:	b9009fff 	str	wzr, [sp, #156]
    4000cd3c:	52800073 	mov	w19, #0x3                   	// #3
    4000cd40:	9a80b096 	csel	x22, x4, x0, lt  // lt = tstop
    4000cd44:	2a1303f7 	mov	w23, w19
    4000cd48:	52800007 	mov	w7, #0x0                   	// #0
    4000cd4c:	35ffefa3 	cbnz	w3, 4000cb40 <_svfprintf_r+0x260>
    4000cd50:	17ffff7d 	b	4000cb44 <_svfprintf_r+0x264>
    4000cd54:	910483e2 	add	x2, sp, #0x120
    4000cd58:	aa1803e1 	mov	x1, x24
    4000cd5c:	aa1903e0 	mov	x0, x25
    4000cd60:	b900dbe7 	str	w7, [sp, #216]
    4000cd64:	b900e3eb 	str	w11, [sp, #224]
    4000cd68:	940013d2 	bl	40011cb0 <__ssprint_r>
    4000cd6c:	35fff8c0 	cbnz	w0, 4000cc84 <_svfprintf_r+0x3a4>
    4000cd70:	b940dbe7 	ldr	w7, [sp, #216]
    4000cd74:	aa1503e6 	mov	x6, x21
    4000cd78:	b940e3eb 	ldr	w11, [sp, #224]
    4000cd7c:	f9409be0 	ldr	x0, [sp, #304]
    4000cd80:	17ffff8b 	b	4000cbac <_svfprintf_r+0x2cc>
    4000cd84:	2a0203e1 	mov	w1, w2
    4000cd88:	aa1603e3 	mov	x3, x22
    4000cd8c:	93407ef7 	sxtw	x23, w23
    4000cd90:	11000421 	add	w1, w1, #0x1
    4000cd94:	8b170000 	add	x0, x0, x23
    4000cd98:	b9012be1 	str	w1, [sp, #296]
    4000cd9c:	f9009be0 	str	x0, [sp, #304]
    4000cda0:	a9005cc3 	stp	x3, x23, [x6]
    4000cda4:	71001c3f 	cmp	w1, #0x7
    4000cda8:	54fff40d 	b.le	4000cc28 <_svfprintf_r+0x348>
    4000cdac:	d503201f 	nop
    4000cdb0:	910483e2 	add	x2, sp, #0x120
    4000cdb4:	aa1803e1 	mov	x1, x24
    4000cdb8:	aa1903e0 	mov	x0, x25
    4000cdbc:	940013bd 	bl	40011cb0 <__ssprint_r>
    4000cdc0:	35fff620 	cbnz	w0, 4000cc84 <_svfprintf_r+0x3a4>
    4000cdc4:	aa1503e6 	mov	x6, x21
    4000cdc8:	f9409be0 	ldr	x0, [sp, #304]
    4000cdcc:	17ffff98 	b	4000cc2c <_svfprintf_r+0x34c>
    4000cdd0:	3727e6da 	tbnz	w26, #4, 4000caa8 <_svfprintf_r+0x1c8>
    4000cdd4:	36308bfa 	tbz	w26, #6, 4000df50 <_svfprintf_r+0x1670>
    4000cdd8:	37f8b700 	tbnz	w0, #31, 4000e4b8 <_svfprintf_r+0x1bd8>
    4000cddc:	f94047e0 	ldr	x0, [sp, #136]
    4000cde0:	91002c01 	add	x1, x0, #0xb
    4000cde4:	927df021 	and	x1, x1, #0xfffffffffffffff8
    4000cde8:	f90047e1 	str	x1, [sp, #136]
    4000cdec:	79400000 	ldrh	w0, [x0]
    4000cdf0:	52800001 	mov	w1, #0x0                   	// #0
    4000cdf4:	17ffff3f 	b	4000caf0 <_svfprintf_r+0x210>
    4000cdf8:	3727e6fa 	tbnz	w26, #4, 4000cad4 <_svfprintf_r+0x1f4>
    4000cdfc:	36308eda 	tbz	w26, #6, 4000dfd4 <_svfprintf_r+0x16f4>
    4000ce00:	37f8b340 	tbnz	w0, #31, 4000e468 <_svfprintf_r+0x1b88>
    4000ce04:	f94047e0 	ldr	x0, [sp, #136]
    4000ce08:	91002c01 	add	x1, x0, #0xb
    4000ce0c:	927df021 	and	x1, x1, #0xfffffffffffffff8
    4000ce10:	f90047e1 	str	x1, [sp, #136]
    4000ce14:	79400000 	ldrh	w0, [x0]
    4000ce18:	52800021 	mov	w1, #0x1                   	// #1
    4000ce1c:	17ffff35 	b	4000caf0 <_svfprintf_r+0x210>
    4000ce20:	3500c761 	cbnz	w1, 4000e70c <_svfprintf_r+0x1e2c>
    4000ce24:	b9409be0 	ldr	w0, [sp, #152]
    4000ce28:	3728005a 	tbnz	w26, #5, 4000ce30 <_svfprintf_r+0x550>
    4000ce2c:	362063da 	tbz	w26, #4, 4000daa4 <_svfprintf_r+0x11c4>
    4000ce30:	37f87400 	tbnz	w0, #31, 4000dcb0 <_svfprintf_r+0x13d0>
    4000ce34:	f94047e0 	ldr	x0, [sp, #136]
    4000ce38:	91003c01 	add	x1, x0, #0xf
    4000ce3c:	927df021 	and	x1, x1, #0xfffffffffffffff8
    4000ce40:	f90047e1 	str	x1, [sp, #136]
    4000ce44:	f9400001 	ldr	x1, [x0]
    4000ce48:	aa0103e0 	mov	x0, x1
    4000ce4c:	b7f85de1 	tbnz	x1, #63, 4000da08 <_svfprintf_r+0x1128>
    4000ce50:	3943ffe3 	ldrb	w3, [sp, #255]
    4000ce54:	310004ff 	cmn	w7, #0x1
    4000ce58:	54004a80 	b.eq	4000d7a8 <_svfprintf_r+0xec8>  // b.none
    4000ce5c:	12187b41 	and	w1, w26, #0xffffff7f
    4000ce60:	b9007be1 	str	w1, [sp, #120]
    4000ce64:	710000ff 	cmp	w7, #0x0
    4000ce68:	fa400800 	ccmp	x0, #0x0, #0x0, eq  // eq = none
    4000ce6c:	540049c1 	b.ne	4000d7a4 <_svfprintf_r+0xec4>  // b.any
    4000ce70:	aa1503f6 	mov	x22, x21
    4000ce74:	52800007 	mov	w7, #0x0                   	// #0
    4000ce78:	52800017 	mov	w23, #0x0                   	// #0
    4000ce7c:	17ffff2d 	b	4000cb30 <_svfprintf_r+0x250>
    4000ce80:	4b1403f4 	neg	w20, w20
    4000ce84:	f90047e0 	str	x0, [sp, #136]
    4000ce88:	39400389 	ldrb	w9, [x28]
    4000ce8c:	321e035a 	orr	w26, w26, #0x4
    4000ce90:	17fffee5 	b	4000ca24 <_svfprintf_r+0x144>
    4000ce94:	39400389 	ldrb	w9, [x28]
    4000ce98:	321a035a 	orr	w26, w26, #0x40
    4000ce9c:	17fffee2 	b	4000ca24 <_svfprintf_r+0x144>
    4000cea0:	aa1c03e4 	mov	x4, x28
    4000cea4:	3840149b 	ldrb	w27, [x4], #1
    4000cea8:	7100ab7f 	cmp	w27, #0x2a
    4000ceac:	5400d7c0 	b.eq	4000e9a4 <_svfprintf_r+0x20c4>  // b.none
    4000ceb0:	5100c360 	sub	w0, w27, #0x30
    4000ceb4:	aa0403fc 	mov	x28, x4
    4000ceb8:	52800007 	mov	w7, #0x0                   	// #0
    4000cebc:	7100241f 	cmp	w0, #0x9
    4000cec0:	54ffdb68 	b.hi	4000ca2c <_svfprintf_r+0x14c>  // b.pmore
    4000cec4:	d503201f 	nop
    4000cec8:	3840179b 	ldrb	w27, [x28], #1
    4000cecc:	0b0708e7 	add	w7, w7, w7, lsl #2
    4000ced0:	0b070407 	add	w7, w0, w7, lsl #1
    4000ced4:	5100c360 	sub	w0, w27, #0x30
    4000ced8:	7100241f 	cmp	w0, #0x9
    4000cedc:	54ffff69 	b.ls	4000cec8 <_svfprintf_r+0x5e8>  // b.plast
    4000cee0:	17fffed3 	b	4000ca2c <_svfprintf_r+0x14c>
    4000cee4:	39400389 	ldrb	w9, [x28]
    4000cee8:	52800021 	mov	w1, #0x1                   	// #1
    4000ceec:	52800562 	mov	w2, #0x2b                  	// #43
    4000cef0:	17fffecd 	b	4000ca24 <_svfprintf_r+0x144>
    4000cef4:	b9409be0 	ldr	w0, [sp, #152]
    4000cef8:	37f86220 	tbnz	w0, #31, 4000db3c <_svfprintf_r+0x125c>
    4000cefc:	f94047e0 	ldr	x0, [sp, #136]
    4000cf00:	91002c00 	add	x0, x0, #0xb
    4000cf04:	927df000 	and	x0, x0, #0xfffffffffffffff8
    4000cf08:	f94047e4 	ldr	x4, [sp, #136]
    4000cf0c:	b9400094 	ldr	w20, [x4]
    4000cf10:	37fffb94 	tbnz	w20, #31, 4000ce80 <_svfprintf_r+0x5a0>
    4000cf14:	39400389 	ldrb	w9, [x28]
    4000cf18:	f90047e0 	str	x0, [sp, #136]
    4000cf1c:	17fffec2 	b	4000ca24 <_svfprintf_r+0x144>
    4000cf20:	39400389 	ldrb	w9, [x28]
    4000cf24:	321d035a 	orr	w26, w26, #0x8
    4000cf28:	17fffebf 	b	4000ca24 <_svfprintf_r+0x144>
    4000cf2c:	3500b141 	cbnz	w1, 4000e554 <_svfprintf_r+0x1c74>
    4000cf30:	321c035a 	orr	w26, w26, #0x10
    4000cf34:	17ffffbc 	b	4000ce24 <_svfprintf_r+0x544>
    4000cf38:	39400389 	ldrb	w9, [x28]
    4000cf3c:	3219035a 	orr	w26, w26, #0x80
    4000cf40:	17fffeb9 	b	4000ca24 <_svfprintf_r+0x144>
    4000cf44:	39400389 	ldrb	w9, [x28]
    4000cf48:	3200035a 	orr	w26, w26, #0x1
    4000cf4c:	17fffeb6 	b	4000ca24 <_svfprintf_r+0x144>
    4000cf50:	39400389 	ldrb	w9, [x28]
    4000cf54:	35ffd682 	cbnz	w2, 4000ca24 <_svfprintf_r+0x144>
    4000cf58:	52800021 	mov	w1, #0x1                   	// #1
    4000cf5c:	52800402 	mov	w2, #0x20                  	// #32
    4000cf60:	17fffeb1 	b	4000ca24 <_svfprintf_r+0x144>
    4000cf64:	3500c121 	cbnz	w1, 4000e788 <_svfprintf_r+0x1ea8>
    4000cf68:	d00000a0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    4000cf6c:	91348000 	add	x0, x0, #0xd20
    4000cf70:	f9005be0 	str	x0, [sp, #176]
    4000cf74:	b9409be0 	ldr	w0, [sp, #152]
    4000cf78:	3728005a 	tbnz	w26, #5, 4000cf80 <_svfprintf_r+0x6a0>
    4000cf7c:	3620577a 	tbz	w26, #4, 4000da68 <_svfprintf_r+0x1188>
    4000cf80:	37f86c00 	tbnz	w0, #31, 4000dd00 <_svfprintf_r+0x1420>
    4000cf84:	f94047e0 	ldr	x0, [sp, #136]
    4000cf88:	91003c01 	add	x1, x0, #0xf
    4000cf8c:	927df021 	and	x1, x1, #0xfffffffffffffff8
    4000cf90:	f90047e1 	str	x1, [sp, #136]
    4000cf94:	f9400000 	ldr	x0, [x0]
    4000cf98:	52800041 	mov	w1, #0x2                   	// #2
    4000cf9c:	3607daba 	tbz	w26, #0, 4000caf0 <_svfprintf_r+0x210>
    4000cfa0:	b4ffda80 	cbz	x0, 4000caf0 <_svfprintf_r+0x210>
    4000cfa4:	52800602 	mov	w2, #0x30                  	// #48
    4000cfa8:	2a01035a 	orr	w26, w26, w1
    4000cfac:	390403e2 	strb	w2, [sp, #256]
    4000cfb0:	390407fb 	strb	w27, [sp, #257]
    4000cfb4:	17fffecf 	b	4000caf0 <_svfprintf_r+0x210>
    4000cfb8:	b9409be0 	ldr	w0, [sp, #152]
    4000cfbc:	37f859a0 	tbnz	w0, #31, 4000daf0 <_svfprintf_r+0x1210>
    4000cfc0:	f94047e0 	ldr	x0, [sp, #136]
    4000cfc4:	91003c13 	add	x19, x0, #0xf
    4000cfc8:	927df273 	and	x19, x19, #0xfffffffffffffff8
    4000cfcc:	f94047e0 	ldr	x0, [sp, #136]
    4000cfd0:	3903ffff 	strb	wzr, [sp, #255]
    4000cfd4:	f9400016 	ldr	x22, [x0]
    4000cfd8:	b4007836 	cbz	x22, 4000dedc <_svfprintf_r+0x15fc>
    4000cfdc:	310004ff 	cmn	w7, #0x1
    4000cfe0:	540079c0 	b.eq	4000df18 <_svfprintf_r+0x1638>  // b.none
    4000cfe4:	93407ce2 	sxtw	x2, w7
    4000cfe8:	aa1603e0 	mov	x0, x22
    4000cfec:	52800001 	mov	w1, #0x0                   	// #0
    4000cff0:	b9007be7 	str	w7, [sp, #120]
    4000cff4:	f90047e6 	str	x6, [sp, #136]
    4000cff8:	97ffd207 	bl	40001814 <memchr>
    4000cffc:	b9407be7 	ldr	w7, [sp, #120]
    4000d000:	f94047e6 	ldr	x6, [sp, #136]
    4000d004:	b400b440 	cbz	x0, 4000e68c <_svfprintf_r+0x1dac>
    4000d008:	3943ffe3 	ldrb	w3, [sp, #255]
    4000d00c:	cb160017 	sub	x23, x0, x22
    4000d010:	b9007bfa 	str	w26, [sp, #120]
    4000d014:	710002ff 	cmp	w23, #0x0
    4000d018:	f90047f3 	str	x19, [sp, #136]
    4000d01c:	52800007 	mov	w7, #0x0                   	// #0
    4000d020:	b9009fff 	str	wzr, [sp, #156]
    4000d024:	1a9fa2f3 	csel	w19, w23, wzr, ge  // ge = tcont
    4000d028:	35ffd8c3 	cbnz	w3, 4000cb40 <_svfprintf_r+0x260>
    4000d02c:	17fffec6 	b	4000cb44 <_svfprintf_r+0x264>
    4000d030:	39400389 	ldrb	w9, [x28]
    4000d034:	321b035a 	orr	w26, w26, #0x20
    4000d038:	17fffe7b 	b	4000ca24 <_svfprintf_r+0x144>
    4000d03c:	b9409be0 	ldr	w0, [sp, #152]
    4000d040:	37f85440 	tbnz	w0, #31, 4000dac8 <_svfprintf_r+0x11e8>
    4000d044:	f94047e3 	ldr	x3, [sp, #136]
    4000d048:	91003c60 	add	x0, x3, #0xf
    4000d04c:	927df000 	and	x0, x0, #0xfffffffffffffff8
    4000d050:	f90047e0 	str	x0, [sp, #136]
    4000d054:	528f0600 	mov	w0, #0x7830                	// #30768
    4000d058:	b00000a2 	adrp	x2, 40022000 <__pow_log_data+0xcc8>
    4000d05c:	321f035a 	orr	w26, w26, #0x2
    4000d060:	91348042 	add	x2, x2, #0xd20
    4000d064:	52800041 	mov	w1, #0x2                   	// #2
    4000d068:	52800f1b 	mov	w27, #0x78                  	// #120
    4000d06c:	f9005be2 	str	x2, [sp, #176]
    4000d070:	790203e0 	strh	w0, [sp, #256]
    4000d074:	f9400060 	ldr	x0, [x3]
    4000d078:	17fffe9e 	b	4000caf0 <_svfprintf_r+0x210>
    4000d07c:	3500b3c1 	cbnz	w1, 4000e6f4 <_svfprintf_r+0x1e14>
    4000d080:	b9409be0 	ldr	w0, [sp, #152]
    4000d084:	3728019a 	tbnz	w26, #5, 4000d0b4 <_svfprintf_r+0x7d4>
    4000d088:	3720017a 	tbnz	w26, #4, 4000d0b4 <_svfprintf_r+0x7d4>
    4000d08c:	36309dda 	tbz	w26, #6, 4000e444 <_svfprintf_r+0x1b64>
    4000d090:	37f8bc00 	tbnz	w0, #31, 4000e810 <_svfprintf_r+0x1f30>
    4000d094:	f94047e0 	ldr	x0, [sp, #136]
    4000d098:	91003c01 	add	x1, x0, #0xf
    4000d09c:	927df021 	and	x1, x1, #0xfffffffffffffff8
    4000d0a0:	f90047e1 	str	x1, [sp, #136]
    4000d0a4:	f9400000 	ldr	x0, [x0]
    4000d0a8:	79410be1 	ldrh	w1, [sp, #132]
    4000d0ac:	79000001 	strh	w1, [x0]
    4000d0b0:	17fffe37 	b	4000c98c <_svfprintf_r+0xac>
    4000d0b4:	37f85980 	tbnz	w0, #31, 4000dbe4 <_svfprintf_r+0x1304>
    4000d0b8:	f94047e0 	ldr	x0, [sp, #136]
    4000d0bc:	91003c01 	add	x1, x0, #0xf
    4000d0c0:	927df021 	and	x1, x1, #0xfffffffffffffff8
    4000d0c4:	f90047e1 	str	x1, [sp, #136]
    4000d0c8:	f9400000 	ldr	x0, [x0]
    4000d0cc:	b98087e1 	ldrsw	x1, [sp, #132]
    4000d0d0:	f9000001 	str	x1, [x0]
    4000d0d4:	17fffe2e 	b	4000c98c <_svfprintf_r+0xac>
    4000d0d8:	39400389 	ldrb	w9, [x28]
    4000d0dc:	7101b13f 	cmp	w9, #0x6c
    4000d0e0:	540057a0 	b.eq	4000dbd4 <_svfprintf_r+0x12f4>  // b.none
    4000d0e4:	321c035a 	orr	w26, w26, #0x10
    4000d0e8:	17fffe4f 	b	4000ca24 <_svfprintf_r+0x144>
    4000d0ec:	b9409be0 	ldr	w0, [sp, #152]
    4000d0f0:	37f85120 	tbnz	w0, #31, 4000db14 <_svfprintf_r+0x1234>
    4000d0f4:	f94047e0 	ldr	x0, [sp, #136]
    4000d0f8:	91002c01 	add	x1, x0, #0xb
    4000d0fc:	927df021 	and	x1, x1, #0xfffffffffffffff8
    4000d100:	f90047e1 	str	x1, [sp, #136]
    4000d104:	b9400000 	ldr	w0, [x0]
    4000d108:	52800033 	mov	w19, #0x1                   	// #1
    4000d10c:	9104e3f6 	add	x22, sp, #0x138
    4000d110:	2a1303f7 	mov	w23, w19
    4000d114:	3903ffff 	strb	wzr, [sp, #255]
    4000d118:	3904e3e0 	strb	w0, [sp, #312]
    4000d11c:	17fffe4e 	b	4000ca54 <_svfprintf_r+0x174>
    4000d120:	3500aee1 	cbnz	w1, 4000e6fc <_svfprintf_r+0x1e1c>
    4000d124:	b00000a0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    4000d128:	9134e000 	add	x0, x0, #0xd38
    4000d12c:	f9005be0 	str	x0, [sp, #176]
    4000d130:	17ffff91 	b	4000cf74 <_svfprintf_r+0x694>
    4000d134:	7101977f 	cmp	w27, #0x65
    4000d138:	54001cad 	b.le	4000d4cc <_svfprintf_r+0xbec>
    4000d13c:	1e602108 	fcmp	d8, #0.0
    4000d140:	54003441 	b.ne	4000d7c8 <_svfprintf_r+0xee8>  // b.any
    4000d144:	b9412be1 	ldr	w1, [sp, #296]
    4000d148:	91000400 	add	x0, x0, #0x1
    4000d14c:	b00000a2 	adrp	x2, 40022000 <__pow_log_data+0xcc8>
    4000d150:	d2800023 	mov	x3, #0x1                   	// #1
    4000d154:	91356042 	add	x2, x2, #0xd58
    4000d158:	11000421 	add	w1, w1, #0x1
    4000d15c:	a9000cc2 	stp	x2, x3, [x6]
    4000d160:	910040c6 	add	x6, x6, #0x10
    4000d164:	b9012be1 	str	w1, [sp, #296]
    4000d168:	f9009be0 	str	x0, [sp, #304]
    4000d16c:	71001c3f 	cmp	w1, #0x7
    4000d170:	5400674c 	b.gt	4000de58 <_svfprintf_r+0x1578>
    4000d174:	b940abe2 	ldr	w2, [sp, #168]
    4000d178:	b9410be1 	ldr	w1, [sp, #264]
    4000d17c:	6b02003f 	cmp	w1, w2
    4000d180:	5400006b 	b.lt	4000d18c <_svfprintf_r+0x8ac>  // b.tstop
    4000d184:	f9403fe1 	ldr	x1, [sp, #120]
    4000d188:	3607d521 	tbz	w1, #0, 4000cc2c <_svfprintf_r+0x34c>
    4000d18c:	a94b8fe2 	ldp	x2, x3, [sp, #184]
    4000d190:	a90008c3 	stp	x3, x2, [x6]
    4000d194:	b9412be1 	ldr	w1, [sp, #296]
    4000d198:	910040c6 	add	x6, x6, #0x10
    4000d19c:	11000421 	add	w1, w1, #0x1
    4000d1a0:	b9012be1 	str	w1, [sp, #296]
    4000d1a4:	8b020000 	add	x0, x0, x2
    4000d1a8:	f9009be0 	str	x0, [sp, #304]
    4000d1ac:	71001c3f 	cmp	w1, #0x7
    4000d1b0:	5400686c 	b.gt	4000debc <_svfprintf_r+0x15dc>
    4000d1b4:	b940abe1 	ldr	w1, [sp, #168]
    4000d1b8:	51000437 	sub	w23, w1, #0x1
    4000d1bc:	710002ff 	cmp	w23, #0x0
    4000d1c0:	54ffd36d 	b.le	4000cc2c <_svfprintf_r+0x34c>
    4000d1c4:	b9412be1 	ldr	w1, [sp, #296]
    4000d1c8:	d00000a3 	adrp	x3, 40023000 <fpi.1>
    4000d1cc:	9101a063 	add	x3, x3, #0x68
    4000d1d0:	d280021a 	mov	x26, #0x10                  	// #16
    4000d1d4:	2a0103e2 	mov	w2, w1
    4000d1d8:	aa0303f6 	mov	x22, x3
    4000d1dc:	710042ff 	cmp	w23, #0x10
    4000d1e0:	540000ac 	b.gt	4000d1f4 <_svfprintf_r+0x914>
    4000d1e4:	17fffeea 	b	4000cd8c <_svfprintf_r+0x4ac>
    4000d1e8:	510042f7 	sub	w23, w23, #0x10
    4000d1ec:	710042ff 	cmp	w23, #0x10
    4000d1f0:	54ffdcad 	b.le	4000cd84 <_svfprintf_r+0x4a4>
    4000d1f4:	91004000 	add	x0, x0, #0x10
    4000d1f8:	11000442 	add	w2, w2, #0x1
    4000d1fc:	a90068d6 	stp	x22, x26, [x6]
    4000d200:	910040c6 	add	x6, x6, #0x10
    4000d204:	b9012be2 	str	w2, [sp, #296]
    4000d208:	f9009be0 	str	x0, [sp, #304]
    4000d20c:	71001c5f 	cmp	w2, #0x7
    4000d210:	54fffecd 	b.le	4000d1e8 <_svfprintf_r+0x908>
    4000d214:	910483e2 	add	x2, sp, #0x120
    4000d218:	aa1803e1 	mov	x1, x24
    4000d21c:	aa1903e0 	mov	x0, x25
    4000d220:	940012a4 	bl	40011cb0 <__ssprint_r>
    4000d224:	35ffd300 	cbnz	w0, 4000cc84 <_svfprintf_r+0x3a4>
    4000d228:	b9412be2 	ldr	w2, [sp, #296]
    4000d22c:	aa1503e6 	mov	x6, x21
    4000d230:	f9409be0 	ldr	x0, [sp, #304]
    4000d234:	17ffffed 	b	4000d1e8 <_svfprintf_r+0x908>
    4000d238:	4b13029a 	sub	w26, w20, w19
    4000d23c:	7100035f 	cmp	w26, #0x0
    4000d240:	54ffcd6d 	b.le	4000cbec <_svfprintf_r+0x30c>
    4000d244:	d00000a3 	adrp	x3, 40023000 <fpi.1>
    4000d248:	b9412be1 	ldr	w1, [sp, #296]
    4000d24c:	9101a063 	add	x3, x3, #0x68
    4000d250:	7100435f 	cmp	w26, #0x10
    4000d254:	5400054d 	b.le	4000d2fc <_svfprintf_r+0xa1c>
    4000d258:	2a0103e2 	mov	w2, w1
    4000d25c:	aa1903e1 	mov	x1, x25
    4000d260:	d2800205 	mov	x5, #0x10                  	// #16
    4000d264:	2a1303f9 	mov	w25, w19
    4000d268:	aa0103f3 	mov	x19, x1
    4000d26c:	b90093f4 	str	w20, [sp, #144]
    4000d270:	aa1803f4 	mov	x20, x24
    4000d274:	aa0303f8 	mov	x24, x3
    4000d278:	b900e3e7 	str	w7, [sp, #224]
    4000d27c:	14000004 	b	4000d28c <_svfprintf_r+0x9ac>
    4000d280:	5100435a 	sub	w26, w26, #0x10
    4000d284:	7100435f 	cmp	w26, #0x10
    4000d288:	540002ad 	b.le	4000d2dc <_svfprintf_r+0x9fc>
    4000d28c:	91004000 	add	x0, x0, #0x10
    4000d290:	11000442 	add	w2, w2, #0x1
    4000d294:	a90014d8 	stp	x24, x5, [x6]
    4000d298:	910040c6 	add	x6, x6, #0x10
    4000d29c:	b9012be2 	str	w2, [sp, #296]
    4000d2a0:	f9009be0 	str	x0, [sp, #304]
    4000d2a4:	71001c5f 	cmp	w2, #0x7
    4000d2a8:	54fffecd 	b.le	4000d280 <_svfprintf_r+0x9a0>
    4000d2ac:	910483e2 	add	x2, sp, #0x120
    4000d2b0:	aa1403e1 	mov	x1, x20
    4000d2b4:	aa1303e0 	mov	x0, x19
    4000d2b8:	9400127e 	bl	40011cb0 <__ssprint_r>
    4000d2bc:	35003a20 	cbnz	w0, 4000da00 <_svfprintf_r+0x1120>
    4000d2c0:	5100435a 	sub	w26, w26, #0x10
    4000d2c4:	b9412be2 	ldr	w2, [sp, #296]
    4000d2c8:	aa1503e6 	mov	x6, x21
    4000d2cc:	d2800205 	mov	x5, #0x10                  	// #16
    4000d2d0:	f9409be0 	ldr	x0, [sp, #304]
    4000d2d4:	7100435f 	cmp	w26, #0x10
    4000d2d8:	54fffdac 	b.gt	4000d28c <_svfprintf_r+0x9ac>
    4000d2dc:	2a0203e1 	mov	w1, w2
    4000d2e0:	aa1803e3 	mov	x3, x24
    4000d2e4:	aa1303e2 	mov	x2, x19
    4000d2e8:	aa1403f8 	mov	x24, x20
    4000d2ec:	b940e3e7 	ldr	w7, [sp, #224]
    4000d2f0:	2a1903f3 	mov	w19, w25
    4000d2f4:	b94093f4 	ldr	w20, [sp, #144]
    4000d2f8:	aa0203f9 	mov	x25, x2
    4000d2fc:	93407f5a 	sxtw	x26, w26
    4000d300:	11000421 	add	w1, w1, #0x1
    4000d304:	8b1a0000 	add	x0, x0, x26
    4000d308:	a90068c3 	stp	x3, x26, [x6]
    4000d30c:	910040c6 	add	x6, x6, #0x10
    4000d310:	b9012be1 	str	w1, [sp, #296]
    4000d314:	f9009be0 	str	x0, [sp, #304]
    4000d318:	71001c3f 	cmp	w1, #0x7
    4000d31c:	54ffc68d 	b.le	4000cbec <_svfprintf_r+0x30c>
    4000d320:	910483e2 	add	x2, sp, #0x120
    4000d324:	aa1803e1 	mov	x1, x24
    4000d328:	aa1903e0 	mov	x0, x25
    4000d32c:	b90093e7 	str	w7, [sp, #144]
    4000d330:	94001260 	bl	40011cb0 <__ssprint_r>
    4000d334:	35ffca80 	cbnz	w0, 4000cc84 <_svfprintf_r+0x3a4>
    4000d338:	b94093e7 	ldr	w7, [sp, #144]
    4000d33c:	aa1503e6 	mov	x6, x21
    4000d340:	f9409be0 	ldr	x0, [sp, #304]
    4000d344:	4b1700fa 	sub	w26, w7, w23
    4000d348:	7100035f 	cmp	w26, #0x0
    4000d34c:	54ffc56d 	b.le	4000cbf8 <_svfprintf_r+0x318>
    4000d350:	d00000a3 	adrp	x3, 40023000 <fpi.1>
    4000d354:	b9412be1 	ldr	w1, [sp, #296]
    4000d358:	9101a063 	add	x3, x3, #0x68
    4000d35c:	7100435f 	cmp	w26, #0x10
    4000d360:	5400048d 	b.le	4000d3f0 <_svfprintf_r+0xb10>
    4000d364:	2a0103e2 	mov	w2, w1
    4000d368:	d2800205 	mov	x5, #0x10                  	// #16
    4000d36c:	b90093f3 	str	w19, [sp, #144]
    4000d370:	aa1803f3 	mov	x19, x24
    4000d374:	aa1903f8 	mov	x24, x25
    4000d378:	aa0303f9 	mov	x25, x3
    4000d37c:	14000004 	b	4000d38c <_svfprintf_r+0xaac>
    4000d380:	5100435a 	sub	w26, w26, #0x10
    4000d384:	7100435f 	cmp	w26, #0x10
    4000d388:	540002ad 	b.le	4000d3dc <_svfprintf_r+0xafc>
    4000d38c:	91004000 	add	x0, x0, #0x10
    4000d390:	11000442 	add	w2, w2, #0x1
    4000d394:	a90014d9 	stp	x25, x5, [x6]
    4000d398:	910040c6 	add	x6, x6, #0x10
    4000d39c:	b9012be2 	str	w2, [sp, #296]
    4000d3a0:	f9009be0 	str	x0, [sp, #304]
    4000d3a4:	71001c5f 	cmp	w2, #0x7
    4000d3a8:	54fffecd 	b.le	4000d380 <_svfprintf_r+0xaa0>
    4000d3ac:	910483e2 	add	x2, sp, #0x120
    4000d3b0:	aa1303e1 	mov	x1, x19
    4000d3b4:	aa1803e0 	mov	x0, x24
    4000d3b8:	9400123e 	bl	40011cb0 <__ssprint_r>
    4000d3bc:	35ffc620 	cbnz	w0, 4000cc80 <_svfprintf_r+0x3a0>
    4000d3c0:	5100435a 	sub	w26, w26, #0x10
    4000d3c4:	b9412be2 	ldr	w2, [sp, #296]
    4000d3c8:	aa1503e6 	mov	x6, x21
    4000d3cc:	d2800205 	mov	x5, #0x10                  	// #16
    4000d3d0:	f9409be0 	ldr	x0, [sp, #304]
    4000d3d4:	7100435f 	cmp	w26, #0x10
    4000d3d8:	54fffdac 	b.gt	4000d38c <_svfprintf_r+0xaac>
    4000d3dc:	aa1903e3 	mov	x3, x25
    4000d3e0:	aa1803f9 	mov	x25, x24
    4000d3e4:	aa1303f8 	mov	x24, x19
    4000d3e8:	b94093f3 	ldr	w19, [sp, #144]
    4000d3ec:	2a0203e1 	mov	w1, w2
    4000d3f0:	93407f5a 	sxtw	x26, w26
    4000d3f4:	11000421 	add	w1, w1, #0x1
    4000d3f8:	8b1a0000 	add	x0, x0, x26
    4000d3fc:	a90068c3 	stp	x3, x26, [x6]
    4000d400:	910040c6 	add	x6, x6, #0x10
    4000d404:	b9012be1 	str	w1, [sp, #296]
    4000d408:	f9009be0 	str	x0, [sp, #304]
    4000d40c:	71001c3f 	cmp	w1, #0x7
    4000d410:	54ffbf4d 	b.le	4000cbf8 <_svfprintf_r+0x318>
    4000d414:	910483e2 	add	x2, sp, #0x120
    4000d418:	aa1803e1 	mov	x1, x24
    4000d41c:	aa1903e0 	mov	x0, x25
    4000d420:	94001224 	bl	40011cb0 <__ssprint_r>
    4000d424:	35ffc300 	cbnz	w0, 4000cc84 <_svfprintf_r+0x3a4>
    4000d428:	aa1503e6 	mov	x6, x21
    4000d42c:	f9409be0 	ldr	x0, [sp, #304]
    4000d430:	17fffdf2 	b	4000cbf8 <_svfprintf_r+0x318>
    4000d434:	2a0203fa 	mov	w26, w2
    4000d438:	7100043f 	cmp	w1, #0x1
    4000d43c:	54001b60 	b.eq	4000d7a8 <_svfprintf_r+0xec8>  // b.none
    4000d440:	aa1503f6 	mov	x22, x21
    4000d444:	7100083f 	cmp	w1, #0x2
    4000d448:	54000141 	b.ne	4000d470 <_svfprintf_r+0xb90>  // b.any
    4000d44c:	f9405be2 	ldr	x2, [sp, #176]
    4000d450:	92400c01 	and	x1, x0, #0xf
    4000d454:	d344fc00 	lsr	x0, x0, #4
    4000d458:	38616841 	ldrb	w1, [x2, x1]
    4000d45c:	381ffec1 	strb	w1, [x22, #-1]!
    4000d460:	b5ffff80 	cbnz	x0, 4000d450 <_svfprintf_r+0xb70>
    4000d464:	4b1602b7 	sub	w23, w21, w22
    4000d468:	b9007bfa 	str	w26, [sp, #120]
    4000d46c:	17fffdb1 	b	4000cb30 <_svfprintf_r+0x250>
    4000d470:	12000801 	and	w1, w0, #0x7
    4000d474:	aa1603e2 	mov	x2, x22
    4000d478:	1100c021 	add	w1, w1, #0x30
    4000d47c:	381ffec1 	strb	w1, [x22, #-1]!
    4000d480:	d343fc00 	lsr	x0, x0, #3
    4000d484:	b5ffff60 	cbnz	x0, 4000d470 <_svfprintf_r+0xb90>
    4000d488:	7100c03f 	cmp	w1, #0x30
    4000d48c:	1a9f07e0 	cset	w0, ne  // ne = any
    4000d490:	6a00035f 	tst	w26, w0
    4000d494:	54fffe80 	b.eq	4000d464 <_svfprintf_r+0xb84>  // b.none
    4000d498:	d1000842 	sub	x2, x2, #0x2
    4000d49c:	52800600 	mov	w0, #0x30                  	// #48
    4000d4a0:	4b0202b7 	sub	w23, w21, w2
    4000d4a4:	381ff2c0 	sturb	w0, [x22, #-1]
    4000d4a8:	aa0203f6 	mov	x22, x2
    4000d4ac:	b9007bfa 	str	w26, [sp, #120]
    4000d4b0:	17fffda0 	b	4000cb30 <_svfprintf_r+0x250>
    4000d4b4:	910483e2 	add	x2, sp, #0x120
    4000d4b8:	aa1803e1 	mov	x1, x24
    4000d4bc:	aa1903e0 	mov	x0, x25
    4000d4c0:	940011fc 	bl	40011cb0 <__ssprint_r>
    4000d4c4:	34ffbca0 	cbz	w0, 4000cc58 <_svfprintf_r+0x378>
    4000d4c8:	17fffdef 	b	4000cc84 <_svfprintf_r+0x3a4>
    4000d4cc:	b9412be1 	ldr	w1, [sp, #296]
    4000d4d0:	91000400 	add	x0, x0, #0x1
    4000d4d4:	b940abe3 	ldr	w3, [sp, #168]
    4000d4d8:	910040c2 	add	x2, x6, #0x10
    4000d4dc:	11000421 	add	w1, w1, #0x1
    4000d4e0:	7100047f 	cmp	w3, #0x1
    4000d4e4:	5400230d 	b.le	4000d944 <_svfprintf_r+0x1064>
    4000d4e8:	d2800023 	mov	x3, #0x1                   	// #1
    4000d4ec:	a9000cd6 	stp	x22, x3, [x6]
    4000d4f0:	b9012be1 	str	w1, [sp, #296]
    4000d4f4:	f9009be0 	str	x0, [sp, #304]
    4000d4f8:	71001c3f 	cmp	w1, #0x7
    4000d4fc:	54002a4c 	b.gt	4000da44 <_svfprintf_r+0x1164>
    4000d500:	a94b93e3 	ldp	x3, x4, [sp, #184]
    4000d504:	11000421 	add	w1, w1, #0x1
    4000d508:	a9000c44 	stp	x4, x3, [x2]
    4000d50c:	91004042 	add	x2, x2, #0x10
    4000d510:	b9012be1 	str	w1, [sp, #296]
    4000d514:	8b030000 	add	x0, x0, x3
    4000d518:	f9009be0 	str	x0, [sp, #304]
    4000d51c:	71001c3f 	cmp	w1, #0x7
    4000d520:	5400280c 	b.gt	4000da20 <_svfprintf_r+0x1140>
    4000d524:	1e602108 	fcmp	d8, #0.0
    4000d528:	b940abe3 	ldr	w3, [sp, #168]
    4000d52c:	51000477 	sub	w23, w3, #0x1
    4000d530:	540022c0 	b.eq	4000d988 <_svfprintf_r+0x10a8>  // b.none
    4000d534:	93407ef7 	sxtw	x23, w23
    4000d538:	11000421 	add	w1, w1, #0x1
    4000d53c:	8b170000 	add	x0, x0, x23
    4000d540:	b9012be1 	str	w1, [sp, #296]
    4000d544:	f9009be0 	str	x0, [sp, #304]
    4000d548:	910006c4 	add	x4, x22, #0x1
    4000d54c:	f9000044 	str	x4, [x2]
    4000d550:	f9000457 	str	x23, [x2, #8]
    4000d554:	71001c3f 	cmp	w1, #0x7
    4000d558:	540032cc 	b.gt	4000dbb0 <_svfprintf_r+0x12d0>
    4000d55c:	91004042 	add	x2, x2, #0x10
    4000d560:	b980d3e3 	ldrsw	x3, [sp, #208]
    4000d564:	11000421 	add	w1, w1, #0x1
    4000d568:	910443e5 	add	x5, sp, #0x110
    4000d56c:	a9000c45 	stp	x5, x3, [x2]
    4000d570:	8b000060 	add	x0, x3, x0
    4000d574:	b9012be1 	str	w1, [sp, #296]
    4000d578:	91004046 	add	x6, x2, #0x10
    4000d57c:	f9009be0 	str	x0, [sp, #304]
    4000d580:	71001c3f 	cmp	w1, #0x7
    4000d584:	54ffb54d 	b.le	4000cc2c <_svfprintf_r+0x34c>
    4000d588:	910483e2 	add	x2, sp, #0x120
    4000d58c:	aa1803e1 	mov	x1, x24
    4000d590:	aa1903e0 	mov	x0, x25
    4000d594:	940011c7 	bl	40011cb0 <__ssprint_r>
    4000d598:	35ffb760 	cbnz	w0, 4000cc84 <_svfprintf_r+0x3a4>
    4000d59c:	aa1503e6 	mov	x6, x21
    4000d5a0:	f9409be0 	ldr	x0, [sp, #304]
    4000d5a4:	17fffda2 	b	4000cc2c <_svfprintf_r+0x34c>
    4000d5a8:	d00000a5 	adrp	x5, 40023000 <fpi.1>
    4000d5ac:	b9412be1 	ldr	w1, [sp, #296]
    4000d5b0:	910160ba 	add	x26, x5, #0x58
    4000d5b4:	7100407f 	cmp	w3, #0x10
    4000d5b8:	540005cd 	b.le	4000d670 <_svfprintf_r+0xd90>
    4000d5bc:	2a0103e2 	mov	w2, w1
    4000d5c0:	d280020a 	mov	x10, #0x10                  	// #16
    4000d5c4:	f9006ff6 	str	x22, [sp, #216]
    4000d5c8:	aa1a03f6 	mov	x22, x26
    4000d5cc:	2a1303fa 	mov	w26, w19
    4000d5d0:	aa1903f3 	mov	x19, x25
    4000d5d4:	2a1703f9 	mov	w25, w23
    4000d5d8:	2a0703f7 	mov	w23, w7
    4000d5dc:	291c53eb 	stp	w11, w20, [sp, #224]
    4000d5e0:	aa1803f4 	mov	x20, x24
    4000d5e4:	2a0303f8 	mov	w24, w3
    4000d5e8:	14000004 	b	4000d5f8 <_svfprintf_r+0xd18>
    4000d5ec:	51004318 	sub	w24, w24, #0x10
    4000d5f0:	7100431f 	cmp	w24, #0x10
    4000d5f4:	540002ad 	b.le	4000d648 <_svfprintf_r+0xd68>
    4000d5f8:	91004000 	add	x0, x0, #0x10
    4000d5fc:	11000442 	add	w2, w2, #0x1
    4000d600:	a90028d6 	stp	x22, x10, [x6]
    4000d604:	910040c6 	add	x6, x6, #0x10
    4000d608:	b9012be2 	str	w2, [sp, #296]
    4000d60c:	f9009be0 	str	x0, [sp, #304]
    4000d610:	71001c5f 	cmp	w2, #0x7
    4000d614:	54fffecd 	b.le	4000d5ec <_svfprintf_r+0xd0c>
    4000d618:	910483e2 	add	x2, sp, #0x120
    4000d61c:	aa1403e1 	mov	x1, x20
    4000d620:	aa1303e0 	mov	x0, x19
    4000d624:	940011a3 	bl	40011cb0 <__ssprint_r>
    4000d628:	35001ec0 	cbnz	w0, 4000da00 <_svfprintf_r+0x1120>
    4000d62c:	51004318 	sub	w24, w24, #0x10
    4000d630:	b9412be2 	ldr	w2, [sp, #296]
    4000d634:	aa1503e6 	mov	x6, x21
    4000d638:	d280020a 	mov	x10, #0x10                  	// #16
    4000d63c:	f9409be0 	ldr	x0, [sp, #304]
    4000d640:	7100431f 	cmp	w24, #0x10
    4000d644:	54fffdac 	b.gt	4000d5f8 <_svfprintf_r+0xd18>
    4000d648:	2a1703e7 	mov	w7, w23
    4000d64c:	2a1803e3 	mov	w3, w24
    4000d650:	2a1903f7 	mov	w23, w25
    4000d654:	aa1403f8 	mov	x24, x20
    4000d658:	aa1303f9 	mov	x25, x19
    4000d65c:	2a1a03f3 	mov	w19, w26
    4000d660:	295c53eb 	ldp	w11, w20, [sp, #224]
    4000d664:	aa1603fa 	mov	x26, x22
    4000d668:	f9406ff6 	ldr	x22, [sp, #216]
    4000d66c:	2a0203e1 	mov	w1, w2
    4000d670:	93407c63 	sxtw	x3, w3
    4000d674:	11000421 	add	w1, w1, #0x1
    4000d678:	8b030000 	add	x0, x0, x3
    4000d67c:	a9000cda 	stp	x26, x3, [x6]
    4000d680:	910040c6 	add	x6, x6, #0x10
    4000d684:	b9012be1 	str	w1, [sp, #296]
    4000d688:	f9009be0 	str	x0, [sp, #304]
    4000d68c:	71001c3f 	cmp	w1, #0x7
    4000d690:	54ffa72d 	b.le	4000cb74 <_svfprintf_r+0x294>
    4000d694:	910483e2 	add	x2, sp, #0x120
    4000d698:	aa1803e1 	mov	x1, x24
    4000d69c:	aa1903e0 	mov	x0, x25
    4000d6a0:	b900dbe7 	str	w7, [sp, #216]
    4000d6a4:	b900e3eb 	str	w11, [sp, #224]
    4000d6a8:	94001182 	bl	40011cb0 <__ssprint_r>
    4000d6ac:	35ffaec0 	cbnz	w0, 4000cc84 <_svfprintf_r+0x3a4>
    4000d6b0:	b940dbe7 	ldr	w7, [sp, #216]
    4000d6b4:	aa1503e6 	mov	x6, x21
    4000d6b8:	b940e3eb 	ldr	w11, [sp, #224]
    4000d6bc:	f9409be0 	ldr	x0, [sp, #304]
    4000d6c0:	17fffd2d 	b	4000cb74 <_svfprintf_r+0x294>
    4000d6c4:	910483e2 	add	x2, sp, #0x120
    4000d6c8:	aa1803e1 	mov	x1, x24
    4000d6cc:	aa1903e0 	mov	x0, x25
    4000d6d0:	b900e3e7 	str	w7, [sp, #224]
    4000d6d4:	94001177 	bl	40011cb0 <__ssprint_r>
    4000d6d8:	35ffad60 	cbnz	w0, 4000cc84 <_svfprintf_r+0x3a4>
    4000d6dc:	b940e3e7 	ldr	w7, [sp, #224]
    4000d6e0:	aa1503e6 	mov	x6, x21
    4000d6e4:	f9409be0 	ldr	x0, [sp, #304]
    4000d6e8:	17fffd3e 	b	4000cbe0 <_svfprintf_r+0x300>
    4000d6ec:	b9412be1 	ldr	w1, [sp, #296]
    4000d6f0:	d00000a5 	adrp	x5, 40023000 <fpi.1>
    4000d6f4:	d2800217 	mov	x23, #0x10                  	// #16
    4000d6f8:	910160ba 	add	x26, x5, #0x58
    4000d6fc:	2a0103e2 	mov	w2, w1
    4000d700:	710042df 	cmp	w22, #0x10
    4000d704:	540000ac 	b.gt	4000d718 <_svfprintf_r+0xe38>
    4000d708:	14000018 	b	4000d768 <_svfprintf_r+0xe88>
    4000d70c:	510042d6 	sub	w22, w22, #0x10
    4000d710:	710042df 	cmp	w22, #0x10
    4000d714:	5400028d 	b.le	4000d764 <_svfprintf_r+0xe84>
    4000d718:	91004000 	add	x0, x0, #0x10
    4000d71c:	11000442 	add	w2, w2, #0x1
    4000d720:	a9005cda 	stp	x26, x23, [x6]
    4000d724:	910040c6 	add	x6, x6, #0x10
    4000d728:	b9012be2 	str	w2, [sp, #296]
    4000d72c:	f9009be0 	str	x0, [sp, #304]
    4000d730:	71001c5f 	cmp	w2, #0x7
    4000d734:	54fffecd 	b.le	4000d70c <_svfprintf_r+0xe2c>
    4000d738:	910483e2 	add	x2, sp, #0x120
    4000d73c:	aa1803e1 	mov	x1, x24
    4000d740:	aa1903e0 	mov	x0, x25
    4000d744:	9400115b 	bl	40011cb0 <__ssprint_r>
    4000d748:	35ffa9e0 	cbnz	w0, 4000cc84 <_svfprintf_r+0x3a4>
    4000d74c:	510042d6 	sub	w22, w22, #0x10
    4000d750:	b9412be2 	ldr	w2, [sp, #296]
    4000d754:	aa1503e6 	mov	x6, x21
    4000d758:	f9409be0 	ldr	x0, [sp, #304]
    4000d75c:	710042df 	cmp	w22, #0x10
    4000d760:	54fffdcc 	b.gt	4000d718 <_svfprintf_r+0xe38>
    4000d764:	2a0203e1 	mov	w1, w2
    4000d768:	93407ed6 	sxtw	x22, w22
    4000d76c:	11000421 	add	w1, w1, #0x1
    4000d770:	8b160000 	add	x0, x0, x22
    4000d774:	a90058da 	stp	x26, x22, [x6]
    4000d778:	b9012be1 	str	w1, [sp, #296]
    4000d77c:	f9009be0 	str	x0, [sp, #304]
    4000d780:	71001c3f 	cmp	w1, #0x7
    4000d784:	54ffa5ed 	b.le	4000cc40 <_svfprintf_r+0x360>
    4000d788:	910483e2 	add	x2, sp, #0x120
    4000d78c:	aa1803e1 	mov	x1, x24
    4000d790:	aa1903e0 	mov	x0, x25
    4000d794:	94001147 	bl	40011cb0 <__ssprint_r>
    4000d798:	35ffa760 	cbnz	w0, 4000cc84 <_svfprintf_r+0x3a4>
    4000d79c:	f9409be0 	ldr	x0, [sp, #304]
    4000d7a0:	17fffd28 	b	4000cc40 <_svfprintf_r+0x360>
    4000d7a4:	b9407bfa 	ldr	w26, [sp, #120]
    4000d7a8:	f100241f 	cmp	x0, #0x9
    4000d7ac:	54003668 	b.hi	4000de78 <_svfprintf_r+0x1598>  // b.pmore
    4000d7b0:	1100c000 	add	w0, w0, #0x30
    4000d7b4:	91057ff6 	add	x22, sp, #0x15f
    4000d7b8:	52800037 	mov	w23, #0x1                   	// #1
    4000d7bc:	b9007bfa 	str	w26, [sp, #120]
    4000d7c0:	39057fe0 	strb	w0, [sp, #351]
    4000d7c4:	17fffcdb 	b	4000cb30 <_svfprintf_r+0x250>
    4000d7c8:	b9410be2 	ldr	w2, [sp, #264]
    4000d7cc:	7100005f 	cmp	w2, #0x0
    4000d7d0:	54002c0d 	b.le	4000dd50 <_svfprintf_r+0x1470>
    4000d7d4:	b9409fe1 	ldr	w1, [sp, #156]
    4000d7d8:	b940abe2 	ldr	w2, [sp, #168]
    4000d7dc:	6b02003f 	cmp	w1, w2
    4000d7e0:	1a82d037 	csel	w23, w1, w2, le
    4000d7e4:	710002ff 	cmp	w23, #0x0
    4000d7e8:	5400016d 	b.le	4000d814 <_svfprintf_r+0xf34>
    4000d7ec:	b9412be1 	ldr	w1, [sp, #296]
    4000d7f0:	93407ee2 	sxtw	x2, w23
    4000d7f4:	8b020000 	add	x0, x0, x2
    4000d7f8:	a90008d6 	stp	x22, x2, [x6]
    4000d7fc:	11000421 	add	w1, w1, #0x1
    4000d800:	b9012be1 	str	w1, [sp, #296]
    4000d804:	910040c6 	add	x6, x6, #0x10
    4000d808:	f9009be0 	str	x0, [sp, #304]
    4000d80c:	71001c3f 	cmp	w1, #0x7
    4000d810:	54005e0c 	b.gt	4000e3d0 <_svfprintf_r+0x1af0>
    4000d814:	b9409fe1 	ldr	w1, [sp, #156]
    4000d818:	710002ff 	cmp	w23, #0x0
    4000d81c:	1a9fa2f7 	csel	w23, w23, wzr, ge  // ge = tcont
    4000d820:	4b170037 	sub	w23, w1, w23
    4000d824:	710002ff 	cmp	w23, #0x0
    4000d828:	540020ac 	b.gt	4000dc3c <_svfprintf_r+0x135c>
    4000d82c:	b940abe1 	ldr	w1, [sp, #168]
    4000d830:	b9410bf7 	ldr	w23, [sp, #264]
    4000d834:	6b0102ff 	cmp	w23, w1
    4000d838:	5400194a 	b.ge	4000db60 <_svfprintf_r+0x1280>  // b.tcont
    4000d83c:	a94b8fe2 	ldp	x2, x3, [sp, #184]
    4000d840:	a90008c3 	stp	x3, x2, [x6]
    4000d844:	b9412be1 	ldr	w1, [sp, #296]
    4000d848:	910040c6 	add	x6, x6, #0x10
    4000d84c:	11000421 	add	w1, w1, #0x1
    4000d850:	b9012be1 	str	w1, [sp, #296]
    4000d854:	8b020000 	add	x0, x0, x2
    4000d858:	f9009be0 	str	x0, [sp, #304]
    4000d85c:	71001c3f 	cmp	w1, #0x7
    4000d860:	5400576c 	b.gt	4000e34c <_svfprintf_r+0x1a6c>
    4000d864:	b940abe1 	ldr	w1, [sp, #168]
    4000d868:	b9409fe2 	ldr	w2, [sp, #156]
    4000d86c:	4b170037 	sub	w23, w1, w23
    4000d870:	4b02003a 	sub	w26, w1, w2
    4000d874:	6b1a02ff 	cmp	w23, w26
    4000d878:	1a9ad2fa 	csel	w26, w23, w26, le
    4000d87c:	7100035f 	cmp	w26, #0x0
    4000d880:	5400018d 	b.le	4000d8b0 <_svfprintf_r+0xfd0>
    4000d884:	b9412be1 	ldr	w1, [sp, #296]
    4000d888:	8b22c2c4 	add	x4, x22, w2, sxtw
    4000d88c:	93407f42 	sxtw	x2, w26
    4000d890:	a90008c4 	stp	x4, x2, [x6]
    4000d894:	8b020000 	add	x0, x0, x2
    4000d898:	11000421 	add	w1, w1, #0x1
    4000d89c:	b9012be1 	str	w1, [sp, #296]
    4000d8a0:	f9009be0 	str	x0, [sp, #304]
    4000d8a4:	910040c6 	add	x6, x6, #0x10
    4000d8a8:	71001c3f 	cmp	w1, #0x7
    4000d8ac:	54006ccc 	b.gt	4000e644 <_svfprintf_r+0x1d64>
    4000d8b0:	7100035f 	cmp	w26, #0x0
    4000d8b4:	1a9fa35a 	csel	w26, w26, wzr, ge  // ge = tcont
    4000d8b8:	4b1a02f7 	sub	w23, w23, w26
    4000d8bc:	710002ff 	cmp	w23, #0x0
    4000d8c0:	54ff9b6d 	b.le	4000cc2c <_svfprintf_r+0x34c>
    4000d8c4:	b9412be1 	ldr	w1, [sp, #296]
    4000d8c8:	d00000a3 	adrp	x3, 40023000 <fpi.1>
    4000d8cc:	9101a063 	add	x3, x3, #0x68
    4000d8d0:	d280021a 	mov	x26, #0x10                  	// #16
    4000d8d4:	2a0103e2 	mov	w2, w1
    4000d8d8:	aa0303f6 	mov	x22, x3
    4000d8dc:	710042ff 	cmp	w23, #0x10
    4000d8e0:	540000ac 	b.gt	4000d8f4 <_svfprintf_r+0x1014>
    4000d8e4:	17fffd2a 	b	4000cd8c <_svfprintf_r+0x4ac>
    4000d8e8:	510042f7 	sub	w23, w23, #0x10
    4000d8ec:	710042ff 	cmp	w23, #0x10
    4000d8f0:	54ffa4ad 	b.le	4000cd84 <_svfprintf_r+0x4a4>
    4000d8f4:	91004000 	add	x0, x0, #0x10
    4000d8f8:	11000442 	add	w2, w2, #0x1
    4000d8fc:	a90068d6 	stp	x22, x26, [x6]
    4000d900:	910040c6 	add	x6, x6, #0x10
    4000d904:	b9012be2 	str	w2, [sp, #296]
    4000d908:	f9009be0 	str	x0, [sp, #304]
    4000d90c:	71001c5f 	cmp	w2, #0x7
    4000d910:	54fffecd 	b.le	4000d8e8 <_svfprintf_r+0x1008>
    4000d914:	910483e2 	add	x2, sp, #0x120
    4000d918:	aa1803e1 	mov	x1, x24
    4000d91c:	aa1903e0 	mov	x0, x25
    4000d920:	940010e4 	bl	40011cb0 <__ssprint_r>
    4000d924:	35ff9b00 	cbnz	w0, 4000cc84 <_svfprintf_r+0x3a4>
    4000d928:	b9412be2 	ldr	w2, [sp, #296]
    4000d92c:	aa1503e6 	mov	x6, x21
    4000d930:	f9409be0 	ldr	x0, [sp, #304]
    4000d934:	17ffffed 	b	4000d8e8 <_svfprintf_r+0x1008>
    4000d938:	aa1503f6 	mov	x22, x21
    4000d93c:	52800007 	mov	w7, #0x0                   	// #0
    4000d940:	17fffc7c 	b	4000cb30 <_svfprintf_r+0x250>
    4000d944:	f9403fe3 	ldr	x3, [sp, #120]
    4000d948:	3707dd03 	tbnz	w3, #0, 4000d4e8 <_svfprintf_r+0xc08>
    4000d94c:	d2800023 	mov	x3, #0x1                   	// #1
    4000d950:	a9000cd6 	stp	x22, x3, [x6]
    4000d954:	b9012be1 	str	w1, [sp, #296]
    4000d958:	f9009be0 	str	x0, [sp, #304]
    4000d95c:	71001c3f 	cmp	w1, #0x7
    4000d960:	54ffe00d 	b.le	4000d560 <_svfprintf_r+0xc80>
    4000d964:	910483e2 	add	x2, sp, #0x120
    4000d968:	aa1803e1 	mov	x1, x24
    4000d96c:	aa1903e0 	mov	x0, x25
    4000d970:	940010d0 	bl	40011cb0 <__ssprint_r>
    4000d974:	35ff9880 	cbnz	w0, 4000cc84 <_svfprintf_r+0x3a4>
    4000d978:	b9412be1 	ldr	w1, [sp, #296]
    4000d97c:	aa1503e2 	mov	x2, x21
    4000d980:	f9409be0 	ldr	x0, [sp, #304]
    4000d984:	17fffef7 	b	4000d560 <_svfprintf_r+0xc80>
    4000d988:	710002ff 	cmp	w23, #0x0
    4000d98c:	54ffdead 	b.le	4000d560 <_svfprintf_r+0xc80>
    4000d990:	d00000a3 	adrp	x3, 40023000 <fpi.1>
    4000d994:	9101a063 	add	x3, x3, #0x68
    4000d998:	2a0103e4 	mov	w4, w1
    4000d99c:	aa0303f6 	mov	x22, x3
    4000d9a0:	d280021a 	mov	x26, #0x10                  	// #16
    4000d9a4:	710042ff 	cmp	w23, #0x10
    4000d9a8:	540000ac 	b.gt	4000d9bc <_svfprintf_r+0x10dc>
    4000d9ac:	14000078 	b	4000db8c <_svfprintf_r+0x12ac>
    4000d9b0:	510042f7 	sub	w23, w23, #0x10
    4000d9b4:	710042ff 	cmp	w23, #0x10
    4000d9b8:	54000e6d 	b.le	4000db84 <_svfprintf_r+0x12a4>
    4000d9bc:	91004000 	add	x0, x0, #0x10
    4000d9c0:	11000484 	add	w4, w4, #0x1
    4000d9c4:	a9006856 	stp	x22, x26, [x2]
    4000d9c8:	91004042 	add	x2, x2, #0x10
    4000d9cc:	b9012be4 	str	w4, [sp, #296]
    4000d9d0:	f9009be0 	str	x0, [sp, #304]
    4000d9d4:	71001c9f 	cmp	w4, #0x7
    4000d9d8:	54fffecd 	b.le	4000d9b0 <_svfprintf_r+0x10d0>
    4000d9dc:	910483e2 	add	x2, sp, #0x120
    4000d9e0:	aa1803e1 	mov	x1, x24
    4000d9e4:	aa1903e0 	mov	x0, x25
    4000d9e8:	940010b2 	bl	40011cb0 <__ssprint_r>
    4000d9ec:	35ff94c0 	cbnz	w0, 4000cc84 <_svfprintf_r+0x3a4>
    4000d9f0:	b9412be4 	ldr	w4, [sp, #296]
    4000d9f4:	aa1503e2 	mov	x2, x21
    4000d9f8:	f9409be0 	ldr	x0, [sp, #304]
    4000d9fc:	17ffffed 	b	4000d9b0 <_svfprintf_r+0x10d0>
    4000da00:	aa1403f8 	mov	x24, x20
    4000da04:	17fffca0 	b	4000cc84 <_svfprintf_r+0x3a4>
    4000da08:	528005a1 	mov	w1, #0x2d                  	// #45
    4000da0c:	cb0003e0 	neg	x0, x0
    4000da10:	528005a3 	mov	w3, #0x2d                  	// #45
    4000da14:	3903ffe1 	strb	w1, [sp, #255]
    4000da18:	52800021 	mov	w1, #0x1                   	// #1
    4000da1c:	17fffc37 	b	4000caf8 <_svfprintf_r+0x218>
    4000da20:	910483e2 	add	x2, sp, #0x120
    4000da24:	aa1803e1 	mov	x1, x24
    4000da28:	aa1903e0 	mov	x0, x25
    4000da2c:	940010a1 	bl	40011cb0 <__ssprint_r>
    4000da30:	35ff92a0 	cbnz	w0, 4000cc84 <_svfprintf_r+0x3a4>
    4000da34:	b9412be1 	ldr	w1, [sp, #296]
    4000da38:	aa1503e2 	mov	x2, x21
    4000da3c:	f9409be0 	ldr	x0, [sp, #304]
    4000da40:	17fffeb9 	b	4000d524 <_svfprintf_r+0xc44>
    4000da44:	910483e2 	add	x2, sp, #0x120
    4000da48:	aa1803e1 	mov	x1, x24
    4000da4c:	aa1903e0 	mov	x0, x25
    4000da50:	94001098 	bl	40011cb0 <__ssprint_r>
    4000da54:	35ff9180 	cbnz	w0, 4000cc84 <_svfprintf_r+0x3a4>
    4000da58:	b9412be1 	ldr	w1, [sp, #296]
    4000da5c:	aa1503e2 	mov	x2, x21
    4000da60:	f9409be0 	ldr	x0, [sp, #304]
    4000da64:	17fffea7 	b	4000d500 <_svfprintf_r+0xc20>
    4000da68:	363028fa 	tbz	w26, #6, 4000df84 <_svfprintf_r+0x16a4>
    4000da6c:	37f85920 	tbnz	w0, #31, 4000e590 <_svfprintf_r+0x1cb0>
    4000da70:	f94047e0 	ldr	x0, [sp, #136]
    4000da74:	91002c01 	add	x1, x0, #0xb
    4000da78:	927df021 	and	x1, x1, #0xfffffffffffffff8
    4000da7c:	79400000 	ldrh	w0, [x0]
    4000da80:	f90047e1 	str	x1, [sp, #136]
    4000da84:	17fffd45 	b	4000cf98 <_svfprintf_r+0x6b8>
    4000da88:	37f83e20 	tbnz	w0, #31, 4000e24c <_svfprintf_r+0x196c>
    4000da8c:	f94047e0 	ldr	x0, [sp, #136]
    4000da90:	91003c01 	add	x1, x0, #0xf
    4000da94:	927df021 	and	x1, x1, #0xfffffffffffffff8
    4000da98:	f90047e1 	str	x1, [sp, #136]
    4000da9c:	fd400008 	ldr	d8, [x0]
    4000daa0:	17fffc97 	b	4000ccfc <_svfprintf_r+0x41c>
    4000daa4:	3630289a 	tbz	w26, #6, 4000dfb4 <_svfprintf_r+0x16d4>
    4000daa8:	37f85420 	tbnz	w0, #31, 4000e52c <_svfprintf_r+0x1c4c>
    4000daac:	f94047e0 	ldr	x0, [sp, #136]
    4000dab0:	91002c01 	add	x1, x0, #0xb
    4000dab4:	927df021 	and	x1, x1, #0xfffffffffffffff8
    4000dab8:	f90047e1 	str	x1, [sp, #136]
    4000dabc:	79800000 	ldrsh	x0, [x0]
    4000dac0:	aa0003e1 	mov	x1, x0
    4000dac4:	17fffce2 	b	4000ce4c <_svfprintf_r+0x56c>
    4000dac8:	b9409be0 	ldr	w0, [sp, #152]
    4000dacc:	11002000 	add	w0, w0, #0x8
    4000dad0:	7100001f 	cmp	w0, #0x0
    4000dad4:	540046ad 	b.le	4000e3a8 <_svfprintf_r+0x1ac8>
    4000dad8:	f94047e3 	ldr	x3, [sp, #136]
    4000dadc:	b9009be0 	str	w0, [sp, #152]
    4000dae0:	91003c61 	add	x1, x3, #0xf
    4000dae4:	927df020 	and	x0, x1, #0xfffffffffffffff8
    4000dae8:	f90047e0 	str	x0, [sp, #136]
    4000daec:	17fffd5a 	b	4000d054 <_svfprintf_r+0x774>
    4000daf0:	b9409be0 	ldr	w0, [sp, #152]
    4000daf4:	11002000 	add	w0, w0, #0x8
    4000daf8:	7100001f 	cmp	w0, #0x0
    4000dafc:	5400448d 	b.le	4000e38c <_svfprintf_r+0x1aac>
    4000db00:	f94047e1 	ldr	x1, [sp, #136]
    4000db04:	b9009be0 	str	w0, [sp, #152]
    4000db08:	91003c33 	add	x19, x1, #0xf
    4000db0c:	927df273 	and	x19, x19, #0xfffffffffffffff8
    4000db10:	17fffd2f 	b	4000cfcc <_svfprintf_r+0x6ec>
    4000db14:	b9409be0 	ldr	w0, [sp, #152]
    4000db18:	11002001 	add	w1, w0, #0x8
    4000db1c:	7100003f 	cmp	w1, #0x0
    4000db20:	540044ed 	b.le	4000e3bc <_svfprintf_r+0x1adc>
    4000db24:	f94047e0 	ldr	x0, [sp, #136]
    4000db28:	b9009be1 	str	w1, [sp, #152]
    4000db2c:	91002c02 	add	x2, x0, #0xb
    4000db30:	927df041 	and	x1, x2, #0xfffffffffffffff8
    4000db34:	f90047e1 	str	x1, [sp, #136]
    4000db38:	17fffd73 	b	4000d104 <_svfprintf_r+0x824>
    4000db3c:	b9409be0 	ldr	w0, [sp, #152]
    4000db40:	11002004 	add	w4, w0, #0x8
    4000db44:	7100009f 	cmp	w4, #0x0
    4000db48:	5400414d 	b.le	4000e370 <_svfprintf_r+0x1a90>
    4000db4c:	f94047e0 	ldr	x0, [sp, #136]
    4000db50:	b9009be4 	str	w4, [sp, #152]
    4000db54:	91002c00 	add	x0, x0, #0xb
    4000db58:	927df000 	and	x0, x0, #0xfffffffffffffff8
    4000db5c:	17fffceb 	b	4000cf08 <_svfprintf_r+0x628>
    4000db60:	f9403fe1 	ldr	x1, [sp, #120]
    4000db64:	3707e6c1 	tbnz	w1, #0, 4000d83c <_svfprintf_r+0xf5c>
    4000db68:	b940abe2 	ldr	w2, [sp, #168]
    4000db6c:	b9409fe1 	ldr	w1, [sp, #156]
    4000db70:	4b170057 	sub	w23, w2, w23
    4000db74:	4b010041 	sub	w1, w2, w1
    4000db78:	6b0102ff 	cmp	w23, w1
    4000db7c:	1a81d2fa 	csel	w26, w23, w1, le
    4000db80:	17ffff4c 	b	4000d8b0 <_svfprintf_r+0xfd0>
    4000db84:	2a0403e1 	mov	w1, w4
    4000db88:	aa1603e3 	mov	x3, x22
    4000db8c:	93407ef7 	sxtw	x23, w23
    4000db90:	11000421 	add	w1, w1, #0x1
    4000db94:	8b170000 	add	x0, x0, x23
    4000db98:	b9012be1 	str	w1, [sp, #296]
    4000db9c:	f9009be0 	str	x0, [sp, #304]
    4000dba0:	f9000043 	str	x3, [x2]
    4000dba4:	f9000457 	str	x23, [x2, #8]
    4000dba8:	71001c3f 	cmp	w1, #0x7
    4000dbac:	54ffcd8d 	b.le	4000d55c <_svfprintf_r+0xc7c>
    4000dbb0:	910483e2 	add	x2, sp, #0x120
    4000dbb4:	aa1803e1 	mov	x1, x24
    4000dbb8:	aa1903e0 	mov	x0, x25
    4000dbbc:	9400103d 	bl	40011cb0 <__ssprint_r>
    4000dbc0:	35ff8620 	cbnz	w0, 4000cc84 <_svfprintf_r+0x3a4>
    4000dbc4:	b9412be1 	ldr	w1, [sp, #296]
    4000dbc8:	aa1503e2 	mov	x2, x21
    4000dbcc:	f9409be0 	ldr	x0, [sp, #304]
    4000dbd0:	17fffe64 	b	4000d560 <_svfprintf_r+0xc80>
    4000dbd4:	39400789 	ldrb	w9, [x28, #1]
    4000dbd8:	321b035a 	orr	w26, w26, #0x20
    4000dbdc:	9100079c 	add	x28, x28, #0x1
    4000dbe0:	17fffb91 	b	4000ca24 <_svfprintf_r+0x144>
    4000dbe4:	b9409be0 	ldr	w0, [sp, #152]
    4000dbe8:	11002001 	add	w1, w0, #0x8
    4000dbec:	7100003f 	cmp	w1, #0x0
    4000dbf0:	5400544d 	b.le	4000e678 <_svfprintf_r+0x1d98>
    4000dbf4:	f94047e0 	ldr	x0, [sp, #136]
    4000dbf8:	b9009be1 	str	w1, [sp, #152]
    4000dbfc:	91003c02 	add	x2, x0, #0xf
    4000dc00:	927df041 	and	x1, x2, #0xfffffffffffffff8
    4000dc04:	f90047e1 	str	x1, [sp, #136]
    4000dc08:	17fffd30 	b	4000d0c8 <_svfprintf_r+0x7e8>
    4000dc0c:	aa1903e0 	mov	x0, x25
    4000dc10:	d2800801 	mov	x1, #0x40                  	// #64
    4000dc14:	97ffd6e3 	bl	400037a0 <_malloc_r>
    4000dc18:	f9000300 	str	x0, [x24]
    4000dc1c:	f9000f00 	str	x0, [x24, #24]
    4000dc20:	b40072a0 	cbz	x0, 4000ea74 <_svfprintf_r+0x2194>
    4000dc24:	a90153f3 	stp	x19, x20, [sp, #16]
    4000dc28:	52800800 	mov	w0, #0x40                  	// #64
    4000dc2c:	a9025bf5 	stp	x21, x22, [sp, #32]
    4000dc30:	6d0627e8 	stp	d8, d9, [sp, #96]
    4000dc34:	b9002300 	str	w0, [x24, #32]
    4000dc38:	17fffb48 	b	4000c958 <_svfprintf_r+0x78>
    4000dc3c:	b9412be1 	ldr	w1, [sp, #296]
    4000dc40:	d00000a3 	adrp	x3, 40023000 <fpi.1>
    4000dc44:	9101a063 	add	x3, x3, #0x68
    4000dc48:	d280021a 	mov	x26, #0x10                  	// #16
    4000dc4c:	2a0103e2 	mov	w2, w1
    4000dc50:	aa0303fb 	mov	x27, x3
    4000dc54:	710042ff 	cmp	w23, #0x10
    4000dc58:	540000ac 	b.gt	4000dc6c <_svfprintf_r+0x138c>
    4000dc5c:	14000198 	b	4000e2bc <_svfprintf_r+0x19dc>
    4000dc60:	510042f7 	sub	w23, w23, #0x10
    4000dc64:	710042ff 	cmp	w23, #0x10
    4000dc68:	5400326d 	b.le	4000e2b4 <_svfprintf_r+0x19d4>
    4000dc6c:	91004000 	add	x0, x0, #0x10
    4000dc70:	11000442 	add	w2, w2, #0x1
    4000dc74:	a90068db 	stp	x27, x26, [x6]
    4000dc78:	910040c6 	add	x6, x6, #0x10
    4000dc7c:	b9012be2 	str	w2, [sp, #296]
    4000dc80:	f9009be0 	str	x0, [sp, #304]
    4000dc84:	71001c5f 	cmp	w2, #0x7
    4000dc88:	54fffecd 	b.le	4000dc60 <_svfprintf_r+0x1380>
    4000dc8c:	910483e2 	add	x2, sp, #0x120
    4000dc90:	aa1803e1 	mov	x1, x24
    4000dc94:	aa1903e0 	mov	x0, x25
    4000dc98:	94001006 	bl	40011cb0 <__ssprint_r>
    4000dc9c:	35ff7f40 	cbnz	w0, 4000cc84 <_svfprintf_r+0x3a4>
    4000dca0:	b9412be2 	ldr	w2, [sp, #296]
    4000dca4:	aa1503e6 	mov	x6, x21
    4000dca8:	f9409be0 	ldr	x0, [sp, #304]
    4000dcac:	17ffffed 	b	4000dc60 <_svfprintf_r+0x1380>
    4000dcb0:	b9409be0 	ldr	w0, [sp, #152]
    4000dcb4:	11002001 	add	w1, w0, #0x8
    4000dcb8:	7100003f 	cmp	w1, #0x0
    4000dcbc:	540019cd 	b.le	4000dff4 <_svfprintf_r+0x1714>
    4000dcc0:	f94047e0 	ldr	x0, [sp, #136]
    4000dcc4:	b9009be1 	str	w1, [sp, #152]
    4000dcc8:	91003c02 	add	x2, x0, #0xf
    4000dccc:	927df041 	and	x1, x2, #0xfffffffffffffff8
    4000dcd0:	f90047e1 	str	x1, [sp, #136]
    4000dcd4:	17fffc5c 	b	4000ce44 <_svfprintf_r+0x564>
    4000dcd8:	b9409be0 	ldr	w0, [sp, #152]
    4000dcdc:	11002001 	add	w1, w0, #0x8
    4000dce0:	7100003f 	cmp	w1, #0x0
    4000dce4:	5400146d 	b.le	4000df70 <_svfprintf_r+0x1690>
    4000dce8:	f94047e0 	ldr	x0, [sp, #136]
    4000dcec:	b9009be1 	str	w1, [sp, #152]
    4000dcf0:	91003c02 	add	x2, x0, #0xf
    4000dcf4:	927df041 	and	x1, x2, #0xfffffffffffffff8
    4000dcf8:	f90047e1 	str	x1, [sp, #136]
    4000dcfc:	17fffb70 	b	4000cabc <_svfprintf_r+0x1dc>
    4000dd00:	b9409be0 	ldr	w0, [sp, #152]
    4000dd04:	11002001 	add	w1, w0, #0x8
    4000dd08:	7100003f 	cmp	w1, #0x0
    4000dd0c:	540017ed 	b.le	4000e008 <_svfprintf_r+0x1728>
    4000dd10:	f94047e0 	ldr	x0, [sp, #136]
    4000dd14:	b9009be1 	str	w1, [sp, #152]
    4000dd18:	91003c02 	add	x2, x0, #0xf
    4000dd1c:	927df041 	and	x1, x2, #0xfffffffffffffff8
    4000dd20:	f90047e1 	str	x1, [sp, #136]
    4000dd24:	17fffc9c 	b	4000cf94 <_svfprintf_r+0x6b4>
    4000dd28:	b9409be0 	ldr	w0, [sp, #152]
    4000dd2c:	11002001 	add	w1, w0, #0x8
    4000dd30:	7100003f 	cmp	w1, #0x0
    4000dd34:	5400136d 	b.le	4000dfa0 <_svfprintf_r+0x16c0>
    4000dd38:	f94047e0 	ldr	x0, [sp, #136]
    4000dd3c:	b9009be1 	str	w1, [sp, #152]
    4000dd40:	91003c02 	add	x2, x0, #0xf
    4000dd44:	927df041 	and	x1, x2, #0xfffffffffffffff8
    4000dd48:	f90047e1 	str	x1, [sp, #136]
    4000dd4c:	17fffb67 	b	4000cae8 <_svfprintf_r+0x208>
    4000dd50:	b9412be1 	ldr	w1, [sp, #296]
    4000dd54:	91000400 	add	x0, x0, #0x1
    4000dd58:	b00000a3 	adrp	x3, 40022000 <__pow_log_data+0xcc8>
    4000dd5c:	d2800025 	mov	x5, #0x1                   	// #1
    4000dd60:	91356063 	add	x3, x3, #0xd58
    4000dd64:	11000421 	add	w1, w1, #0x1
    4000dd68:	a90014c3 	stp	x3, x5, [x6]
    4000dd6c:	910040c6 	add	x6, x6, #0x10
    4000dd70:	b9012be1 	str	w1, [sp, #296]
    4000dd74:	f9009be0 	str	x0, [sp, #304]
    4000dd78:	71001c3f 	cmp	w1, #0x7
    4000dd7c:	54002d6c 	b.gt	4000e328 <_svfprintf_r+0x1a48>
    4000dd80:	b940abe1 	ldr	w1, [sp, #168]
    4000dd84:	2a020021 	orr	w1, w1, w2
    4000dd88:	34003341 	cbz	w1, 4000e3f0 <_svfprintf_r+0x1b10>
    4000dd8c:	a94b93e3 	ldp	x3, x4, [sp, #184]
    4000dd90:	a9000cc4 	stp	x4, x3, [x6]
    4000dd94:	b9412be1 	ldr	w1, [sp, #296]
    4000dd98:	910040c6 	add	x6, x6, #0x10
    4000dd9c:	11000421 	add	w1, w1, #0x1
    4000dda0:	b9012be1 	str	w1, [sp, #296]
    4000dda4:	8b000060 	add	x0, x3, x0
    4000dda8:	f9009be0 	str	x0, [sp, #304]
    4000ddac:	71001c3f 	cmp	w1, #0x7
    4000ddb0:	5400336c 	b.gt	4000e41c <_svfprintf_r+0x1b3c>
    4000ddb4:	37f84b02 	tbnz	w2, #31, 4000e714 <_svfprintf_r+0x1e34>
    4000ddb8:	b980abe2 	ldrsw	x2, [sp, #168]
    4000ddbc:	11000421 	add	w1, w1, #0x1
    4000ddc0:	a90008d6 	stp	x22, x2, [x6]
    4000ddc4:	8b000040 	add	x0, x2, x0
    4000ddc8:	b9012be1 	str	w1, [sp, #296]
    4000ddcc:	f9009be0 	str	x0, [sp, #304]
    4000ddd0:	71001c3f 	cmp	w1, #0x7
    4000ddd4:	54ff72ad 	b.le	4000cc28 <_svfprintf_r+0x348>
    4000ddd8:	17fffbf6 	b	4000cdb0 <_svfprintf_r+0x4d0>
    4000dddc:	1e682100 	fcmp	d8, d8
    4000dde0:	540052c6 	b.vs	4000e838 <_svfprintf_r+0x1f58>
    4000dde4:	121a7b73 	and	w19, w27, #0xffffffdf
    4000dde8:	310004ff 	cmn	w7, #0x1
    4000ddec:	54001180 	b.eq	4000e01c <_svfprintf_r+0x173c>  // b.none
    4000ddf0:	71011e7f 	cmp	w19, #0x47
    4000ddf4:	7a4008e0 	ccmp	w7, #0x0, #0x0, eq  // eq = none
    4000ddf8:	54001141 	b.ne	4000e020 <_svfprintf_r+0x1740>  // b.any
    4000ddfc:	9e660100 	fmov	x0, d8
    4000de00:	32180341 	orr	w1, w26, #0x100
    4000de04:	b9007be1 	str	w1, [sp, #120]
    4000de08:	d360fc00 	lsr	x0, x0, #32
    4000de0c:	37f81900 	tbnz	w0, #31, 4000e12c <_svfprintf_r+0x184c>
    4000de10:	1e604100 	fmov	d0, d8
    4000de14:	52800041 	mov	w1, #0x2                   	// #2
    4000de18:	910463e5 	add	x5, sp, #0x118
    4000de1c:	910433e4 	add	x4, sp, #0x10c
    4000de20:	910423e3 	add	x3, sp, #0x108
    4000de24:	aa1903e0 	mov	x0, x25
    4000de28:	52800022 	mov	w2, #0x1                   	// #1
    4000de2c:	f9004be6 	str	x6, [sp, #144]
    4000de30:	97ffe9f4 	bl	40008600 <_dtoa_r>
    4000de34:	1e604109 	fmov	d9, d8
    4000de38:	f9404be6 	ldr	x6, [sp, #144]
    4000de3c:	52800027 	mov	w7, #0x1                   	// #1
    4000de40:	aa0003f6 	mov	x22, x0
    4000de44:	2a0703e1 	mov	w1, w7
    4000de48:	5280000a 	mov	w10, #0x0                   	// #0
    4000de4c:	3600179a 	tbz	w26, #0, 4000e13c <_svfprintf_r+0x185c>
    4000de50:	8b21c2c1 	add	x1, x22, w1, sxtw
    4000de54:	14000094 	b	4000e0a4 <_svfprintf_r+0x17c4>
    4000de58:	910483e2 	add	x2, sp, #0x120
    4000de5c:	aa1803e1 	mov	x1, x24
    4000de60:	aa1903e0 	mov	x0, x25
    4000de64:	94000f93 	bl	40011cb0 <__ssprint_r>
    4000de68:	35ff70e0 	cbnz	w0, 4000cc84 <_svfprintf_r+0x3a4>
    4000de6c:	aa1503e6 	mov	x6, x21
    4000de70:	f9409be0 	ldr	x0, [sp, #304]
    4000de74:	17fffcc0 	b	4000d174 <_svfprintf_r+0x894>
    4000de78:	aa1503f6 	mov	x22, x21
    4000de7c:	d503201f 	nop
    4000de80:	b202e7e1 	mov	x1, #0xcccccccccccccccc    	// #-3689348814741910324
    4000de84:	aa0003e4 	mov	x4, x0
    4000de88:	f29999a1 	movk	x1, #0xcccd
    4000de8c:	9bc17c02 	umulh	x2, x0, x1
    4000de90:	d343fc42 	lsr	x2, x2, #3
    4000de94:	8b020841 	add	x1, x2, x2, lsl #2
    4000de98:	cb010401 	sub	x1, x0, x1, lsl #1
    4000de9c:	aa0203e0 	mov	x0, x2
    4000dea0:	1100c021 	add	w1, w1, #0x30
    4000dea4:	381ffec1 	strb	w1, [x22, #-1]!
    4000dea8:	f100249f 	cmp	x4, #0x9
    4000deac:	54fffea8 	b.hi	4000de80 <_svfprintf_r+0x15a0>  // b.pmore
    4000deb0:	4b1602b7 	sub	w23, w21, w22
    4000deb4:	b9007bfa 	str	w26, [sp, #120]
    4000deb8:	17fffb1e 	b	4000cb30 <_svfprintf_r+0x250>
    4000debc:	910483e2 	add	x2, sp, #0x120
    4000dec0:	aa1803e1 	mov	x1, x24
    4000dec4:	aa1903e0 	mov	x0, x25
    4000dec8:	94000f7a 	bl	40011cb0 <__ssprint_r>
    4000decc:	35ff6dc0 	cbnz	w0, 4000cc84 <_svfprintf_r+0x3a4>
    4000ded0:	aa1503e6 	mov	x6, x21
    4000ded4:	f9409be0 	ldr	x0, [sp, #304]
    4000ded8:	17fffcb7 	b	4000d1b4 <_svfprintf_r+0x8d4>
    4000dedc:	710018ff 	cmp	w7, #0x6
    4000dee0:	528000d7 	mov	w23, #0x6                   	// #6
    4000dee4:	1a9790f7 	csel	w23, w7, w23, ls  // ls = plast
    4000dee8:	b00000a4 	adrp	x4, 40022000 <__pow_log_data+0xcc8>
    4000deec:	91354096 	add	x22, x4, #0xd50
    4000def0:	f90047f3 	str	x19, [sp, #136]
    4000def4:	2a1703f3 	mov	w19, w23
    4000def8:	17fffad7 	b	4000ca54 <_svfprintf_r+0x174>
    4000defc:	f9409be0 	ldr	x0, [sp, #304]
    4000df00:	b4ff6c20 	cbz	x0, 4000cc84 <_svfprintf_r+0x3a4>
    4000df04:	aa1903e0 	mov	x0, x25
    4000df08:	910483e2 	add	x2, sp, #0x120
    4000df0c:	aa1803e1 	mov	x1, x24
    4000df10:	94000f68 	bl	40011cb0 <__ssprint_r>
    4000df14:	17fffb5c 	b	4000cc84 <_svfprintf_r+0x3a4>
    4000df18:	aa1603e0 	mov	x0, x22
    4000df1c:	f9004be6 	str	x6, [sp, #144]
    4000df20:	97ffcd08 	bl	40001340 <strlen>
    4000df24:	b9007bfa 	str	w26, [sp, #120]
    4000df28:	3943ffe3 	ldrb	w3, [sp, #255]
    4000df2c:	7100001f 	cmp	w0, #0x0
    4000df30:	f90047f3 	str	x19, [sp, #136]
    4000df34:	2a0003f7 	mov	w23, w0
    4000df38:	b9009fff 	str	wzr, [sp, #156]
    4000df3c:	1a9fa013 	csel	w19, w0, wzr, ge  // ge = tcont
    4000df40:	52800007 	mov	w7, #0x0                   	// #0
    4000df44:	f9404be6 	ldr	x6, [sp, #144]
    4000df48:	35ff5fc3 	cbnz	w3, 4000cb40 <_svfprintf_r+0x260>
    4000df4c:	17fffafe 	b	4000cb44 <_svfprintf_r+0x264>
    4000df50:	37f82da0 	tbnz	w0, #31, 4000e504 <_svfprintf_r+0x1c24>
    4000df54:	f94047e0 	ldr	x0, [sp, #136]
    4000df58:	91002c01 	add	x1, x0, #0xb
    4000df5c:	927df021 	and	x1, x1, #0xfffffffffffffff8
    4000df60:	f90047e1 	str	x1, [sp, #136]
    4000df64:	b9400000 	ldr	w0, [x0]
    4000df68:	52800001 	mov	w1, #0x0                   	// #0
    4000df6c:	17fffae1 	b	4000caf0 <_svfprintf_r+0x210>
    4000df70:	f94067e2 	ldr	x2, [sp, #200]
    4000df74:	b9409be0 	ldr	w0, [sp, #152]
    4000df78:	b9009be1 	str	w1, [sp, #152]
    4000df7c:	8b20c040 	add	x0, x2, w0, sxtw
    4000df80:	17fffacf 	b	4000cabc <_svfprintf_r+0x1dc>
    4000df84:	37f831c0 	tbnz	w0, #31, 4000e5bc <_svfprintf_r+0x1cdc>
    4000df88:	f94047e0 	ldr	x0, [sp, #136]
    4000df8c:	91002c01 	add	x1, x0, #0xb
    4000df90:	927df021 	and	x1, x1, #0xfffffffffffffff8
    4000df94:	b9400000 	ldr	w0, [x0]
    4000df98:	f90047e1 	str	x1, [sp, #136]
    4000df9c:	17fffbff 	b	4000cf98 <_svfprintf_r+0x6b8>
    4000dfa0:	f94067e2 	ldr	x2, [sp, #200]
    4000dfa4:	b9409be0 	ldr	w0, [sp, #152]
    4000dfa8:	b9009be1 	str	w1, [sp, #152]
    4000dfac:	8b20c040 	add	x0, x2, w0, sxtw
    4000dfb0:	17ffface 	b	4000cae8 <_svfprintf_r+0x208>
    4000dfb4:	37f826e0 	tbnz	w0, #31, 4000e490 <_svfprintf_r+0x1bb0>
    4000dfb8:	f94047e0 	ldr	x0, [sp, #136]
    4000dfbc:	91002c01 	add	x1, x0, #0xb
    4000dfc0:	927df021 	and	x1, x1, #0xfffffffffffffff8
    4000dfc4:	f90047e1 	str	x1, [sp, #136]
    4000dfc8:	b9800000 	ldrsw	x0, [x0]
    4000dfcc:	aa0003e1 	mov	x1, x0
    4000dfd0:	17fffb9f 	b	4000ce4c <_svfprintf_r+0x56c>
    4000dfd4:	37f82ca0 	tbnz	w0, #31, 4000e568 <_svfprintf_r+0x1c88>
    4000dfd8:	f94047e0 	ldr	x0, [sp, #136]
    4000dfdc:	91002c01 	add	x1, x0, #0xb
    4000dfe0:	927df021 	and	x1, x1, #0xfffffffffffffff8
    4000dfe4:	f90047e1 	str	x1, [sp, #136]
    4000dfe8:	b9400000 	ldr	w0, [x0]
    4000dfec:	52800021 	mov	w1, #0x1                   	// #1
    4000dff0:	17fffac0 	b	4000caf0 <_svfprintf_r+0x210>
    4000dff4:	f94067e2 	ldr	x2, [sp, #200]
    4000dff8:	b9409be0 	ldr	w0, [sp, #152]
    4000dffc:	b9009be1 	str	w1, [sp, #152]
    4000e000:	8b20c040 	add	x0, x2, w0, sxtw
    4000e004:	17fffb90 	b	4000ce44 <_svfprintf_r+0x564>
    4000e008:	f94067e2 	ldr	x2, [sp, #200]
    4000e00c:	b9409be0 	ldr	w0, [sp, #152]
    4000e010:	b9009be1 	str	w1, [sp, #152]
    4000e014:	8b20c040 	add	x0, x2, w0, sxtw
    4000e018:	17fffbdf 	b	4000cf94 <_svfprintf_r+0x6b4>
    4000e01c:	528000c7 	mov	w7, #0x6                   	// #6
    4000e020:	9e660100 	fmov	x0, d8
    4000e024:	32180341 	orr	w1, w26, #0x100
    4000e028:	b9007be1 	str	w1, [sp, #120]
    4000e02c:	1e604109 	fmov	d9, d8
    4000e030:	5280000a 	mov	w10, #0x0                   	// #0
    4000e034:	d360fc00 	lsr	x0, x0, #32
    4000e038:	37f807c0 	tbnz	w0, #31, 4000e130 <_svfprintf_r+0x1850>
    4000e03c:	b9009fea 	str	w10, [sp, #156]
    4000e040:	1e604120 	fmov	d0, d9
    4000e044:	f90057e6 	str	x6, [sp, #168]
    4000e048:	71011a7f 	cmp	w19, #0x46
    4000e04c:	54003321 	b.ne	4000e6b0 <_svfprintf_r+0x1dd0>  // b.any
    4000e050:	2a0703e2 	mov	w2, w7
    4000e054:	52800061 	mov	w1, #0x3                   	// #3
    4000e058:	910463e5 	add	x5, sp, #0x118
    4000e05c:	910433e4 	add	x4, sp, #0x10c
    4000e060:	910423e3 	add	x3, sp, #0x108
    4000e064:	aa1903e0 	mov	x0, x25
    4000e068:	b90093e7 	str	w7, [sp, #144]
    4000e06c:	97ffe965 	bl	40008600 <_dtoa_r>
    4000e070:	aa0003f6 	mov	x22, x0
    4000e074:	39400000 	ldrb	w0, [x0]
    4000e078:	2f00e400 	movi	d0, #0x0
    4000e07c:	b94093e7 	ldr	w7, [sp, #144]
    4000e080:	7100c01f 	cmp	w0, #0x30
    4000e084:	b9409fea 	ldr	w10, [sp, #156]
    4000e088:	f94057e6 	ldr	x6, [sp, #168]
    4000e08c:	93407ce1 	sxtw	x1, w7
    4000e090:	1e600524 	fccmp	d9, d0, #0x4, eq  // eq = none
    4000e094:	54004781 	b.ne	4000e984 <_svfprintf_r+0x20a4>  // b.any
    4000e098:	b9410be0 	ldr	w0, [sp, #264]
    4000e09c:	8b20c020 	add	x0, x1, w0, sxtw
    4000e0a0:	8b0002c1 	add	x1, x22, x0
    4000e0a4:	1e602128 	fcmp	d9, #0.0
    4000e0a8:	aa0103e0 	mov	x0, x1
    4000e0ac:	54000160 	b.eq	4000e0d8 <_svfprintf_r+0x17f8>  // b.none
    4000e0b0:	f9408fe0 	ldr	x0, [sp, #280]
    4000e0b4:	eb00003f 	cmp	x1, x0
    4000e0b8:	54000109 	b.ls	4000e0d8 <_svfprintf_r+0x17f8>  // b.plast
    4000e0bc:	52800603 	mov	w3, #0x30                  	// #48
    4000e0c0:	91000402 	add	x2, x0, #0x1
    4000e0c4:	f9008fe2 	str	x2, [sp, #280]
    4000e0c8:	39000003 	strb	w3, [x0]
    4000e0cc:	f9408fe0 	ldr	x0, [sp, #280]
    4000e0d0:	eb00003f 	cmp	x1, x0
    4000e0d4:	54ffff68 	b.hi	4000e0c0 <_svfprintf_r+0x17e0>  // b.pmore
    4000e0d8:	b9410be1 	ldr	w1, [sp, #264]
    4000e0dc:	cb160000 	sub	x0, x0, x22
    4000e0e0:	b9009fe1 	str	w1, [sp, #156]
    4000e0e4:	b900abe0 	str	w0, [sp, #168]
    4000e0e8:	71011e7f 	cmp	w19, #0x47
    4000e0ec:	54000320 	b.eq	4000e150 <_svfprintf_r+0x1870>  // b.none
    4000e0f0:	71019b7f 	cmp	w27, #0x66
    4000e0f4:	54000381 	b.ne	4000e164 <_svfprintf_r+0x1884>  // b.any
    4000e0f8:	b9409fe1 	ldr	w1, [sp, #156]
    4000e0fc:	12000340 	and	w0, w26, #0x1
    4000e100:	2a070000 	orr	w0, w0, w7
    4000e104:	7100003f 	cmp	w1, #0x0
    4000e108:	540028ed 	b.le	4000e624 <_svfprintf_r+0x1d44>
    4000e10c:	35003c80 	cbnz	w0, 4000e89c <_svfprintf_r+0x1fbc>
    4000e110:	b9409ff7 	ldr	w23, [sp, #156]
    4000e114:	2a1703f3 	mov	w19, w23
    4000e118:	340028ea 	cbz	w10, 4000e634 <_svfprintf_r+0x1d54>
    4000e11c:	528005a0 	mov	w0, #0x2d                  	// #45
    4000e120:	52800007 	mov	w7, #0x0                   	// #0
    4000e124:	3903ffe0 	strb	w0, [sp, #255]
    4000e128:	17fffa86 	b	4000cb40 <_svfprintf_r+0x260>
    4000e12c:	52800027 	mov	w7, #0x1                   	// #1
    4000e130:	1e614109 	fneg	d9, d8
    4000e134:	528005aa 	mov	w10, #0x2d                  	// #45
    4000e138:	17ffffc1 	b	4000e03c <_svfprintf_r+0x175c>
    4000e13c:	f9408fe0 	ldr	x0, [sp, #280]
    4000e140:	b9410be1 	ldr	w1, [sp, #264]
    4000e144:	cb160000 	sub	x0, x0, x22
    4000e148:	b9009fe1 	str	w1, [sp, #156]
    4000e14c:	b900abe0 	str	w0, [sp, #168]
    4000e150:	b9409fe1 	ldr	w1, [sp, #156]
    4000e154:	51000b7b 	sub	w27, w27, #0x2
    4000e158:	6b0100ff 	cmp	w7, w1
    4000e15c:	3a43a821 	ccmn	w1, #0x3, #0x1, ge  // ge = tcont
    4000e160:	54000d0a 	b.ge	4000e300 <_svfprintf_r+0x1a20>  // b.tcont
    4000e164:	b9409fe2 	ldr	w2, [sp, #156]
    4000e168:	52800561 	mov	w1, #0x2b                  	// #43
    4000e16c:	390443fb 	strb	w27, [sp, #272]
    4000e170:	51000440 	sub	w0, w2, #0x1
    4000e174:	b9010be0 	str	w0, [sp, #264]
    4000e178:	37f824e0 	tbnz	w0, #31, 4000e614 <_svfprintf_r+0x1d34>
    4000e17c:	390447e1 	strb	w1, [sp, #273]
    4000e180:	7100241f 	cmp	w0, #0x9
    4000e184:	540032cd 	b.le	4000e7dc <_svfprintf_r+0x1efc>
    4000e188:	91047fe7 	add	x7, sp, #0x11f
    4000e18c:	528cccec 	mov	w12, #0x6667                	// #26215
    4000e190:	aa0703e5 	mov	x5, x7
    4000e194:	72accccc 	movk	w12, #0x6666, lsl #16
    4000e198:	9b2c7c01 	smull	x1, w0, w12
    4000e19c:	aa0503e3 	mov	x3, x5
    4000e1a0:	2a0003e4 	mov	w4, w0
    4000e1a4:	d10004a5 	sub	x5, x5, #0x1
    4000e1a8:	9362fc21 	asr	x1, x1, #34
    4000e1ac:	4b807c21 	sub	w1, w1, w0, asr #31
    4000e1b0:	0b010822 	add	w2, w1, w1, lsl #2
    4000e1b4:	4b020402 	sub	w2, w0, w2, lsl #1
    4000e1b8:	2a0103e0 	mov	w0, w1
    4000e1bc:	1100c041 	add	w1, w2, #0x30
    4000e1c0:	381ff061 	sturb	w1, [x3, #-1]
    4000e1c4:	71018c9f 	cmp	w4, #0x63
    4000e1c8:	54fffe8c 	b.gt	4000e198 <_svfprintf_r+0x18b8>
    4000e1cc:	1100c000 	add	w0, w0, #0x30
    4000e1d0:	d1000861 	sub	x1, x3, #0x2
    4000e1d4:	12001c00 	and	w0, w0, #0xff
    4000e1d8:	381ff0a0 	sturb	w0, [x5, #-1]
    4000e1dc:	eb0100ff 	cmp	x7, x1
    4000e1e0:	540040e9 	b.ls	4000e9fc <_svfprintf_r+0x211c>  // b.plast
    4000e1e4:	cb0300e2 	sub	x2, x7, x3
    4000e1e8:	910443e5 	add	x5, sp, #0x110
    4000e1ec:	92800001 	mov	x1, #0xffffffffffffffff    	// #-1
    4000e1f0:	14000003 	b	4000e1fc <_svfprintf_r+0x191c>
    4000e1f4:	38616860 	ldrb	w0, [x3, x1]
    4000e1f8:	91000421 	add	x1, x1, #0x1
    4000e1fc:	8b0100a4 	add	x4, x5, x1
    4000e200:	39000c80 	strb	w0, [x4, #3]
    4000e204:	eb01005f 	cmp	x2, x1
    4000e208:	54ffff61 	b.ne	4000e1f4 <_svfprintf_r+0x1914>  // b.any
    4000e20c:	910487e0 	add	x0, sp, #0x121
    4000e210:	91044be1 	add	x1, sp, #0x112
    4000e214:	cb030000 	sub	x0, x0, x3
    4000e218:	8b000020 	add	x0, x1, x0
    4000e21c:	4b050000 	sub	w0, w0, w5
    4000e220:	b900d3e0 	str	w0, [sp, #208]
    4000e224:	b940abe0 	ldr	w0, [sp, #168]
    4000e228:	b940d3e1 	ldr	w1, [sp, #208]
    4000e22c:	0b000037 	add	w23, w1, w0
    4000e230:	7100041f 	cmp	w0, #0x1
    4000e234:	5400328d 	b.le	4000e884 <_svfprintf_r+0x1fa4>
    4000e238:	b940bbe0 	ldr	w0, [sp, #184]
    4000e23c:	b9009fff 	str	wzr, [sp, #156]
    4000e240:	2b0002f7 	adds	w23, w23, w0
    4000e244:	1a9f52f3 	csel	w19, w23, wzr, pl  // pl = nfrst
    4000e248:	17ffffb4 	b	4000e118 <_svfprintf_r+0x1838>
    4000e24c:	b940d7e0 	ldr	w0, [sp, #212]
    4000e250:	11004001 	add	w1, w0, #0x10
    4000e254:	7100003f 	cmp	w1, #0x0
    4000e258:	54001d2d 	b.le	4000e5fc <_svfprintf_r+0x1d1c>
    4000e25c:	f94047e0 	ldr	x0, [sp, #136]
    4000e260:	b900d7e1 	str	w1, [sp, #212]
    4000e264:	91003c02 	add	x2, x0, #0xf
    4000e268:	927df041 	and	x1, x2, #0xfffffffffffffff8
    4000e26c:	f90047e1 	str	x1, [sp, #136]
    4000e270:	fd400008 	ldr	d8, [x0]
    4000e274:	17fffaa2 	b	4000ccfc <_svfprintf_r+0x41c>
    4000e278:	528005a0 	mov	w0, #0x2d                  	// #45
    4000e27c:	528005a3 	mov	w3, #0x2d                  	// #45
    4000e280:	3903ffe0 	strb	w0, [sp, #255]
    4000e284:	17fffaa6 	b	4000cd1c <_svfprintf_r+0x43c>
    4000e288:	b940d7e0 	ldr	w0, [sp, #212]
    4000e28c:	11004001 	add	w1, w0, #0x10
    4000e290:	7100003f 	cmp	w1, #0x0
    4000e294:	54001aad 	b.le	4000e5e8 <_svfprintf_r+0x1d08>
    4000e298:	f94047e0 	ldr	x0, [sp, #136]
    4000e29c:	b900d7e1 	str	w1, [sp, #212]
    4000e2a0:	91003c00 	add	x0, x0, #0xf
    4000e2a4:	927cec00 	and	x0, x0, #0xfffffffffffffff0
    4000e2a8:	91004001 	add	x1, x0, #0x10
    4000e2ac:	f90047e1 	str	x1, [sp, #136]
    4000e2b0:	17fffa8c 	b	4000cce0 <_svfprintf_r+0x400>
    4000e2b4:	2a0203e1 	mov	w1, w2
    4000e2b8:	aa1b03e3 	mov	x3, x27
    4000e2bc:	93407ef7 	sxtw	x23, w23
    4000e2c0:	11000421 	add	w1, w1, #0x1
    4000e2c4:	8b170000 	add	x0, x0, x23
    4000e2c8:	a9005cc3 	stp	x3, x23, [x6]
    4000e2cc:	910040c6 	add	x6, x6, #0x10
    4000e2d0:	b9012be1 	str	w1, [sp, #296]
    4000e2d4:	f9009be0 	str	x0, [sp, #304]
    4000e2d8:	71001c3f 	cmp	w1, #0x7
    4000e2dc:	54ffaa8d 	b.le	4000d82c <_svfprintf_r+0xf4c>
    4000e2e0:	910483e2 	add	x2, sp, #0x120
    4000e2e4:	aa1803e1 	mov	x1, x24
    4000e2e8:	aa1903e0 	mov	x0, x25
    4000e2ec:	94000e71 	bl	40011cb0 <__ssprint_r>
    4000e2f0:	35ff4ca0 	cbnz	w0, 4000cc84 <_svfprintf_r+0x3a4>
    4000e2f4:	aa1503e6 	mov	x6, x21
    4000e2f8:	f9409be0 	ldr	x0, [sp, #304]
    4000e2fc:	17fffd4c 	b	4000d82c <_svfprintf_r+0xf4c>
    4000e300:	b9409fe1 	ldr	w1, [sp, #156]
    4000e304:	b940abe2 	ldr	w2, [sp, #168]
    4000e308:	6b01005f 	cmp	w2, w1
    4000e30c:	54000eac 	b.gt	4000e4e0 <_svfprintf_r+0x1c00>
    4000e310:	3700275a 	tbnz	w26, #0, 4000e7f8 <_svfprintf_r+0x1f18>
    4000e314:	7100003f 	cmp	w1, #0x0
    4000e318:	2a0103f7 	mov	w23, w1
    4000e31c:	1a9fa033 	csel	w19, w1, wzr, ge  // ge = tcont
    4000e320:	52800cfb 	mov	w27, #0x67                  	// #103
    4000e324:	17ffff7d 	b	4000e118 <_svfprintf_r+0x1838>
    4000e328:	910483e2 	add	x2, sp, #0x120
    4000e32c:	aa1803e1 	mov	x1, x24
    4000e330:	aa1903e0 	mov	x0, x25
    4000e334:	94000e5f 	bl	40011cb0 <__ssprint_r>
    4000e338:	35ff4a60 	cbnz	w0, 4000cc84 <_svfprintf_r+0x3a4>
    4000e33c:	b9410be2 	ldr	w2, [sp, #264]
    4000e340:	aa1503e6 	mov	x6, x21
    4000e344:	f9409be0 	ldr	x0, [sp, #304]
    4000e348:	17fffe8e 	b	4000dd80 <_svfprintf_r+0x14a0>
    4000e34c:	910483e2 	add	x2, sp, #0x120
    4000e350:	aa1803e1 	mov	x1, x24
    4000e354:	aa1903e0 	mov	x0, x25
    4000e358:	94000e56 	bl	40011cb0 <__ssprint_r>
    4000e35c:	35ff4940 	cbnz	w0, 4000cc84 <_svfprintf_r+0x3a4>
    4000e360:	b9410bf7 	ldr	w23, [sp, #264]
    4000e364:	aa1503e6 	mov	x6, x21
    4000e368:	f9409be0 	ldr	x0, [sp, #304]
    4000e36c:	17fffd3e 	b	4000d864 <_svfprintf_r+0xf84>
    4000e370:	f94067e5 	ldr	x5, [sp, #200]
    4000e374:	b9409be0 	ldr	w0, [sp, #152]
    4000e378:	b9009be4 	str	w4, [sp, #152]
    4000e37c:	8b20c0a5 	add	x5, x5, w0, sxtw
    4000e380:	f94047e0 	ldr	x0, [sp, #136]
    4000e384:	f90047e5 	str	x5, [sp, #136]
    4000e388:	17fffae0 	b	4000cf08 <_svfprintf_r+0x628>
    4000e38c:	f94067e2 	ldr	x2, [sp, #200]
    4000e390:	b9409be1 	ldr	w1, [sp, #152]
    4000e394:	b9009be0 	str	w0, [sp, #152]
    4000e398:	f94047f3 	ldr	x19, [sp, #136]
    4000e39c:	8b21c041 	add	x1, x2, w1, sxtw
    4000e3a0:	f90047e1 	str	x1, [sp, #136]
    4000e3a4:	17fffb0a 	b	4000cfcc <_svfprintf_r+0x6ec>
    4000e3a8:	f94067e2 	ldr	x2, [sp, #200]
    4000e3ac:	b9409be1 	ldr	w1, [sp, #152]
    4000e3b0:	b9009be0 	str	w0, [sp, #152]
    4000e3b4:	8b21c043 	add	x3, x2, w1, sxtw
    4000e3b8:	17fffb27 	b	4000d054 <_svfprintf_r+0x774>
    4000e3bc:	f94067e2 	ldr	x2, [sp, #200]
    4000e3c0:	b9409be0 	ldr	w0, [sp, #152]
    4000e3c4:	b9009be1 	str	w1, [sp, #152]
    4000e3c8:	8b20c040 	add	x0, x2, w0, sxtw
    4000e3cc:	17fffb4e 	b	4000d104 <_svfprintf_r+0x824>
    4000e3d0:	910483e2 	add	x2, sp, #0x120
    4000e3d4:	aa1803e1 	mov	x1, x24
    4000e3d8:	aa1903e0 	mov	x0, x25
    4000e3dc:	94000e35 	bl	40011cb0 <__ssprint_r>
    4000e3e0:	35ff4520 	cbnz	w0, 4000cc84 <_svfprintf_r+0x3a4>
    4000e3e4:	aa1503e6 	mov	x6, x21
    4000e3e8:	f9409be0 	ldr	x0, [sp, #304]
    4000e3ec:	17fffd0a 	b	4000d814 <_svfprintf_r+0xf34>
    4000e3f0:	f9403fe1 	ldr	x1, [sp, #120]
    4000e3f4:	360741c1 	tbz	w1, #0, 4000cc2c <_svfprintf_r+0x34c>
    4000e3f8:	a94b8fe2 	ldp	x2, x3, [sp, #184]
    4000e3fc:	a90008c3 	stp	x3, x2, [x6]
    4000e400:	b9412be1 	ldr	w1, [sp, #296]
    4000e404:	11000421 	add	w1, w1, #0x1
    4000e408:	b9012be1 	str	w1, [sp, #296]
    4000e40c:	8b000040 	add	x0, x2, x0
    4000e410:	f9009be0 	str	x0, [sp, #304]
    4000e414:	71001c3f 	cmp	w1, #0x7
    4000e418:	540012cd 	b.le	4000e670 <_svfprintf_r+0x1d90>
    4000e41c:	910483e2 	add	x2, sp, #0x120
    4000e420:	aa1803e1 	mov	x1, x24
    4000e424:	aa1903e0 	mov	x0, x25
    4000e428:	94000e22 	bl	40011cb0 <__ssprint_r>
    4000e42c:	35ff42c0 	cbnz	w0, 4000cc84 <_svfprintf_r+0x3a4>
    4000e430:	b9410be2 	ldr	w2, [sp, #264]
    4000e434:	aa1503e6 	mov	x6, x21
    4000e438:	b9412be1 	ldr	w1, [sp, #296]
    4000e43c:	f9409be0 	ldr	x0, [sp, #304]
    4000e440:	17fffe5d 	b	4000ddb4 <_svfprintf_r+0x14d4>
    4000e444:	37f820c0 	tbnz	w0, #31, 4000e85c <_svfprintf_r+0x1f7c>
    4000e448:	f94047e0 	ldr	x0, [sp, #136]
    4000e44c:	91003c01 	add	x1, x0, #0xf
    4000e450:	927df021 	and	x1, x1, #0xfffffffffffffff8
    4000e454:	f90047e1 	str	x1, [sp, #136]
    4000e458:	f9400000 	ldr	x0, [x0]
    4000e45c:	b94087e1 	ldr	w1, [sp, #132]
    4000e460:	b9000001 	str	w1, [x0]
    4000e464:	17fff94a 	b	4000c98c <_svfprintf_r+0xac>
    4000e468:	b9409be0 	ldr	w0, [sp, #152]
    4000e46c:	11002001 	add	w1, w0, #0x8
    4000e470:	7100003f 	cmp	w1, #0x0
    4000e474:	5400272d 	b.le	4000e958 <_svfprintf_r+0x2078>
    4000e478:	f94047e0 	ldr	x0, [sp, #136]
    4000e47c:	b9009be1 	str	w1, [sp, #152]
    4000e480:	91002c02 	add	x2, x0, #0xb
    4000e484:	927df041 	and	x1, x2, #0xfffffffffffffff8
    4000e488:	f90047e1 	str	x1, [sp, #136]
    4000e48c:	17fffa62 	b	4000ce14 <_svfprintf_r+0x534>
    4000e490:	b9409be0 	ldr	w0, [sp, #152]
    4000e494:	11002001 	add	w1, w0, #0x8
    4000e498:	7100003f 	cmp	w1, #0x0
    4000e49c:	5400254d 	b.le	4000e944 <_svfprintf_r+0x2064>
    4000e4a0:	f94047e0 	ldr	x0, [sp, #136]
    4000e4a4:	b9009be1 	str	w1, [sp, #152]
    4000e4a8:	91002c02 	add	x2, x0, #0xb
    4000e4ac:	927df041 	and	x1, x2, #0xfffffffffffffff8
    4000e4b0:	f90047e1 	str	x1, [sp, #136]
    4000e4b4:	17fffec5 	b	4000dfc8 <_svfprintf_r+0x16e8>
    4000e4b8:	b9409be0 	ldr	w0, [sp, #152]
    4000e4bc:	11002001 	add	w1, w0, #0x8
    4000e4c0:	7100003f 	cmp	w1, #0x0
    4000e4c4:	540020ad 	b.le	4000e8d8 <_svfprintf_r+0x1ff8>
    4000e4c8:	f94047e0 	ldr	x0, [sp, #136]
    4000e4cc:	b9009be1 	str	w1, [sp, #152]
    4000e4d0:	91002c02 	add	x2, x0, #0xb
    4000e4d4:	927df041 	and	x1, x2, #0xfffffffffffffff8
    4000e4d8:	f90047e1 	str	x1, [sp, #136]
    4000e4dc:	17fffa44 	b	4000cdec <_svfprintf_r+0x50c>
    4000e4e0:	b940bbe1 	ldr	w1, [sp, #184]
    4000e4e4:	0b000037 	add	w23, w1, w0
    4000e4e8:	b9409fe0 	ldr	w0, [sp, #156]
    4000e4ec:	7100001f 	cmp	w0, #0x0
    4000e4f0:	540020ad 	b.le	4000e904 <_svfprintf_r+0x2024>
    4000e4f4:	710002ff 	cmp	w23, #0x0
    4000e4f8:	52800cfb 	mov	w27, #0x67                  	// #103
    4000e4fc:	1a9fa2f3 	csel	w19, w23, wzr, ge  // ge = tcont
    4000e500:	17ffff06 	b	4000e118 <_svfprintf_r+0x1838>
    4000e504:	b9409be0 	ldr	w0, [sp, #152]
    4000e508:	11002001 	add	w1, w0, #0x8
    4000e50c:	7100003f 	cmp	w1, #0x0
    4000e510:	54001d0d 	b.le	4000e8b0 <_svfprintf_r+0x1fd0>
    4000e514:	f94047e0 	ldr	x0, [sp, #136]
    4000e518:	b9009be1 	str	w1, [sp, #152]
    4000e51c:	91002c02 	add	x2, x0, #0xb
    4000e520:	927df041 	and	x1, x2, #0xfffffffffffffff8
    4000e524:	f90047e1 	str	x1, [sp, #136]
    4000e528:	17fffe8f 	b	4000df64 <_svfprintf_r+0x1684>
    4000e52c:	b9409be0 	ldr	w0, [sp, #152]
    4000e530:	11002001 	add	w1, w0, #0x8
    4000e534:	7100003f 	cmp	w1, #0x0
    4000e538:	54001fcd 	b.le	4000e930 <_svfprintf_r+0x2050>
    4000e53c:	f94047e0 	ldr	x0, [sp, #136]
    4000e540:	b9009be1 	str	w1, [sp, #152]
    4000e544:	91002c02 	add	x2, x0, #0xb
    4000e548:	927df041 	and	x1, x2, #0xfffffffffffffff8
    4000e54c:	f90047e1 	str	x1, [sp, #136]
    4000e550:	17fffd5b 	b	4000dabc <_svfprintf_r+0x11dc>
    4000e554:	321c035a 	orr	w26, w26, #0x10
    4000e558:	3903ffe2 	strb	w2, [sp, #255]
    4000e55c:	17fffa32 	b	4000ce24 <_svfprintf_r+0x544>
    4000e560:	3903ffe2 	strb	w2, [sp, #255]
    4000e564:	17fff936 	b	4000ca3c <_svfprintf_r+0x15c>
    4000e568:	b9409be0 	ldr	w0, [sp, #152]
    4000e56c:	11002001 	add	w1, w0, #0x8
    4000e570:	7100003f 	cmp	w1, #0x0
    4000e574:	54001a8d 	b.le	4000e8c4 <_svfprintf_r+0x1fe4>
    4000e578:	f94047e0 	ldr	x0, [sp, #136]
    4000e57c:	b9009be1 	str	w1, [sp, #152]
    4000e580:	91002c02 	add	x2, x0, #0xb
    4000e584:	927df041 	and	x1, x2, #0xfffffffffffffff8
    4000e588:	f90047e1 	str	x1, [sp, #136]
    4000e58c:	17fffe97 	b	4000dfe8 <_svfprintf_r+0x1708>
    4000e590:	b9409be0 	ldr	w0, [sp, #152]
    4000e594:	11002001 	add	w1, w0, #0x8
    4000e598:	7100003f 	cmp	w1, #0x0
    4000e59c:	54001e8d 	b.le	4000e96c <_svfprintf_r+0x208c>
    4000e5a0:	f94047e0 	ldr	x0, [sp, #136]
    4000e5a4:	b9009be1 	str	w1, [sp, #152]
    4000e5a8:	91002c02 	add	x2, x0, #0xb
    4000e5ac:	927df041 	and	x1, x2, #0xfffffffffffffff8
    4000e5b0:	79400000 	ldrh	w0, [x0]
    4000e5b4:	f90047e1 	str	x1, [sp, #136]
    4000e5b8:	17fffa78 	b	4000cf98 <_svfprintf_r+0x6b8>
    4000e5bc:	b9409be0 	ldr	w0, [sp, #152]
    4000e5c0:	11002001 	add	w1, w0, #0x8
    4000e5c4:	7100003f 	cmp	w1, #0x0
    4000e5c8:	5400192d 	b.le	4000e8ec <_svfprintf_r+0x200c>
    4000e5cc:	f94047e0 	ldr	x0, [sp, #136]
    4000e5d0:	b9009be1 	str	w1, [sp, #152]
    4000e5d4:	91002c02 	add	x2, x0, #0xb
    4000e5d8:	927df041 	and	x1, x2, #0xfffffffffffffff8
    4000e5dc:	b9400000 	ldr	w0, [x0]
    4000e5e0:	f90047e1 	str	x1, [sp, #136]
    4000e5e4:	17fffa6d 	b	4000cf98 <_svfprintf_r+0x6b8>
    4000e5e8:	f94077e2 	ldr	x2, [sp, #232]
    4000e5ec:	b940d7e0 	ldr	w0, [sp, #212]
    4000e5f0:	b900d7e1 	str	w1, [sp, #212]
    4000e5f4:	8b20c040 	add	x0, x2, w0, sxtw
    4000e5f8:	17fff9ba 	b	4000cce0 <_svfprintf_r+0x400>
    4000e5fc:	f94077e2 	ldr	x2, [sp, #232]
    4000e600:	b940d7e0 	ldr	w0, [sp, #212]
    4000e604:	b900d7e1 	str	w1, [sp, #212]
    4000e608:	8b20c040 	add	x0, x2, w0, sxtw
    4000e60c:	fd400008 	ldr	d8, [x0]
    4000e610:	17fff9bb 	b	4000ccfc <_svfprintf_r+0x41c>
    4000e614:	52800020 	mov	w0, #0x1                   	// #1
    4000e618:	528005a1 	mov	w1, #0x2d                  	// #45
    4000e61c:	4b020000 	sub	w0, w0, w2
    4000e620:	17fffed7 	b	4000e17c <_svfprintf_r+0x189c>
    4000e624:	350017c0 	cbnz	w0, 4000e91c <_svfprintf_r+0x203c>
    4000e628:	52800033 	mov	w19, #0x1                   	// #1
    4000e62c:	2a1303f7 	mov	w23, w19
    4000e630:	17fffeba 	b	4000e118 <_svfprintf_r+0x1838>
    4000e634:	3943ffe3 	ldrb	w3, [sp, #255]
    4000e638:	52800007 	mov	w7, #0x0                   	// #0
    4000e63c:	35ff2823 	cbnz	w3, 4000cb40 <_svfprintf_r+0x260>
    4000e640:	17fff941 	b	4000cb44 <_svfprintf_r+0x264>
    4000e644:	910483e2 	add	x2, sp, #0x120
    4000e648:	aa1803e1 	mov	x1, x24
    4000e64c:	aa1903e0 	mov	x0, x25
    4000e650:	94000d98 	bl	40011cb0 <__ssprint_r>
    4000e654:	35ff3180 	cbnz	w0, 4000cc84 <_svfprintf_r+0x3a4>
    4000e658:	b940abe1 	ldr	w1, [sp, #168]
    4000e65c:	aa1503e6 	mov	x6, x21
    4000e660:	b9410bf7 	ldr	w23, [sp, #264]
    4000e664:	f9409be0 	ldr	x0, [sp, #304]
    4000e668:	4b170037 	sub	w23, w1, w23
    4000e66c:	17fffc91 	b	4000d8b0 <_svfprintf_r+0xfd0>
    4000e670:	910040c6 	add	x6, x6, #0x10
    4000e674:	17fffdd1 	b	4000ddb8 <_svfprintf_r+0x14d8>
    4000e678:	f94067e2 	ldr	x2, [sp, #200]
    4000e67c:	b9409be0 	ldr	w0, [sp, #152]
    4000e680:	b9009be1 	str	w1, [sp, #152]
    4000e684:	8b20c040 	add	x0, x2, w0, sxtw
    4000e688:	17fffa90 	b	4000d0c8 <_svfprintf_r+0x7e8>
    4000e68c:	3943ffe3 	ldrb	w3, [sp, #255]
    4000e690:	2a0703f7 	mov	w23, w7
    4000e694:	b9007bfa 	str	w26, [sp, #120]
    4000e698:	f90047f3 	str	x19, [sp, #136]
    4000e69c:	2a0703f3 	mov	w19, w7
    4000e6a0:	b9009fff 	str	wzr, [sp, #156]
    4000e6a4:	52800007 	mov	w7, #0x0                   	// #0
    4000e6a8:	35ff24c3 	cbnz	w3, 4000cb40 <_svfprintf_r+0x260>
    4000e6ac:	17fff926 	b	4000cb44 <_svfprintf_r+0x264>
    4000e6b0:	7101167f 	cmp	w19, #0x45
    4000e6b4:	54001be1 	b.ne	4000ea30 <_svfprintf_r+0x2150>  // b.any
    4000e6b8:	110004f7 	add	w23, w7, #0x1
    4000e6bc:	910463e5 	add	x5, sp, #0x118
    4000e6c0:	2a1703e2 	mov	w2, w23
    4000e6c4:	910433e4 	add	x4, sp, #0x10c
    4000e6c8:	910423e3 	add	x3, sp, #0x108
    4000e6cc:	aa1903e0 	mov	x0, x25
    4000e6d0:	52800041 	mov	w1, #0x2                   	// #2
    4000e6d4:	b90093e7 	str	w7, [sp, #144]
    4000e6d8:	97ffe7ca 	bl	40008600 <_dtoa_r>
    4000e6dc:	aa0003f6 	mov	x22, x0
    4000e6e0:	b94093e7 	ldr	w7, [sp, #144]
    4000e6e4:	b9409fea 	ldr	w10, [sp, #156]
    4000e6e8:	f94057e6 	ldr	x6, [sp, #168]
    4000e6ec:	8b37c2c1 	add	x1, x22, w23, sxtw
    4000e6f0:	17fffe6d 	b	4000e0a4 <_svfprintf_r+0x17c4>
    4000e6f4:	3903ffe2 	strb	w2, [sp, #255]
    4000e6f8:	17fffa62 	b	4000d080 <_svfprintf_r+0x7a0>
    4000e6fc:	3903ffe2 	strb	w2, [sp, #255]
    4000e700:	17fffa89 	b	4000d124 <_svfprintf_r+0x844>
    4000e704:	3903ffe2 	strb	w2, [sp, #255]
    4000e708:	17fff96e 	b	4000ccc0 <_svfprintf_r+0x3e0>
    4000e70c:	3903ffe2 	strb	w2, [sp, #255]
    4000e710:	17fff9c5 	b	4000ce24 <_svfprintf_r+0x544>
    4000e714:	b00000a3 	adrp	x3, 40023000 <fpi.1>
    4000e718:	4b0203f7 	neg	w23, w2
    4000e71c:	9101a063 	add	x3, x3, #0x68
    4000e720:	3100405f 	cmn	w2, #0x10
    4000e724:	540003aa 	b.ge	4000e798 <_svfprintf_r+0x1eb8>  // b.tcont
    4000e728:	2a0103e2 	mov	w2, w1
    4000e72c:	aa0303fb 	mov	x27, x3
    4000e730:	d280021a 	mov	x26, #0x10                  	// #16
    4000e734:	14000004 	b	4000e744 <_svfprintf_r+0x1e64>
    4000e738:	510042f7 	sub	w23, w23, #0x10
    4000e73c:	710042ff 	cmp	w23, #0x10
    4000e740:	5400028d 	b.le	4000e790 <_svfprintf_r+0x1eb0>
    4000e744:	91004000 	add	x0, x0, #0x10
    4000e748:	11000442 	add	w2, w2, #0x1
    4000e74c:	a90068db 	stp	x27, x26, [x6]
    4000e750:	910040c6 	add	x6, x6, #0x10
    4000e754:	b9012be2 	str	w2, [sp, #296]
    4000e758:	f9009be0 	str	x0, [sp, #304]
    4000e75c:	71001c5f 	cmp	w2, #0x7
    4000e760:	54fffecd 	b.le	4000e738 <_svfprintf_r+0x1e58>
    4000e764:	910483e2 	add	x2, sp, #0x120
    4000e768:	aa1803e1 	mov	x1, x24
    4000e76c:	aa1903e0 	mov	x0, x25
    4000e770:	94000d50 	bl	40011cb0 <__ssprint_r>
    4000e774:	35ff2880 	cbnz	w0, 4000cc84 <_svfprintf_r+0x3a4>
    4000e778:	b9412be2 	ldr	w2, [sp, #296]
    4000e77c:	aa1503e6 	mov	x6, x21
    4000e780:	f9409be0 	ldr	x0, [sp, #304]
    4000e784:	17ffffed 	b	4000e738 <_svfprintf_r+0x1e58>
    4000e788:	3903ffe2 	strb	w2, [sp, #255]
    4000e78c:	17fff9f7 	b	4000cf68 <_svfprintf_r+0x688>
    4000e790:	2a0203e1 	mov	w1, w2
    4000e794:	aa1b03e3 	mov	x3, x27
    4000e798:	93407ef7 	sxtw	x23, w23
    4000e79c:	11000421 	add	w1, w1, #0x1
    4000e7a0:	8b170000 	add	x0, x0, x23
    4000e7a4:	a9005cc3 	stp	x3, x23, [x6]
    4000e7a8:	b9012be1 	str	w1, [sp, #296]
    4000e7ac:	f9009be0 	str	x0, [sp, #304]
    4000e7b0:	71001c3f 	cmp	w1, #0x7
    4000e7b4:	54fff5ed 	b.le	4000e670 <_svfprintf_r+0x1d90>
    4000e7b8:	910483e2 	add	x2, sp, #0x120
    4000e7bc:	aa1803e1 	mov	x1, x24
    4000e7c0:	aa1903e0 	mov	x0, x25
    4000e7c4:	94000d3b 	bl	40011cb0 <__ssprint_r>
    4000e7c8:	35ff25e0 	cbnz	w0, 4000cc84 <_svfprintf_r+0x3a4>
    4000e7cc:	b9412be1 	ldr	w1, [sp, #296]
    4000e7d0:	aa1503e6 	mov	x6, x21
    4000e7d4:	f9409be0 	ldr	x0, [sp, #304]
    4000e7d8:	17fffd78 	b	4000ddb8 <_svfprintf_r+0x14d8>
    4000e7dc:	1100c000 	add	w0, w0, #0x30
    4000e7e0:	39044fe0 	strb	w0, [sp, #275]
    4000e7e4:	52800600 	mov	w0, #0x30                  	// #48
    4000e7e8:	39044be0 	strb	w0, [sp, #274]
    4000e7ec:	52800080 	mov	w0, #0x4                   	// #4
    4000e7f0:	b900d3e0 	str	w0, [sp, #208]
    4000e7f4:	17fffe8c 	b	4000e224 <_svfprintf_r+0x1944>
    4000e7f8:	b9409fe0 	ldr	w0, [sp, #156]
    4000e7fc:	52800cfb 	mov	w27, #0x67                  	// #103
    4000e800:	b940bbe1 	ldr	w1, [sp, #184]
    4000e804:	2b010017 	adds	w23, w0, w1
    4000e808:	1a9f52f3 	csel	w19, w23, wzr, pl  // pl = nfrst
    4000e80c:	17fffe43 	b	4000e118 <_svfprintf_r+0x1838>
    4000e810:	b9409be0 	ldr	w0, [sp, #152]
    4000e814:	11002001 	add	w1, w0, #0x8
    4000e818:	7100003f 	cmp	w1, #0x0
    4000e81c:	54000dcd 	b.le	4000e9d4 <_svfprintf_r+0x20f4>
    4000e820:	f94047e0 	ldr	x0, [sp, #136]
    4000e824:	b9009be1 	str	w1, [sp, #152]
    4000e828:	91003c02 	add	x2, x0, #0xf
    4000e82c:	927df041 	and	x1, x2, #0xfffffffffffffff8
    4000e830:	f90047e1 	str	x1, [sp, #136]
    4000e834:	17fffa1c 	b	4000d0a4 <_svfprintf_r+0x7c4>
    4000e838:	9e660100 	fmov	x0, d8
    4000e83c:	b7f80ac0 	tbnz	x0, #63, 4000e994 <_svfprintf_r+0x20b4>
    4000e840:	3943ffe3 	ldrb	w3, [sp, #255]
    4000e844:	900000a0 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    4000e848:	900000a4 	adrp	x4, 40022000 <__pow_log_data+0xcc8>
    4000e84c:	7101237f 	cmp	w27, #0x48
    4000e850:	91346000 	add	x0, x0, #0xd18
    4000e854:	91344084 	add	x4, x4, #0xd10
    4000e858:	17fff936 	b	4000cd30 <_svfprintf_r+0x450>
    4000e85c:	b9409be0 	ldr	w0, [sp, #152]
    4000e860:	11002001 	add	w1, w0, #0x8
    4000e864:	7100003f 	cmp	w1, #0x0
    4000e868:	54000c0d 	b.le	4000e9e8 <_svfprintf_r+0x2108>
    4000e86c:	f94047e0 	ldr	x0, [sp, #136]
    4000e870:	b9009be1 	str	w1, [sp, #152]
    4000e874:	91003c02 	add	x2, x0, #0xf
    4000e878:	927df041 	and	x1, x2, #0xfffffffffffffff8
    4000e87c:	f90047e1 	str	x1, [sp, #136]
    4000e880:	17fffef6 	b	4000e458 <_svfprintf_r+0x1b78>
    4000e884:	12000340 	and	w0, w26, #0x1
    4000e888:	b9009fe0 	str	w0, [sp, #156]
    4000e88c:	3707cd7a 	tbnz	w26, #0, 4000e238 <_svfprintf_r+0x1958>
    4000e890:	710002ff 	cmp	w23, #0x0
    4000e894:	1a9fa2f3 	csel	w19, w23, wzr, ge  // ge = tcont
    4000e898:	17fffe20 	b	4000e118 <_svfprintf_r+0x1838>
    4000e89c:	b940bbe0 	ldr	w0, [sp, #184]
    4000e8a0:	0b000037 	add	w23, w1, w0
    4000e8a4:	2b0702f7 	adds	w23, w23, w7
    4000e8a8:	1a9f52f3 	csel	w19, w23, wzr, pl  // pl = nfrst
    4000e8ac:	17fffe1b 	b	4000e118 <_svfprintf_r+0x1838>
    4000e8b0:	f94067e2 	ldr	x2, [sp, #200]
    4000e8b4:	b9409be0 	ldr	w0, [sp, #152]
    4000e8b8:	b9009be1 	str	w1, [sp, #152]
    4000e8bc:	8b20c040 	add	x0, x2, w0, sxtw
    4000e8c0:	17fffda9 	b	4000df64 <_svfprintf_r+0x1684>
    4000e8c4:	f94067e2 	ldr	x2, [sp, #200]
    4000e8c8:	b9409be0 	ldr	w0, [sp, #152]
    4000e8cc:	b9009be1 	str	w1, [sp, #152]
    4000e8d0:	8b20c040 	add	x0, x2, w0, sxtw
    4000e8d4:	17fffdc5 	b	4000dfe8 <_svfprintf_r+0x1708>
    4000e8d8:	f94067e2 	ldr	x2, [sp, #200]
    4000e8dc:	b9409be0 	ldr	w0, [sp, #152]
    4000e8e0:	b9009be1 	str	w1, [sp, #152]
    4000e8e4:	8b20c040 	add	x0, x2, w0, sxtw
    4000e8e8:	17fff941 	b	4000cdec <_svfprintf_r+0x50c>
    4000e8ec:	f94067e2 	ldr	x2, [sp, #200]
    4000e8f0:	b9409be0 	ldr	w0, [sp, #152]
    4000e8f4:	b9009be1 	str	w1, [sp, #152]
    4000e8f8:	8b20c040 	add	x0, x2, w0, sxtw
    4000e8fc:	b9400000 	ldr	w0, [x0]
    4000e900:	17fff9a6 	b	4000cf98 <_svfprintf_r+0x6b8>
    4000e904:	b9409fe0 	ldr	w0, [sp, #156]
    4000e908:	52800cfb 	mov	w27, #0x67                  	// #103
    4000e90c:	4b0002f7 	sub	w23, w23, w0
    4000e910:	310006f7 	adds	w23, w23, #0x1
    4000e914:	1a9f52f3 	csel	w19, w23, wzr, pl  // pl = nfrst
    4000e918:	17fffe00 	b	4000e118 <_svfprintf_r+0x1838>
    4000e91c:	b940bbe0 	ldr	w0, [sp, #184]
    4000e920:	11000417 	add	w23, w0, #0x1
    4000e924:	2b0702f7 	adds	w23, w23, w7
    4000e928:	1a9f52f3 	csel	w19, w23, wzr, pl  // pl = nfrst
    4000e92c:	17fffdfb 	b	4000e118 <_svfprintf_r+0x1838>
    4000e930:	f94067e2 	ldr	x2, [sp, #200]
    4000e934:	b9409be0 	ldr	w0, [sp, #152]
    4000e938:	b9009be1 	str	w1, [sp, #152]
    4000e93c:	8b20c040 	add	x0, x2, w0, sxtw
    4000e940:	17fffc5f 	b	4000dabc <_svfprintf_r+0x11dc>
    4000e944:	f94067e2 	ldr	x2, [sp, #200]
    4000e948:	b9409be0 	ldr	w0, [sp, #152]
    4000e94c:	b9009be1 	str	w1, [sp, #152]
    4000e950:	8b20c040 	add	x0, x2, w0, sxtw
    4000e954:	17fffd9d 	b	4000dfc8 <_svfprintf_r+0x16e8>
    4000e958:	f94067e2 	ldr	x2, [sp, #200]
    4000e95c:	b9409be0 	ldr	w0, [sp, #152]
    4000e960:	b9009be1 	str	w1, [sp, #152]
    4000e964:	8b20c040 	add	x0, x2, w0, sxtw
    4000e968:	17fff92b 	b	4000ce14 <_svfprintf_r+0x534>
    4000e96c:	f94067e2 	ldr	x2, [sp, #200]
    4000e970:	b9409be0 	ldr	w0, [sp, #152]
    4000e974:	b9009be1 	str	w1, [sp, #152]
    4000e978:	8b20c040 	add	x0, x2, w0, sxtw
    4000e97c:	79400000 	ldrh	w0, [x0]
    4000e980:	17fff986 	b	4000cf98 <_svfprintf_r+0x6b8>
    4000e984:	52800020 	mov	w0, #0x1                   	// #1
    4000e988:	4b070000 	sub	w0, w0, w7
    4000e98c:	b9010be0 	str	w0, [sp, #264]
    4000e990:	17fffdc3 	b	4000e09c <_svfprintf_r+0x17bc>
    4000e994:	528005a0 	mov	w0, #0x2d                  	// #45
    4000e998:	528005a3 	mov	w3, #0x2d                  	// #45
    4000e99c:	3903ffe0 	strb	w0, [sp, #255]
    4000e9a0:	17ffffa9 	b	4000e844 <_svfprintf_r+0x1f64>
    4000e9a4:	b9409be0 	ldr	w0, [sp, #152]
    4000e9a8:	37f80300 	tbnz	w0, #31, 4000ea08 <_svfprintf_r+0x2128>
    4000e9ac:	f94047e0 	ldr	x0, [sp, #136]
    4000e9b0:	91002c05 	add	x5, x0, #0xb
    4000e9b4:	927df0a5 	and	x5, x5, #0xfffffffffffffff8
    4000e9b8:	f90047e5 	str	x5, [sp, #136]
    4000e9bc:	b9400007 	ldr	w7, [x0]
    4000e9c0:	39400789 	ldrb	w9, [x28, #1]
    4000e9c4:	aa0403fc 	mov	x28, x4
    4000e9c8:	710000ff 	cmp	w7, #0x0
    4000e9cc:	1a83a0e7 	csel	w7, w7, w3, ge  // ge = tcont
    4000e9d0:	17fff815 	b	4000ca24 <_svfprintf_r+0x144>
    4000e9d4:	f94067e2 	ldr	x2, [sp, #200]
    4000e9d8:	b9409be0 	ldr	w0, [sp, #152]
    4000e9dc:	b9009be1 	str	w1, [sp, #152]
    4000e9e0:	8b20c040 	add	x0, x2, w0, sxtw
    4000e9e4:	17fff9b0 	b	4000d0a4 <_svfprintf_r+0x7c4>
    4000e9e8:	f94067e2 	ldr	x2, [sp, #200]
    4000e9ec:	b9409be0 	ldr	w0, [sp, #152]
    4000e9f0:	b9009be1 	str	w1, [sp, #152]
    4000e9f4:	8b20c040 	add	x0, x2, w0, sxtw
    4000e9f8:	17fffe98 	b	4000e458 <_svfprintf_r+0x1b78>
    4000e9fc:	52800040 	mov	w0, #0x2                   	// #2
    4000ea00:	b900d3e0 	str	w0, [sp, #208]
    4000ea04:	17fffe08 	b	4000e224 <_svfprintf_r+0x1944>
    4000ea08:	b9409be0 	ldr	w0, [sp, #152]
    4000ea0c:	11002005 	add	w5, w0, #0x8
    4000ea10:	710000bf 	cmp	w5, #0x0
    4000ea14:	540003ad 	b.le	4000ea88 <_svfprintf_r+0x21a8>
    4000ea18:	f94047e0 	ldr	x0, [sp, #136]
    4000ea1c:	b9009be5 	str	w5, [sp, #152]
    4000ea20:	91002c07 	add	x7, x0, #0xb
    4000ea24:	927df0e5 	and	x5, x7, #0xfffffffffffffff8
    4000ea28:	f90047e5 	str	x5, [sp, #136]
    4000ea2c:	17ffffe4 	b	4000e9bc <_svfprintf_r+0x20dc>
    4000ea30:	2a0703e2 	mov	w2, w7
    4000ea34:	910463e5 	add	x5, sp, #0x118
    4000ea38:	910433e4 	add	x4, sp, #0x10c
    4000ea3c:	910423e3 	add	x3, sp, #0x108
    4000ea40:	aa1903e0 	mov	x0, x25
    4000ea44:	52800041 	mov	w1, #0x2                   	// #2
    4000ea48:	b90093e7 	str	w7, [sp, #144]
    4000ea4c:	97ffe6ed 	bl	40008600 <_dtoa_r>
    4000ea50:	b94093e7 	ldr	w7, [sp, #144]
    4000ea54:	aa0003f6 	mov	x22, x0
    4000ea58:	b9409fea 	ldr	w10, [sp, #156]
    4000ea5c:	71011e7f 	cmp	w19, #0x47
    4000ea60:	2a0703f7 	mov	w23, w7
    4000ea64:	f94057e6 	ldr	x6, [sp, #168]
    4000ea68:	54ffe421 	b.ne	4000e6ec <_svfprintf_r+0x1e0c>  // b.any
    4000ea6c:	2a0703e1 	mov	w1, w7
    4000ea70:	17fffcf7 	b	4000de4c <_svfprintf_r+0x156c>
    4000ea74:	52800180 	mov	w0, #0xc                   	// #12
    4000ea78:	12800001 	mov	w1, #0xffffffff            	// #-1
    4000ea7c:	b9000320 	str	w0, [x25]
    4000ea80:	b90087e1 	str	w1, [sp, #132]
    4000ea84:	17fff888 	b	4000cca4 <_svfprintf_r+0x3c4>
    4000ea88:	f94067e7 	ldr	x7, [sp, #200]
    4000ea8c:	b9409be0 	ldr	w0, [sp, #152]
    4000ea90:	b9009be5 	str	w5, [sp, #152]
    4000ea94:	8b20c0e0 	add	x0, x7, w0, sxtw
    4000ea98:	17ffffc9 	b	4000e9bc <_svfprintf_r+0x20dc>
    4000ea9c:	00000000 	udf	#0

000000004000eaa0 <__submore>:
    4000eaa0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    4000eaa4:	9101d022 	add	x2, x1, #0x74
    4000eaa8:	910003fd 	mov	x29, sp
    4000eaac:	a90153f3 	stp	x19, x20, [sp, #16]
    4000eab0:	aa0103f3 	mov	x19, x1
    4000eab4:	f9402c21 	ldr	x1, [x1, #88]
    4000eab8:	eb02003f 	cmp	x1, x2
    4000eabc:	540002a0 	b.eq	4000eb10 <__submore+0x70>  // b.none
    4000eac0:	a9025bf5 	stp	x21, x22, [sp, #32]
    4000eac4:	b9406275 	ldr	w21, [x19, #96]
    4000eac8:	531f7ab6 	lsl	w22, w21, #1
    4000eacc:	93407ec2 	sxtw	x2, w22
    4000ead0:	94000b24 	bl	40011760 <_realloc_r>
    4000ead4:	aa0003f4 	mov	x20, x0
    4000ead8:	b4000420 	cbz	x0, 4000eb5c <__submore+0xbc>
    4000eadc:	93407ea2 	sxtw	x2, w21
    4000eae0:	aa0003e1 	mov	x1, x0
    4000eae4:	8b020015 	add	x21, x0, x2
    4000eae8:	aa1503e0 	mov	x0, x21
    4000eaec:	97ffc935 	bl	40000fc0 <memcpy>
    4000eaf0:	f9000275 	str	x21, [x19]
    4000eaf4:	52800000 	mov	w0, #0x0                   	// #0
    4000eaf8:	b9006276 	str	w22, [x19, #96]
    4000eafc:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4000eb00:	f9002e74 	str	x20, [x19, #88]
    4000eb04:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000eb08:	a8c37bfd 	ldp	x29, x30, [sp], #48
    4000eb0c:	d65f03c0 	ret
    4000eb10:	d2808001 	mov	x1, #0x400                 	// #1024
    4000eb14:	97ffd323 	bl	400037a0 <_malloc_r>
    4000eb18:	aa0003e1 	mov	x1, x0
    4000eb1c:	b4000220 	cbz	x0, 4000eb60 <__submore+0xc0>
    4000eb20:	3941da63 	ldrb	w3, [x19, #118]
    4000eb24:	52808000 	mov	w0, #0x400                 	// #1024
    4000eb28:	f9002e61 	str	x1, [x19, #88]
    4000eb2c:	910ff422 	add	x2, x1, #0x3fd
    4000eb30:	b9006260 	str	w0, [x19, #96]
    4000eb34:	52800000 	mov	w0, #0x0                   	// #0
    4000eb38:	390ffc23 	strb	w3, [x1, #1023]
    4000eb3c:	3941d663 	ldrb	w3, [x19, #117]
    4000eb40:	390ff823 	strb	w3, [x1, #1022]
    4000eb44:	3941d263 	ldrb	w3, [x19, #116]
    4000eb48:	390ff423 	strb	w3, [x1, #1021]
    4000eb4c:	f9000262 	str	x2, [x19]
    4000eb50:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000eb54:	a8c37bfd 	ldp	x29, x30, [sp], #48
    4000eb58:	d65f03c0 	ret
    4000eb5c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4000eb60:	12800000 	mov	w0, #0xffffffff            	// #-1
    4000eb64:	17ffffe8 	b	4000eb04 <__submore+0x64>
	...

000000004000eb70 <_ungetc_r>:
    4000eb70:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    4000eb74:	910003fd 	mov	x29, sp
    4000eb78:	a90153f3 	stp	x19, x20, [sp, #16]
    4000eb7c:	3100043f 	cmn	w1, #0x1
    4000eb80:	540009e0 	b.eq	4000ecbc <_ungetc_r+0x14c>  // b.none
    4000eb84:	a9025bf5 	stp	x21, x22, [sp, #32]
    4000eb88:	2a0103f4 	mov	w20, w1
    4000eb8c:	aa0203f3 	mov	x19, x2
    4000eb90:	aa0003f5 	mov	x21, x0
    4000eb94:	b4000060 	cbz	x0, 4000eba0 <_ungetc_r+0x30>
    4000eb98:	b9405001 	ldr	w1, [x0, #80]
    4000eb9c:	34000941 	cbz	w1, 4000ecc4 <_ungetc_r+0x154>
    4000eba0:	b940b260 	ldr	w0, [x19, #176]
    4000eba4:	79c02262 	ldrsh	w2, [x19, #16]
    4000eba8:	37000040 	tbnz	w0, #0, 4000ebb0 <_ungetc_r+0x40>
    4000ebac:	36480962 	tbz	w2, #9, 4000ecd8 <_ungetc_r+0x168>
    4000ebb0:	121a7842 	and	w2, w2, #0xffffffdf
    4000ebb4:	79002262 	strh	w2, [x19, #16]
    4000ebb8:	12003c40 	and	w0, w2, #0xffff
    4000ebbc:	371000a2 	tbnz	w2, #2, 4000ebd0 <_ungetc_r+0x60>
    4000ebc0:	36200ca0 	tbz	w0, #4, 4000ed54 <_ungetc_r+0x1e4>
    4000ebc4:	37180ac0 	tbnz	w0, #3, 4000ed1c <_ungetc_r+0x1ac>
    4000ebc8:	321e0042 	orr	w2, w2, #0x4
    4000ebcc:	79002262 	strh	w2, [x19, #16]
    4000ebd0:	f9402e61 	ldr	x1, [x19, #88]
    4000ebd4:	12001e96 	and	w22, w20, #0xff
    4000ebd8:	b9400a60 	ldr	w0, [x19, #8]
    4000ebdc:	12001e94 	and	w20, w20, #0xff
    4000ebe0:	b4000241 	cbz	x1, 4000ec28 <_ungetc_r+0xb8>
    4000ebe4:	b9406261 	ldr	w1, [x19, #96]
    4000ebe8:	6b00003f 	cmp	w1, w0
    4000ebec:	5400056d 	b.le	4000ec98 <_ungetc_r+0x128>
    4000ebf0:	f9400260 	ldr	x0, [x19]
    4000ebf4:	d1000401 	sub	x1, x0, #0x1
    4000ebf8:	f9000261 	str	x1, [x19]
    4000ebfc:	381ff016 	sturb	w22, [x0, #-1]
    4000ec00:	b9400a60 	ldr	w0, [x19, #8]
    4000ec04:	b940b261 	ldr	w1, [x19, #176]
    4000ec08:	11000400 	add	w0, w0, #0x1
    4000ec0c:	b9000a60 	str	w0, [x19, #8]
    4000ec10:	36000321 	tbz	w1, #0, 4000ec74 <_ungetc_r+0x104>
    4000ec14:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4000ec18:	2a1403e0 	mov	w0, w20
    4000ec1c:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000ec20:	a8c37bfd 	ldp	x29, x30, [sp], #48
    4000ec24:	d65f03c0 	ret
    4000ec28:	f9400e62 	ldr	x2, [x19, #24]
    4000ec2c:	b940b261 	ldr	w1, [x19, #176]
    4000ec30:	f9400263 	ldr	x3, [x19]
    4000ec34:	12000021 	and	w1, w1, #0x1
    4000ec38:	b4000062 	cbz	x2, 4000ec44 <_ungetc_r+0xd4>
    4000ec3c:	eb03005f 	cmp	x2, x3
    4000ec40:	540005c3 	b.cc	4000ecf8 <_ungetc_r+0x188>  // b.lo, b.ul, b.last
    4000ec44:	aa1303e2 	mov	x2, x19
    4000ec48:	52800064 	mov	w4, #0x3                   	// #3
    4000ec4c:	9101d265 	add	x5, x19, #0x74
    4000ec50:	f9002e65 	str	x5, [x19, #88]
    4000ec54:	b9006264 	str	w4, [x19, #96]
    4000ec58:	52800024 	mov	w4, #0x1                   	// #1
    4000ec5c:	f9003663 	str	x3, [x19, #104]
    4000ec60:	b9007260 	str	w0, [x19, #112]
    4000ec64:	38076c56 	strb	w22, [x2, #118]!
    4000ec68:	b9000a64 	str	w4, [x19, #8]
    4000ec6c:	f9000262 	str	x2, [x19]
    4000ec70:	35fffd21 	cbnz	w1, 4000ec14 <_ungetc_r+0xa4>
    4000ec74:	79402260 	ldrh	w0, [x19, #16]
    4000ec78:	374ffce0 	tbnz	w0, #9, 4000ec14 <_ungetc_r+0xa4>
    4000ec7c:	f9405260 	ldr	x0, [x19, #160]
    4000ec80:	94003bb8 	bl	4001db60 <__retarget_lock_release_recursive>
    4000ec84:	2a1403e0 	mov	w0, w20
    4000ec88:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000ec8c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4000ec90:	a8c37bfd 	ldp	x29, x30, [sp], #48
    4000ec94:	d65f03c0 	ret
    4000ec98:	aa1503e0 	mov	x0, x21
    4000ec9c:	aa1303e1 	mov	x1, x19
    4000eca0:	97ffff80 	bl	4000eaa0 <__submore>
    4000eca4:	34fffa60 	cbz	w0, 4000ebf0 <_ungetc_r+0x80>
    4000eca8:	b940b260 	ldr	w0, [x19, #176]
    4000ecac:	37000060 	tbnz	w0, #0, 4000ecb8 <_ungetc_r+0x148>
    4000ecb0:	79402260 	ldrh	w0, [x19, #16]
    4000ecb4:	36480460 	tbz	w0, #9, 4000ed40 <_ungetc_r+0x1d0>
    4000ecb8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4000ecbc:	12800014 	mov	w20, #0xffffffff            	// #-1
    4000ecc0:	17ffffd6 	b	4000ec18 <_ungetc_r+0xa8>
    4000ecc4:	97ffcef3 	bl	40002890 <__sinit>
    4000ecc8:	b940b260 	ldr	w0, [x19, #176]
    4000eccc:	79c02262 	ldrsh	w2, [x19, #16]
    4000ecd0:	3707f700 	tbnz	w0, #0, 4000ebb0 <_ungetc_r+0x40>
    4000ecd4:	17ffffb6 	b	4000ebac <_ungetc_r+0x3c>
    4000ecd8:	f9405260 	ldr	x0, [x19, #160]
    4000ecdc:	94003b9f 	bl	4001db58 <__retarget_lock_acquire_recursive>
    4000ece0:	79c02262 	ldrsh	w2, [x19, #16]
    4000ece4:	121a7842 	and	w2, w2, #0xffffffdf
    4000ece8:	79002262 	strh	w2, [x19, #16]
    4000ecec:	12003c40 	and	w0, w2, #0xffff
    4000ecf0:	3717f702 	tbnz	w2, #2, 4000ebd0 <_ungetc_r+0x60>
    4000ecf4:	17ffffb3 	b	4000ebc0 <_ungetc_r+0x50>
    4000ecf8:	385ff062 	ldurb	w2, [x3, #-1]
    4000ecfc:	6b14005f 	cmp	w2, w20
    4000ed00:	54fffa21 	b.ne	4000ec44 <_ungetc_r+0xd4>  // b.any
    4000ed04:	d1000463 	sub	x3, x3, #0x1
    4000ed08:	11000400 	add	w0, w0, #0x1
    4000ed0c:	f9000263 	str	x3, [x19]
    4000ed10:	b9000a60 	str	w0, [x19, #8]
    4000ed14:	35fff801 	cbnz	w1, 4000ec14 <_ungetc_r+0xa4>
    4000ed18:	17ffffd7 	b	4000ec74 <_ungetc_r+0x104>
    4000ed1c:	aa1303e1 	mov	x1, x19
    4000ed20:	aa1503e0 	mov	x0, x21
    4000ed24:	97ffce4b 	bl	40002650 <_fflush_r>
    4000ed28:	35fffc00 	cbnz	w0, 4000eca8 <_ungetc_r+0x138>
    4000ed2c:	79c02262 	ldrsh	w2, [x19, #16]
    4000ed30:	b9000e7f 	str	wzr, [x19, #12]
    4000ed34:	121c7842 	and	w2, w2, #0xfffffff7
    4000ed38:	b9002a7f 	str	wzr, [x19, #40]
    4000ed3c:	17ffffa3 	b	4000ebc8 <_ungetc_r+0x58>
    4000ed40:	f9405260 	ldr	x0, [x19, #160]
    4000ed44:	12800014 	mov	w20, #0xffffffff            	// #-1
    4000ed48:	94003b86 	bl	4001db60 <__retarget_lock_release_recursive>
    4000ed4c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4000ed50:	17ffffb2 	b	4000ec18 <_ungetc_r+0xa8>
    4000ed54:	b940b261 	ldr	w1, [x19, #176]
    4000ed58:	3707fb01 	tbnz	w1, #0, 4000ecb8 <_ungetc_r+0x148>
    4000ed5c:	374ffae0 	tbnz	w0, #9, 4000ecb8 <_ungetc_r+0x148>
    4000ed60:	17fffff8 	b	4000ed40 <_ungetc_r+0x1d0>
	...

000000004000ed70 <__sprint_r>:
    4000ed70:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    4000ed74:	910003fd 	mov	x29, sp
    4000ed78:	f9400843 	ldr	x3, [x2, #16]
    4000ed7c:	f9000bf3 	str	x19, [sp, #16]
    4000ed80:	aa0203f3 	mov	x19, x2
    4000ed84:	b50000c3 	cbnz	x3, 4000ed9c <__sprint_r+0x2c>
    4000ed88:	52800000 	mov	w0, #0x0                   	// #0
    4000ed8c:	b900085f 	str	wzr, [x2, #8]
    4000ed90:	f9400bf3 	ldr	x19, [sp, #16]
    4000ed94:	a8c27bfd 	ldp	x29, x30, [sp], #32
    4000ed98:	d65f03c0 	ret
    4000ed9c:	94000635 	bl	40010670 <__sfvwrite_r>
    4000eda0:	b9000a7f 	str	wzr, [x19, #8]
    4000eda4:	f9000a7f 	str	xzr, [x19, #16]
    4000eda8:	f9400bf3 	ldr	x19, [sp, #16]
    4000edac:	a8c27bfd 	ldp	x29, x30, [sp], #32
    4000edb0:	d65f03c0 	ret
	...

000000004000edc0 <_vfiprintf_r>:
    4000edc0:	a9a67bfd 	stp	x29, x30, [sp, #-416]!
    4000edc4:	910003fd 	mov	x29, sp
    4000edc8:	a90573fb 	stp	x27, x28, [sp, #80]
    4000edcc:	aa0103fc 	mov	x28, x1
    4000edd0:	f9400061 	ldr	x1, [x3]
    4000edd4:	f90037e1 	str	x1, [sp, #104]
    4000edd8:	f9400461 	ldr	x1, [x3, #8]
    4000eddc:	f90057e1 	str	x1, [sp, #168]
    4000ede0:	b9401861 	ldr	w1, [x3, #24]
    4000ede4:	a90153f3 	stp	x19, x20, [sp, #16]
    4000ede8:	aa0303f3 	mov	x19, x3
    4000edec:	a9025bf5 	stp	x21, x22, [sp, #32]
    4000edf0:	aa0003f5 	mov	x21, x0
    4000edf4:	a9046bf9 	stp	x25, x26, [sp, #64]
    4000edf8:	aa0203fa 	mov	x26, x2
    4000edfc:	b9009be1 	str	w1, [sp, #152]
    4000ee00:	b4000060 	cbz	x0, 4000ee0c <_vfiprintf_r+0x4c>
    4000ee04:	b9405001 	ldr	w1, [x0, #80]
    4000ee08:	34002621 	cbz	w1, 4000f2cc <_vfiprintf_r+0x50c>
    4000ee0c:	b940b381 	ldr	w1, [x28, #176]
    4000ee10:	79402380 	ldrh	w0, [x28, #16]
    4000ee14:	37000041 	tbnz	w1, #0, 4000ee1c <_vfiprintf_r+0x5c>
    4000ee18:	364872e0 	tbz	w0, #9, 4000fc74 <_vfiprintf_r+0xeb4>
    4000ee1c:	36181460 	tbz	w0, #3, 4000f0a8 <_vfiprintf_r+0x2e8>
    4000ee20:	f9400f81 	ldr	x1, [x28, #24]
    4000ee24:	b4001421 	cbz	x1, 4000f0a8 <_vfiprintf_r+0x2e8>
    4000ee28:	52800341 	mov	w1, #0x1a                  	// #26
    4000ee2c:	0a010001 	and	w1, w0, w1
    4000ee30:	7100283f 	cmp	w1, #0xa
    4000ee34:	540014c0 	b.eq	4000f0cc <_vfiprintf_r+0x30c>  // b.none
    4000ee38:	910483fb 	add	x27, sp, #0x120
    4000ee3c:	b00000a0 	adrp	x0, 40023000 <fpi.1>
    4000ee40:	aa1b03e4 	mov	x4, x27
    4000ee44:	9114f000 	add	x0, x0, #0x53c
    4000ee48:	52800016 	mov	w22, #0x0                   	// #0
    4000ee4c:	a90363f7 	stp	x23, x24, [sp, #48]
    4000ee50:	a90803ff 	stp	xzr, x0, [sp, #128]
    4000ee54:	f90073fb 	str	x27, [sp, #224]
    4000ee58:	b900ebff 	str	wzr, [sp, #232]
    4000ee5c:	f9007bff 	str	xzr, [sp, #240]
    4000ee60:	39400340 	ldrb	w0, [x26]
    4000ee64:	aa1a03f3 	mov	x19, x26
    4000ee68:	7100941f 	cmp	w0, #0x25
    4000ee6c:	7a401804 	ccmp	w0, #0x0, #0x4, ne  // ne = any
    4000ee70:	54000340 	b.eq	4000eed8 <_vfiprintf_r+0x118>  // b.none
    4000ee74:	d503201f 	nop
    4000ee78:	aa1303f4 	mov	x20, x19
    4000ee7c:	38401e60 	ldrb	w0, [x19, #1]!
    4000ee80:	7100941f 	cmp	w0, #0x25
    4000ee84:	7a401804 	ccmp	w0, #0x0, #0x4, ne  // ne = any
    4000ee88:	54ffff81 	b.ne	4000ee78 <_vfiprintf_r+0xb8>  // b.any
    4000ee8c:	cb1a0277 	sub	x23, x19, x26
    4000ee90:	6b1a027f 	cmp	w19, w26
    4000ee94:	54000220 	b.eq	4000eed8 <_vfiprintf_r+0x118>  // b.none
    4000ee98:	f9407be2 	ldr	x2, [sp, #240]
    4000ee9c:	93407ee1 	sxtw	x1, w23
    4000eea0:	b940ebe0 	ldr	w0, [sp, #232]
    4000eea4:	8b020022 	add	x2, x1, x2
    4000eea8:	a900049a 	stp	x26, x1, [x4]
    4000eeac:	11000400 	add	w0, w0, #0x1
    4000eeb0:	b900ebe0 	str	w0, [sp, #232]
    4000eeb4:	91004084 	add	x4, x4, #0x10
    4000eeb8:	f9007be2 	str	x2, [sp, #240]
    4000eebc:	71001c1f 	cmp	w0, #0x7
    4000eec0:	5400008d 	b.le	4000eed0 <_vfiprintf_r+0x110>
    4000eec4:	b50018c2 	cbnz	x2, 4000f1dc <_vfiprintf_r+0x41c>
    4000eec8:	aa1b03e4 	mov	x4, x27
    4000eecc:	b900ebff 	str	wzr, [sp, #232]
    4000eed0:	39400680 	ldrb	w0, [x20, #1]
    4000eed4:	0b1702d6 	add	w22, w22, w23
    4000eed8:	34001940 	cbz	w0, 4000f200 <_vfiprintf_r+0x440>
    4000eedc:	39400661 	ldrb	w1, [x19, #1]
    4000eee0:	12800005 	mov	w5, #0xffffffff            	// #-1
    4000eee4:	9100067a 	add	x26, x19, #0x1
    4000eee8:	2a0503e8 	mov	w8, w5
    4000eeec:	52800002 	mov	w2, #0x0                   	// #0
    4000eef0:	52800007 	mov	w7, #0x0                   	// #0
    4000eef4:	52800018 	mov	w24, #0x0                   	// #0
    4000eef8:	52800003 	mov	w3, #0x0                   	// #0
    4000eefc:	39035fff 	strb	wzr, [sp, #215]
    4000ef00:	9100075a 	add	x26, x26, #0x1
    4000ef04:	51008020 	sub	w0, w1, #0x20
    4000ef08:	7101601f 	cmp	w0, #0x58
    4000ef0c:	54000b29 	b.ls	4000f070 <_vfiprintf_r+0x2b0>  // b.plast
    4000ef10:	35008722 	cbnz	w2, 4000fff4 <_vfiprintf_r+0x1234>
    4000ef14:	34001761 	cbz	w1, 4000f200 <_vfiprintf_r+0x440>
    4000ef18:	52800037 	mov	w23, #0x1                   	// #1
    4000ef1c:	9103e3f9 	add	x25, sp, #0xf8
    4000ef20:	2a1703f3 	mov	w19, w23
    4000ef24:	39035fff 	strb	wzr, [sp, #215]
    4000ef28:	3903e3e1 	strb	w1, [sp, #248]
    4000ef2c:	2a0303f4 	mov	w20, w3
    4000ef30:	52800005 	mov	w5, #0x0                   	// #0
    4000ef34:	d503201f 	nop
    4000ef38:	b940ebe0 	ldr	w0, [sp, #232]
    4000ef3c:	11000ae2 	add	w2, w23, #0x2
    4000ef40:	721f0292 	ands	w18, w20, #0x2
    4000ef44:	5280108e 	mov	w14, #0x84                  	// #132
    4000ef48:	11000401 	add	w1, w0, #0x1
    4000ef4c:	1a971057 	csel	w23, w2, w23, ne  // ne = any
    4000ef50:	6a0e028e 	ands	w14, w20, w14
    4000ef54:	2a0103e2 	mov	w2, w1
    4000ef58:	f9407be3 	ldr	x3, [sp, #240]
    4000ef5c:	54000081 	b.ne	4000ef6c <_vfiprintf_r+0x1ac>  // b.any
    4000ef60:	4b170308 	sub	w8, w24, w23
    4000ef64:	7100011f 	cmp	w8, #0x0
    4000ef68:	5400532c 	b.gt	4000f9cc <_vfiprintf_r+0xc0c>
    4000ef6c:	39435fe1 	ldrb	w1, [sp, #215]
    4000ef70:	34003a21 	cbz	w1, 4000f6b4 <_vfiprintf_r+0x8f4>
    4000ef74:	91000463 	add	x3, x3, #0x1
    4000ef78:	91035fe1 	add	x1, sp, #0xd7
    4000ef7c:	d2800020 	mov	x0, #0x1                   	// #1
    4000ef80:	a9000081 	stp	x1, x0, [x4]
    4000ef84:	b900ebe2 	str	w2, [sp, #232]
    4000ef88:	f9007be3 	str	x3, [sp, #240]
    4000ef8c:	71001c5f 	cmp	w2, #0x7
    4000ef90:	540038cd 	b.le	4000f6a8 <_vfiprintf_r+0x8e8>
    4000ef94:	b40001c3 	cbz	x3, 4000efcc <_vfiprintf_r+0x20c>
    4000ef98:	910383e2 	add	x2, sp, #0xe0
    4000ef9c:	aa1c03e1 	mov	x1, x28
    4000efa0:	aa1503e0 	mov	x0, x21
    4000efa4:	b90073f2 	str	w18, [sp, #112]
    4000efa8:	b9007bee 	str	w14, [sp, #120]
    4000efac:	b90093e5 	str	w5, [sp, #144]
    4000efb0:	940005b0 	bl	40010670 <__sfvwrite_r>
    4000efb4:	b900ebff 	str	wzr, [sp, #232]
    4000efb8:	f9007bff 	str	xzr, [sp, #240]
    4000efbc:	b94073f2 	ldr	w18, [sp, #112]
    4000efc0:	b9407bee 	ldr	w14, [sp, #120]
    4000efc4:	b94093e5 	ldr	w5, [sp, #144]
    4000efc8:	35001240 	cbnz	w0, 4000f210 <_vfiprintf_r+0x450>
    4000efcc:	35005d72 	cbnz	w18, 4000fb78 <_vfiprintf_r+0xdb8>
    4000efd0:	aa1b03e4 	mov	x4, x27
    4000efd4:	52800000 	mov	w0, #0x0                   	// #0
    4000efd8:	52800022 	mov	w2, #0x1                   	// #1
    4000efdc:	d2800003 	mov	x3, #0x0                   	// #0
    4000efe0:	710201df 	cmp	w14, #0x80
    4000efe4:	54003860 	b.eq	4000f6f0 <_vfiprintf_r+0x930>  // b.none
    4000efe8:	4b1300a5 	sub	w5, w5, w19
    4000efec:	b00000a8 	adrp	x8, 40023000 <fpi.1>
    4000eff0:	91022108 	add	x8, x8, #0x88
    4000eff4:	710000bf 	cmp	w5, #0x0
    4000eff8:	54003d4c 	b.gt	4000f7a0 <_vfiprintf_r+0x9e0>
    4000effc:	93407e73 	sxtw	x19, w19
    4000f000:	a9004c99 	stp	x25, x19, [x4]
    4000f004:	8b030263 	add	x3, x19, x3
    4000f008:	b900ebe2 	str	w2, [sp, #232]
    4000f00c:	f9007be3 	str	x3, [sp, #240]
    4000f010:	71001c5f 	cmp	w2, #0x7
    4000f014:	5400416d 	b.le	4000f840 <_vfiprintf_r+0xa80>
    4000f018:	b5004ca3 	cbnz	x3, 4000f9ac <_vfiprintf_r+0xbec>
    4000f01c:	b900ebff 	str	wzr, [sp, #232]
    4000f020:	36104614 	tbz	w20, #2, 4000f8e0 <_vfiprintf_r+0xb20>
    4000f024:	4b170313 	sub	w19, w24, w23
    4000f028:	aa1b03e4 	mov	x4, x27
    4000f02c:	f9407be3 	ldr	x3, [sp, #240]
    4000f030:	7100027f 	cmp	w19, #0x0
    4000f034:	5400410c 	b.gt	4000f854 <_vfiprintf_r+0xa94>
    4000f038:	6b17031f 	cmp	w24, w23
    4000f03c:	1a97a307 	csel	w7, w24, w23, ge  // ge = tcont
    4000f040:	0b0702d6 	add	w22, w22, w7
    4000f044:	b4000103 	cbz	x3, 4000f064 <_vfiprintf_r+0x2a4>
    4000f048:	910383e2 	add	x2, sp, #0xe0
    4000f04c:	aa1c03e1 	mov	x1, x28
    4000f050:	aa1503e0 	mov	x0, x21
    4000f054:	94000587 	bl	40010670 <__sfvwrite_r>
    4000f058:	b900ebff 	str	wzr, [sp, #232]
    4000f05c:	f9007bff 	str	xzr, [sp, #240]
    4000f060:	35000d80 	cbnz	w0, 4000f210 <_vfiprintf_r+0x450>
    4000f064:	aa1b03e4 	mov	x4, x27
    4000f068:	b900ebff 	str	wzr, [sp, #232]
    4000f06c:	17ffff7d 	b	4000ee60 <_vfiprintf_r+0xa0>
    4000f070:	f94047e6 	ldr	x6, [sp, #136]
    4000f074:	786058c0 	ldrh	w0, [x6, w0, uxtw #1]
    4000f078:	10000066 	adr	x6, 4000f084 <_vfiprintf_r+0x2c4>
    4000f07c:	8b20a8c0 	add	x0, x6, w0, sxth #2
    4000f080:	d61f0000 	br	x0
    4000f084:	5100c020 	sub	w0, w1, #0x30
    4000f088:	52800018 	mov	w24, #0x0                   	// #0
    4000f08c:	38401741 	ldrb	w1, [x26], #1
    4000f090:	0b180b0b 	add	w11, w24, w24, lsl #2
    4000f094:	0b0b0418 	add	w24, w0, w11, lsl #1
    4000f098:	5100c020 	sub	w0, w1, #0x30
    4000f09c:	7100241f 	cmp	w0, #0x9
    4000f0a0:	54ffff69 	b.ls	4000f08c <_vfiprintf_r+0x2cc>  // b.plast
    4000f0a4:	17ffff98 	b	4000ef04 <_vfiprintf_r+0x144>
    4000f0a8:	aa1c03e1 	mov	x1, x28
    4000f0ac:	aa1503e0 	mov	x0, x21
    4000f0b0:	97ffe484 	bl	400082c0 <__swsetup_r>
    4000f0b4:	350094a0 	cbnz	w0, 40010348 <_vfiprintf_r+0x1588>
    4000f0b8:	79402380 	ldrh	w0, [x28, #16]
    4000f0bc:	52800341 	mov	w1, #0x1a                  	// #26
    4000f0c0:	0a010001 	and	w1, w0, w1
    4000f0c4:	7100283f 	cmp	w1, #0xa
    4000f0c8:	54ffeb81 	b.ne	4000ee38 <_vfiprintf_r+0x78>  // b.any
    4000f0cc:	79c02781 	ldrsh	w1, [x28, #18]
    4000f0d0:	37ffeb41 	tbnz	w1, #31, 4000ee38 <_vfiprintf_r+0x78>
    4000f0d4:	b940b381 	ldr	w1, [x28, #176]
    4000f0d8:	37000041 	tbnz	w1, #0, 4000f0e0 <_vfiprintf_r+0x320>
    4000f0dc:	36487a20 	tbz	w0, #9, 40010020 <_vfiprintf_r+0x1260>
    4000f0e0:	a9401e66 	ldp	x6, x7, [x19]
    4000f0e4:	aa1a03e2 	mov	x2, x26
    4000f0e8:	a9411664 	ldp	x4, x5, [x19, #16]
    4000f0ec:	aa1c03e1 	mov	x1, x28
    4000f0f0:	9102c3e3 	add	x3, sp, #0xb0
    4000f0f4:	aa1503e0 	mov	x0, x21
    4000f0f8:	a90b1fe6 	stp	x6, x7, [sp, #176]
    4000f0fc:	a90c17e4 	stp	x4, x5, [sp, #192]
    4000f100:	940004ac 	bl	400103b0 <__sbprintf>
    4000f104:	2a0003f6 	mov	w22, w0
    4000f108:	2a1603e0 	mov	w0, w22
    4000f10c:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000f110:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4000f114:	a9446bf9 	ldp	x25, x26, [sp, #64]
    4000f118:	a94573fb 	ldp	x27, x28, [sp, #80]
    4000f11c:	a8da7bfd 	ldp	x29, x30, [sp], #416
    4000f120:	d65f03c0 	ret
    4000f124:	321c0063 	orr	w3, w3, #0x10
    4000f128:	b9409be0 	ldr	w0, [sp, #152]
    4000f12c:	36280943 	tbz	w3, #5, 4000f254 <_vfiprintf_r+0x494>
    4000f130:	37f80ba0 	tbnz	w0, #31, 4000f2a4 <_vfiprintf_r+0x4e4>
    4000f134:	f94037e0 	ldr	x0, [sp, #104]
    4000f138:	91003c01 	add	x1, x0, #0xf
    4000f13c:	927df021 	and	x1, x1, #0xfffffffffffffff8
    4000f140:	f90037e1 	str	x1, [sp, #104]
    4000f144:	f9400000 	ldr	x0, [x0]
    4000f148:	52800022 	mov	w2, #0x1                   	// #1
    4000f14c:	39035fff 	strb	wzr, [sp, #215]
    4000f150:	52800008 	mov	w8, #0x0                   	// #0
    4000f154:	310004bf 	cmn	w5, #0x1
    4000f158:	54001200 	b.eq	4000f398 <_vfiprintf_r+0x5d8>  // b.none
    4000f15c:	f100001f 	cmp	x0, #0x0
    4000f160:	12187874 	and	w20, w3, #0xffffff7f
    4000f164:	7a4008a0 	ccmp	w5, #0x0, #0x0, eq  // eq = none
    4000f168:	540053a1 	b.ne	4000fbdc <_vfiprintf_r+0xe1c>  // b.any
    4000f16c:	35000f02 	cbnz	w2, 4000f34c <_vfiprintf_r+0x58c>
    4000f170:	12000073 	and	w19, w3, #0x1
    4000f174:	360052e3 	tbz	w3, #0, 4000fbd0 <_vfiprintf_r+0xe10>
    4000f178:	91047ff9 	add	x25, sp, #0x11f
    4000f17c:	52800600 	mov	w0, #0x30                  	// #48
    4000f180:	52800005 	mov	w5, #0x0                   	// #0
    4000f184:	39047fe0 	strb	w0, [sp, #287]
    4000f188:	6b1300bf 	cmp	w5, w19
    4000f18c:	1a93a0b7 	csel	w23, w5, w19, ge  // ge = tcont
    4000f190:	7100011f 	cmp	w8, #0x0
    4000f194:	1a9706f7 	cinc	w23, w23, ne  // ne = any
    4000f198:	17ffff68 	b	4000ef38 <_vfiprintf_r+0x178>
    4000f19c:	321c0063 	orr	w3, w3, #0x10
    4000f1a0:	b9409be0 	ldr	w0, [sp, #152]
    4000f1a4:	362806c3 	tbz	w3, #5, 4000f27c <_vfiprintf_r+0x4bc>
    4000f1a8:	37f80960 	tbnz	w0, #31, 4000f2d4 <_vfiprintf_r+0x514>
    4000f1ac:	f94037e0 	ldr	x0, [sp, #104]
    4000f1b0:	91003c01 	add	x1, x0, #0xf
    4000f1b4:	927df021 	and	x1, x1, #0xfffffffffffffff8
    4000f1b8:	f90037e1 	str	x1, [sp, #104]
    4000f1bc:	52800002 	mov	w2, #0x0                   	// #0
    4000f1c0:	f9400000 	ldr	x0, [x0]
    4000f1c4:	17ffffe2 	b	4000f14c <_vfiprintf_r+0x38c>
    4000f1c8:	4b1803f8 	neg	w24, w24
    4000f1cc:	f90037e0 	str	x0, [sp, #104]
    4000f1d0:	39400341 	ldrb	w1, [x26]
    4000f1d4:	321e0063 	orr	w3, w3, #0x4
    4000f1d8:	17ffff4a 	b	4000ef00 <_vfiprintf_r+0x140>
    4000f1dc:	910383e2 	add	x2, sp, #0xe0
    4000f1e0:	aa1c03e1 	mov	x1, x28
    4000f1e4:	aa1503e0 	mov	x0, x21
    4000f1e8:	94000522 	bl	40010670 <__sfvwrite_r>
    4000f1ec:	b900ebff 	str	wzr, [sp, #232]
    4000f1f0:	f9007bff 	str	xzr, [sp, #240]
    4000f1f4:	350000e0 	cbnz	w0, 4000f210 <_vfiprintf_r+0x450>
    4000f1f8:	aa1b03e4 	mov	x4, x27
    4000f1fc:	17ffff35 	b	4000eed0 <_vfiprintf_r+0x110>
    4000f200:	f9407be0 	ldr	x0, [sp, #240]
    4000f204:	b5006fc0 	cbnz	x0, 4000fffc <_vfiprintf_r+0x123c>
    4000f208:	b900ebff 	str	wzr, [sp, #232]
    4000f20c:	d503201f 	nop
    4000f210:	b940b381 	ldr	w1, [x28, #176]
    4000f214:	79402380 	ldrh	w0, [x28, #16]
    4000f218:	36000141 	tbz	w1, #0, 4000f240 <_vfiprintf_r+0x480>
    4000f21c:	a94363f7 	ldp	x23, x24, [sp, #48]
    4000f220:	37307e80 	tbnz	w0, #6, 400101f0 <_vfiprintf_r+0x1430>
    4000f224:	2a1603e0 	mov	w0, w22
    4000f228:	a94153f3 	ldp	x19, x20, [sp, #16]
    4000f22c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4000f230:	a9446bf9 	ldp	x25, x26, [sp, #64]
    4000f234:	a94573fb 	ldp	x27, x28, [sp, #80]
    4000f238:	a8da7bfd 	ldp	x29, x30, [sp], #416
    4000f23c:	d65f03c0 	ret
    4000f240:	374ffee0 	tbnz	w0, #9, 4000f21c <_vfiprintf_r+0x45c>
    4000f244:	f9405380 	ldr	x0, [x28, #160]
    4000f248:	94003a46 	bl	4001db60 <__retarget_lock_release_recursive>
    4000f24c:	79402380 	ldrh	w0, [x28, #16]
    4000f250:	17fffff3 	b	4000f21c <_vfiprintf_r+0x45c>
    4000f254:	3727f6e3 	tbnz	w3, #4, 4000f130 <_vfiprintf_r+0x370>
    4000f258:	36306783 	tbz	w3, #6, 4000ff48 <_vfiprintf_r+0x1188>
    4000f25c:	37f87320 	tbnz	w0, #31, 400100c0 <_vfiprintf_r+0x1300>
    4000f260:	f94037e0 	ldr	x0, [sp, #104]
    4000f264:	91002c01 	add	x1, x0, #0xb
    4000f268:	927df021 	and	x1, x1, #0xfffffffffffffff8
    4000f26c:	f90037e1 	str	x1, [sp, #104]
    4000f270:	79400000 	ldrh	w0, [x0]
    4000f274:	52800022 	mov	w2, #0x1                   	// #1
    4000f278:	17ffffb5 	b	4000f14c <_vfiprintf_r+0x38c>
    4000f27c:	3727f963 	tbnz	w3, #4, 4000f1a8 <_vfiprintf_r+0x3e8>
    4000f280:	36306363 	tbz	w3, #6, 4000feec <_vfiprintf_r+0x112c>
    4000f284:	37f875c0 	tbnz	w0, #31, 4001013c <_vfiprintf_r+0x137c>
    4000f288:	f94037e0 	ldr	x0, [sp, #104]
    4000f28c:	91002c01 	add	x1, x0, #0xb
    4000f290:	927df021 	and	x1, x1, #0xfffffffffffffff8
    4000f294:	f90037e1 	str	x1, [sp, #104]
    4000f298:	79400000 	ldrh	w0, [x0]
    4000f29c:	52800002 	mov	w2, #0x0                   	// #0
    4000f2a0:	17ffffab 	b	4000f14c <_vfiprintf_r+0x38c>
    4000f2a4:	b9409be0 	ldr	w0, [sp, #152]
    4000f2a8:	11002001 	add	w1, w0, #0x8
    4000f2ac:	7100003f 	cmp	w1, #0x0
    4000f2b0:	5400586d 	b.le	4000fdbc <_vfiprintf_r+0xffc>
    4000f2b4:	f94037e0 	ldr	x0, [sp, #104]
    4000f2b8:	b9009be1 	str	w1, [sp, #152]
    4000f2bc:	91003c02 	add	x2, x0, #0xf
    4000f2c0:	927df041 	and	x1, x2, #0xfffffffffffffff8
    4000f2c4:	f90037e1 	str	x1, [sp, #104]
    4000f2c8:	17ffff9f 	b	4000f144 <_vfiprintf_r+0x384>
    4000f2cc:	97ffcd71 	bl	40002890 <__sinit>
    4000f2d0:	17fffecf 	b	4000ee0c <_vfiprintf_r+0x4c>
    4000f2d4:	b9409be0 	ldr	w0, [sp, #152]
    4000f2d8:	11002001 	add	w1, w0, #0x8
    4000f2dc:	7100003f 	cmp	w1, #0x0
    4000f2e0:	5400564d 	b.le	4000fda8 <_vfiprintf_r+0xfe8>
    4000f2e4:	f94037e0 	ldr	x0, [sp, #104]
    4000f2e8:	b9009be1 	str	w1, [sp, #152]
    4000f2ec:	91003c02 	add	x2, x0, #0xf
    4000f2f0:	927df041 	and	x1, x2, #0xfffffffffffffff8
    4000f2f4:	f90037e1 	str	x1, [sp, #104]
    4000f2f8:	17ffffb1 	b	4000f1bc <_vfiprintf_r+0x3fc>
    4000f2fc:	35006b22 	cbnz	w2, 40010060 <_vfiprintf_r+0x12a0>
    4000f300:	b9409be0 	ldr	w0, [sp, #152]
    4000f304:	372802c3 	tbnz	w3, #5, 4000f35c <_vfiprintf_r+0x59c>
    4000f308:	372002a3 	tbnz	w3, #4, 4000f35c <_vfiprintf_r+0x59c>
    4000f30c:	363060e3 	tbz	w3, #6, 4000ff28 <_vfiprintf_r+0x1168>
    4000f310:	37f873e0 	tbnz	w0, #31, 4001018c <_vfiprintf_r+0x13cc>
    4000f314:	f94037e0 	ldr	x0, [sp, #104]
    4000f318:	91002c01 	add	x1, x0, #0xb
    4000f31c:	927df021 	and	x1, x1, #0xfffffffffffffff8
    4000f320:	f90037e1 	str	x1, [sp, #104]
    4000f324:	79800000 	ldrsh	x0, [x0]
    4000f328:	aa0003e1 	mov	x1, x0
    4000f32c:	b7f80281 	tbnz	x1, #63, 4000f37c <_vfiprintf_r+0x5bc>
    4000f330:	39435fe8 	ldrb	w8, [sp, #215]
    4000f334:	310004bf 	cmn	w5, #0x1
    4000f338:	54003fc0 	b.eq	4000fb30 <_vfiprintf_r+0xd70>  // b.none
    4000f33c:	f100001f 	cmp	x0, #0x0
    4000f340:	12187874 	and	w20, w3, #0xffffff7f
    4000f344:	7a4008a0 	ccmp	w5, #0x0, #0x0, eq  // eq = none
    4000f348:	54003f01 	b.ne	4000fb28 <_vfiprintf_r+0xd68>  // b.any
    4000f34c:	aa1b03f9 	mov	x25, x27
    4000f350:	52800005 	mov	w5, #0x0                   	// #0
    4000f354:	52800013 	mov	w19, #0x0                   	// #0
    4000f358:	17ffff8c 	b	4000f188 <_vfiprintf_r+0x3c8>
    4000f35c:	37f84440 	tbnz	w0, #31, 4000fbe4 <_vfiprintf_r+0xe24>
    4000f360:	f94037e0 	ldr	x0, [sp, #104]
    4000f364:	91003c01 	add	x1, x0, #0xf
    4000f368:	927df021 	and	x1, x1, #0xfffffffffffffff8
    4000f36c:	f90037e1 	str	x1, [sp, #104]
    4000f370:	f9400001 	ldr	x1, [x0]
    4000f374:	aa0103e0 	mov	x0, x1
    4000f378:	b6fffdc1 	tbz	x1, #63, 4000f330 <_vfiprintf_r+0x570>
    4000f37c:	528005a1 	mov	w1, #0x2d                  	// #45
    4000f380:	39035fe1 	strb	w1, [sp, #215]
    4000f384:	cb0003e0 	neg	x0, x0
    4000f388:	528005a8 	mov	w8, #0x2d                  	// #45
    4000f38c:	52800022 	mov	w2, #0x1                   	// #1
    4000f390:	310004bf 	cmn	w5, #0x1
    4000f394:	54ffee41 	b.ne	4000f15c <_vfiprintf_r+0x39c>  // b.any
    4000f398:	7100045f 	cmp	w2, #0x1
    4000f39c:	54003ca0 	b.eq	4000fb30 <_vfiprintf_r+0xd70>  // b.none
    4000f3a0:	aa1b03f9 	mov	x25, x27
    4000f3a4:	7100085f 	cmp	w2, #0x2
    4000f3a8:	54002e80 	b.eq	4000f978 <_vfiprintf_r+0xbb8>  // b.none
    4000f3ac:	d503201f 	nop
    4000f3b0:	12000801 	and	w1, w0, #0x7
    4000f3b4:	aa1903e2 	mov	x2, x25
    4000f3b8:	1100c021 	add	w1, w1, #0x30
    4000f3bc:	381fff21 	strb	w1, [x25, #-1]!
    4000f3c0:	d343fc00 	lsr	x0, x0, #3
    4000f3c4:	b5ffff60 	cbnz	x0, 4000f3b0 <_vfiprintf_r+0x5f0>
    4000f3c8:	7100c03f 	cmp	w1, #0x30
    4000f3cc:	1a9f07e0 	cset	w0, ne  // ne = any
    4000f3d0:	6a00007f 	tst	w3, w0
    4000f3d4:	54004421 	b.ne	4000fc58 <_vfiprintf_r+0xe98>  // b.any
    4000f3d8:	2a0303f4 	mov	w20, w3
    4000f3dc:	4b190373 	sub	w19, w27, w25
    4000f3e0:	17ffff6a 	b	4000f188 <_vfiprintf_r+0x3c8>
    4000f3e4:	b9409be0 	ldr	w0, [sp, #152]
    4000f3e8:	37f85460 	tbnz	w0, #31, 4000fe74 <_vfiprintf_r+0x10b4>
    4000f3ec:	f94037e0 	ldr	x0, [sp, #104]
    4000f3f0:	91002c00 	add	x0, x0, #0xb
    4000f3f4:	927df000 	and	x0, x0, #0xfffffffffffffff8
    4000f3f8:	f94037e1 	ldr	x1, [sp, #104]
    4000f3fc:	b9400038 	ldr	w24, [x1]
    4000f400:	37ffee58 	tbnz	w24, #31, 4000f1c8 <_vfiprintf_r+0x408>
    4000f404:	39400341 	ldrb	w1, [x26]
    4000f408:	f90037e0 	str	x0, [sp, #104]
    4000f40c:	17fffebd 	b	4000ef00 <_vfiprintf_r+0x140>
    4000f410:	39400341 	ldrb	w1, [x26]
    4000f414:	32000063 	orr	w3, w3, #0x1
    4000f418:	17fffeba 	b	4000ef00 <_vfiprintf_r+0x140>
    4000f41c:	39400341 	ldrb	w1, [x26]
    4000f420:	35ffd707 	cbnz	w7, 4000ef00 <_vfiprintf_r+0x140>
    4000f424:	52800022 	mov	w2, #0x1                   	// #1
    4000f428:	52800407 	mov	w7, #0x20                  	// #32
    4000f42c:	17fffeb5 	b	4000ef00 <_vfiprintf_r+0x140>
    4000f430:	39400341 	ldrb	w1, [x26]
    4000f434:	321a0063 	orr	w3, w3, #0x40
    4000f438:	17fffeb2 	b	4000ef00 <_vfiprintf_r+0x140>
    4000f43c:	350060e2 	cbnz	w2, 40010058 <_vfiprintf_r+0x1298>
    4000f440:	b9409be0 	ldr	w0, [sp, #152]
    4000f444:	37280163 	tbnz	w3, #5, 4000f470 <_vfiprintf_r+0x6b0>
    4000f448:	37200143 	tbnz	w3, #4, 4000f470 <_vfiprintf_r+0x6b0>
    4000f44c:	36305be3 	tbz	w3, #6, 4000ffc8 <_vfiprintf_r+0x1208>
    4000f450:	37f86e80 	tbnz	w0, #31, 40010220 <_vfiprintf_r+0x1460>
    4000f454:	f94037e0 	ldr	x0, [sp, #104]
    4000f458:	91003c01 	add	x1, x0, #0xf
    4000f45c:	927df021 	and	x1, x1, #0xfffffffffffffff8
    4000f460:	f90037e1 	str	x1, [sp, #104]
    4000f464:	f9400000 	ldr	x0, [x0]
    4000f468:	79000016 	strh	w22, [x0]
    4000f46c:	17fffe7d 	b	4000ee60 <_vfiprintf_r+0xa0>
    4000f470:	37f844c0 	tbnz	w0, #31, 4000fd08 <_vfiprintf_r+0xf48>
    4000f474:	f94037e0 	ldr	x0, [sp, #104]
    4000f478:	91003c01 	add	x1, x0, #0xf
    4000f47c:	927df021 	and	x1, x1, #0xfffffffffffffff8
    4000f480:	f90037e1 	str	x1, [sp, #104]
    4000f484:	f9400000 	ldr	x0, [x0]
    4000f488:	93407ec1 	sxtw	x1, w22
    4000f48c:	f9000001 	str	x1, [x0]
    4000f490:	17fffe74 	b	4000ee60 <_vfiprintf_r+0xa0>
    4000f494:	39400341 	ldrb	w1, [x26]
    4000f498:	7101b03f 	cmp	w1, #0x6c
    4000f49c:	54005100 	b.eq	4000febc <_vfiprintf_r+0x10fc>  // b.none
    4000f4a0:	321c0063 	orr	w3, w3, #0x10
    4000f4a4:	17fffe97 	b	4000ef00 <_vfiprintf_r+0x140>
    4000f4a8:	35005e42 	cbnz	w2, 40010070 <_vfiprintf_r+0x12b0>
    4000f4ac:	f0000099 	adrp	x25, 40022000 <__pow_log_data+0xcc8>
    4000f4b0:	91348320 	add	x0, x25, #0xd20
    4000f4b4:	f90043e0 	str	x0, [sp, #128]
    4000f4b8:	b9409be0 	ldr	w0, [sp, #152]
    4000f4bc:	37280143 	tbnz	w3, #5, 4000f4e4 <_vfiprintf_r+0x724>
    4000f4c0:	37200123 	tbnz	w3, #4, 4000f4e4 <_vfiprintf_r+0x724>
    4000f4c4:	36305243 	tbz	w3, #6, 4000ff0c <_vfiprintf_r+0x114c>
    4000f4c8:	37f86100 	tbnz	w0, #31, 400100e8 <_vfiprintf_r+0x1328>
    4000f4cc:	f94037e0 	ldr	x0, [sp, #104]
    4000f4d0:	91002c02 	add	x2, x0, #0xb
    4000f4d4:	927df042 	and	x2, x2, #0xfffffffffffffff8
    4000f4d8:	79400000 	ldrh	w0, [x0]
    4000f4dc:	f90037e2 	str	x2, [sp, #104]
    4000f4e0:	14000007 	b	4000f4fc <_vfiprintf_r+0x73c>
    4000f4e4:	37f83940 	tbnz	w0, #31, 4000fc0c <_vfiprintf_r+0xe4c>
    4000f4e8:	f94037e0 	ldr	x0, [sp, #104]
    4000f4ec:	91003c02 	add	x2, x0, #0xf
    4000f4f0:	927df042 	and	x2, x2, #0xfffffffffffffff8
    4000f4f4:	f90037e2 	str	x2, [sp, #104]
    4000f4f8:	f9400000 	ldr	x0, [x0]
    4000f4fc:	52800042 	mov	w2, #0x2                   	// #2
    4000f500:	3607e263 	tbz	w3, #0, 4000f14c <_vfiprintf_r+0x38c>
    4000f504:	b4ffe240 	cbz	x0, 4000f14c <_vfiprintf_r+0x38c>
    4000f508:	52800607 	mov	w7, #0x30                  	// #48
    4000f50c:	2a020063 	orr	w3, w3, w2
    4000f510:	390363e7 	strb	w7, [sp, #216]
    4000f514:	390367e1 	strb	w1, [sp, #217]
    4000f518:	17ffff0d 	b	4000f14c <_vfiprintf_r+0x38c>
    4000f51c:	b9409be0 	ldr	w0, [sp, #152]
    4000f520:	37f84bc0 	tbnz	w0, #31, 4000fe98 <_vfiprintf_r+0x10d8>
    4000f524:	f94037e0 	ldr	x0, [sp, #104]
    4000f528:	91003c14 	add	x20, x0, #0xf
    4000f52c:	927df294 	and	x20, x20, #0xfffffffffffffff8
    4000f530:	f94037e0 	ldr	x0, [sp, #104]
    4000f534:	39035fff 	strb	wzr, [sp, #215]
    4000f538:	f9400019 	ldr	x25, [x0]
    4000f53c:	b4004c99 	cbz	x25, 4000fecc <_vfiprintf_r+0x110c>
    4000f540:	b90073e3 	str	w3, [sp, #112]
    4000f544:	f9003fe4 	str	x4, [sp, #120]
    4000f548:	310004bf 	cmn	w5, #0x1
    4000f54c:	54003f20 	b.eq	4000fd30 <_vfiprintf_r+0xf70>  // b.none
    4000f550:	93407ca2 	sxtw	x2, w5
    4000f554:	aa1903e0 	mov	x0, x25
    4000f558:	52800001 	mov	w1, #0x0                   	// #0
    4000f55c:	b9006be5 	str	w5, [sp, #104]
    4000f560:	97ffc8ad 	bl	40001814 <memchr>
    4000f564:	b9406be5 	ldr	w5, [sp, #104]
    4000f568:	b94073e3 	ldr	w3, [sp, #112]
    4000f56c:	f9403fe4 	ldr	x4, [sp, #120]
    4000f570:	b4005680 	cbz	x0, 40010040 <_vfiprintf_r+0x1280>
    4000f574:	39435fe8 	ldrb	w8, [sp, #215]
    4000f578:	4b190013 	sub	w19, w0, w25
    4000f57c:	52800005 	mov	w5, #0x0                   	// #0
    4000f580:	f90037f4 	str	x20, [sp, #104]
    4000f584:	2a0303f4 	mov	w20, w3
    4000f588:	17ffff00 	b	4000f188 <_vfiprintf_r+0x3c8>
    4000f58c:	39400341 	ldrb	w1, [x26]
    4000f590:	321b0063 	orr	w3, w3, #0x20
    4000f594:	17fffe5b 	b	4000ef00 <_vfiprintf_r+0x140>
    4000f598:	b9409be0 	ldr	w0, [sp, #152]
    4000f59c:	37f84380 	tbnz	w0, #31, 4000fe0c <_vfiprintf_r+0x104c>
    4000f5a0:	f94037e1 	ldr	x1, [sp, #104]
    4000f5a4:	91003c20 	add	x0, x1, #0xf
    4000f5a8:	927df000 	and	x0, x0, #0xfffffffffffffff8
    4000f5ac:	f90037e0 	str	x0, [sp, #104]
    4000f5b0:	528f0600 	mov	w0, #0x7830                	// #30768
    4000f5b4:	f0000099 	adrp	x25, 40022000 <__pow_log_data+0xcc8>
    4000f5b8:	321f0063 	orr	w3, w3, #0x2
    4000f5bc:	91348326 	add	x6, x25, #0xd20
    4000f5c0:	52800042 	mov	w2, #0x2                   	// #2
    4000f5c4:	f90043e6 	str	x6, [sp, #128]
    4000f5c8:	7901b3e0 	strh	w0, [sp, #216]
    4000f5cc:	f9400020 	ldr	x0, [x1]
    4000f5d0:	17fffedf 	b	4000f14c <_vfiprintf_r+0x38c>
    4000f5d4:	b9409be0 	ldr	w0, [sp, #152]
    4000f5d8:	37f84060 	tbnz	w0, #31, 4000fde4 <_vfiprintf_r+0x1024>
    4000f5dc:	f94037e0 	ldr	x0, [sp, #104]
    4000f5e0:	91002c01 	add	x1, x0, #0xb
    4000f5e4:	927df021 	and	x1, x1, #0xfffffffffffffff8
    4000f5e8:	f90037e1 	str	x1, [sp, #104]
    4000f5ec:	b9400000 	ldr	w0, [x0]
    4000f5f0:	52800037 	mov	w23, #0x1                   	// #1
    4000f5f4:	9103e3f9 	add	x25, sp, #0xf8
    4000f5f8:	2a1703f3 	mov	w19, w23
    4000f5fc:	39035fff 	strb	wzr, [sp, #215]
    4000f600:	3903e3e0 	strb	w0, [sp, #248]
    4000f604:	17fffe4a 	b	4000ef2c <_vfiprintf_r+0x16c>
    4000f608:	35005302 	cbnz	w2, 40010068 <_vfiprintf_r+0x12a8>
    4000f60c:	f0000099 	adrp	x25, 40022000 <__pow_log_data+0xcc8>
    4000f610:	9134e320 	add	x0, x25, #0xd38
    4000f614:	f90043e0 	str	x0, [sp, #128]
    4000f618:	17ffffa8 	b	4000f4b8 <_vfiprintf_r+0x6f8>
    4000f61c:	35004e62 	cbnz	w2, 4000ffe8 <_vfiprintf_r+0x1228>
    4000f620:	321c0063 	orr	w3, w3, #0x10
    4000f624:	17ffff37 	b	4000f300 <_vfiprintf_r+0x540>
    4000f628:	39400341 	ldrb	w1, [x26]
    4000f62c:	32190063 	orr	w3, w3, #0x80
    4000f630:	17fffe34 	b	4000ef00 <_vfiprintf_r+0x140>
    4000f634:	aa1a03e9 	mov	x9, x26
    4000f638:	38401521 	ldrb	w1, [x9], #1
    4000f63c:	7100a83f 	cmp	w1, #0x2a
    4000f640:	540066c0 	b.eq	40010318 <_vfiprintf_r+0x1558>  // b.none
    4000f644:	5100c020 	sub	w0, w1, #0x30
    4000f648:	aa0903fa 	mov	x26, x9
    4000f64c:	52800005 	mov	w5, #0x0                   	// #0
    4000f650:	7100241f 	cmp	w0, #0x9
    4000f654:	54ffc588 	b.hi	4000ef04 <_vfiprintf_r+0x144>  // b.pmore
    4000f658:	38401741 	ldrb	w1, [x26], #1
    4000f65c:	0b0508a5 	add	w5, w5, w5, lsl #2
    4000f660:	0b050405 	add	w5, w0, w5, lsl #1
    4000f664:	5100c020 	sub	w0, w1, #0x30
    4000f668:	7100241f 	cmp	w0, #0x9
    4000f66c:	54ffff69 	b.ls	4000f658 <_vfiprintf_r+0x898>  // b.plast
    4000f670:	17fffe25 	b	4000ef04 <_vfiprintf_r+0x144>
    4000f674:	39400341 	ldrb	w1, [x26]
    4000f678:	52800022 	mov	w2, #0x1                   	// #1
    4000f67c:	52800567 	mov	w7, #0x2b                  	// #43
    4000f680:	17fffe20 	b	4000ef00 <_vfiprintf_r+0x140>
    4000f684:	b50030c3 	cbnz	x3, 4000fc9c <_vfiprintf_r+0xedc>
    4000f688:	39435fe0 	ldrb	w0, [sp, #215]
    4000f68c:	34002fc0 	cbz	w0, 4000fc84 <_vfiprintf_r+0xec4>
    4000f690:	d2800023 	mov	x3, #0x1                   	// #1
    4000f694:	aa1b03e4 	mov	x4, x27
    4000f698:	2a0303e2 	mov	w2, w3
    4000f69c:	91035fe0 	add	x0, sp, #0xd7
    4000f6a0:	a9120fe0 	stp	x0, x3, [sp, #288]
    4000f6a4:	d503201f 	nop
    4000f6a8:	2a0203e0 	mov	w0, w2
    4000f6ac:	91004084 	add	x4, x4, #0x10
    4000f6b0:	11000442 	add	w2, w2, #0x1
    4000f6b4:	34ffc972 	cbz	w18, 4000efe0 <_vfiprintf_r+0x220>
    4000f6b8:	91000863 	add	x3, x3, #0x2
    4000f6bc:	910363e1 	add	x1, sp, #0xd8
    4000f6c0:	d2800040 	mov	x0, #0x2                   	// #2
    4000f6c4:	a9000081 	stp	x1, x0, [x4]
    4000f6c8:	b900ebe2 	str	w2, [sp, #232]
    4000f6cc:	f9007be3 	str	x3, [sp, #240]
    4000f6d0:	71001c5f 	cmp	w2, #0x7
    4000f6d4:	540024ad 	b.le	4000fb68 <_vfiprintf_r+0xda8>
    4000f6d8:	b50025e3 	cbnz	x3, 4000fb94 <_vfiprintf_r+0xdd4>
    4000f6dc:	aa1b03e4 	mov	x4, x27
    4000f6e0:	52800022 	mov	w2, #0x1                   	// #1
    4000f6e4:	52800000 	mov	w0, #0x0                   	// #0
    4000f6e8:	710201df 	cmp	w14, #0x80
    4000f6ec:	54ffc7e1 	b.ne	4000efe8 <_vfiprintf_r+0x228>  // b.any
    4000f6f0:	4b17030c 	sub	w12, w24, w23
    4000f6f4:	7100019f 	cmp	w12, #0x0
    4000f6f8:	54ffc78d 	b.le	4000efe8 <_vfiprintf_r+0x228>
    4000f6fc:	7100419f 	cmp	w12, #0x10
    4000f700:	5400570d 	b.le	400101e0 <_vfiprintf_r+0x1420>
    4000f704:	900000a8 	adrp	x8, 40023000 <fpi.1>
    4000f708:	d280020e 	mov	x14, #0x10                  	// #16
    4000f70c:	91022108 	add	x8, x8, #0x88
    4000f710:	14000007 	b	4000f72c <_vfiprintf_r+0x96c>
    4000f714:	1100080f 	add	w15, w0, #0x2
    4000f718:	91004084 	add	x4, x4, #0x10
    4000f71c:	2a0103e0 	mov	w0, w1
    4000f720:	5100418c 	sub	w12, w12, #0x10
    4000f724:	7100419f 	cmp	w12, #0x10
    4000f728:	540001ed 	b.le	4000f764 <_vfiprintf_r+0x9a4>
    4000f72c:	91004063 	add	x3, x3, #0x10
    4000f730:	11000401 	add	w1, w0, #0x1
    4000f734:	a9003888 	stp	x8, x14, [x4]
    4000f738:	b900ebe1 	str	w1, [sp, #232]
    4000f73c:	f9007be3 	str	x3, [sp, #240]
    4000f740:	71001c3f 	cmp	w1, #0x7
    4000f744:	54fffe8d 	b.le	4000f714 <_vfiprintf_r+0x954>
    4000f748:	b5000f43 	cbnz	x3, 4000f930 <_vfiprintf_r+0xb70>
    4000f74c:	5100418c 	sub	w12, w12, #0x10
    4000f750:	aa1b03e4 	mov	x4, x27
    4000f754:	5280002f 	mov	w15, #0x1                   	// #1
    4000f758:	52800000 	mov	w0, #0x0                   	// #0
    4000f75c:	7100419f 	cmp	w12, #0x10
    4000f760:	54fffe6c 	b.gt	4000f72c <_vfiprintf_r+0x96c>
    4000f764:	93407d80 	sxtw	x0, w12
    4000f768:	a9000088 	stp	x8, x0, [x4]
    4000f76c:	8b000063 	add	x3, x3, x0
    4000f770:	b900ebef 	str	w15, [sp, #232]
    4000f774:	f9007be3 	str	x3, [sp, #240]
    4000f778:	71001dff 	cmp	w15, #0x7
    4000f77c:	540025cc 	b.gt	4000fc34 <_vfiprintf_r+0xe74>
    4000f780:	4b1300a5 	sub	w5, w5, w19
    4000f784:	900000a8 	adrp	x8, 40023000 <fpi.1>
    4000f788:	91004084 	add	x4, x4, #0x10
    4000f78c:	110005e2 	add	w2, w15, #0x1
    4000f790:	2a0f03e0 	mov	w0, w15
    4000f794:	91022108 	add	x8, x8, #0x88
    4000f798:	710000bf 	cmp	w5, #0x0
    4000f79c:	54ffc30d 	b.le	4000effc <_vfiprintf_r+0x23c>
    4000f7a0:	710040bf 	cmp	w5, #0x10
    4000f7a4:	540002ed 	b.le	4000f800 <_vfiprintf_r+0xa40>
    4000f7a8:	d280020c 	mov	x12, #0x10                  	// #16
    4000f7ac:	14000007 	b	4000f7c8 <_vfiprintf_r+0xa08>
    4000f7b0:	11000802 	add	w2, w0, #0x2
    4000f7b4:	91004084 	add	x4, x4, #0x10
    4000f7b8:	2a0103e0 	mov	w0, w1
    4000f7bc:	510040a5 	sub	w5, w5, #0x10
    4000f7c0:	710040bf 	cmp	w5, #0x10
    4000f7c4:	540001ed 	b.le	4000f800 <_vfiprintf_r+0xa40>
    4000f7c8:	91004063 	add	x3, x3, #0x10
    4000f7cc:	11000401 	add	w1, w0, #0x1
    4000f7d0:	a9003088 	stp	x8, x12, [x4]
    4000f7d4:	b900ebe1 	str	w1, [sp, #232]
    4000f7d8:	f9007be3 	str	x3, [sp, #240]
    4000f7dc:	71001c3f 	cmp	w1, #0x7
    4000f7e0:	54fffe8d 	b.le	4000f7b0 <_vfiprintf_r+0x9f0>
    4000f7e4:	b5000863 	cbnz	x3, 4000f8f0 <_vfiprintf_r+0xb30>
    4000f7e8:	510040a5 	sub	w5, w5, #0x10
    4000f7ec:	aa1b03e4 	mov	x4, x27
    4000f7f0:	52800022 	mov	w2, #0x1                   	// #1
    4000f7f4:	52800000 	mov	w0, #0x0                   	// #0
    4000f7f8:	710040bf 	cmp	w5, #0x10
    4000f7fc:	54fffe6c 	b.gt	4000f7c8 <_vfiprintf_r+0xa08>
    4000f800:	93407ca5 	sxtw	x5, w5
    4000f804:	a9001488 	stp	x8, x5, [x4]
    4000f808:	8b050063 	add	x3, x3, x5
    4000f80c:	b900ebe2 	str	w2, [sp, #232]
    4000f810:	f9007be3 	str	x3, [sp, #240]
    4000f814:	71001c5f 	cmp	w2, #0x7
    4000f818:	540016ac 	b.gt	4000faec <_vfiprintf_r+0xd2c>
    4000f81c:	91004084 	add	x4, x4, #0x10
    4000f820:	93407e73 	sxtw	x19, w19
    4000f824:	11000442 	add	w2, w2, #0x1
    4000f828:	8b030263 	add	x3, x19, x3
    4000f82c:	b900ebe2 	str	w2, [sp, #232]
    4000f830:	a9004c99 	stp	x25, x19, [x4]
    4000f834:	f9007be3 	str	x3, [sp, #240]
    4000f838:	71001c5f 	cmp	w2, #0x7
    4000f83c:	54ffbeec 	b.gt	4000f018 <_vfiprintf_r+0x258>
    4000f840:	3617bfd4 	tbz	w20, #2, 4000f038 <_vfiprintf_r+0x278>
    4000f844:	4b170313 	sub	w19, w24, w23
    4000f848:	91004084 	add	x4, x4, #0x10
    4000f84c:	7100027f 	cmp	w19, #0x0
    4000f850:	54ffbf4d 	b.le	4000f038 <_vfiprintf_r+0x278>
    4000f854:	b940ebe0 	ldr	w0, [sp, #232]
    4000f858:	7100427f 	cmp	w19, #0x10
    4000f85c:	5400416d 	b.le	40010088 <_vfiprintf_r+0x12c8>
    4000f860:	900000ac 	adrp	x12, 40023000 <fpi.1>
    4000f864:	d2800214 	mov	x20, #0x10                  	// #16
    4000f868:	9101e18c 	add	x12, x12, #0x78
    4000f86c:	14000007 	b	4000f888 <_vfiprintf_r+0xac8>
    4000f870:	11000802 	add	w2, w0, #0x2
    4000f874:	91004084 	add	x4, x4, #0x10
    4000f878:	2a0103e0 	mov	w0, w1
    4000f87c:	51004273 	sub	w19, w19, #0x10
    4000f880:	7100427f 	cmp	w19, #0x10
    4000f884:	540001ed 	b.le	4000f8c0 <_vfiprintf_r+0xb00>
    4000f888:	91004063 	add	x3, x3, #0x10
    4000f88c:	11000401 	add	w1, w0, #0x1
    4000f890:	a900508c 	stp	x12, x20, [x4]
    4000f894:	b900ebe1 	str	w1, [sp, #232]
    4000f898:	f9007be3 	str	x3, [sp, #240]
    4000f89c:	71001c3f 	cmp	w1, #0x7
    4000f8a0:	54fffe8d 	b.le	4000f870 <_vfiprintf_r+0xab0>
    4000f8a4:	b50010a3 	cbnz	x3, 4000fab8 <_vfiprintf_r+0xcf8>
    4000f8a8:	51004273 	sub	w19, w19, #0x10
    4000f8ac:	aa1b03e4 	mov	x4, x27
    4000f8b0:	52800022 	mov	w2, #0x1                   	// #1
    4000f8b4:	52800000 	mov	w0, #0x0                   	// #0
    4000f8b8:	7100427f 	cmp	w19, #0x10
    4000f8bc:	54fffe6c 	b.gt	4000f888 <_vfiprintf_r+0xac8>
    4000f8c0:	93407e73 	sxtw	x19, w19
    4000f8c4:	a9004c8c 	stp	x12, x19, [x4]
    4000f8c8:	8b130063 	add	x3, x3, x19
    4000f8cc:	b900ebe2 	str	w2, [sp, #232]
    4000f8d0:	f9007be3 	str	x3, [sp, #240]
    4000f8d4:	71001c5f 	cmp	w2, #0x7
    4000f8d8:	54ffbb0d 	b.le	4000f038 <_vfiprintf_r+0x278>
    4000f8dc:	b5002003 	cbnz	x3, 4000fcdc <_vfiprintf_r+0xf1c>
    4000f8e0:	6b17031f 	cmp	w24, w23
    4000f8e4:	1a97a307 	csel	w7, w24, w23, ge  // ge = tcont
    4000f8e8:	0b0702d6 	add	w22, w22, w7
    4000f8ec:	17fffdde 	b	4000f064 <_vfiprintf_r+0x2a4>
    4000f8f0:	910383e2 	add	x2, sp, #0xe0
    4000f8f4:	aa1c03e1 	mov	x1, x28
    4000f8f8:	aa1503e0 	mov	x0, x21
    4000f8fc:	b90073e5 	str	w5, [sp, #112]
    4000f900:	f9003fe8 	str	x8, [sp, #120]
    4000f904:	9400035b 	bl	40010670 <__sfvwrite_r>
    4000f908:	b900ebff 	str	wzr, [sp, #232]
    4000f90c:	f9007bff 	str	xzr, [sp, #240]
    4000f910:	35ffc800 	cbnz	w0, 4000f210 <_vfiprintf_r+0x450>
    4000f914:	b94073e5 	ldr	w5, [sp, #112]
    4000f918:	aa1b03e4 	mov	x4, x27
    4000f91c:	52800022 	mov	w2, #0x1                   	// #1
    4000f920:	d2800003 	mov	x3, #0x0                   	// #0
    4000f924:	d280020c 	mov	x12, #0x10                  	// #16
    4000f928:	f9403fe8 	ldr	x8, [sp, #120]
    4000f92c:	17ffffa4 	b	4000f7bc <_vfiprintf_r+0x9fc>
    4000f930:	910383e2 	add	x2, sp, #0xe0
    4000f934:	aa1c03e1 	mov	x1, x28
    4000f938:	aa1503e0 	mov	x0, x21
    4000f93c:	b90073e5 	str	w5, [sp, #112]
    4000f940:	b9007bec 	str	w12, [sp, #120]
    4000f944:	f9004be8 	str	x8, [sp, #144]
    4000f948:	9400034a 	bl	40010670 <__sfvwrite_r>
    4000f94c:	b900ebff 	str	wzr, [sp, #232]
    4000f950:	f9007bff 	str	xzr, [sp, #240]
    4000f954:	35ffc5e0 	cbnz	w0, 4000f210 <_vfiprintf_r+0x450>
    4000f958:	b94073e5 	ldr	w5, [sp, #112]
    4000f95c:	aa1b03e4 	mov	x4, x27
    4000f960:	b9407bec 	ldr	w12, [sp, #120]
    4000f964:	5280002f 	mov	w15, #0x1                   	// #1
    4000f968:	d2800003 	mov	x3, #0x0                   	// #0
    4000f96c:	d280020e 	mov	x14, #0x10                  	// #16
    4000f970:	f9404be8 	ldr	x8, [sp, #144]
    4000f974:	17ffff6b 	b	4000f720 <_vfiprintf_r+0x960>
    4000f978:	f94043e2 	ldr	x2, [sp, #128]
    4000f97c:	92400c01 	and	x1, x0, #0xf
    4000f980:	d344fc00 	lsr	x0, x0, #4
    4000f984:	38616841 	ldrb	w1, [x2, x1]
    4000f988:	381fff21 	strb	w1, [x25, #-1]!
    4000f98c:	b4ffd260 	cbz	x0, 4000f3d8 <_vfiprintf_r+0x618>
    4000f990:	f94043e2 	ldr	x2, [sp, #128]
    4000f994:	92400c01 	and	x1, x0, #0xf
    4000f998:	d344fc00 	lsr	x0, x0, #4
    4000f99c:	38616841 	ldrb	w1, [x2, x1]
    4000f9a0:	381fff21 	strb	w1, [x25, #-1]!
    4000f9a4:	b5fffea0 	cbnz	x0, 4000f978 <_vfiprintf_r+0xbb8>
    4000f9a8:	17fffe8c 	b	4000f3d8 <_vfiprintf_r+0x618>
    4000f9ac:	910383e2 	add	x2, sp, #0xe0
    4000f9b0:	aa1c03e1 	mov	x1, x28
    4000f9b4:	aa1503e0 	mov	x0, x21
    4000f9b8:	9400032e 	bl	40010670 <__sfvwrite_r>
    4000f9bc:	b900ebff 	str	wzr, [sp, #232]
    4000f9c0:	f9007bff 	str	xzr, [sp, #240]
    4000f9c4:	34ffb2e0 	cbz	w0, 4000f020 <_vfiprintf_r+0x260>
    4000f9c8:	17fffe12 	b	4000f210 <_vfiprintf_r+0x450>
    4000f9cc:	7100411f 	cmp	w8, #0x10
    4000f9d0:	5400354d 	b.le	40010078 <_vfiprintf_r+0x12b8>
    4000f9d4:	900000ac 	adrp	x12, 40023000 <fpi.1>
    4000f9d8:	d280020f 	mov	x15, #0x10                  	// #16
    4000f9dc:	9101e18c 	add	x12, x12, #0x78
    4000f9e0:	14000008 	b	4000fa00 <_vfiprintf_r+0xc40>
    4000f9e4:	11000810 	add	w16, w0, #0x2
    4000f9e8:	91004084 	add	x4, x4, #0x10
    4000f9ec:	2a0103e0 	mov	w0, w1
    4000f9f0:	51004108 	sub	w8, w8, #0x10
    4000f9f4:	7100411f 	cmp	w8, #0x10
    4000f9f8:	540001ed 	b.le	4000fa34 <_vfiprintf_r+0xc74>
    4000f9fc:	11000401 	add	w1, w0, #0x1
    4000fa00:	91004063 	add	x3, x3, #0x10
    4000fa04:	a9003c8c 	stp	x12, x15, [x4]
    4000fa08:	b900ebe1 	str	w1, [sp, #232]
    4000fa0c:	f9007be3 	str	x3, [sp, #240]
    4000fa10:	71001c3f 	cmp	w1, #0x7
    4000fa14:	54fffe8d 	b.le	4000f9e4 <_vfiprintf_r+0xc24>
    4000fa18:	b5000243 	cbnz	x3, 4000fa60 <_vfiprintf_r+0xca0>
    4000fa1c:	51004108 	sub	w8, w8, #0x10
    4000fa20:	aa1b03e4 	mov	x4, x27
    4000fa24:	52800000 	mov	w0, #0x0                   	// #0
    4000fa28:	52800030 	mov	w16, #0x1                   	// #1
    4000fa2c:	7100411f 	cmp	w8, #0x10
    4000fa30:	54fffe6c 	b.gt	4000f9fc <_vfiprintf_r+0xc3c>
    4000fa34:	93407d08 	sxtw	x8, w8
    4000fa38:	a900208c 	stp	x12, x8, [x4]
    4000fa3c:	8b080063 	add	x3, x3, x8
    4000fa40:	b900ebf0 	str	w16, [sp, #232]
    4000fa44:	f9007be3 	str	x3, [sp, #240]
    4000fa48:	71001e1f 	cmp	w16, #0x7
    4000fa4c:	54ffe1cc 	b.gt	4000f684 <_vfiprintf_r+0x8c4>
    4000fa50:	91004084 	add	x4, x4, #0x10
    4000fa54:	11000602 	add	w2, w16, #0x1
    4000fa58:	2a1003e0 	mov	w0, w16
    4000fa5c:	17fffd44 	b	4000ef6c <_vfiprintf_r+0x1ac>
    4000fa60:	910383e2 	add	x2, sp, #0xe0
    4000fa64:	aa1c03e1 	mov	x1, x28
    4000fa68:	aa1503e0 	mov	x0, x21
    4000fa6c:	b90073f2 	str	w18, [sp, #112]
    4000fa70:	b9007bee 	str	w14, [sp, #120]
    4000fa74:	b90093e5 	str	w5, [sp, #144]
    4000fa78:	b9009fe8 	str	w8, [sp, #156]
    4000fa7c:	f90053ec 	str	x12, [sp, #160]
    4000fa80:	940002fc 	bl	40010670 <__sfvwrite_r>
    4000fa84:	b900ebff 	str	wzr, [sp, #232]
    4000fa88:	f9007bff 	str	xzr, [sp, #240]
    4000fa8c:	35ffbc20 	cbnz	w0, 4000f210 <_vfiprintf_r+0x450>
    4000fa90:	b94073f2 	ldr	w18, [sp, #112]
    4000fa94:	aa1b03e4 	mov	x4, x27
    4000fa98:	b9407bee 	ldr	w14, [sp, #120]
    4000fa9c:	52800030 	mov	w16, #0x1                   	// #1
    4000faa0:	b94093e5 	ldr	w5, [sp, #144]
    4000faa4:	d2800003 	mov	x3, #0x0                   	// #0
    4000faa8:	b9409fe8 	ldr	w8, [sp, #156]
    4000faac:	d280020f 	mov	x15, #0x10                  	// #16
    4000fab0:	f94053ec 	ldr	x12, [sp, #160]
    4000fab4:	17ffffcf 	b	4000f9f0 <_vfiprintf_r+0xc30>
    4000fab8:	910383e2 	add	x2, sp, #0xe0
    4000fabc:	aa1c03e1 	mov	x1, x28
    4000fac0:	aa1503e0 	mov	x0, x21
    4000fac4:	f9003bec 	str	x12, [sp, #112]
    4000fac8:	940002ea 	bl	40010670 <__sfvwrite_r>
    4000facc:	b900ebff 	str	wzr, [sp, #232]
    4000fad0:	f9007bff 	str	xzr, [sp, #240]
    4000fad4:	35ffb9e0 	cbnz	w0, 4000f210 <_vfiprintf_r+0x450>
    4000fad8:	aa1b03e4 	mov	x4, x27
    4000fadc:	52800022 	mov	w2, #0x1                   	// #1
    4000fae0:	d2800003 	mov	x3, #0x0                   	// #0
    4000fae4:	f9403bec 	ldr	x12, [sp, #112]
    4000fae8:	17ffff65 	b	4000f87c <_vfiprintf_r+0xabc>
    4000faec:	b4000103 	cbz	x3, 4000fb0c <_vfiprintf_r+0xd4c>
    4000faf0:	910383e2 	add	x2, sp, #0xe0
    4000faf4:	aa1c03e1 	mov	x1, x28
    4000faf8:	aa1503e0 	mov	x0, x21
    4000fafc:	940002dd 	bl	40010670 <__sfvwrite_r>
    4000fb00:	b900ebff 	str	wzr, [sp, #232]
    4000fb04:	f9007bff 	str	xzr, [sp, #240]
    4000fb08:	35ffb840 	cbnz	w0, 4000f210 <_vfiprintf_r+0x450>
    4000fb0c:	93407e63 	sxtw	x3, w19
    4000fb10:	52800020 	mov	w0, #0x1                   	// #1
    4000fb14:	aa1b03e4 	mov	x4, x27
    4000fb18:	b900ebe0 	str	w0, [sp, #232]
    4000fb1c:	f9007be3 	str	x3, [sp, #240]
    4000fb20:	a9120ff9 	stp	x25, x3, [sp, #288]
    4000fb24:	17ffff47 	b	4000f840 <_vfiprintf_r+0xa80>
    4000fb28:	2a1403e3 	mov	w3, w20
    4000fb2c:	d503201f 	nop
    4000fb30:	f100241f 	cmp	x0, #0x9
    4000fb34:	54001808 	b.hi	4000fe34 <_vfiprintf_r+0x1074>  // b.pmore
    4000fb38:	1100c000 	add	w0, w0, #0x30
    4000fb3c:	2a0303f4 	mov	w20, w3
    4000fb40:	91047ff9 	add	x25, sp, #0x11f
    4000fb44:	52800033 	mov	w19, #0x1                   	// #1
    4000fb48:	39047fe0 	strb	w0, [sp, #287]
    4000fb4c:	17fffd8f 	b	4000f188 <_vfiprintf_r+0x3c8>
    4000fb50:	d2800040 	mov	x0, #0x2                   	// #2
    4000fb54:	aa1b03e4 	mov	x4, x27
    4000fb58:	aa0003e3 	mov	x3, x0
    4000fb5c:	910363e1 	add	x1, sp, #0xd8
    4000fb60:	52800022 	mov	w2, #0x1                   	// #1
    4000fb64:	a91203e1 	stp	x1, x0, [sp, #288]
    4000fb68:	2a0203e0 	mov	w0, w2
    4000fb6c:	91004084 	add	x4, x4, #0x10
    4000fb70:	11000402 	add	w2, w0, #0x1
    4000fb74:	17fffd1b 	b	4000efe0 <_vfiprintf_r+0x220>
    4000fb78:	d2800041 	mov	x1, #0x2                   	// #2
    4000fb7c:	910363e2 	add	x2, sp, #0xd8
    4000fb80:	aa0103e3 	mov	x3, x1
    4000fb84:	aa1b03e4 	mov	x4, x27
    4000fb88:	52800020 	mov	w0, #0x1                   	// #1
    4000fb8c:	a91207e2 	stp	x2, x1, [sp, #288]
    4000fb90:	17fffff7 	b	4000fb6c <_vfiprintf_r+0xdac>
    4000fb94:	910383e2 	add	x2, sp, #0xe0
    4000fb98:	aa1c03e1 	mov	x1, x28
    4000fb9c:	aa1503e0 	mov	x0, x21
    4000fba0:	b90073ee 	str	w14, [sp, #112]
    4000fba4:	b9007be5 	str	w5, [sp, #120]
    4000fba8:	940002b2 	bl	40010670 <__sfvwrite_r>
    4000fbac:	b900ebff 	str	wzr, [sp, #232]
    4000fbb0:	f9007bff 	str	xzr, [sp, #240]
    4000fbb4:	35ffb2e0 	cbnz	w0, 4000f210 <_vfiprintf_r+0x450>
    4000fbb8:	b94073ee 	ldr	w14, [sp, #112]
    4000fbbc:	aa1b03e4 	mov	x4, x27
    4000fbc0:	b9407be5 	ldr	w5, [sp, #120]
    4000fbc4:	52800022 	mov	w2, #0x1                   	// #1
    4000fbc8:	d2800003 	mov	x3, #0x0                   	// #0
    4000fbcc:	17fffd05 	b	4000efe0 <_vfiprintf_r+0x220>
    4000fbd0:	aa1b03f9 	mov	x25, x27
    4000fbd4:	52800005 	mov	w5, #0x0                   	// #0
    4000fbd8:	17fffd6c 	b	4000f188 <_vfiprintf_r+0x3c8>
    4000fbdc:	2a1403e3 	mov	w3, w20
    4000fbe0:	17fffdee 	b	4000f398 <_vfiprintf_r+0x5d8>
    4000fbe4:	b9409be0 	ldr	w0, [sp, #152]
    4000fbe8:	11002001 	add	w1, w0, #0x8
    4000fbec:	7100003f 	cmp	w1, #0x0
    4000fbf0:	54000f0d 	b.le	4000fdd0 <_vfiprintf_r+0x1010>
    4000fbf4:	f94037e0 	ldr	x0, [sp, #104]
    4000fbf8:	b9009be1 	str	w1, [sp, #152]
    4000fbfc:	91003c02 	add	x2, x0, #0xf
    4000fc00:	927df041 	and	x1, x2, #0xfffffffffffffff8
    4000fc04:	f90037e1 	str	x1, [sp, #104]
    4000fc08:	17fffdda 	b	4000f370 <_vfiprintf_r+0x5b0>
    4000fc0c:	b9409be0 	ldr	w0, [sp, #152]
    4000fc10:	11002002 	add	w2, w0, #0x8
    4000fc14:	7100005f 	cmp	w2, #0x0
    4000fc18:	54000bed 	b.le	4000fd94 <_vfiprintf_r+0xfd4>
    4000fc1c:	f94037e0 	ldr	x0, [sp, #104]
    4000fc20:	b9009be2 	str	w2, [sp, #152]
    4000fc24:	91003c07 	add	x7, x0, #0xf
    4000fc28:	927df0e2 	and	x2, x7, #0xfffffffffffffff8
    4000fc2c:	f90037e2 	str	x2, [sp, #104]
    4000fc30:	17fffe32 	b	4000f4f8 <_vfiprintf_r+0x738>
    4000fc34:	b5000923 	cbnz	x3, 4000fd58 <_vfiprintf_r+0xf98>
    4000fc38:	4b1300a5 	sub	w5, w5, w19
    4000fc3c:	710000bf 	cmp	w5, #0x0
    4000fc40:	54fff66d 	b.le	4000fb0c <_vfiprintf_r+0xd4c>
    4000fc44:	aa1b03e4 	mov	x4, x27
    4000fc48:	d2800003 	mov	x3, #0x0                   	// #0
    4000fc4c:	52800000 	mov	w0, #0x0                   	// #0
    4000fc50:	52800022 	mov	w2, #0x1                   	// #1
    4000fc54:	17fffed3 	b	4000f7a0 <_vfiprintf_r+0x9e0>
    4000fc58:	d1000842 	sub	x2, x2, #0x2
    4000fc5c:	52800600 	mov	w0, #0x30                  	// #48
    4000fc60:	2a0303f4 	mov	w20, w3
    4000fc64:	4b020373 	sub	w19, w27, w2
    4000fc68:	381ff320 	sturb	w0, [x25, #-1]
    4000fc6c:	aa0203f9 	mov	x25, x2
    4000fc70:	17fffd46 	b	4000f188 <_vfiprintf_r+0x3c8>
    4000fc74:	f9405380 	ldr	x0, [x28, #160]
    4000fc78:	940037b8 	bl	4001db58 <__retarget_lock_acquire_recursive>
    4000fc7c:	79402380 	ldrh	w0, [x28, #16]
    4000fc80:	17fffc67 	b	4000ee1c <_vfiprintf_r+0x5c>
    4000fc84:	35fff672 	cbnz	w18, 4000fb50 <_vfiprintf_r+0xd90>
    4000fc88:	aa1b03e4 	mov	x4, x27
    4000fc8c:	52800000 	mov	w0, #0x0                   	// #0
    4000fc90:	d2800003 	mov	x3, #0x0                   	// #0
    4000fc94:	52800022 	mov	w2, #0x1                   	// #1
    4000fc98:	17fffcd4 	b	4000efe8 <_vfiprintf_r+0x228>
    4000fc9c:	910383e2 	add	x2, sp, #0xe0
    4000fca0:	aa1c03e1 	mov	x1, x28
    4000fca4:	aa1503e0 	mov	x0, x21
    4000fca8:	b90073f2 	str	w18, [sp, #112]
    4000fcac:	b9007bee 	str	w14, [sp, #120]
    4000fcb0:	b90093e5 	str	w5, [sp, #144]
    4000fcb4:	9400026f 	bl	40010670 <__sfvwrite_r>
    4000fcb8:	b900ebff 	str	wzr, [sp, #232]
    4000fcbc:	f9007bff 	str	xzr, [sp, #240]
    4000fcc0:	b94073f2 	ldr	w18, [sp, #112]
    4000fcc4:	b9407bee 	ldr	w14, [sp, #120]
    4000fcc8:	b94093e5 	ldr	w5, [sp, #144]
    4000fccc:	35ffaa20 	cbnz	w0, 4000f210 <_vfiprintf_r+0x450>
    4000fcd0:	39435fe0 	ldrb	w0, [sp, #215]
    4000fcd4:	35ffcde0 	cbnz	w0, 4000f690 <_vfiprintf_r+0x8d0>
    4000fcd8:	17ffffeb 	b	4000fc84 <_vfiprintf_r+0xec4>
    4000fcdc:	910383e2 	add	x2, sp, #0xe0
    4000fce0:	aa1c03e1 	mov	x1, x28
    4000fce4:	aa1503e0 	mov	x0, x21
    4000fce8:	94000262 	bl	40010670 <__sfvwrite_r>
    4000fcec:	b900ebff 	str	wzr, [sp, #232]
    4000fcf0:	f9007bff 	str	xzr, [sp, #240]
    4000fcf4:	35ffa8e0 	cbnz	w0, 4000f210 <_vfiprintf_r+0x450>
    4000fcf8:	6b17031f 	cmp	w24, w23
    4000fcfc:	1a97a307 	csel	w7, w24, w23, ge  // ge = tcont
    4000fd00:	0b0702d6 	add	w22, w22, w7
    4000fd04:	17fffcd8 	b	4000f064 <_vfiprintf_r+0x2a4>
    4000fd08:	b9409be0 	ldr	w0, [sp, #152]
    4000fd0c:	11002001 	add	w1, w0, #0x8
    4000fd10:	7100003f 	cmp	w1, #0x0
    4000fd14:	540018cd 	b.le	4001002c <_vfiprintf_r+0x126c>
    4000fd18:	f94037e0 	ldr	x0, [sp, #104]
    4000fd1c:	b9009be1 	str	w1, [sp, #152]
    4000fd20:	91003c02 	add	x2, x0, #0xf
    4000fd24:	927df041 	and	x1, x2, #0xfffffffffffffff8
    4000fd28:	f90037e1 	str	x1, [sp, #104]
    4000fd2c:	17fffdd6 	b	4000f484 <_vfiprintf_r+0x6c4>
    4000fd30:	aa1903e0 	mov	x0, x25
    4000fd34:	97ffc583 	bl	40001340 <strlen>
    4000fd38:	b94073e3 	ldr	w3, [sp, #112]
    4000fd3c:	2a0003f3 	mov	w19, w0
    4000fd40:	39435fe8 	ldrb	w8, [sp, #215]
    4000fd44:	52800005 	mov	w5, #0x0                   	// #0
    4000fd48:	f90037f4 	str	x20, [sp, #104]
    4000fd4c:	2a0303f4 	mov	w20, w3
    4000fd50:	f9403fe4 	ldr	x4, [sp, #120]
    4000fd54:	17fffd0d 	b	4000f188 <_vfiprintf_r+0x3c8>
    4000fd58:	910383e2 	add	x2, sp, #0xe0
    4000fd5c:	aa1c03e1 	mov	x1, x28
    4000fd60:	aa1503e0 	mov	x0, x21
    4000fd64:	b90073e5 	str	w5, [sp, #112]
    4000fd68:	f9003fe8 	str	x8, [sp, #120]
    4000fd6c:	94000241 	bl	40010670 <__sfvwrite_r>
    4000fd70:	b900ebff 	str	wzr, [sp, #232]
    4000fd74:	f9007bff 	str	xzr, [sp, #240]
    4000fd78:	b94073e5 	ldr	w5, [sp, #112]
    4000fd7c:	f9403fe8 	ldr	x8, [sp, #120]
    4000fd80:	35ffa480 	cbnz	w0, 4000f210 <_vfiprintf_r+0x450>
    4000fd84:	4b1300a5 	sub	w5, w5, w19
    4000fd88:	710000bf 	cmp	w5, #0x0
    4000fd8c:	54ffec0d 	b.le	4000fb0c <_vfiprintf_r+0xd4c>
    4000fd90:	17ffffad 	b	4000fc44 <_vfiprintf_r+0xe84>
    4000fd94:	f94057e6 	ldr	x6, [sp, #168]
    4000fd98:	b9409be0 	ldr	w0, [sp, #152]
    4000fd9c:	b9009be2 	str	w2, [sp, #152]
    4000fda0:	8b20c0c0 	add	x0, x6, w0, sxtw
    4000fda4:	17fffdd5 	b	4000f4f8 <_vfiprintf_r+0x738>
    4000fda8:	f94057e2 	ldr	x2, [sp, #168]
    4000fdac:	b9409be0 	ldr	w0, [sp, #152]
    4000fdb0:	b9009be1 	str	w1, [sp, #152]
    4000fdb4:	8b20c040 	add	x0, x2, w0, sxtw
    4000fdb8:	17fffd01 	b	4000f1bc <_vfiprintf_r+0x3fc>
    4000fdbc:	f94057e2 	ldr	x2, [sp, #168]
    4000fdc0:	b9409be0 	ldr	w0, [sp, #152]
    4000fdc4:	b9009be1 	str	w1, [sp, #152]
    4000fdc8:	8b20c040 	add	x0, x2, w0, sxtw
    4000fdcc:	17fffcde 	b	4000f144 <_vfiprintf_r+0x384>
    4000fdd0:	f94057e2 	ldr	x2, [sp, #168]
    4000fdd4:	b9409be0 	ldr	w0, [sp, #152]
    4000fdd8:	b9009be1 	str	w1, [sp, #152]
    4000fddc:	8b20c040 	add	x0, x2, w0, sxtw
    4000fde0:	17fffd64 	b	4000f370 <_vfiprintf_r+0x5b0>
    4000fde4:	b9409be0 	ldr	w0, [sp, #152]
    4000fde8:	11002001 	add	w1, w0, #0x8
    4000fdec:	7100003f 	cmp	w1, #0x0
    4000fdf0:	54000bcd 	b.le	4000ff68 <_vfiprintf_r+0x11a8>
    4000fdf4:	f94037e0 	ldr	x0, [sp, #104]
    4000fdf8:	b9009be1 	str	w1, [sp, #152]
    4000fdfc:	91002c02 	add	x2, x0, #0xb
    4000fe00:	927df041 	and	x1, x2, #0xfffffffffffffff8
    4000fe04:	f90037e1 	str	x1, [sp, #104]
    4000fe08:	17fffdf9 	b	4000f5ec <_vfiprintf_r+0x82c>
    4000fe0c:	b9409be0 	ldr	w0, [sp, #152]
    4000fe10:	11002000 	add	w0, w0, #0x8
    4000fe14:	7100001f 	cmp	w0, #0x0
    4000fe18:	54000c0d 	b.le	4000ff98 <_vfiprintf_r+0x11d8>
    4000fe1c:	f94037e1 	ldr	x1, [sp, #104]
    4000fe20:	b9009be0 	str	w0, [sp, #152]
    4000fe24:	91003c22 	add	x2, x1, #0xf
    4000fe28:	927df040 	and	x0, x2, #0xfffffffffffffff8
    4000fe2c:	f90037e0 	str	x0, [sp, #104]
    4000fe30:	17fffde0 	b	4000f5b0 <_vfiprintf_r+0x7f0>
    4000fe34:	aa1b03f9 	mov	x25, x27
    4000fe38:	b202e7e1 	mov	x1, #0xcccccccccccccccc    	// #-3689348814741910324
    4000fe3c:	aa0003e7 	mov	x7, x0
    4000fe40:	f29999a1 	movk	x1, #0xcccd
    4000fe44:	9bc17c02 	umulh	x2, x0, x1
    4000fe48:	d343fc42 	lsr	x2, x2, #3
    4000fe4c:	8b020841 	add	x1, x2, x2, lsl #2
    4000fe50:	cb010401 	sub	x1, x0, x1, lsl #1
    4000fe54:	aa0203e0 	mov	x0, x2
    4000fe58:	1100c021 	add	w1, w1, #0x30
    4000fe5c:	381fff21 	strb	w1, [x25, #-1]!
    4000fe60:	f10024ff 	cmp	x7, #0x9
    4000fe64:	54fffea8 	b.hi	4000fe38 <_vfiprintf_r+0x1078>  // b.pmore
    4000fe68:	2a0303f4 	mov	w20, w3
    4000fe6c:	4b190373 	sub	w19, w27, w25
    4000fe70:	17fffcc6 	b	4000f188 <_vfiprintf_r+0x3c8>
    4000fe74:	b9409be0 	ldr	w0, [sp, #152]
    4000fe78:	11002001 	add	w1, w0, #0x8
    4000fe7c:	7100003f 	cmp	w1, #0x0
    4000fe80:	540007ed 	b.le	4000ff7c <_vfiprintf_r+0x11bc>
    4000fe84:	f94037e0 	ldr	x0, [sp, #104]
    4000fe88:	b9009be1 	str	w1, [sp, #152]
    4000fe8c:	91002c00 	add	x0, x0, #0xb
    4000fe90:	927df000 	and	x0, x0, #0xfffffffffffffff8
    4000fe94:	17fffd59 	b	4000f3f8 <_vfiprintf_r+0x638>
    4000fe98:	b9409be0 	ldr	w0, [sp, #152]
    4000fe9c:	11002000 	add	w0, w0, #0x8
    4000fea0:	7100001f 	cmp	w0, #0x0
    4000fea4:	5400084d 	b.le	4000ffac <_vfiprintf_r+0x11ec>
    4000fea8:	f94037e1 	ldr	x1, [sp, #104]
    4000feac:	b9009be0 	str	w0, [sp, #152]
    4000feb0:	91003c34 	add	x20, x1, #0xf
    4000feb4:	927df294 	and	x20, x20, #0xfffffffffffffff8
    4000feb8:	17fffd9e 	b	4000f530 <_vfiprintf_r+0x770>
    4000febc:	39400741 	ldrb	w1, [x26, #1]
    4000fec0:	321b0063 	orr	w3, w3, #0x20
    4000fec4:	9100075a 	add	x26, x26, #0x1
    4000fec8:	17fffc0e 	b	4000ef00 <_vfiprintf_r+0x140>
    4000fecc:	710018bf 	cmp	w5, #0x6
    4000fed0:	528000d3 	mov	w19, #0x6                   	// #6
    4000fed4:	1a9390b3 	csel	w19, w5, w19, ls  // ls = plast
    4000fed8:	f0000089 	adrp	x9, 40022000 <__pow_log_data+0xcc8>
    4000fedc:	2a1303f7 	mov	w23, w19
    4000fee0:	91354139 	add	x25, x9, #0xd50
    4000fee4:	f90037f4 	str	x20, [sp, #104]
    4000fee8:	17fffc11 	b	4000ef2c <_vfiprintf_r+0x16c>
    4000feec:	37f81140 	tbnz	w0, #31, 40010114 <_vfiprintf_r+0x1354>
    4000fef0:	f94037e0 	ldr	x0, [sp, #104]
    4000fef4:	91002c01 	add	x1, x0, #0xb
    4000fef8:	927df021 	and	x1, x1, #0xfffffffffffffff8
    4000fefc:	f90037e1 	str	x1, [sp, #104]
    4000ff00:	b9400000 	ldr	w0, [x0]
    4000ff04:	52800002 	mov	w2, #0x0                   	// #0
    4000ff08:	17fffc91 	b	4000f14c <_vfiprintf_r+0x38c>
    4000ff0c:	37f81540 	tbnz	w0, #31, 400101b4 <_vfiprintf_r+0x13f4>
    4000ff10:	f94037e0 	ldr	x0, [sp, #104]
    4000ff14:	91002c02 	add	x2, x0, #0xb
    4000ff18:	927df042 	and	x2, x2, #0xfffffffffffffff8
    4000ff1c:	b9400000 	ldr	w0, [x0]
    4000ff20:	f90037e2 	str	x2, [sp, #104]
    4000ff24:	17fffd76 	b	4000f4fc <_vfiprintf_r+0x73c>
    4000ff28:	37f811e0 	tbnz	w0, #31, 40010164 <_vfiprintf_r+0x13a4>
    4000ff2c:	f94037e0 	ldr	x0, [sp, #104]
    4000ff30:	91002c01 	add	x1, x0, #0xb
    4000ff34:	927df021 	and	x1, x1, #0xfffffffffffffff8
    4000ff38:	f90037e1 	str	x1, [sp, #104]
    4000ff3c:	b9800000 	ldrsw	x0, [x0]
    4000ff40:	aa0003e1 	mov	x1, x0
    4000ff44:	17fffcfa 	b	4000f32c <_vfiprintf_r+0x56c>
    4000ff48:	37f80a80 	tbnz	w0, #31, 40010098 <_vfiprintf_r+0x12d8>
    4000ff4c:	f94037e0 	ldr	x0, [sp, #104]
    4000ff50:	91002c01 	add	x1, x0, #0xb
    4000ff54:	927df021 	and	x1, x1, #0xfffffffffffffff8
    4000ff58:	f90037e1 	str	x1, [sp, #104]
    4000ff5c:	b9400000 	ldr	w0, [x0]
    4000ff60:	52800022 	mov	w2, #0x1                   	// #1
    4000ff64:	17fffc7a 	b	4000f14c <_vfiprintf_r+0x38c>
    4000ff68:	f94057e2 	ldr	x2, [sp, #168]
    4000ff6c:	b9409be0 	ldr	w0, [sp, #152]
    4000ff70:	b9009be1 	str	w1, [sp, #152]
    4000ff74:	8b20c040 	add	x0, x2, w0, sxtw
    4000ff78:	17fffd9d 	b	4000f5ec <_vfiprintf_r+0x82c>
    4000ff7c:	f94057e6 	ldr	x6, [sp, #168]
    4000ff80:	b9409be0 	ldr	w0, [sp, #152]
    4000ff84:	b9009be1 	str	w1, [sp, #152]
    4000ff88:	8b20c0c9 	add	x9, x6, w0, sxtw
    4000ff8c:	f94037e0 	ldr	x0, [sp, #104]
    4000ff90:	f90037e9 	str	x9, [sp, #104]
    4000ff94:	17fffd19 	b	4000f3f8 <_vfiprintf_r+0x638>
    4000ff98:	f94057e2 	ldr	x2, [sp, #168]
    4000ff9c:	b9409be1 	ldr	w1, [sp, #152]
    4000ffa0:	b9009be0 	str	w0, [sp, #152]
    4000ffa4:	8b21c041 	add	x1, x2, w1, sxtw
    4000ffa8:	17fffd82 	b	4000f5b0 <_vfiprintf_r+0x7f0>
    4000ffac:	f94057e2 	ldr	x2, [sp, #168]
    4000ffb0:	b9409be1 	ldr	w1, [sp, #152]
    4000ffb4:	b9009be0 	str	w0, [sp, #152]
    4000ffb8:	f94037f4 	ldr	x20, [sp, #104]
    4000ffbc:	8b21c041 	add	x1, x2, w1, sxtw
    4000ffc0:	f90037e1 	str	x1, [sp, #104]
    4000ffc4:	17fffd5b 	b	4000f530 <_vfiprintf_r+0x770>
    4000ffc8:	37f81180 	tbnz	w0, #31, 400101f8 <_vfiprintf_r+0x1438>
    4000ffcc:	f94037e0 	ldr	x0, [sp, #104]
    4000ffd0:	91003c01 	add	x1, x0, #0xf
    4000ffd4:	927df021 	and	x1, x1, #0xfffffffffffffff8
    4000ffd8:	f90037e1 	str	x1, [sp, #104]
    4000ffdc:	f9400000 	ldr	x0, [x0]
    4000ffe0:	b9000016 	str	w22, [x0]
    4000ffe4:	17fffb9f 	b	4000ee60 <_vfiprintf_r+0xa0>
    4000ffe8:	321c0063 	orr	w3, w3, #0x10
    4000ffec:	39035fe7 	strb	w7, [sp, #215]
    4000fff0:	17fffcc4 	b	4000f300 <_vfiprintf_r+0x540>
    4000fff4:	39035fe7 	strb	w7, [sp, #215]
    4000fff8:	17fffbc7 	b	4000ef14 <_vfiprintf_r+0x154>
    4000fffc:	aa1503e0 	mov	x0, x21
    40010000:	910383e2 	add	x2, sp, #0xe0
    40010004:	aa1c03e1 	mov	x1, x28
    40010008:	9400019a 	bl	40010670 <__sfvwrite_r>
    4001000c:	b900ebff 	str	wzr, [sp, #232]
    40010010:	f9007bff 	str	xzr, [sp, #240]
    40010014:	35ff8fe0 	cbnz	w0, 4000f210 <_vfiprintf_r+0x450>
    40010018:	b900ebff 	str	wzr, [sp, #232]
    4001001c:	17fffc7d 	b	4000f210 <_vfiprintf_r+0x450>
    40010020:	f9405380 	ldr	x0, [x28, #160]
    40010024:	940036cf 	bl	4001db60 <__retarget_lock_release_recursive>
    40010028:	17fffc2e 	b	4000f0e0 <_vfiprintf_r+0x320>
    4001002c:	f94057e2 	ldr	x2, [sp, #168]
    40010030:	b9409be0 	ldr	w0, [sp, #152]
    40010034:	b9009be1 	str	w1, [sp, #152]
    40010038:	8b20c040 	add	x0, x2, w0, sxtw
    4001003c:	17fffd12 	b	4000f484 <_vfiprintf_r+0x6c4>
    40010040:	2a0503f3 	mov	w19, w5
    40010044:	39435fe8 	ldrb	w8, [sp, #215]
    40010048:	52800005 	mov	w5, #0x0                   	// #0
    4001004c:	f90037f4 	str	x20, [sp, #104]
    40010050:	2a0303f4 	mov	w20, w3
    40010054:	17fffc4d 	b	4000f188 <_vfiprintf_r+0x3c8>
    40010058:	39035fe7 	strb	w7, [sp, #215]
    4001005c:	17fffcf9 	b	4000f440 <_vfiprintf_r+0x680>
    40010060:	39035fe7 	strb	w7, [sp, #215]
    40010064:	17fffca7 	b	4000f300 <_vfiprintf_r+0x540>
    40010068:	39035fe7 	strb	w7, [sp, #215]
    4001006c:	17fffd68 	b	4000f60c <_vfiprintf_r+0x84c>
    40010070:	39035fe7 	strb	w7, [sp, #215]
    40010074:	17fffd0e 	b	4000f4ac <_vfiprintf_r+0x6ec>
    40010078:	f000008c 	adrp	x12, 40023000 <fpi.1>
    4001007c:	2a0103f0 	mov	w16, w1
    40010080:	9101e18c 	add	x12, x12, #0x78
    40010084:	17fffe6c 	b	4000fa34 <_vfiprintf_r+0xc74>
    40010088:	f000008c 	adrp	x12, 40023000 <fpi.1>
    4001008c:	11000402 	add	w2, w0, #0x1
    40010090:	9101e18c 	add	x12, x12, #0x78
    40010094:	17fffe0b 	b	4000f8c0 <_vfiprintf_r+0xb00>
    40010098:	b9409be0 	ldr	w0, [sp, #152]
    4001009c:	11002001 	add	w1, w0, #0x8
    400100a0:	7100003f 	cmp	w1, #0x0
    400100a4:	54000f0d 	b.le	40010284 <_vfiprintf_r+0x14c4>
    400100a8:	f94037e0 	ldr	x0, [sp, #104]
    400100ac:	b9009be1 	str	w1, [sp, #152]
    400100b0:	91002c02 	add	x2, x0, #0xb
    400100b4:	927df041 	and	x1, x2, #0xfffffffffffffff8
    400100b8:	f90037e1 	str	x1, [sp, #104]
    400100bc:	17ffffa8 	b	4000ff5c <_vfiprintf_r+0x119c>
    400100c0:	b9409be0 	ldr	w0, [sp, #152]
    400100c4:	11002001 	add	w1, w0, #0x8
    400100c8:	7100003f 	cmp	w1, #0x0
    400100cc:	54000bed 	b.le	40010248 <_vfiprintf_r+0x1488>
    400100d0:	f94037e0 	ldr	x0, [sp, #104]
    400100d4:	b9009be1 	str	w1, [sp, #152]
    400100d8:	91002c02 	add	x2, x0, #0xb
    400100dc:	927df041 	and	x1, x2, #0xfffffffffffffff8
    400100e0:	f90037e1 	str	x1, [sp, #104]
    400100e4:	17fffc63 	b	4000f270 <_vfiprintf_r+0x4b0>
    400100e8:	b9409be0 	ldr	w0, [sp, #152]
    400100ec:	11002002 	add	w2, w0, #0x8
    400100f0:	7100005f 	cmp	w2, #0x0
    400100f4:	54000f2d 	b.le	400102d8 <_vfiprintf_r+0x1518>
    400100f8:	f94037e0 	ldr	x0, [sp, #104]
    400100fc:	b9009be2 	str	w2, [sp, #152]
    40010100:	91002c07 	add	x7, x0, #0xb
    40010104:	927df0e2 	and	x2, x7, #0xfffffffffffffff8
    40010108:	79400000 	ldrh	w0, [x0]
    4001010c:	f90037e2 	str	x2, [sp, #104]
    40010110:	17fffcfb 	b	4000f4fc <_vfiprintf_r+0x73c>
    40010114:	b9409be0 	ldr	w0, [sp, #152]
    40010118:	11002001 	add	w1, w0, #0x8
    4001011c:	7100003f 	cmp	w1, #0x0
    40010120:	540009ed 	b.le	4001025c <_vfiprintf_r+0x149c>
    40010124:	f94037e0 	ldr	x0, [sp, #104]
    40010128:	b9009be1 	str	w1, [sp, #152]
    4001012c:	91002c02 	add	x2, x0, #0xb
    40010130:	927df041 	and	x1, x2, #0xfffffffffffffff8
    40010134:	f90037e1 	str	x1, [sp, #104]
    40010138:	17ffff72 	b	4000ff00 <_vfiprintf_r+0x1140>
    4001013c:	b9409be0 	ldr	w0, [sp, #152]
    40010140:	11002001 	add	w1, w0, #0x8
    40010144:	7100003f 	cmp	w1, #0x0
    40010148:	54000b4d 	b.le	400102b0 <_vfiprintf_r+0x14f0>
    4001014c:	f94037e0 	ldr	x0, [sp, #104]
    40010150:	b9009be1 	str	w1, [sp, #152]
    40010154:	91002c02 	add	x2, x0, #0xb
    40010158:	927df041 	and	x1, x2, #0xfffffffffffffff8
    4001015c:	f90037e1 	str	x1, [sp, #104]
    40010160:	17fffc4e 	b	4000f298 <_vfiprintf_r+0x4d8>
    40010164:	b9409be0 	ldr	w0, [sp, #152]
    40010168:	11002001 	add	w1, w0, #0x8
    4001016c:	7100003f 	cmp	w1, #0x0
    40010170:	5400080d 	b.le	40010270 <_vfiprintf_r+0x14b0>
    40010174:	f94037e0 	ldr	x0, [sp, #104]
    40010178:	b9009be1 	str	w1, [sp, #152]
    4001017c:	91002c02 	add	x2, x0, #0xb
    40010180:	927df041 	and	x1, x2, #0xfffffffffffffff8
    40010184:	f90037e1 	str	x1, [sp, #104]
    40010188:	17ffff6d 	b	4000ff3c <_vfiprintf_r+0x117c>
    4001018c:	b9409be0 	ldr	w0, [sp, #152]
    40010190:	11002001 	add	w1, w0, #0x8
    40010194:	7100003f 	cmp	w1, #0x0
    40010198:	5400096d 	b.le	400102c4 <_vfiprintf_r+0x1504>
    4001019c:	f94037e0 	ldr	x0, [sp, #104]
    400101a0:	b9009be1 	str	w1, [sp, #152]
    400101a4:	91002c02 	add	x2, x0, #0xb
    400101a8:	927df041 	and	x1, x2, #0xfffffffffffffff8
    400101ac:	f90037e1 	str	x1, [sp, #104]
    400101b0:	17fffc5d 	b	4000f324 <_vfiprintf_r+0x564>
    400101b4:	b9409be0 	ldr	w0, [sp, #152]
    400101b8:	11002002 	add	w2, w0, #0x8
    400101bc:	7100005f 	cmp	w2, #0x0
    400101c0:	540006cd 	b.le	40010298 <_vfiprintf_r+0x14d8>
    400101c4:	f94037e0 	ldr	x0, [sp, #104]
    400101c8:	b9009be2 	str	w2, [sp, #152]
    400101cc:	91002c07 	add	x7, x0, #0xb
    400101d0:	927df0e2 	and	x2, x7, #0xfffffffffffffff8
    400101d4:	b9400000 	ldr	w0, [x0]
    400101d8:	f90037e2 	str	x2, [sp, #104]
    400101dc:	17fffcc8 	b	4000f4fc <_vfiprintf_r+0x73c>
    400101e0:	f0000088 	adrp	x8, 40023000 <fpi.1>
    400101e4:	2a0203ef 	mov	w15, w2
    400101e8:	91022108 	add	x8, x8, #0x88
    400101ec:	17fffd5e 	b	4000f764 <_vfiprintf_r+0x9a4>
    400101f0:	12800016 	mov	w22, #0xffffffff            	// #-1
    400101f4:	17fffc0c 	b	4000f224 <_vfiprintf_r+0x464>
    400101f8:	b9409be0 	ldr	w0, [sp, #152]
    400101fc:	11002001 	add	w1, w0, #0x8
    40010200:	7100003f 	cmp	w1, #0x0
    40010204:	5400080d 	b.le	40010304 <_vfiprintf_r+0x1544>
    40010208:	f94037e0 	ldr	x0, [sp, #104]
    4001020c:	b9009be1 	str	w1, [sp, #152]
    40010210:	91003c02 	add	x2, x0, #0xf
    40010214:	927df041 	and	x1, x2, #0xfffffffffffffff8
    40010218:	f90037e1 	str	x1, [sp, #104]
    4001021c:	17ffff70 	b	4000ffdc <_vfiprintf_r+0x121c>
    40010220:	b9409be0 	ldr	w0, [sp, #152]
    40010224:	11002001 	add	w1, w0, #0x8
    40010228:	7100003f 	cmp	w1, #0x0
    4001022c:	5400062d 	b.le	400102f0 <_vfiprintf_r+0x1530>
    40010230:	f94037e0 	ldr	x0, [sp, #104]
    40010234:	b9009be1 	str	w1, [sp, #152]
    40010238:	91003c02 	add	x2, x0, #0xf
    4001023c:	927df041 	and	x1, x2, #0xfffffffffffffff8
    40010240:	f90037e1 	str	x1, [sp, #104]
    40010244:	17fffc88 	b	4000f464 <_vfiprintf_r+0x6a4>
    40010248:	f94057e2 	ldr	x2, [sp, #168]
    4001024c:	b9409be0 	ldr	w0, [sp, #152]
    40010250:	b9009be1 	str	w1, [sp, #152]
    40010254:	8b20c040 	add	x0, x2, w0, sxtw
    40010258:	17fffc06 	b	4000f270 <_vfiprintf_r+0x4b0>
    4001025c:	f94057e2 	ldr	x2, [sp, #168]
    40010260:	b9409be0 	ldr	w0, [sp, #152]
    40010264:	b9009be1 	str	w1, [sp, #152]
    40010268:	8b20c040 	add	x0, x2, w0, sxtw
    4001026c:	17ffff25 	b	4000ff00 <_vfiprintf_r+0x1140>
    40010270:	f94057e2 	ldr	x2, [sp, #168]
    40010274:	b9409be0 	ldr	w0, [sp, #152]
    40010278:	b9009be1 	str	w1, [sp, #152]
    4001027c:	8b20c040 	add	x0, x2, w0, sxtw
    40010280:	17ffff2f 	b	4000ff3c <_vfiprintf_r+0x117c>
    40010284:	f94057e2 	ldr	x2, [sp, #168]
    40010288:	b9409be0 	ldr	w0, [sp, #152]
    4001028c:	b9009be1 	str	w1, [sp, #152]
    40010290:	8b20c040 	add	x0, x2, w0, sxtw
    40010294:	17ffff32 	b	4000ff5c <_vfiprintf_r+0x119c>
    40010298:	f94057e6 	ldr	x6, [sp, #168]
    4001029c:	b9409be0 	ldr	w0, [sp, #152]
    400102a0:	b9009be2 	str	w2, [sp, #152]
    400102a4:	8b20c0c0 	add	x0, x6, w0, sxtw
    400102a8:	b9400000 	ldr	w0, [x0]
    400102ac:	17fffc94 	b	4000f4fc <_vfiprintf_r+0x73c>
    400102b0:	f94057e2 	ldr	x2, [sp, #168]
    400102b4:	b9409be0 	ldr	w0, [sp, #152]
    400102b8:	b9009be1 	str	w1, [sp, #152]
    400102bc:	8b20c040 	add	x0, x2, w0, sxtw
    400102c0:	17fffbf6 	b	4000f298 <_vfiprintf_r+0x4d8>
    400102c4:	f94057e2 	ldr	x2, [sp, #168]
    400102c8:	b9409be0 	ldr	w0, [sp, #152]
    400102cc:	b9009be1 	str	w1, [sp, #152]
    400102d0:	8b20c040 	add	x0, x2, w0, sxtw
    400102d4:	17fffc14 	b	4000f324 <_vfiprintf_r+0x564>
    400102d8:	f94057e6 	ldr	x6, [sp, #168]
    400102dc:	b9409be0 	ldr	w0, [sp, #152]
    400102e0:	b9009be2 	str	w2, [sp, #152]
    400102e4:	8b20c0c0 	add	x0, x6, w0, sxtw
    400102e8:	79400000 	ldrh	w0, [x0]
    400102ec:	17fffc84 	b	4000f4fc <_vfiprintf_r+0x73c>
    400102f0:	f94057e2 	ldr	x2, [sp, #168]
    400102f4:	b9409be0 	ldr	w0, [sp, #152]
    400102f8:	b9009be1 	str	w1, [sp, #152]
    400102fc:	8b20c040 	add	x0, x2, w0, sxtw
    40010300:	17fffc59 	b	4000f464 <_vfiprintf_r+0x6a4>
    40010304:	f94057e2 	ldr	x2, [sp, #168]
    40010308:	b9409be0 	ldr	w0, [sp, #152]
    4001030c:	b9009be1 	str	w1, [sp, #152]
    40010310:	8b20c040 	add	x0, x2, w0, sxtw
    40010314:	17ffff32 	b	4000ffdc <_vfiprintf_r+0x121c>
    40010318:	b9409be0 	ldr	w0, [sp, #152]
    4001031c:	37f80260 	tbnz	w0, #31, 40010368 <_vfiprintf_r+0x15a8>
    40010320:	f94037e0 	ldr	x0, [sp, #104]
    40010324:	91002c01 	add	x1, x0, #0xb
    40010328:	927df021 	and	x1, x1, #0xfffffffffffffff8
    4001032c:	f90037e1 	str	x1, [sp, #104]
    40010330:	b9400005 	ldr	w5, [x0]
    40010334:	39400741 	ldrb	w1, [x26, #1]
    40010338:	aa0903fa 	mov	x26, x9
    4001033c:	710000bf 	cmp	w5, #0x0
    40010340:	1a88a0a5 	csel	w5, w5, w8, ge  // ge = tcont
    40010344:	17fffaef 	b	4000ef00 <_vfiprintf_r+0x140>
    40010348:	b940b380 	ldr	w0, [x28, #176]
    4001034c:	3707f520 	tbnz	w0, #0, 400101f0 <_vfiprintf_r+0x1430>
    40010350:	79402380 	ldrh	w0, [x28, #16]
    40010354:	374ff4e0 	tbnz	w0, #9, 400101f0 <_vfiprintf_r+0x1430>
    40010358:	f9405380 	ldr	x0, [x28, #160]
    4001035c:	12800016 	mov	w22, #0xffffffff            	// #-1
    40010360:	94003600 	bl	4001db60 <__retarget_lock_release_recursive>
    40010364:	17fffbb0 	b	4000f224 <_vfiprintf_r+0x464>
    40010368:	b9409be0 	ldr	w0, [sp, #152]
    4001036c:	11002001 	add	w1, w0, #0x8
    40010370:	7100003f 	cmp	w1, #0x0
    40010374:	540000ed 	b.le	40010390 <_vfiprintf_r+0x15d0>
    40010378:	f94037e0 	ldr	x0, [sp, #104]
    4001037c:	b9009be1 	str	w1, [sp, #152]
    40010380:	91002c05 	add	x5, x0, #0xb
    40010384:	927df0a1 	and	x1, x5, #0xfffffffffffffff8
    40010388:	f90037e1 	str	x1, [sp, #104]
    4001038c:	17ffffe9 	b	40010330 <_vfiprintf_r+0x1570>
    40010390:	f94057e5 	ldr	x5, [sp, #168]
    40010394:	b9409be0 	ldr	w0, [sp, #152]
    40010398:	b9009be1 	str	w1, [sp, #152]
    4001039c:	8b20c0a0 	add	x0, x5, w0, sxtw
    400103a0:	17ffffe4 	b	40010330 <_vfiprintf_r+0x1570>
	...

00000000400103b0 <__sbprintf>:
    400103b0:	d11443ff 	sub	sp, sp, #0x510
    400103b4:	a9007bfd 	stp	x29, x30, [sp]
    400103b8:	910003fd 	mov	x29, sp
    400103bc:	a90153f3 	stp	x19, x20, [sp, #16]
    400103c0:	aa0103f3 	mov	x19, x1
    400103c4:	79402021 	ldrh	w1, [x1, #16]
    400103c8:	aa0303f4 	mov	x20, x3
    400103cc:	910443e3 	add	x3, sp, #0x110
    400103d0:	79402667 	ldrh	w7, [x19, #18]
    400103d4:	121e7821 	and	w1, w1, #0xfffffffd
    400103d8:	b940b264 	ldr	w4, [x19, #176]
    400103dc:	f9401a66 	ldr	x6, [x19, #48]
    400103e0:	a9025bf5 	stp	x21, x22, [sp, #32]
    400103e4:	aa0203f6 	mov	x22, x2
    400103e8:	f9402265 	ldr	x5, [x19, #64]
    400103ec:	52808002 	mov	w2, #0x400                 	// #1024
    400103f0:	aa0003f5 	mov	x21, x0
    400103f4:	9103e3e0 	add	x0, sp, #0xf8
    400103f8:	f9002fe3 	str	x3, [sp, #88]
    400103fc:	b90067e2 	str	w2, [sp, #100]
    40010400:	7900d3e1 	strh	w1, [sp, #104]
    40010404:	7900d7e7 	strh	w7, [sp, #106]
    40010408:	f9003be3 	str	x3, [sp, #112]
    4001040c:	b9007be2 	str	w2, [sp, #120]
    40010410:	b90083ff 	str	wzr, [sp, #128]
    40010414:	f90047e6 	str	x6, [sp, #136]
    40010418:	f9004fe5 	str	x5, [sp, #152]
    4001041c:	b9010be4 	str	w4, [sp, #264]
    40010420:	940035c3 	bl	4001db2c <__retarget_lock_init_recursive>
    40010424:	a9401e86 	ldp	x6, x7, [x20]
    40010428:	aa1603e2 	mov	x2, x22
    4001042c:	a9411684 	ldp	x4, x5, [x20, #16]
    40010430:	9100c3e3 	add	x3, sp, #0x30
    40010434:	aa1503e0 	mov	x0, x21
    40010438:	910163e1 	add	x1, sp, #0x58
    4001043c:	a9031fe6 	stp	x6, x7, [sp, #48]
    40010440:	a90417e4 	stp	x4, x5, [sp, #64]
    40010444:	97fffa5f 	bl	4000edc0 <_vfiprintf_r>
    40010448:	2a0003f4 	mov	w20, w0
    4001044c:	37f800c0 	tbnz	w0, #31, 40010464 <__sbprintf+0xb4>
    40010450:	910163e1 	add	x1, sp, #0x58
    40010454:	aa1503e0 	mov	x0, x21
    40010458:	97ffc87e 	bl	40002650 <_fflush_r>
    4001045c:	7100001f 	cmp	w0, #0x0
    40010460:	5a9f0294 	csinv	w20, w20, wzr, eq  // eq = none
    40010464:	7940d3e0 	ldrh	w0, [sp, #104]
    40010468:	36300080 	tbz	w0, #6, 40010478 <__sbprintf+0xc8>
    4001046c:	79402260 	ldrh	w0, [x19, #16]
    40010470:	321a0000 	orr	w0, w0, #0x40
    40010474:	79002260 	strh	w0, [x19, #16]
    40010478:	f9407fe0 	ldr	x0, [sp, #248]
    4001047c:	940035b6 	bl	4001db54 <__retarget_lock_close_recursive>
    40010480:	2a1403e0 	mov	w0, w20
    40010484:	a9407bfd 	ldp	x29, x30, [sp]
    40010488:	a94153f3 	ldp	x19, x20, [sp, #16]
    4001048c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40010490:	911443ff 	add	sp, sp, #0x510
    40010494:	d65f03c0 	ret
	...

00000000400104a0 <__ascii_wctomb>:
    400104a0:	aa0003e3 	mov	x3, x0
    400104a4:	b4000141 	cbz	x1, 400104cc <__ascii_wctomb+0x2c>
    400104a8:	7103fc5f 	cmp	w2, #0xff
    400104ac:	54000088 	b.hi	400104bc <__ascii_wctomb+0x1c>  // b.pmore
    400104b0:	52800020 	mov	w0, #0x1                   	// #1
    400104b4:	39000022 	strb	w2, [x1]
    400104b8:	d65f03c0 	ret
    400104bc:	52801141 	mov	w1, #0x8a                  	// #138
    400104c0:	12800000 	mov	w0, #0xffffffff            	// #-1
    400104c4:	b9000061 	str	w1, [x3]
    400104c8:	d65f03c0 	ret
    400104cc:	52800000 	mov	w0, #0x0                   	// #0
    400104d0:	d65f03c0 	ret
	...

00000000400104e0 <__assert_func>:
    400104e0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    400104e4:	d00005e4 	adrp	x4, 400ce000 <z_interrupt_stacks+0x440>
    400104e8:	aa0003e7 	mov	x7, x0
    400104ec:	910003fd 	mov	x29, sp
    400104f0:	f9461485 	ldr	x5, [x4, #3112]
    400104f4:	aa0203e6 	mov	x6, x2
    400104f8:	2a0103e4 	mov	w4, w1
    400104fc:	aa0303e2 	mov	x2, x3
    40010500:	f9400ca0 	ldr	x0, [x5, #24]
    40010504:	b4000106 	cbz	x6, 40010524 <__assert_func+0x44>
    40010508:	f0000085 	adrp	x5, 40023000 <fpi.1>
    4001050c:	910260a5 	add	x5, x5, #0x98
    40010510:	aa0703e3 	mov	x3, x7
    40010514:	f0000081 	adrp	x1, 40023000 <fpi.1>
    40010518:	9102a021 	add	x1, x1, #0xa8
    4001051c:	94000031 	bl	400105e0 <fiprintf>
    40010520:	94000664 	bl	40011eb0 <abort>
    40010524:	d0000085 	adrp	x5, 40022000 <__pow_log_data+0xcc8>
    40010528:	913520a5 	add	x5, x5, #0xd48
    4001052c:	aa0503e6 	mov	x6, x5
    40010530:	17fffff8 	b	40010510 <__assert_func+0x30>
	...

0000000040010540 <_calloc_r>:
    40010540:	9b027c21 	mul	x1, x1, x2
    40010544:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    40010548:	910003fd 	mov	x29, sp
    4001054c:	f9000bf3 	str	x19, [sp, #16]
    40010550:	97ffcc94 	bl	400037a0 <_malloc_r>
    40010554:	aa0003f3 	mov	x19, x0
    40010558:	b4000140 	cbz	x0, 40010580 <_calloc_r+0x40>
    4001055c:	f85f8002 	ldur	x2, [x0, #-8]
    40010560:	927ef442 	and	x2, x2, #0xfffffffffffffffc
    40010564:	d1002042 	sub	x2, x2, #0x8
    40010568:	f101205f 	cmp	x2, #0x48
    4001056c:	54000288 	b.hi	400105bc <_calloc_r+0x7c>  // b.pmore
    40010570:	f1009c5f 	cmp	x2, #0x27
    40010574:	540000e8 	b.hi	40010590 <_calloc_r+0x50>  // b.pmore
    40010578:	a9007c1f 	stp	xzr, xzr, [x0]
    4001057c:	f900081f 	str	xzr, [x0, #16]
    40010580:	aa1303e0 	mov	x0, x19
    40010584:	f9400bf3 	ldr	x19, [sp, #16]
    40010588:	a8c27bfd 	ldp	x29, x30, [sp], #32
    4001058c:	d65f03c0 	ret
    40010590:	a9007c1f 	stp	xzr, xzr, [x0]
    40010594:	91004000 	add	x0, x0, #0x10
    40010598:	f100dc5f 	cmp	x2, #0x37
    4001059c:	54fffee9 	b.ls	40010578 <_calloc_r+0x38>  // b.plast
    400105a0:	a9017e7f 	stp	xzr, xzr, [x19, #16]
    400105a4:	91008260 	add	x0, x19, #0x20
    400105a8:	f101205f 	cmp	x2, #0x48
    400105ac:	54fffe61 	b.ne	40010578 <_calloc_r+0x38>  // b.any
    400105b0:	9100c260 	add	x0, x19, #0x30
    400105b4:	a9027e7f 	stp	xzr, xzr, [x19, #32]
    400105b8:	17fffff0 	b	40010578 <_calloc_r+0x38>
    400105bc:	52800001 	mov	w1, #0x0                   	// #0
    400105c0:	97ffc2e0 	bl	40001140 <memset>
    400105c4:	aa1303e0 	mov	x0, x19
    400105c8:	f9400bf3 	ldr	x19, [sp, #16]
    400105cc:	a8c27bfd 	ldp	x29, x30, [sp], #32
    400105d0:	d65f03c0 	ret
	...

00000000400105e0 <fiprintf>:
    400105e0:	a9b07bfd 	stp	x29, x30, [sp, #-256]!
    400105e4:	d00005e8 	adrp	x8, 400ce000 <z_interrupt_stacks+0x440>
    400105e8:	aa0003eb 	mov	x11, x0
    400105ec:	910003fd 	mov	x29, sp
    400105f0:	910343ec 	add	x12, sp, #0xd0
    400105f4:	910403ea 	add	x10, sp, #0x100
    400105f8:	f9461500 	ldr	x0, [x8, #3112]
    400105fc:	128005e9 	mov	w9, #0xffffffd0            	// #-48
    40010600:	12800fe8 	mov	w8, #0xffffff80            	// #-128
    40010604:	a9032bea 	stp	x10, x10, [sp, #48]
    40010608:	aa0103ea 	mov	x10, x1
    4001060c:	f90023ec 	str	x12, [sp, #64]
    40010610:	aa0b03e1 	mov	x1, x11
    40010614:	290923e9 	stp	w9, w8, [sp, #72]
    40010618:	a94337ec 	ldp	x12, x13, [sp, #48]
    4001061c:	a90137ec 	stp	x12, x13, [sp, #16]
    40010620:	a94427e8 	ldp	x8, x9, [sp, #64]
    40010624:	a90227e8 	stp	x8, x9, [sp, #32]
    40010628:	3d8017e0 	str	q0, [sp, #80]
    4001062c:	3d801be1 	str	q1, [sp, #96]
    40010630:	3d801fe2 	str	q2, [sp, #112]
    40010634:	3d8023e3 	str	q3, [sp, #128]
    40010638:	3d8027e4 	str	q4, [sp, #144]
    4001063c:	3d802be5 	str	q5, [sp, #160]
    40010640:	3d802fe6 	str	q6, [sp, #176]
    40010644:	3d8033e7 	str	q7, [sp, #192]
    40010648:	a90d0fe2 	stp	x2, x3, [sp, #208]
    4001064c:	910043e3 	add	x3, sp, #0x10
    40010650:	aa0a03e2 	mov	x2, x10
    40010654:	a90e17e4 	stp	x4, x5, [sp, #224]
    40010658:	a90f1fe6 	stp	x6, x7, [sp, #240]
    4001065c:	97fff9d9 	bl	4000edc0 <_vfiprintf_r>
    40010660:	a8d07bfd 	ldp	x29, x30, [sp], #256
    40010664:	d65f03c0 	ret
	...

0000000040010670 <__sfvwrite_r>:
    40010670:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    40010674:	910003fd 	mov	x29, sp
    40010678:	a90363f7 	stp	x23, x24, [sp, #48]
    4001067c:	aa0003f7 	mov	x23, x0
    40010680:	f9400840 	ldr	x0, [x2, #16]
    40010684:	b4000460 	cbz	x0, 40010710 <__sfvwrite_r+0xa0>
    40010688:	79402023 	ldrh	w3, [x1, #16]
    4001068c:	aa0203f8 	mov	x24, x2
    40010690:	a90153f3 	stp	x19, x20, [sp, #16]
    40010694:	aa0103f3 	mov	x19, x1
    40010698:	36180443 	tbz	w3, #3, 40010720 <__sfvwrite_r+0xb0>
    4001069c:	f9400c20 	ldr	x0, [x1, #24]
    400106a0:	b4000400 	cbz	x0, 40010720 <__sfvwrite_r+0xb0>
    400106a4:	a9025bf5 	stp	x21, x22, [sp, #32]
    400106a8:	a9046bf9 	stp	x25, x26, [sp, #64]
    400106ac:	f9400314 	ldr	x20, [x24]
    400106b0:	360804a3 	tbz	w3, #1, 40010744 <__sfvwrite_r+0xd4>
    400106b4:	d2800016 	mov	x22, #0x0                   	// #0
    400106b8:	d2800015 	mov	x21, #0x0                   	// #0
    400106bc:	b27653f9 	mov	x25, #0x7ffffc00            	// #2147482624
    400106c0:	eb1902bf 	cmp	x21, x25
    400106c4:	aa1603e2 	mov	x2, x22
    400106c8:	9a9992a3 	csel	x3, x21, x25, ls  // ls = plast
    400106cc:	aa1703e0 	mov	x0, x23
    400106d0:	b4000875 	cbz	x21, 400107dc <__sfvwrite_r+0x16c>
    400106d4:	f9401a61 	ldr	x1, [x19, #48]
    400106d8:	f9402264 	ldr	x4, [x19, #64]
    400106dc:	d63f0080 	blr	x4
    400106e0:	7100001f 	cmp	w0, #0x0
    400106e4:	5400206d 	b.le	40010af0 <__sfvwrite_r+0x480>
    400106e8:	f9400b01 	ldr	x1, [x24, #16]
    400106ec:	93407c00 	sxtw	x0, w0
    400106f0:	8b0002d6 	add	x22, x22, x0
    400106f4:	cb0002b5 	sub	x21, x21, x0
    400106f8:	cb000020 	sub	x0, x1, x0
    400106fc:	f9000b00 	str	x0, [x24, #16]
    40010700:	b5fffe00 	cbnz	x0, 400106c0 <__sfvwrite_r+0x50>
    40010704:	a94153f3 	ldp	x19, x20, [sp, #16]
    40010708:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4001070c:	a9446bf9 	ldp	x25, x26, [sp, #64]
    40010710:	52800000 	mov	w0, #0x0                   	// #0
    40010714:	a94363f7 	ldp	x23, x24, [sp, #48]
    40010718:	a8c67bfd 	ldp	x29, x30, [sp], #96
    4001071c:	d65f03c0 	ret
    40010720:	aa1303e1 	mov	x1, x19
    40010724:	aa1703e0 	mov	x0, x23
    40010728:	97ffdee6 	bl	400082c0 <__swsetup_r>
    4001072c:	35001f00 	cbnz	w0, 40010b0c <__sfvwrite_r+0x49c>
    40010730:	79402263 	ldrh	w3, [x19, #16]
    40010734:	a9025bf5 	stp	x21, x22, [sp, #32]
    40010738:	a9046bf9 	stp	x25, x26, [sp, #64]
    4001073c:	f9400314 	ldr	x20, [x24]
    40010740:	370ffba3 	tbnz	w3, #1, 400106b4 <__sfvwrite_r+0x44>
    40010744:	a90573fb 	stp	x27, x28, [sp, #80]
    40010748:	37000503 	tbnz	w3, #0, 400107e8 <__sfvwrite_r+0x178>
    4001074c:	d280001c 	mov	x28, #0x0                   	// #0
    40010750:	d2800015 	mov	x21, #0x0                   	// #0
    40010754:	d503201f 	nop
    40010758:	b40003d5 	cbz	x21, 400107d0 <__sfvwrite_r+0x160>
    4001075c:	f9400266 	ldr	x6, [x19]
    40010760:	b9400e7a 	ldr	w26, [x19, #12]
    40010764:	aa0603e0 	mov	x0, x6
    40010768:	36480ac3 	tbz	w3, #9, 400108c0 <__sfvwrite_r+0x250>
    4001076c:	93407f5b 	sxtw	x27, w26
    40010770:	eb15037f 	cmp	x27, x21
    40010774:	540010c9 	b.ls	4001098c <__sfvwrite_r+0x31c>  // b.plast
    40010778:	93407ea1 	sxtw	x1, w21
    4001077c:	aa0103f6 	mov	x22, x1
    40010780:	aa0603e0 	mov	x0, x6
    40010784:	aa0103fb 	mov	x27, x1
    40010788:	2a1503fa 	mov	w26, w21
    4001078c:	aa1b03e2 	mov	x2, x27
    40010790:	aa1c03e1 	mov	x1, x28
    40010794:	97ffc37b 	bl	40001580 <memmove>
    40010798:	f9400261 	ldr	x1, [x19]
    4001079c:	b9400e60 	ldr	w0, [x19, #12]
    400107a0:	8b1b0022 	add	x2, x1, x27
    400107a4:	f9000262 	str	x2, [x19]
    400107a8:	4b1a0000 	sub	w0, w0, w26
    400107ac:	b9000e60 	str	w0, [x19, #12]
    400107b0:	f9400b00 	ldr	x0, [x24, #16]
    400107b4:	8b16039c 	add	x28, x28, x22
    400107b8:	cb1602b5 	sub	x21, x21, x22
    400107bc:	cb160016 	sub	x22, x0, x22
    400107c0:	f9000b16 	str	x22, [x24, #16]
    400107c4:	b40005d6 	cbz	x22, 4001087c <__sfvwrite_r+0x20c>
    400107c8:	79402263 	ldrh	w3, [x19, #16]
    400107cc:	b5fffc95 	cbnz	x21, 4001075c <__sfvwrite_r+0xec>
    400107d0:	a940569c 	ldp	x28, x21, [x20]
    400107d4:	91004294 	add	x20, x20, #0x10
    400107d8:	17ffffe0 	b	40010758 <__sfvwrite_r+0xe8>
    400107dc:	a9405696 	ldp	x22, x21, [x20]
    400107e0:	91004294 	add	x20, x20, #0x10
    400107e4:	17ffffb7 	b	400106c0 <__sfvwrite_r+0x50>
    400107e8:	5280001a 	mov	w26, #0x0                   	// #0
    400107ec:	52800000 	mov	w0, #0x0                   	// #0
    400107f0:	d280001b 	mov	x27, #0x0                   	// #0
    400107f4:	d2800019 	mov	x25, #0x0                   	// #0
    400107f8:	b40004d9 	cbz	x25, 40010890 <__sfvwrite_r+0x220>
    400107fc:	34000500 	cbz	w0, 4001089c <__sfvwrite_r+0x22c>
    40010800:	f9400260 	ldr	x0, [x19]
    40010804:	93407f56 	sxtw	x22, w26
    40010808:	f9400e61 	ldr	x1, [x19, #24]
    4001080c:	eb1902df 	cmp	x22, x25
    40010810:	b9400e75 	ldr	w21, [x19, #12]
    40010814:	9a9992d6 	csel	x22, x22, x25, ls  // ls = plast
    40010818:	b9402263 	ldr	w3, [x19, #32]
    4001081c:	eb01001f 	cmp	x0, x1
    40010820:	0b150075 	add	w21, w3, w21
    40010824:	7a5582c4 	ccmp	w22, w21, #0x4, hi  // hi = pmore
    40010828:	5400132c 	b.gt	40010a8c <__sfvwrite_r+0x41c>
    4001082c:	6b16007f 	cmp	w3, w22
    40010830:	5400116c 	b.gt	40010a5c <__sfvwrite_r+0x3ec>
    40010834:	f9401a61 	ldr	x1, [x19, #48]
    40010838:	aa1b03e2 	mov	x2, x27
    4001083c:	f9402264 	ldr	x4, [x19, #64]
    40010840:	aa1703e0 	mov	x0, x23
    40010844:	d63f0080 	blr	x4
    40010848:	2a0003f5 	mov	w21, w0
    4001084c:	7100001f 	cmp	w0, #0x0
    40010850:	5400088d 	b.le	40010960 <__sfvwrite_r+0x2f0>
    40010854:	6b15035a 	subs	w26, w26, w21
    40010858:	52800020 	mov	w0, #0x1                   	// #1
    4001085c:	54000f60 	b.eq	40010a48 <__sfvwrite_r+0x3d8>  // b.none
    40010860:	f9400b01 	ldr	x1, [x24, #16]
    40010864:	93407eb5 	sxtw	x21, w21
    40010868:	8b15037b 	add	x27, x27, x21
    4001086c:	cb150339 	sub	x25, x25, x21
    40010870:	cb150035 	sub	x21, x1, x21
    40010874:	f9000b15 	str	x21, [x24, #16]
    40010878:	b5fffc15 	cbnz	x21, 400107f8 <__sfvwrite_r+0x188>
    4001087c:	a94153f3 	ldp	x19, x20, [sp, #16]
    40010880:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40010884:	a9446bf9 	ldp	x25, x26, [sp, #64]
    40010888:	a94573fb 	ldp	x27, x28, [sp, #80]
    4001088c:	17ffffa1 	b	40010710 <__sfvwrite_r+0xa0>
    40010890:	a940669b 	ldp	x27, x25, [x20]
    40010894:	91004294 	add	x20, x20, #0x10
    40010898:	b4ffffd9 	cbz	x25, 40010890 <__sfvwrite_r+0x220>
    4001089c:	aa1903e2 	mov	x2, x25
    400108a0:	aa1b03e0 	mov	x0, x27
    400108a4:	52800141 	mov	w1, #0xa                   	// #10
    400108a8:	97ffc3db 	bl	40001814 <memchr>
    400108ac:	9100041a 	add	x26, x0, #0x1
    400108b0:	f100001f 	cmp	x0, #0x0
    400108b4:	cb1b035a 	sub	x26, x26, x27
    400108b8:	1a99175a 	csinc	w26, w26, w25, ne  // ne = any
    400108bc:	17ffffd1 	b	40010800 <__sfvwrite_r+0x190>
    400108c0:	f9400e60 	ldr	x0, [x19, #24]
    400108c4:	eb06001f 	cmp	x0, x6
    400108c8:	54000263 	b.cc	40010914 <__sfvwrite_r+0x2a4>  // b.lo, b.ul, b.last
    400108cc:	b9402263 	ldr	w3, [x19, #32]
    400108d0:	eb23c2bf 	cmp	x21, w3, sxtw
    400108d4:	54000203 	b.cc	40010914 <__sfvwrite_r+0x2a4>  // b.lo, b.ul, b.last
    400108d8:	b27f77e0 	mov	x0, #0x7ffffffe            	// #2147483646
    400108dc:	eb0002bf 	cmp	x21, x0
    400108e0:	b2407be0 	mov	x0, #0x7fffffff            	// #2147483647
    400108e4:	9a8092a4 	csel	x4, x21, x0, ls  // ls = plast
    400108e8:	f9401a61 	ldr	x1, [x19, #48]
    400108ec:	aa1c03e2 	mov	x2, x28
    400108f0:	1ac30c84 	sdiv	w4, w4, w3
    400108f4:	aa1703e0 	mov	x0, x23
    400108f8:	f9402266 	ldr	x6, [x19, #64]
    400108fc:	1b037c83 	mul	w3, w4, w3
    40010900:	d63f00c0 	blr	x6
    40010904:	7100001f 	cmp	w0, #0x0
    40010908:	540002cd 	b.le	40010960 <__sfvwrite_r+0x2f0>
    4001090c:	93407c16 	sxtw	x22, w0
    40010910:	17ffffa8 	b	400107b0 <__sfvwrite_r+0x140>
    40010914:	93407f44 	sxtw	x4, w26
    40010918:	aa1c03e1 	mov	x1, x28
    4001091c:	eb15009f 	cmp	x4, x21
    40010920:	aa0603e0 	mov	x0, x6
    40010924:	9a95909a 	csel	x26, x4, x21, ls  // ls = plast
    40010928:	93407f56 	sxtw	x22, w26
    4001092c:	aa1603e2 	mov	x2, x22
    40010930:	97ffc314 	bl	40001580 <memmove>
    40010934:	f9400261 	ldr	x1, [x19]
    40010938:	b9400e60 	ldr	w0, [x19, #12]
    4001093c:	8b160021 	add	x1, x1, x22
    40010940:	f9000261 	str	x1, [x19]
    40010944:	4b1a0004 	sub	w4, w0, w26
    40010948:	b9000e64 	str	w4, [x19, #12]
    4001094c:	35fff324 	cbnz	w4, 400107b0 <__sfvwrite_r+0x140>
    40010950:	aa1303e1 	mov	x1, x19
    40010954:	aa1703e0 	mov	x0, x23
    40010958:	97ffc73e 	bl	40002650 <_fflush_r>
    4001095c:	34fff2a0 	cbz	w0, 400107b0 <__sfvwrite_r+0x140>
    40010960:	a94573fb 	ldp	x27, x28, [sp, #80]
    40010964:	79c02261 	ldrsh	w1, [x19, #16]
    40010968:	321a0021 	orr	w1, w1, #0x40
    4001096c:	79002261 	strh	w1, [x19, #16]
    40010970:	12800000 	mov	w0, #0xffffffff            	// #-1
    40010974:	a94153f3 	ldp	x19, x20, [sp, #16]
    40010978:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4001097c:	a94363f7 	ldp	x23, x24, [sp, #48]
    40010980:	a9446bf9 	ldp	x25, x26, [sp, #64]
    40010984:	a8c67bfd 	ldp	x29, x30, [sp], #96
    40010988:	d65f03c0 	ret
    4001098c:	93407eb6 	sxtw	x22, w21
    40010990:	52809001 	mov	w1, #0x480                 	// #1152
    40010994:	6a01007f 	tst	w3, w1
    40010998:	54ffefa0 	b.eq	4001078c <__sfvwrite_r+0x11c>  // b.none
    4001099c:	b9402267 	ldr	w7, [x19, #32]
    400109a0:	f9400e61 	ldr	x1, [x19, #24]
    400109a4:	0b0704e7 	add	w7, w7, w7, lsl #1
    400109a8:	cb0100d6 	sub	x22, x6, x1
    400109ac:	0b477ce7 	add	w7, w7, w7, lsr #31
    400109b0:	93407ed9 	sxtw	x25, w22
    400109b4:	13017cfb 	asr	w27, w7, #1
    400109b8:	91000720 	add	x0, x25, #0x1
    400109bc:	8b150000 	add	x0, x0, x21
    400109c0:	93407f62 	sxtw	x2, w27
    400109c4:	eb00005f 	cmp	x2, x0
    400109c8:	54000082 	b.cs	400109d8 <__sfvwrite_r+0x368>  // b.hs, b.nlast
    400109cc:	110006c7 	add	w7, w22, #0x1
    400109d0:	0b1500fb 	add	w27, w7, w21
    400109d4:	93407f62 	sxtw	x2, w27
    400109d8:	36500723 	tbz	w3, #10, 40010abc <__sfvwrite_r+0x44c>
    400109dc:	aa0203e1 	mov	x1, x2
    400109e0:	aa1703e0 	mov	x0, x23
    400109e4:	97ffcb6f 	bl	400037a0 <_malloc_r>
    400109e8:	aa0003fa 	mov	x26, x0
    400109ec:	b4000860 	cbz	x0, 40010af8 <__sfvwrite_r+0x488>
    400109f0:	f9400e61 	ldr	x1, [x19, #24]
    400109f4:	aa1903e2 	mov	x2, x25
    400109f8:	97ffc172 	bl	40000fc0 <memcpy>
    400109fc:	79402260 	ldrh	w0, [x19, #16]
    40010a00:	12809001 	mov	w1, #0xfffffb7f            	// #-1153
    40010a04:	0a010000 	and	w0, w0, w1
    40010a08:	32190000 	orr	w0, w0, #0x80
    40010a0c:	79002260 	strh	w0, [x19, #16]
    40010a10:	8b190340 	add	x0, x26, x25
    40010a14:	4b160366 	sub	w6, w27, w22
    40010a18:	93407eb6 	sxtw	x22, w21
    40010a1c:	f9000260 	str	x0, [x19]
    40010a20:	b9000e66 	str	w6, [x19, #12]
    40010a24:	aa1603e1 	mov	x1, x22
    40010a28:	f9000e7a 	str	x26, [x19, #24]
    40010a2c:	aa0003e6 	mov	x6, x0
    40010a30:	b900227b 	str	w27, [x19, #32]
    40010a34:	2a1503fa 	mov	w26, w21
    40010a38:	eb1502df 	cmp	x22, x21
    40010a3c:	54ffea08 	b.hi	4001077c <__sfvwrite_r+0x10c>  // b.pmore
    40010a40:	aa1603fb 	mov	x27, x22
    40010a44:	17ffff52 	b	4001078c <__sfvwrite_r+0x11c>
    40010a48:	aa1303e1 	mov	x1, x19
    40010a4c:	aa1703e0 	mov	x0, x23
    40010a50:	97ffc700 	bl	40002650 <_fflush_r>
    40010a54:	34fff060 	cbz	w0, 40010860 <__sfvwrite_r+0x1f0>
    40010a58:	17ffffc2 	b	40010960 <__sfvwrite_r+0x2f0>
    40010a5c:	93407edc 	sxtw	x28, w22
    40010a60:	aa1b03e1 	mov	x1, x27
    40010a64:	aa1c03e2 	mov	x2, x28
    40010a68:	97ffc2c6 	bl	40001580 <memmove>
    40010a6c:	f9400260 	ldr	x0, [x19]
    40010a70:	2a1603f5 	mov	w21, w22
    40010a74:	b9400e61 	ldr	w1, [x19, #12]
    40010a78:	8b1c0000 	add	x0, x0, x28
    40010a7c:	f9000260 	str	x0, [x19]
    40010a80:	4b160036 	sub	w22, w1, w22
    40010a84:	b9000e76 	str	w22, [x19, #12]
    40010a88:	17ffff73 	b	40010854 <__sfvwrite_r+0x1e4>
    40010a8c:	93407eb6 	sxtw	x22, w21
    40010a90:	aa1b03e1 	mov	x1, x27
    40010a94:	aa1603e2 	mov	x2, x22
    40010a98:	97ffc2ba 	bl	40001580 <memmove>
    40010a9c:	f9400262 	ldr	x2, [x19]
    40010aa0:	aa1303e1 	mov	x1, x19
    40010aa4:	aa1703e0 	mov	x0, x23
    40010aa8:	8b160042 	add	x2, x2, x22
    40010aac:	f9000262 	str	x2, [x19]
    40010ab0:	97ffc6e8 	bl	40002650 <_fflush_r>
    40010ab4:	34ffed00 	cbz	w0, 40010854 <__sfvwrite_r+0x1e4>
    40010ab8:	17ffffaa 	b	40010960 <__sfvwrite_r+0x2f0>
    40010abc:	aa1703e0 	mov	x0, x23
    40010ac0:	94000328 	bl	40011760 <_realloc_r>
    40010ac4:	aa0003fa 	mov	x26, x0
    40010ac8:	b5fffa40 	cbnz	x0, 40010a10 <__sfvwrite_r+0x3a0>
    40010acc:	f9400e61 	ldr	x1, [x19, #24]
    40010ad0:	aa1703e0 	mov	x0, x23
    40010ad4:	97ffc8c7 	bl	40002df0 <_free_r>
    40010ad8:	79c02261 	ldrsh	w1, [x19, #16]
    40010adc:	52800180 	mov	w0, #0xc                   	// #12
    40010ae0:	a94573fb 	ldp	x27, x28, [sp, #80]
    40010ae4:	12187821 	and	w1, w1, #0xffffff7f
    40010ae8:	b90002e0 	str	w0, [x23]
    40010aec:	17ffff9f 	b	40010968 <__sfvwrite_r+0x2f8>
    40010af0:	79c02261 	ldrsh	w1, [x19, #16]
    40010af4:	17ffff9d 	b	40010968 <__sfvwrite_r+0x2f8>
    40010af8:	79c02261 	ldrsh	w1, [x19, #16]
    40010afc:	52800180 	mov	w0, #0xc                   	// #12
    40010b00:	a94573fb 	ldp	x27, x28, [sp, #80]
    40010b04:	b90002e0 	str	w0, [x23]
    40010b08:	17ffff98 	b	40010968 <__sfvwrite_r+0x2f8>
    40010b0c:	12800000 	mov	w0, #0xffffffff            	// #-1
    40010b10:	a94153f3 	ldp	x19, x20, [sp, #16]
    40010b14:	17ffff00 	b	40010714 <__sfvwrite_r+0xa4>
	...

0000000040010b20 <rshift>:
    40010b20:	b9401402 	ldr	w2, [x0, #20]
    40010b24:	13057c24 	asr	w4, w1, #5
    40010b28:	6b04005f 	cmp	w2, w4
    40010b2c:	5400056d 	b.le	40010bd8 <rshift+0xb8>
    40010b30:	91006006 	add	x6, x0, #0x18
    40010b34:	93407c43 	sxtw	x3, w2
    40010b38:	8b22c8c9 	add	x9, x6, w2, sxtw #2
    40010b3c:	72001025 	ands	w5, w1, #0x1f
    40010b40:	8b24c8c2 	add	x2, x6, w4, sxtw #2
    40010b44:	93407c88 	sxtw	x8, w4
    40010b48:	540004e0 	b.eq	40010be4 <rshift+0xc4>  // b.none
    40010b4c:	b86878c1 	ldr	w1, [x6, x8, lsl #2]
    40010b50:	91001042 	add	x2, x2, #0x4
    40010b54:	5280040a 	mov	w10, #0x20                  	// #32
    40010b58:	4b05014a 	sub	w10, w10, w5
    40010b5c:	1ac52424 	lsr	w4, w1, w5
    40010b60:	eb02013f 	cmp	x9, x2
    40010b64:	54000329 	b.ls	40010bc8 <rshift+0xa8>  // b.plast
    40010b68:	aa0603e7 	mov	x7, x6
    40010b6c:	d503201f 	nop
    40010b70:	b9400041 	ldr	w1, [x2]
    40010b74:	1aca2021 	lsl	w1, w1, w10
    40010b78:	2a040021 	orr	w1, w1, w4
    40010b7c:	b80044e1 	str	w1, [x7], #4
    40010b80:	b8404441 	ldr	w1, [x2], #4
    40010b84:	1ac52424 	lsr	w4, w1, w5
    40010b88:	eb02013f 	cmp	x9, x2
    40010b8c:	54ffff28 	b.hi	40010b70 <rshift+0x50>  // b.pmore
    40010b90:	cb080062 	sub	x2, x3, x8
    40010b94:	d37ef442 	lsl	x2, x2, #2
    40010b98:	d1001442 	sub	x2, x2, #0x5
    40010b9c:	d342fc42 	lsr	x2, x2, #2
    40010ba0:	91000442 	add	x2, x2, #0x1
    40010ba4:	8b0208c1 	add	x1, x6, x2, lsl #2
    40010ba8:	b82278c4 	str	w4, [x6, x2, lsl #2]
    40010bac:	340003a4 	cbz	w4, 40010c20 <rshift+0x100>
    40010bb0:	91001021 	add	x1, x1, #0x4
    40010bb4:	cb060026 	sub	x6, x1, x6
    40010bb8:	9342fcc6 	asr	x6, x6, #2
    40010bbc:	b9001406 	str	w6, [x0, #20]
    40010bc0:	340000e6 	cbz	w6, 40010bdc <rshift+0xbc>
    40010bc4:	d65f03c0 	ret
    40010bc8:	b9001804 	str	w4, [x0, #24]
    40010bcc:	aa0603e1 	mov	x1, x6
    40010bd0:	35ffff04 	cbnz	w4, 40010bb0 <rshift+0x90>
    40010bd4:	d503201f 	nop
    40010bd8:	b900141f 	str	wzr, [x0, #20]
    40010bdc:	b900181f 	str	wzr, [x0, #24]
    40010be0:	d65f03c0 	ret
    40010be4:	eb02013f 	cmp	x9, x2
    40010be8:	54ffff89 	b.ls	40010bd8 <rshift+0xb8>  // b.plast
    40010bec:	cb080063 	sub	x3, x3, x8
    40010bf0:	d2800001 	mov	x1, #0x0                   	// #0
    40010bf4:	d37ef463 	lsl	x3, x3, #2
    40010bf8:	d1000463 	sub	x3, x3, #0x1
    40010bfc:	d342fc63 	lsr	x3, x3, #2
    40010c00:	91000465 	add	x5, x3, #0x1
    40010c04:	d503201f 	nop
    40010c08:	b8617847 	ldr	w7, [x2, x1, lsl #2]
    40010c0c:	eb03003f 	cmp	x1, x3
    40010c10:	b82178c7 	str	w7, [x6, x1, lsl #2]
    40010c14:	91000421 	add	x1, x1, #0x1
    40010c18:	54ffff81 	b.ne	40010c08 <rshift+0xe8>  // b.any
    40010c1c:	8b0508c1 	add	x1, x6, x5, lsl #2
    40010c20:	cb060026 	sub	x6, x1, x6
    40010c24:	9342fcc6 	asr	x6, x6, #2
    40010c28:	b9001406 	str	w6, [x0, #20]
    40010c2c:	34fffd86 	cbz	w6, 40010bdc <rshift+0xbc>
    40010c30:	d65f03c0 	ret
	...

0000000040010c40 <__gethex>:
    40010c40:	a9b57bfd 	stp	x29, x30, [sp, #-176]!
    40010c44:	f0000086 	adrp	x6, 40023000 <fpi.1>
    40010c48:	910003fd 	mov	x29, sp
    40010c4c:	a9025bf5 	stp	x21, x22, [sp, #32]
    40010c50:	f94120d5 	ldr	x21, [x6, #576]
    40010c54:	a9046bf9 	stp	x25, x26, [sp, #64]
    40010c58:	aa0103fa 	mov	x26, x1
    40010c5c:	a90153f3 	stp	x19, x20, [sp, #16]
    40010c60:	a90363f7 	stp	x23, x24, [sp, #48]
    40010c64:	a90573fb 	stp	x27, x28, [sp, #80]
    40010c68:	a90683e2 	stp	x2, x0, [sp, #104]
    40010c6c:	aa1503e0 	mov	x0, x21
    40010c70:	f9003fe4 	str	x4, [sp, #120]
    40010c74:	f90047e3 	str	x3, [sp, #136]
    40010c78:	b90097e5 	str	w5, [sp, #148]
    40010c7c:	97ffc1b1 	bl	40001340 <strlen>
    40010c80:	f9400346 	ldr	x6, [x26]
    40010c84:	aa0003f8 	mov	x24, x0
    40010c88:	8b0002a0 	add	x0, x21, x0
    40010c8c:	394008c1 	ldrb	w1, [x6, #2]
    40010c90:	385ff017 	ldurb	w23, [x0, #-1]
    40010c94:	7100c03f 	cmp	w1, #0x30
    40010c98:	540031c1 	b.ne	400112d0 <__gethex+0x690>  // b.any
    40010c9c:	91000cc6 	add	x6, x6, #0x3
    40010ca0:	52800020 	mov	w0, #0x1                   	// #1
    40010ca4:	4b060000 	sub	w0, w0, w6
    40010ca8:	0b060019 	add	w25, w0, w6
    40010cac:	aa0603f6 	mov	x22, x6
    40010cb0:	384014c1 	ldrb	w1, [x6], #1
    40010cb4:	7100c03f 	cmp	w1, #0x30
    40010cb8:	54ffff80 	b.eq	40010ca8 <__gethex+0x68>  // b.none
    40010cbc:	f0000085 	adrp	x5, 40023000 <fpi.1>
    40010cc0:	910500b4 	add	x20, x5, #0x140
    40010cc4:	3861ca80 	ldrb	w0, [x20, w1, sxtw]
    40010cc8:	34001780 	cbz	w0, 40010fb8 <__gethex+0x378>
    40010ccc:	394002c0 	ldrb	w0, [x22]
    40010cd0:	52800006 	mov	w6, #0x0                   	// #0
    40010cd4:	d2800013 	mov	x19, #0x0                   	// #0
    40010cd8:	3860ca80 	ldrb	w0, [x20, w0, sxtw]
    40010cdc:	aa1603fb 	mov	x27, x22
    40010ce0:	340000a0 	cbz	w0, 40010cf4 <__gethex+0xb4>
    40010ce4:	d503201f 	nop
    40010ce8:	38401f60 	ldrb	w0, [x27, #1]!
    40010cec:	3860ca80 	ldrb	w0, [x20, w0, sxtw]
    40010cf0:	35ffffc0 	cbnz	w0, 40010ce8 <__gethex+0xa8>
    40010cf4:	aa1803e2 	mov	x2, x24
    40010cf8:	aa1503e1 	mov	x1, x21
    40010cfc:	aa1b03e0 	mov	x0, x27
    40010d00:	b90083e6 	str	w6, [sp, #128]
    40010d04:	97ffc256 	bl	4000165c <strncmp>
    40010d08:	2a0003fc 	mov	w28, w0
    40010d0c:	b94083e6 	ldr	w6, [sp, #128]
    40010d10:	34000e40 	cbz	w0, 40010ed8 <__gethex+0x298>
    40010d14:	cb13037c 	sub	x28, x27, x19
    40010d18:	f100027f 	cmp	x19, #0x0
    40010d1c:	39400361 	ldrb	w1, [x27]
    40010d20:	4b1c0bfc 	neg	w28, w28, lsl #2
    40010d24:	1a9f139c 	csel	w28, w28, wzr, ne  // ne = any
    40010d28:	121a7821 	and	w1, w1, #0xffffffdf
    40010d2c:	aa1b03f3 	mov	x19, x27
    40010d30:	7101403f 	cmp	w1, #0x50
    40010d34:	54000e20 	b.eq	40010ef8 <__gethex+0x2b8>  // b.none
    40010d38:	f900035b 	str	x27, [x26]
    40010d3c:	350011e6 	cbnz	w6, 40010f78 <__gethex+0x338>
    40010d40:	cb160263 	sub	x3, x19, x22
    40010d44:	52800001 	mov	w1, #0x0                   	// #0
    40010d48:	51000463 	sub	w3, w3, #0x1
    40010d4c:	71001c7f 	cmp	w3, #0x7
    40010d50:	540000cd 	b.le	40010d68 <__gethex+0x128>
    40010d54:	d503201f 	nop
    40010d58:	13017c63 	asr	w3, w3, #1
    40010d5c:	11000421 	add	w1, w1, #0x1
    40010d60:	71001c7f 	cmp	w3, #0x7
    40010d64:	54ffffac 	b.gt	40010d58 <__gethex+0x118>
    40010d68:	f9403be0 	ldr	x0, [sp, #112]
    40010d6c:	97ffe3ed 	bl	40009d20 <_Balloc>
    40010d70:	aa0003f9 	mov	x25, x0
    40010d74:	b40038e0 	cbz	x0, 40011490 <__gethex+0x850>
    40010d78:	9100601a 	add	x26, x0, #0x18
    40010d7c:	eb1302df 	cmp	x22, x19
    40010d80:	54002c02 	b.cs	40011300 <__gethex+0x6c0>  // b.hs, b.nlast
    40010d84:	d280002a 	mov	x10, #0x1                   	// #1
    40010d88:	aa1a03fb 	mov	x27, x26
    40010d8c:	cb18014a 	sub	x10, x10, x24
    40010d90:	52800006 	mov	w6, #0x0                   	// #0
    40010d94:	52800008 	mov	w8, #0x0                   	// #0
    40010d98:	1400000d 	b	40010dcc <__gethex+0x18c>
    40010d9c:	710080df 	cmp	w6, #0x20
    40010da0:	54001020 	b.eq	40010fa4 <__gethex+0x364>  // b.none
    40010da4:	2a0603e0 	mov	w0, w6
    40010da8:	110010c6 	add	w6, w6, #0x4
    40010dac:	385ff261 	ldurb	w1, [x19, #-1]
    40010db0:	aa0903f3 	mov	x19, x9
    40010db4:	3861ca81 	ldrb	w1, [x20, w1, sxtw]
    40010db8:	12000c21 	and	w1, w1, #0xf
    40010dbc:	1ac02021 	lsl	w1, w1, w0
    40010dc0:	2a010108 	orr	w8, w8, w1
    40010dc4:	eb16027f 	cmp	x19, x22
    40010dc8:	540002c9 	b.ls	40010e20 <__gethex+0x1e0>  // b.plast
    40010dcc:	385ff260 	ldurb	w0, [x19, #-1]
    40010dd0:	d1000669 	sub	x9, x19, #0x1
    40010dd4:	6b17001f 	cmp	w0, w23
    40010dd8:	54fffe21 	b.ne	40010d9c <__gethex+0x15c>  // b.any
    40010ddc:	8b0a012b 	add	x11, x9, x10
    40010de0:	eb16017f 	cmp	x11, x22
    40010de4:	54fffdc3 	b.cc	40010d9c <__gethex+0x15c>  // b.lo, b.ul, b.last
    40010de8:	aa0b03e0 	mov	x0, x11
    40010dec:	aa1803e2 	mov	x2, x24
    40010df0:	aa1503e1 	mov	x1, x21
    40010df4:	f90043eb 	str	x11, [sp, #128]
    40010df8:	29131be8 	stp	w8, w6, [sp, #152]
    40010dfc:	a90a2be9 	stp	x9, x10, [sp, #160]
    40010e00:	97ffc217 	bl	4000165c <strncmp>
    40010e04:	29531be8 	ldp	w8, w6, [sp, #152]
    40010e08:	f94043eb 	ldr	x11, [sp, #128]
    40010e0c:	a94a2be9 	ldp	x9, x10, [sp, #160]
    40010e10:	35fffc60 	cbnz	w0, 40010d9c <__gethex+0x15c>
    40010e14:	aa0b03f3 	mov	x19, x11
    40010e18:	eb16027f 	cmp	x19, x22
    40010e1c:	54fffd88 	b.hi	40010dcc <__gethex+0x18c>  // b.pmore
    40010e20:	b8004768 	str	w8, [x27], #4
    40010e24:	2a0803e0 	mov	w0, w8
    40010e28:	cb1a037b 	sub	x27, x27, x26
    40010e2c:	9342ff7b 	asr	x27, x27, #2
    40010e30:	b900173b 	str	w27, [x25, #20]
    40010e34:	97ffe47b 	bl	4000a020 <__hi0bits>
    40010e38:	531b6b7b 	lsl	w27, w27, #5
    40010e3c:	f94037e1 	ldr	x1, [sp, #104]
    40010e40:	4b00037b 	sub	w27, w27, w0
    40010e44:	b9400036 	ldr	w22, [x1]
    40010e48:	6b16037f 	cmp	w27, w22
    40010e4c:	5400120c 	b.gt	4001108c <__gethex+0x44c>
    40010e50:	52800015 	mov	w21, #0x0                   	// #0
    40010e54:	5400214b 	b.lt	4001127c <__gethex+0x63c>  // b.tstop
    40010e58:	f94037e0 	ldr	x0, [sp, #104]
    40010e5c:	b9400801 	ldr	w1, [x0, #8]
    40010e60:	6b1c003f 	cmp	w1, w28
    40010e64:	540023cb 	b.lt	400112dc <__gethex+0x69c>  // b.tstop
    40010e68:	f94037e0 	ldr	x0, [sp, #104]
    40010e6c:	b9400401 	ldr	w1, [x0, #4]
    40010e70:	6b1c003f 	cmp	w1, w28
    40010e74:	54000cad 	b.le	40011008 <__gethex+0x3c8>
    40010e78:	4b1c003c 	sub	w28, w1, w28
    40010e7c:	6b1c02df 	cmp	w22, w28
    40010e80:	5400132c 	b.gt	400110e4 <__gethex+0x4a4>
    40010e84:	b9400c00 	ldr	w0, [x0, #12]
    40010e88:	7100081f 	cmp	w0, #0x2
    40010e8c:	54002880 	b.eq	4001139c <__gethex+0x75c>  // b.none
    40010e90:	71000c1f 	cmp	w0, #0x3
    40010e94:	540027e0 	b.eq	40011390 <__gethex+0x750>  // b.none
    40010e98:	7100041f 	cmp	w0, #0x1
    40010e9c:	54002540 	b.eq	40011344 <__gethex+0x704>  // b.none
    40010ea0:	f9403be0 	ldr	x0, [sp, #112]
    40010ea4:	aa1903e1 	mov	x1, x25
    40010ea8:	52800a13 	mov	w19, #0x50                  	// #80
    40010eac:	97ffe3c1 	bl	40009db0 <_Bfree>
    40010eb0:	f9403fe0 	ldr	x0, [sp, #120]
    40010eb4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40010eb8:	f900001f 	str	xzr, [x0]
    40010ebc:	2a1303e0 	mov	w0, w19
    40010ec0:	a94153f3 	ldp	x19, x20, [sp, #16]
    40010ec4:	a94363f7 	ldp	x23, x24, [sp, #48]
    40010ec8:	a9446bf9 	ldp	x25, x26, [sp, #64]
    40010ecc:	a94573fb 	ldp	x27, x28, [sp, #80]
    40010ed0:	a8cb7bfd 	ldp	x29, x30, [sp], #176
    40010ed4:	d65f03c0 	ret
    40010ed8:	b4001e53 	cbz	x19, 400112a0 <__gethex+0x660>
    40010edc:	39400361 	ldrb	w1, [x27]
    40010ee0:	cb130373 	sub	x19, x27, x19
    40010ee4:	121a7821 	and	w1, w1, #0xffffffdf
    40010ee8:	4b130bfc 	neg	w28, w19, lsl #2
    40010eec:	aa1b03f3 	mov	x19, x27
    40010ef0:	7101403f 	cmp	w1, #0x50
    40010ef4:	54fff221 	b.ne	40010d38 <__gethex+0xf8>  // b.any
    40010ef8:	39400660 	ldrb	w0, [x19, #1]
    40010efc:	7100ac1f 	cmp	w0, #0x2b
    40010f00:	54001ba0 	b.eq	40011274 <__gethex+0x634>  // b.none
    40010f04:	7100b41f 	cmp	w0, #0x2d
    40010f08:	54000ae0 	b.eq	40011064 <__gethex+0x424>  // b.none
    40010f0c:	3860ca80 	ldrb	w0, [x20, w0, sxtw]
    40010f10:	91000668 	add	x8, x19, #0x1
    40010f14:	aa1303fb 	mov	x27, x19
    40010f18:	52800009 	mov	w9, #0x0                   	// #0
    40010f1c:	51000401 	sub	w1, w0, #0x1
    40010f20:	12001c21 	and	w1, w1, #0xff
    40010f24:	7100603f 	cmp	w1, #0x18
    40010f28:	54fff088 	b.hi	40010d38 <__gethex+0xf8>  // b.pmore
    40010f2c:	39400501 	ldrb	w1, [x8, #1]
    40010f30:	51004000 	sub	w0, w0, #0x10
    40010f34:	9100051b 	add	x27, x8, #0x1
    40010f38:	14000005 	b	40010f4c <__gethex+0x30c>
    40010f3c:	0b000800 	add	w0, w0, w0, lsl #2
    40010f40:	38401f61 	ldrb	w1, [x27, #1]!
    40010f44:	0b000500 	add	w0, w8, w0, lsl #1
    40010f48:	51004000 	sub	w0, w0, #0x10
    40010f4c:	3861ca88 	ldrb	w8, [x20, w1, sxtw]
    40010f50:	51000501 	sub	w1, w8, #0x1
    40010f54:	12001c21 	and	w1, w1, #0xff
    40010f58:	7100603f 	cmp	w1, #0x18
    40010f5c:	54ffff09 	b.ls	40010f3c <__gethex+0x2fc>  // b.plast
    40010f60:	7100013f 	cmp	w9, #0x0
    40010f64:	f900035b 	str	x27, [x26]
    40010f68:	5a800400 	cneg	w0, w0, ne  // ne = any
    40010f6c:	0b00039c 	add	w28, w28, w0
    40010f70:	34ffee86 	cbz	w6, 40010d40 <__gethex+0x100>
    40010f74:	d503201f 	nop
    40010f78:	7100033f 	cmp	w25, #0x0
    40010f7c:	528000d3 	mov	w19, #0x6                   	// #6
    40010f80:	1a9313f3 	csel	w19, wzr, w19, ne  // ne = any
    40010f84:	2a1303e0 	mov	w0, w19
    40010f88:	a94153f3 	ldp	x19, x20, [sp, #16]
    40010f8c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40010f90:	a94363f7 	ldp	x23, x24, [sp, #48]
    40010f94:	a9446bf9 	ldp	x25, x26, [sp, #64]
    40010f98:	a94573fb 	ldp	x27, x28, [sp, #80]
    40010f9c:	a8cb7bfd 	ldp	x29, x30, [sp], #176
    40010fa0:	d65f03c0 	ret
    40010fa4:	52800000 	mov	w0, #0x0                   	// #0
    40010fa8:	52800086 	mov	w6, #0x4                   	// #4
    40010fac:	b8004768 	str	w8, [x27], #4
    40010fb0:	52800008 	mov	w8, #0x0                   	// #0
    40010fb4:	17ffff7e 	b	40010dac <__gethex+0x16c>
    40010fb8:	aa1803e2 	mov	x2, x24
    40010fbc:	aa1503e1 	mov	x1, x21
    40010fc0:	aa1603e0 	mov	x0, x22
    40010fc4:	97ffc1a6 	bl	4000165c <strncmp>
    40010fc8:	35000b20 	cbnz	w0, 4001112c <__gethex+0x4ec>
    40010fcc:	38786ac1 	ldrb	w1, [x22, x24]
    40010fd0:	8b1802d3 	add	x19, x22, x24
    40010fd4:	3861ca80 	ldrb	w0, [x20, w1, sxtw]
    40010fd8:	34000ae0 	cbz	w0, 40011134 <__gethex+0x4f4>
    40010fdc:	aa1303f6 	mov	x22, x19
    40010fe0:	7100c03f 	cmp	w1, #0x30
    40010fe4:	540000a1 	b.ne	40010ff8 <__gethex+0x3b8>  // b.any
    40010fe8:	38401ec0 	ldrb	w0, [x22, #1]!
    40010fec:	7100c01f 	cmp	w0, #0x30
    40010ff0:	54ffffc0 	b.eq	40010fe8 <__gethex+0x3a8>  // b.none
    40010ff4:	3860ca80 	ldrb	w0, [x20, w0, sxtw]
    40010ff8:	7100001f 	cmp	w0, #0x0
    40010ffc:	52800039 	mov	w25, #0x1                   	// #1
    40011000:	1a9f17e6 	cset	w6, eq  // eq = none
    40011004:	17ffff36 	b	40010cdc <__gethex+0x9c>
    40011008:	52800033 	mov	w19, #0x1                   	// #1
    4001100c:	34000155 	cbz	w21, 40011034 <__gethex+0x3f4>
    40011010:	f94037e0 	ldr	x0, [sp, #104]
    40011014:	b9400c01 	ldr	w1, [x0, #12]
    40011018:	7100083f 	cmp	w1, #0x2
    4001101c:	54000960 	b.eq	40011148 <__gethex+0x508>  // b.none
    40011020:	71000c3f 	cmp	w1, #0x3
    40011024:	540009a0 	b.eq	40011158 <__gethex+0x518>  // b.none
    40011028:	7100043f 	cmp	w1, #0x1
    4001102c:	54001180 	b.eq	4001125c <__gethex+0x61c>  // b.none
    40011030:	321c0273 	orr	w19, w19, #0x10
    40011034:	f9403fe0 	ldr	x0, [sp, #120]
    40011038:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4001103c:	f9000019 	str	x25, [x0]
    40011040:	f94047e0 	ldr	x0, [sp, #136]
    40011044:	a94363f7 	ldp	x23, x24, [sp, #48]
    40011048:	b900001c 	str	w28, [x0]
    4001104c:	2a1303e0 	mov	w0, w19
    40011050:	a94153f3 	ldp	x19, x20, [sp, #16]
    40011054:	a9446bf9 	ldp	x25, x26, [sp, #64]
    40011058:	a94573fb 	ldp	x27, x28, [sp, #80]
    4001105c:	a8cb7bfd 	ldp	x29, x30, [sp], #176
    40011060:	d65f03c0 	ret
    40011064:	52800029 	mov	w9, #0x1                   	// #1
    40011068:	39400a60 	ldrb	w0, [x19, #2]
    4001106c:	91000a68 	add	x8, x19, #0x2
    40011070:	aa1303fb 	mov	x27, x19
    40011074:	3860ca80 	ldrb	w0, [x20, w0, sxtw]
    40011078:	51000401 	sub	w1, w0, #0x1
    4001107c:	12001c21 	and	w1, w1, #0xff
    40011080:	7100603f 	cmp	w1, #0x18
    40011084:	54ffe5a8 	b.hi	40010d38 <__gethex+0xf8>  // b.pmore
    40011088:	17ffffa9 	b	40010f2c <__gethex+0x2ec>
    4001108c:	4b16037b 	sub	w27, w27, w22
    40011090:	aa1903e0 	mov	x0, x25
    40011094:	2a1b03e1 	mov	w1, w27
    40011098:	97ffe6f2 	bl	4000ac60 <__any_on>
    4001109c:	2a0003f5 	mov	w21, w0
    400110a0:	34000180 	cbz	w0, 400110d0 <__gethex+0x490>
    400110a4:	51000761 	sub	w1, w27, #0x1
    400110a8:	52800020 	mov	w0, #0x1                   	// #1
    400110ac:	2a0003f5 	mov	w21, w0
    400110b0:	13057c22 	asr	w2, w1, #5
    400110b4:	1ac12000 	lsl	w0, w0, w1
    400110b8:	b862db42 	ldr	w2, [x26, w2, sxtw #2]
    400110bc:	6a02001f 	tst	w0, w2
    400110c0:	54000080 	b.eq	400110d0 <__gethex+0x490>  // b.none
    400110c4:	6b15003f 	cmp	w1, w21
    400110c8:	540012cc 	b.gt	40011320 <__gethex+0x6e0>
    400110cc:	52800055 	mov	w21, #0x2                   	// #2
    400110d0:	0b1b039c 	add	w28, w28, w27
    400110d4:	2a1b03e1 	mov	w1, w27
    400110d8:	aa1903e0 	mov	x0, x25
    400110dc:	97fffe91 	bl	40010b20 <rshift>
    400110e0:	17ffff5e 	b	40010e58 <__gethex+0x218>
    400110e4:	51000793 	sub	w19, w28, #0x1
    400110e8:	35001095 	cbnz	w21, 400112f8 <__gethex+0x6b8>
    400110ec:	35001113 	cbnz	w19, 4001130c <__gethex+0x6cc>
    400110f0:	13057e60 	asr	w0, w19, #5
    400110f4:	52800022 	mov	w2, #0x1                   	// #1
    400110f8:	1ad32042 	lsl	w2, w2, w19
    400110fc:	321f02a5 	orr	w5, w21, #0x2
    40011100:	2a1c03e1 	mov	w1, w28
    40011104:	4b1c02d6 	sub	w22, w22, w28
    40011108:	b860db46 	ldr	w6, [x26, w0, sxtw #2]
    4001110c:	aa1903e0 	mov	x0, x25
    40011110:	52800053 	mov	w19, #0x2                   	// #2
    40011114:	6a06005f 	tst	w2, w6
    40011118:	1a9510b5 	csel	w21, w5, w21, ne  // ne = any
    4001111c:	97fffe81 	bl	40010b20 <rshift>
    40011120:	f94037e0 	ldr	x0, [sp, #104]
    40011124:	b940041c 	ldr	w28, [x0, #4]
    40011128:	17ffffb9 	b	4001100c <__gethex+0x3cc>
    4001112c:	394002c1 	ldrb	w1, [x22]
    40011130:	aa1603f3 	mov	x19, x22
    40011134:	121a7821 	and	w1, w1, #0xffffffdf
    40011138:	7101403f 	cmp	w1, #0x50
    4001113c:	54000fe0 	b.eq	40011338 <__gethex+0x6f8>  // b.none
    40011140:	f9000353 	str	x19, [x26]
    40011144:	17ffff8d 	b	40010f78 <__gethex+0x338>
    40011148:	b94097e1 	ldr	w1, [sp, #148]
    4001114c:	52800020 	mov	w0, #0x1                   	// #1
    40011150:	4b010000 	sub	w0, w0, w1
    40011154:	b90097e0 	str	w0, [sp, #148]
    40011158:	b94097e0 	ldr	w0, [sp, #148]
    4001115c:	34fff6a0 	cbz	w0, 40011030 <__gethex+0x3f0>
    40011160:	b9401735 	ldr	w21, [x25, #20]
    40011164:	aa1a03e0 	mov	x0, x26
    40011168:	937e7eb4 	sbfiz	x20, x21, #2, #32
    4001116c:	8b140342 	add	x2, x26, x20
    40011170:	14000004 	b	40011180 <__gethex+0x540>
    40011174:	b800441f 	str	wzr, [x0], #4
    40011178:	eb00005f 	cmp	x2, x0
    4001117c:	54001169 	b.ls	400113a8 <__gethex+0x768>  // b.plast
    40011180:	b9400001 	ldr	w1, [x0]
    40011184:	3100043f 	cmn	w1, #0x1
    40011188:	54ffff60 	b.eq	40011174 <__gethex+0x534>  // b.none
    4001118c:	11000421 	add	w1, w1, #0x1
    40011190:	b9000001 	str	w1, [x0]
    40011194:	71000a7f 	cmp	w19, #0x2
    40011198:	540011c0 	b.eq	400113d0 <__gethex+0x790>  // b.none
    4001119c:	b9401720 	ldr	w0, [x25, #20]
    400111a0:	6b15001f 	cmp	w0, w21
    400111a4:	5400018c 	b.gt	400111d4 <__gethex+0x594>
    400111a8:	720012d5 	ands	w21, w22, #0x1f
    400111ac:	52800433 	mov	w19, #0x21                  	// #33
    400111b0:	54fff420 	b.eq	40011034 <__gethex+0x3f4>  // b.none
    400111b4:	8b140340 	add	x0, x26, x20
    400111b8:	b85fc000 	ldur	w0, [x0, #-4]
    400111bc:	97ffe399 	bl	4000a020 <__hi0bits>
    400111c0:	52800401 	mov	w1, #0x20                  	// #32
    400111c4:	4b150035 	sub	w21, w1, w21
    400111c8:	6b15001f 	cmp	w0, w21
    400111cc:	54fff34a 	b.ge	40011034 <__gethex+0x3f4>  // b.tcont
    400111d0:	b9401720 	ldr	w0, [x25, #20]
    400111d4:	7100001f 	cmp	w0, #0x0
    400111d8:	5400144d 	b.le	40011460 <__gethex+0x820>
    400111dc:	b9401b21 	ldr	w1, [x25, #24]
    400111e0:	8b20cb40 	add	x0, x26, w0, sxtw #2
    400111e4:	91007322 	add	x2, x25, #0x1c
    400111e8:	53017c21 	lsr	w1, w1, #1
    400111ec:	eb02001f 	cmp	x0, x2
    400111f0:	54001329 	b.ls	40011454 <__gethex+0x814>  // b.plast
    400111f4:	aa1a03e5 	mov	x5, x26
    400111f8:	b9400044 	ldr	w4, [x2]
    400111fc:	2a047c21 	orr	w1, w1, w4, lsl #31
    40011200:	b80044a1 	str	w1, [x5], #4
    40011204:	b8404441 	ldr	w1, [x2], #4
    40011208:	53017c21 	lsr	w1, w1, #1
    4001120c:	eb02001f 	cmp	x0, x2
    40011210:	54ffff48 	b.hi	400111f8 <__gethex+0x5b8>  // b.pmore
    40011214:	cb190000 	sub	x0, x0, x25
    40011218:	d1007400 	sub	x0, x0, #0x1d
    4001121c:	d342fc00 	lsr	x0, x0, #2
    40011220:	91000400 	add	x0, x0, #0x1
    40011224:	8b000b42 	add	x2, x26, x0, lsl #2
    40011228:	b8207b41 	str	w1, [x26, x0, lsl #2]
    4001122c:	35001201 	cbnz	w1, 4001146c <__gethex+0x82c>
    40011230:	cb1a005a 	sub	x26, x2, x26
    40011234:	9342ff40 	asr	x0, x26, #2
    40011238:	b9001720 	str	w0, [x25, #20]
    4001123c:	34001140 	cbz	w0, 40011464 <__gethex+0x824>
    40011240:	f94037e0 	ldr	x0, [sp, #104]
    40011244:	1100079c 	add	w28, w28, #0x1
    40011248:	b9400800 	ldr	w0, [x0, #8]
    4001124c:	6b1c001f 	cmp	w0, w28
    40011250:	5400046b 	b.lt	400112dc <__gethex+0x69c>  // b.tstop
    40011254:	52800433 	mov	w19, #0x21                  	// #33
    40011258:	17ffff77 	b	40011034 <__gethex+0x3f4>
    4001125c:	360feeb5 	tbz	w21, #1, 40011030 <__gethex+0x3f0>
    40011260:	b9400340 	ldr	w0, [x26]
    40011264:	2a0002a0 	orr	w0, w21, w0
    40011268:	3707f7c0 	tbnz	w0, #0, 40011160 <__gethex+0x520>
    4001126c:	321c0273 	orr	w19, w19, #0x10
    40011270:	17ffff71 	b	40011034 <__gethex+0x3f4>
    40011274:	52800009 	mov	w9, #0x0                   	// #0
    40011278:	17ffff7c 	b	40011068 <__gethex+0x428>
    4001127c:	f9403be0 	ldr	x0, [sp, #112]
    40011280:	4b1b02db 	sub	w27, w22, w27
    40011284:	aa1903e1 	mov	x1, x25
    40011288:	2a1b03e2 	mov	w2, w27
    4001128c:	4b1b039c 	sub	w28, w28, w27
    40011290:	97ffe498 	bl	4000a4f0 <__lshift>
    40011294:	aa0003f9 	mov	x25, x0
    40011298:	9100601a 	add	x26, x0, #0x18
    4001129c:	17fffeef 	b	40010e58 <__gethex+0x218>
    400112a0:	38786b61 	ldrb	w1, [x27, x24]
    400112a4:	8b180368 	add	x8, x27, x24
    400112a8:	aa0803fb 	mov	x27, x8
    400112ac:	3861ca80 	ldrb	w0, [x20, w1, sxtw]
    400112b0:	34ffd3c0 	cbz	w0, 40010d28 <__gethex+0xe8>
    400112b4:	d503201f 	nop
    400112b8:	38401f61 	ldrb	w1, [x27, #1]!
    400112bc:	3861ca80 	ldrb	w0, [x20, w1, sxtw]
    400112c0:	35ffffc0 	cbnz	w0, 400112b8 <__gethex+0x678>
    400112c4:	cb080368 	sub	x8, x27, x8
    400112c8:	4b080bfc 	neg	w28, w8, lsl #2
    400112cc:	17fffe97 	b	40010d28 <__gethex+0xe8>
    400112d0:	910008d6 	add	x22, x6, #0x2
    400112d4:	52800019 	mov	w25, #0x0                   	// #0
    400112d8:	17fffe79 	b	40010cbc <__gethex+0x7c>
    400112dc:	f9403be0 	ldr	x0, [sp, #112]
    400112e0:	aa1903e1 	mov	x1, x25
    400112e4:	52801473 	mov	w19, #0xa3                  	// #163
    400112e8:	97ffe2b2 	bl	40009db0 <_Bfree>
    400112ec:	f9403fe0 	ldr	x0, [sp, #120]
    400112f0:	f900001f 	str	xzr, [x0]
    400112f4:	17ffff24 	b	40010f84 <__gethex+0x344>
    400112f8:	52800035 	mov	w21, #0x1                   	// #1
    400112fc:	17ffff7d 	b	400110f0 <__gethex+0x4b0>
    40011300:	aa1a03fb 	mov	x27, x26
    40011304:	52800008 	mov	w8, #0x0                   	// #0
    40011308:	17fffec6 	b	40010e20 <__gethex+0x1e0>
    4001130c:	2a1303e1 	mov	w1, w19
    40011310:	aa1903e0 	mov	x0, x25
    40011314:	97ffe653 	bl	4000ac60 <__any_on>
    40011318:	2a0003f5 	mov	w21, w0
    4001131c:	17ffff75 	b	400110f0 <__gethex+0x4b0>
    40011320:	51000b61 	sub	w1, w27, #0x2
    40011324:	aa1903e0 	mov	x0, x25
    40011328:	52800075 	mov	w21, #0x3                   	// #3
    4001132c:	97ffe64d 	bl	4000ac60 <__any_on>
    40011330:	35ffed00 	cbnz	w0, 400110d0 <__gethex+0x490>
    40011334:	17ffff66 	b	400110cc <__gethex+0x48c>
    40011338:	5280001c 	mov	w28, #0x0                   	// #0
    4001133c:	52800026 	mov	w6, #0x1                   	// #1
    40011340:	17fffeee 	b	40010ef8 <__gethex+0x2b8>
    40011344:	6b1c02df 	cmp	w22, w28
    40011348:	54ffdac1 	b.ne	40010ea0 <__gethex+0x260>  // b.any
    4001134c:	710006df 	cmp	w22, #0x1
    40011350:	540000e0 	b.eq	4001136c <__gethex+0x72c>  // b.none
    40011354:	510006c1 	sub	w1, w22, #0x1
    40011358:	aa1903e0 	mov	x0, x25
    4001135c:	97ffe641 	bl	4000ac60 <__any_on>
    40011360:	34ffda00 	cbz	w0, 40010ea0 <__gethex+0x260>
    40011364:	f94037e0 	ldr	x0, [sp, #104]
    40011368:	b9400401 	ldr	w1, [x0, #4]
    4001136c:	f94047e0 	ldr	x0, [sp, #136]
    40011370:	52800c53 	mov	w19, #0x62                  	// #98
    40011374:	b9000001 	str	w1, [x0]
    40011378:	52800020 	mov	w0, #0x1                   	// #1
    4001137c:	b9001720 	str	w0, [x25, #20]
    40011380:	b9000340 	str	w0, [x26]
    40011384:	f9403fe0 	ldr	x0, [sp, #120]
    40011388:	f9000019 	str	x25, [x0]
    4001138c:	17fffefe 	b	40010f84 <__gethex+0x344>
    40011390:	b94097e0 	ldr	w0, [sp, #148]
    40011394:	34ffd860 	cbz	w0, 40010ea0 <__gethex+0x260>
    40011398:	17fffff5 	b	4001136c <__gethex+0x72c>
    4001139c:	b94097e0 	ldr	w0, [sp, #148]
    400113a0:	35ffd800 	cbnz	w0, 40010ea0 <__gethex+0x260>
    400113a4:	17fffff2 	b	4001136c <__gethex+0x72c>
    400113a8:	b9400f21 	ldr	w1, [x25, #12]
    400113ac:	b9401720 	ldr	w0, [x25, #20]
    400113b0:	6b01001f 	cmp	w0, w1
    400113b4:	540002aa 	b.ge	40011408 <__gethex+0x7c8>  // b.tcont
    400113b8:	8b20cb21 	add	x1, x25, w0, sxtw #2
    400113bc:	11000400 	add	w0, w0, #0x1
    400113c0:	b9001720 	str	w0, [x25, #20]
    400113c4:	52800020 	mov	w0, #0x1                   	// #1
    400113c8:	b9001820 	str	w0, [x1, #24]
    400113cc:	17ffff72 	b	40011194 <__gethex+0x554>
    400113d0:	f94037e0 	ldr	x0, [sp, #104]
    400113d4:	52800453 	mov	w19, #0x22                  	// #34
    400113d8:	b9400000 	ldr	w0, [x0]
    400113dc:	51000400 	sub	w0, w0, #0x1
    400113e0:	6b16001f 	cmp	w0, w22
    400113e4:	54ffe281 	b.ne	40011034 <__gethex+0x3f4>  // b.any
    400113e8:	13057ec1 	asr	w1, w22, #5
    400113ec:	52800020 	mov	w0, #0x1                   	// #1
    400113f0:	1ad62004 	lsl	w4, w0, w22
    400113f4:	b861db40 	ldr	w0, [x26, w1, sxtw #2]
    400113f8:	6a00009f 	tst	w4, w0
    400113fc:	1a9f17f3 	cset	w19, eq  // eq = none
    40011400:	11008673 	add	w19, w19, #0x21
    40011404:	17ffff0c 	b	40011034 <__gethex+0x3f4>
    40011408:	f9403be0 	ldr	x0, [sp, #112]
    4001140c:	b9400b21 	ldr	w1, [x25, #8]
    40011410:	11000421 	add	w1, w1, #0x1
    40011414:	97ffe243 	bl	40009d20 <_Balloc>
    40011418:	aa0003fb 	mov	x27, x0
    4001141c:	b40002c0 	cbz	x0, 40011474 <__gethex+0x834>
    40011420:	b9801722 	ldrsw	x2, [x25, #20]
    40011424:	91004321 	add	x1, x25, #0x10
    40011428:	91004000 	add	x0, x0, #0x10
    4001142c:	9100637a 	add	x26, x27, #0x18
    40011430:	91000842 	add	x2, x2, #0x2
    40011434:	d37ef442 	lsl	x2, x2, #2
    40011438:	97ffbee2 	bl	40000fc0 <memcpy>
    4001143c:	f9403be0 	ldr	x0, [sp, #112]
    40011440:	aa1903e1 	mov	x1, x25
    40011444:	aa1b03f9 	mov	x25, x27
    40011448:	97ffe25a 	bl	40009db0 <_Bfree>
    4001144c:	b9401760 	ldr	w0, [x27, #20]
    40011450:	17ffffda 	b	400113b8 <__gethex+0x778>
    40011454:	b9001b21 	str	w1, [x25, #24]
    40011458:	aa1a03e2 	mov	x2, x26
    4001145c:	35000081 	cbnz	w1, 4001146c <__gethex+0x82c>
    40011460:	b900173f 	str	wzr, [x25, #20]
    40011464:	b9001b3f 	str	wzr, [x25, #24]
    40011468:	17ffff76 	b	40011240 <__gethex+0x600>
    4001146c:	91001042 	add	x2, x2, #0x4
    40011470:	17ffff70 	b	40011230 <__gethex+0x5f0>
    40011474:	b0000083 	adrp	x3, 40022000 <__pow_log_data+0xcc8>
    40011478:	d0000080 	adrp	x0, 40023000 <fpi.1>
    4001147c:	91372063 	add	x3, x3, #0xdc8
    40011480:	91036000 	add	x0, x0, #0xd8
    40011484:	d2800002 	mov	x2, #0x0                   	// #0
    40011488:	52801081 	mov	w1, #0x84                  	// #132
    4001148c:	97fffc15 	bl	400104e0 <__assert_func>
    40011490:	b0000083 	adrp	x3, 40022000 <__pow_log_data+0xcc8>
    40011494:	d0000080 	adrp	x0, 40023000 <fpi.1>
    40011498:	91372063 	add	x3, x3, #0xdc8
    4001149c:	91036000 	add	x0, x0, #0xd8
    400114a0:	d2800002 	mov	x2, #0x0                   	// #0
    400114a4:	52801bc1 	mov	w1, #0xde                  	// #222
    400114a8:	97fffc0e 	bl	400104e0 <__assert_func>
    400114ac:	00000000 	udf	#0

00000000400114b0 <__match>:
    400114b0:	aa0003e7 	mov	x7, x0
    400114b4:	f9400003 	ldr	x3, [x0]
    400114b8:	14000008 	b	400114d8 <__match+0x28>
    400114bc:	39400062 	ldrb	w2, [x3]
    400114c0:	51010446 	sub	w6, w2, #0x41
    400114c4:	11008045 	add	w5, w2, #0x20
    400114c8:	710068df 	cmp	w6, #0x1a
    400114cc:	1a8230a2 	csel	w2, w5, w2, cc  // cc = lo, ul, last
    400114d0:	6b04005f 	cmp	w2, w4
    400114d4:	540000e1 	b.ne	400114f0 <__match+0x40>  // b.any
    400114d8:	38401424 	ldrb	w4, [x1], #1
    400114dc:	91000463 	add	x3, x3, #0x1
    400114e0:	35fffee4 	cbnz	w4, 400114bc <__match+0xc>
    400114e4:	52800020 	mov	w0, #0x1                   	// #1
    400114e8:	f90000e3 	str	x3, [x7]
    400114ec:	d65f03c0 	ret
    400114f0:	52800000 	mov	w0, #0x0                   	// #0
    400114f4:	d65f03c0 	ret
	...

0000000040011500 <__hexnan>:
    40011500:	b9400021 	ldr	w1, [x1]
    40011504:	7200102f 	ands	w15, w1, #0x1f
    40011508:	13057c21 	asr	w1, w1, #5
    4001150c:	8b21c841 	add	x1, x2, w1, sxtw #2
    40011510:	54000d21 	b.ne	400116b4 <__hexnan+0x1b4>  // b.any
    40011514:	d1001029 	sub	x9, x1, #0x4
    40011518:	aa0103ee 	mov	x14, x1
    4001151c:	f9400005 	ldr	x5, [x0]
    40011520:	b81fc1df 	stur	wzr, [x14, #-4]
    40011524:	394004a4 	ldrb	w4, [x5, #1]
    40011528:	34000e04 	cbz	w4, 400116e8 <__hexnan+0x1e8>
    4001152c:	d000008c 	adrp	x12, 40023000 <fpi.1>
    40011530:	aa0903ea 	mov	x10, x9
    40011534:	9105018c 	add	x12, x12, #0x140
    40011538:	aa0903e6 	mov	x6, x9
    4001153c:	52800003 	mov	w3, #0x0                   	// #0
    40011540:	52800010 	mov	w16, #0x0                   	// #0
    40011544:	5280000b 	mov	w11, #0x0                   	// #0
    40011548:	52800112 	mov	w18, #0x8                   	// #8
    4001154c:	52800411 	mov	w17, #0x20                  	// #32
    40011550:	14000013 	b	4001159c <__hexnan+0x9c>
    40011554:	7100809f 	cmp	w4, #0x20
    40011558:	54000c48 	b.hi	400116e0 <__hexnan+0x1e0>  // b.pmore
    4001155c:	6b0b021f 	cmp	w16, w11
    40011560:	5400018a 	b.ge	40011590 <__hexnan+0x90>  // b.tcont
    40011564:	eb0a00df 	cmp	x6, x10
    40011568:	7a473860 	ccmp	w3, #0x7, #0x0, cc  // cc = lo, ul, last
    4001156c:	5400088d 	b.le	4001167c <__hexnan+0x17c>
    40011570:	52800103 	mov	w3, #0x8                   	// #8
    40011574:	eb06005f 	cmp	x2, x6
    40011578:	540000c2 	b.cs	40011590 <__hexnan+0x90>  // b.hs, b.nlast
    4001157c:	d10010ca 	sub	x10, x6, #0x4
    40011580:	2a0b03f0 	mov	w16, w11
    40011584:	b81fc0df 	stur	wzr, [x6, #-4]
    40011588:	aa0a03e6 	mov	x6, x10
    4001158c:	52800003 	mov	w3, #0x0                   	// #0
    40011590:	394008a4 	ldrb	w4, [x5, #2]
    40011594:	910004a5 	add	x5, x5, #0x1
    40011598:	340001e4 	cbz	w4, 400115d4 <__hexnan+0xd4>
    4001159c:	38644981 	ldrb	w1, [x12, w4, uxtw]
    400115a0:	34fffda1 	cbz	w1, 40011554 <__hexnan+0x54>
    400115a4:	11000463 	add	w3, w3, #0x1
    400115a8:	1100056b 	add	w11, w11, #0x1
    400115ac:	7100207f 	cmp	w3, #0x8
    400115b0:	5400058c 	b.gt	40011660 <__hexnan+0x160>
    400115b4:	b94000c4 	ldr	w4, [x6]
    400115b8:	531c6c84 	lsl	w4, w4, #4
    400115bc:	12000c21 	and	w1, w1, #0xf
    400115c0:	910004a5 	add	x5, x5, #0x1
    400115c4:	2a040021 	orr	w1, w1, w4
    400115c8:	b90000c1 	str	w1, [x6]
    400115cc:	394004a4 	ldrb	w4, [x5, #1]
    400115d0:	35fffe64 	cbnz	w4, 4001159c <__hexnan+0x9c>
    400115d4:	340008ab 	cbz	w11, 400116e8 <__hexnan+0x1e8>
    400115d8:	eb06015f 	cmp	x10, x6
    400115dc:	7a478860 	ccmp	w3, #0x7, #0x0, hi  // hi = pmore
    400115e0:	5400090d 	b.le	40011700 <__hexnan+0x200>
    400115e4:	eb06005f 	cmp	x2, x6
    400115e8:	540006c2 	b.cs	400116c0 <__hexnan+0x1c0>  // b.hs, b.nlast
    400115ec:	aa0203e1 	mov	x1, x2
    400115f0:	aa0603e0 	mov	x0, x6
    400115f4:	d503201f 	nop
    400115f8:	b8404403 	ldr	w3, [x0], #4
    400115fc:	b8004423 	str	w3, [x1], #4
    40011600:	eb09001f 	cmp	x0, x9
    40011604:	54ffffa9 	b.ls	400115f8 <__hexnan+0xf8>  // b.plast
    40011608:	cb060120 	sub	x0, x9, x6
    4001160c:	91000521 	add	x1, x9, #0x1
    40011610:	910004c6 	add	x6, x6, #0x1
    40011614:	927ef400 	and	x0, x0, #0xfffffffffffffffc
    40011618:	eb06003f 	cmp	x1, x6
    4001161c:	91001000 	add	x0, x0, #0x4
    40011620:	d2800081 	mov	x1, #0x4                   	// #4
    40011624:	9a812000 	csel	x0, x0, x1, cs  // cs = hs, nlast
    40011628:	8b000040 	add	x0, x2, x0
    4001162c:	d503201f 	nop
    40011630:	b800441f 	str	wzr, [x0], #4
    40011634:	eb09001f 	cmp	x0, x9
    40011638:	54ffffc9 	b.ls	40011630 <__hexnan+0x130>  // b.plast
    4001163c:	b85fc1c0 	ldur	w0, [x14, #-4]
    40011640:	350000c0 	cbnz	w0, 40011658 <__hexnan+0x158>
    40011644:	d503201f 	nop
    40011648:	eb09005f 	cmp	x2, x9
    4001164c:	54000520 	b.eq	400116f0 <__hexnan+0x1f0>  // b.none
    40011650:	b85fcd20 	ldr	w0, [x9, #-4]!
    40011654:	34ffffa0 	cbz	w0, 40011648 <__hexnan+0x148>
    40011658:	528000a0 	mov	w0, #0x5                   	// #5
    4001165c:	d65f03c0 	ret
    40011660:	eb06005f 	cmp	x2, x6
    40011664:	54fff962 	b.cs	40011590 <__hexnan+0x90>  // b.hs, b.nlast
    40011668:	d10010c6 	sub	x6, x6, #0x4
    4001166c:	52800004 	mov	w4, #0x0                   	// #0
    40011670:	52800023 	mov	w3, #0x1                   	// #1
    40011674:	b90000df 	str	wzr, [x6]
    40011678:	17ffffd1 	b	400115bc <__hexnan+0xbc>
    4001167c:	4b030243 	sub	w3, w18, w3
    40011680:	b94000c7 	ldr	w7, [x6]
    40011684:	aa0603e1 	mov	x1, x6
    40011688:	531e7463 	lsl	w3, w3, #2
    4001168c:	4b03022d 	sub	w13, w17, w3
    40011690:	b9400428 	ldr	w8, [x1, #4]
    40011694:	1acd2104 	lsl	w4, w8, w13
    40011698:	2a070084 	orr	w4, w4, w7
    4001169c:	1ac32507 	lsr	w7, w8, w3
    400116a0:	b9000024 	str	w4, [x1]
    400116a4:	b8004c27 	str	w7, [x1, #4]!
    400116a8:	eb0a003f 	cmp	x1, x10
    400116ac:	54ffff23 	b.cc	40011690 <__hexnan+0x190>  // b.lo, b.ul, b.last
    400116b0:	17ffffb0 	b	40011570 <__hexnan+0x70>
    400116b4:	9100102e 	add	x14, x1, #0x4
    400116b8:	aa0103e9 	mov	x9, x1
    400116bc:	17ffff98 	b	4001151c <__hexnan+0x1c>
    400116c0:	b85fc1c0 	ldur	w0, [x14, #-4]
    400116c4:	34fffbef 	cbz	w15, 40011640 <__hexnan+0x140>
    400116c8:	4b0f03ef 	neg	w15, w15
    400116cc:	12800001 	mov	w1, #0xffffffff            	// #-1
    400116d0:	1acf242f 	lsr	w15, w1, w15
    400116d4:	0a0f0000 	and	w0, w0, w15
    400116d8:	b81fc1c0 	stur	w0, [x14, #-4]
    400116dc:	17ffffd9 	b	40011640 <__hexnan+0x140>
    400116e0:	7100a49f 	cmp	w4, #0x29
    400116e4:	54000340 	b.eq	4001174c <__hexnan+0x24c>  // b.none
    400116e8:	52800080 	mov	w0, #0x4                   	// #4
    400116ec:	d65f03c0 	ret
    400116f0:	52800021 	mov	w1, #0x1                   	// #1
    400116f4:	528000a0 	mov	w0, #0x5                   	// #5
    400116f8:	b9000121 	str	w1, [x9]
    400116fc:	d65f03c0 	ret
    40011700:	52800105 	mov	w5, #0x8                   	// #8
    40011704:	4b0300a5 	sub	w5, w5, w3
    40011708:	b94000c3 	ldr	w3, [x6]
    4001170c:	52800407 	mov	w7, #0x20                  	// #32
    40011710:	531e74a5 	lsl	w5, w5, #2
    40011714:	aa0603e0 	mov	x0, x6
    40011718:	4b0500e7 	sub	w7, w7, w5
    4001171c:	d503201f 	nop
    40011720:	b9400404 	ldr	w4, [x0, #4]
    40011724:	1ac72081 	lsl	w1, w4, w7
    40011728:	2a030021 	orr	w1, w1, w3
    4001172c:	1ac52483 	lsr	w3, w4, w5
    40011730:	b9000001 	str	w1, [x0]
    40011734:	b8004c03 	str	w3, [x0, #4]!
    40011738:	eb00015f 	cmp	x10, x0
    4001173c:	54ffff28 	b.hi	40011720 <__hexnan+0x220>  // b.pmore
    40011740:	eb06005f 	cmp	x2, x6
    40011744:	54fff543 	b.cc	400115ec <__hexnan+0xec>  // b.lo, b.ul, b.last
    40011748:	17ffffde 	b	400116c0 <__hexnan+0x1c0>
    4001174c:	910008a5 	add	x5, x5, #0x2
    40011750:	f9000005 	str	x5, [x0]
    40011754:	17ffffa0 	b	400115d4 <__hexnan+0xd4>
	...

0000000040011760 <_realloc_r>:
    40011760:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    40011764:	910003fd 	mov	x29, sp
    40011768:	a9025bf5 	stp	x21, x22, [sp, #32]
    4001176c:	aa0203f5 	mov	x21, x2
    40011770:	b40010e1 	cbz	x1, 4001198c <_realloc_r+0x22c>
    40011774:	a90363f7 	stp	x23, x24, [sp, #48]
    40011778:	d1004038 	sub	x24, x1, #0x10
    4001177c:	aa0003f7 	mov	x23, x0
    40011780:	a90153f3 	stp	x19, x20, [sp, #16]
    40011784:	aa0103f3 	mov	x19, x1
    40011788:	91005eb4 	add	x20, x21, #0x17
    4001178c:	a9046bf9 	stp	x25, x26, [sp, #64]
    40011790:	97ffca10 	bl	40003fd0 <__malloc_lock>
    40011794:	aa1803f9 	mov	x25, x24
    40011798:	f9400700 	ldr	x0, [x24, #8]
    4001179c:	927ef416 	and	x22, x0, #0xfffffffffffffffc
    400117a0:	f100ba9f 	cmp	x20, #0x2e
    400117a4:	54000908 	b.hi	400118c4 <_realloc_r+0x164>  // b.pmore
    400117a8:	52800001 	mov	w1, #0x0                   	// #0
    400117ac:	7100003f 	cmp	w1, #0x0
    400117b0:	d2800414 	mov	x20, #0x20                  	// #32
    400117b4:	fa550280 	ccmp	x20, x21, #0x0, eq  // eq = none
    400117b8:	54000943 	b.cc	400118e0 <_realloc_r+0x180>  // b.lo, b.ul, b.last
    400117bc:	eb1402df 	cmp	x22, x20
    400117c0:	54000b0a 	b.ge	40011920 <_realloc_r+0x1c0>  // b.tcont
    400117c4:	d00005e1 	adrp	x1, 400cf000 <impure_data+0x3d0>
    400117c8:	a90573fb 	stp	x27, x28, [sp, #80]
    400117cc:	9101c03c 	add	x28, x1, #0x70
    400117d0:	8b160302 	add	x2, x24, x22
    400117d4:	f9400b83 	ldr	x3, [x28, #16]
    400117d8:	f9400441 	ldr	x1, [x2, #8]
    400117dc:	eb02007f 	cmp	x3, x2
    400117e0:	54000f60 	b.eq	400119cc <_realloc_r+0x26c>  // b.none
    400117e4:	927ff823 	and	x3, x1, #0xfffffffffffffffe
    400117e8:	8b030043 	add	x3, x2, x3
    400117ec:	f9400463 	ldr	x3, [x3, #8]
    400117f0:	37000c23 	tbnz	w3, #0, 40011974 <_realloc_r+0x214>
    400117f4:	927ef421 	and	x1, x1, #0xfffffffffffffffc
    400117f8:	8b0102c3 	add	x3, x22, x1
    400117fc:	eb03029f 	cmp	x20, x3
    40011800:	5400084d 	b.le	40011908 <_realloc_r+0x1a8>
    40011804:	37000180 	tbnz	w0, #0, 40011834 <_realloc_r+0xd4>
    40011808:	f85f027b 	ldur	x27, [x19, #-16]
    4001180c:	cb1b031b 	sub	x27, x24, x27
    40011810:	f9400760 	ldr	x0, [x27, #8]
    40011814:	927ef400 	and	x0, x0, #0xfffffffffffffffc
    40011818:	8b010001 	add	x1, x0, x1
    4001181c:	8b160023 	add	x3, x1, x22
    40011820:	eb03029f 	cmp	x20, x3
    40011824:	540019ad 	b.le	40011b58 <_realloc_r+0x3f8>
    40011828:	8b0002c3 	add	x3, x22, x0
    4001182c:	eb03029f 	cmp	x20, x3
    40011830:	5400152d 	b.le	40011ad4 <_realloc_r+0x374>
    40011834:	aa1503e1 	mov	x1, x21
    40011838:	aa1703e0 	mov	x0, x23
    4001183c:	97ffc7d9 	bl	400037a0 <_malloc_r>
    40011840:	aa0003f5 	mov	x21, x0
    40011844:	b40002c0 	cbz	x0, 4001189c <_realloc_r+0x13c>
    40011848:	f9400701 	ldr	x1, [x24, #8]
    4001184c:	d1004002 	sub	x2, x0, #0x10
    40011850:	927ff821 	and	x1, x1, #0xfffffffffffffffe
    40011854:	8b010318 	add	x24, x24, x1
    40011858:	eb02031f 	cmp	x24, x2
    4001185c:	54001200 	b.eq	40011a9c <_realloc_r+0x33c>  // b.none
    40011860:	d10022c2 	sub	x2, x22, #0x8
    40011864:	f101205f 	cmp	x2, #0x48
    40011868:	54001728 	b.hi	40011b4c <_realloc_r+0x3ec>  // b.pmore
    4001186c:	f1009c5f 	cmp	x2, #0x27
    40011870:	54001208 	b.hi	40011ab0 <_realloc_r+0x350>  // b.pmore
    40011874:	aa1303e1 	mov	x1, x19
    40011878:	f9400022 	ldr	x2, [x1]
    4001187c:	f9000002 	str	x2, [x0]
    40011880:	f9400422 	ldr	x2, [x1, #8]
    40011884:	f9000402 	str	x2, [x0, #8]
    40011888:	f9400821 	ldr	x1, [x1, #16]
    4001188c:	f9000801 	str	x1, [x0, #16]
    40011890:	aa1303e1 	mov	x1, x19
    40011894:	aa1703e0 	mov	x0, x23
    40011898:	97ffc556 	bl	40002df0 <_free_r>
    4001189c:	aa1703e0 	mov	x0, x23
    400118a0:	97ffc9d0 	bl	40003fe0 <__malloc_unlock>
    400118a4:	aa1503e0 	mov	x0, x21
    400118a8:	a94153f3 	ldp	x19, x20, [sp, #16]
    400118ac:	a9425bf5 	ldp	x21, x22, [sp, #32]
    400118b0:	a94363f7 	ldp	x23, x24, [sp, #48]
    400118b4:	a9446bf9 	ldp	x25, x26, [sp, #64]
    400118b8:	a94573fb 	ldp	x27, x28, [sp, #80]
    400118bc:	a8c67bfd 	ldp	x29, x30, [sp], #96
    400118c0:	d65f03c0 	ret
    400118c4:	927cee94 	and	x20, x20, #0xfffffffffffffff0
    400118c8:	b2407be1 	mov	x1, #0x7fffffff            	// #2147483647
    400118cc:	eb01029f 	cmp	x20, x1
    400118d0:	1a9f97e1 	cset	w1, hi  // hi = pmore
    400118d4:	7100003f 	cmp	w1, #0x0
    400118d8:	fa550280 	ccmp	x20, x21, #0x0, eq  // eq = none
    400118dc:	54fff702 	b.cs	400117bc <_realloc_r+0x5c>  // b.hs, b.nlast
    400118e0:	52800180 	mov	w0, #0xc                   	// #12
    400118e4:	b90002e0 	str	w0, [x23]
    400118e8:	d2800015 	mov	x21, #0x0                   	// #0
    400118ec:	aa1503e0 	mov	x0, x21
    400118f0:	a94153f3 	ldp	x19, x20, [sp, #16]
    400118f4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    400118f8:	a94363f7 	ldp	x23, x24, [sp, #48]
    400118fc:	a9446bf9 	ldp	x25, x26, [sp, #64]
    40011900:	a8c67bfd 	ldp	x29, x30, [sp], #96
    40011904:	d65f03c0 	ret
    40011908:	a9410041 	ldp	x1, x0, [x2, #16]
    4001190c:	aa0303f6 	mov	x22, x3
    40011910:	a94573fb 	ldp	x27, x28, [sp, #80]
    40011914:	f9000c20 	str	x0, [x1, #24]
    40011918:	f9000801 	str	x1, [x0, #16]
    4001191c:	d503201f 	nop
    40011920:	f9400721 	ldr	x1, [x25, #8]
    40011924:	cb1402c0 	sub	x0, x22, x20
    40011928:	8b160322 	add	x2, x25, x22
    4001192c:	92400021 	and	x1, x1, #0x1
    40011930:	f1007c1f 	cmp	x0, #0x1f
    40011934:	54000348 	b.hi	4001199c <_realloc_r+0x23c>  // b.pmore
    40011938:	aa0102c1 	orr	x1, x22, x1
    4001193c:	f9000721 	str	x1, [x25, #8]
    40011940:	f9400440 	ldr	x0, [x2, #8]
    40011944:	b2400000 	orr	x0, x0, #0x1
    40011948:	f9000440 	str	x0, [x2, #8]
    4001194c:	aa1703e0 	mov	x0, x23
    40011950:	aa1303f5 	mov	x21, x19
    40011954:	97ffc9a3 	bl	40003fe0 <__malloc_unlock>
    40011958:	aa1503e0 	mov	x0, x21
    4001195c:	a94153f3 	ldp	x19, x20, [sp, #16]
    40011960:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40011964:	a94363f7 	ldp	x23, x24, [sp, #48]
    40011968:	a9446bf9 	ldp	x25, x26, [sp, #64]
    4001196c:	a8c67bfd 	ldp	x29, x30, [sp], #96
    40011970:	d65f03c0 	ret
    40011974:	3707f600 	tbnz	w0, #0, 40011834 <_realloc_r+0xd4>
    40011978:	f85f027b 	ldur	x27, [x19, #-16]
    4001197c:	cb1b031b 	sub	x27, x24, x27
    40011980:	f9400760 	ldr	x0, [x27, #8]
    40011984:	927ef400 	and	x0, x0, #0xfffffffffffffffc
    40011988:	17ffffa8 	b	40011828 <_realloc_r+0xc8>
    4001198c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40011990:	aa0203e1 	mov	x1, x2
    40011994:	a8c67bfd 	ldp	x29, x30, [sp], #96
    40011998:	17ffc782 	b	400037a0 <_malloc_r>
    4001199c:	8b140324 	add	x4, x25, x20
    400119a0:	aa010281 	orr	x1, x20, x1
    400119a4:	f9000721 	str	x1, [x25, #8]
    400119a8:	b2400003 	orr	x3, x0, #0x1
    400119ac:	91004081 	add	x1, x4, #0x10
    400119b0:	aa1703e0 	mov	x0, x23
    400119b4:	f9000483 	str	x3, [x4, #8]
    400119b8:	f9400443 	ldr	x3, [x2, #8]
    400119bc:	b2400063 	orr	x3, x3, #0x1
    400119c0:	f9000443 	str	x3, [x2, #8]
    400119c4:	97ffc50b 	bl	40002df0 <_free_r>
    400119c8:	17ffffe1 	b	4001194c <_realloc_r+0x1ec>
    400119cc:	927ef421 	and	x1, x1, #0xfffffffffffffffc
    400119d0:	91008283 	add	x3, x20, #0x20
    400119d4:	8b0102c2 	add	x2, x22, x1
    400119d8:	eb03005f 	cmp	x2, x3
    400119dc:	54000eaa 	b.ge	40011bb0 <_realloc_r+0x450>  // b.tcont
    400119e0:	3707f2a0 	tbnz	w0, #0, 40011834 <_realloc_r+0xd4>
    400119e4:	f85f027b 	ldur	x27, [x19, #-16]
    400119e8:	cb1b031b 	sub	x27, x24, x27
    400119ec:	f9400760 	ldr	x0, [x27, #8]
    400119f0:	927ef400 	and	x0, x0, #0xfffffffffffffffc
    400119f4:	8b010001 	add	x1, x0, x1
    400119f8:	8b16003a 	add	x26, x1, x22
    400119fc:	eb1a007f 	cmp	x3, x26
    40011a00:	54fff14c 	b.gt	40011828 <_realloc_r+0xc8>
    40011a04:	aa1b03f5 	mov	x21, x27
    40011a08:	d10022c2 	sub	x2, x22, #0x8
    40011a0c:	f9400f60 	ldr	x0, [x27, #24]
    40011a10:	f8410ea1 	ldr	x1, [x21, #16]!
    40011a14:	f9000c20 	str	x0, [x1, #24]
    40011a18:	f9000801 	str	x1, [x0, #16]
    40011a1c:	f101205f 	cmp	x2, #0x48
    40011a20:	54001128 	b.hi	40011c44 <_realloc_r+0x4e4>  // b.pmore
    40011a24:	aa1503e0 	mov	x0, x21
    40011a28:	f1009c5f 	cmp	x2, #0x27
    40011a2c:	54000129 	b.ls	40011a50 <_realloc_r+0x2f0>  // b.plast
    40011a30:	f9400260 	ldr	x0, [x19]
    40011a34:	f9000b60 	str	x0, [x27, #16]
    40011a38:	f9400660 	ldr	x0, [x19, #8]
    40011a3c:	f9000f60 	str	x0, [x27, #24]
    40011a40:	f100dc5f 	cmp	x2, #0x37
    40011a44:	54001088 	b.hi	40011c54 <_realloc_r+0x4f4>  // b.pmore
    40011a48:	91004273 	add	x19, x19, #0x10
    40011a4c:	91008360 	add	x0, x27, #0x20
    40011a50:	f9400261 	ldr	x1, [x19]
    40011a54:	f9000001 	str	x1, [x0]
    40011a58:	f9400661 	ldr	x1, [x19, #8]
    40011a5c:	f9000401 	str	x1, [x0, #8]
    40011a60:	f9400a61 	ldr	x1, [x19, #16]
    40011a64:	f9000801 	str	x1, [x0, #16]
    40011a68:	8b140362 	add	x2, x27, x20
    40011a6c:	cb140341 	sub	x1, x26, x20
    40011a70:	f9000b82 	str	x2, [x28, #16]
    40011a74:	b2400021 	orr	x1, x1, #0x1
    40011a78:	aa1703e0 	mov	x0, x23
    40011a7c:	f9000441 	str	x1, [x2, #8]
    40011a80:	f9400761 	ldr	x1, [x27, #8]
    40011a84:	92400021 	and	x1, x1, #0x1
    40011a88:	aa140034 	orr	x20, x1, x20
    40011a8c:	f9000774 	str	x20, [x27, #8]
    40011a90:	97ffc954 	bl	40003fe0 <__malloc_unlock>
    40011a94:	a94573fb 	ldp	x27, x28, [sp, #80]
    40011a98:	17ffffb0 	b	40011958 <_realloc_r+0x1f8>
    40011a9c:	f9400700 	ldr	x0, [x24, #8]
    40011aa0:	a94573fb 	ldp	x27, x28, [sp, #80]
    40011aa4:	927ef400 	and	x0, x0, #0xfffffffffffffffc
    40011aa8:	8b0002d6 	add	x22, x22, x0
    40011aac:	17ffff9d 	b	40011920 <_realloc_r+0x1c0>
    40011ab0:	f9400260 	ldr	x0, [x19]
    40011ab4:	f90002a0 	str	x0, [x21]
    40011ab8:	f9400660 	ldr	x0, [x19, #8]
    40011abc:	f90006a0 	str	x0, [x21, #8]
    40011ac0:	f100dc5f 	cmp	x2, #0x37
    40011ac4:	54000648 	b.hi	40011b8c <_realloc_r+0x42c>  // b.pmore
    40011ac8:	91004261 	add	x1, x19, #0x10
    40011acc:	910042a0 	add	x0, x21, #0x10
    40011ad0:	17ffff6a 	b	40011878 <_realloc_r+0x118>
    40011ad4:	aa1b03e0 	mov	x0, x27
    40011ad8:	d10022c2 	sub	x2, x22, #0x8
    40011adc:	f8410c04 	ldr	x4, [x0, #16]!
    40011ae0:	f9400f61 	ldr	x1, [x27, #24]
    40011ae4:	f9000c81 	str	x1, [x4, #24]
    40011ae8:	f9000824 	str	x4, [x1, #16]
    40011aec:	f101205f 	cmp	x2, #0x48
    40011af0:	54000408 	b.hi	40011b70 <_realloc_r+0x410>  // b.pmore
    40011af4:	aa0003e1 	mov	x1, x0
    40011af8:	f1009c5f 	cmp	x2, #0x27
    40011afc:	54000129 	b.ls	40011b20 <_realloc_r+0x3c0>  // b.plast
    40011b00:	f9400261 	ldr	x1, [x19]
    40011b04:	f9000b61 	str	x1, [x27, #16]
    40011b08:	f9400661 	ldr	x1, [x19, #8]
    40011b0c:	f9000f61 	str	x1, [x27, #24]
    40011b10:	f100dc5f 	cmp	x2, #0x37
    40011b14:	540006a8 	b.hi	40011be8 <_realloc_r+0x488>  // b.pmore
    40011b18:	91004273 	add	x19, x19, #0x10
    40011b1c:	91008361 	add	x1, x27, #0x20
    40011b20:	f9400262 	ldr	x2, [x19]
    40011b24:	aa1b03f9 	mov	x25, x27
    40011b28:	a94573fb 	ldp	x27, x28, [sp, #80]
    40011b2c:	f9000022 	str	x2, [x1]
    40011b30:	aa0303f6 	mov	x22, x3
    40011b34:	f9400662 	ldr	x2, [x19, #8]
    40011b38:	f9000422 	str	x2, [x1, #8]
    40011b3c:	f9400a62 	ldr	x2, [x19, #16]
    40011b40:	aa0003f3 	mov	x19, x0
    40011b44:	f9000822 	str	x2, [x1, #16]
    40011b48:	17ffff76 	b	40011920 <_realloc_r+0x1c0>
    40011b4c:	aa1303e1 	mov	x1, x19
    40011b50:	97ffbe8c 	bl	40001580 <memmove>
    40011b54:	17ffff4f 	b	40011890 <_realloc_r+0x130>
    40011b58:	a9410444 	ldp	x4, x1, [x2, #16]
    40011b5c:	f9000c81 	str	x1, [x4, #24]
    40011b60:	aa1b03e0 	mov	x0, x27
    40011b64:	d10022c2 	sub	x2, x22, #0x8
    40011b68:	f9000824 	str	x4, [x1, #16]
    40011b6c:	17ffffdc 	b	40011adc <_realloc_r+0x37c>
    40011b70:	aa1303e1 	mov	x1, x19
    40011b74:	aa0303f6 	mov	x22, x3
    40011b78:	aa1b03f9 	mov	x25, x27
    40011b7c:	aa0003f3 	mov	x19, x0
    40011b80:	97ffbe80 	bl	40001580 <memmove>
    40011b84:	a94573fb 	ldp	x27, x28, [sp, #80]
    40011b88:	17ffff66 	b	40011920 <_realloc_r+0x1c0>
    40011b8c:	f9400a60 	ldr	x0, [x19, #16]
    40011b90:	f9000aa0 	str	x0, [x21, #16]
    40011b94:	f9400e60 	ldr	x0, [x19, #24]
    40011b98:	f9000ea0 	str	x0, [x21, #24]
    40011b9c:	f101205f 	cmp	x2, #0x48
    40011ba0:	54000360 	b.eq	40011c0c <_realloc_r+0x4ac>  // b.none
    40011ba4:	91008261 	add	x1, x19, #0x20
    40011ba8:	910082a0 	add	x0, x21, #0x20
    40011bac:	17ffff33 	b	40011878 <_realloc_r+0x118>
    40011bb0:	8b140303 	add	x3, x24, x20
    40011bb4:	cb140041 	sub	x1, x2, x20
    40011bb8:	f9000b83 	str	x3, [x28, #16]
    40011bbc:	b2400021 	orr	x1, x1, #0x1
    40011bc0:	aa1703e0 	mov	x0, x23
    40011bc4:	aa1303f5 	mov	x21, x19
    40011bc8:	f9000461 	str	x1, [x3, #8]
    40011bcc:	f9400701 	ldr	x1, [x24, #8]
    40011bd0:	92400021 	and	x1, x1, #0x1
    40011bd4:	aa140034 	orr	x20, x1, x20
    40011bd8:	f9000714 	str	x20, [x24, #8]
    40011bdc:	97ffc901 	bl	40003fe0 <__malloc_unlock>
    40011be0:	a94573fb 	ldp	x27, x28, [sp, #80]
    40011be4:	17ffff5d 	b	40011958 <_realloc_r+0x1f8>
    40011be8:	f9400a61 	ldr	x1, [x19, #16]
    40011bec:	f9001361 	str	x1, [x27, #32]
    40011bf0:	f9400e61 	ldr	x1, [x19, #24]
    40011bf4:	f9001761 	str	x1, [x27, #40]
    40011bf8:	f101205f 	cmp	x2, #0x48
    40011bfc:	54000160 	b.eq	40011c28 <_realloc_r+0x4c8>  // b.none
    40011c00:	91008273 	add	x19, x19, #0x20
    40011c04:	9100c361 	add	x1, x27, #0x30
    40011c08:	17ffffc6 	b	40011b20 <_realloc_r+0x3c0>
    40011c0c:	f9401260 	ldr	x0, [x19, #32]
    40011c10:	f90012a0 	str	x0, [x21, #32]
    40011c14:	9100c261 	add	x1, x19, #0x30
    40011c18:	9100c2a0 	add	x0, x21, #0x30
    40011c1c:	f9401662 	ldr	x2, [x19, #40]
    40011c20:	f90016a2 	str	x2, [x21, #40]
    40011c24:	17ffff15 	b	40011878 <_realloc_r+0x118>
    40011c28:	f9401261 	ldr	x1, [x19, #32]
    40011c2c:	f9001b61 	str	x1, [x27, #48]
    40011c30:	9100c273 	add	x19, x19, #0x30
    40011c34:	91010361 	add	x1, x27, #0x40
    40011c38:	f85f8262 	ldur	x2, [x19, #-8]
    40011c3c:	f9001f62 	str	x2, [x27, #56]
    40011c40:	17ffffb8 	b	40011b20 <_realloc_r+0x3c0>
    40011c44:	aa1303e1 	mov	x1, x19
    40011c48:	aa1503e0 	mov	x0, x21
    40011c4c:	97ffbe4d 	bl	40001580 <memmove>
    40011c50:	17ffff86 	b	40011a68 <_realloc_r+0x308>
    40011c54:	f9400a60 	ldr	x0, [x19, #16]
    40011c58:	f9001360 	str	x0, [x27, #32]
    40011c5c:	f9400e60 	ldr	x0, [x19, #24]
    40011c60:	f9001760 	str	x0, [x27, #40]
    40011c64:	f101205f 	cmp	x2, #0x48
    40011c68:	54000080 	b.eq	40011c78 <_realloc_r+0x518>  // b.none
    40011c6c:	91008273 	add	x19, x19, #0x20
    40011c70:	9100c360 	add	x0, x27, #0x30
    40011c74:	17ffff77 	b	40011a50 <_realloc_r+0x2f0>
    40011c78:	f9401260 	ldr	x0, [x19, #32]
    40011c7c:	f9001b60 	str	x0, [x27, #48]
    40011c80:	9100c273 	add	x19, x19, #0x30
    40011c84:	91010360 	add	x0, x27, #0x40
    40011c88:	f85f8261 	ldur	x1, [x19, #-8]
    40011c8c:	f9001f61 	str	x1, [x27, #56]
    40011c90:	17ffff70 	b	40011a50 <_realloc_r+0x2f0>
	...

0000000040011ca0 <nan>:
    40011ca0:	d2efff00 	mov	x0, #0x7ff8000000000000    	// #9221120237041090560
    40011ca4:	9e670000 	fmov	d0, x0
    40011ca8:	d65f03c0 	ret
    40011cac:	00000000 	udf	#0

0000000040011cb0 <__ssprint_r>:
    40011cb0:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
    40011cb4:	910003fd 	mov	x29, sp
    40011cb8:	f90033e0 	str	x0, [sp, #96]
    40011cbc:	f9400840 	ldr	x0, [x2, #16]
    40011cc0:	a9025bf5 	stp	x21, x22, [sp, #32]
    40011cc4:	aa0203f6 	mov	x22, x2
    40011cc8:	b4000a40 	cbz	x0, 40011e10 <__ssprint_r+0x160>
    40011ccc:	b9400c35 	ldr	w21, [x1, #12]
    40011cd0:	a90573fb 	stp	x27, x28, [sp, #80]
    40011cd4:	f9400020 	ldr	x0, [x1]
    40011cd8:	a90153f3 	stp	x19, x20, [sp, #16]
    40011cdc:	aa0103f4 	mov	x20, x1
    40011ce0:	f940005c 	ldr	x28, [x2]
    40011ce4:	d2800013 	mov	x19, #0x0                   	// #0
    40011ce8:	a90363f7 	stp	x23, x24, [sp, #48]
    40011cec:	52809017 	mov	w23, #0x480                 	// #1152
    40011cf0:	a9046bf9 	stp	x25, x26, [sp, #64]
    40011cf4:	d2800019 	mov	x25, #0x0                   	// #0
    40011cf8:	b4000973 	cbz	x19, 40011e24 <__ssprint_r+0x174>
    40011cfc:	93407eba 	sxtw	x26, w21
    40011d00:	93407e61 	sxtw	x1, w19
    40011d04:	eb1a027f 	cmp	x19, x26
    40011d08:	54000943 	b.cc	40011e30 <__ssprint_r+0x180>  // b.lo, b.ul, b.last
    40011d0c:	79402285 	ldrh	w5, [x20, #16]
    40011d10:	93407e7b 	sxtw	x27, w19
    40011d14:	6a1700bf 	tst	w5, w23
    40011d18:	54000560 	b.eq	40011dc4 <__ssprint_r+0x114>  // b.none
    40011d1c:	b9402284 	ldr	w4, [x20, #32]
    40011d20:	91000662 	add	x2, x19, #0x1
    40011d24:	f9400e81 	ldr	x1, [x20, #24]
    40011d28:	0b040484 	add	w4, w4, w4, lsl #1
    40011d2c:	cb01001a 	sub	x26, x0, x1
    40011d30:	0b447c84 	add	w4, w4, w4, lsr #31
    40011d34:	8b3ac040 	add	x0, x2, w26, sxtw
    40011d38:	93407f55 	sxtw	x21, w26
    40011d3c:	13017c98 	asr	w24, w4, #1
    40011d40:	93407f02 	sxtw	x2, w24
    40011d44:	eb00005f 	cmp	x2, x0
    40011d48:	54000082 	b.cs	40011d58 <__ssprint_r+0xa8>  // b.hs, b.nlast
    40011d4c:	11000664 	add	w4, w19, #0x1
    40011d50:	0b1a0098 	add	w24, w4, w26
    40011d54:	93407f02 	sxtw	x2, w24
    40011d58:	36500745 	tbz	w5, #10, 40011e40 <__ssprint_r+0x190>
    40011d5c:	f94033e0 	ldr	x0, [sp, #96]
    40011d60:	aa0203e1 	mov	x1, x2
    40011d64:	97ffc68f 	bl	400037a0 <_malloc_r>
    40011d68:	b40009a0 	cbz	x0, 40011e9c <__ssprint_r+0x1ec>
    40011d6c:	f9400e81 	ldr	x1, [x20, #24]
    40011d70:	aa1503e2 	mov	x2, x21
    40011d74:	f90037e0 	str	x0, [sp, #104]
    40011d78:	97ffbc92 	bl	40000fc0 <memcpy>
    40011d7c:	79402280 	ldrh	w0, [x20, #16]
    40011d80:	12809001 	mov	w1, #0xfffffb7f            	// #-1153
    40011d84:	f94037e5 	ldr	x5, [sp, #104]
    40011d88:	0a010000 	and	w0, w0, w1
    40011d8c:	32190000 	orr	w0, w0, #0x80
    40011d90:	79002280 	strh	w0, [x20, #16]
    40011d94:	8b1500a0 	add	x0, x5, x21
    40011d98:	4b1a031a 	sub	w26, w24, w26
    40011d9c:	93407e61 	sxtw	x1, w19
    40011da0:	f9000280 	str	x0, [x20]
    40011da4:	b9000e9a 	str	w26, [x20, #12]
    40011da8:	aa0103fb 	mov	x27, x1
    40011dac:	f9000e85 	str	x5, [x20, #24]
    40011db0:	2a1303f5 	mov	w21, w19
    40011db4:	b9002298 	str	w24, [x20, #32]
    40011db8:	aa0103fa 	mov	x26, x1
    40011dbc:	eb13003f 	cmp	x1, x19
    40011dc0:	54000388 	b.hi	40011e30 <__ssprint_r+0x180>  // b.pmore
    40011dc4:	aa1903e1 	mov	x1, x25
    40011dc8:	aa1a03e2 	mov	x2, x26
    40011dcc:	97ffbded 	bl	40001580 <memmove>
    40011dd0:	cb1b0273 	sub	x19, x19, x27
    40011dd4:	f9400280 	ldr	x0, [x20]
    40011dd8:	8b1b0339 	add	x25, x25, x27
    40011ddc:	b9400e82 	ldr	w2, [x20, #12]
    40011de0:	f9400ac1 	ldr	x1, [x22, #16]
    40011de4:	4b150055 	sub	w21, w2, w21
    40011de8:	8b1a0000 	add	x0, x0, x26
    40011dec:	f9000280 	str	x0, [x20]
    40011df0:	b9000e95 	str	w21, [x20, #12]
    40011df4:	cb1b0021 	sub	x1, x1, x27
    40011df8:	f9000ac1 	str	x1, [x22, #16]
    40011dfc:	b5fff7e1 	cbnz	x1, 40011cf8 <__ssprint_r+0x48>
    40011e00:	a94153f3 	ldp	x19, x20, [sp, #16]
    40011e04:	a94363f7 	ldp	x23, x24, [sp, #48]
    40011e08:	a9446bf9 	ldp	x25, x26, [sp, #64]
    40011e0c:	a94573fb 	ldp	x27, x28, [sp, #80]
    40011e10:	b9000adf 	str	wzr, [x22, #8]
    40011e14:	52800000 	mov	w0, #0x0                   	// #0
    40011e18:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40011e1c:	a8c77bfd 	ldp	x29, x30, [sp], #112
    40011e20:	d65f03c0 	ret
    40011e24:	a9404f99 	ldp	x25, x19, [x28]
    40011e28:	9100439c 	add	x28, x28, #0x10
    40011e2c:	17ffffb3 	b	40011cf8 <__ssprint_r+0x48>
    40011e30:	aa0103fb 	mov	x27, x1
    40011e34:	2a1303f5 	mov	w21, w19
    40011e38:	aa0103fa 	mov	x26, x1
    40011e3c:	17ffffe2 	b	40011dc4 <__ssprint_r+0x114>
    40011e40:	f94033e0 	ldr	x0, [sp, #96]
    40011e44:	97fffe47 	bl	40011760 <_realloc_r>
    40011e48:	aa0003e5 	mov	x5, x0
    40011e4c:	b5fffa40 	cbnz	x0, 40011d94 <__ssprint_r+0xe4>
    40011e50:	f9400e81 	ldr	x1, [x20, #24]
    40011e54:	f94033f3 	ldr	x19, [sp, #96]
    40011e58:	aa1303e0 	mov	x0, x19
    40011e5c:	97ffc3e5 	bl	40002df0 <_free_r>
    40011e60:	52800180 	mov	w0, #0xc                   	// #12
    40011e64:	b9000260 	str	w0, [x19]
    40011e68:	79402281 	ldrh	w1, [x20, #16]
    40011e6c:	12800000 	mov	w0, #0xffffffff            	// #-1
    40011e70:	a94363f7 	ldp	x23, x24, [sp, #48]
    40011e74:	321a0021 	orr	w1, w1, #0x40
    40011e78:	79002281 	strh	w1, [x20, #16]
    40011e7c:	a94153f3 	ldp	x19, x20, [sp, #16]
    40011e80:	a9446bf9 	ldp	x25, x26, [sp, #64]
    40011e84:	a94573fb 	ldp	x27, x28, [sp, #80]
    40011e88:	b9000adf 	str	wzr, [x22, #8]
    40011e8c:	f9000adf 	str	xzr, [x22, #16]
    40011e90:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40011e94:	a8c77bfd 	ldp	x29, x30, [sp], #112
    40011e98:	d65f03c0 	ret
    40011e9c:	f94033e1 	ldr	x1, [sp, #96]
    40011ea0:	52800180 	mov	w0, #0xc                   	// #12
    40011ea4:	b9000020 	str	w0, [x1]
    40011ea8:	17fffff0 	b	40011e68 <__ssprint_r+0x1b8>
    40011eac:	00000000 	udf	#0

0000000040011eb0 <abort>:
    40011eb0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    40011eb4:	528000c0 	mov	w0, #0x6                   	// #6
    40011eb8:	910003fd 	mov	x29, sp
    40011ebc:	94000005 	bl	40011ed0 <raise>
    40011ec0:	52800020 	mov	w0, #0x1                   	// #1
    40011ec4:	94002f05 	bl	4001dad8 <_exit>
	...

0000000040011ed0 <raise>:
    40011ed0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    40011ed4:	b00005e1 	adrp	x1, 400ce000 <z_interrupt_stacks+0x440>
    40011ed8:	910003fd 	mov	x29, sp
    40011edc:	a90153f3 	stp	x19, x20, [sp, #16]
    40011ee0:	f9461434 	ldr	x20, [x1, #3112]
    40011ee4:	71007c1f 	cmp	w0, #0x1f
    40011ee8:	54000468 	b.hi	40011f74 <raise+0xa4>  // b.pmore
    40011eec:	f940fe82 	ldr	x2, [x20, #504]
    40011ef0:	2a0003f3 	mov	w19, w0
    40011ef4:	b40001c2 	cbz	x2, 40011f2c <raise+0x5c>
    40011ef8:	93407c03 	sxtw	x3, w0
    40011efc:	f8637841 	ldr	x1, [x2, x3, lsl #3]
    40011f00:	b4000161 	cbz	x1, 40011f2c <raise+0x5c>
    40011f04:	f100043f 	cmp	x1, #0x1
    40011f08:	540002e0 	b.eq	40011f64 <raise+0x94>  // b.none
    40011f0c:	b100043f 	cmn	x1, #0x1
    40011f10:	540001e0 	b.eq	40011f4c <raise+0x7c>  // b.none
    40011f14:	f823785f 	str	xzr, [x2, x3, lsl #3]
    40011f18:	d63f0020 	blr	x1
    40011f1c:	52800000 	mov	w0, #0x0                   	// #0
    40011f20:	a94153f3 	ldp	x19, x20, [sp, #16]
    40011f24:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40011f28:	d65f03c0 	ret
    40011f2c:	aa1403e0 	mov	x0, x20
    40011f30:	9400002c 	bl	40011fe0 <_getpid_r>
    40011f34:	2a1303e2 	mov	w2, w19
    40011f38:	2a0003e1 	mov	w1, w0
    40011f3c:	aa1403e0 	mov	x0, x20
    40011f40:	a94153f3 	ldp	x19, x20, [sp, #16]
    40011f44:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40011f48:	14000012 	b	40011f90 <_kill_r>
    40011f4c:	528002c1 	mov	w1, #0x16                  	// #22
    40011f50:	b9000281 	str	w1, [x20]
    40011f54:	52800020 	mov	w0, #0x1                   	// #1
    40011f58:	a94153f3 	ldp	x19, x20, [sp, #16]
    40011f5c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40011f60:	d65f03c0 	ret
    40011f64:	52800000 	mov	w0, #0x0                   	// #0
    40011f68:	a94153f3 	ldp	x19, x20, [sp, #16]
    40011f6c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40011f70:	d65f03c0 	ret
    40011f74:	528002c1 	mov	w1, #0x16                  	// #22
    40011f78:	12800000 	mov	w0, #0xffffffff            	// #-1
    40011f7c:	b9000281 	str	w1, [x20]
    40011f80:	17ffffe8 	b	40011f20 <raise+0x50>
	...

0000000040011f90 <_kill_r>:
    40011f90:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    40011f94:	910003fd 	mov	x29, sp
    40011f98:	a90153f3 	stp	x19, x20, [sp, #16]
    40011f9c:	d0000394 	adrp	x20, 40083000 <ws+0x3a40>
    40011fa0:	aa0003f3 	mov	x19, x0
    40011fa4:	b90b9e9f 	str	wzr, [x20, #2972]
    40011fa8:	2a0103e0 	mov	w0, w1
    40011fac:	2a0203e1 	mov	w1, w2
    40011fb0:	94002ec2 	bl	4001dab8 <_kill>
    40011fb4:	3100041f 	cmn	w0, #0x1
    40011fb8:	54000080 	b.eq	40011fc8 <_kill_r+0x38>  // b.none
    40011fbc:	a94153f3 	ldp	x19, x20, [sp, #16]
    40011fc0:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40011fc4:	d65f03c0 	ret
    40011fc8:	b94b9e81 	ldr	w1, [x20, #2972]
    40011fcc:	34ffff81 	cbz	w1, 40011fbc <_kill_r+0x2c>
    40011fd0:	b9000261 	str	w1, [x19]
    40011fd4:	a94153f3 	ldp	x19, x20, [sp, #16]
    40011fd8:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40011fdc:	d65f03c0 	ret

0000000040011fe0 <_getpid_r>:
    40011fe0:	14002eb8 	b	4001dac0 <_getpid>
    40011fe4:	00000000 	udf	#0

0000000040011fe8 <__reset_prep_c>:
 */

GTEXT(__reset_prep_c)
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__reset_prep_c)
	/* return address: x23 */
	mov	x23, x30
    40011fe8:	aa1e03f7 	mov	x23, x30

	switch_el x0, 3f, 2f, 1f
    40011fec:	d5384240 	mrs	x0, currentel
    40011ff0:	f100301f 	cmp	x0, #0xc
    40011ff4:	540000a0 	b.eq	40012008 <__reset_prep_c+0x20>  // b.none
    40011ff8:	f100201f 	cmp	x0, #0x8
    40011ffc:	54000100 	b.eq	4001201c <__reset_prep_c+0x34>  // b.none
    40012000:	f100101f 	cmp	x0, #0x4
    40012004:	54000180 	b.eq	40012034 <__reset_prep_c+0x4c>  // b.none
3:
	/* Reinitialize SCTLR from scratch in EL3 */
	ldr	w0, =(SCTLR_EL3_RES1 | SCTLR_I_BIT | SCTLR_SA_BIT)
    40012008:	18000600 	ldr	w0, 400120c8 <switch_el+0x58>
	msr	sctlr_el3, x0
    4001200c:	d51e1000 	msr	sctlr_el3, x0

	/* Custom plat prep_c init */
	bl	z_arm64_el3_plat_prep_c
    40012010:	94002b8f 	bl	4001ce4c <z_arm64_el3_plat_prep_c>

	/* Set SP_EL1 */
	msr     sp_el1, x24
    40012014:	d51c4118 	msr	sp_el1, x24

	b	out
    40012018:	1400000d 	b	4001204c <out>
2:
	/* Disable alignment fault checking */
	mrs	x0, sctlr_el2
    4001201c:	d53c1000 	mrs	x0, sctlr_el2
	bic	x0, x0, SCTLR_A_BIT
    40012020:	927ef800 	and	x0, x0, #0xfffffffffffffffd
	msr	sctlr_el2, x0
    40012024:	d51c1000 	msr	sctlr_el2, x0

	/* Custom plat prep_c init */
	bl	z_arm64_el2_plat_prep_c
    40012028:	94002b8a 	bl	4001ce50 <z_arm64_el2_plat_prep_c>

	/* Set SP_EL1 */
	msr     sp_el1, x24
    4001202c:	d51c4118 	msr	sp_el1, x24

	b	out
    40012030:	14000007 	b	4001204c <out>
1:
	/* Disable alignment fault checking */
	mrs	x0, sctlr_el1
    40012034:	d5381000 	mrs	x0, sctlr_el1
	bic	x0, x0, SCTLR_A_BIT
    40012038:	927ef800 	and	x0, x0, #0xfffffffffffffffd
	msr	sctlr_el1, x0
    4001203c:	d5181000 	msr	sctlr_el1, x0

	/* Custom plat prep_c init */
	bl	z_arm64_el1_plat_prep_c
    40012040:	94002b85 	bl	4001ce54 <z_arm64_el1_plat_prep_c>

	/* Set SP_EL1. We cannot use sp_el1 at EL1 */
	msr     SPSel, #1
    40012044:	d50041bf 	msr	spsel, #0x1
	mov     sp, x24
    40012048:	9100031f 	mov	sp, x24

000000004001204c <out>:
out:
	isb
    4001204c:	d5033fdf 	isb

	/* Select SP_EL0 */
	msr	SPSel, #0
    40012050:	d50040bf 	msr	spsel, #0x0

	/* Initialize stack */
	mov	sp, x24
    40012054:	9100031f 	mov	sp, x24

	ret	x23
    40012058:	d65f02e0 	ret	x23

000000004001205c <__reset>:
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__reset)

GTEXT(__start)
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)
	/* Mask all exceptions */
	msr	DAIFSet, #0xf
    4001205c:	d5034fdf 	msr	daifset, #0xf
primary_core:
	/* advertise ourself */
	str	x1, [x0, #BOOT_PARAM_MPID_OFFSET]
#endif
	/* load primary stack and entry point */
	ldr	x24, =(z_interrupt_stacks + CONFIG_ISR_STACK_SIZE)
    40012060:	58000398 	ldr	x24, 400120d0 <switch_el+0x60>
	ldr	x25, =z_arm64_prep_c
    40012064:	580003b9 	ldr	x25, 400120d8 <switch_el+0x68>
2:
	/* Prepare for calling C code */
	bl	__reset_prep_c
    40012068:	97ffffe0 	bl	40011fe8 <__reset_prep_c>

	/* Platform hook for highest EL */
	bl	z_arm64_el_highest_init
    4001206c:	94002b7e 	bl	4001ce64 <z_arm64_el_highest_init>

0000000040012070 <switch_el>:

switch_el:
	switch_el x0, 3f, 2f, 1f
    40012070:	d5384240 	mrs	x0, currentel
    40012074:	f100301f 	cmp	x0, #0xc
    40012078:	540000a0 	b.eq	4001208c <switch_el+0x1c>  // b.none
    4001207c:	f100201f 	cmp	x0, #0x8
    40012080:	540000e0 	b.eq	4001209c <switch_el+0x2c>  // b.none
    40012084:	f100101f 	cmp	x0, #0x4
    40012088:	54000180 	b.eq	400120b8 <switch_el+0x48>  // b.none
3:
	/* EL3 init */
	bl	z_arm64_el3_init
    4001208c:	94002b9b 	bl	4001cef8 <z_arm64_el3_init>

	/* Get next EL */
	adr	x0, switch_el
    40012090:	10ffff00 	adr	x0, 40012070 <switch_el>
	bl	z_arm64_el3_get_next_el
    40012094:	94002bbe 	bl	4001cf8c <z_arm64_el3_get_next_el>
	eret
    40012098:	d69f03e0 	eret

2:
	/* EL2 init */
	bl	z_arm64_el2_init
    4001209c:	94002b84 	bl	4001ceac <z_arm64_el2_init>

	/* Move to EL1 with all exceptions masked */
	mov_imm	x0, (SPSR_DAIF_MASK | SPSR_MODE_EL1T)
    400120a0:	d2a00000 	movz	x0, #0x0, lsl #16
    400120a4:	f2807880 	movk	x0, #0x3c4
	msr	spsr_el2, x0
    400120a8:	d51c4000 	msr	spsr_el2, x0

	adr	x0, 1f
    400120ac:	10000060 	adr	x0, 400120b8 <switch_el+0x48>
	msr	elr_el2, x0
    400120b0:	d51c4020 	msr	elr_el2, x0
	eret
    400120b4:	d69f03e0 	eret

1:
	/* EL1 init */
	bl	z_arm64_el1_init
    400120b8:	94002ba2 	bl	4001cf40 <z_arm64_el1_init>

	/* Enable SError interrupts */
	msr	DAIFClr, #(DAIFCLR_ABT_BIT)
    400120bc:	d50344ff 	msr	daifclr, #0x4
	isb
    400120c0:	d5033fdf 	isb

	ret	x25  /* either z_arm64_prep_c or z_arm64_secondary_prep_c */
    400120c4:	d65f0320 	ret	x25
    400120c8:	30c51838 	.word	0x30c51838
    400120cc:	00000000 	udf	#0
    400120d0:	400cebc0 	.word	0x400cebc0
    400120d4:	00000000 	.word	0x00000000
    400120d8:	4001ce08 	.word	0x4001ce08
    400120dc:	00000000 	.word	0x00000000

00000000400120e0 <_isr_wrapper>:

GTEXT(_isr_wrapper)
SECTION_FUNC(TEXT, _isr_wrapper)

	/* ++(_kernel->nested) to be checked by arch_is_in_isr() */
	inc_nest_counter x0, x1
    400120e0:	d53bd060 	mrs	x0, tpidrro_el0
    400120e4:	927db000 	and	x0, x0, #0xfffffffffff8
    400120e8:	f9400001 	ldr	x1, [x0]
    400120ec:	91000421 	add	x1, x1, #0x1
    400120f0:	f9000001 	str	x1, [x0]
	bl	sys_trace_isr_enter
#endif

	/* Get active IRQ number from the interrupt controller */
#if !defined(CONFIG_ARM_CUSTOM_INTERRUPT_CONTROLLER)
	bl	arm_gic_get_active
    400120f4:	94002fac 	bl	4001dfa4 <arm_gic_get_active>
#else
	bl	z_soc_irq_get_active
#endif /* !CONFIG_ARM_CUSTOM_INTERRUPT_CONTROLLER */

	/* IRQ out of bounds */
	cmp	x0, #(CONFIG_NUM_IRQS - 1)
    400120f8:	f1036c1f 	cmp	x0, #0xdb
	b.hi	spurious_continue
    400120fc:	54000128 	b.hi	40012120 <spurious_continue>  // b.pmore

	stp	x0, xzr, [sp, #-16]!
    40012100:	a9bf7fe0 	stp	x0, xzr, [sp, #-16]!

	/* Retrieve the interrupt service routine */
	ldr	x1, =_sw_isr_table
    40012104:	580002e1 	ldr	x1, 40012160 <exit+0x8>
	add	x1, x1, x0, lsl #4	/* table is 16-byte wide */
    40012108:	8b001021 	add	x1, x1, x0, lsl #4
	ldp	x0, x3, [x1] /* arg in x0, ISR in x3 */
    4001210c:	a9400c20 	ldp	x0, x3, [x1]

	/*
	 * Call the ISR. Unmask and mask again the IRQs to support nested
	 * exception handlers
	 */
	msr	daifclr, #(DAIFCLR_IRQ_BIT)
    40012110:	d50342ff 	msr	daifclr, #0x2
	blr	x3
    40012114:	d63f0060 	blr	x3
	msr	daifset, #(DAIFSET_IRQ_BIT)
    40012118:	d50342df 	msr	daifset, #0x2

	/* Signal end-of-interrupt */
	ldp	x0, xzr, [sp], #16
    4001211c:	a8c17fe0 	ldp	x0, xzr, [sp], #16

0000000040012120 <spurious_continue>:

spurious_continue:
#if !defined(CONFIG_ARM_CUSTOM_INTERRUPT_CONTROLLER)
	bl	arm_gic_eoi
    40012120:	94002fa3 	bl	4001dfac <arm_gic_eoi>
#ifdef CONFIG_TRACING
	bl	sys_trace_isr_exit
#endif

	/* if (--(_kernel->nested) != 0) exit */
	dec_nest_counter x0, x1
    40012124:	d53bd060 	mrs	x0, tpidrro_el0
    40012128:	927db000 	and	x0, x0, #0xfffffffffff8
    4001212c:	f9400001 	ldr	x1, [x0]
    40012130:	f1000421 	subs	x1, x1, #0x1
    40012134:	f9000001 	str	x1, [x0]

	bne	exit
    40012138:	54000101 	b.ne	40012158 <exit>  // b.any
	 * - The next thread to schedule in x0
	 * - The current thread in x1. This value is returned using the
	 *   **old_thread parameter, so we need to make space on the stack for
	 *   that.
	 */
	sub	sp, sp, #16
    4001213c:	d10043ff 	sub	sp, sp, #0x10
	mov	x0, sp
    40012140:	910003e0 	mov	x0, sp
	bl	z_arch_get_next_switch_handle
    40012144:	94002bdc 	bl	4001d0b4 <z_arch_get_next_switch_handle>
	ldp	x1, xzr, [sp], #16
    40012148:	a8c17fe1 	ldp	x1, xzr, [sp], #16

	/*
	 * x0: 1st thread in the ready queue
	 * x1: _current thread
	 */
	cmp	x0, x1
    4001214c:	eb01001f 	cmp	x0, x1
	beq	exit
    40012150:	54000040 	b.eq	40012158 <exit>  // b.none

	/* Switch thread */
	bl	z_arm64_context_switch
    40012154:	94002b96 	bl	4001cfac <z_arm64_context_switch>

0000000040012158 <exit>:

exit:
#ifdef CONFIG_STACK_SENTINEL
	bl	z_check_stack_sentinel
#endif
	b	z_arm64_exit_exc
    40012158:	14002be0 	b	4001d0d8 <z_arm64_exit_exc>
    4001215c:	00000000 	udf	#0
    40012160:	400200b0 	.word	0x400200b0
    40012164:	00000000 	.word	0x00000000

0000000040012168 <_OffsetAbsSyms>:
GEN_NAMED_OFFSET_SYM(arm_smccc_res_t, a4, a4_a5);
GEN_NAMED_OFFSET_SYM(arm_smccc_res_t, a6, a6_a7);

#endif /* CONFIG_HAS_ARM_SMCCC */

GEN_ABS_SYM_END
    40012168:	d65f03c0 	ret

000000004001216c <add>:

//---------------------------------------------------------------------
// addition of update to the vector u
//---------------------------------------------------------------------
void add()
{
    4001216c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    40012170:	910003fd 	mov	x29, sp
  int i, j, k, m;

  if (timeron) timer_start(t_add);
    40012174:	b0000380 	adrp	x0, 40083000 <ws+0x3a40>
    40012178:	b94a8c01 	ldr	w1, [x0, #2700]
{
    4001217c:	f9000bf3 	str	x19, [sp, #16]
    40012180:	aa0003f3 	mov	x19, x0
  if (timeron) timer_start(t_add);
    40012184:	34000061 	cbz	w1, 40012190 <add+0x24>
    40012188:	52800160 	mov	w0, #0xb                   	// #11
    4001218c:	9400019f 	bl	40012808 <timer_start>
  for (k = 1; k <= grid_points[2]-2; k++) {
    40012190:	b0000380 	adrp	x0, 40083000 <ws+0x3a40>
    40012194:	912a0001 	add	x1, x0, #0xa80
    for (j = 1; j <= grid_points[1]-2; j++) {
      for (i = 1; i <= grid_points[0]-2; i++) {
        for (m = 0; m < 5; m++) {
          u[k][j][i][m] = u[k][j][i][m] + rhs[k][j][i][m];
    40012198:	b0000284 	adrp	x4, 40063000 <square+0x37a8>
    4001219c:	91206084 	add	x4, x4, #0x818
      for (i = 1; i <= grid_points[0]-2; i++) {
    400121a0:	b94a8005 	ldr	w5, [x0, #2688]
          u[k][j][i][m] = u[k][j][i][m] + rhs[k][j][i][m];
    400121a4:	b00001c8 	adrp	x8, 4004b000 <rho_i+0x33e8>
    400121a8:	912de108 	add	x8, x8, #0xb78
      for (i = 1; i <= grid_points[0]-2; i++) {
    400121ac:	52800023 	mov	w3, #0x1                   	// #1
  for (k = 1; k <= grid_points[2]-2; k++) {
    400121b0:	29409c26 	ldp	w6, w7, [x1, #4]
      for (i = 1; i <= grid_points[0]-2; i++) {
    400121b4:	510008a5 	sub	w5, w5, #0x2
    400121b8:	52834d0c 	mov	w12, #0x1a68                	// #6760
    400121bc:	5280410d 	mov	w13, #0x208                 	// #520
  for (k = 1; k <= grid_points[2]-2; k++) {
    400121c0:	510008e7 	sub	w7, w7, #0x2
    for (j = 1; j <= grid_points[1]-2; j++) {
    400121c4:	510008c6 	sub	w6, w6, #0x2
  for (k = 1; k <= grid_points[2]-2; k++) {
    400121c8:	6b0300ff 	cmp	w7, w3
    400121cc:	5400036b 	b.lt	40012238 <add+0xcc>  // b.tstop
    400121d0:	9b2c7c60 	smull	x0, w3, w12
    for (j = 1; j <= grid_points[1]-2; j++) {
    400121d4:	52800022 	mov	w2, #0x1                   	// #1
    400121d8:	9100a000 	add	x0, x0, #0x28
    400121dc:	14000010 	b	4001221c <add+0xb0>
    400121e0:	aa0a03e1 	mov	x1, x10
        for (m = 0; m < 5; m++) {
    400121e4:	5280000b 	mov	w11, #0x0                   	// #0
          u[k][j][i][m] = u[k][j][i][m] + rhs[k][j][i][m];
    400121e8:	fc646820 	ldr	d0, [x1, x4]
        for (m = 0; m < 5; m++) {
    400121ec:	1100056b 	add	w11, w11, #0x1
          u[k][j][i][m] = u[k][j][i][m] + rhs[k][j][i][m];
    400121f0:	fc686821 	ldr	d1, [x1, x8]
        for (m = 0; m < 5; m++) {
    400121f4:	7100157f 	cmp	w11, #0x5
          u[k][j][i][m] = u[k][j][i][m] + rhs[k][j][i][m];
    400121f8:	1e612800 	fadd	d0, d0, d1
    400121fc:	fc246820 	str	d0, [x1, x4]
        for (m = 0; m < 5; m++) {
    40012200:	91002021 	add	x1, x1, #0x8
    40012204:	54ffff21 	b.ne	400121e8 <add+0x7c>  // b.any
      for (i = 1; i <= grid_points[0]-2; i++) {
    40012208:	11000529 	add	w9, w9, #0x1
    4001220c:	9100a14a 	add	x10, x10, #0x28
    40012210:	6b0900bf 	cmp	w5, w9
    40012214:	54fffe6a 	b.ge	400121e0 <add+0x74>  // b.tcont
    for (j = 1; j <= grid_points[1]-2; j++) {
    40012218:	11000442 	add	w2, w2, #0x1
    4001221c:	6b0200df 	cmp	w6, w2
    40012220:	5400008b 	b.lt	40012230 <add+0xc4>  // b.tstop
    40012224:	9b2d004a 	smaddl	x10, w2, w13, x0
      for (i = 1; i <= grid_points[0]-2; i++) {
    40012228:	52800029 	mov	w9, #0x1                   	// #1
    4001222c:	17fffff9 	b	40012210 <add+0xa4>
  for (k = 1; k <= grid_points[2]-2; k++) {
    40012230:	11000463 	add	w3, w3, #0x1
    40012234:	17ffffe5 	b	400121c8 <add+0x5c>
        }
      }
    }
  }
  if (timeron) timer_stop(t_add);
    40012238:	b94a8e60 	ldr	w0, [x19, #2700]
    4001223c:	340000a0 	cbz	w0, 40012250 <add+0xe4>
}
    40012240:	f9400bf3 	ldr	x19, [sp, #16]
  if (timeron) timer_stop(t_add);
    40012244:	52800160 	mov	w0, #0xb                   	// #11
}
    40012248:	a8c27bfd 	ldp	x29, x30, [sp], #32
  if (timeron) timer_stop(t_add);
    4001224c:	1400017c 	b	4001283c <timer_stop>
}
    40012250:	f9400bf3 	ldr	x19, [sp, #16]
    40012254:	a8c27bfd 	ldp	x29, x30, [sp], #32
    40012258:	d65f03c0 	ret

000000004001225c <adi>:
//-------------------------------------------------------------------------//

#include "header.h"

void adi()
{
    4001225c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    40012260:	910003fd 	mov	x29, sp
  compute_rhs();
    40012264:	940009ab 	bl	40014910 <compute_rhs>

  x_solve();
    40012268:	94001ae2 	bl	40018df0 <x_solve>

  y_solve();
    4001226c:	94001e09 	bl	40019a90 <y_solve>

  z_solve();
    40012270:	94002133 	bl	4001a73c <z_solve>

  add();
}
    40012274:	a8c17bfd 	ldp	x29, x30, [sp], #16
  add();
    40012278:	17ffffbd 	b	4001216c <add>

000000004001227c <main>:
double njac[PROBLEM_SIZE+1][5][5];
double lhs [PROBLEM_SIZE+1][3][5][5];
double tmp1, tmp2, tmp3;

int main(int argc, char *argv[])
{
    4001227c:	d10603ff 	sub	sp, sp, #0x180
  // Root node reads input file (if it exists) else takes
  // defaults from parameters
  //---------------------------------------------------------------------
  FILE *fp;
  start_address = (void *)main;
  printf("Address of the main function is %p\n",start_address);
    40012280:	90000001 	adrp	x1, 40012000 <__reset_prep_c+0x18>
    40012284:	9109f021 	add	x1, x1, #0x27c
    40012288:	b0000080 	adrp	x0, 40023000 <fpi.1>
    4001228c:	9117b800 	add	x0, x0, #0x5ee
{
    40012290:	a9057bfd 	stp	x29, x30, [sp, #80]
    40012294:	910143fd 	add	x29, sp, #0x50
    40012298:	a90653f3 	stp	x19, x20, [sp, #96]
  if ((fp = fopen("timer.flag", "r")) != NULL) {
    4001229c:	b0000093 	adrp	x19, 40023000 <fpi.1>
    400122a0:	91184a73 	add	x19, x19, #0x612
{
    400122a4:	a9075bf5 	stp	x21, x22, [sp, #112]
    400122a8:	b0000395 	adrp	x21, 40083000 <ws+0x3a40>
    400122ac:	a90863f7 	stp	x23, x24, [sp, #128]
    400122b0:	6d0927e8 	stp	d8, d9, [sp, #144]
    400122b4:	fd0053ea 	str	d10, [sp, #160]
  printf("Address of the main function is %p\n",start_address);
    400122b8:	97ffc766 	bl	40004050 <printf>
  if ((fp = fopen("timer.flag", "r")) != NULL) {
    400122bc:	b0000080 	adrp	x0, 40023000 <fpi.1>
    400122c0:	91185000 	add	x0, x0, #0x614
    400122c4:	aa1303e1 	mov	x1, x19
    400122c8:	97ffc27e 	bl	40002cc0 <fopen>
    400122cc:	b4000ee0 	cbz	x0, 400124a8 <main+0x22c>
    timeron = True;
    400122d0:	52800021 	mov	w1, #0x1                   	// #1
    400122d4:	b90a8ea1 	str	w1, [x21, #2700]
    t_names[t_total] = "total";
    400122d8:	b0000081 	adrp	x1, 40023000 <fpi.1>
    400122dc:	91187c21 	add	x1, x1, #0x61f
    400122e0:	f90097e1 	str	x1, [sp, #296]
    t_names[t_rhsx] = "rhsx";
    400122e4:	b0000081 	adrp	x1, 40023000 <fpi.1>
    400122e8:	91189421 	add	x1, x1, #0x625
    400122ec:	f9009be1 	str	x1, [sp, #304]
    t_names[t_rhsy] = "rhsy";
    400122f0:	b0000081 	adrp	x1, 40023000 <fpi.1>
    400122f4:	9118a821 	add	x1, x1, #0x62a
    400122f8:	f9009fe1 	str	x1, [sp, #312]
    t_names[t_rhsz] = "rhsz";
    400122fc:	b0000081 	adrp	x1, 40023000 <fpi.1>
    40012300:	9118bc21 	add	x1, x1, #0x62f
    40012304:	f900a3e1 	str	x1, [sp, #320]
    t_names[t_rhs] = "rhs";
    40012308:	b0000081 	adrp	x1, 40023000 <fpi.1>
    4001230c:	9120d021 	add	x1, x1, #0x834
    40012310:	f900a7e1 	str	x1, [sp, #328]
    t_names[t_xsolve] = "xsolve";
    40012314:	b0000081 	adrp	x1, 40023000 <fpi.1>
    40012318:	9118d021 	add	x1, x1, #0x634
    4001231c:	f900abe1 	str	x1, [sp, #336]
    t_names[t_ysolve] = "ysolve";
    40012320:	b0000081 	adrp	x1, 40023000 <fpi.1>
    40012324:	9118ec21 	add	x1, x1, #0x63b
    40012328:	f900afe1 	str	x1, [sp, #344]
    t_names[t_zsolve] = "zsolve";
    4001232c:	b0000081 	adrp	x1, 40023000 <fpi.1>
    40012330:	91190821 	add	x1, x1, #0x642
    40012334:	f900b3e1 	str	x1, [sp, #352]
    t_names[t_rdis1] = "redist1";
    40012338:	b0000081 	adrp	x1, 40023000 <fpi.1>
    4001233c:	91192421 	add	x1, x1, #0x649
    40012340:	f900b7e1 	str	x1, [sp, #360]
    t_names[t_rdis2] = "redist2";
    40012344:	b0000081 	adrp	x1, 40023000 <fpi.1>
    40012348:	91194421 	add	x1, x1, #0x651
    4001234c:	f900bbe1 	str	x1, [sp, #368]
    t_names[t_add] = "add";
    40012350:	b0000081 	adrp	x1, 40023000 <fpi.1>
    40012354:	91196421 	add	x1, x1, #0x659
    40012358:	f900bfe1 	str	x1, [sp, #376]
    fclose(fp);
    4001235c:	97ffc035 	bl	40002430 <fclose>
  } else {
    timeron = False;
  }

  printf("\n\n NAS Parallel Benchmarks (NPB3.3-SER-C) - BT Benchmark\n\n");
    40012360:	b0000080 	adrp	x0, 40023000 <fpi.1>
    40012364:	91197400 	add	x0, x0, #0x65d
    40012368:	97ffc73a 	bl	40004050 <printf>

  if ((fp = fopen("inputbt.data", "r")) != NULL) {
    4001236c:	aa1303e1 	mov	x1, x19
    40012370:	b0000080 	adrp	x0, 40023000 <fpi.1>
    40012374:	911a6000 	add	x0, x0, #0x698
    40012378:	97ffc252 	bl	40002cc0 <fopen>
    4001237c:	aa0003f3 	mov	x19, x0
    40012380:	b4000980 	cbz	x0, 400124b0 <main+0x234>
    int result;
    printf(" Reading from input file inputbt.data\n");
    40012384:	b0000080 	adrp	x0, 40023000 <fpi.1>
    40012388:	911a9400 	add	x0, x0, #0x6a5
    4001238c:	97ffc731 	bl	40004050 <printf>
    result = fscanf(fp, "%d", &niter);
    40012390:	b0000081 	adrp	x1, 40023000 <fpi.1>
    40012394:	911b3021 	add	x1, x1, #0x6cc
    40012398:	9102e3e2 	add	x2, sp, #0xb8
    4001239c:	aa1303e0 	mov	x0, x19
    400123a0:	97ffc350 	bl	400030e0 <fscanf>
    while (fgetc(fp) != '\n');
    400123a4:	aa1303e0 	mov	x0, x19
    400123a8:	97ffc106 	bl	400027c0 <fgetc>
    400123ac:	7100281f 	cmp	w0, #0xa
    400123b0:	54ffffa1 	b.ne	400123a4 <main+0x128>  // b.any
    result = fscanf(fp, "%lf", &dt);
    400123b4:	d00000c2 	adrp	x2, 4002c000 <z_idle_threads>
    400123b8:	912d8042 	add	x2, x2, #0xb60
    400123bc:	b0000081 	adrp	x1, 40023000 <fpi.1>
    400123c0:	911b3c21 	add	x1, x1, #0x6cf
    400123c4:	aa1303e0 	mov	x0, x19
    400123c8:	97ffc346 	bl	400030e0 <fscanf>
    while (fgetc(fp) != '\n');
    400123cc:	aa1303e0 	mov	x0, x19
    400123d0:	97ffc0fc 	bl	400027c0 <fgetc>
    400123d4:	7100281f 	cmp	w0, #0xa
    400123d8:	54ffffa1 	b.ne	400123cc <main+0x150>  // b.any
    result = fscanf(fp, "%d%d%d\n", 
    400123dc:	b0000382 	adrp	x2, 40083000 <ws+0x3a40>
    400123e0:	912a0042 	add	x2, x2, #0xa80
    400123e4:	91002044 	add	x4, x2, #0x8
    400123e8:	91001043 	add	x3, x2, #0x4
    400123ec:	b0000081 	adrp	x1, 40023000 <fpi.1>
    400123f0:	911b4c21 	add	x1, x1, #0x6d3
    400123f4:	aa1303e0 	mov	x0, x19
    400123f8:	97ffc33a 	bl	400030e0 <fscanf>
        &grid_points[0], &grid_points[1], &grid_points[2]);
    fclose(fp);
    400123fc:	aa1303e0 	mov	x0, x19
    40012400:	97ffc00c 	bl	40002430 <fclose>
    grid_points[0] = PROBLEM_SIZE;
    grid_points[1] = PROBLEM_SIZE;
    grid_points[2] = PROBLEM_SIZE;
  }

  printf(" Size: %4dx%4dx%4d\n",
    40012404:	b0000396 	adrp	x22, 40083000 <ws+0x3a40>
    40012408:	912a02d3 	add	x19, x22, #0xa80
    4001240c:	b0000080 	adrp	x0, 40023000 <fpi.1>
    40012410:	911c4400 	add	x0, x0, #0x711
    40012414:	b94a82c1 	ldr	w1, [x22, #2688]
    40012418:	29408e62 	ldp	w2, w3, [x19, #4]
    4001241c:	97ffc70d 	bl	40004050 <printf>
      grid_points[0], grid_points[1], grid_points[2]);
  printf(" Iterations: %4d    dt: %10.6f\n", niter, dt);
    40012420:	b940bbe1 	ldr	w1, [sp, #184]
    40012424:	d00000c0 	adrp	x0, 4002c000 <z_idle_threads>
    40012428:	fd45b000 	ldr	d0, [x0, #2912]
    4001242c:	b0000080 	adrp	x0, 40023000 <fpi.1>
    40012430:	911c9400 	add	x0, x0, #0x725
    40012434:	97ffc707 	bl	40004050 <printf>
  printf("\n");
    40012438:	b0000080 	adrp	x0, 40023000 <fpi.1>
    4001243c:	912e9400 	add	x0, x0, #0xba5
    40012440:	97ffc704 	bl	40004050 <printf>

  if ( (grid_points[0] > IMAX) ||
    40012444:	b94a82c1 	ldr	w1, [x22, #2688]
    40012448:	7100303f 	cmp	w1, #0xc
    4001244c:	540000ec 	b.gt	40012468 <main+0x1ec>
    40012450:	b9400660 	ldr	w0, [x19, #4]
    40012454:	7100301f 	cmp	w0, #0xc
    40012458:	5400008c 	b.gt	40012468 <main+0x1ec>
       (grid_points[1] > JMAX) ||
    4001245c:	b9400a60 	ldr	w0, [x19, #8]
    40012460:	7100301f 	cmp	w0, #0xc
    40012464:	5400046d 	b.le	400124f0 <main+0x274>
       (grid_points[2] > KMAX) ) {
    printf(" %d, %d, %d\n", grid_points[0], grid_points[1], grid_points[2]);
    40012468:	29408e62 	ldp	w2, w3, [x19, #4]
    4001246c:	b0000080 	adrp	x0, 40023000 <fpi.1>
    40012470:	911d1400 	add	x0, x0, #0x745
    40012474:	97ffc6f7 	bl	40004050 <printf>
    printf(" Problem size too big for compiled array sizes\n");
    40012478:	b0000080 	adrp	x0, 40023000 <fpi.1>
    4001247c:	911d4800 	add	x0, x0, #0x752
    40012480:	97ffc6f4 	bl	40004050 <printf>
      }
    }
  }

  return 0;
}
    40012484:	52800000 	mov	w0, #0x0                   	// #0
    40012488:	fd4053ea 	ldr	d10, [sp, #160]
    4001248c:	a9457bfd 	ldp	x29, x30, [sp, #80]
    40012490:	a94653f3 	ldp	x19, x20, [sp, #96]
    40012494:	a9475bf5 	ldp	x21, x22, [sp, #112]
    40012498:	a94863f7 	ldp	x23, x24, [sp, #128]
    4001249c:	6d4927e8 	ldp	d8, d9, [sp, #144]
    400124a0:	910603ff 	add	sp, sp, #0x180
    400124a4:	d65f03c0 	ret
    timeron = False;
    400124a8:	b90a8ebf 	str	wzr, [x21, #2700]
    400124ac:	17ffffad 	b	40012360 <main+0xe4>
    printf(" No input file inputbt.data. Using compiled defaults\n");
    400124b0:	b0000080 	adrp	x0, 40023000 <fpi.1>
    400124b4:	911b6c00 	add	x0, x0, #0x6db
    400124b8:	97ffc6e6 	bl	40004050 <printf>
    niter = NITER_DEFAULT;
    400124bc:	52800780 	mov	w0, #0x3c                  	// #60
    dt    = DT_DEFAULT;
    400124c0:	d0000061 	adrp	x1, 40020000 <__rodata_region_start>
    400124c4:	fd474420 	ldr	d0, [x1, #3720]
    grid_points[0] = PROBLEM_SIZE;
    400124c8:	b21e07e1 	mov	x1, #0xc0000000c           	// #51539607564
    niter = NITER_DEFAULT;
    400124cc:	b900bbe0 	str	w0, [sp, #184]
    dt    = DT_DEFAULT;
    400124d0:	d00000c0 	adrp	x0, 4002c000 <z_idle_threads>
    400124d4:	fd05b000 	str	d0, [x0, #2912]
    grid_points[0] = PROBLEM_SIZE;
    400124d8:	b0000380 	adrp	x0, 40083000 <ws+0x3a40>
    400124dc:	912a0000 	add	x0, x0, #0xa80
    400124e0:	f9000001 	str	x1, [x0]
    grid_points[2] = PROBLEM_SIZE;
    400124e4:	52800181 	mov	w1, #0xc                   	// #12
    400124e8:	b9000801 	str	w1, [x0, #8]
    400124ec:	17ffffc6 	b	40012404 <main+0x188>
  for (i = 1; i <= t_last; i++) {
    400124f0:	52800034 	mov	w20, #0x1                   	// #1
  set_constants();
    400124f4:	94000f09 	bl	40016118 <set_constants>
    timer_clear(i);
    400124f8:	2a1403e0 	mov	w0, w20
  for (i = 1; i <= t_last; i++) {
    400124fc:	11000694 	add	w20, w20, #0x1
    timer_clear(i);
    40012500:	940000be 	bl	400127f8 <timer_clear>
  for (i = 1; i <= t_last; i++) {
    40012504:	7100329f 	cmp	w20, #0xc
    40012508:	54ffff81 	b.ne	400124f8 <main+0x27c>  // b.any
  for (i = 1; i <= t_last; i++) {
    4001250c:	52800034 	mov	w20, #0x1                   	// #1
  initialize();
    40012510:	940006af 	bl	40013fcc <initialize>
  exact_rhs();
    40012514:	9400018f 	bl	40012b50 <exact_rhs>
  adi();
    40012518:	97ffff51 	bl	4001225c <adi>
  initialize();
    4001251c:	940006ac 	bl	40013fcc <initialize>
    timer_clear(i);
    40012520:	2a1403e0 	mov	w0, w20
  for (i = 1; i <= t_last; i++) {
    40012524:	11000694 	add	w20, w20, #0x1
    timer_clear(i);
    40012528:	940000b4 	bl	400127f8 <timer_clear>
  for (i = 1; i <= t_last; i++) {
    4001252c:	7100329f 	cmp	w20, #0xc
    40012530:	54ffff81 	b.ne	40012520 <main+0x2a4>  // b.any
      printf(" Time step %4d\n", step);
    40012534:	b0000097 	adrp	x23, 40023000 <fpi.1>
    40012538:	911e0af7 	add	x23, x23, #0x782
  for (step = 1; step <= niter; step++) {
    4001253c:	52800034 	mov	w20, #0x1                   	// #1
    40012540:	52800298 	mov	w24, #0x14                  	// #20
  timer_start(1);
    40012544:	52800020 	mov	w0, #0x1                   	// #1
    40012548:	940000b0 	bl	40012808 <timer_start>
  for (step = 1; step <= niter; step++) {
    4001254c:	b940bbe0 	ldr	w0, [sp, #184]
    40012550:	6b14001f 	cmp	w0, w20
    40012554:	540010ea 	b.ge	40012770 <main+0x4f4>  // b.tcont
  timer_stop(1);
    40012558:	52800020 	mov	w0, #0x1                   	// #1
    4001255c:	940000b8 	bl	4001283c <timer_stop>
  tmax = timer_read(1);
    40012560:	52800020 	mov	w0, #0x1                   	// #1
    40012564:	940000ca 	bl	4001288c <timer_read>
  verify(niter, &Class, &verified);
    40012568:	b940bbe0 	ldr	w0, [sp, #184]
  tmax = timer_read(1);
    4001256c:	1e604008 	fmov	d8, d0
  verify(niter, &Class, &verified);
    40012570:	9102f3e2 	add	x2, sp, #0xbc
    40012574:	9102dfe1 	add	x1, sp, #0xb7
    40012578:	9400180d 	bl	400185ac <verify>
  if(tmax != 0.0) {
    4001257c:	1e602108 	fcmp	d8, #0.0
  n3 = 1.0*grid_points[0]*grid_points[1]*grid_points[2];
    40012580:	b94a82c2 	ldr	w2, [x22, #2688]
    40012584:	29409263 	ldp	w3, w4, [x19, #4]
  if(tmax != 0.0) {
    40012588:	540010a0 	b.eq	4001279c <main+0x520>  // b.none
  navg = (grid_points[0]+grid_points[1]+grid_points[2])/3.0;
    4001258c:	0b030040 	add	w0, w2, w3
    40012590:	1e611001 	fmov	d1, #3.000000000000000000e+00
    40012594:	0b040000 	add	w0, w0, w4
  n3 = 1.0*grid_points[0]*grid_points[1]*grid_points[2];
    40012598:	1e620062 	scvtf	d2, w3
  navg = (grid_points[0]+grid_points[1]+grid_points[2])/3.0;
    4001259c:	1e620000 	scvtf	d0, w0
    400125a0:	1e611800 	fdiv	d0, d0, d1
  n3 = 1.0*grid_points[0]*grid_points[1]*grid_points[2];
    400125a4:	1e620041 	scvtf	d1, w2
    400125a8:	1e620821 	fmul	d1, d1, d2
    400125ac:	1e620082 	scvtf	d2, w4
    400125b0:	1e620821 	fmul	d1, d1, d2
      (3478.8 * n3 - 17655.7 * (navg*navg) + 28023.7 * navg)
    400125b4:	d0000060 	adrp	x0, 40020000 <__rodata_region_start>
    400125b8:	fd474802 	ldr	d2, [x0, #3728]
    400125bc:	d0000060 	adrp	x0, 40020000 <__rodata_region_start>
    400125c0:	fd474c03 	ldr	d3, [x0, #3736]
    400125c4:	1e620821 	fmul	d1, d1, d2
    400125c8:	1e600802 	fmul	d2, d0, d0
    400125cc:	1e630842 	fmul	d2, d2, d3
    400125d0:	1e623821 	fsub	d1, d1, d2
    400125d4:	d0000060 	adrp	x0, 40020000 <__rodata_region_start>
    400125d8:	fd475002 	ldr	d2, [x0, #3744]
    mflops = 1.0e-6 * (double)niter *
    400125dc:	b940bbe0 	ldr	w0, [sp, #184]
      (3478.8 * n3 - 17655.7 * (navg*navg) + 28023.7 * navg)
    400125e0:	1e620800 	fmul	d0, d0, d2
    400125e4:	1e602821 	fadd	d1, d1, d0
    mflops = 1.0e-6 * (double)niter *
    400125e8:	1e620000 	scvtf	d0, w0
    400125ec:	d0000060 	adrp	x0, 40020000 <__rodata_region_start>
    400125f0:	fd475402 	ldr	d2, [x0, #3752]
    400125f4:	1e620800 	fmul	d0, d0, d2
    400125f8:	1e600821 	fmul	d1, d1, d0
    400125fc:	1e681821 	fdiv	d1, d1, d8
  print_results("BT", Class, grid_points[0], 
    40012600:	b0000080 	adrp	x0, 40023000 <fpi.1>
    40012604:	911eb800 	add	x0, x0, #0x7ae
    40012608:	f90023e0 	str	x0, [sp, #64]
    4001260c:	b0000080 	adrp	x0, 40023000 <fpi.1>
    40012610:	911ef800 	add	x0, x0, #0x7be
    40012614:	f9001fe0 	str	x0, [sp, #56]
    40012618:	b0000080 	adrp	x0, 40023000 <fpi.1>
    4001261c:	911ed400 	add	x0, x0, #0x7b5
    40012620:	f9001be0 	str	x0, [sp, #48]
    40012624:	b0000080 	adrp	x0, 40023000 <fpi.1>
    40012628:	911f4800 	add	x0, x0, #0x7d2
    4001262c:	f90017e0 	str	x0, [sp, #40]
    40012630:	b0000080 	adrp	x0, 40023000 <fpi.1>
    40012634:	911f7800 	add	x0, x0, #0x7de
    40012638:	f90013e0 	str	x0, [sp, #32]
    4001263c:	b0000080 	adrp	x0, 40023000 <fpi.1>
    40012640:	911f8800 	add	x0, x0, #0x7e2
    40012644:	1e604100 	fmov	d0, d8
    40012648:	3942dfe1 	ldrb	w1, [sp, #183]
    4001264c:	b0000086 	adrp	x6, 40023000 <fpi.1>
    40012650:	911e48c6 	add	x6, x6, #0x792
    40012654:	f9000fe0 	str	x0, [sp, #24]
    40012658:	29571fe5 	ldp	w5, w7, [sp, #184]
    4001265c:	b0000080 	adrp	x0, 40023000 <fpi.1>
    40012660:	911fa000 	add	x0, x0, #0x7e8
    40012664:	f9000be0 	str	x0, [sp, #16]
    40012668:	b0000080 	adrp	x0, 40023000 <fpi.1>
    4001266c:	911fb000 	add	x0, x0, #0x7ec
    40012670:	f90007e0 	str	x0, [sp, #8]
    40012674:	b0000080 	adrp	x0, 40023000 <fpi.1>
    40012678:	911fe000 	add	x0, x0, #0x7f8
    4001267c:	f90003e0 	str	x0, [sp]
    40012680:	b0000080 	adrp	x0, 40023000 <fpi.1>
    40012684:	911eac00 	add	x0, x0, #0x7ab
    40012688:	94000816 	bl	400146e0 <print_results>
  if (timeron) {
    4001268c:	b94a8ea0 	ldr	w0, [x21, #2700]
    40012690:	34ffefa0 	cbz	w0, 40012484 <main+0x208>
      trecs[i] = timer_read(i);
    40012694:	910303f7 	add	x23, sp, #0xc0
    40012698:	d2800033 	mov	x19, #0x1                   	// #1
    4001269c:	2a1303e0 	mov	w0, w19
    400126a0:	9400007b 	bl	4001288c <timer_read>
    400126a4:	fc337ae0 	str	d0, [x23, x19, lsl #3]
    for (i = 1; i <= t_last; i++) {
    400126a8:	91000673 	add	x19, x19, #0x1
    400126ac:	f100327f 	cmp	x19, #0xc
    400126b0:	54ffff61 	b.ne	4001269c <main+0x420>  // b.any
    if (tmax == 0.0) tmax = 1.0;
    400126b4:	1e602108 	fcmp	d8, #0.0
    400126b8:	1e6e1000 	fmov	d0, #1.000000000000000000e+00
    printf("  SECTION   Time (secs)\n");
    400126bc:	b0000080 	adrp	x0, 40023000 <fpi.1>
    400126c0:	911ff800 	add	x0, x0, #0x7fe
      printf("  %-8s:%9.3f  (%6.2f%%)\n", 
    400126c4:	b0000095 	adrp	x21, 40023000 <fpi.1>
    400126c8:	91205eb5 	add	x21, x21, #0x817
        printf("    --> %8s:%9.3f  (%6.2f%%)\n", "redist", t, t*100./tmax);
    400126cc:	b0000096 	adrp	x22, 40023000 <fpi.1>
    400126d0:	9121a2d6 	add	x22, x22, #0x868
    if (tmax == 0.0) tmax = 1.0;
    400126d4:	1e601d08 	fcsel	d8, d8, d0, ne  // ne = any
      printf("  %-8s:%9.3f  (%6.2f%%)\n", 
    400126d8:	910483f8 	add	x24, sp, #0x120
    printf("  SECTION   Time (secs)\n");
    400126dc:	d2800033 	mov	x19, #0x1                   	// #1
    400126e0:	97ffc65c 	bl	40004050 <printf>
          t_names[i], trecs[i], trecs[i]*100./tmax);
    400126e4:	d0000060 	adrp	x0, 40020000 <__rodata_region_start>
    400126e8:	fd47580a 	ldr	d10, [x0, #3760]
      printf("  %-8s:%9.3f  (%6.2f%%)\n", 
    400126ec:	fc737ae0 	ldr	d0, [x23, x19, lsl #3]
    400126f0:	aa1503e0 	mov	x0, x21
    400126f4:	f8737b01 	ldr	x1, [x24, x19, lsl #3]
          t_names[i], trecs[i], trecs[i]*100./tmax);
    400126f8:	1e6a0801 	fmul	d1, d0, d10
      printf("  %-8s:%9.3f  (%6.2f%%)\n", 
    400126fc:	1e681821 	fdiv	d1, d1, d8
    40012700:	97ffc654 	bl	40004050 <printf>
      if (i == t_rhs) {
    40012704:	f100167f 	cmp	x19, #0x5
    40012708:	540004e1 	b.ne	400127a4 <main+0x528>  // b.any
        t = trecs[t_rhsx] + trecs[t_rhsy] + trecs[t_rhsz];
    4001270c:	6d4d03e9 	ldp	d9, d0, [sp, #208]
        printf("    --> %8s:%9.3f  (%6.2f%%)\n", "sub-rhs", t, t*100./tmax);
    40012710:	b0000094 	adrp	x20, 40023000 <fpi.1>
    40012714:	9120e294 	add	x20, x20, #0x838
    40012718:	b0000081 	adrp	x1, 40023000 <fpi.1>
    4001271c:	9120c021 	add	x1, x1, #0x830
    40012720:	aa1403e0 	mov	x0, x20
        t = trecs[t_rhsx] + trecs[t_rhsy] + trecs[t_rhsz];
    40012724:	1e602929 	fadd	d9, d9, d0
    40012728:	fd4073e0 	ldr	d0, [sp, #224]
    4001272c:	1e602929 	fadd	d9, d9, d0
        printf("    --> %8s:%9.3f  (%6.2f%%)\n", "sub-rhs", t, t*100./tmax);
    40012730:	1e6a0921 	fmul	d1, d9, d10
    40012734:	1e604120 	fmov	d0, d9
    40012738:	1e681821 	fdiv	d1, d1, d8
    4001273c:	97ffc645 	bl	40004050 <printf>
        t = trecs[t_rhs] - t;
    40012740:	fd4077e0 	ldr	d0, [sp, #232]
        printf("    --> %8s:%9.3f  (%6.2f%%)\n", "rest-rhs", t, t*100./tmax);
    40012744:	b0000081 	adrp	x1, 40023000 <fpi.1>
    40012748:	91215821 	add	x1, x1, #0x856
    4001274c:	aa1403e0 	mov	x0, x20
        t = trecs[t_rhs] - t;
    40012750:	1e693800 	fsub	d0, d0, d9
        printf("    --> %8s:%9.3f  (%6.2f%%)\n", "rest-rhs", t, t*100./tmax);
    40012754:	1e6a0801 	fmul	d1, d0, d10
    40012758:	1e681821 	fdiv	d1, d1, d8
        printf("    --> %8s:%9.3f  (%6.2f%%)\n", "redist", t, t*100./tmax);
    4001275c:	97ffc63d 	bl	40004050 <printf>
    for (i = 1; i <= t_last; i++) {
    40012760:	91000673 	add	x19, x19, #0x1
    40012764:	f100327f 	cmp	x19, #0xc
    40012768:	54fffc21 	b.ne	400126ec <main+0x470>  // b.any
    4001276c:	17ffff46 	b	40012484 <main+0x208>
  for (step = 1; step <= niter; step++) {
    40012770:	1ad80e80 	sdiv	w0, w20, w24
    40012774:	1b18d000 	msub	w0, w0, w24, w20
    if ((step % 20) == 0 || step == 1) {
    40012778:	34000060 	cbz	w0, 40012784 <main+0x508>
    4001277c:	7100069f 	cmp	w20, #0x1
    40012780:	54000081 	b.ne	40012790 <main+0x514>  // b.any
      printf(" Time step %4d\n", step);
    40012784:	2a1403e1 	mov	w1, w20
    40012788:	aa1703e0 	mov	x0, x23
    4001278c:	97ffc631 	bl	40004050 <printf>
  for (step = 1; step <= niter; step++) {
    40012790:	11000694 	add	w20, w20, #0x1
    adi();
    40012794:	97fffeb2 	bl	4001225c <adi>
  for (step = 1; step <= niter; step++) {
    40012798:	17ffff6d 	b	4001254c <main+0x2d0>
    mflops = 0.0;
    4001279c:	2f00e401 	movi	d1, #0x0
    400127a0:	17ffff98 	b	40012600 <main+0x384>
      } else if (i==t_zsolve) {
    400127a4:	7100227f 	cmp	w19, #0x8
    400127a8:	54000181 	b.ne	400127d8 <main+0x55c>  // b.any
        t = trecs[t_zsolve] - trecs[t_rdis1] - trecs[t_rdis2];
    400127ac:	6d5007e0 	ldp	d0, d1, [sp, #256]
        printf("    --> %8s:%9.3f  (%6.2f%%)\n", "sub-zsol", t, t*100./tmax);
    400127b0:	b0000081 	adrp	x1, 40023000 <fpi.1>
    400127b4:	91217c21 	add	x1, x1, #0x85f
        t = trecs[t_zsolve] - trecs[t_rdis1] - trecs[t_rdis2];
    400127b8:	1e613800 	fsub	d0, d0, d1
    400127bc:	fd408be1 	ldr	d1, [sp, #272]
    400127c0:	1e613800 	fsub	d0, d0, d1
        printf("    --> %8s:%9.3f  (%6.2f%%)\n", "sub-zsol", t, t*100./tmax);
    400127c4:	1e6a0801 	fmul	d1, d0, d10
    400127c8:	1e681821 	fdiv	d1, d1, d8
        printf("    --> %8s:%9.3f  (%6.2f%%)\n", "redist", t, t*100./tmax);
    400127cc:	b0000080 	adrp	x0, 40023000 <fpi.1>
    400127d0:	9120e000 	add	x0, x0, #0x838
    400127d4:	17ffffe2 	b	4001275c <main+0x4e0>
      } else if (i==t_rdis2) {
    400127d8:	71002a7f 	cmp	w19, #0xa
    400127dc:	54fffc21 	b.ne	40012760 <main+0x4e4>  // b.any
        t = trecs[t_rdis1] + trecs[t_rdis2];
    400127e0:	6d5087e0 	ldp	d0, d1, [sp, #264]
        printf("    --> %8s:%9.3f  (%6.2f%%)\n", "redist", t, t*100./tmax);
    400127e4:	aa1603e1 	mov	x1, x22
        t = trecs[t_rdis1] + trecs[t_rdis2];
    400127e8:	1e612800 	fadd	d0, d0, d1
        printf("    --> %8s:%9.3f  (%6.2f%%)\n", "redist", t, t*100./tmax);
    400127ec:	1e6a0801 	fmul	d1, d0, d10
    400127f0:	1e681821 	fdiv	d1, d1, d8
    400127f4:	17fffff6 	b	400127cc <main+0x550>

00000000400127f8 <timer_clear>:
/*****************************************************************/
/******            T  I  M  E  R  _  C  L  E  A  R          ******/
/*****************************************************************/
void timer_clear( int n )
{
    elapsed[n] = 0.0;
    400127f8:	b0000381 	adrp	x1, 40083000 <ws+0x3a40>
    400127fc:	91166021 	add	x1, x1, #0x598
    40012800:	f820d83f 	str	xzr, [x1, w0, sxtw #3]
}
    40012804:	d65f03c0 	ret

0000000040012808 <timer_start>:

/*****************************************************************/
/******            T  I  M  E  R  _  S  T  A  R  T          ******/
/*****************************************************************/
void timer_start( int n )
{
    40012808:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    4001280c:	910003fd 	mov	x29, sp
    40012810:	f9000bf3 	str	x19, [sp, #16]
    40012814:	2a0003f3 	mov	w19, w0
    wtime( &t );
    40012818:	9100a3e0 	add	x0, sp, #0x28
    4001281c:	9400195c 	bl	40018d8c <wtime_>
    start[n] = elapsed_time();
    40012820:	b0000381 	adrp	x1, 40083000 <ws+0x3a40>
    40012824:	911e6021 	add	x1, x1, #0x798
    40012828:	fd4017e0 	ldr	d0, [sp, #40]
    4001282c:	fc33d820 	str	d0, [x1, w19, sxtw #3]
}
    40012830:	f9400bf3 	ldr	x19, [sp, #16]
    40012834:	a8c37bfd 	ldp	x29, x30, [sp], #48
    40012838:	d65f03c0 	ret

000000004001283c <timer_stop>:

/*****************************************************************/
/******            T  I  M  E  R  _  S  T  O  P             ******/
/*****************************************************************/
void timer_stop( int n )
{
    4001283c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    40012840:	910003fd 	mov	x29, sp
    40012844:	f9000bf3 	str	x19, [sp, #16]
    40012848:	2a0003f3 	mov	w19, w0
    wtime( &t );
    4001284c:	9100a3e0 	add	x0, sp, #0x28
    40012850:	9400194f 	bl	40018d8c <wtime_>
    double t, now;

    now = elapsed_time();
    t = now - start[n];
    elapsed[n] += t;
    40012854:	93407e60 	sxtw	x0, w19
    t = now - start[n];
    40012858:	b0000382 	adrp	x2, 40083000 <ws+0x3a40>
    4001285c:	911e6042 	add	x2, x2, #0x798
    40012860:	fd4017e0 	ldr	d0, [sp, #40]
    elapsed[n] += t;
    40012864:	b0000381 	adrp	x1, 40083000 <ws+0x3a40>
    40012868:	91166021 	add	x1, x1, #0x598

}
    4001286c:	f9400bf3 	ldr	x19, [sp, #16]
    t = now - start[n];
    40012870:	fc607841 	ldr	d1, [x2, x0, lsl #3]
    40012874:	1e613800 	fsub	d0, d0, d1
    elapsed[n] += t;
    40012878:	fc607821 	ldr	d1, [x1, x0, lsl #3]
    4001287c:	1e612800 	fadd	d0, d0, d1
    40012880:	fc207820 	str	d0, [x1, x0, lsl #3]
}
    40012884:	a8c37bfd 	ldp	x29, x30, [sp], #48
    40012888:	d65f03c0 	ret

000000004001288c <timer_read>:
/******            T  I  M  E  R  _  R  E  A  D             ******/
/*****************************************************************/
double timer_read( int n )
{
    return( elapsed[n] );
}
    4001288c:	b0000381 	adrp	x1, 40083000 <ws+0x3a40>
    40012890:	91166021 	add	x1, x1, #0x598
    40012894:	fc60d820 	ldr	d0, [x1, w0, sxtw #3]
    40012898:	d65f03c0 	ret

000000004001289c <error_norm>:
//---------------------------------------------------------------------
// this function computes the norm of the difference between the
// computed solution and the exact solution
//---------------------------------------------------------------------
void error_norm(double rms[5])
{
    4001289c:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
    400128a0:	910003fd 	mov	x29, sp
    400128a4:	a90153f3 	stp	x19, x20, [sp, #16]

  for (m = 0; m < 5; m++) {
    rms[m] = 0.0;
  }

  for (k = 0; k <= grid_points[2]-1; k++) {
    400128a8:	b0000394 	adrp	x20, 40083000 <ws+0x3a40>
    400128ac:	912a0294 	add	x20, x20, #0xa80
{
    400128b0:	aa0003f3 	mov	x19, x0
    400128b4:	a9025bf5 	stp	x21, x22, [sp, #32]
  for (k = 0; k <= grid_points[2]-1; k++) {
    400128b8:	52800016 	mov	w22, #0x0                   	// #0
{
    400128bc:	a90363f7 	stp	x23, x24, [sp, #48]
    400128c0:	a9046bf9 	stp	x25, x26, [sp, #64]
    400128c4:	b0000299 	adrp	x25, 40063000 <square+0x37a8>
    400128c8:	91206339 	add	x25, x25, #0x818
    400128cc:	a90573fb 	stp	x27, x28, [sp, #80]
    zeta = (double)(k) * dnzm1;
    400128d0:	d00000dc 	adrp	x28, 4002c000 <z_idle_threads>
{
    400128d4:	6d0627e8 	stp	d8, d9, [sp, #96]
    rms[m] = 0.0;
    400128d8:	a9007c1f 	stp	xzr, xzr, [x0]
    400128dc:	a9017c1f 	stp	xzr, xzr, [x0, #16]
    400128e0:	f900101f 	str	xzr, [x0, #32]
  for (k = 0; k <= grid_points[2]-1; k++) {
    400128e4:	b9400a80 	ldr	w0, [x20, #8]
    400128e8:	51000400 	sub	w0, w0, #0x1
    400128ec:	6b16001f 	cmp	w0, w22
    400128f0:	540003aa 	b.ge	40012964 <error_norm+0xc8>  // b.tcont
    400128f4:	d2800015 	mov	x21, #0x0                   	// #0
    }
  }

  for (m = 0; m < 5; m++) {
    for (d = 0; d < 3; d++) {
      rms[m] = rms[m] / (double)(grid_points[d]-2);
    400128f8:	b9400280 	ldr	w0, [x20]
    400128fc:	fc757a60 	ldr	d0, [x19, x21, lsl #3]
    40012900:	51000800 	sub	w0, w0, #0x2
    40012904:	1e620001 	scvtf	d1, w0
    40012908:	b9400680 	ldr	w0, [x20, #4]
    4001290c:	51000800 	sub	w0, w0, #0x2
    40012910:	1e611800 	fdiv	d0, d0, d1
    40012914:	1e620001 	scvtf	d1, w0
    40012918:	b9400a80 	ldr	w0, [x20, #8]
    4001291c:	51000800 	sub	w0, w0, #0x2
    40012920:	1e611800 	fdiv	d0, d0, d1
    40012924:	1e620001 	scvtf	d1, w0
    40012928:	1e611800 	fdiv	d0, d0, d1
    for (d = 0; d < 3; d++) {
    4001292c:	fc357a60 	str	d0, [x19, x21, lsl #3]
    }
    rms[m] = sqrt(rms[m]);
    40012930:	97ffbe0c 	bl	40002160 <sqrt>
    40012934:	fc357a60 	str	d0, [x19, x21, lsl #3]
  for (m = 0; m < 5; m++) {
    40012938:	910006b5 	add	x21, x21, #0x1
    4001293c:	f10016bf 	cmp	x21, #0x5
    40012940:	54fffdc1 	b.ne	400128f8 <error_norm+0x5c>  // b.any
  }
}
    40012944:	a94153f3 	ldp	x19, x20, [sp, #16]
    40012948:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4001294c:	a94363f7 	ldp	x23, x24, [sp, #48]
    40012950:	a9446bf9 	ldp	x25, x26, [sp, #64]
    40012954:	a94573fb 	ldp	x27, x28, [sp, #80]
    40012958:	6d4627e8 	ldp	d8, d9, [sp, #96]
    4001295c:	a8ca7bfd 	ldp	x29, x30, [sp], #160
    40012960:	d65f03c0 	ret
    zeta = (double)(k) * dnzm1;
    40012964:	1e6202c8 	scvtf	d8, w22
    40012968:	fd45ab82 	ldr	d2, [x28, #2896]
    4001296c:	52834d1a 	mov	w26, #0x1a68                	// #6760
        exact_solution(xi, eta, zeta, u_exact);
    40012970:	9101e3fb 	add	x27, sp, #0x78
    for (j = 0; j <= grid_points[1]-1; j++) {
    40012974:	52800017 	mov	w23, #0x0                   	// #0
      eta = (double)(j) * dnym1;
    40012978:	d00000c2 	adrp	x2, 4002c000 <z_idle_threads>
    4001297c:	9b3a7eda 	smull	x26, w22, w26
    zeta = (double)(k) * dnzm1;
    40012980:	1e620908 	fmul	d8, d8, d2
    for (j = 0; j <= grid_points[1]-1; j++) {
    40012984:	b9400681 	ldr	w1, [x20, #4]
    40012988:	51000421 	sub	w1, w1, #0x1
    4001298c:	6b17003f 	cmp	w1, w23
    40012990:	5400006a 	b.ge	4001299c <error_norm+0x100>  // b.tcont
  for (k = 0; k <= grid_points[2]-1; k++) {
    40012994:	110006d6 	add	w22, w22, #0x1
    40012998:	17ffffd3 	b	400128e4 <error_norm+0x48>
      eta = (double)(j) * dnym1;
    4001299c:	1e6202e9 	scvtf	d9, w23
    400129a0:	fd45a441 	ldr	d1, [x2, #2888]
    400129a4:	52804115 	mov	w21, #0x208                 	// #520
      for (i = 0; i <= grid_points[0]-1; i++) {
    400129a8:	52800018 	mov	w24, #0x0                   	// #0
        xi = (double)(i) * dnxm1;
    400129ac:	d00000c3 	adrp	x3, 4002c000 <z_idle_threads>
    400129b0:	9b356af5 	smaddl	x21, w23, w21, x26
      eta = (double)(j) * dnym1;
    400129b4:	1e610929 	fmul	d9, d9, d1
      for (i = 0; i <= grid_points[0]-1; i++) {
    400129b8:	8b1902b5 	add	x21, x21, x25
    400129bc:	b9400281 	ldr	w1, [x20]
    400129c0:	51000421 	sub	w1, w1, #0x1
    400129c4:	6b18003f 	cmp	w1, w24
    400129c8:	5400006a 	b.ge	400129d4 <error_norm+0x138>  // b.tcont
    for (j = 0; j <= grid_points[1]-1; j++) {
    400129cc:	110006f7 	add	w23, w23, #0x1
    400129d0:	17ffffed 	b	40012984 <error_norm+0xe8>
        xi = (double)(i) * dnxm1;
    400129d4:	1e620300 	scvtf	d0, w24
    400129d8:	fd45a063 	ldr	d3, [x3, #2880]
        exact_solution(xi, eta, zeta, u_exact);
    400129dc:	1e604102 	fmov	d2, d8
    400129e0:	1e604121 	fmov	d1, d9
    400129e4:	aa1b03e0 	mov	x0, x27
    400129e8:	1e630800 	fmul	d0, d0, d3
    400129ec:	9400054b 	bl	40013f18 <exact_solution>
    400129f0:	d2800001 	mov	x1, #0x0                   	// #0
    400129f4:	d00000c2 	adrp	x2, 4002c000 <z_idle_threads>
    400129f8:	d00000c3 	adrp	x3, 4002c000 <z_idle_threads>
          add = u[k][j][i][m]-u_exact[m];
    400129fc:	fc616aa0 	ldr	d0, [x21, x1]
    40012a00:	fc616b61 	ldr	d1, [x27, x1]
    40012a04:	1e613800 	fsub	d0, d0, d1
          rms[m] = rms[m] + add*add;
    40012a08:	fc616a61 	ldr	d1, [x19, x1]
    40012a0c:	1e600800 	fmul	d0, d0, d0
    40012a10:	1e602820 	fadd	d0, d1, d0
    40012a14:	fc216a60 	str	d0, [x19, x1]
        for (m = 0; m < 5; m++) {
    40012a18:	91002021 	add	x1, x1, #0x8
    40012a1c:	f100a03f 	cmp	x1, #0x28
    40012a20:	54fffee1 	b.ne	400129fc <error_norm+0x160>  // b.any
      for (i = 0; i <= grid_points[0]-1; i++) {
    40012a24:	11000718 	add	w24, w24, #0x1
    40012a28:	9100a2b5 	add	x21, x21, #0x28
    40012a2c:	17ffffe4 	b	400129bc <error_norm+0x120>

0000000040012a30 <rhs_norm>:


void rhs_norm(double rms[5])
{
    40012a30:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    40012a34:	b00001c8 	adrp	x8, 4004b000 <rho_i+0x33e8>
    40012a38:	912de108 	add	x8, x8, #0xb78
    40012a3c:	910003fd 	mov	x29, sp
    40012a40:	a90153f3 	stp	x19, x20, [sp, #16]
    40012a44:	aa0003f3 	mov	x19, x0

  for (m = 0; m < 5; m++) {
    rms[m] = 0.0;
  } 

  for (k = 1; k <= grid_points[2]-2; k++) {
    40012a48:	52800024 	mov	w4, #0x1                   	// #1
{
    40012a4c:	f90013f5 	str	x21, [sp, #32]
    40012a50:	52834d0a 	mov	w10, #0x1a68                	// #6760
    rms[m] = 0.0;
    40012a54:	a9007c1f 	stp	xzr, xzr, [x0]
    40012a58:	5280410b 	mov	w11, #0x208                 	// #520
    40012a5c:	a9017c1f 	stp	xzr, xzr, [x0, #16]
    40012a60:	f900101f 	str	xzr, [x0, #32]
  for (k = 1; k <= grid_points[2]-2; k++) {
    40012a64:	b0000380 	adrp	x0, 40083000 <ws+0x3a40>
    40012a68:	912a0015 	add	x21, x0, #0xa80
    for (j = 1; j <= grid_points[1]-2; j++) {
      for (i = 1; i <= grid_points[0]-2; i++) {
    40012a6c:	b94a8005 	ldr	w5, [x0, #2688]
  for (k = 1; k <= grid_points[2]-2; k++) {
    40012a70:	29409ea6 	ldp	w6, w7, [x21, #4]
      for (i = 1; i <= grid_points[0]-2; i++) {
    40012a74:	510008a5 	sub	w5, w5, #0x2
  for (k = 1; k <= grid_points[2]-2; k++) {
    40012a78:	510008e7 	sub	w7, w7, #0x2
    for (j = 1; j <= grid_points[1]-2; j++) {
    40012a7c:	510008c6 	sub	w6, w6, #0x2
  for (k = 1; k <= grid_points[2]-2; k++) {
    40012a80:	6b0400ff 	cmp	w7, w4
    40012a84:	5400036b 	b.lt	40012af0 <rhs_norm+0xc0>  // b.tstop
    40012a88:	9b2a7c81 	smull	x1, w4, w10
    for (j = 1; j <= grid_points[1]-2; j++) {
    40012a8c:	52800023 	mov	w3, #0x1                   	// #1
    40012a90:	9100a021 	add	x1, x1, #0x28
    40012a94:	1400000f 	b	40012ad0 <rhs_norm+0xa0>
    40012a98:	d2800000 	mov	x0, #0x0                   	// #0
        for (m = 0; m < 5; m++) {
          add = rhs[k][j][i][m];
    40012a9c:	fc606840 	ldr	d0, [x2, x0]
          rms[m] = rms[m] + add*add;
    40012aa0:	fc606a61 	ldr	d1, [x19, x0]
    40012aa4:	1e600800 	fmul	d0, d0, d0
    40012aa8:	1e602820 	fadd	d0, d1, d0
    40012aac:	fc206a60 	str	d0, [x19, x0]
        for (m = 0; m < 5; m++) {
    40012ab0:	91002000 	add	x0, x0, #0x8
    40012ab4:	f100a01f 	cmp	x0, #0x28
    40012ab8:	54ffff21 	b.ne	40012a9c <rhs_norm+0x6c>  // b.any
      for (i = 1; i <= grid_points[0]-2; i++) {
    40012abc:	11000529 	add	w9, w9, #0x1
    40012ac0:	9100a042 	add	x2, x2, #0x28
    40012ac4:	6b0900bf 	cmp	w5, w9
    40012ac8:	54fffe8a 	b.ge	40012a98 <rhs_norm+0x68>  // b.tcont
    for (j = 1; j <= grid_points[1]-2; j++) {
    40012acc:	11000463 	add	w3, w3, #0x1
    40012ad0:	6b0300df 	cmp	w6, w3
    40012ad4:	540000ab 	b.lt	40012ae8 <rhs_norm+0xb8>  // b.tstop
    40012ad8:	9b2b0462 	smaddl	x2, w3, w11, x1
      for (i = 1; i <= grid_points[0]-2; i++) {
    40012adc:	52800029 	mov	w9, #0x1                   	// #1
    40012ae0:	8b080042 	add	x2, x2, x8
    40012ae4:	17fffff8 	b	40012ac4 <rhs_norm+0x94>
  for (k = 1; k <= grid_points[2]-2; k++) {
    40012ae8:	11000484 	add	w4, w4, #0x1
    40012aec:	17ffffe5 	b	40012a80 <rhs_norm+0x50>
    40012af0:	d2800014 	mov	x20, #0x0                   	// #0
    } 
  } 

  for (m = 0; m < 5; m++) {
    for (d = 0; d < 3; d++) {
      rms[m] = rms[m] / (double)(grid_points[d]-2);
    40012af4:	b94002a0 	ldr	w0, [x21]
    40012af8:	fc747a60 	ldr	d0, [x19, x20, lsl #3]
    40012afc:	51000800 	sub	w0, w0, #0x2
    40012b00:	1e620001 	scvtf	d1, w0
    40012b04:	b94006a0 	ldr	w0, [x21, #4]
    40012b08:	51000800 	sub	w0, w0, #0x2
    40012b0c:	1e611800 	fdiv	d0, d0, d1
    40012b10:	1e620001 	scvtf	d1, w0
    40012b14:	b9400aa0 	ldr	w0, [x21, #8]
    40012b18:	51000800 	sub	w0, w0, #0x2
    40012b1c:	1e611800 	fdiv	d0, d0, d1
    40012b20:	1e620001 	scvtf	d1, w0
    40012b24:	1e611800 	fdiv	d0, d0, d1
    for (d = 0; d < 3; d++) {
    40012b28:	fc347a60 	str	d0, [x19, x20, lsl #3]
    } 
    rms[m] = sqrt(rms[m]);
    40012b2c:	97ffbd8d 	bl	40002160 <sqrt>
    40012b30:	fc347a60 	str	d0, [x19, x20, lsl #3]
  for (m = 0; m < 5; m++) {
    40012b34:	91000694 	add	x20, x20, #0x1
    40012b38:	f100169f 	cmp	x20, #0x5
    40012b3c:	54fffdc1 	b.ne	40012af4 <rhs_norm+0xc4>  // b.any
  } 
}
    40012b40:	a94153f3 	ldp	x19, x20, [sp, #16]
    40012b44:	f94013f5 	ldr	x21, [sp, #32]
    40012b48:	a8c37bfd 	ldp	x29, x30, [sp], #48
    40012b4c:	d65f03c0 	ret

0000000040012b50 <exact_rhs>:

//---------------------------------------------------------------------
// compute the right hand side based on exact solution
//---------------------------------------------------------------------
void exact_rhs()
{
    40012b50:	a9b47bfd 	stp	x29, x30, [sp, #-192]!
    40012b54:	f00000c6 	adrp	x6, 4002d000 <fjac+0x358>
    40012b58:	911b40c6 	add	x6, x6, #0x6d0
    40012b5c:	910003fd 	mov	x29, sp
    40012b60:	a90153f3 	stp	x19, x20, [sp, #16]
  int m, i, j, k, ip1, im1, jp1, jm1, km1, kp1;

  //---------------------------------------------------------------------
  // initialize                                  
  //---------------------------------------------------------------------
  for (k = 0; k <= grid_points[2]-1; k++) {
    40012b64:	b0000380 	adrp	x0, 40083000 <ws+0x3a40>
    40012b68:	912a0014 	add	x20, x0, #0xa80
    for (j = 0; j <= grid_points[1]-1; j++) {
      for (i = 0; i <= grid_points[0]-1; i++) {
    40012b6c:	b94a8003 	ldr	w3, [x0, #2688]
  for (k = 0; k <= grid_points[2]-1; k++) {
    40012b70:	52800002 	mov	w2, #0x0                   	// #0
    40012b74:	52834d09 	mov	w9, #0x1a68                	// #6760
    40012b78:	5280410a 	mov	w10, #0x208                 	// #520
    40012b7c:	29409684 	ldp	w4, w5, [x20, #4]
      for (i = 0; i <= grid_points[0]-1; i++) {
    40012b80:	51000463 	sub	w3, w3, #0x1
{
    40012b84:	a9025bf5 	stp	x21, x22, [sp, #32]
  for (k = 0; k <= grid_points[2]-1; k++) {
    40012b88:	510004a5 	sub	w5, w5, #0x1
    for (j = 0; j <= grid_points[1]-1; j++) {
    40012b8c:	51000484 	sub	w4, w4, #0x1
{
    40012b90:	a90363f7 	stp	x23, x24, [sp, #48]
    40012b94:	a9046bf9 	stp	x25, x26, [sp, #64]
    40012b98:	a90573fb 	stp	x27, x28, [sp, #80]
    40012b9c:	6d0627e8 	stp	d8, d9, [sp, #96]
  for (k = 0; k <= grid_points[2]-1; k++) {
    40012ba0:	6b0200bf 	cmp	w5, w2
    40012ba4:	540036cb 	b.lt	4001327c <exact_rhs+0x72c>  // b.tstop
    40012ba8:	9b297c48 	smull	x8, w2, w9
    for (j = 0; j <= grid_points[1]-1; j++) {
    40012bac:	52800001 	mov	w1, #0x0                   	// #0
    40012bb0:	14000002 	b	40012bb8 <exact_rhs+0x68>
    40012bb4:	11000421 	add	w1, w1, #0x1
    40012bb8:	6b01009f 	cmp	w4, w1
    40012bbc:	5400018b 	b.lt	40012bec <exact_rhs+0x9c>  // b.tstop
    40012bc0:	9b2a2020 	smaddl	x0, w1, w10, x8
      for (i = 0; i <= grid_points[0]-1; i++) {
    40012bc4:	52800007 	mov	w7, #0x0                   	// #0
    40012bc8:	8b060000 	add	x0, x0, x6
    40012bcc:	6b07007f 	cmp	w3, w7
    40012bd0:	54ffff2b 	b.lt	40012bb4 <exact_rhs+0x64>  // b.tstop
    40012bd4:	110004e7 	add	w7, w7, #0x1
        for (m = 0; m < 5; m++) {
          forcing[k][j][i][m] = 0.0;
    40012bd8:	a9007c1f 	stp	xzr, xzr, [x0]
    40012bdc:	a9017c1f 	stp	xzr, xzr, [x0, #16]
    40012be0:	9100a000 	add	x0, x0, #0x28
    40012be4:	f81f801f 	stur	xzr, [x0, #-8]
      for (i = 0; i <= grid_points[0]-1; i++) {
    40012be8:	17fffff9 	b	40012bcc <exact_rhs+0x7c>
  for (k = 0; k <= grid_points[2]-1; k++) {
    40012bec:	11000442 	add	w2, w2, #0x1
    40012bf0:	17ffffec 	b	40012ba0 <exact_rhs+0x50>

  //---------------------------------------------------------------------
  // xi-direction flux differences                      
  //---------------------------------------------------------------------
  for (k = 1; k <= grid_points[2]-2; k++) {
    zeta = (double)(k) * dnzm1;
    40012bf4:	1e6202e8 	scvtf	d8, w23
    40012bf8:	52834d19 	mov	w25, #0x1a68                	// #6760
    40012bfc:	fd45a882 	ldr	d2, [x4, #2896]
    40012c00:	f00000da 	adrp	x26, 4002d000 <fjac+0x358>
    40012c04:	911b435a 	add	x26, x26, #0x6d0
    40012c08:	9b397ef9 	smull	x25, w23, w25
    for (j = 1; j <= grid_points[1]-2; j++) {
    40012c0c:	d280411b 	mov	x27, #0x208                 	// #520
    40012c10:	52800038 	mov	w24, #0x1                   	// #1
    40012c14:	91082336 	add	x22, x25, #0x208
    zeta = (double)(k) * dnzm1;
    40012c18:	1e620908 	fmul	d8, d8, d2
    for (j = 1; j <= grid_points[1]-2; j++) {
    40012c1c:	8b1a02d6 	add	x22, x22, x26

        for (m = 1; m < 5; m++) {
          buf[i][m] = dtpp * dtemp[m];
        }

        cuf[i]    = buf[i][1] * buf[i][1];
    40012c20:	d00000dc 	adrp	x28, 4002c000 <z_idle_threads>
    for (j = 1; j <= grid_points[1]-2; j++) {
    40012c24:	b9400680 	ldr	w0, [x20, #4]
    40012c28:	51000800 	sub	w0, w0, #0x2
    40012c2c:	6b18001f 	cmp	w0, w24
    40012c30:	540004aa 	b.ge	40012cc4 <exact_rhs+0x174>  // b.tcont
  for (k = 1; k <= grid_points[2]-2; k++) {
    40012c34:	110006f7 	add	w23, w23, #0x1
    40012c38:	b9400a80 	ldr	w0, [x20, #8]
    40012c3c:	51000800 	sub	w0, w0, #0x2
    40012c40:	6b17001f 	cmp	w0, w23
    40012c44:	54fffd8a 	b.ge	40012bf4 <exact_rhs+0xa4>  // b.tcont
    40012c48:	b0000335 	adrp	x21, 40077000 <u+0x137e8>
    40012c4c:	9113e2b5 	add	x21, x21, #0x4f8
  }

  //---------------------------------------------------------------------
  // eta-direction flux differences             
  //---------------------------------------------------------------------
  for (k = 1; k <= grid_points[2]-2; k++) {
    40012c50:	52800038 	mov	w24, #0x1                   	// #1
    zeta = (double)(k) * dnzm1;
    40012c54:	d00000c5 	adrp	x5, 4002c000 <z_idle_threads>
  for (k = 1; k <= grid_points[2]-2; k++) {
    40012c58:	b9400a80 	ldr	w0, [x20, #8]
    40012c5c:	51000800 	sub	w0, w0, #0x2
    40012c60:	6b18001f 	cmp	w0, w24
    40012c64:	5400316a 	b.ge	40013290 <exact_rhs+0x740>  // b.tcont
    40012c68:	b0000335 	adrp	x21, 40077000 <u+0x137e8>
    40012c6c:	9113e2b5 	add	x21, x21, #0x4f8
  }

  //---------------------------------------------------------------------
  // zeta-direction flux differences                      
  //---------------------------------------------------------------------
  for (j = 1; j <= grid_points[1]-2; j++) {
    40012c70:	52800038 	mov	w24, #0x1                   	// #1
    eta = (double)(j) * dnym1;
    40012c74:	d00000c4 	adrp	x4, 4002c000 <z_idle_threads>
  for (j = 1; j <= grid_points[1]-2; j++) {
    40012c78:	b9400685 	ldr	w5, [x20, #4]
    40012c7c:	510008a5 	sub	w5, w5, #0x2
    40012c80:	6b1800bf 	cmp	w5, w24
    40012c84:	540060ca 	b.ge	4001389c <exact_rhs+0xd4c>  // b.tcont
  //---------------------------------------------------------------------
  // now change the sign of the forcing function, 
  //---------------------------------------------------------------------
  for (k = 1; k <= grid_points[2]-2; k++) {
    for (j = 1; j <= grid_points[1]-2; j++) {
      for (i = 1; i <= grid_points[0]-2; i++) {
    40012c88:	b9400284 	ldr	w4, [x20]
    40012c8c:	f00000c7 	adrp	x7, 4002d000 <fjac+0x358>
    40012c90:	911b40e7 	add	x7, x7, #0x6d0
  for (k = 1; k <= grid_points[2]-2; k++) {
    40012c94:	b9400a86 	ldr	w6, [x20, #8]
      for (i = 1; i <= grid_points[0]-2; i++) {
    40012c98:	51000884 	sub	w4, w4, #0x2
  for (k = 1; k <= grid_points[2]-2; k++) {
    40012c9c:	52800023 	mov	w3, #0x1                   	// #1
    40012ca0:	510008c6 	sub	w6, w6, #0x2
    40012ca4:	52834d0b 	mov	w11, #0x1a68                	// #6760
    40012ca8:	5280410c 	mov	w12, #0x208                 	// #520
    40012cac:	6b0300df 	cmp	w6, w3
    40012cb0:	5400924b 	b.lt	40013ef8 <exact_rhs+0x13a8>  // b.tstop
    40012cb4:	9b2b7c60 	smull	x0, w3, w11
    for (j = 1; j <= grid_points[1]-2; j++) {
    40012cb8:	52800022 	mov	w2, #0x1                   	// #1
    40012cbc:	9100a000 	add	x0, x0, #0x28
    40012cc0:	14000486 	b	40013ed8 <exact_rhs+0x1388>
      eta = (double)(j) * dnym1;
    40012cc4:	1e620309 	scvtf	d9, w24
    40012cc8:	d00000c0 	adrp	x0, 4002c000 <z_idle_threads>
    40012ccc:	fd45a401 	ldr	d1, [x0, #2888]
    40012cd0:	d00000d3 	adrp	x19, 4002c000 <z_idle_threads>
    40012cd4:	91180273 	add	x19, x19, #0x600
      for (i = 0; i <= grid_points[0]-1; i++) {
    40012cd8:	aa1503e1 	mov	x1, x21
    40012cdc:	aa1303e3 	mov	x3, x19
        exact_solution(xi, eta, zeta, dtemp);
    40012ce0:	910263e0 	add	x0, sp, #0x98
      eta = (double)(j) * dnym1;
    40012ce4:	1e610929 	fmul	d9, d9, d1
      for (i = 0; i <= grid_points[0]-1; i++) {
    40012ce8:	d2800006 	mov	x6, #0x0                   	// #0
    40012cec:	b9400282 	ldr	w2, [x20]
    40012cf0:	51000448 	sub	w8, w2, #0x1
    40012cf4:	6b06011f 	cmp	w8, w6
    40012cf8:	540010aa 	b.ge	40012f0c <exact_rhs+0x3bc>  // b.tcont
          tx2*( ue[ip1][1]-ue[im1][1] )+
    40012cfc:	b0000280 	adrp	x0, 40063000 <square+0x37a8>
    40012d00:	fd43ec02 	ldr	d2, [x0, #2008]
          dx1tx1*(ue[ip1][0]-2.0*ue[i][0]+ue[im1][0]);
    40012d04:	d00000c0 	adrp	x0, 4002c000 <z_idle_threads>
    40012d08:	fd45d407 	ldr	d7, [x0, #2984]
            (ue[ip1][1]*buf[ip1][1]+c2*(ue[ip1][4]-q[ip1]))-
    40012d0c:	d00000c0 	adrp	x0, 4002c000 <z_idle_threads>
    40012d10:	fd441404 	ldr	d4, [x0, #2088]
          xxcon1*(buf[ip1][1]-2.0*buf[i][1]+buf[im1][1])+
    40012d14:	b0000380 	adrp	x0, 40083000 <ws+0x3a40>
    40012d18:	fd429010 	ldr	d16, [x0, #1312]
          dx2tx1*( ue[ip1][1]-2.0* ue[i][1]+ue[im1][1]);
    40012d1c:	d00000c0 	adrp	x0, 4002c000 <z_idle_threads>
    40012d20:	fd45dc11 	ldr	d17, [x0, #3000]
          xxcon2*(buf[ip1][2]-2.0*buf[i][2]+buf[im1][2])+
    40012d24:	b0000380 	adrp	x0, 40083000 <ws+0x3a40>
    40012d28:	fd429405 	ldr	d5, [x0, #1320]
          dx3tx1*( ue[ip1][2]-2.0*ue[i][2] +ue[im1][2]);
    40012d2c:	d00000c0 	adrp	x0, 4002c000 <z_idle_threads>
    40012d30:	fd45e412 	ldr	d18, [x0, #3016]
          dx4tx1*( ue[ip1][3]-2.0* ue[i][3]+ ue[im1][3]);
    40012d34:	d00000c0 	adrp	x0, 4002c000 <z_idle_threads>
    40012d38:	fd45ec13 	ldr	d19, [x0, #3032]
            buf[ip1][1]*(c1*ue[ip1][4]-c2*q[ip1])-
    40012d3c:	d00000c0 	adrp	x0, 4002c000 <z_idle_threads>
    40012d40:	fd440406 	ldr	d6, [x0, #2056]
          0.5*xxcon3*(buf[ip1][0]-2.0*buf[i][0]+
    40012d44:	b0000380 	adrp	x0, 40083000 <ws+0x3a40>
    40012d48:	fd429814 	ldr	d20, [x0, #1328]
          xxcon4*(cuf[ip1]-2.0*cuf[i]+cuf[im1])+
    40012d4c:	b0000380 	adrp	x0, 40083000 <ws+0x3a40>
    40012d50:	fd429c15 	ldr	d21, [x0, #1336]
          xxcon5*(buf[ip1][4]-2.0*buf[i][4]+buf[im1][4])+
    40012d54:	b0000380 	adrp	x0, 40083000 <ws+0x3a40>
    40012d58:	fd42a016 	ldr	d22, [x0, #1344]
          dx5tx1*( ue[ip1][4]-2.0* ue[i][4]+ ue[im1][4]);
    40012d5c:	d00000c0 	adrp	x0, 4002c000 <z_idle_threads>
    40012d60:	fd45f417 	ldr	d23, [x0, #3048]
    40012d64:	b0000186 	adrp	x6, 40043000 <lhs+0x1c50>
    40012d68:	913140c6 	add	x6, x6, #0xc50
    40012d6c:	912b6383 	add	x3, x28, #0xad8
    40012d70:	aa1503e0 	mov	x0, x21
    40012d74:	aa1603e1 	mov	x1, x22
      for (i = 1; i <= grid_points[0]-2; i++) {
    40012d78:	51000848 	sub	w8, w2, #0x2
    40012d7c:	52800027 	mov	w7, #0x1                   	// #1
          0.5*xxcon3*(buf[ip1][0]-2.0*buf[i][0]+
    40012d80:	1e6c1018 	fmov	d24, #5.000000000000000000e-01
      for (i = 1; i <= grid_points[0]-2; i++) {
    40012d84:	9100a021 	add	x1, x1, #0x28
    40012d88:	9100a000 	add	x0, x0, #0x28
    40012d8c:	9100a273 	add	x19, x19, #0x28
    40012d90:	91002063 	add	x3, x3, #0x8
    40012d94:	6b07011f 	cmp	w8, w7
    40012d98:	5400124a 	b.ge	40012fe0 <exact_rhs+0x490>  // b.tcont
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    40012d9c:	d00000c0 	adrp	x0, 4002c000 <z_idle_threads>
    40012da0:	fd45ac03 	ldr	d3, [x0, #2904]
    40012da4:	aa1603e3 	mov	x3, x22
    40012da8:	aa1503e0 	mov	x0, x21
      for (m = 0; m < 5; m++) {
    40012dac:	52800001 	mov	w1, #0x0                   	// #0
          (5.0*ue[i][m] - 4.0*ue[i+1][m] +ue[i+2][m]);
    40012db0:	1e629006 	fmov	d6, #5.000000000000000000e+00
    40012db4:	1e621002 	fmov	d2, #4.000000000000000000e+00
          (-4.0*ue[i-1][m] + 6.0*ue[i][m] -
    40012db8:	1e721010 	fmov	d16, #-4.000000000000000000e+00
    40012dbc:	1e631005 	fmov	d5, #6.000000000000000000e+00
          (5.0*ue[i][m] - 4.0*ue[i+1][m] +ue[i+2][m]);
    40012dc0:	fd401400 	ldr	d0, [x0, #40]
      for (m = 0; m < 5; m++) {
    40012dc4:	11000421 	add	w1, w1, #0x1
          (5.0*ue[i][m] - 4.0*ue[i+1][m] +ue[i+2][m]);
    40012dc8:	fd402807 	ldr	d7, [x0, #80]
      for (m = 0; m < 5; m++) {
    40012dcc:	7100143f 	cmp	w1, #0x5
          (5.0*ue[i][m] - 4.0*ue[i+1][m] +ue[i+2][m]);
    40012dd0:	fd403c04 	ldr	d4, [x0, #120]
      for (m = 0; m < 5; m++) {
    40012dd4:	91002063 	add	x3, x3, #0x8
          (5.0*ue[i][m] - 4.0*ue[i+1][m] +ue[i+2][m]);
    40012dd8:	1e660801 	fmul	d1, d0, d6
          (-4.0*ue[i-1][m] + 6.0*ue[i][m] -
    40012ddc:	1e700800 	fmul	d0, d0, d16
          (5.0*ue[i][m] - 4.0*ue[i+1][m] +ue[i+2][m]);
    40012de0:	1e6208e9 	fmul	d9, d7, d2
          (-4.0*ue[i-1][m] + 6.0*ue[i][m] -
    40012de4:	1e6508e7 	fmul	d7, d7, d5
      for (m = 0; m < 5; m++) {
    40012de8:	91002000 	add	x0, x0, #0x8
          (5.0*ue[i][m] - 4.0*ue[i+1][m] +ue[i+2][m]);
    40012dec:	1e693821 	fsub	d1, d1, d9
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    40012df0:	fd401069 	ldr	d9, [x3, #32]
          (-4.0*ue[i-1][m] + 6.0*ue[i][m] -
    40012df4:	1e672800 	fadd	d0, d0, d7
          (5.0*ue[i][m] - 4.0*ue[i+1][m] +ue[i+2][m]);
    40012df8:	1e642821 	fadd	d1, d1, d4
            4.0*ue[i+1][m] +     ue[i+2][m]);
    40012dfc:	1e620884 	fmul	d4, d4, d2
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    40012e00:	1e630821 	fmul	d1, d1, d3
          (-4.0*ue[i-1][m] + 6.0*ue[i][m] -
    40012e04:	1e643800 	fsub	d0, d0, d4
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    40012e08:	1e613921 	fsub	d1, d9, d1
    40012e0c:	fd001061 	str	d1, [x3, #32]
            4.0*ue[i+1][m] +     ue[i+2][m]);
    40012e10:	fd404c01 	ldr	d1, [x0, #152]
    40012e14:	1e612800 	fadd	d0, d0, d1
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    40012e18:	fd402461 	ldr	d1, [x3, #72]
    40012e1c:	1e630800 	fmul	d0, d0, d3
    40012e20:	1e603820 	fsub	d0, d1, d0
    40012e24:	fd002460 	str	d0, [x3, #72]
      for (m = 0; m < 5; m++) {
    40012e28:	54fffcc1 	b.ne	40012dc0 <exact_rhs+0x270>  // b.any
      for (i = 3; i <= grid_points[0]-4; i++) {
    40012e2c:	51001043 	sub	w3, w2, #0x4
    40012e30:	92800ee0 	mov	x0, #0xffffffffffffff88    	// #-120
    40012e34:	52800061 	mov	w1, #0x3                   	// #3
            (ue[i-2][m] - 4.0*ue[i-1][m] +
    40012e38:	928009eb 	mov	x11, #0xffffffffffffffb0    	// #-80
    40012e3c:	928004ec 	mov	x12, #0xffffffffffffffd8    	// #-40
             6.0*ue[i][m] - 4.0*ue[i+1][m] + ue[i+2][m]);
    40012e40:	d280050d 	mov	x13, #0x28                  	// #40
    40012e44:	d2800a0e 	mov	x14, #0x50                  	// #80
      for (i = 3; i <= grid_points[0]-4; i++) {
    40012e48:	6b01007f 	cmp	w3, w1
    40012e4c:	54001dca 	b.ge	40013204 <exact_rhs+0x6b4>  // b.tcont
    40012e50:	52800507 	mov	w7, #0x28                  	// #40
    40012e54:	93407d01 	sxtw	x1, w8
    40012e58:	51000c46 	sub	w6, w2, #0x3
    40012e5c:	8b190360 	add	x0, x27, x25
    40012e60:	9b275469 	smaddl	x9, w3, w7, x21
    40012e64:	93407c63 	sxtw	x3, w3
    40012e68:	9b277d0a 	smull	x10, w8, w7
    40012e6c:	928004e8 	mov	x8, #0xffffffffffffffd8    	// #-40
    40012e70:	51001442 	sub	w2, w2, #0x5
    40012e74:	9b277cc6 	smull	x6, w6, w7
    40012e78:	8b0a0000 	add	x0, x0, x10
    40012e7c:	9b087c21 	mul	x1, x1, x8
    40012e80:	9b087c63 	mul	x3, x3, x8
    40012e84:	8b000340 	add	x0, x26, x0
    40012e88:	9b277c42 	smull	x2, w2, w7
      for (m = 0; m < 5; m++) {
    40012e8c:	52800007 	mov	w7, #0x0                   	// #0
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    40012e90:	8b030128 	add	x8, x9, x3
          (ue[i-2][m] - 4.0*ue[i-1][m] +
    40012e94:	fc408521 	ldr	d1, [x9], #8
    40012e98:	8b06000b 	add	x11, x0, x6
      for (m = 0; m < 5; m++) {
    40012e9c:	110004e7 	add	w7, w7, #0x1
    40012ea0:	710014ff 	cmp	w7, #0x5
          (ue[i-2][m] - 4.0*ue[i-1][m] +
    40012ea4:	1e620829 	fmul	d9, d1, d2
           6.0*ue[i][m] - 4.0*ue[i+1][m]);
    40012ea8:	fc666907 	ldr	d7, [x8, x6]
          (ue[i-2][m] - 4.0*ue[i-1][m] +
    40012eac:	fc626900 	ldr	d0, [x8, x2]
           6.0*ue[i][m] - 4.0*ue[i+1][m]);
    40012eb0:	fc6a6904 	ldr	d4, [x8, x10]
          (ue[i-2][m] - 4.0*ue[i-1][m] +
    40012eb4:	1e693800 	fsub	d0, d0, d9
           6.0*ue[i][m] - 4.0*ue[i+1][m]);
    40012eb8:	1e6508e9 	fmul	d9, d7, d5
          (ue[i-2][m] - 4.0*ue[i-1][m] + 5.0*ue[i][m]);
    40012ebc:	1e6208e7 	fmul	d7, d7, d2
          (ue[i-2][m] - 4.0*ue[i-1][m] +
    40012ec0:	1e692800 	fadd	d0, d0, d9
           6.0*ue[i][m] - 4.0*ue[i+1][m]);
    40012ec4:	1e620889 	fmul	d9, d4, d2
          (ue[i-2][m] - 4.0*ue[i-1][m] + 5.0*ue[i][m]);
    40012ec8:	1e673821 	fsub	d1, d1, d7
    40012ecc:	1e660884 	fmul	d4, d4, d6
           6.0*ue[i][m] - 4.0*ue[i+1][m]);
    40012ed0:	1e693800 	fsub	d0, d0, d9
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    40012ed4:	fc616969 	ldr	d9, [x11, x1]
          (ue[i-2][m] - 4.0*ue[i-1][m] + 5.0*ue[i][m]);
    40012ed8:	1e642821 	fadd	d1, d1, d4
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    40012edc:	1e630800 	fmul	d0, d0, d3
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    40012ee0:	1e630821 	fmul	d1, d1, d3
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    40012ee4:	1e603920 	fsub	d0, d9, d0
    40012ee8:	fc216960 	str	d0, [x11, x1]
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    40012eec:	fd400000 	ldr	d0, [x0]
    40012ef0:	1e613801 	fsub	d1, d0, d1
    40012ef4:	fc008401 	str	d1, [x0], #8
      for (m = 0; m < 5; m++) {
    40012ef8:	54fffcc1 	b.ne	40012e90 <exact_rhs+0x340>  // b.any
    for (j = 1; j <= grid_points[1]-2; j++) {
    40012efc:	11000718 	add	w24, w24, #0x1
    40012f00:	9108237b 	add	x27, x27, #0x208
    40012f04:	910822d6 	add	x22, x22, #0x208
    40012f08:	17ffff47 	b	40012c24 <exact_rhs+0xd4>
        xi = (double)(i) * dnxm1;
    40012f0c:	1e6200c0 	scvtf	d0, w6
    40012f10:	d00000c2 	adrp	x2, 4002c000 <z_idle_threads>
    40012f14:	fd45a043 	ldr	d3, [x2, #2880]
        exact_solution(xi, eta, zeta, dtemp);
    40012f18:	1e604121 	fmov	d1, d9
    40012f1c:	1e604102 	fmov	d2, d8
    40012f20:	a9078fe6 	stp	x6, x3, [sp, #120]
    40012f24:	1e630800 	fmul	d0, d0, d3
    40012f28:	f90047e1 	str	x1, [sp, #136]
    40012f2c:	940003fb 	bl	40013f18 <exact_solution>
          ue[i][m] = dtemp[m];
    40012f30:	6d499fe0 	ldp	d0, d7, [sp, #152]
        dtpp = 1.0 / dtemp[0];
    40012f34:	1e6e1004 	fmov	d4, #1.000000000000000000e+00
    40012f38:	a9478fe6 	ldp	x6, x3, [sp, #120]
    40012f3c:	d00000c0 	adrp	x0, 4002c000 <z_idle_threads>
    40012f40:	912b6005 	add	x5, x0, #0xad8
    40012f44:	b0000180 	adrp	x0, 40043000 <lhs+0x1c50>
    40012f48:	91314007 	add	x7, x0, #0xc50
    40012f4c:	910263e0 	add	x0, sp, #0x98
    40012f50:	1e601884 	fdiv	d4, d4, d0
          ue[i][m] = dtemp[m];
    40012f54:	fd405fe1 	ldr	d1, [sp, #184]
    40012f58:	f94047e1 	ldr	x1, [sp, #136]
        dtpp = 1.0 / dtemp[0];
    40012f5c:	d2800022 	mov	x2, #0x1                   	// #1
          ue[i][m] = dtemp[m];
    40012f60:	6d4a97e6 	ldp	d6, d5, [sp, #168]
        dtpp = 1.0 / dtemp[0];
    40012f64:	d00000c4 	adrp	x4, 4002c000 <z_idle_threads>
          ue[i][m] = dtemp[m];
    40012f68:	6d001c20 	stp	d0, d7, [x1]
    40012f6c:	6d011426 	stp	d6, d5, [x1, #16]
    40012f70:	fd001021 	str	d1, [x1, #32]
          buf[i][m] = dtpp * dtemp[m];
    40012f74:	fc627803 	ldr	d3, [x0, x2, lsl #3]
    40012f78:	1e640863 	fmul	d3, d3, d4
    40012f7c:	fc227863 	str	d3, [x3, x2, lsl #3]
        for (m = 1; m < 5; m++) {
    40012f80:	91000442 	add	x2, x2, #0x1
    40012f84:	f100145f 	cmp	x2, #0x5
    40012f88:	54ffff61 	b.ne	40012f74 <exact_rhs+0x424>  // b.any
        buf[i][0] = cuf[i] + buf[i][2] * buf[i][2] + buf[i][3] * buf[i][3];
    40012f8c:	6d408860 	ldp	d0, d2, [x3, #8]
        cuf[i]    = buf[i][1] * buf[i][1];
    40012f90:	d37df0c2 	lsl	x2, x6, #3
        buf[i][0] = cuf[i] + buf[i][2] * buf[i][2] + buf[i][3] * buf[i][3];
    40012f94:	fd400c61 	ldr	d1, [x3, #24]
    40012f98:	910004c6 	add	x6, x6, #0x1
    40012f9c:	9100a021 	add	x1, x1, #0x28
        cuf[i]    = buf[i][1] * buf[i][1];
    40012fa0:	1e600804 	fmul	d4, d0, d0
        buf[i][0] = cuf[i] + buf[i][2] * buf[i][2] + buf[i][3] * buf[i][3];
    40012fa4:	1e620843 	fmul	d3, d2, d2
        q[i] = 0.5*(buf[i][1]*ue[i][1] + buf[i][2]*ue[i][2] +
    40012fa8:	1e670800 	fmul	d0, d0, d7
    40012fac:	1e660842 	fmul	d2, d2, d6
        buf[i][0] = cuf[i] + buf[i][2] * buf[i][2] + buf[i][3] * buf[i][3];
    40012fb0:	1e642863 	fadd	d3, d3, d4
        cuf[i]    = buf[i][1] * buf[i][1];
    40012fb4:	fc256844 	str	d4, [x2, x5]
        q[i] = 0.5*(buf[i][1]*ue[i][1] + buf[i][2]*ue[i][2] +
    40012fb8:	1e622800 	fadd	d0, d0, d2
        buf[i][0] = cuf[i] + buf[i][2] * buf[i][2] + buf[i][3] * buf[i][3];
    40012fbc:	1e610824 	fmul	d4, d1, d1
                    buf[i][3]*ue[i][3]);
    40012fc0:	1e650821 	fmul	d1, d1, d5
        buf[i][0] = cuf[i] + buf[i][2] * buf[i][2] + buf[i][3] * buf[i][3];
    40012fc4:	1e642863 	fadd	d3, d3, d4
        q[i] = 0.5*(buf[i][1]*ue[i][1] + buf[i][2]*ue[i][2] +
    40012fc8:	1e612800 	fadd	d0, d0, d1
    40012fcc:	1e6c1001 	fmov	d1, #5.000000000000000000e-01
        buf[i][0] = cuf[i] + buf[i][2] * buf[i][2] + buf[i][3] * buf[i][3];
    40012fd0:	fc028463 	str	d3, [x3], #40
        q[i] = 0.5*(buf[i][1]*ue[i][1] + buf[i][2]*ue[i][2] +
    40012fd4:	1e610800 	fmul	d0, d0, d1
    40012fd8:	fc276840 	str	d0, [x2, x7]
      for (i = 0; i <= grid_points[0]-1; i++) {
    40012fdc:	17ffff44 	b	40012cec <exact_rhs+0x19c>
          dx1tx1*(ue[ip1][0]-2.0*ue[i][0]+ue[im1][0]);
    40012fe0:	6d7f8019 	ldp	d25, d0, [x0, #-8]
        ip1 = i+1;
    40012fe4:	110004e7 	add	w7, w7, #0x1
          tx2*( ue[ip1][1]-ue[im1][1] )+
    40012fe8:	fc5e001e 	ldur	d30, [x0, #-32]
    40012fec:	fd40181d 	ldr	d29, [x0, #48]
          dx1tx1*(ue[ip1][0]-2.0*ue[i][0]+ue[im1][0]);
    40012ff0:	1e602801 	fadd	d1, d0, d0
    40012ff4:	fd401400 	ldr	d0, [x0, #40]
            (ue[ip1][1]*buf[ip1][1]+c2*(ue[ip1][4]-q[ip1]))-
    40012ff8:	fd4008dc 	ldr	d28, [x6, #16]
            (ue[im1][1]*buf[im1][1]+c2*(ue[im1][4]-q[im1])))+
    40012ffc:	fc4084db 	ldr	d27, [x6], #8
    40013000:	fc5e027a 	ldur	d26, [x19, #-32]
          dx1tx1*(ue[ip1][0]-2.0*ue[i][0]+ue[im1][0]);
    40013004:	1e613800 	fsub	d0, d0, d1
    40013008:	fc5d8001 	ldur	d1, [x0, #-40]
            (ue[im1][1]*buf[im1][1]+c2*(ue[im1][4]-q[im1])))+
    4001300c:	1e7a0bdf 	fmul	d31, d30, d26
          dx1tx1*(ue[ip1][0]-2.0*ue[i][0]+ue[im1][0]);
    40013010:	1e612800 	fadd	d0, d0, d1
          tx2*( ue[ip1][1]-ue[im1][1] )+
    40013014:	1e7e3ba1 	fsub	d1, d29, d30
    40013018:	1e620823 	fmul	d3, d1, d2
        forcing[k][j][i][0] = forcing[k][j][i][0] -
    4001301c:	fd400021 	ldr	d1, [x1]
          dx1tx1*(ue[ip1][0]-2.0*ue[i][0]+ue[im1][0]);
    40013020:	1e670800 	fmul	d0, d0, d7
        forcing[k][j][i][0] = forcing[k][j][i][0] -
    40013024:	1e633821 	fsub	d1, d1, d3
            (ue[ip1][1]*buf[ip1][1]+c2*(ue[ip1][4]-q[ip1]))-
    40013028:	fd402403 	ldr	d3, [x0, #72]
          tx2*( ue[ip1][1]-ue[im1][1] )+
    4001302c:	1e612800 	fadd	d0, d0, d1
            (ue[ip1][1]*buf[ip1][1]+c2*(ue[ip1][4]-q[ip1]))-
    40013030:	1e7c3861 	fsub	d1, d3, d28
            buf[ip1][1]*(c1*ue[ip1][4]-c2*q[ip1])-
    40013034:	1e640b9c 	fmul	d28, d28, d4
        forcing[k][j][i][0] = forcing[k][j][i][0] -
    40013038:	fd000020 	str	d0, [x1]
            (ue[ip1][1]*buf[ip1][1]+c2*(ue[ip1][4]-q[ip1]))-
    4001303c:	1e640821 	fmul	d1, d1, d4
    40013040:	fd401a60 	ldr	d0, [x19, #48]
    40013044:	1e600ba9 	fmul	d9, d29, d0
    40013048:	1e692821 	fadd	d1, d1, d9
            (ue[im1][1]*buf[im1][1]+c2*(ue[im1][4]-q[im1])))+
    4001304c:	1e7b3b29 	fsub	d9, d25, d27
            buf[im1][1]*(c1*ue[im1][4]-c2*q[im1]))+
    40013050:	1e7b089b 	fmul	d27, d4, d27
            (ue[im1][1]*buf[im1][1]+c2*(ue[im1][4]-q[im1])))+
    40013054:	1e640929 	fmul	d9, d9, d4
    40013058:	1e7f2929 	fadd	d9, d9, d31
        forcing[k][j][i][1] = forcing[k][j][i][1] - tx2 * (
    4001305c:	fd40043f 	ldr	d31, [x1, #8]
            (ue[ip1][1]*buf[ip1][1]+c2*(ue[ip1][4]-q[ip1]))-
    40013060:	1e693821 	fsub	d1, d1, d9
          dx2tx1*( ue[ip1][1]-2.0* ue[i][1]+ue[im1][1]);
    40013064:	fd400409 	ldr	d9, [x0, #8]
    40013068:	1e692929 	fadd	d9, d9, d9
        forcing[k][j][i][1] = forcing[k][j][i][1] - tx2 * (
    4001306c:	1e620821 	fmul	d1, d1, d2
          dx2tx1*( ue[ip1][1]-2.0* ue[i][1]+ue[im1][1]);
    40013070:	1e693bbd 	fsub	d29, d29, d9
        forcing[k][j][i][1] = forcing[k][j][i][1] - tx2 * (
    40013074:	1e613bff 	fsub	d31, d31, d1
          xxcon1*(buf[ip1][1]-2.0*buf[i][1]+buf[im1][1])+
    40013078:	fd400661 	ldr	d1, [x19, #8]
    4001307c:	1e612821 	fadd	d1, d1, d1
          dx2tx1*( ue[ip1][1]-2.0* ue[i][1]+ue[im1][1]);
    40013080:	1e7e2bbd 	fadd	d29, d29, d30
            ue[ip1][2]*buf[ip1][1]-ue[im1][2]*buf[im1][1])+
    40013084:	fc5e801e 	ldur	d30, [x0, #-24]
          xxcon1*(buf[ip1][1]-2.0*buf[i][1]+buf[im1][1])+
    40013088:	1e613801 	fsub	d1, d0, d1
          dx2tx1*( ue[ip1][1]-2.0* ue[i][1]+ue[im1][1]);
    4001308c:	1e710bbd 	fmul	d29, d29, d17
          xxcon1*(buf[ip1][1]-2.0*buf[i][1]+buf[im1][1])+
    40013090:	1e7a2821 	fadd	d1, d1, d26
    40013094:	1e700821 	fmul	d1, d1, d16
            (ue[im1][1]*buf[im1][1]+c2*(ue[im1][4]-q[im1])))+
    40013098:	1e612be1 	fadd	d1, d31, d1
            ue[ip1][2]*buf[ip1][1]-ue[im1][2]*buf[im1][1])+
    4001309c:	1e7e0b5f 	fmul	d31, d26, d30
          xxcon1*(buf[ip1][1]-2.0*buf[i][1]+buf[im1][1])+
    400130a0:	1e7d283d 	fadd	d29, d1, d29
          xxcon2*(buf[ip1][2]-2.0*buf[i][2]+buf[im1][2])+
    400130a4:	fd400a61 	ldr	d1, [x19, #16]
    400130a8:	1e612829 	fadd	d9, d1, d1
    400130ac:	fd401e61 	ldr	d1, [x19, #56]
        forcing[k][j][i][1] = forcing[k][j][i][1] - tx2 * (
    400130b0:	fd00043d 	str	d29, [x1, #8]
            ue[ip1][2]*buf[ip1][1]-ue[im1][2]*buf[im1][1])+
    400130b4:	fd401c1d 	ldr	d29, [x0, #56]
          xxcon2*(buf[ip1][2]-2.0*buf[i][2]+buf[im1][2])+
    400130b8:	1e693821 	fsub	d1, d1, d9
    400130bc:	fc5e8269 	ldur	d9, [x19, #-24]
    400130c0:	1e692821 	fadd	d1, d1, d9
            ue[ip1][2]*buf[ip1][1]-ue[im1][2]*buf[im1][1])+
    400130c4:	1e7d0809 	fmul	d9, d0, d29
    400130c8:	1e7f3929 	fsub	d9, d9, d31
        forcing[k][j][i][2] = forcing[k][j][i][2] - tx2 * (
    400130cc:	fd40083f 	ldr	d31, [x1, #16]
          xxcon2*(buf[ip1][2]-2.0*buf[i][2]+buf[im1][2])+
    400130d0:	1e650821 	fmul	d1, d1, d5
        forcing[k][j][i][2] = forcing[k][j][i][2] - tx2 * (
    400130d4:	1e620929 	fmul	d9, d9, d2
    400130d8:	1e693be9 	fsub	d9, d31, d9
            ue[ip1][2]*buf[ip1][1]-ue[im1][2]*buf[im1][1])+
    400130dc:	1e692821 	fadd	d1, d1, d9
          dx3tx1*( ue[ip1][2]-2.0*ue[i][2] +ue[im1][2]);
    400130e0:	fd400809 	ldr	d9, [x0, #16]
    400130e4:	1e692929 	fadd	d9, d9, d9
    400130e8:	1e693bbd 	fsub	d29, d29, d9
    400130ec:	1e7e2bbd 	fadd	d29, d29, d30
            ue[ip1][3]*buf[ip1][1]-ue[im1][3]*buf[im1][1])+
    400130f0:	fc5f001e 	ldur	d30, [x0, #-16]
    400130f4:	1e7e0b5f 	fmul	d31, d26, d30
          dx3tx1*( ue[ip1][2]-2.0*ue[i][2] +ue[im1][2]);
    400130f8:	1e720bbd 	fmul	d29, d29, d18
          xxcon2*(buf[ip1][2]-2.0*buf[i][2]+buf[im1][2])+
    400130fc:	1e7d2821 	fadd	d1, d1, d29
            ue[ip1][3]*buf[ip1][1]-ue[im1][3]*buf[im1][1])+
    40013100:	fd40201d 	ldr	d29, [x0, #64]
        forcing[k][j][i][2] = forcing[k][j][i][2] - tx2 * (
    40013104:	fd000821 	str	d1, [x1, #16]
          xxcon2*(buf[ip1][3]-2.0*buf[i][3]+buf[im1][3])+
    40013108:	fd400e61 	ldr	d1, [x19, #24]
    4001310c:	1e612829 	fadd	d9, d1, d1
    40013110:	fd402261 	ldr	d1, [x19, #64]
    40013114:	1e693821 	fsub	d1, d1, d9
    40013118:	fc5f0269 	ldur	d9, [x19, #-16]
    4001311c:	1e692821 	fadd	d1, d1, d9
            ue[ip1][3]*buf[ip1][1]-ue[im1][3]*buf[im1][1])+
    40013120:	1e7d0809 	fmul	d9, d0, d29
    40013124:	1e7f3929 	fsub	d9, d9, d31
        forcing[k][j][i][3] = forcing[k][j][i][3] - tx2*(
    40013128:	fd400c3f 	ldr	d31, [x1, #24]
          xxcon2*(buf[ip1][3]-2.0*buf[i][3]+buf[im1][3])+
    4001312c:	1e650821 	fmul	d1, d1, d5
        forcing[k][j][i][3] = forcing[k][j][i][3] - tx2*(
    40013130:	1e620929 	fmul	d9, d9, d2
    40013134:	1e693be9 	fsub	d9, d31, d9
            ue[ip1][3]*buf[ip1][1]-ue[im1][3]*buf[im1][1])+
    40013138:	1e692821 	fadd	d1, d1, d9
          dx4tx1*( ue[ip1][3]-2.0* ue[i][3]+ ue[im1][3]);
    4001313c:	fd400c09 	ldr	d9, [x0, #24]
    40013140:	1e692929 	fadd	d9, d9, d9
    40013144:	1e693bbd 	fsub	d29, d29, d9
    40013148:	1e7e2bbd 	fadd	d29, d29, d30
    4001314c:	1e730bbd 	fmul	d29, d29, d19
          xxcon2*(buf[ip1][3]-2.0*buf[i][3]+buf[im1][3])+
    40013150:	1e7d2821 	fadd	d1, d1, d29
        forcing[k][j][i][3] = forcing[k][j][i][3] - tx2*(
    40013154:	fd000c21 	str	d1, [x1, #24]
            buf[ip1][1]*(c1*ue[ip1][4]-c2*q[ip1])-
    40013158:	1e660861 	fmul	d1, d3, d6
    4001315c:	1e7c383c 	fsub	d28, d1, d28
            buf[im1][1]*(c1*ue[im1][4]-c2*q[im1]))+
    40013160:	1e660b21 	fmul	d1, d25, d6
    40013164:	1e7b383b 	fsub	d27, d1, d27
          0.5*xxcon3*(buf[ip1][0]-2.0*buf[i][0]+
    40013168:	fd400261 	ldr	d1, [x19]
            buf[ip1][1]*(c1*ue[ip1][4]-c2*q[ip1])-
    4001316c:	1e600b80 	fmul	d0, d28, d0
          0.5*xxcon3*(buf[ip1][0]-2.0*buf[i][0]+
    40013170:	1e612829 	fadd	d9, d1, d1
    40013174:	fd401661 	ldr	d1, [x19, #40]
            buf[im1][1]*(c1*ue[im1][4]-c2*q[im1]))+
    40013178:	1e7a0b7a 	fmul	d26, d27, d26
          0.5*xxcon3*(buf[ip1][0]-2.0*buf[i][0]+
    4001317c:	1e693821 	fsub	d1, d1, d9
    40013180:	fc5d8269 	ldur	d9, [x19, #-40]
            buf[ip1][1]*(c1*ue[ip1][4]-c2*q[ip1])-
    40013184:	1e7a3800 	fsub	d0, d0, d26
          0.5*xxcon3*(buf[ip1][0]-2.0*buf[i][0]+
    40013188:	1e692821 	fadd	d1, d1, d9
    4001318c:	1e780a89 	fmul	d9, d20, d24
        forcing[k][j][i][4] = forcing[k][j][i][4] - tx2*(
    40013190:	1e62081a 	fmul	d26, d0, d2
    40013194:	fd401020 	ldr	d0, [x1, #32]
          0.5*xxcon3*(buf[ip1][0]-2.0*buf[i][0]+
    40013198:	1e690821 	fmul	d1, d1, d9
        forcing[k][j][i][4] = forcing[k][j][i][4] - tx2*(
    4001319c:	1e7a3800 	fsub	d0, d0, d26
            buf[im1][1]*(c1*ue[im1][4]-c2*q[im1]))+
    400131a0:	1e612800 	fadd	d0, d0, d1
          xxcon4*(cuf[ip1]-2.0*cuf[i]+cuf[im1])+
    400131a4:	fd400061 	ldr	d1, [x3]
    400131a8:	1e612829 	fadd	d9, d1, d1
    400131ac:	fd400461 	ldr	d1, [x3, #8]
    400131b0:	1e693821 	fsub	d1, d1, d9
    400131b4:	fc5f8069 	ldur	d9, [x3, #-8]
    400131b8:	1e692821 	fadd	d1, d1, d9
    400131bc:	1e750821 	fmul	d1, d1, d21
              buf[im1][0])+
    400131c0:	1e612800 	fadd	d0, d0, d1
          xxcon5*(buf[ip1][4]-2.0*buf[i][4]+buf[im1][4])+
    400131c4:	fd401261 	ldr	d1, [x19, #32]
    400131c8:	1e612829 	fadd	d9, d1, d1
    400131cc:	fd402661 	ldr	d1, [x19, #72]
    400131d0:	1e693821 	fsub	d1, d1, d9
    400131d4:	fc5f8269 	ldur	d9, [x19, #-8]
    400131d8:	1e692821 	fadd	d1, d1, d9
    400131dc:	1e760821 	fmul	d1, d1, d22
          xxcon4*(cuf[ip1]-2.0*cuf[i]+cuf[im1])+
    400131e0:	1e612800 	fadd	d0, d0, d1
          dx5tx1*( ue[ip1][4]-2.0* ue[i][4]+ ue[im1][4]);
    400131e4:	fd401001 	ldr	d1, [x0, #32]
    400131e8:	1e612821 	fadd	d1, d1, d1
    400131ec:	1e613863 	fsub	d3, d3, d1
    400131f0:	1e792879 	fadd	d25, d3, d25
    400131f4:	1e770b39 	fmul	d25, d25, d23
          xxcon5*(buf[ip1][4]-2.0*buf[i][4]+buf[im1][4])+
    400131f8:	1e792800 	fadd	d0, d0, d25
        forcing[k][j][i][4] = forcing[k][j][i][4] - tx2*(
    400131fc:	fd001020 	str	d0, [x1, #32]
      for (i = 1; i <= grid_points[0]-2; i++) {
    40013200:	17fffee1 	b	40012d84 <exact_rhs+0x234>
    40013204:	cb0002c9 	sub	x9, x22, x0
    40013208:	cb0002aa 	sub	x10, x21, x0
            (ue[i-2][m] - 4.0*ue[i-1][m] +
    4001320c:	cb000171 	sub	x17, x11, x0
    40013210:	cb000192 	sub	x18, x12, x0
             6.0*ue[i][m] - 4.0*ue[i+1][m] + ue[i+2][m]);
    40013214:	cb0001b0 	sub	x16, x13, x0
    40013218:	cb0001cf 	sub	x15, x14, x0
        for (m = 0; m < 5; m++) {
    4001321c:	52800007 	mov	w7, #0x0                   	// #0
          forcing[k][j][i][m] = forcing[k][j][i][m] - dssp*
    40013220:	8b000146 	add	x6, x10, x0
        for (m = 0; m < 5; m++) {
    40013224:	110004e7 	add	w7, w7, #0x1
    40013228:	710014ff 	cmp	w7, #0x5
            (ue[i-2][m] - 4.0*ue[i-1][m] +
    4001322c:	fc7268c0 	ldr	d0, [x6, x18]
    40013230:	1e620801 	fmul	d1, d0, d2
    40013234:	fc7168c0 	ldr	d0, [x6, x17]
    40013238:	1e613800 	fsub	d0, d0, d1
             6.0*ue[i][m] - 4.0*ue[i+1][m] + ue[i+2][m]);
    4001323c:	fc408541 	ldr	d1, [x10], #8
    40013240:	1e650821 	fmul	d1, d1, d5
            (ue[i-2][m] - 4.0*ue[i-1][m] +
    40013244:	1e612800 	fadd	d0, d0, d1
             6.0*ue[i][m] - 4.0*ue[i+1][m] + ue[i+2][m]);
    40013248:	fc7068c1 	ldr	d1, [x6, x16]
    4001324c:	1e620821 	fmul	d1, d1, d2
    40013250:	1e613800 	fsub	d0, d0, d1
    40013254:	fc6f68c1 	ldr	d1, [x6, x15]
    40013258:	1e612800 	fadd	d0, d0, d1
          forcing[k][j][i][m] = forcing[k][j][i][m] - dssp*
    4001325c:	fd400121 	ldr	d1, [x9]
    40013260:	1e630800 	fmul	d0, d0, d3
    40013264:	1e603820 	fsub	d0, d1, d0
    40013268:	fc008520 	str	d0, [x9], #8
        for (m = 0; m < 5; m++) {
    4001326c:	54fffda1 	b.ne	40013220 <exact_rhs+0x6d0>  // b.any
             6.0*ue[i][m] - 4.0*ue[i+1][m] + ue[i+2][m]);
    40013270:	11000421 	add	w1, w1, #0x1
      for (i = 3; i <= grid_points[0]-4; i++) {
    40013274:	d100a000 	sub	x0, x0, #0x28
    40013278:	17fffef4 	b	40012e48 <exact_rhs+0x2f8>
    4001327c:	90000335 	adrp	x21, 40077000 <u+0x137e8>
    40013280:	9113e2b5 	add	x21, x21, #0x4f8
  for (k = 1; k <= grid_points[2]-2; k++) {
    40013284:	52800037 	mov	w23, #0x1                   	// #1
    zeta = (double)(k) * dnzm1;
    40013288:	b00000c4 	adrp	x4, 4002c000 <z_idle_threads>
    4001328c:	17fffe6b 	b	40012c38 <exact_rhs+0xe8>
    zeta = (double)(k) * dnzm1;
    40013290:	1e620308 	scvtf	d8, w24
    40013294:	52834d1a 	mov	w26, #0x1a68                	// #6760
    40013298:	fd45a8a2 	ldr	d2, [x5, #2896]
    4001329c:	d00000db 	adrp	x27, 4002d000 <fjac+0x358>
    400132a0:	911b437b 	add	x27, x27, #0x6d0
    400132a4:	9b3a7f1a 	smull	x26, w24, w26
    for (i = 1; i <= grid_points[0]-2; i++) {
    400132a8:	d280051c 	mov	x28, #0x28                  	// #40
    400132ac:	52800039 	mov	w25, #0x1                   	// #1
    400132b0:	9100a356 	add	x22, x26, #0x28
    zeta = (double)(k) * dnzm1;
    400132b4:	1e620908 	fmul	d8, d8, d2
    for (i = 1; i <= grid_points[0]-2; i++) {
    400132b8:	8b1b02d6 	add	x22, x22, x27
        cuf[j]    = buf[j][2] * buf[j][2];
    400132bc:	b00000c4 	adrp	x4, 4002c000 <z_idle_threads>
    for (i = 1; i <= grid_points[0]-2; i++) {
    400132c0:	b9400280 	ldr	w0, [x20]
    400132c4:	51000800 	sub	w0, w0, #0x2
    400132c8:	6b19001f 	cmp	w0, w25
    400132cc:	5400006a 	b.ge	400132d8 <exact_rhs+0x788>  // b.tcont
  for (k = 1; k <= grid_points[2]-2; k++) {
    400132d0:	11000718 	add	w24, w24, #0x1
    400132d4:	17fffe61 	b	40012c58 <exact_rhs+0x108>
      xi = (double)(i) * dnxm1;
    400132d8:	1e620329 	scvtf	d9, w25
    400132dc:	b00000c0 	adrp	x0, 4002c000 <z_idle_threads>
    400132e0:	fd45a000 	ldr	d0, [x0, #2880]
    400132e4:	b00000d3 	adrp	x19, 4002c000 <z_idle_threads>
    400132e8:	91180273 	add	x19, x19, #0x600
      for (j = 0; j <= grid_points[1]-1; j++) {
    400132ec:	aa1503f7 	mov	x23, x21
    400132f0:	aa1303e1 	mov	x1, x19
        exact_solution(xi, eta, zeta, dtemp);
    400132f4:	910263e0 	add	x0, sp, #0x98
      xi = (double)(i) * dnxm1;
    400132f8:	1e600929 	fmul	d9, d9, d0
      for (j = 0; j <= grid_points[1]-1; j++) {
    400132fc:	d2800003 	mov	x3, #0x0                   	// #0
    40013300:	b9400682 	ldr	w2, [x20, #4]
    40013304:	51000448 	sub	w8, w2, #0x1
    40013308:	6b03011f 	cmp	w8, w3
    4001330c:	5400112a 	b.ge	40013530 <exact_rhs+0x9e0>  // b.tcont
          ty2*( ue[jp1][2]-ue[jm1][2] )+
    40013310:	90000280 	adrp	x0, 40063000 <square+0x37a8>
    40013314:	fd43f802 	ldr	d2, [x0, #2032]
          dy1ty1*(ue[jp1][0]-2.0*ue[j][0]+ue[jm1][0]);
    40013318:	b00000c0 	adrp	x0, 4002c000 <z_idle_threads>
    4001331c:	fd460006 	ldr	d6, [x0, #3072]
          yycon2*(buf[jp1][1]-2.0*buf[j][1]+buf[jm1][1])+
    40013320:	90000380 	adrp	x0, 40083000 <ws+0x3a40>
    40013324:	fd42a804 	ldr	d4, [x0, #1360]
          dy2ty1*( ue[jp1][1]-2.0* ue[j][1]+ ue[jm1][1]);
    40013328:	b00000c0 	adrp	x0, 4002c000 <z_idle_threads>
    4001332c:	fd460807 	ldr	d7, [x0, #3088]
            (ue[jp1][2]*buf[jp1][2]+c2*(ue[jp1][4]-q[jp1]))-
    40013330:	b00000c0 	adrp	x0, 4002c000 <z_idle_threads>
    40013334:	fd441403 	ldr	d3, [x0, #2088]
          yycon1*(buf[jp1][2]-2.0*buf[j][2]+buf[jm1][2])+
    40013338:	90000380 	adrp	x0, 40083000 <ws+0x3a40>
    4001333c:	fd42a410 	ldr	d16, [x0, #1352]
          dy3ty1*( ue[jp1][2]-2.0*ue[j][2] +ue[jm1][2]);
    40013340:	b00000c0 	adrp	x0, 4002c000 <z_idle_threads>
    40013344:	fd461011 	ldr	d17, [x0, #3104]
          dy4ty1*( ue[jp1][3]-2.0*ue[j][3]+ ue[jm1][3]);
    40013348:	b00000c0 	adrp	x0, 4002c000 <z_idle_threads>
    4001334c:	fd461812 	ldr	d18, [x0, #3120]
            buf[jp1][2]*(c1*ue[jp1][4]-c2*q[jp1])-
    40013350:	b00000c0 	adrp	x0, 4002c000 <z_idle_threads>
    40013354:	fd440405 	ldr	d5, [x0, #2056]
          0.5*yycon3*(buf[jp1][0]-2.0*buf[j][0]+
    40013358:	90000380 	adrp	x0, 40083000 <ws+0x3a40>
    4001335c:	fd42ac13 	ldr	d19, [x0, #1368]
          yycon4*(cuf[jp1]-2.0*cuf[j]+cuf[jm1])+
    40013360:	90000380 	adrp	x0, 40083000 <ws+0x3a40>
    40013364:	fd42b014 	ldr	d20, [x0, #1376]
          yycon5*(buf[jp1][4]-2.0*buf[j][4]+buf[jm1][4])+
    40013368:	90000380 	adrp	x0, 40083000 <ws+0x3a40>
    4001336c:	fd42b415 	ldr	d21, [x0, #1384]
          dy5ty1*(ue[jp1][4]-2.0*ue[j][4]+ue[jm1][4]);
    40013370:	b00000c0 	adrp	x0, 4002c000 <z_idle_threads>
    40013374:	fd462016 	ldr	d22, [x0, #3136]
    40013378:	90000188 	adrp	x8, 40043000 <lhs+0x1c50>
    4001337c:	91314108 	add	x8, x8, #0xc50
    40013380:	912b6087 	add	x7, x4, #0xad8
    40013384:	aa1503e0 	mov	x0, x21
    40013388:	aa1603e1 	mov	x1, x22
      for (j = 1; j <= grid_points[1]-2; j++) {
    4001338c:	51000843 	sub	w3, w2, #0x2
    40013390:	52800029 	mov	w9, #0x1                   	// #1
          0.5*yycon3*(buf[jp1][0]-2.0*buf[j][0]+
    40013394:	1e6c1017 	fmov	d23, #5.000000000000000000e-01
      for (j = 1; j <= grid_points[1]-2; j++) {
    40013398:	91082021 	add	x1, x1, #0x208
    4001339c:	9100a000 	add	x0, x0, #0x28
    400133a0:	9100a273 	add	x19, x19, #0x28
    400133a4:	910020e7 	add	x7, x7, #0x8
    400133a8:	6b09007f 	cmp	w3, w9
    400133ac:	540012aa 	b.ge	40013600 <exact_rhs+0xab0>  // b.tcont
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    400133b0:	b00000c0 	adrp	x0, 4002c000 <z_idle_threads>
    400133b4:	fd45ac03 	ldr	d3, [x0, #2904]
    400133b8:	aa1603e1 	mov	x1, x22
    400133bc:	aa1503e0 	mov	x0, x21
      for (m = 0; m < 5; m++) {
    400133c0:	52800007 	mov	w7, #0x0                   	// #0
          (5.0*ue[j][m] - 4.0*ue[j+1][m] +ue[j+2][m]);
    400133c4:	1e629006 	fmov	d6, #5.000000000000000000e+00
    400133c8:	1e621002 	fmov	d2, #4.000000000000000000e+00
          (-4.0*ue[j-1][m] + 6.0*ue[j][m] -
    400133cc:	1e721010 	fmov	d16, #-4.000000000000000000e+00
    400133d0:	1e631005 	fmov	d5, #6.000000000000000000e+00
          (5.0*ue[j][m] - 4.0*ue[j+1][m] +ue[j+2][m]);
    400133d4:	fd401400 	ldr	d0, [x0, #40]
      for (m = 0; m < 5; m++) {
    400133d8:	110004e7 	add	w7, w7, #0x1
          (5.0*ue[j][m] - 4.0*ue[j+1][m] +ue[j+2][m]);
    400133dc:	fd402807 	ldr	d7, [x0, #80]
      for (m = 0; m < 5; m++) {
    400133e0:	710014ff 	cmp	w7, #0x5
          (5.0*ue[j][m] - 4.0*ue[j+1][m] +ue[j+2][m]);
    400133e4:	fd403c04 	ldr	d4, [x0, #120]
      for (m = 0; m < 5; m++) {
    400133e8:	91002021 	add	x1, x1, #0x8
          (5.0*ue[j][m] - 4.0*ue[j+1][m] +ue[j+2][m]);
    400133ec:	1e660801 	fmul	d1, d0, d6
          (-4.0*ue[j-1][m] + 6.0*ue[j][m] -
    400133f0:	1e700800 	fmul	d0, d0, d16
          (5.0*ue[j][m] - 4.0*ue[j+1][m] +ue[j+2][m]);
    400133f4:	1e6208e9 	fmul	d9, d7, d2
          (-4.0*ue[j-1][m] + 6.0*ue[j][m] -
    400133f8:	1e6508e7 	fmul	d7, d7, d5
      for (m = 0; m < 5; m++) {
    400133fc:	91002000 	add	x0, x0, #0x8
          (5.0*ue[j][m] - 4.0*ue[j+1][m] +ue[j+2][m]);
    40013400:	1e693821 	fsub	d1, d1, d9
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    40013404:	fd410029 	ldr	d9, [x1, #512]
          (-4.0*ue[j-1][m] + 6.0*ue[j][m] -
    40013408:	1e672800 	fadd	d0, d0, d7
          (5.0*ue[j][m] - 4.0*ue[j+1][m] +ue[j+2][m]);
    4001340c:	1e642821 	fadd	d1, d1, d4
           4.0*ue[j+1][m] +       ue[j+2][m]);
    40013410:	1e620884 	fmul	d4, d4, d2
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    40013414:	1e630821 	fmul	d1, d1, d3
          (-4.0*ue[j-1][m] + 6.0*ue[j][m] -
    40013418:	1e643800 	fsub	d0, d0, d4
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    4001341c:	1e613921 	fsub	d1, d9, d1
    40013420:	fd010021 	str	d1, [x1, #512]
           4.0*ue[j+1][m] +       ue[j+2][m]);
    40013424:	fd404c01 	ldr	d1, [x0, #152]
    40013428:	1e612800 	fadd	d0, d0, d1
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    4001342c:	fd420421 	ldr	d1, [x1, #1032]
    40013430:	1e630800 	fmul	d0, d0, d3
    40013434:	1e603820 	fsub	d0, d1, d0
    40013438:	fd020420 	str	d0, [x1, #1032]
      for (m = 0; m < 5; m++) {
    4001343c:	54fffcc1 	b.ne	400133d4 <exact_rhs+0x884>  // b.any
      for (j = 3; j <= grid_points[1]-4; j++) {
    40013440:	51001041 	sub	w1, w2, #0x4
    40013444:	92800ee0 	mov	x0, #0xffffffffffffff88    	// #-120
    40013448:	52800068 	mov	w8, #0x3                   	// #3
    4001344c:	9280018c 	mov	x12, #0xfffffffffffffff3    	// #-13
            (ue[j-2][m] - 4.0*ue[j-1][m] +
    40013450:	928009ed 	mov	x13, #0xffffffffffffffb0    	// #-80
    40013454:	928004ee 	mov	x14, #0xffffffffffffffd8    	// #-40
             6.0*ue[j][m] - 4.0*ue[j+1][m] + ue[j+2][m]);
    40013458:	d280050f 	mov	x15, #0x28                  	// #40
    4001345c:	d2800a10 	mov	x16, #0x50                  	// #80
      for (j = 3; j <= grid_points[1]-4; j++) {
    40013460:	6b08003f 	cmp	w1, w8
    40013464:	54001e0a 	b.ge	40013824 <exact_rhs+0xcd4>  // b.tcont
    40013468:	51000c48 	sub	w8, w2, #0x3
    4001346c:	8b1a0380 	add	x0, x28, x26
    40013470:	52804107 	mov	w7, #0x208                 	// #520
    40013474:	52800509 	mov	w9, #0x28                  	// #40
    40013478:	928040ea 	mov	x10, #0xfffffffffffffdf8    	// #-520
    4001347c:	51001442 	sub	w2, w2, #0x5
    40013480:	9b270060 	smaddl	x0, w3, w7, x0
    40013484:	9b277d0d 	smull	x13, w8, w7
    40013488:	93407c67 	sxtw	x7, w3
    4001348c:	9b29542b 	smaddl	x11, w1, w9, x21
    40013490:	93407c21 	sxtw	x1, w1
    40013494:	8b000360 	add	x0, x27, x0
    40013498:	9b297c42 	smull	x2, w2, w9
    4001349c:	9b0a7ce7 	mul	x7, x7, x10
    400134a0:	928004ea 	mov	x10, #0xffffffffffffffd8    	// #-40
    400134a4:	9b297d08 	smull	x8, w8, w9
    400134a8:	9b0a7c21 	mul	x1, x1, x10
    400134ac:	9b297c63 	smull	x3, w3, w9
      for (m = 0; m < 5; m++) {
    400134b0:	52800009 	mov	w9, #0x0                   	// #0
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    400134b4:	8b0b002a 	add	x10, x1, x11
          (ue[j-2][m] - 4.0*ue[j-1][m] +
    400134b8:	fc408561 	ldr	d1, [x11], #8
    400134bc:	8b0001ac 	add	x12, x13, x0
      for (m = 0; m < 5; m++) {
    400134c0:	11000529 	add	w9, w9, #0x1
    400134c4:	7100153f 	cmp	w9, #0x5
          (ue[j-2][m] - 4.0*ue[j-1][m] +
    400134c8:	1e620829 	fmul	d9, d1, d2
           6.0*ue[j][m] - 4.0*ue[j+1][m]);
    400134cc:	fc686947 	ldr	d7, [x10, x8]
          (ue[j-2][m] - 4.0*ue[j-1][m] +
    400134d0:	fc626940 	ldr	d0, [x10, x2]
           6.0*ue[j][m] - 4.0*ue[j+1][m]);
    400134d4:	fc636944 	ldr	d4, [x10, x3]
          (ue[j-2][m] - 4.0*ue[j-1][m] +
    400134d8:	1e693800 	fsub	d0, d0, d9
           6.0*ue[j][m] - 4.0*ue[j+1][m]);
    400134dc:	1e6508e9 	fmul	d9, d7, d5
          (ue[j-2][m] - 4.0*ue[j-1][m] + 5.0*ue[j][m]);
    400134e0:	1e6208e7 	fmul	d7, d7, d2
          (ue[j-2][m] - 4.0*ue[j-1][m] +
    400134e4:	1e692800 	fadd	d0, d0, d9
           6.0*ue[j][m] - 4.0*ue[j+1][m]);
    400134e8:	1e620889 	fmul	d9, d4, d2
          (ue[j-2][m] - 4.0*ue[j-1][m] + 5.0*ue[j][m]);
    400134ec:	1e673821 	fsub	d1, d1, d7
    400134f0:	1e660884 	fmul	d4, d4, d6
           6.0*ue[j][m] - 4.0*ue[j+1][m]);
    400134f4:	1e693800 	fsub	d0, d0, d9
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    400134f8:	fc676989 	ldr	d9, [x12, x7]
          (ue[j-2][m] - 4.0*ue[j-1][m] + 5.0*ue[j][m]);
    400134fc:	1e642821 	fadd	d1, d1, d4
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    40013500:	1e630800 	fmul	d0, d0, d3
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    40013504:	1e630821 	fmul	d1, d1, d3
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    40013508:	1e603920 	fsub	d0, d9, d0
    4001350c:	fc276980 	str	d0, [x12, x7]
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    40013510:	fd400000 	ldr	d0, [x0]
    40013514:	1e613801 	fsub	d1, d0, d1
    40013518:	fc008401 	str	d1, [x0], #8
      for (m = 0; m < 5; m++) {
    4001351c:	54fffcc1 	b.ne	400134b4 <exact_rhs+0x964>  // b.any
    for (i = 1; i <= grid_points[0]-2; i++) {
    40013520:	11000739 	add	w25, w25, #0x1
    40013524:	9100a39c 	add	x28, x28, #0x28
    40013528:	9100a2d6 	add	x22, x22, #0x28
    4001352c:	17ffff65 	b	400132c0 <exact_rhs+0x770>
        eta = (double)(j) * dnym1;
    40013530:	1e620060 	scvtf	d0, w3
    40013534:	b00000c2 	adrp	x2, 4002c000 <z_idle_threads>
    40013538:	fd45a441 	ldr	d1, [x2, #2888]
        exact_solution(xi, eta, zeta, dtemp);
    4001353c:	1e604102 	fmov	d2, d8
    40013540:	a90787e3 	stp	x3, x1, [sp, #120]
    40013544:	1e610801 	fmul	d1, d0, d1
    40013548:	1e604120 	fmov	d0, d9
    4001354c:	94000273 	bl	40013f18 <exact_solution>
          ue[j][m] = dtemp[m];
    40013550:	6d499fe0 	ldp	d0, d7, [sp, #152]
        dtpp = 1.0/dtemp[0];
    40013554:	1e6e1004 	fmov	d4, #1.000000000000000000e+00
    40013558:	a94787e3 	ldp	x3, x1, [sp, #120]
    4001355c:	b00000c0 	adrp	x0, 4002c000 <z_idle_threads>
    40013560:	912b6006 	add	x6, x0, #0xad8
    40013564:	aa0003e4 	mov	x4, x0
    40013568:	1e601884 	fdiv	d4, d4, d0
    4001356c:	90000180 	adrp	x0, 40043000 <lhs+0x1c50>
    40013570:	91314007 	add	x7, x0, #0xc50
    40013574:	910263e0 	add	x0, sp, #0x98
          ue[j][m] = dtemp[m];
    40013578:	6d4a97e6 	ldp	d6, d5, [sp, #168]
        dtpp = 1.0/dtemp[0];
    4001357c:	d2800022 	mov	x2, #0x1                   	// #1
          ue[j][m] = dtemp[m];
    40013580:	fd405fe1 	ldr	d1, [sp, #184]
        dtpp = 1.0/dtemp[0];
    40013584:	b00000c5 	adrp	x5, 4002c000 <z_idle_threads>
          ue[j][m] = dtemp[m];
    40013588:	6d001ee0 	stp	d0, d7, [x23]
    4001358c:	6d0116e6 	stp	d6, d5, [x23, #16]
    40013590:	fd0012e1 	str	d1, [x23, #32]
          buf[j][m] = dtpp * dtemp[m];
    40013594:	fc627803 	ldr	d3, [x0, x2, lsl #3]
    40013598:	1e640863 	fmul	d3, d3, d4
    4001359c:	fc227823 	str	d3, [x1, x2, lsl #3]
        for (m = 1; m < 5; m++) {
    400135a0:	91000442 	add	x2, x2, #0x1
    400135a4:	f100145f 	cmp	x2, #0x5
    400135a8:	54ffff61 	b.ne	40013594 <exact_rhs+0xa44>  // b.any
        cuf[j]    = buf[j][2] * buf[j][2];
    400135ac:	6d408821 	ldp	d1, d2, [x1, #8]
    400135b0:	d37df062 	lsl	x2, x3, #3
        buf[j][0] = cuf[j] + buf[j][1] * buf[j][1] + buf[j][3] * buf[j][3];
    400135b4:	fd400c20 	ldr	d0, [x1, #24]
    400135b8:	91000463 	add	x3, x3, #0x1
    400135bc:	9100a2f7 	add	x23, x23, #0x28
        cuf[j]    = buf[j][2] * buf[j][2];
    400135c0:	1e620844 	fmul	d4, d2, d2
        buf[j][0] = cuf[j] + buf[j][1] * buf[j][1] + buf[j][3] * buf[j][3];
    400135c4:	1e610823 	fmul	d3, d1, d1
        q[j] = 0.5*(buf[j][1]*ue[j][1] + buf[j][2]*ue[j][2] +
    400135c8:	1e660842 	fmul	d2, d2, d6
    400135cc:	1e670821 	fmul	d1, d1, d7
        buf[j][0] = cuf[j] + buf[j][1] * buf[j][1] + buf[j][3] * buf[j][3];
    400135d0:	1e642863 	fadd	d3, d3, d4
        cuf[j]    = buf[j][2] * buf[j][2];
    400135d4:	fc266844 	str	d4, [x2, x6]
        q[j] = 0.5*(buf[j][1]*ue[j][1] + buf[j][2]*ue[j][2] +
    400135d8:	1e622821 	fadd	d1, d1, d2
        buf[j][0] = cuf[j] + buf[j][1] * buf[j][1] + buf[j][3] * buf[j][3];
    400135dc:	1e600804 	fmul	d4, d0, d0
                    buf[j][3]*ue[j][3]);
    400135e0:	1e650800 	fmul	d0, d0, d5
        buf[j][0] = cuf[j] + buf[j][1] * buf[j][1] + buf[j][3] * buf[j][3];
    400135e4:	1e642863 	fadd	d3, d3, d4
        q[j] = 0.5*(buf[j][1]*ue[j][1] + buf[j][2]*ue[j][2] +
    400135e8:	1e602821 	fadd	d1, d1, d0
    400135ec:	1e6c1000 	fmov	d0, #5.000000000000000000e-01
        buf[j][0] = cuf[j] + buf[j][1] * buf[j][1] + buf[j][3] * buf[j][3];
    400135f0:	fc028423 	str	d3, [x1], #40
        q[j] = 0.5*(buf[j][1]*ue[j][1] + buf[j][2]*ue[j][2] +
    400135f4:	1e600821 	fmul	d1, d1, d0
    400135f8:	fc276841 	str	d1, [x2, x7]
      for (j = 0; j <= grid_points[1]-1; j++) {
    400135fc:	17ffff41 	b	40013300 <exact_rhs+0x7b0>
          dy1ty1*(ue[jp1][0]-2.0*ue[j][0]+ue[jm1][0]);
    40013600:	fd400000 	ldr	d0, [x0]
        jp1 = j+1;
    40013604:	11000529 	add	w9, w9, #0x1
          ty2*( ue[jp1][2]-ue[jm1][2] )+
    40013608:	6d7e7818 	ldp	d24, d30, [x0, #-32]
          dy1ty1*(ue[jp1][0]-2.0*ue[j][0]+ue[jm1][0]);
    4001360c:	1e602801 	fadd	d1, d0, d0
    40013610:	fd401400 	ldr	d0, [x0, #40]
          ty2*( ue[jp1][2]-ue[jm1][2] )+
    40013614:	fd401c1c 	ldr	d28, [x0, #56]
            ue[jp1][1]*buf[jp1][2]-ue[jm1][1]*buf[jm1][2])+
    40013618:	fc5e8279 	ldur	d25, [x19, #-24]
    4001361c:	fd401e7a 	ldr	d26, [x19, #56]
          dy1ty1*(ue[jp1][0]-2.0*ue[j][0]+ue[jm1][0]);
    40013620:	1e613800 	fsub	d0, d0, d1
    40013624:	fc5d8001 	ldur	d1, [x0, #-40]
            ue[jp1][1]*buf[jp1][2]-ue[jm1][1]*buf[jm1][2])+
    40013628:	1e790b1b 	fmul	d27, d24, d25
            (ue[jm1][2]*buf[jm1][2]+c2*(ue[jm1][4]-q[jm1])))+
    4001362c:	1e790bdf 	fmul	d31, d30, d25
          dy1ty1*(ue[jp1][0]-2.0*ue[j][0]+ue[jm1][0]);
    40013630:	1e612800 	fadd	d0, d0, d1
          ty2*( ue[jp1][2]-ue[jm1][2] )+
    40013634:	1e7e3b81 	fsub	d1, d28, d30
    40013638:	1e620829 	fmul	d9, d1, d2
        forcing[k][j][i][0] = forcing[k][j][i][0] -
    4001363c:	fd400021 	ldr	d1, [x1]
          dy1ty1*(ue[jp1][0]-2.0*ue[j][0]+ue[jm1][0]);
    40013640:	1e660800 	fmul	d0, d0, d6
        forcing[k][j][i][0] = forcing[k][j][i][0] -
    40013644:	1e693821 	fsub	d1, d1, d9
          ty2*( ue[jp1][2]-ue[jm1][2] )+
    40013648:	1e612800 	fadd	d0, d0, d1
            ue[jp1][1]*buf[jp1][2]-ue[jm1][1]*buf[jm1][2])+
    4001364c:	fd401801 	ldr	d1, [x0, #48]
        forcing[k][j][i][0] = forcing[k][j][i][0] -
    40013650:	fd000020 	str	d0, [x1]
          yycon2*(buf[jp1][1]-2.0*buf[j][1]+buf[jm1][1])+
    40013654:	fd400660 	ldr	d0, [x19, #8]
    40013658:	1e602809 	fadd	d9, d0, d0
    4001365c:	fd401a60 	ldr	d0, [x19, #48]
    40013660:	1e693800 	fsub	d0, d0, d9
    40013664:	fc5e0269 	ldur	d9, [x19, #-32]
    40013668:	1e692800 	fadd	d0, d0, d9
            ue[jp1][1]*buf[jp1][2]-ue[jm1][1]*buf[jm1][2])+
    4001366c:	1e7a0829 	fmul	d9, d1, d26
    40013670:	1e7b3929 	fsub	d9, d9, d27
        forcing[k][j][i][1] = forcing[k][j][i][1] - ty2*(
    40013674:	fd40043b 	ldr	d27, [x1, #8]
          yycon2*(buf[jp1][1]-2.0*buf[j][1]+buf[jm1][1])+
    40013678:	1e640800 	fmul	d0, d0, d4
        forcing[k][j][i][1] = forcing[k][j][i][1] - ty2*(
    4001367c:	1e620929 	fmul	d9, d9, d2
    40013680:	1e693b69 	fsub	d9, d27, d9
            (ue[jm1][2]*buf[jm1][2]+c2*(ue[jm1][4]-q[jm1])))+
    40013684:	fc5f801b 	ldur	d27, [x0, #-8]
            ue[jp1][1]*buf[jp1][2]-ue[jm1][1]*buf[jm1][2])+
    40013688:	1e692800 	fadd	d0, d0, d9
          dy2ty1*( ue[jp1][1]-2.0* ue[j][1]+ ue[jm1][1]);
    4001368c:	fd400409 	ldr	d9, [x0, #8]
    40013690:	1e692929 	fadd	d9, d9, d9
    40013694:	1e693821 	fsub	d1, d1, d9
            (ue[jp1][2]*buf[jp1][2]+c2*(ue[jp1][4]-q[jp1]))-
    40013698:	1e7a0b89 	fmul	d9, d28, d26
          dy2ty1*( ue[jp1][1]-2.0* ue[j][1]+ ue[jm1][1]);
    4001369c:	1e782821 	fadd	d1, d1, d24
            (ue[jp1][2]*buf[jp1][2]+c2*(ue[jp1][4]-q[jp1]))-
    400136a0:	fd402418 	ldr	d24, [x0, #72]
          dy2ty1*( ue[jp1][1]-2.0* ue[j][1]+ ue[jm1][1]);
    400136a4:	1e670821 	fmul	d1, d1, d7
          yycon2*(buf[jp1][1]-2.0*buf[j][1]+buf[jm1][1])+
    400136a8:	1e612800 	fadd	d0, d0, d1
        forcing[k][j][i][1] = forcing[k][j][i][1] - ty2*(
    400136ac:	fd000420 	str	d0, [x1, #8]
            (ue[jp1][2]*buf[jp1][2]+c2*(ue[jp1][4]-q[jp1]))-
    400136b0:	fd400900 	ldr	d0, [x8, #16]
            (ue[jm1][2]*buf[jm1][2]+c2*(ue[jm1][4]-q[jm1])))+
    400136b4:	fc40851d 	ldr	d29, [x8], #8
            (ue[jp1][2]*buf[jp1][2]+c2*(ue[jp1][4]-q[jp1]))-
    400136b8:	1e603b01 	fsub	d1, d24, d0
            buf[jp1][2]*(c1*ue[jp1][4]-c2*q[jp1])-
    400136bc:	1e630800 	fmul	d0, d0, d3
            (ue[jp1][2]*buf[jp1][2]+c2*(ue[jp1][4]-q[jp1]))-
    400136c0:	1e630821 	fmul	d1, d1, d3
    400136c4:	1e692821 	fadd	d1, d1, d9
            (ue[jm1][2]*buf[jm1][2]+c2*(ue[jm1][4]-q[jm1])))+
    400136c8:	1e7d3b69 	fsub	d9, d27, d29
            buf[jm1][2]*(c1*ue[jm1][4]-c2*q[jm1]))+
    400136cc:	1e7d087d 	fmul	d29, d3, d29
            (ue[jm1][2]*buf[jm1][2]+c2*(ue[jm1][4]-q[jm1])))+
    400136d0:	1e630929 	fmul	d9, d9, d3
    400136d4:	1e7f2929 	fadd	d9, d9, d31
        forcing[k][j][i][2] = forcing[k][j][i][2] - ty2*(
    400136d8:	fd40083f 	ldr	d31, [x1, #16]
            (ue[jp1][2]*buf[jp1][2]+c2*(ue[jp1][4]-q[jp1]))-
    400136dc:	1e693821 	fsub	d1, d1, d9
          dy3ty1*( ue[jp1][2]-2.0*ue[j][2] +ue[jm1][2]);
    400136e0:	fd400809 	ldr	d9, [x0, #16]
    400136e4:	1e692929 	fadd	d9, d9, d9
        forcing[k][j][i][2] = forcing[k][j][i][2] - ty2*(
    400136e8:	1e620821 	fmul	d1, d1, d2
          dy3ty1*( ue[jp1][2]-2.0*ue[j][2] +ue[jm1][2]);
    400136ec:	1e693b9c 	fsub	d28, d28, d9
        forcing[k][j][i][2] = forcing[k][j][i][2] - ty2*(
    400136f0:	1e613bff 	fsub	d31, d31, d1
          yycon1*(buf[jp1][2]-2.0*buf[j][2]+buf[jm1][2])+
    400136f4:	fd400a61 	ldr	d1, [x19, #16]
    400136f8:	1e612821 	fadd	d1, d1, d1
          dy3ty1*( ue[jp1][2]-2.0*ue[j][2] +ue[jm1][2]);
    400136fc:	1e7e2b9e 	fadd	d30, d28, d30
            ue[jp1][3]*buf[jp1][2]-ue[jm1][3]*buf[jm1][2])+
    40013700:	fd40201c 	ldr	d28, [x0, #64]
          yycon1*(buf[jp1][2]-2.0*buf[j][2]+buf[jm1][2])+
    40013704:	1e613b41 	fsub	d1, d26, d1
          dy3ty1*( ue[jp1][2]-2.0*ue[j][2] +ue[jm1][2]);
    40013708:	1e710bde 	fmul	d30, d30, d17
          yycon1*(buf[jp1][2]-2.0*buf[j][2]+buf[jm1][2])+
    4001370c:	1e792821 	fadd	d1, d1, d25
    40013710:	1e700821 	fmul	d1, d1, d16
            (ue[jm1][2]*buf[jm1][2]+c2*(ue[jm1][4]-q[jm1])))+
    40013714:	1e612be1 	fadd	d1, d31, d1
          yycon1*(buf[jp1][2]-2.0*buf[j][2]+buf[jm1][2])+
    40013718:	1e7e283e 	fadd	d30, d1, d30
          yycon2*(buf[jp1][3]-2.0*buf[j][3]+buf[jm1][3])+
    4001371c:	fd400e61 	ldr	d1, [x19, #24]
    40013720:	1e612829 	fadd	d9, d1, d1
    40013724:	fd402261 	ldr	d1, [x19, #64]
        forcing[k][j][i][2] = forcing[k][j][i][2] - ty2*(
    40013728:	fd00083e 	str	d30, [x1, #16]
            ue[jp1][3]*buf[jp1][2]-ue[jm1][3]*buf[jm1][2])+
    4001372c:	fc5f001e 	ldur	d30, [x0, #-16]
          yycon2*(buf[jp1][3]-2.0*buf[j][3]+buf[jm1][3])+
    40013730:	1e693821 	fsub	d1, d1, d9
    40013734:	fc5f0269 	ldur	d9, [x19, #-16]
            ue[jp1][3]*buf[jp1][2]-ue[jm1][3]*buf[jm1][2])+
    40013738:	1e7e0b3f 	fmul	d31, d25, d30
          yycon2*(buf[jp1][3]-2.0*buf[j][3]+buf[jm1][3])+
    4001373c:	1e692821 	fadd	d1, d1, d9
            ue[jp1][3]*buf[jp1][2]-ue[jm1][3]*buf[jm1][2])+
    40013740:	1e7c0b49 	fmul	d9, d26, d28
    40013744:	1e7f3929 	fsub	d9, d9, d31
        forcing[k][j][i][3] = forcing[k][j][i][3] - ty2*(
    40013748:	fd400c3f 	ldr	d31, [x1, #24]
          yycon2*(buf[jp1][3]-2.0*buf[j][3]+buf[jm1][3])+
    4001374c:	1e640821 	fmul	d1, d1, d4
        forcing[k][j][i][3] = forcing[k][j][i][3] - ty2*(
    40013750:	1e620929 	fmul	d9, d9, d2
    40013754:	1e693be9 	fsub	d9, d31, d9
            ue[jp1][3]*buf[jp1][2]-ue[jm1][3]*buf[jm1][2])+
    40013758:	1e692821 	fadd	d1, d1, d9
          dy4ty1*( ue[jp1][3]-2.0*ue[j][3]+ ue[jm1][3]);
    4001375c:	fd400c09 	ldr	d9, [x0, #24]
    40013760:	1e692929 	fadd	d9, d9, d9
    40013764:	1e693b9c 	fsub	d28, d28, d9
    40013768:	1e7e2b9c 	fadd	d28, d28, d30
    4001376c:	1e720b9c 	fmul	d28, d28, d18
          yycon2*(buf[jp1][3]-2.0*buf[j][3]+buf[jm1][3])+
    40013770:	1e7c2821 	fadd	d1, d1, d28
        forcing[k][j][i][3] = forcing[k][j][i][3] - ty2*(
    40013774:	fd000c21 	str	d1, [x1, #24]
            buf[jp1][2]*(c1*ue[jp1][4]-c2*q[jp1])-
    40013778:	1e650b01 	fmul	d1, d24, d5
    4001377c:	1e603820 	fsub	d0, d1, d0
          0.5*yycon3*(buf[jp1][0]-2.0*buf[j][0]+
    40013780:	fd400261 	ldr	d1, [x19]
    40013784:	1e612829 	fadd	d9, d1, d1
    40013788:	fd401661 	ldr	d1, [x19, #40]
            buf[jp1][2]*(c1*ue[jp1][4]-c2*q[jp1])-
    4001378c:	1e7a081a 	fmul	d26, d0, d26
            buf[jm1][2]*(c1*ue[jm1][4]-c2*q[jm1]))+
    40013790:	1e650b60 	fmul	d0, d27, d5
          0.5*yycon3*(buf[jp1][0]-2.0*buf[j][0]+
    40013794:	1e693821 	fsub	d1, d1, d9
    40013798:	fc5d8269 	ldur	d9, [x19, #-40]
            buf[jm1][2]*(c1*ue[jm1][4]-c2*q[jm1]))+
    4001379c:	1e7d3800 	fsub	d0, d0, d29
          0.5*yycon3*(buf[jp1][0]-2.0*buf[j][0]+
    400137a0:	1e692821 	fadd	d1, d1, d9
    400137a4:	1e770a69 	fmul	d9, d19, d23
            buf[jm1][2]*(c1*ue[jm1][4]-c2*q[jm1]))+
    400137a8:	1e790819 	fmul	d25, d0, d25
          0.5*yycon3*(buf[jp1][0]-2.0*buf[j][0]+
    400137ac:	1e690821 	fmul	d1, d1, d9
            buf[jp1][2]*(c1*ue[jp1][4]-c2*q[jp1])-
    400137b0:	1e793b40 	fsub	d0, d26, d25
        forcing[k][j][i][4] = forcing[k][j][i][4] - ty2*(
    400137b4:	1e620819 	fmul	d25, d0, d2
    400137b8:	fd401020 	ldr	d0, [x1, #32]
    400137bc:	1e793800 	fsub	d0, d0, d25
            buf[jm1][2]*(c1*ue[jm1][4]-c2*q[jm1]))+
    400137c0:	1e612800 	fadd	d0, d0, d1
          yycon4*(cuf[jp1]-2.0*cuf[j]+cuf[jm1])+
    400137c4:	fd4000e1 	ldr	d1, [x7]
    400137c8:	1e612829 	fadd	d9, d1, d1
    400137cc:	fd4004e1 	ldr	d1, [x7, #8]
    400137d0:	1e693821 	fsub	d1, d1, d9
    400137d4:	fc5f80e9 	ldur	d9, [x7, #-8]
    400137d8:	1e692821 	fadd	d1, d1, d9
    400137dc:	1e740821 	fmul	d1, d1, d20
              buf[jm1][0])+
    400137e0:	1e612800 	fadd	d0, d0, d1
          yycon5*(buf[jp1][4]-2.0*buf[j][4]+buf[jm1][4])+
    400137e4:	fd401261 	ldr	d1, [x19, #32]
    400137e8:	1e612829 	fadd	d9, d1, d1
    400137ec:	fd402661 	ldr	d1, [x19, #72]
    400137f0:	1e693821 	fsub	d1, d1, d9
    400137f4:	fc5f8269 	ldur	d9, [x19, #-8]
    400137f8:	1e692821 	fadd	d1, d1, d9
    400137fc:	1e750821 	fmul	d1, d1, d21
          yycon4*(cuf[jp1]-2.0*cuf[j]+cuf[jm1])+
    40013800:	1e612800 	fadd	d0, d0, d1
          dy5ty1*(ue[jp1][4]-2.0*ue[j][4]+ue[jm1][4]);
    40013804:	fd401001 	ldr	d1, [x0, #32]
    40013808:	1e612821 	fadd	d1, d1, d1
    4001380c:	1e613b18 	fsub	d24, d24, d1
    40013810:	1e7b2b1b 	fadd	d27, d24, d27
    40013814:	1e760b7b 	fmul	d27, d27, d22
          yycon5*(buf[jp1][4]-2.0*buf[j][4]+buf[jm1][4])+
    40013818:	1e7b2800 	fadd	d0, d0, d27
        forcing[k][j][i][4] = forcing[k][j][i][4] - ty2*(
    4001381c:	fd001020 	str	d0, [x1, #32]
      for (j = 1; j <= grid_points[1]-2; j++) {
    40013820:	17fffede 	b	40013398 <exact_rhs+0x848>
    40013824:	9b0c580a 	madd	x10, x0, x12, x22
    40013828:	cb0002ab 	sub	x11, x21, x0
            (ue[j-2][m] - 4.0*ue[j-1][m] +
    4001382c:	cb0001b3 	sub	x19, x13, x0
    40013830:	cb0001d7 	sub	x23, x14, x0
             6.0*ue[j][m] - 4.0*ue[j+1][m] + ue[j+2][m]);
    40013834:	cb0001f2 	sub	x18, x15, x0
    40013838:	cb000211 	sub	x17, x16, x0
        for (m = 0; m < 5; m++) {
    4001383c:	52800009 	mov	w9, #0x0                   	// #0
          forcing[k][j][i][m] = forcing[k][j][i][m] - dssp*
    40013840:	8b0b0007 	add	x7, x0, x11
        for (m = 0; m < 5; m++) {
    40013844:	11000529 	add	w9, w9, #0x1
    40013848:	7100153f 	cmp	w9, #0x5
            (ue[j-2][m] - 4.0*ue[j-1][m] +
    4001384c:	fc7768e0 	ldr	d0, [x7, x23]
    40013850:	1e620801 	fmul	d1, d0, d2
    40013854:	fc7368e0 	ldr	d0, [x7, x19]
    40013858:	1e613800 	fsub	d0, d0, d1
             6.0*ue[j][m] - 4.0*ue[j+1][m] + ue[j+2][m]);
    4001385c:	fc408561 	ldr	d1, [x11], #8
    40013860:	1e650821 	fmul	d1, d1, d5
            (ue[j-2][m] - 4.0*ue[j-1][m] +
    40013864:	1e612800 	fadd	d0, d0, d1
             6.0*ue[j][m] - 4.0*ue[j+1][m] + ue[j+2][m]);
    40013868:	fc7268e1 	ldr	d1, [x7, x18]
    4001386c:	1e620821 	fmul	d1, d1, d2
    40013870:	1e613800 	fsub	d0, d0, d1
    40013874:	fc7168e1 	ldr	d1, [x7, x17]
    40013878:	1e612800 	fadd	d0, d0, d1
          forcing[k][j][i][m] = forcing[k][j][i][m] - dssp*
    4001387c:	fd400141 	ldr	d1, [x10]
    40013880:	1e630800 	fmul	d0, d0, d3
    40013884:	1e603820 	fsub	d0, d1, d0
    40013888:	fc008540 	str	d0, [x10], #8
        for (m = 0; m < 5; m++) {
    4001388c:	54fffda1 	b.ne	40013840 <exact_rhs+0xcf0>  // b.any
             6.0*ue[j][m] - 4.0*ue[j+1][m] + ue[j+2][m]);
    40013890:	11000508 	add	w8, w8, #0x1
      for (j = 3; j <= grid_points[1]-4; j++) {
    40013894:	d100a000 	sub	x0, x0, #0x28
    40013898:	17fffef2 	b	40013460 <exact_rhs+0x910>
    eta = (double)(j) * dnym1;
    4001389c:	1e620308 	scvtf	d8, w24
    400138a0:	fd45a481 	ldr	d1, [x4, #2888]
    400138a4:	52804117 	mov	w23, #0x208                 	// #520
    400138a8:	d2800500 	mov	x0, #0x28                  	// #40
    400138ac:	d00000db 	adrp	x27, 4002d000 <fjac+0x358>
    400138b0:	911b437b 	add	x27, x27, #0x6d0
    400138b4:	9b370317 	smaddl	x23, w24, w23, x0
    for (i = 1; i <= grid_points[0]-2; i++) {
    400138b8:	5280003a 	mov	w26, #0x1                   	// #1
    eta = (double)(j) * dnym1;
    400138bc:	1e610908 	fmul	d8, d8, d1
        cuf[k]    = buf[k][3] * buf[k][3];
    400138c0:	b00000dc 	adrp	x28, 4002c000 <z_idle_threads>
    400138c4:	8b1b02f9 	add	x25, x23, x27
    for (i = 1; i <= grid_points[0]-2; i++) {
    400138c8:	b9400280 	ldr	w0, [x20]
    400138cc:	51000800 	sub	w0, w0, #0x2
    400138d0:	6b1a001f 	cmp	w0, w26
    400138d4:	5400006a 	b.ge	400138e0 <exact_rhs+0xd90>  // b.tcont
  for (j = 1; j <= grid_points[1]-2; j++) {
    400138d8:	11000718 	add	w24, w24, #0x1
    400138dc:	17fffce7 	b	40012c78 <exact_rhs+0x128>
      xi = (double)(i) * dnxm1;
    400138e0:	1e620349 	scvtf	d9, w26
    400138e4:	b00000c0 	adrp	x0, 4002c000 <z_idle_threads>
    400138e8:	fd45a000 	ldr	d0, [x0, #2880]
    400138ec:	b00000d3 	adrp	x19, 4002c000 <z_idle_threads>
    400138f0:	91180273 	add	x19, x19, #0x600
      for (k = 0; k <= grid_points[2]-1; k++) {
    400138f4:	aa1503f6 	mov	x22, x21
    400138f8:	aa1303e1 	mov	x1, x19
        exact_solution(xi, eta, zeta, dtemp);
    400138fc:	910263e0 	add	x0, sp, #0x98
      xi = (double)(i) * dnxm1;
    40013900:	1e600929 	fmul	d9, d9, d0
      for (k = 0; k <= grid_points[2]-1; k++) {
    40013904:	d2800003 	mov	x3, #0x0                   	// #0
    40013908:	b9400a82 	ldr	w2, [x20, #8]
    4001390c:	51000447 	sub	w7, w2, #0x1
    40013910:	6b0300ff 	cmp	w7, w3
    40013914:	5400112a 	b.ge	40013b38 <exact_rhs+0xfe8>  // b.tcont
          tz2*( ue[kp1][3]-ue[km1][3] )+
    40013918:	90000280 	adrp	x0, 40063000 <square+0x37a8>
    4001391c:	fd440401 	ldr	d1, [x0, #2056]
          dz1tz1*(ue[kp1][0]-2.0*ue[k][0]+ue[km1][0]);
    40013920:	b00000c0 	adrp	x0, 4002c000 <z_idle_threads>
    40013924:	fd462c05 	ldr	d5, [x0, #3160]
          zzcon2*(buf[kp1][1]-2.0*buf[k][1]+buf[km1][1])+
    40013928:	90000380 	adrp	x0, 40083000 <ws+0x3a40>
    4001392c:	fd42bc03 	ldr	d3, [x0, #1400]
          dz2tz1*( ue[kp1][1]-2.0* ue[k][1]+ ue[km1][1]);
    40013930:	b00000c0 	adrp	x0, 4002c000 <z_idle_threads>
    40013934:	fd463406 	ldr	d6, [x0, #3176]
          dz3tz1*(ue[kp1][2]-2.0*ue[k][2]+ue[km1][2]);
    40013938:	b00000c0 	adrp	x0, 4002c000 <z_idle_threads>
    4001393c:	fd463c07 	ldr	d7, [x0, #3192]
            (ue[kp1][3]*buf[kp1][3]+c2*(ue[kp1][4]-q[kp1]))-
    40013940:	b00000c0 	adrp	x0, 4002c000 <z_idle_threads>
    40013944:	fd441402 	ldr	d2, [x0, #2088]
          zzcon1*(buf[kp1][3]-2.0*buf[k][3]+buf[km1][3])+
    40013948:	90000380 	adrp	x0, 40083000 <ws+0x3a40>
    4001394c:	fd42b810 	ldr	d16, [x0, #1392]
          dz4tz1*( ue[kp1][3]-2.0*ue[k][3] +ue[km1][3]);
    40013950:	b00000c0 	adrp	x0, 4002c000 <z_idle_threads>
    40013954:	fd464411 	ldr	d17, [x0, #3208]
            buf[kp1][3]*(c1*ue[kp1][4]-c2*q[kp1])-
    40013958:	b00000c0 	adrp	x0, 4002c000 <z_idle_threads>
    4001395c:	fd440404 	ldr	d4, [x0, #2056]
          0.5*zzcon3*(buf[kp1][0]-2.0*buf[k][0]
    40013960:	90000380 	adrp	x0, 40083000 <ws+0x3a40>
    40013964:	fd42c012 	ldr	d18, [x0, #1408]
          zzcon4*(cuf[kp1]-2.0*cuf[k]+cuf[km1])+
    40013968:	90000380 	adrp	x0, 40083000 <ws+0x3a40>
    4001396c:	fd42c413 	ldr	d19, [x0, #1416]
          zzcon5*(buf[kp1][4]-2.0*buf[k][4]+buf[km1][4])+
    40013970:	90000380 	adrp	x0, 40083000 <ws+0x3a40>
    40013974:	fd42c814 	ldr	d20, [x0, #1424]
          dz5tz1*( ue[kp1][4]-2.0*ue[k][4]+ ue[km1][4]);
    40013978:	b00000c0 	adrp	x0, 4002c000 <z_idle_threads>
    4001397c:	fd464c15 	ldr	d21, [x0, #3224]
    40013980:	90000187 	adrp	x7, 40043000 <lhs+0x1c50>
    40013984:	913140e7 	add	x7, x7, #0xc50
    40013988:	912b6386 	add	x6, x28, #0xad8
    4001398c:	aa1503e0 	mov	x0, x21
    40013990:	aa1903e1 	mov	x1, x25
      for (k = 1; k <= grid_points[2]-2; k++) {
    40013994:	51000843 	sub	w3, w2, #0x2
    40013998:	52800028 	mov	w8, #0x1                   	// #1
    4001399c:	d2834d09 	mov	x9, #0x1a68                	// #6760
          0.5*zzcon3*(buf[kp1][0]-2.0*buf[k][0]
    400139a0:	1e6c1016 	fmov	d22, #5.000000000000000000e-01
      for (k = 1; k <= grid_points[2]-2; k++) {
    400139a4:	8b090021 	add	x1, x1, x9
    400139a8:	9100a000 	add	x0, x0, #0x28
    400139ac:	9100a273 	add	x19, x19, #0x28
    400139b0:	910020c6 	add	x6, x6, #0x8
    400139b4:	6b08007f 	cmp	w3, w8
    400139b8:	5400126a 	b.ge	40013c04 <exact_rhs+0x10b4>  // b.tcont
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    400139bc:	b00000c0 	adrp	x0, 4002c000 <z_idle_threads>
    400139c0:	fd45ac03 	ldr	d3, [x0, #2904]
    400139c4:	aa1903e1 	mov	x1, x25
    400139c8:	aa1503e0 	mov	x0, x21
      for (m = 0; m < 5; m++) {
    400139cc:	52800006 	mov	w6, #0x0                   	// #0
          (5.0*ue[k][m] - 4.0*ue[k+1][m] +ue[k+2][m]);
    400139d0:	1e629006 	fmov	d6, #5.000000000000000000e+00
    400139d4:	1e621002 	fmov	d2, #4.000000000000000000e+00
          (-4.0*ue[k-1][m] + 6.0*ue[k][m] -
    400139d8:	1e721010 	fmov	d16, #-4.000000000000000000e+00
    400139dc:	1e631005 	fmov	d5, #6.000000000000000000e+00
          (5.0*ue[k][m] - 4.0*ue[k+1][m] +ue[k+2][m]);
    400139e0:	fd401400 	ldr	d0, [x0, #40]
      for (m = 0; m < 5; m++) {
    400139e4:	110004c6 	add	w6, w6, #0x1
          (5.0*ue[k][m] - 4.0*ue[k+1][m] +ue[k+2][m]);
    400139e8:	fd402807 	ldr	d7, [x0, #80]
      for (m = 0; m < 5; m++) {
    400139ec:	710014df 	cmp	w6, #0x5
          (5.0*ue[k][m] - 4.0*ue[k+1][m] +ue[k+2][m]);
    400139f0:	fd403c04 	ldr	d4, [x0, #120]
      for (m = 0; m < 5; m++) {
    400139f4:	91002021 	add	x1, x1, #0x8
          (5.0*ue[k][m] - 4.0*ue[k+1][m] +ue[k+2][m]);
    400139f8:	1e660801 	fmul	d1, d0, d6
          (-4.0*ue[k-1][m] + 6.0*ue[k][m] -
    400139fc:	1e700800 	fmul	d0, d0, d16
          (5.0*ue[k][m] - 4.0*ue[k+1][m] +ue[k+2][m]);
    40013a00:	1e6208e9 	fmul	d9, d7, d2
          (-4.0*ue[k-1][m] + 6.0*ue[k][m] -
    40013a04:	1e6508e7 	fmul	d7, d7, d5
      for (m = 0; m < 5; m++) {
    40013a08:	91002000 	add	x0, x0, #0x8
          (5.0*ue[k][m] - 4.0*ue[k+1][m] +ue[k+2][m]);
    40013a0c:	1e693821 	fsub	d1, d1, d9
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    40013a10:	fd4d3029 	ldr	d9, [x1, #6752]
          (-4.0*ue[k-1][m] + 6.0*ue[k][m] -
    40013a14:	1e672800 	fadd	d0, d0, d7
          (5.0*ue[k][m] - 4.0*ue[k+1][m] +ue[k+2][m]);
    40013a18:	1e642821 	fadd	d1, d1, d4
           4.0*ue[k+1][m] +       ue[k+2][m]);
    40013a1c:	1e620884 	fmul	d4, d4, d2
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    40013a20:	1e630821 	fmul	d1, d1, d3
          (-4.0*ue[k-1][m] + 6.0*ue[k][m] -
    40013a24:	1e643800 	fsub	d0, d0, d4
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    40013a28:	1e613921 	fsub	d1, d9, d1
    40013a2c:	fd0d3021 	str	d1, [x1, #6752]
           4.0*ue[k+1][m] +       ue[k+2][m]);
    40013a30:	fd404c01 	ldr	d1, [x0, #152]
    40013a34:	1e612800 	fadd	d0, d0, d1
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    40013a38:	fd5a6421 	ldr	d1, [x1, #13512]
    40013a3c:	1e630800 	fmul	d0, d0, d3
    40013a40:	1e603820 	fsub	d0, d1, d0
    40013a44:	fd1a6420 	str	d0, [x1, #13512]
      for (m = 0; m < 5; m++) {
    40013a48:	54fffcc1 	b.ne	400139e0 <exact_rhs+0xe90>  // b.any
      for (k = 3; k <= grid_points[2]-4; k++) {
    40013a4c:	51001041 	sub	w1, w2, #0x4
    40013a50:	92800ee0 	mov	x0, #0xffffffffffffff88    	// #-120
    40013a54:	52800067 	mov	w7, #0x3                   	// #3
    40013a58:	9280150b 	mov	x11, #0xffffffffffffff57    	// #-169
            (ue[k-2][m] - 4.0*ue[k-1][m] +
    40013a5c:	928009ec 	mov	x12, #0xffffffffffffffb0    	// #-80
    40013a60:	928004ed 	mov	x13, #0xffffffffffffffd8    	// #-40
             6.0*ue[k][m] - 4.0*ue[k+1][m] + ue[k+2][m]);
    40013a64:	d280050e 	mov	x14, #0x28                  	// #40
    40013a68:	d2800a0f 	mov	x15, #0x50                  	// #80
      for (k = 3; k <= grid_points[2]-4; k++) {
    40013a6c:	6b07003f 	cmp	w1, w7
    40013a70:	54001dea 	b.ge	40013e2c <exact_rhs+0x12dc>  // b.tcont
    40013a74:	52800508 	mov	w8, #0x28                  	// #40
    40013a78:	93407c6a 	sxtw	x10, w3
    40013a7c:	52834d06 	mov	w6, #0x1a68                	// #6760
    40013a80:	92834ce7 	mov	x7, #0xffffffffffffe598    	// #-6760
    40013a84:	9b28542c 	smaddl	x12, w1, w8, x21
    40013a88:	93407c21 	sxtw	x1, w1
    40013a8c:	928004e9 	mov	x9, #0xffffffffffffffd8    	// #-40
    40013a90:	9b265c60 	smaddl	x0, w3, w6, x23
    40013a94:	9b077d4a 	mul	x10, x10, x7
    40013a98:	51000c47 	sub	w7, w2, #0x3
    40013a9c:	51001442 	sub	w2, w2, #0x5
    40013aa0:	9b097c21 	mul	x1, x1, x9
    40013aa4:	8b000360 	add	x0, x27, x0
    40013aa8:	9b287c63 	smull	x3, w3, w8
    40013aac:	9b267ce6 	smull	x6, w7, w6
    40013ab0:	9b287c42 	smull	x2, w2, w8
    40013ab4:	9b287ce7 	smull	x7, w7, w8
      for (m = 0; m < 5; m++) {
    40013ab8:	52800008 	mov	w8, #0x0                   	// #0
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    40013abc:	8b0c0029 	add	x9, x1, x12
          (ue[k-2][m] - 4.0*ue[k-1][m] +
    40013ac0:	fc408581 	ldr	d1, [x12], #8
    40013ac4:	8b0a000b 	add	x11, x0, x10
      for (m = 0; m < 5; m++) {
    40013ac8:	11000508 	add	w8, w8, #0x1
    40013acc:	7100151f 	cmp	w8, #0x5
          (ue[k-2][m] - 4.0*ue[k-1][m] +
    40013ad0:	1e620829 	fmul	d9, d1, d2
           6.0*ue[k][m] - 4.0*ue[k+1][m]);
    40013ad4:	fc676927 	ldr	d7, [x9, x7]
          (ue[k-2][m] - 4.0*ue[k-1][m] +
    40013ad8:	fc626920 	ldr	d0, [x9, x2]
           6.0*ue[k][m] - 4.0*ue[k+1][m]);
    40013adc:	fc636924 	ldr	d4, [x9, x3]
          (ue[k-2][m] - 4.0*ue[k-1][m] +
    40013ae0:	1e693800 	fsub	d0, d0, d9
           6.0*ue[k][m] - 4.0*ue[k+1][m]);
    40013ae4:	1e6508e9 	fmul	d9, d7, d5
          (ue[k-2][m] - 4.0*ue[k-1][m] + 5.0*ue[k][m]);
    40013ae8:	1e6208e7 	fmul	d7, d7, d2
          (ue[k-2][m] - 4.0*ue[k-1][m] +
    40013aec:	1e692800 	fadd	d0, d0, d9
           6.0*ue[k][m] - 4.0*ue[k+1][m]);
    40013af0:	1e620889 	fmul	d9, d4, d2
          (ue[k-2][m] - 4.0*ue[k-1][m] + 5.0*ue[k][m]);
    40013af4:	1e673821 	fsub	d1, d1, d7
    40013af8:	1e660884 	fmul	d4, d4, d6
           6.0*ue[k][m] - 4.0*ue[k+1][m]);
    40013afc:	1e693800 	fsub	d0, d0, d9
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    40013b00:	fc666969 	ldr	d9, [x11, x6]
          (ue[k-2][m] - 4.0*ue[k-1][m] + 5.0*ue[k][m]);
    40013b04:	1e642821 	fadd	d1, d1, d4
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    40013b08:	1e630800 	fmul	d0, d0, d3
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    40013b0c:	1e630821 	fmul	d1, d1, d3
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    40013b10:	1e603920 	fsub	d0, d9, d0
    40013b14:	fc266960 	str	d0, [x11, x6]
        forcing[k][j][i][m] = forcing[k][j][i][m] - dssp *
    40013b18:	fd400000 	ldr	d0, [x0]
    40013b1c:	1e613801 	fsub	d1, d0, d1
    40013b20:	fc008401 	str	d1, [x0], #8
      for (m = 0; m < 5; m++) {
    40013b24:	54fffcc1 	b.ne	40013abc <exact_rhs+0xf6c>  // b.any
    for (i = 1; i <= grid_points[0]-2; i++) {
    40013b28:	1100075a 	add	w26, w26, #0x1
    40013b2c:	9100a2f7 	add	x23, x23, #0x28
    40013b30:	9100a339 	add	x25, x25, #0x28
    40013b34:	17ffff65 	b	400138c8 <exact_rhs+0xd78>
        zeta = (double)(k) * dnzm1;
    40013b38:	1e620060 	scvtf	d0, w3
    40013b3c:	b00000c2 	adrp	x2, 4002c000 <z_idle_threads>
    40013b40:	fd45a842 	ldr	d2, [x2, #2896]
        exact_solution(xi, eta, zeta, dtemp);
    40013b44:	1e604101 	fmov	d1, d8
    40013b48:	a90787e3 	stp	x3, x1, [sp, #120]
    40013b4c:	1e620802 	fmul	d2, d0, d2
    40013b50:	1e604120 	fmov	d0, d9
    40013b54:	940000f1 	bl	40013f18 <exact_solution>
          ue[k][m] = dtemp[m];
    40013b58:	6d499fe0 	ldp	d0, d7, [sp, #152]
        dtpp = 1.0/dtemp[0];
    40013b5c:	1e6e1004 	fmov	d4, #1.000000000000000000e+00
    40013b60:	a94787e3 	ldp	x3, x1, [sp, #120]
    40013b64:	b00000c0 	adrp	x0, 4002c000 <z_idle_threads>
    40013b68:	912b6005 	add	x5, x0, #0xad8
    40013b6c:	90000180 	adrp	x0, 40043000 <lhs+0x1c50>
    40013b70:	91314006 	add	x6, x0, #0xc50
    40013b74:	910263e0 	add	x0, sp, #0x98
    40013b78:	1e601884 	fdiv	d4, d4, d0
          ue[k][m] = dtemp[m];
    40013b7c:	fd405fe1 	ldr	d1, [sp, #184]
    40013b80:	6d4a97e6 	ldp	d6, d5, [sp, #168]
        dtpp = 1.0/dtemp[0];
    40013b84:	d2800022 	mov	x2, #0x1                   	// #1
    40013b88:	b00000c4 	adrp	x4, 4002c000 <z_idle_threads>
          ue[k][m] = dtemp[m];
    40013b8c:	6d001ec0 	stp	d0, d7, [x22]
    40013b90:	6d0116c6 	stp	d6, d5, [x22, #16]
    40013b94:	fd0012c1 	str	d1, [x22, #32]
          buf[k][m] = dtpp * dtemp[m];
    40013b98:	fc627803 	ldr	d3, [x0, x2, lsl #3]
    40013b9c:	1e640863 	fmul	d3, d3, d4
    40013ba0:	fc227823 	str	d3, [x1, x2, lsl #3]
        for (m = 1; m < 5; m++) {
    40013ba4:	91000442 	add	x2, x2, #0x1
    40013ba8:	f100145f 	cmp	x2, #0x5
    40013bac:	54ffff61 	b.ne	40013b98 <exact_rhs+0x1048>  // b.any
        buf[k][0] = cuf[k] + buf[k][1] * buf[k][1] + buf[k][2] * buf[k][2];
    40013bb0:	6d408821 	ldp	d1, d2, [x1, #8]
        cuf[k]    = buf[k][3] * buf[k][3];
    40013bb4:	d37df062 	lsl	x2, x3, #3
    40013bb8:	fd400c20 	ldr	d0, [x1, #24]
    40013bbc:	91000463 	add	x3, x3, #0x1
    40013bc0:	9100a2d6 	add	x22, x22, #0x28
        buf[k][0] = cuf[k] + buf[k][1] * buf[k][1] + buf[k][2] * buf[k][2];
    40013bc4:	1e610823 	fmul	d3, d1, d1
        q[k] = 0.5*(buf[k][1]*ue[k][1] + buf[k][2]*ue[k][2] +
    40013bc8:	1e670821 	fmul	d1, d1, d7
        cuf[k]    = buf[k][3] * buf[k][3];
    40013bcc:	1e600804 	fmul	d4, d0, d0
                    buf[k][3]*ue[k][3]);
    40013bd0:	1e650800 	fmul	d0, d0, d5
        buf[k][0] = cuf[k] + buf[k][1] * buf[k][1] + buf[k][2] * buf[k][2];
    40013bd4:	1e642863 	fadd	d3, d3, d4
        cuf[k]    = buf[k][3] * buf[k][3];
    40013bd8:	fc256844 	str	d4, [x2, x5]
        buf[k][0] = cuf[k] + buf[k][1] * buf[k][1] + buf[k][2] * buf[k][2];
    40013bdc:	1e620844 	fmul	d4, d2, d2
        q[k] = 0.5*(buf[k][1]*ue[k][1] + buf[k][2]*ue[k][2] +
    40013be0:	1e660842 	fmul	d2, d2, d6
    40013be4:	1e622821 	fadd	d1, d1, d2
        buf[k][0] = cuf[k] + buf[k][1] * buf[k][1] + buf[k][2] * buf[k][2];
    40013be8:	1e642863 	fadd	d3, d3, d4
        q[k] = 0.5*(buf[k][1]*ue[k][1] + buf[k][2]*ue[k][2] +
    40013bec:	1e602821 	fadd	d1, d1, d0
    40013bf0:	1e6c1000 	fmov	d0, #5.000000000000000000e-01
        buf[k][0] = cuf[k] + buf[k][1] * buf[k][1] + buf[k][2] * buf[k][2];
    40013bf4:	fc028423 	str	d3, [x1], #40
        q[k] = 0.5*(buf[k][1]*ue[k][1] + buf[k][2]*ue[k][2] +
    40013bf8:	1e600821 	fmul	d1, d1, d0
    40013bfc:	fc266841 	str	d1, [x2, x6]
      for (k = 0; k <= grid_points[2]-1; k++) {
    40013c00:	17ffff42 	b	40013908 <exact_rhs+0xdb8>
          dz1tz1*(ue[kp1][0]-2.0*ue[k][0]+ue[km1][0]);
    40013c04:	fd400000 	ldr	d0, [x0]
        kp1 = k+1;
    40013c08:	11000508 	add	w8, w8, #0x1
          tz2*( ue[kp1][3]-ue[km1][3] )+
    40013c0c:	fc5f001b 	ldur	d27, [x0, #-16]
    40013c10:	fd402018 	ldr	d24, [x0, #64]
          dz1tz1*(ue[kp1][0]-2.0*ue[k][0]+ue[km1][0]);
    40013c14:	1e602809 	fadd	d9, d0, d0
    40013c18:	fd401400 	ldr	d0, [x0, #40]
            ue[kp1][1]*buf[kp1][3]-ue[km1][1]*buf[km1][3])+
    40013c1c:	fc5e001d 	ldur	d29, [x0, #-32]
    40013c20:	fc5f0279 	ldur	d25, [x19, #-16]
    40013c24:	fd40227a 	ldr	d26, [x19, #64]
          dz1tz1*(ue[kp1][0]-2.0*ue[k][0]+ue[km1][0]);
    40013c28:	1e693800 	fsub	d0, d0, d9
    40013c2c:	fc5d8009 	ldur	d9, [x0, #-40]
            (ue[kp1][3]*buf[kp1][3]+c2*(ue[kp1][4]-q[kp1]))-
    40013c30:	fd4008ff 	ldr	d31, [x7, #16]
            (ue[km1][3]*buf[km1][3]+c2*(ue[km1][4]-q[km1])))+
    40013c34:	fc4084fe 	ldr	d30, [x7], #8
          dz1tz1*(ue[kp1][0]-2.0*ue[k][0]+ue[km1][0]);
    40013c38:	1e692800 	fadd	d0, d0, d9
          tz2*( ue[kp1][3]-ue[km1][3] )+
    40013c3c:	1e7b3b09 	fsub	d9, d24, d27
    40013c40:	1e610937 	fmul	d23, d9, d1
        forcing[k][j][i][0] = forcing[k][j][i][0] -
    40013c44:	fd400029 	ldr	d9, [x1]
          dz1tz1*(ue[kp1][0]-2.0*ue[k][0]+ue[km1][0]);
    40013c48:	1e650800 	fmul	d0, d0, d5
        forcing[k][j][i][0] = forcing[k][j][i][0] -
    40013c4c:	1e773929 	fsub	d9, d9, d23
            ue[kp1][1]*buf[kp1][3]-ue[km1][1]*buf[km1][3])+
    40013c50:	fd401817 	ldr	d23, [x0, #48]
    40013c54:	1e7a0afc 	fmul	d28, d23, d26
          tz2*( ue[kp1][3]-ue[km1][3] )+
    40013c58:	1e692800 	fadd	d0, d0, d9
        forcing[k][j][i][0] = forcing[k][j][i][0] -
    40013c5c:	fd000020 	str	d0, [x1]
          zzcon2*(buf[kp1][1]-2.0*buf[k][1]+buf[km1][1])+
    40013c60:	fd400660 	ldr	d0, [x19, #8]
    40013c64:	1e602809 	fadd	d9, d0, d0
    40013c68:	fd401a60 	ldr	d0, [x19, #48]
    40013c6c:	1e693800 	fsub	d0, d0, d9
    40013c70:	fc5e0269 	ldur	d9, [x19, #-32]
    40013c74:	1e692800 	fadd	d0, d0, d9
            ue[kp1][1]*buf[kp1][3]-ue[km1][1]*buf[km1][3])+
    40013c78:	1e790ba9 	fmul	d9, d29, d25
    40013c7c:	1e693b9c 	fsub	d28, d28, d9
        forcing[k][j][i][1] = forcing[k][j][i][1] - tz2 * (
    40013c80:	fd400429 	ldr	d9, [x1, #8]
          zzcon2*(buf[kp1][1]-2.0*buf[k][1]+buf[km1][1])+
    40013c84:	1e630800 	fmul	d0, d0, d3
        forcing[k][j][i][1] = forcing[k][j][i][1] - tz2 * (
    40013c88:	1e610b9c 	fmul	d28, d28, d1
    40013c8c:	1e7c393c 	fsub	d28, d9, d28
          dz2tz1*( ue[kp1][1]-2.0* ue[k][1]+ ue[km1][1]);
    40013c90:	fd400409 	ldr	d9, [x0, #8]
    40013c94:	1e692929 	fadd	d9, d9, d9
            ue[kp1][1]*buf[kp1][3]-ue[km1][1]*buf[km1][3])+
    40013c98:	1e7c2800 	fadd	d0, d0, d28
          dz2tz1*( ue[kp1][1]-2.0* ue[k][1]+ ue[km1][1]);
    40013c9c:	1e693af7 	fsub	d23, d23, d9
    40013ca0:	1e7d2af7 	fadd	d23, d23, d29
            ue[kp1][2]*buf[kp1][3]-ue[km1][2]*buf[km1][3])+
    40013ca4:	fc5e801d 	ldur	d29, [x0, #-24]
          dz2tz1*( ue[kp1][1]-2.0* ue[k][1]+ ue[km1][1]);
    40013ca8:	1e660af7 	fmul	d23, d23, d6
          zzcon2*(buf[kp1][1]-2.0*buf[k][1]+buf[km1][1])+
    40013cac:	1e772800 	fadd	d0, d0, d23
            ue[kp1][2]*buf[kp1][3]-ue[km1][2]*buf[km1][3])+
    40013cb0:	fd401c17 	ldr	d23, [x0, #56]
    40013cb4:	1e770b5c 	fmul	d28, d26, d23
        forcing[k][j][i][1] = forcing[k][j][i][1] - tz2 * (
    40013cb8:	fd000420 	str	d0, [x1, #8]
          zzcon2*(buf[kp1][2]-2.0*buf[k][2]+buf[km1][2])+
    40013cbc:	fd400a60 	ldr	d0, [x19, #16]
    40013cc0:	1e602809 	fadd	d9, d0, d0
    40013cc4:	fd401e60 	ldr	d0, [x19, #56]
    40013cc8:	1e693800 	fsub	d0, d0, d9
    40013ccc:	fc5e8269 	ldur	d9, [x19, #-24]
    40013cd0:	1e692800 	fadd	d0, d0, d9
            ue[kp1][2]*buf[kp1][3]-ue[km1][2]*buf[km1][3])+
    40013cd4:	1e7d0b29 	fmul	d9, d25, d29
    40013cd8:	1e693b9c 	fsub	d28, d28, d9
        forcing[k][j][i][2] = forcing[k][j][i][2] - tz2 * (
    40013cdc:	fd400829 	ldr	d9, [x1, #16]
          zzcon2*(buf[kp1][2]-2.0*buf[k][2]+buf[km1][2])+
    40013ce0:	1e630800 	fmul	d0, d0, d3
        forcing[k][j][i][2] = forcing[k][j][i][2] - tz2 * (
    40013ce4:	1e610b9c 	fmul	d28, d28, d1
    40013ce8:	1e7c393c 	fsub	d28, d9, d28
          dz3tz1*(ue[kp1][2]-2.0*ue[k][2]+ue[km1][2]);
    40013cec:	fd400809 	ldr	d9, [x0, #16]
    40013cf0:	1e692929 	fadd	d9, d9, d9
            ue[kp1][2]*buf[kp1][3]-ue[km1][2]*buf[km1][3])+
    40013cf4:	1e7c2800 	fadd	d0, d0, d28
            (ue[kp1][3]*buf[kp1][3]+c2*(ue[kp1][4]-q[kp1]))-
    40013cf8:	fd40241c 	ldr	d28, [x0, #72]
          dz3tz1*(ue[kp1][2]-2.0*ue[k][2]+ue[km1][2]);
    40013cfc:	1e693af7 	fsub	d23, d23, d9
            (ue[kp1][3]*buf[kp1][3]+c2*(ue[kp1][4]-q[kp1]))-
    40013d00:	1e7a0b09 	fmul	d9, d24, d26
          dz3tz1*(ue[kp1][2]-2.0*ue[k][2]+ue[km1][2]);
    40013d04:	1e7d2af7 	fadd	d23, d23, d29
            (ue[km1][3]*buf[km1][3]+c2*(ue[km1][4]-q[km1])))+
    40013d08:	fc5f801d 	ldur	d29, [x0, #-8]
          dz3tz1*(ue[kp1][2]-2.0*ue[k][2]+ue[km1][2]);
    40013d0c:	1e670af7 	fmul	d23, d23, d7
          zzcon2*(buf[kp1][2]-2.0*buf[k][2]+buf[km1][2])+
    40013d10:	1e772800 	fadd	d0, d0, d23
            (ue[km1][3]*buf[km1][3]+c2*(ue[km1][4]-q[km1])))+
    40013d14:	1e7e3bb7 	fsub	d23, d29, d30
            buf[km1][3]*(c1*ue[km1][4]-c2*q[km1]))+
    40013d18:	1e7e085e 	fmul	d30, d2, d30
        forcing[k][j][i][2] = forcing[k][j][i][2] - tz2 * (
    40013d1c:	fd000820 	str	d0, [x1, #16]
            (ue[kp1][3]*buf[kp1][3]+c2*(ue[kp1][4]-q[kp1]))-
    40013d20:	1e7f3b80 	fsub	d0, d28, d31
            (ue[km1][3]*buf[km1][3]+c2*(ue[km1][4]-q[km1])))+
    40013d24:	1e620af7 	fmul	d23, d23, d2
            buf[kp1][3]*(c1*ue[kp1][4]-c2*q[kp1])-
    40013d28:	1e620bff 	fmul	d31, d31, d2
            (ue[kp1][3]*buf[kp1][3]+c2*(ue[kp1][4]-q[kp1]))-
    40013d2c:	1e620800 	fmul	d0, d0, d2
    40013d30:	1e692800 	fadd	d0, d0, d9
            (ue[km1][3]*buf[km1][3]+c2*(ue[km1][4]-q[km1])))+
    40013d34:	1e790b69 	fmul	d9, d27, d25
    40013d38:	1e692af7 	fadd	d23, d23, d9
            (ue[kp1][3]*buf[kp1][3]+c2*(ue[kp1][4]-q[kp1]))-
    40013d3c:	1e773800 	fsub	d0, d0, d23
        forcing[k][j][i][3] = forcing[k][j][i][3] - tz2 * (
    40013d40:	fd400c37 	ldr	d23, [x1, #24]
    40013d44:	1e610800 	fmul	d0, d0, d1
    40013d48:	1e603ae0 	fsub	d0, d23, d0
          zzcon1*(buf[kp1][3]-2.0*buf[k][3]+buf[km1][3])+
    40013d4c:	fd400e77 	ldr	d23, [x19, #24]
    40013d50:	1e772af7 	fadd	d23, d23, d23
    40013d54:	1e773b57 	fsub	d23, d26, d23
    40013d58:	1e792af7 	fadd	d23, d23, d25
    40013d5c:	1e700af7 	fmul	d23, d23, d16
            (ue[km1][3]*buf[km1][3]+c2*(ue[km1][4]-q[km1])))+
    40013d60:	1e772817 	fadd	d23, d0, d23
          dz4tz1*( ue[kp1][3]-2.0*ue[k][3] +ue[km1][3]);
    40013d64:	fd400c00 	ldr	d0, [x0, #24]
    40013d68:	1e602800 	fadd	d0, d0, d0
    40013d6c:	1e603b18 	fsub	d24, d24, d0
            buf[kp1][3]*(c1*ue[kp1][4]-c2*q[kp1])-
    40013d70:	1e640b80 	fmul	d0, d28, d4
          dz4tz1*( ue[kp1][3]-2.0*ue[k][3] +ue[km1][3]);
    40013d74:	1e7b2b1b 	fadd	d27, d24, d27
            buf[kp1][3]*(c1*ue[kp1][4]-c2*q[kp1])-
    40013d78:	1e7f3800 	fsub	d0, d0, d31
          dz4tz1*( ue[kp1][3]-2.0*ue[k][3] +ue[km1][3]);
    40013d7c:	1e710b7b 	fmul	d27, d27, d17
            buf[kp1][3]*(c1*ue[kp1][4]-c2*q[kp1])-
    40013d80:	1e7a081a 	fmul	d26, d0, d26
            buf[km1][3]*(c1*ue[km1][4]-c2*q[km1]))+
    40013d84:	1e640ba0 	fmul	d0, d29, d4
          zzcon1*(buf[kp1][3]-2.0*buf[k][3]+buf[km1][3])+
    40013d88:	1e7b2afb 	fadd	d27, d23, d27
            buf[km1][3]*(c1*ue[km1][4]-c2*q[km1]))+
    40013d8c:	1e7e3800 	fsub	d0, d0, d30
        forcing[k][j][i][3] = forcing[k][j][i][3] - tz2 * (
    40013d90:	fd000c3b 	str	d27, [x1, #24]
          0.5*zzcon3*(buf[kp1][0]-2.0*buf[k][0]
    40013d94:	fd400277 	ldr	d23, [x19]
            buf[km1][3]*(c1*ue[km1][4]-c2*q[km1]))+
    40013d98:	1e790819 	fmul	d25, d0, d25
          0.5*zzcon3*(buf[kp1][0]-2.0*buf[k][0]
    40013d9c:	1e772ae9 	fadd	d9, d23, d23
    40013da0:	fd401677 	ldr	d23, [x19, #40]
            buf[kp1][3]*(c1*ue[kp1][4]-c2*q[kp1])-
    40013da4:	1e793b40 	fsub	d0, d26, d25
          0.5*zzcon3*(buf[kp1][0]-2.0*buf[k][0]
    40013da8:	1e693af7 	fsub	d23, d23, d9
              +buf[km1][0])+
    40013dac:	fc5d8269 	ldur	d9, [x19, #-40]
        forcing[k][j][i][4] = forcing[k][j][i][4] - tz2 * (
    40013db0:	1e610819 	fmul	d25, d0, d1
    40013db4:	fd401020 	ldr	d0, [x1, #32]
              +buf[km1][0])+
    40013db8:	1e692af7 	fadd	d23, d23, d9
          0.5*zzcon3*(buf[kp1][0]-2.0*buf[k][0]
    40013dbc:	1e760a49 	fmul	d9, d18, d22
        forcing[k][j][i][4] = forcing[k][j][i][4] - tz2 * (
    40013dc0:	1e793800 	fsub	d0, d0, d25
          0.5*zzcon3*(buf[kp1][0]-2.0*buf[k][0]
    40013dc4:	1e690af7 	fmul	d23, d23, d9
            buf[km1][3]*(c1*ue[km1][4]-c2*q[km1]))+
    40013dc8:	1e772800 	fadd	d0, d0, d23
          zzcon4*(cuf[kp1]-2.0*cuf[k]+cuf[km1])+
    40013dcc:	fd4000d7 	ldr	d23, [x6]
    40013dd0:	1e772ae9 	fadd	d9, d23, d23
    40013dd4:	fd4004d7 	ldr	d23, [x6, #8]
    40013dd8:	1e693af7 	fsub	d23, d23, d9
    40013ddc:	fc5f80c9 	ldur	d9, [x6, #-8]
    40013de0:	1e692af7 	fadd	d23, d23, d9
    40013de4:	1e730af7 	fmul	d23, d23, d19
              +buf[km1][0])+
    40013de8:	1e772800 	fadd	d0, d0, d23
          zzcon5*(buf[kp1][4]-2.0*buf[k][4]+buf[km1][4])+
    40013dec:	fd401277 	ldr	d23, [x19, #32]
    40013df0:	1e772ae9 	fadd	d9, d23, d23
    40013df4:	fd402677 	ldr	d23, [x19, #72]
    40013df8:	1e693af7 	fsub	d23, d23, d9
    40013dfc:	fc5f8269 	ldur	d9, [x19, #-8]
    40013e00:	1e692af7 	fadd	d23, d23, d9
          dz5tz1*( ue[kp1][4]-2.0*ue[k][4]+ ue[km1][4]);
    40013e04:	fd401009 	ldr	d9, [x0, #32]
    40013e08:	1e692929 	fadd	d9, d9, d9
          zzcon5*(buf[kp1][4]-2.0*buf[k][4]+buf[km1][4])+
    40013e0c:	1e740af7 	fmul	d23, d23, d20
          dz5tz1*( ue[kp1][4]-2.0*ue[k][4]+ ue[km1][4]);
    40013e10:	1e693b9c 	fsub	d28, d28, d9
          zzcon4*(cuf[kp1]-2.0*cuf[k]+cuf[km1])+
    40013e14:	1e772800 	fadd	d0, d0, d23
          dz5tz1*( ue[kp1][4]-2.0*ue[k][4]+ ue[km1][4]);
    40013e18:	1e7d2b9c 	fadd	d28, d28, d29
    40013e1c:	1e750b9c 	fmul	d28, d28, d21
          zzcon5*(buf[kp1][4]-2.0*buf[k][4]+buf[km1][4])+
    40013e20:	1e7c2800 	fadd	d0, d0, d28
        forcing[k][j][i][4] = forcing[k][j][i][4] - tz2 * (
    40013e24:	fd001020 	str	d0, [x1, #32]
      for (k = 1; k <= grid_points[2]-2; k++) {
    40013e28:	17fffedf 	b	400139a4 <exact_rhs+0xe54>
    40013e2c:	9b0b6409 	madd	x9, x0, x11, x25
    40013e30:	cb0002aa 	sub	x10, x21, x0
            (ue[k-2][m] - 4.0*ue[k-1][m] +
    40013e34:	cb000192 	sub	x18, x12, x0
    40013e38:	cb0001b3 	sub	x19, x13, x0
             6.0*ue[k][m] - 4.0*ue[k+1][m] + ue[k+2][m]);
    40013e3c:	cb0001d1 	sub	x17, x14, x0
    40013e40:	cb0001f0 	sub	x16, x15, x0
        for (m = 0; m < 5; m++) {
    40013e44:	52800008 	mov	w8, #0x0                   	// #0
          forcing[k][j][i][m] = forcing[k][j][i][m] - dssp*
    40013e48:	8b0a0006 	add	x6, x0, x10
        for (m = 0; m < 5; m++) {
    40013e4c:	11000508 	add	w8, w8, #0x1
    40013e50:	7100151f 	cmp	w8, #0x5
            (ue[k-2][m] - 4.0*ue[k-1][m] +
    40013e54:	fc7368c0 	ldr	d0, [x6, x19]
    40013e58:	1e620801 	fmul	d1, d0, d2
    40013e5c:	fc7268c0 	ldr	d0, [x6, x18]
    40013e60:	1e613800 	fsub	d0, d0, d1
             6.0*ue[k][m] - 4.0*ue[k+1][m] + ue[k+2][m]);
    40013e64:	fc408541 	ldr	d1, [x10], #8
    40013e68:	1e650821 	fmul	d1, d1, d5
            (ue[k-2][m] - 4.0*ue[k-1][m] +
    40013e6c:	1e612800 	fadd	d0, d0, d1
             6.0*ue[k][m] - 4.0*ue[k+1][m] + ue[k+2][m]);
    40013e70:	fc7168c1 	ldr	d1, [x6, x17]
    40013e74:	1e620821 	fmul	d1, d1, d2
    40013e78:	1e613800 	fsub	d0, d0, d1
    40013e7c:	fc7068c1 	ldr	d1, [x6, x16]
    40013e80:	1e612800 	fadd	d0, d0, d1
          forcing[k][j][i][m] = forcing[k][j][i][m] - dssp*
    40013e84:	fd400121 	ldr	d1, [x9]
    40013e88:	1e630800 	fmul	d0, d0, d3
    40013e8c:	1e603820 	fsub	d0, d1, d0
    40013e90:	fc008520 	str	d0, [x9], #8
        for (m = 0; m < 5; m++) {
    40013e94:	54fffda1 	b.ne	40013e48 <exact_rhs+0x12f8>  // b.any
             6.0*ue[k][m] - 4.0*ue[k+1][m] + ue[k+2][m]);
    40013e98:	110004e7 	add	w7, w7, #0x1
      for (k = 3; k <= grid_points[2]-4; k++) {
    40013e9c:	d100a000 	sub	x0, x0, #0x28
    40013ea0:	17fffef3 	b	40013a6c <exact_rhs+0xf1c>
    40013ea4:	aa0103ea 	mov	x10, x1
        for (m = 0; m < 5; m++) {
    40013ea8:	52800009 	mov	w9, #0x0                   	// #0
          forcing[k][j][i][m] = -1.0 * forcing[k][j][i][m];
    40013eac:	fd400140 	ldr	d0, [x10]
        for (m = 0; m < 5; m++) {
    40013eb0:	11000529 	add	w9, w9, #0x1
    40013eb4:	7100153f 	cmp	w9, #0x5
          forcing[k][j][i][m] = -1.0 * forcing[k][j][i][m];
    40013eb8:	1e614000 	fneg	d0, d0
    40013ebc:	fc008540 	str	d0, [x10], #8
        for (m = 0; m < 5; m++) {
    40013ec0:	54ffff61 	b.ne	40013eac <exact_rhs+0x135c>  // b.any
      for (i = 1; i <= grid_points[0]-2; i++) {
    40013ec4:	11000508 	add	w8, w8, #0x1
    40013ec8:	9100a021 	add	x1, x1, #0x28
    40013ecc:	6b08009f 	cmp	w4, w8
    40013ed0:	54fffeaa 	b.ge	40013ea4 <exact_rhs+0x1354>  // b.tcont
    for (j = 1; j <= grid_points[1]-2; j++) {
    40013ed4:	11000442 	add	w2, w2, #0x1
    40013ed8:	6b0200bf 	cmp	w5, w2
    40013edc:	540000ab 	b.lt	40013ef0 <exact_rhs+0x13a0>  // b.tstop
    40013ee0:	9b2c0041 	smaddl	x1, w2, w12, x0
      for (i = 1; i <= grid_points[0]-2; i++) {
    40013ee4:	52800028 	mov	w8, #0x1                   	// #1
    40013ee8:	8b070021 	add	x1, x1, x7
    40013eec:	17fffff8 	b	40013ecc <exact_rhs+0x137c>
  for (k = 1; k <= grid_points[2]-2; k++) {
    40013ef0:	11000463 	add	w3, w3, #0x1
    40013ef4:	17fffb6e 	b	40012cac <exact_rhs+0x15c>
        }
      }
    }
  }
}
    40013ef8:	a94153f3 	ldp	x19, x20, [sp, #16]
    40013efc:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40013f00:	a94363f7 	ldp	x23, x24, [sp, #48]
    40013f04:	a9446bf9 	ldp	x25, x26, [sp, #64]
    40013f08:	a94573fb 	ldp	x27, x28, [sp, #80]
    40013f0c:	6d4627e8 	ldp	d8, d9, [sp, #96]
    40013f10:	a8cc7bfd 	ldp	x29, x30, [sp], #192
    40013f14:	d65f03c0 	ret

0000000040013f18 <exact_solution>:
//---------------------------------------------------------------------
void exact_solution(double xi, double eta, double zeta, double dtemp[5])
{
  int m;

  for (m = 0; m < 5; m++) {
    40013f18:	b00000c1 	adrp	x1, 4002c000 <z_idle_threads>
    40013f1c:	91226021 	add	x1, x1, #0x898
{
    40013f20:	d2800002 	mov	x2, #0x0                   	// #0
    dtemp[m] =  ce[m][0] +
      xi*(ce[m][1] + xi*(ce[m][4] + xi*(ce[m][7] + xi*ce[m][10]))) +
    40013f24:	fd402823 	ldr	d3, [x1, #80]
      eta*(ce[m][2] + eta*(ce[m][5] + eta*(ce[m][8] + eta*ce[m][11])))+
    40013f28:	6d439424 	ldp	d4, d5, [x1, #56]
  for (m = 0; m < 5; m++) {
    40013f2c:	9101a021 	add	x1, x1, #0x68
      xi*(ce[m][1] + xi*(ce[m][4] + xi*(ce[m][7] + xi*ce[m][10]))) +
    40013f30:	1e630803 	fmul	d3, d0, d3
    40013f34:	1e642863 	fadd	d3, d3, d4
    40013f38:	fc5b8024 	ldur	d4, [x1, #-72]
    40013f3c:	1e600863 	fmul	d3, d3, d0
    40013f40:	1e642863 	fadd	d3, d3, d4
    40013f44:	fc5a0024 	ldur	d4, [x1, #-96]
    40013f48:	1e600863 	fmul	d3, d3, d0
    40013f4c:	1e642863 	fadd	d3, d3, d4
    dtemp[m] =  ce[m][0] +
    40013f50:	fc598024 	ldur	d4, [x1, #-104]
      xi*(ce[m][1] + xi*(ce[m][4] + xi*(ce[m][7] + xi*ce[m][10]))) +
    40013f54:	1e600863 	fmul	d3, d3, d0
    dtemp[m] =  ce[m][0] +
    40013f58:	1e642863 	fadd	d3, d3, d4
      eta*(ce[m][2] + eta*(ce[m][5] + eta*(ce[m][8] + eta*ce[m][11])))+
    40013f5c:	fc5f0024 	ldur	d4, [x1, #-16]
    40013f60:	1e640824 	fmul	d4, d1, d4
    40013f64:	1e652884 	fadd	d4, d4, d5
    40013f68:	fc5c0025 	ldur	d5, [x1, #-64]
    40013f6c:	1e610884 	fmul	d4, d4, d1
    40013f70:	1e652884 	fadd	d4, d4, d5
    40013f74:	fc5a8025 	ldur	d5, [x1, #-88]
    40013f78:	1e610884 	fmul	d4, d4, d1
    40013f7c:	1e652884 	fadd	d4, d4, d5
      zeta*(ce[m][3] + zeta*(ce[m][6] + zeta*(ce[m][9] + 
    40013f80:	fc5e0025 	ldur	d5, [x1, #-32]
      eta*(ce[m][2] + eta*(ce[m][5] + eta*(ce[m][8] + eta*ce[m][11])))+
    40013f84:	1e610884 	fmul	d4, d4, d1
      xi*(ce[m][1] + xi*(ce[m][4] + xi*(ce[m][7] + xi*ce[m][10]))) +
    40013f88:	1e642863 	fadd	d3, d3, d4
      zeta*ce[m][12])));
    40013f8c:	fc5f8024 	ldur	d4, [x1, #-8]
    40013f90:	1e640844 	fmul	d4, d2, d4
      zeta*(ce[m][3] + zeta*(ce[m][6] + zeta*(ce[m][9] + 
    40013f94:	1e652884 	fadd	d4, d4, d5
    40013f98:	fc5c8025 	ldur	d5, [x1, #-56]
    40013f9c:	1e620884 	fmul	d4, d4, d2
    40013fa0:	1e652884 	fadd	d4, d4, d5
    40013fa4:	fc5b0025 	ldur	d5, [x1, #-80]
    40013fa8:	1e620884 	fmul	d4, d4, d2
    40013fac:	1e652884 	fadd	d4, d4, d5
    40013fb0:	1e620884 	fmul	d4, d4, d2
      eta*(ce[m][2] + eta*(ce[m][5] + eta*(ce[m][8] + eta*ce[m][11])))+
    40013fb4:	1e642863 	fadd	d3, d3, d4
    dtemp[m] =  ce[m][0] +
    40013fb8:	fc227803 	str	d3, [x0, x2, lsl #3]
  for (m = 0; m < 5; m++) {
    40013fbc:	91000442 	add	x2, x2, #0x1
    40013fc0:	f100145f 	cmp	x2, #0x5
    40013fc4:	54fffb01 	b.ne	40013f24 <exact_solution+0xc>  // b.any
  }
}
    40013fc8:	d65f03c0 	ret

0000000040013fcc <initialize>:
//---------------------------------------------------------------------
// This subroutine initializes the field variable u using 
// tri-linear transfinite interpolation of the boundary values     
//---------------------------------------------------------------------
void initialize()
{
    40013fcc:	a9a67bfd 	stp	x29, x30, [sp, #-416]!
    40013fd0:	90000286 	adrp	x6, 40063000 <square+0x37a8>
    40013fd4:	912060c6 	add	x6, x6, #0x818
    40013fd8:	910003fd 	mov	x29, sp
    40013fdc:	a90153f3 	stp	x19, x20, [sp, #16]
  // Later (in compute_rhs) we compute 1/u for every element. A few of 
  // the corner elements are not used, but it convenient (and faster) 
  // to compute the whole thing with a simple loop. Make sure those 
  // values are nonzero by initializing the whole thing here. 
  //---------------------------------------------------------------------
  for (k = 0; k <= grid_points[2]-1; k++) {
    40013fe0:	90000380 	adrp	x0, 40083000 <ws+0x3a40>
    40013fe4:	912a0013 	add	x19, x0, #0xa80
    for (j = 0; j <= grid_points[1]-1; j++) {
      for (i = 0; i <= grid_points[0]-1; i++) {
    40013fe8:	b94a8003 	ldr	w3, [x0, #2688]
  for (k = 0; k <= grid_points[2]-1; k++) {
    40013fec:	52800002 	mov	w2, #0x0                   	// #0
    40013ff0:	52834d09 	mov	w9, #0x1a68                	// #6760
    40013ff4:	5280410a 	mov	w10, #0x208                 	// #520
    40013ff8:	29409664 	ldp	w4, w5, [x19, #4]
      for (i = 0; i <= grid_points[0]-1; i++) {
    40013ffc:	51000463 	sub	w3, w3, #0x1
        for (m = 0; m < 5; m++) {
          u[k][j][i][m] = 1.0;
    40014000:	1e6e1000 	fmov	d0, #1.000000000000000000e+00
{
    40014004:	a9025bf5 	stp	x21, x22, [sp, #32]
  for (k = 0; k <= grid_points[2]-1; k++) {
    40014008:	510004a5 	sub	w5, w5, #0x1
    for (j = 0; j <= grid_points[1]-1; j++) {
    4001400c:	51000484 	sub	w4, w4, #0x1
{
    40014010:	a90363f7 	stp	x23, x24, [sp, #48]
    40014014:	a9046bf9 	stp	x25, x26, [sp, #64]
    40014018:	f9002bfb 	str	x27, [sp, #80]
    4001401c:	6d0627e8 	stp	d8, d9, [sp, #96]
    40014020:	6d072fea 	stp	d10, d11, [sp, #112]
  for (k = 0; k <= grid_points[2]-1; k++) {
    40014024:	6b0200bf 	cmp	w5, w2
    40014028:	540017eb 	b.lt	40014324 <initialize+0x358>  // b.tstop
    4001402c:	9b297c48 	smull	x8, w2, w9
    for (j = 0; j <= grid_points[1]-1; j++) {
    40014030:	52800001 	mov	w1, #0x0                   	// #0
    40014034:	14000002 	b	4001403c <initialize+0x70>
    40014038:	11000421 	add	w1, w1, #0x1
    4001403c:	6b01009f 	cmp	w4, w1
    40014040:	5400018b 	b.lt	40014070 <initialize+0xa4>  // b.tstop
    40014044:	9b2a2020 	smaddl	x0, w1, w10, x8
      for (i = 0; i <= grid_points[0]-1; i++) {
    40014048:	52800007 	mov	w7, #0x0                   	// #0
    4001404c:	8b060000 	add	x0, x0, x6
    40014050:	6b07007f 	cmp	w3, w7
    40014054:	54ffff2b 	b.lt	40014038 <initialize+0x6c>  // b.tstop
    40014058:	110004e7 	add	w7, w7, #0x1
          u[k][j][i][m] = 1.0;
    4001405c:	6d000000 	stp	d0, d0, [x0]
    40014060:	6d010000 	stp	d0, d0, [x0, #16]
    40014064:	9100a000 	add	x0, x0, #0x28
    40014068:	fc1f8000 	stur	d0, [x0, #-8]
      for (i = 0; i <= grid_points[0]-1; i++) {
    4001406c:	17fffff9 	b	40014050 <initialize+0x84>
  for (k = 0; k <= grid_points[2]-1; k++) {
    40014070:	11000442 	add	w2, w2, #0x1
    40014074:	17ffffec 	b	40014024 <initialize+0x58>

  //---------------------------------------------------------------------
  // first store the "interpolated" values everywhere on the grid    
  //---------------------------------------------------------------------
  for (k = 0; k <= grid_points[2]-1; k++) {
    zeta = (double)(k) * dnzm1;
    40014078:	1e6202a8 	scvtf	d8, w21
    4001407c:	900000c0 	adrp	x0, 4002c000 <z_idle_threads>
    40014080:	fd45a800 	ldr	d0, [x0, #2896]
    40014084:	52834d19 	mov	w25, #0x1a68                	// #6760
    for (j = 0; j <= grid_points[1]-1; j++) {
    40014088:	52800016 	mov	w22, #0x0                   	// #0
      eta = (double)(j) * dnym1;
    4001408c:	900000db 	adrp	x27, 4002c000 <z_idle_threads>
    40014090:	9b397eb9 	smull	x25, w21, w25
    zeta = (double)(k) * dnzm1;
    40014094:	1e600908 	fmul	d8, d8, d0
    for (j = 0; j <= grid_points[1]-1; j++) {
    40014098:	b9400660 	ldr	w0, [x19, #4]
    4001409c:	51000400 	sub	w0, w0, #0x1
    400140a0:	6b16001f 	cmp	w0, w22
    400140a4:	5400096a 	b.ge	400141d0 <initialize+0x204>  // b.tcont
  for (k = 0; k <= grid_points[2]-1; k++) {
    400140a8:	110006b5 	add	w21, w21, #0x1
    400140ac:	b9400a60 	ldr	w0, [x19, #8]
    400140b0:	51000400 	sub	w0, w0, #0x1
    400140b4:	6b15001f 	cmp	w0, w21
    400140b8:	54fffe0a 	b.ge	40014078 <initialize+0xac>  // b.tcont
    400140bc:	f0000277 	adrp	x23, 40063000 <square+0x37a8>
    400140c0:	912062f7 	add	x23, x23, #0x818
  //---------------------------------------------------------------------
  // west face                                                  
  //---------------------------------------------------------------------
  i = 0;
  xi = 0.0;
  for (k = 0; k <= grid_points[2]-1; k++) {
    400140c4:	52800015 	mov	w21, #0x0                   	// #0
    zeta = (double)(k) * dnzm1;
    400140c8:	900000d8 	adrp	x24, 4002c000 <z_idle_threads>
  for (k = 0; k <= grid_points[2]-1; k++) {
    400140cc:	b9400a60 	ldr	w0, [x19, #8]
    400140d0:	51000400 	sub	w0, w0, #0x1
    400140d4:	6b15001f 	cmp	w0, w21
    400140d8:	5400130a 	b.ge	40014338 <initialize+0x36c>  // b.tcont
  }

  //---------------------------------------------------------------------
  // east face                                                      
  //---------------------------------------------------------------------
  i = grid_points[0]-1;
    400140dc:	b9400276 	ldr	w22, [x19]
    400140e0:	52800500 	mov	w0, #0x28                  	// #40
    400140e4:	f0000278 	adrp	x24, 40063000 <square+0x37a8>
    400140e8:	91206318 	add	x24, x24, #0x818
    400140ec:	510006d6 	sub	w22, w22, #0x1
  xi = 1.0;
  for (k = 0; k <= grid_points[2]-1; k++) {
    400140f0:	52800015 	mov	w21, #0x0                   	// #0
    zeta = (double)(k) * dnzm1;
    400140f4:	900000d9 	adrp	x25, 4002c000 <z_idle_threads>
    400140f8:	9b207ed6 	smull	x22, w22, w0
  for (k = 0; k <= grid_points[2]-1; k++) {
    400140fc:	b9400a60 	ldr	w0, [x19, #8]
    40014100:	51000400 	sub	w0, w0, #0x1
    40014104:	6b15001f 	cmp	w0, w21
    40014108:	540015aa 	b.ge	400143bc <initialize+0x3f0>  // b.tcont
    4001410c:	f0000277 	adrp	x23, 40063000 <square+0x37a8>
    40014110:	912062f7 	add	x23, x23, #0x818
  //---------------------------------------------------------------------
  // south face                                                 
  //---------------------------------------------------------------------
  j = 0;
  eta = 0.0;
  for (k = 0; k <= grid_points[2]-1; k++) {
    40014114:	52800015 	mov	w21, #0x0                   	// #0
    zeta = (double)(k) * dnzm1;
    40014118:	900000d8 	adrp	x24, 4002c000 <z_idle_threads>
  for (k = 0; k <= grid_points[2]-1; k++) {
    4001411c:	b9400a60 	ldr	w0, [x19, #8]
    40014120:	51000400 	sub	w0, w0, #0x1
    40014124:	6b15001f 	cmp	w0, w21
    40014128:	540018ea 	b.ge	40014444 <initialize+0x478>  // b.tcont
  }

  //---------------------------------------------------------------------
  // north face                                    
  //---------------------------------------------------------------------
  j = grid_points[1]-1;
    4001412c:	b9400676 	ldr	w22, [x19, #4]
    40014130:	52804100 	mov	w0, #0x208                 	// #520
    40014134:	f0000278 	adrp	x24, 40063000 <square+0x37a8>
    40014138:	91206318 	add	x24, x24, #0x818
    4001413c:	510006d6 	sub	w22, w22, #0x1
  eta = 1.0;
  for (k = 0; k <= grid_points[2]-1; k++) {
    40014140:	52800015 	mov	w21, #0x0                   	// #0
    zeta = (double)(k) * dnzm1;
    40014144:	900000d9 	adrp	x25, 4002c000 <z_idle_threads>
    40014148:	9b207ed6 	smull	x22, w22, w0
  for (k = 0; k <= grid_points[2]-1; k++) {
    4001414c:	b9400a60 	ldr	w0, [x19, #8]
    40014150:	51000400 	sub	w0, w0, #0x1
    40014154:	6b15001f 	cmp	w0, w21
    40014158:	54001b8a 	b.ge	400144c8 <initialize+0x4fc>  // b.tcont
    4001415c:	f0000277 	adrp	x23, 40063000 <square+0x37a8>
    40014160:	912062f7 	add	x23, x23, #0x818
  //---------------------------------------------------------------------
  // bottom face                                       
  //---------------------------------------------------------------------
  k = 0;
  zeta = 0.0;
  for (j = 0; j <= grid_points[1]-1; j++) {
    40014164:	52800015 	mov	w21, #0x0                   	// #0
    eta = (double)(j) * dnym1;
    40014168:	900000d8 	adrp	x24, 4002c000 <z_idle_threads>
  for (j = 0; j <= grid_points[1]-1; j++) {
    4001416c:	b9400660 	ldr	w0, [x19, #4]
    40014170:	51000400 	sub	w0, w0, #0x1
    40014174:	6b15001f 	cmp	w0, w21
    40014178:	54001eca 	b.ge	40014550 <initialize+0x584>  // b.tcont
  }

  //---------------------------------------------------------------------
  // top face     
  //---------------------------------------------------------------------
  k = grid_points[2]-1;
    4001417c:	b9400a76 	ldr	w22, [x19, #8]
    40014180:	52834d00 	mov	w0, #0x1a68                	// #6760
    40014184:	f0000278 	adrp	x24, 40063000 <square+0x37a8>
    40014188:	91206318 	add	x24, x24, #0x818
    4001418c:	510006d6 	sub	w22, w22, #0x1
  zeta = 1.0;
  for (j = 0; j <= grid_points[1]-1; j++) {
    40014190:	52800015 	mov	w21, #0x0                   	// #0
    eta = (double)(j) * dnym1;
    40014194:	900000d9 	adrp	x25, 4002c000 <z_idle_threads>
    40014198:	9b207ed6 	smull	x22, w22, w0
  for (j = 0; j <= grid_points[1]-1; j++) {
    4001419c:	b9400660 	ldr	w0, [x19, #4]
    400141a0:	51000400 	sub	w0, w0, #0x1
    400141a4:	6b15001f 	cmp	w0, w21
    400141a8:	5400216a 	b.ge	400145d4 <initialize+0x608>  // b.tcont
      for (m = 0; m < 5; m++) {
        u[k][j][i][m] = temp[m];
      }
    }
  }
}
    400141ac:	a94153f3 	ldp	x19, x20, [sp, #16]
    400141b0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    400141b4:	a94363f7 	ldp	x23, x24, [sp, #48]
    400141b8:	a9446bf9 	ldp	x25, x26, [sp, #64]
    400141bc:	f9402bfb 	ldr	x27, [sp, #80]
    400141c0:	6d4627e8 	ldp	d8, d9, [sp, #96]
    400141c4:	6d472fea 	ldp	d10, d11, [sp, #112]
    400141c8:	a8da7bfd 	ldp	x29, x30, [sp], #416
    400141cc:	d65f03c0 	ret
      eta = (double)(j) * dnym1;
    400141d0:	1e6202ca 	scvtf	d10, w22
    400141d4:	fd45a760 	ldr	d0, [x27, #2888]
    400141d8:	52804114 	mov	w20, #0x208                 	// #520
      for (i = 0; i <= grid_points[0]-1; i++) {
    400141dc:	52800017 	mov	w23, #0x0                   	// #0
          exact_solution((double)ix, eta, zeta, &Pface[ix][0][0]);
    400141e0:	1e6e100b 	fmov	d11, #1.000000000000000000e+00
    400141e4:	9b3466d4 	smaddl	x20, w22, w20, x25
      eta = (double)(j) * dnym1;
    400141e8:	1e60094a 	fmul	d10, d10, d0
      for (i = 0; i <= grid_points[0]-1; i++) {
    400141ec:	8b180294 	add	x20, x20, x24
    400141f0:	b9400260 	ldr	w0, [x19]
    400141f4:	51000400 	sub	w0, w0, #0x1
    400141f8:	6b17001f 	cmp	w0, w23
    400141fc:	5400006a 	b.ge	40014208 <initialize+0x23c>  // b.tcont
    for (j = 0; j <= grid_points[1]-1; j++) {
    40014200:	110006d6 	add	w22, w22, #0x1
    40014204:	17ffffa5 	b	40014098 <initialize+0xcc>
        xi = (double)(i) * dnxm1;
    40014208:	1e6202e9 	scvtf	d9, w23
    4001420c:	fd45a340 	ldr	d0, [x26, #2880]
          exact_solution((double)ix, eta, zeta, &Pface[ix][0][0]);
    40014210:	1e604102 	fmov	d2, d8
    40014214:	1e604141 	fmov	d1, d10
    40014218:	9102c3e0 	add	x0, sp, #0xb0
        xi = (double)(i) * dnxm1;
    4001421c:	1e600929 	fmul	d9, d9, d0
          exact_solution((double)ix, eta, zeta, &Pface[ix][0][0]);
    40014220:	2f00e400 	movi	d0, #0x0
    40014224:	97ffff3d 	bl	40013f18 <exact_solution>
    40014228:	1e604102 	fmov	d2, d8
    4001422c:	1e604141 	fmov	d1, d10
    40014230:	1e6e1000 	fmov	d0, #1.000000000000000000e+00
    40014234:	9104a3e0 	add	x0, sp, #0x128
    40014238:	97ffff38 	bl	40013f18 <exact_solution>
          exact_solution(xi, (double)iy , zeta, &Pface[iy][1][0]);
    4001423c:	1e604102 	fmov	d2, d8
    40014240:	1e604120 	fmov	d0, d9
    40014244:	2f00e401 	movi	d1, #0x0
    40014248:	910363e0 	add	x0, sp, #0xd8
    4001424c:	97ffff33 	bl	40013f18 <exact_solution>
    40014250:	1e604102 	fmov	d2, d8
    40014254:	1e604120 	fmov	d0, d9
    40014258:	1e6e1001 	fmov	d1, #1.000000000000000000e+00
    4001425c:	910543e0 	add	x0, sp, #0x150
    40014260:	97ffff2e 	bl	40013f18 <exact_solution>
          exact_solution(xi, eta, (double)iz, &Pface[iz][2][0]);
    40014264:	1e604141 	fmov	d1, d10
    40014268:	1e604120 	fmov	d0, d9
    4001426c:	2f00e402 	movi	d2, #0x0
    40014270:	910403e0 	add	x0, sp, #0x100
    40014274:	97ffff29 	bl	40013f18 <exact_solution>
    40014278:	1e604141 	fmov	d1, d10
    4001427c:	1e604120 	fmov	d0, d9
    40014280:	1e6e1002 	fmov	d2, #1.000000000000000000e+00
    40014284:	9105e3e0 	add	x0, sp, #0x178
    40014288:	97ffff24 	bl	40013f18 <exact_solution>
          Pxi   = xi   * Pface[1][0][m] + (1.0-xi)   * Pface[0][0][m];
    4001428c:	1e693967 	fsub	d7, d11, d9
          Peta  = eta  * Pface[1][1][m] + (1.0-eta)  * Pface[0][1][m];
    40014290:	1e6a3966 	fsub	d6, d11, d10
          Pzeta = zeta * Pface[1][2][m] + (1.0-zeta) * Pface[0][2][m];
    40014294:	1e683965 	fsub	d5, d11, d8
    40014298:	9102c3e0 	add	x0, sp, #0xb0
          exact_solution(xi, eta, (double)iz, &Pface[iz][2][0]);
    4001429c:	d2800001 	mov	x1, #0x0                   	// #0
          Pxi   = xi   * Pface[1][0][m] + (1.0-xi)   * Pface[0][0][m];
    400142a0:	fd400001 	ldr	d1, [x0]
        for (m = 0; m < 5; m++) {
    400142a4:	91002000 	add	x0, x0, #0x8
          Pxi   = xi   * Pface[1][0][m] + (1.0-xi)   * Pface[0][0][m];
    400142a8:	fd403803 	ldr	d3, [x0, #112]
          Peta  = eta  * Pface[1][1][m] + (1.0-eta)  * Pface[0][1][m];
    400142ac:	fd401000 	ldr	d0, [x0, #32]
          Pxi   = xi   * Pface[1][0][m] + (1.0-xi)   * Pface[0][0][m];
    400142b0:	1e6108e1 	fmul	d1, d7, d1
          Pzeta = zeta * Pface[1][2][m] + (1.0-zeta) * Pface[0][2][m];
    400142b4:	fd402402 	ldr	d2, [x0, #72]
          Pxi   = xi   * Pface[1][0][m] + (1.0-xi)   * Pface[0][0][m];
    400142b8:	1e630923 	fmul	d3, d9, d3
          Peta  = eta  * Pface[1][1][m] + (1.0-eta)  * Pface[0][1][m];
    400142bc:	1e6008c0 	fmul	d0, d6, d0
          Pzeta = zeta * Pface[1][2][m] + (1.0-zeta) * Pface[0][2][m];
    400142c0:	1e6208a2 	fmul	d2, d5, d2
          Pxi   = xi   * Pface[1][0][m] + (1.0-xi)   * Pface[0][0][m];
    400142c4:	1e632821 	fadd	d1, d1, d3
          Peta  = eta  * Pface[1][1][m] + (1.0-eta)  * Pface[0][1][m];
    400142c8:	fd404c03 	ldr	d3, [x0, #152]
    400142cc:	1e630943 	fmul	d3, d10, d3
    400142d0:	1e632800 	fadd	d0, d0, d3
          Pzeta = zeta * Pface[1][2][m] + (1.0-zeta) * Pface[0][2][m];
    400142d4:	fd406003 	ldr	d3, [x0, #192]
    400142d8:	1e630903 	fmul	d3, d8, d3
                          Pxi*Peta - Pxi*Pzeta - Peta*Pzeta + 
    400142dc:	1e600824 	fmul	d4, d1, d0
          Pzeta = zeta * Pface[1][2][m] + (1.0-zeta) * Pface[0][2][m];
    400142e0:	1e632842 	fadd	d2, d2, d3
          u[k][j][i][m] = Pxi + Peta + Pzeta - 
    400142e4:	1e602823 	fadd	d3, d1, d0
    400142e8:	1e622863 	fadd	d3, d3, d2
                          Pxi*Peta - Pxi*Pzeta - Peta*Pzeta + 
    400142ec:	1e620821 	fmul	d1, d1, d2
    400142f0:	1e620800 	fmul	d0, d0, d2
                          Pxi*Peta*Pzeta;
    400142f4:	1e620882 	fmul	d2, d4, d2
          u[k][j][i][m] = Pxi + Peta + Pzeta - 
    400142f8:	1e643863 	fsub	d3, d3, d4
                          Pxi*Peta - Pxi*Pzeta - Peta*Pzeta + 
    400142fc:	1e613863 	fsub	d3, d3, d1
    40014300:	1e603863 	fsub	d3, d3, d0
    40014304:	1e622863 	fadd	d3, d3, d2
          u[k][j][i][m] = Pxi + Peta + Pzeta - 
    40014308:	fc216a83 	str	d3, [x20, x1]
        for (m = 0; m < 5; m++) {
    4001430c:	91002021 	add	x1, x1, #0x8
    40014310:	f100a03f 	cmp	x1, #0x28
    40014314:	54fffc61 	b.ne	400142a0 <initialize+0x2d4>  // b.any
      for (i = 0; i <= grid_points[0]-1; i++) {
    40014318:	110006f7 	add	w23, w23, #0x1
    4001431c:	9100a294 	add	x20, x20, #0x28
    40014320:	17ffffb4 	b	400141f0 <initialize+0x224>
    40014324:	f0000278 	adrp	x24, 40063000 <square+0x37a8>
    40014328:	91206318 	add	x24, x24, #0x818
  for (k = 0; k <= grid_points[2]-1; k++) {
    4001432c:	52800015 	mov	w21, #0x0                   	// #0
        xi = (double)(i) * dnxm1;
    40014330:	900000da 	adrp	x26, 4002c000 <z_idle_threads>
    40014334:	17ffff5e 	b	400140ac <initialize+0xe0>
    zeta = (double)(k) * dnzm1;
    40014338:	1e6202a8 	scvtf	d8, w21
    4001433c:	fd45ab02 	ldr	d2, [x24, #2896]
    40014340:	52834d14 	mov	w20, #0x1a68                	// #6760
    for (j = 0; j <= grid_points[1]-1; j++) {
    40014344:	52800016 	mov	w22, #0x0                   	// #0
      eta = (double)(j) * dnym1;
    40014348:	900000d9 	adrp	x25, 4002c000 <z_idle_threads>
    4001434c:	9b345eb4 	smaddl	x20, w21, w20, x23
    zeta = (double)(k) * dnzm1;
    40014350:	1e620908 	fmul	d8, d8, d2
    for (j = 0; j <= grid_points[1]-1; j++) {
    40014354:	b9400660 	ldr	w0, [x19, #4]
    40014358:	51000400 	sub	w0, w0, #0x1
    4001435c:	6b16001f 	cmp	w0, w22
    40014360:	5400006a 	b.ge	4001436c <initialize+0x3a0>  // b.tcont
  for (k = 0; k <= grid_points[2]-1; k++) {
    40014364:	110006b5 	add	w21, w21, #0x1
    40014368:	17ffff59 	b	400140cc <initialize+0x100>
      eta = (double)(j) * dnym1;
    4001436c:	1e6202c1 	scvtf	d1, w22
    40014370:	fd45a720 	ldr	d0, [x25, #2888]
      exact_solution(xi, eta, zeta, temp);
    40014374:	1e604102 	fmov	d2, d8
    40014378:	910223e0 	add	x0, sp, #0x88
    for (j = 0; j <= grid_points[1]-1; j++) {
    4001437c:	110006d6 	add	w22, w22, #0x1
      exact_solution(xi, eta, zeta, temp);
    40014380:	1e600821 	fmul	d1, d1, d0
    40014384:	2f00e400 	movi	d0, #0x0
    40014388:	97fffee4 	bl	40013f18 <exact_solution>
        u[k][j][i][m] = temp[m];
    4001438c:	fd4047e0 	ldr	d0, [sp, #136]
    40014390:	fd000280 	str	d0, [x20]
    40014394:	fd404be0 	ldr	d0, [sp, #144]
    40014398:	fd000680 	str	d0, [x20, #8]
    4001439c:	fd404fe0 	ldr	d0, [sp, #152]
    400143a0:	fd000a80 	str	d0, [x20, #16]
    400143a4:	fd4053e0 	ldr	d0, [sp, #160]
    400143a8:	fd000e80 	str	d0, [x20, #24]
    400143ac:	fd4057e0 	ldr	d0, [sp, #168]
    400143b0:	fd001280 	str	d0, [x20, #32]
    for (j = 0; j <= grid_points[1]-1; j++) {
    400143b4:	91082294 	add	x20, x20, #0x208
    400143b8:	17ffffe7 	b	40014354 <initialize+0x388>
    zeta = (double)(k) * dnzm1;
    400143bc:	1e6202a8 	scvtf	d8, w21
    400143c0:	fd45ab22 	ldr	d2, [x25, #2896]
    400143c4:	52834d14 	mov	w20, #0x1a68                	// #6760
    for (j = 0; j <= grid_points[1]-1; j++) {
    400143c8:	52800017 	mov	w23, #0x0                   	// #0
      eta = (double)(j) * dnym1;
    400143cc:	900000da 	adrp	x26, 4002c000 <z_idle_threads>
    400143d0:	9b345ab4 	smaddl	x20, w21, w20, x22
    zeta = (double)(k) * dnzm1;
    400143d4:	1e620908 	fmul	d8, d8, d2
    for (j = 0; j <= grid_points[1]-1; j++) {
    400143d8:	8b180294 	add	x20, x20, x24
    400143dc:	b9400660 	ldr	w0, [x19, #4]
    400143e0:	51000400 	sub	w0, w0, #0x1
    400143e4:	6b17001f 	cmp	w0, w23
    400143e8:	5400006a 	b.ge	400143f4 <initialize+0x428>  // b.tcont
  for (k = 0; k <= grid_points[2]-1; k++) {
    400143ec:	110006b5 	add	w21, w21, #0x1
    400143f0:	17ffff43 	b	400140fc <initialize+0x130>
      eta = (double)(j) * dnym1;
    400143f4:	1e6202e1 	scvtf	d1, w23
    400143f8:	fd45a740 	ldr	d0, [x26, #2888]
      exact_solution(xi, eta, zeta, temp);
    400143fc:	1e604102 	fmov	d2, d8
    40014400:	910223e0 	add	x0, sp, #0x88
    for (j = 0; j <= grid_points[1]-1; j++) {
    40014404:	110006f7 	add	w23, w23, #0x1
      exact_solution(xi, eta, zeta, temp);
    40014408:	1e600821 	fmul	d1, d1, d0
    4001440c:	1e6e1000 	fmov	d0, #1.000000000000000000e+00
    40014410:	97fffec2 	bl	40013f18 <exact_solution>
        u[k][j][i][m] = temp[m];
    40014414:	fd4047e0 	ldr	d0, [sp, #136]
    40014418:	fd000280 	str	d0, [x20]
    4001441c:	fd404be0 	ldr	d0, [sp, #144]
    40014420:	fd000680 	str	d0, [x20, #8]
    40014424:	fd404fe0 	ldr	d0, [sp, #152]
    40014428:	fd000a80 	str	d0, [x20, #16]
    4001442c:	fd4053e0 	ldr	d0, [sp, #160]
    40014430:	fd000e80 	str	d0, [x20, #24]
    40014434:	fd4057e0 	ldr	d0, [sp, #168]
    40014438:	fd001280 	str	d0, [x20, #32]
    for (j = 0; j <= grid_points[1]-1; j++) {
    4001443c:	91082294 	add	x20, x20, #0x208
    40014440:	17ffffe7 	b	400143dc <initialize+0x410>
    zeta = (double)(k) * dnzm1;
    40014444:	1e6202a8 	scvtf	d8, w21
    40014448:	fd45ab02 	ldr	d2, [x24, #2896]
    4001444c:	52834d14 	mov	w20, #0x1a68                	// #6760
    for (i = 0; i <= grid_points[0]-1; i++) {
    40014450:	52800016 	mov	w22, #0x0                   	// #0
      xi = (double)(i) * dnxm1;
    40014454:	900000d9 	adrp	x25, 4002c000 <z_idle_threads>
    40014458:	9b345eb4 	smaddl	x20, w21, w20, x23
    zeta = (double)(k) * dnzm1;
    4001445c:	1e620908 	fmul	d8, d8, d2
    for (i = 0; i <= grid_points[0]-1; i++) {
    40014460:	b9400260 	ldr	w0, [x19]
    40014464:	51000400 	sub	w0, w0, #0x1
    40014468:	6b16001f 	cmp	w0, w22
    4001446c:	5400006a 	b.ge	40014478 <initialize+0x4ac>  // b.tcont
  for (k = 0; k <= grid_points[2]-1; k++) {
    40014470:	110006b5 	add	w21, w21, #0x1
    40014474:	17ffff2a 	b	4001411c <initialize+0x150>
      xi = (double)(i) * dnxm1;
    40014478:	1e6202c3 	scvtf	d3, w22
    4001447c:	fd45a320 	ldr	d0, [x25, #2880]
      exact_solution(xi, eta, zeta, temp);
    40014480:	1e604102 	fmov	d2, d8
    40014484:	2f00e401 	movi	d1, #0x0
    40014488:	910223e0 	add	x0, sp, #0x88
    for (i = 0; i <= grid_points[0]-1; i++) {
    4001448c:	110006d6 	add	w22, w22, #0x1
    40014490:	9100a294 	add	x20, x20, #0x28
      exact_solution(xi, eta, zeta, temp);
    40014494:	1e600860 	fmul	d0, d3, d0
    40014498:	97fffea0 	bl	40013f18 <exact_solution>
        u[k][j][i][m] = temp[m];
    4001449c:	fd4047e0 	ldr	d0, [sp, #136]
    400144a0:	fc1d8280 	stur	d0, [x20, #-40]
    400144a4:	fd404be0 	ldr	d0, [sp, #144]
    400144a8:	fc1e0280 	stur	d0, [x20, #-32]
    400144ac:	fd404fe0 	ldr	d0, [sp, #152]
    400144b0:	fc1e8280 	stur	d0, [x20, #-24]
    400144b4:	fd4053e0 	ldr	d0, [sp, #160]
    400144b8:	fc1f0280 	stur	d0, [x20, #-16]
    400144bc:	fd4057e0 	ldr	d0, [sp, #168]
    400144c0:	fc1f8280 	stur	d0, [x20, #-8]
    for (i = 0; i <= grid_points[0]-1; i++) {
    400144c4:	17ffffe7 	b	40014460 <initialize+0x494>
    zeta = (double)(k) * dnzm1;
    400144c8:	1e6202a8 	scvtf	d8, w21
    400144cc:	fd45ab22 	ldr	d2, [x25, #2896]
    400144d0:	52834d14 	mov	w20, #0x1a68                	// #6760
    for (i = 0; i <= grid_points[0]-1; i++) {
    400144d4:	52800017 	mov	w23, #0x0                   	// #0
      xi = (double)(i) * dnxm1;
    400144d8:	900000da 	adrp	x26, 4002c000 <z_idle_threads>
    400144dc:	9b345ab4 	smaddl	x20, w21, w20, x22
    zeta = (double)(k) * dnzm1;
    400144e0:	1e620908 	fmul	d8, d8, d2
    for (i = 0; i <= grid_points[0]-1; i++) {
    400144e4:	8b180294 	add	x20, x20, x24
    400144e8:	b9400260 	ldr	w0, [x19]
    400144ec:	51000400 	sub	w0, w0, #0x1
    400144f0:	6b17001f 	cmp	w0, w23
    400144f4:	5400006a 	b.ge	40014500 <initialize+0x534>  // b.tcont
  for (k = 0; k <= grid_points[2]-1; k++) {
    400144f8:	110006b5 	add	w21, w21, #0x1
    400144fc:	17ffff14 	b	4001414c <initialize+0x180>
      xi = (double)(i) * dnxm1;
    40014500:	1e6202e3 	scvtf	d3, w23
    40014504:	fd45a340 	ldr	d0, [x26, #2880]
      exact_solution(xi, eta, zeta, temp);
    40014508:	1e604102 	fmov	d2, d8
    4001450c:	1e6e1001 	fmov	d1, #1.000000000000000000e+00
    40014510:	910223e0 	add	x0, sp, #0x88
    for (i = 0; i <= grid_points[0]-1; i++) {
    40014514:	110006f7 	add	w23, w23, #0x1
    40014518:	9100a294 	add	x20, x20, #0x28
      exact_solution(xi, eta, zeta, temp);
    4001451c:	1e600860 	fmul	d0, d3, d0
    40014520:	97fffe7e 	bl	40013f18 <exact_solution>
        u[k][j][i][m] = temp[m];
    40014524:	fd4047e0 	ldr	d0, [sp, #136]
    40014528:	fc1d8280 	stur	d0, [x20, #-40]
    4001452c:	fd404be0 	ldr	d0, [sp, #144]
    40014530:	fc1e0280 	stur	d0, [x20, #-32]
    40014534:	fd404fe0 	ldr	d0, [sp, #152]
    40014538:	fc1e8280 	stur	d0, [x20, #-24]
    4001453c:	fd4053e0 	ldr	d0, [sp, #160]
    40014540:	fc1f0280 	stur	d0, [x20, #-16]
    40014544:	fd4057e0 	ldr	d0, [sp, #168]
    40014548:	fc1f8280 	stur	d0, [x20, #-8]
    for (i = 0; i <= grid_points[0]-1; i++) {
    4001454c:	17ffffe7 	b	400144e8 <initialize+0x51c>
    eta = (double)(j) * dnym1;
    40014550:	1e6202a8 	scvtf	d8, w21
    40014554:	fd45a701 	ldr	d1, [x24, #2888]
    40014558:	52804114 	mov	w20, #0x208                 	// #520
    for (i =0; i <= grid_points[0]-1; i++) {
    4001455c:	52800016 	mov	w22, #0x0                   	// #0
      xi = (double)(i) *dnxm1;
    40014560:	900000d9 	adrp	x25, 4002c000 <z_idle_threads>
    40014564:	9b345eb4 	smaddl	x20, w21, w20, x23
    eta = (double)(j) * dnym1;
    40014568:	1e610908 	fmul	d8, d8, d1
    for (i =0; i <= grid_points[0]-1; i++) {
    4001456c:	b9400260 	ldr	w0, [x19]
    40014570:	51000400 	sub	w0, w0, #0x1
    40014574:	6b16001f 	cmp	w0, w22
    40014578:	5400006a 	b.ge	40014584 <initialize+0x5b8>  // b.tcont
  for (j = 0; j <= grid_points[1]-1; j++) {
    4001457c:	110006b5 	add	w21, w21, #0x1
    40014580:	17fffefb 	b	4001416c <initialize+0x1a0>
      xi = (double)(i) *dnxm1;
    40014584:	1e6202c3 	scvtf	d3, w22
    40014588:	fd45a320 	ldr	d0, [x25, #2880]
      exact_solution(xi, eta, zeta, temp);
    4001458c:	2f00e402 	movi	d2, #0x0
    40014590:	1e604101 	fmov	d1, d8
    40014594:	910223e0 	add	x0, sp, #0x88
    for (i =0; i <= grid_points[0]-1; i++) {
    40014598:	110006d6 	add	w22, w22, #0x1
    4001459c:	9100a294 	add	x20, x20, #0x28
      exact_solution(xi, eta, zeta, temp);
    400145a0:	1e600860 	fmul	d0, d3, d0
    400145a4:	97fffe5d 	bl	40013f18 <exact_solution>
        u[k][j][i][m] = temp[m];
    400145a8:	fd4047e0 	ldr	d0, [sp, #136]
    400145ac:	fc1d8280 	stur	d0, [x20, #-40]
    400145b0:	fd404be0 	ldr	d0, [sp, #144]
    400145b4:	fc1e0280 	stur	d0, [x20, #-32]
    400145b8:	fd404fe0 	ldr	d0, [sp, #152]
    400145bc:	fc1e8280 	stur	d0, [x20, #-24]
    400145c0:	fd4053e0 	ldr	d0, [sp, #160]
    400145c4:	fc1f0280 	stur	d0, [x20, #-16]
    400145c8:	fd4057e0 	ldr	d0, [sp, #168]
    400145cc:	fc1f8280 	stur	d0, [x20, #-8]
    for (i =0; i <= grid_points[0]-1; i++) {
    400145d0:	17ffffe7 	b	4001456c <initialize+0x5a0>
    eta = (double)(j) * dnym1;
    400145d4:	1e6202a8 	scvtf	d8, w21
    400145d8:	fd45a721 	ldr	d1, [x25, #2888]
    400145dc:	52804114 	mov	w20, #0x208                 	// #520
    for (i = 0; i <= grid_points[0]-1; i++) {
    400145e0:	52800017 	mov	w23, #0x0                   	// #0
      xi = (double)(i) * dnxm1;
    400145e4:	900000da 	adrp	x26, 4002c000 <z_idle_threads>
    400145e8:	9b345ab4 	smaddl	x20, w21, w20, x22
    eta = (double)(j) * dnym1;
    400145ec:	1e610908 	fmul	d8, d8, d1
    for (i = 0; i <= grid_points[0]-1; i++) {
    400145f0:	8b180294 	add	x20, x20, x24
    400145f4:	b9400260 	ldr	w0, [x19]
    400145f8:	51000400 	sub	w0, w0, #0x1
    400145fc:	6b17001f 	cmp	w0, w23
    40014600:	5400006a 	b.ge	4001460c <initialize+0x640>  // b.tcont
  for (j = 0; j <= grid_points[1]-1; j++) {
    40014604:	110006b5 	add	w21, w21, #0x1
    40014608:	17fffee5 	b	4001419c <initialize+0x1d0>
      xi = (double)(i) * dnxm1;
    4001460c:	1e6202e3 	scvtf	d3, w23
    40014610:	fd45a340 	ldr	d0, [x26, #2880]
      exact_solution(xi, eta, zeta, temp);
    40014614:	1e604101 	fmov	d1, d8
    40014618:	1e6e1002 	fmov	d2, #1.000000000000000000e+00
    4001461c:	910223e0 	add	x0, sp, #0x88
    for (i = 0; i <= grid_points[0]-1; i++) {
    40014620:	110006f7 	add	w23, w23, #0x1
    40014624:	9100a294 	add	x20, x20, #0x28
      exact_solution(xi, eta, zeta, temp);
    40014628:	1e600860 	fmul	d0, d3, d0
    4001462c:	97fffe3b 	bl	40013f18 <exact_solution>
        u[k][j][i][m] = temp[m];
    40014630:	fd4047e0 	ldr	d0, [sp, #136]
    40014634:	fc1d8280 	stur	d0, [x20, #-40]
    40014638:	fd404be0 	ldr	d0, [sp, #144]
    4001463c:	fc1e0280 	stur	d0, [x20, #-32]
    40014640:	fd404fe0 	ldr	d0, [sp, #152]
    40014644:	fc1e8280 	stur	d0, [x20, #-24]
    40014648:	fd4053e0 	ldr	d0, [sp, #160]
    4001464c:	fc1f0280 	stur	d0, [x20, #-16]
    40014650:	fd4057e0 	ldr	d0, [sp, #168]
    40014654:	fc1f8280 	stur	d0, [x20, #-8]
    for (i = 0; i <= grid_points[0]-1; i++) {
    40014658:	17ffffe7 	b	400145f4 <initialize+0x628>

000000004001465c <lhsinit>:
  for (n = 0; n < 5; n++) {
    for (m = 0; m < 5; m++) {
      lhs[0][0][n][m] = 0.0;
      lhs[0][1][n][m] = 0.0;
      lhs[0][2][n][m] = 0.0;
      lhs[i][0][n][m] = 0.0;
    4001465c:	52804b02 	mov	w2, #0x258                 	// #600
      lhs[0][1][n][m] = 0.0;
    40014660:	91032005 	add	x5, x0, #0xc8
      lhs[0][2][n][m] = 0.0;
    40014664:	91064006 	add	x6, x0, #0x190
      lhs[i][0][n][m] = 0.0;
    40014668:	d2800003 	mov	x3, #0x0                   	// #0
    4001466c:	9b220021 	smaddl	x1, w1, w2, x0
      lhs[i][1][n][m] = 0.0;
    40014670:	91032027 	add	x7, x1, #0xc8
      lhs[i][2][n][m] = 0.0;
    40014674:	91064028 	add	x8, x1, #0x190
{
    40014678:	aa0303e2 	mov	x2, x3
    4001467c:	528000a4 	mov	w4, #0x5                   	// #5
      lhs[0][0][n][m] = 0.0;
    40014680:	f822681f 	str	xzr, [x0, x2]
    for (m = 0; m < 5; m++) {
    40014684:	71000484 	subs	w4, w4, #0x1
      lhs[0][1][n][m] = 0.0;
    40014688:	f82268bf 	str	xzr, [x5, x2]
      lhs[0][2][n][m] = 0.0;
    4001468c:	f82268df 	str	xzr, [x6, x2]
      lhs[i][0][n][m] = 0.0;
    40014690:	f822683f 	str	xzr, [x1, x2]
      lhs[i][1][n][m] = 0.0;
    40014694:	f82268ff 	str	xzr, [x7, x2]
      lhs[i][2][n][m] = 0.0;
    40014698:	f822691f 	str	xzr, [x8, x2]
    for (m = 0; m < 5; m++) {
    4001469c:	91002042 	add	x2, x2, #0x8
    400146a0:	54ffff01 	b.ne	40014680 <lhsinit+0x24>  // b.any
  for (n = 0; n < 5; n++) {
    400146a4:	9100a063 	add	x3, x3, #0x28
    400146a8:	f103207f 	cmp	x3, #0xc8
    400146ac:	54fffe61 	b.ne	40014678 <lhsinit+0x1c>  // b.any

  //---------------------------------------------------------------------
  // next, set all diagonal values to 1. This is overkill, but convenient
  //---------------------------------------------------------------------
  for (m = 0; m < 5; m++) {
    lhs[0][1][m][m] = 1.0;
    400146b0:	1e6e1000 	fmov	d0, #1.000000000000000000e+00
    400146b4:	fd006400 	str	d0, [x0, #200]
    lhs[i][1][m][m] = 1.0;
    400146b8:	fd006420 	str	d0, [x1, #200]
    lhs[0][1][m][m] = 1.0;
    400146bc:	fd007c00 	str	d0, [x0, #248]
    lhs[i][1][m][m] = 1.0;
    400146c0:	fd007c20 	str	d0, [x1, #248]
    lhs[0][1][m][m] = 1.0;
    400146c4:	fd009400 	str	d0, [x0, #296]
    lhs[i][1][m][m] = 1.0;
    400146c8:	fd009420 	str	d0, [x1, #296]
    lhs[0][1][m][m] = 1.0;
    400146cc:	fd00ac00 	str	d0, [x0, #344]
    lhs[i][1][m][m] = 1.0;
    400146d0:	fd00ac20 	str	d0, [x1, #344]
    lhs[0][1][m][m] = 1.0;
    400146d4:	fd00c400 	str	d0, [x0, #392]
    lhs[i][1][m][m] = 1.0;
    400146d8:	fd00c420 	str	d0, [x1, #392]
  }
}
    400146dc:	d65f03c0 	ret

00000000400146e0 <print_results>:

void print_results(char *name, char class, int n1, int n2, int n3, int niter,
    double t, double mops, char *optype, logical verified, char *npbversion,
    char *compiletime, char *cs1, char *cs2, char *cs3, char *cs4, char *cs5,
    char *cs6, char *cs7) 
{
    400146e0:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
    400146e4:	910003fd 	mov	x29, sp
    400146e8:	6d0527e8 	stp	d8, d9, [sp, #80]
    400146ec:	1e604009 	fmov	d9, d0
    400146f0:	1e604028 	fmov	d8, d1
    400146f4:	a90153f3 	stp	x19, x20, [sp, #16]
    400146f8:	2a0203f3 	mov	w19, w2
    400146fc:	aa0003f4 	mov	x20, x0
    40014700:	a9025bf5 	stp	x21, x22, [sp, #32]
    40014704:	2a0303f5 	mov	w21, w3
    40014708:	2a0403f6 	mov	w22, w4
    4001470c:	a90363f7 	stp	x23, x24, [sp, #48]
    40014710:	aa0603f8 	mov	x24, x6
    40014714:	2a0703f7 	mov	w23, w7
    40014718:	a9046bf9 	stp	x25, x26, [sp, #64]
    4001471c:	12001c3a 	and	w26, w1, #0xff
    40014720:	2a0503f9 	mov	w25, w5
  char size[16];
  int j;

  printf( "\n\n %s Benchmark Completed.\n", name );
    40014724:	aa0003e1 	mov	x1, x0
    40014728:	f0000060 	adrp	x0, 40023000 <fpi.1>
    4001472c:	9121bc00 	add	x0, x0, #0x86f
    40014730:	97ffbe48 	bl	40004050 <printf>
  printf( " Class           =             %12c\n", class );
    40014734:	2a1a03e1 	mov	w1, w26
    40014738:	f0000060 	adrp	x0, 40023000 <fpi.1>
    4001473c:	91222c00 	add	x0, x0, #0x88b
    40014740:	97ffbe44 	bl	40004050 <printf>
  // If this is not a grid-based problem (EP, FT, CG), then
  // we only print n1, which contains some measure of the
  // problem size. In that case, n2 and n3 are both zero.
  // Otherwise, we print the grid size n1xn2xn3

  if ( ( n2 == 0 ) && ( n3 == 0 ) ) {
    40014744:	2a1602a0 	orr	w0, w21, w22
    40014748:	35000d00 	cbnz	w0, 400148e8 <print_results+0x208>
    if ( ( name[0] == 'E' ) && ( name[1] == 'P' ) ) {
    4001474c:	39400280 	ldrb	w0, [x20]
    40014750:	7101141f 	cmp	w0, #0x45
    40014754:	54000c01 	b.ne	400148d4 <print_results+0x1f4>  // b.any
    40014758:	39400680 	ldrb	w0, [x20, #1]
    4001475c:	7101401f 	cmp	w0, #0x50
    40014760:	54000ba1 	b.ne	400148d4 <print_results+0x1f4>  // b.any
      sprintf( size, "%15.0lf", pow(2.0, n1) );
    40014764:	1e620261 	scvtf	d1, w19
    40014768:	1e601000 	fmov	d0, #2.000000000000000000e+00
    4001476c:	910183f3 	add	x19, sp, #0x60
    40014770:	97ffb564 	bl	40001d00 <pow>
    40014774:	aa1303e0 	mov	x0, x19
    40014778:	f0000063 	adrp	x3, 40023000 <fpi.1>
    4001477c:	9122c063 	add	x3, x3, #0x8b0
    40014780:	d2800202 	mov	x2, #0x10                  	// #16
    40014784:	52800001 	mov	w1, #0x0                   	// #0
    40014788:	97ffbe86 	bl	400041a0 <__sprintf_chk>
      j = 14;
      if ( size[j] == '.' ) {
    4001478c:	3941bbe0 	ldrb	w0, [sp, #110]
    40014790:	7100b81f 	cmp	w0, #0x2e
    40014794:	540009c1 	b.ne	400148cc <print_results+0x1ec>  // b.any
        size[j] = ' '; 
    40014798:	52800400 	mov	w0, #0x20                  	// #32
    4001479c:	3901bbe0 	strb	w0, [sp, #110]
        j--;
    400147a0:	528001a0 	mov	w0, #0xd                   	// #13
      }
      size[j+1] = '\0';
    400147a4:	11000400 	add	w0, w0, #0x1
      printf( " Size            =          %15s\n", size );
    400147a8:	aa1303e1 	mov	x1, x19
      size[j+1] = '\0';
    400147ac:	3820ca7f 	strb	wzr, [x19, w0, sxtw]
      printf( " Size            =          %15s\n", size );
    400147b0:	f0000060 	adrp	x0, 40023000 <fpi.1>
    400147b4:	9122e000 	add	x0, x0, #0x8b8
    400147b8:	97ffbe26 	bl	40004050 <printf>
    }
  } else {
    printf( " Size            =           %4dx%4dx%4d\n", n1, n2, n3 );
  }

  printf( " Iterations      =             %12d\n", niter );
    400147bc:	2a1903e1 	mov	w1, w25
    400147c0:	f0000060 	adrp	x0, 40023000 <fpi.1>
    400147c4:	9124a400 	add	x0, x0, #0x929
    400147c8:	97ffbe22 	bl	40004050 <printf>
  printf( " Time in seconds =             %12.2lf\n", t );
    400147cc:	1e604120 	fmov	d0, d9
    400147d0:	f0000060 	adrp	x0, 40023000 <fpi.1>
    400147d4:	91253800 	add	x0, x0, #0x94e
    400147d8:	97ffbe1e 	bl	40004050 <printf>
  printf( " Mop/s total     =          %15.2lf\n", mops );
    400147dc:	1e604100 	fmov	d0, d8
    400147e0:	f0000060 	adrp	x0, 40023000 <fpi.1>
    400147e4:	9125d800 	add	x0, x0, #0x976
    400147e8:	97ffbe1a 	bl	40004050 <printf>
  printf( " Operation type  = %24s\n", optype );
    400147ec:	aa1803e1 	mov	x1, x24
    400147f0:	f0000060 	adrp	x0, 40023000 <fpi.1>
    400147f4:	91266c00 	add	x0, x0, #0x99b
    400147f8:	97ffbe16 	bl	40004050 <printf>
  if ( verified ) 
    400147fc:	f0000060 	adrp	x0, 40023000 <fpi.1>
    40014800:	9126d000 	add	x0, x0, #0x9b4
    40014804:	34000817 	cbz	w23, 40014904 <print_results+0x224>
    printf( " Verification    =             %12s\n", "SUCCESSFUL" );
    40014808:	f0000061 	adrp	x1, 40023000 <fpi.1>
    4001480c:	91276c21 	add	x1, x1, #0x9db
  else
    printf( " Verification    =             %12s\n", "UNSUCCESSFUL" );
    40014810:	97ffbe10 	bl	40004050 <printf>
  printf( " Version         =             %12s\n", npbversion );
    40014814:	f9403be1 	ldr	x1, [sp, #112]
    40014818:	f0000060 	adrp	x0, 40023000 <fpi.1>
    4001481c:	91279800 	add	x0, x0, #0x9e6
    40014820:	97ffbe0c 	bl	40004050 <printf>
  printf( " Compile date    =             %12s\n", compiletime );
    40014824:	f9403fe1 	ldr	x1, [sp, #120]
    40014828:	f0000060 	adrp	x0, 40023000 <fpi.1>
    4001482c:	91282c00 	add	x0, x0, #0xa0b
    40014830:	97ffbe08 	bl	40004050 <printf>
  
  printf( "\n Compile options:\n"
    40014834:	f94043e1 	ldr	x1, [sp, #128]
    40014838:	f0000060 	adrp	x0, 40023000 <fpi.1>
    4001483c:	9128c000 	add	x0, x0, #0xa30
    40014840:	97ffbe04 	bl	40004050 <printf>
          "    CC           = %s\n", cs1 );
  printf( "    CLINK        = %s\n", cs2 );
    40014844:	f94047e1 	ldr	x1, [sp, #136]
    40014848:	f0000060 	adrp	x0, 40023000 <fpi.1>
    4001484c:	91296800 	add	x0, x0, #0xa5a
    40014850:	97ffbe00 	bl	40004050 <printf>
  printf( "    C_LIB        = %s\n", cs3 );
    40014854:	f9404be1 	ldr	x1, [sp, #144]
    40014858:	f0000060 	adrp	x0, 40023000 <fpi.1>
    4001485c:	9129c400 	add	x0, x0, #0xa71
    40014860:	97ffbdfc 	bl	40004050 <printf>
  printf( "    C_INC        = %s\n", cs4 );
    40014864:	f9404fe1 	ldr	x1, [sp, #152]
    40014868:	f0000060 	adrp	x0, 40023000 <fpi.1>
    4001486c:	912a2000 	add	x0, x0, #0xa88
    40014870:	97ffbdf8 	bl	40004050 <printf>
  printf( "    CFLAGS       = %s\n", cs5 );
    40014874:	f94053e1 	ldr	x1, [sp, #160]
    40014878:	f0000060 	adrp	x0, 40023000 <fpi.1>
    4001487c:	912a7c00 	add	x0, x0, #0xa9f
    40014880:	97ffbdf4 	bl	40004050 <printf>
  printf( "    CLINKFLAGS   = %s\n", cs6 );
    40014884:	f94057e1 	ldr	x1, [sp, #168]
    40014888:	f0000060 	adrp	x0, 40023000 <fpi.1>
    4001488c:	912ad800 	add	x0, x0, #0xab6
    40014890:	97ffbdf0 	bl	40004050 <printf>
  printf( "    RAND         = %s\n", cs7 );
    40014894:	f9405be1 	ldr	x1, [sp, #176]
    40014898:	f0000060 	adrp	x0, 40023000 <fpi.1>
    4001489c:	912b3400 	add	x0, x0, #0xacd
    400148a0:	97ffbdec 	bl	40004050 <printf>

  printf( "\n--------------------------------------\n"
    400148a4:	f0000060 	adrp	x0, 40023000 <fpi.1>
    400148a8:	912b9000 	add	x0, x0, #0xae4
    400148ac:	97ffbde9 	bl	40004050 <printf>
          " Please send all errors/feedbacks to:\n"
          " Center for Manycore Programming\n"
          " cmp@aces.snu.ac.kr\n"
          " http://aces.snu.ac.kr\n"
          "--------------------------------------\n\n");
}
    400148b0:	a94153f3 	ldp	x19, x20, [sp, #16]
    400148b4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    400148b8:	a94363f7 	ldp	x23, x24, [sp, #48]
    400148bc:	a9446bf9 	ldp	x25, x26, [sp, #64]
    400148c0:	6d4527e8 	ldp	d8, d9, [sp, #80]
    400148c4:	a8c77bfd 	ldp	x29, x30, [sp], #112
    400148c8:	d65f03c0 	ret
      j = 14;
    400148cc:	528001c0 	mov	w0, #0xe                   	// #14
    400148d0:	17ffffb5 	b	400147a4 <print_results+0xc4>
      printf( " Size            =             %12d\n", n1 );
    400148d4:	2a1303e1 	mov	w1, w19
    400148d8:	f0000060 	adrp	x0, 40023000 <fpi.1>
    400148dc:	91236800 	add	x0, x0, #0x8da
    400148e0:	97ffbddc 	bl	40004050 <printf>
    400148e4:	17ffffb6 	b	400147bc <print_results+0xdc>
    printf( " Size            =           %4dx%4dx%4d\n", n1, n2, n3 );
    400148e8:	2a1603e3 	mov	w3, w22
    400148ec:	2a1503e2 	mov	w2, w21
    400148f0:	2a1303e1 	mov	w1, w19
    400148f4:	f0000060 	adrp	x0, 40023000 <fpi.1>
    400148f8:	9123fc00 	add	x0, x0, #0x8ff
    400148fc:	97ffbdd5 	bl	40004050 <printf>
    40014900:	17ffffaf 	b	400147bc <print_results+0xdc>
    printf( " Verification    =             %12s\n", "UNSUCCESSFUL" );
    40014904:	f0000061 	adrp	x1, 40023000 <fpi.1>
    40014908:	91276421 	add	x1, x1, #0x9d9
    4001490c:	17ffffc1 	b	40014810 <print_results+0x130>

0000000040014910 <compute_rhs>:

#include "header.h"
#include "timers.h"

void compute_rhs()
{
    40014910:	a9b07bfd 	stp	x29, x30, [sp, #-256]!
    40014914:	910003fd 	mov	x29, sp
    40014918:	a90153f3 	stp	x19, x20, [sp, #16]
  int i, j, k, m;
  double rho_inv, uijk, up1, um1, vijk, vp1, vm1, wijk, wp1, wm1;

  if (timeron) timer_start(t_rhs);
    4001491c:	f0000374 	adrp	x20, 40083000 <ws+0x3a40>
    40014920:	b94a8e80 	ldr	w0, [x20, #2700]
{
    40014924:	a9025bf5 	stp	x21, x22, [sp, #32]
    40014928:	a90363f7 	stp	x23, x24, [sp, #48]
    4001492c:	a9046bf9 	stp	x25, x26, [sp, #64]
    40014930:	a90573fb 	stp	x27, x28, [sp, #80]
    40014934:	6d0627e8 	stp	d8, d9, [sp, #96]
    40014938:	6d072fea 	stp	d10, d11, [sp, #112]
  if (timeron) timer_start(t_rhs);
    4001493c:	34000060 	cbz	w0, 40014948 <compute_rhs+0x38>
    40014940:	528000a0 	mov	w0, #0x5                   	// #5
    40014944:	97fff7b1 	bl	40012808 <timer_start>
  //---------------------------------------------------------------------
  // compute the reciprocal of density, and the kinetic energy, 
  // and the speed of sound.
  //---------------------------------------------------------------------
  for (k = 0; k <= grid_points[2]-1; k++) {
    40014948:	f0000360 	adrp	x0, 40083000 <ws+0x3a40>
    4001494c:	912a0015 	add	x21, x0, #0xa80
    for (j = 0; j <= grid_points[1]-1; j++) {
      for (i = 0; i <= grid_points[0]-1; i++) {
        rho_inv = 1.0/u[k][j][i][0];
        rho_i[k][j][i] = rho_inv;
    40014950:	f0000189 	adrp	x9, 40047000 <qs+0x3348>
    40014954:	91306129 	add	x9, x9, #0xc18
      for (i = 0; i <= grid_points[0]-1; i++) {
    40014958:	b94a8004 	ldr	w4, [x0, #2688]
        us[k][j][i] = u[k][j][i][1] * rho_inv;
    4001495c:	f000030a 	adrp	x10, 40077000 <u+0x137e8>
    40014960:	911c014a 	add	x10, x10, #0x700
        vs[k][j][i] = u[k][j][i][2] * rho_inv;
    40014964:	f000032b 	adrp	x11, 4007b000 <us+0x3900>
    40014968:	9119816b 	add	x11, x11, #0x660
        ws[k][j][i] = u[k][j][i][3] * rho_inv;
    4001496c:	f000034c 	adrp	x12, 4007f000 <vs+0x39a0>
    40014970:	9117018c 	add	x12, x12, #0x5c0
        square[k][j][i] = 0.5* (
    40014974:	f000024d 	adrp	x13, 4005f000 <rhs+0x13488>
    40014978:	912161ad 	add	x13, x13, #0x858
            u[k][j][i][1]*u[k][j][i][1] + 
            u[k][j][i][2]*u[k][j][i][2] +
            u[k][j][i][3]*u[k][j][i][3] ) * rho_inv;
        qs[k][j][i] = square[k][j][i] * rho_inv;
    4001497c:	f000016e 	adrp	x14, 40043000 <lhs+0x1c50>
    40014980:	9132e1ce 	add	x14, x14, #0xcb8
      for (i = 0; i <= grid_points[0]-1; i++) {
    40014984:	51000484 	sub	w4, w4, #0x1
  for (k = 0; k <= grid_points[2]-1; k++) {
    40014988:	29409aa5 	ldp	w5, w6, [x21, #4]
      for (i = 0; i <= grid_points[0]-1; i++) {
    4001498c:	52800003 	mov	w3, #0x0                   	// #0
    40014990:	52834d11 	mov	w17, #0x1a68                	// #6760
    40014994:	f90043e0 	str	x0, [sp, #128]
  for (k = 0; k <= grid_points[2]-1; k++) {
    40014998:	510004c6 	sub	w6, w6, #0x1
    for (j = 0; j <= grid_points[1]-1; j++) {
    4001499c:	510004a5 	sub	w5, w5, #0x1
  for (k = 0; k <= grid_points[2]-1; k++) {
    400149a0:	6b0300df 	cmp	w6, w3
    400149a4:	540009cb 	b.lt	40014adc <compute_rhs+0x1cc>  // b.tstop
    400149a8:	5280a908 	mov	w8, #0x548                 	// #1352
    400149ac:	f0000267 	adrp	x7, 40063000 <square+0x37a8>
    400149b0:	912060e7 	add	x7, x7, #0x818
    400149b4:	9b317c72 	smull	x18, w3, w17
    400149b8:	9b287c68 	smull	x8, w3, w8
    for (j = 0; j <= grid_points[1]-1; j++) {
    400149bc:	52800002 	mov	w2, #0x0                   	// #0
    400149c0:	52804110 	mov	w16, #0x208                 	// #520
        rho_inv = 1.0/u[k][j][i][0];
    400149c4:	1e6e1005 	fmov	d5, #1.000000000000000000e+00
        square[k][j][i] = 0.5* (
    400149c8:	1e6c1004 	fmov	d4, #5.000000000000000000e-01
    400149cc:	1400001d 	b	40014a40 <compute_rhs+0x130>
        rho_inv = 1.0/u[k][j][i][0];
    400149d0:	fd400020 	ldr	d0, [x1]
      for (i = 0; i <= grid_points[0]-1; i++) {
    400149d4:	110005ef 	add	w15, w15, #0x1
        vs[k][j][i] = u[k][j][i][2] * rho_inv;
    400149d8:	fd400823 	ldr	d3, [x1, #16]
    400149dc:	9100a021 	add	x1, x1, #0x28
        rho_inv = 1.0/u[k][j][i][0];
    400149e0:	1e6018a1 	fdiv	d1, d5, d0
        us[k][j][i] = u[k][j][i][1] * rho_inv;
    400149e4:	fc5e0020 	ldur	d0, [x1, #-32]
    400149e8:	1e610802 	fmul	d2, d0, d1
            u[k][j][i][1]*u[k][j][i][1] + 
    400149ec:	1e600800 	fmul	d0, d0, d0
        rho_i[k][j][i] = rho_inv;
    400149f0:	fc296801 	str	d1, [x0, x9]
        us[k][j][i] = u[k][j][i][1] * rho_inv;
    400149f4:	fc2a6802 	str	d2, [x0, x10]
        vs[k][j][i] = u[k][j][i][2] * rho_inv;
    400149f8:	1e610862 	fmul	d2, d3, d1
            u[k][j][i][2]*u[k][j][i][2] +
    400149fc:	1e630863 	fmul	d3, d3, d3
        vs[k][j][i] = u[k][j][i][2] * rho_inv;
    40014a00:	fc2b6802 	str	d2, [x0, x11]
        ws[k][j][i] = u[k][j][i][3] * rho_inv;
    40014a04:	fc5f0022 	ldur	d2, [x1, #-16]
            u[k][j][i][1]*u[k][j][i][1] + 
    40014a08:	1e632800 	fadd	d0, d0, d3
        ws[k][j][i] = u[k][j][i][3] * rho_inv;
    40014a0c:	1e610846 	fmul	d6, d2, d1
            u[k][j][i][3]*u[k][j][i][3] ) * rho_inv;
    40014a10:	1e620842 	fmul	d2, d2, d2
            u[k][j][i][2]*u[k][j][i][2] +
    40014a14:	1e622800 	fadd	d0, d0, d2
        ws[k][j][i] = u[k][j][i][3] * rho_inv;
    40014a18:	fc2c6806 	str	d6, [x0, x12]
        square[k][j][i] = 0.5* (
    40014a1c:	1e640800 	fmul	d0, d0, d4
            u[k][j][i][3]*u[k][j][i][3] ) * rho_inv;
    40014a20:	1e610800 	fmul	d0, d0, d1
        square[k][j][i] = 0.5* (
    40014a24:	fc2d6800 	str	d0, [x0, x13]
        qs[k][j][i] = square[k][j][i] * rho_inv;
    40014a28:	1e610800 	fmul	d0, d0, d1
    40014a2c:	fc2e6800 	str	d0, [x0, x14]
      for (i = 0; i <= grid_points[0]-1; i++) {
    40014a30:	91002000 	add	x0, x0, #0x8
    40014a34:	6b0f009f 	cmp	w4, w15
    40014a38:	54fffcca 	b.ge	400149d0 <compute_rhs+0xc0>  // b.tcont
    for (j = 0; j <= grid_points[1]-1; j++) {
    40014a3c:	11000442 	add	w2, w2, #0x1
    40014a40:	6b0200bf 	cmp	w5, w2
    40014a44:	540000eb 	b.lt	40014a60 <compute_rhs+0x150>  // b.tstop
    40014a48:	9b304841 	smaddl	x1, w2, w16, x18
    40014a4c:	52800d00 	mov	w0, #0x68                  	// #104
      for (i = 0; i <= grid_points[0]-1; i++) {
    40014a50:	5280000f 	mov	w15, #0x0                   	// #0
    40014a54:	9b202040 	smaddl	x0, w2, w0, x8
    40014a58:	8b070021 	add	x1, x1, x7
    40014a5c:	17fffff6 	b	40014a34 <compute_rhs+0x124>
  for (k = 0; k <= grid_points[2]-1; k++) {
    40014a60:	11000463 	add	w3, w3, #0x1
    40014a64:	17ffffcf 	b	400149a0 <compute_rhs+0x90>
  //---------------------------------------------------------------------
  for (k = 0; k <= grid_points[2]-1; k++) {
    for (j = 0; j <= grid_points[1]-1; j++) {
      for (i = 0; i <= grid_points[0]-1; i++) {
        for (m = 0; m < 5; m++) {
          rhs[k][j][i][m] = forcing[k][j][i][m];
    40014a68:	fd400020 	ldr	d0, [x1]
      for (i = 0; i <= grid_points[0]-1; i++) {
    40014a6c:	11000529 	add	w9, w9, #0x1
    40014a70:	9100a021 	add	x1, x1, #0x28
    40014a74:	9100a000 	add	x0, x0, #0x28
          rhs[k][j][i][m] = forcing[k][j][i][m];
    40014a78:	fc1d8000 	stur	d0, [x0, #-40]
    40014a7c:	fc5e0020 	ldur	d0, [x1, #-32]
    40014a80:	fc1e0000 	stur	d0, [x0, #-32]
    40014a84:	fc5e8020 	ldur	d0, [x1, #-24]
    40014a88:	fc1e8000 	stur	d0, [x0, #-24]
    40014a8c:	fc5f0020 	ldur	d0, [x1, #-16]
    40014a90:	fc1f0000 	stur	d0, [x0, #-16]
    40014a94:	fc5f8020 	ldur	d0, [x1, #-8]
    40014a98:	fc1f8000 	stur	d0, [x0, #-8]
      for (i = 0; i <= grid_points[0]-1; i++) {
    40014a9c:	6b09009f 	cmp	w4, w9
    40014aa0:	54fffe4a 	b.ge	40014a68 <compute_rhs+0x158>  // b.tcont
    for (j = 0; j <= grid_points[1]-1; j++) {
    40014aa4:	11000442 	add	w2, w2, #0x1
    40014aa8:	6b0200bf 	cmp	w5, w2
    40014aac:	540000cb 	b.lt	40014ac4 <compute_rhs+0x1b4>  // b.tstop
    40014ab0:	9b2c2840 	smaddl	x0, w2, w12, x10
      for (i = 0; i <= grid_points[0]-1; i++) {
    40014ab4:	52800009 	mov	w9, #0x0                   	// #0
    40014ab8:	8b070001 	add	x1, x0, x7
    40014abc:	8b080000 	add	x0, x0, x8
    40014ac0:	17fffff7 	b	40014a9c <compute_rhs+0x18c>
  for (k = 0; k <= grid_points[2]-1; k++) {
    40014ac4:	91000463 	add	x3, x3, #0x1
    40014ac8:	6b0300df 	cmp	w6, w3
    40014acc:	5400018b 	b.lt	40014afc <compute_rhs+0x1ec>  // b.tstop
    40014ad0:	9b0b7c6a 	mul	x10, x3, x11
    for (j = 0; j <= grid_points[1]-1; j++) {
    40014ad4:	52800002 	mov	w2, #0x0                   	// #0
    40014ad8:	17fffff4 	b	40014aa8 <compute_rhs+0x198>
    40014adc:	b00000c7 	adrp	x7, 4002d000 <fjac+0x358>
    40014ae0:	911b40e7 	add	x7, x7, #0x6d0
    40014ae4:	f00001a8 	adrp	x8, 4004b000 <rho_i+0x33e8>
    40014ae8:	912de108 	add	x8, x8, #0xb78
    40014aec:	d2800003 	mov	x3, #0x0                   	// #0
    40014af0:	d2834d0b 	mov	x11, #0x1a68                	// #6760
    40014af4:	5280410c 	mov	w12, #0x208                 	// #520
    40014af8:	17fffff4 	b	40014ac8 <compute_rhs+0x1b8>
        }
      }
    }
  }

  if (timeron) timer_start(t_rhsx);
    40014afc:	b94a8e80 	ldr	w0, [x20, #2700]
    40014b00:	34000060 	cbz	w0, 40014b0c <compute_rhs+0x1fc>
    40014b04:	52800040 	mov	w0, #0x2                   	// #2
    40014b08:	97fff740 	bl	40012808 <timer_start>
  //---------------------------------------------------------------------
  // compute xi-direction fluxes 
  //---------------------------------------------------------------------
  for (k = 1; k <= grid_points[2]-2; k++) {
    40014b0c:	294082a4 	ldp	w4, w0, [x21, #4]
      for (i = 1; i <= grid_points[0]-2; i++) {
        uijk = us[k][j][i];
        up1  = us[k][j][i+1];
        um1  = us[k][j][i-1];

        rhs[k][j][i][0] = rhs[k][j][i][0] + dx1tx1 * 
    40014b10:	900000c1 	adrp	x1, 4002c000 <z_idle_threads>
    40014b14:	fd45d430 	ldr	d16, [x1, #2984]
          (u[k][j][i+1][0] - 2.0*u[k][j][i][0] + 
           u[k][j][i-1][0]) -
          tx2 * (u[k][j][i+1][1] - u[k][j][i-1][1]);
    40014b18:	f0000261 	adrp	x1, 40063000 <square+0x37a8>
    40014b1c:	fd43ec24 	ldr	d4, [x1, #2008]
  for (k = 1; k <= grid_points[2]-2; k++) {
    40014b20:	51000800 	sub	w0, w0, #0x2
    40014b24:	b9008be0 	str	w0, [sp, #136]

        rhs[k][j][i][1] = rhs[k][j][i][1] + dx2tx1 * 
    40014b28:	900000c1 	adrp	x1, 4002c000 <z_idle_threads>
    40014b2c:	fd45dc31 	ldr	d17, [x1, #3000]
          (u[k][j][i+1][1] - 2.0*u[k][j][i][1] + 
           u[k][j][i-1][1]) +
          xxcon2*con43 * (up1 - 2.0*uijk + um1) -
    40014b30:	f0000361 	adrp	x1, 40083000 <ws+0x3a40>
    40014b34:	fd429426 	ldr	d6, [x1, #1320]
              u[k][j][i-1][1]*um1 +
              (u[k][j][i+1][4]- square[k][j][i+1]-
               u[k][j][i-1][4]+ square[k][j][i-1])*
              c2);

        rhs[k][j][i][2] = rhs[k][j][i][2] + dx3tx1 * 
    40014b38:	900000c1 	adrp	x1, 4002c000 <z_idle_threads>
    40014b3c:	fd45e433 	ldr	d19, [x1, #3016]
          xxcon2 * (vs[k][j][i+1] - 2.0*vs[k][j][i] +
              vs[k][j][i-1]) -
          tx2 * (u[k][j][i+1][2]*up1 - 
              u[k][j][i-1][2]*um1);

        rhs[k][j][i][3] = rhs[k][j][i][3] + dx4tx1 * 
    40014b40:	900000c1 	adrp	x1, 4002c000 <z_idle_threads>
    40014b44:	fd45ec34 	ldr	d20, [x1, #3032]
          xxcon2 * (ws[k][j][i+1] - 2.0*ws[k][j][i] +
              ws[k][j][i-1]) -
          tx2 * (u[k][j][i+1][3]*up1 - 
              u[k][j][i-1][3]*um1);

        rhs[k][j][i][4] = rhs[k][j][i][4] + dx5tx1 * 
    40014b48:	900000c1 	adrp	x1, 4002c000 <z_idle_threads>
    40014b4c:	fd45f435 	ldr	d21, [x1, #3048]
    40014b50:	52800502 	mov	w2, #0x28                  	// #40
        }
      }
    }

    for (j = 1; j <= grid_points[1]-2; j++) {
      i = grid_points[0]-3;
    40014b54:	f94043e0 	ldr	x0, [sp, #128]
          xxcon3 * (qs[k][j][i+1] - 2.0*qs[k][j][i] +
    40014b58:	f0000361 	adrp	x1, 40083000 <ws+0x3a40>
    40014b5c:	fd429836 	ldr	d22, [x1, #1328]
    40014b60:	f0000273 	adrp	x19, 40063000 <square+0x37a8>
    40014b64:	91206273 	add	x19, x19, #0x818
    40014b68:	d2800505 	mov	x5, #0x28                  	// #40
      i = grid_points[0]-3;
    40014b6c:	b94a8000 	ldr	w0, [x0, #2688]
          xxcon4 * (up1*up1 -       2.0*uijk*uijk + 
    40014b70:	f0000361 	adrp	x1, 40083000 <ws+0x3a40>
    40014b74:	fd429c37 	ldr	d23, [x1, #1336]
          xxcon5 * (u[k][j][i+1][4]*rho_i[k][j][i+1] - 
    40014b78:	f0000361 	adrp	x1, 40083000 <ws+0x3a40>
    40014b7c:	fd42a038 	ldr	d24, [x1, #1344]
      for (i = 3; i <= grid_points[0]-4; i++) {
    40014b80:	51001009 	sub	w9, w0, #0x4
      for (i = 1; i <= grid_points[0]-2; i++) {
    40014b84:	51000806 	sub	w6, w0, #0x2
      i = grid_points[0]-3;
    40014b88:	51000c1e 	sub	w30, w0, #0x3
    40014b8c:	93407d27 	sxtw	x7, w9
    40014b90:	51001400 	sub	w0, w0, #0x5
    40014b94:	cb26c0e3 	sub	x3, x7, w6, sxtw
    40014b98:	93407cc1 	sxtw	x1, w6
    40014b9c:	9b227ccf 	smull	x15, w6, w2
      for (m = 0; m < 5; m++) {
        rhs[k][j][i][m] = rhs[k][j][i][m] - dssp *
    40014ba0:	900000cc 	adrp	x12, 4002c000 <z_idle_threads>
    40014ba4:	fd45ad85 	ldr	d5, [x12, #2904]
    40014ba8:	9b227c00 	smull	x0, w0, w2
    40014bac:	9b054c63 	madd	x3, x3, x5, x19
          xxcon2*con43 * (up1 - 2.0*uijk + um1) -
    40014bb0:	900000cb 	adrp	x11, 4002c000 <z_idle_threads>
    40014bb4:	fd456572 	ldr	d18, [x11, #2760]
               u[k][j][i-1][4]+ square[k][j][i-1])*
    40014bb8:	900000ca 	adrp	x10, 4002c000 <z_idle_threads>
    40014bbc:	fd441547 	ldr	d7, [x10, #2088]
          tx2 * ( (c1*u[k][j][i+1][4] - 
    40014bc0:	900000c8 	adrp	x8, 4002c000 <z_idle_threads>
    40014bc4:	fd440508 	ldr	d8, [x8, #2056]
    for (j = 1; j <= grid_points[1]-2; j++) {
    40014bc8:	51000884 	sub	w4, w4, #0x2
    40014bcc:	a90b0fe0 	stp	x0, x3, [sp, #176]
    40014bd0:	928004e0 	mov	x0, #0xffffffffffffffd8    	// #-40
    40014bd4:	93407fc3 	sxtw	x3, w30
    40014bd8:	9b007ce7 	mul	x7, x7, x0
    40014bdc:	cb26c063 	sub	x3, x3, w6, sxtw
    40014be0:	9b007c20 	mul	x0, x1, x0
          ( 5.0*u[k][j][i][m] - 4.0*u[k][j][i+1][m] +
    40014be4:	1e621003 	fmov	d3, #4.000000000000000000e+00
    40014be8:	9b220121 	smaddl	x1, w9, w2, x0
    40014bec:	a9092fec 	stp	x12, x11, [sp, #144]
    40014bf0:	9b2203de 	smaddl	x30, w30, w2, x0
    40014bf4:	f0000300 	adrp	x0, 40077000 <u+0x137e8>
    40014bf8:	911c0000 	add	x0, x0, #0x700
    40014bfc:	f9006be0 	str	x0, [sp, #208]
    40014c00:	f0000240 	adrp	x0, 4005f000 <rhs+0x13488>
    40014c04:	91216000 	add	x0, x0, #0x858
    40014c08:	f9006fe0 	str	x0, [sp, #216]
    40014c0c:	f0000320 	adrp	x0, 4007b000 <us+0x3900>
    40014c10:	91198000 	add	x0, x0, #0x660
    40014c14:	f90073e0 	str	x0, [sp, #224]
    40014c18:	f0000340 	adrp	x0, 4007f000 <vs+0x39a0>
    40014c1c:	91170000 	add	x0, x0, #0x5c0
    40014c20:	9b057c63 	mul	x3, x3, x5
    40014c24:	8b130038 	add	x24, x1, x19
    40014c28:	8b1303de 	add	x30, x30, x19
    40014c2c:	f90077e0 	str	x0, [sp, #232]
    40014c30:	f0000160 	adrp	x0, 40043000 <lhs+0x1c50>
    40014c34:	9132e000 	add	x0, x0, #0xcb8
          tx2 * ( (c1*u[k][j][i+1][4] - 
    40014c38:	52800025 	mov	w5, #0x1                   	// #1
    40014c3c:	a90a23ea 	stp	x10, x8, [sp, #160]
    40014c40:	f90063e3 	str	x3, [sp, #192]
    40014c44:	f9007be0 	str	x0, [sp, #240]
    40014c48:	f0000180 	adrp	x0, 40047000 <qs+0x3348>
    40014c4c:	91306000 	add	x0, x0, #0xc18
    40014c50:	f9007fe0 	str	x0, [sp, #248]
  for (k = 1; k <= grid_points[2]-2; k++) {
    40014c54:	b9408be0 	ldr	w0, [sp, #136]
    40014c58:	6b05001f 	cmp	w0, w5
    40014c5c:	54002a4b 	b.lt	400151a4 <compute_rhs+0x894>  // b.tstop
    40014c60:	5280a900 	mov	w0, #0x548                 	// #1352
    40014c64:	52834d03 	mov	w3, #0x1a68                	// #6760
    40014c68:	f00001a1 	adrp	x1, 4004b000 <rho_i+0x33e8>
    40014c6c:	912de021 	add	x1, x1, #0xb78
    40014c70:	9b207cb7 	smull	x23, w5, w0
    for (j = 1; j <= grid_points[1]-2; j++) {
    40014c74:	5280002a 	mov	w10, #0x1                   	// #1
    40014c78:	9b237ca3 	smull	x3, w5, w3
    40014c7c:	52800d16 	mov	w22, #0x68                  	// #104
    40014c80:	52804112 	mov	w18, #0x208                 	// #520
    40014c84:	14000091 	b	40014ec8 <compute_rhs+0x5b8>
          (u[k][j][i+1][0] - 2.0*u[k][j][i][0] + 
    40014c88:	6d7f8019 	ldp	d25, d0, [x0, #-8]
          xxcon2*con43 * (up1 - 2.0*uijk + um1) -
    40014c8c:	1e7208cb 	fmul	d11, d6, d18
          (u[k][j][i+1][1] - 2.0*u[k][j][i][1] + 
    40014c90:	fd400402 	ldr	d2, [x0, #8]
        up1  = us[k][j][i+1];
    40014c94:	11000610 	add	w16, w16, #0x1
          tx2 * (u[k][j][i+1][1] - u[k][j][i-1][1]);
    40014c98:	fc5e000a 	ldur	d10, [x0, #-32]
          (u[k][j][i+1][0] - 2.0*u[k][j][i][0] + 
    40014c9c:	1e602801 	fadd	d1, d0, d0
    40014ca0:	fd401400 	ldr	d0, [x0, #40]
          tx2 * (u[k][j][i+1][1] - u[k][j][i-1][1]);
    40014ca4:	fd401809 	ldr	d9, [x0, #48]
          (u[k][j][i+1][1] - 2.0*u[k][j][i][1] + 
    40014ca8:	1e622842 	fadd	d2, d2, d2
        uijk = us[k][j][i];
    40014cac:	6d7ffdda 	ldp	d26, d31, [x14, #-8]
          (u[k][j][i+1][0] - 2.0*u[k][j][i][0] + 
    40014cb0:	1e613800 	fsub	d0, d0, d1
    40014cb4:	fc5d8001 	ldur	d1, [x0, #-40]
          (u[k][j][i+1][1] - 2.0*u[k][j][i][1] + 
    40014cb8:	1e623922 	fsub	d2, d9, d2
        up1  = us[k][j][i+1];
    40014cbc:	fd4005dc 	ldr	d28, [x14, #8]
          xxcon2*con43 * (up1 - 2.0*uijk + um1) -
    40014cc0:	1e7f2bfe 	fadd	d30, d31, d31
              (u[k][j][i+1][4]- square[k][j][i+1]-
    40014cc4:	fd400a3d 	ldr	d29, [x17, #16]
               u[k][j][i-1][4]+ square[k][j][i-1])*
    40014cc8:	fc40863b 	ldr	d27, [x17], #8
          (u[k][j][i+1][0] - 2.0*u[k][j][i][0] + 
    40014ccc:	1e612800 	fadd	d0, d0, d1
        rhs[k][j][i][0] = rhs[k][j][i][0] + dx1tx1 * 
    40014cd0:	fd400101 	ldr	d1, [x8]
          (u[k][j][i+1][1] - 2.0*u[k][j][i][1] + 
    40014cd4:	1e6a2842 	fadd	d2, d2, d10
        rhs[k][j][i][0] = rhs[k][j][i][0] + dx1tx1 * 
    40014cd8:	1e700800 	fmul	d0, d0, d16
        rhs[k][j][i][1] = rhs[k][j][i][1] + dx2tx1 * 
    40014cdc:	1e710842 	fmul	d2, d2, d17
        rhs[k][j][i][0] = rhs[k][j][i][0] + dx1tx1 * 
    40014ce0:	1e612800 	fadd	d0, d0, d1
          tx2 * (u[k][j][i+1][1] - u[k][j][i-1][1]);
    40014ce4:	1e6a3921 	fsub	d1, d9, d10
              u[k][j][i-1][1]*um1 +
    40014ce8:	1e7a094a 	fmul	d10, d10, d26
          tx2 * (u[k][j][i+1][1]*up1 - 
    40014cec:	1e7c0929 	fmul	d9, d9, d28
          tx2 * (u[k][j][i+1][1] - u[k][j][i-1][1]);
    40014cf0:	1e640821 	fmul	d1, d1, d4
          tx2 * (u[k][j][i+1][1]*up1 - 
    40014cf4:	1e6a3929 	fsub	d9, d9, d10
           u[k][j][i-1][2]) +
    40014cf8:	fc5e800a 	ldur	d10, [x0, #-24]
           u[k][j][i-1][0]) -
    40014cfc:	1e613800 	fsub	d0, d0, d1
              (u[k][j][i+1][4]- square[k][j][i+1]-
    40014d00:	fd402401 	ldr	d1, [x0, #72]
        rhs[k][j][i][0] = rhs[k][j][i][0] + dx1tx1 * 
    40014d04:	fd000100 	str	d0, [x8]
        rhs[k][j][i][1] = rhs[k][j][i][1] + dx2tx1 * 
    40014d08:	fd400500 	ldr	d0, [x8, #8]
    40014d0c:	1e602842 	fadd	d2, d2, d0
          xxcon2*con43 * (up1 - 2.0*uijk + um1) -
    40014d10:	1e7e3b80 	fsub	d0, d28, d30
          xxcon4 * (up1*up1 -       2.0*uijk*uijk + 
    40014d14:	1e7f0bde 	fmul	d30, d30, d31
              um1*um1) +
    40014d18:	1e7a0b5f 	fmul	d31, d26, d26
          xxcon2*con43 * (up1 - 2.0*uijk + um1) -
    40014d1c:	1e7a2800 	fadd	d0, d0, d26
    40014d20:	1e6b0800 	fmul	d0, d0, d11
           u[k][j][i-1][1]) +
    40014d24:	1e602842 	fadd	d2, d2, d0
              (u[k][j][i+1][4]- square[k][j][i+1]-
    40014d28:	1e7d3820 	fsub	d0, d1, d29
                c2*square[k][j][i+1])*up1 -
    40014d2c:	1e670bbd 	fmul	d29, d29, d7
              (u[k][j][i+1][4]- square[k][j][i+1]-
    40014d30:	1e793800 	fsub	d0, d0, d25
               u[k][j][i-1][4]+ square[k][j][i-1])*
    40014d34:	1e7b2800 	fadd	d0, d0, d27
               c2*square[k][j][i-1])*um1 );
    40014d38:	1e670b7b 	fmul	d27, d27, d7
               u[k][j][i-1][4]+ square[k][j][i-1])*
    40014d3c:	1e670800 	fmul	d0, d0, d7
              u[k][j][i-1][1]*um1 +
    40014d40:	1e692800 	fadd	d0, d0, d9
        rhs[k][j][i][2] = rhs[k][j][i][2] + dx3tx1 * 
    40014d44:	fd400909 	ldr	d9, [x8, #16]
          tx2 * (u[k][j][i+1][1]*up1 - 
    40014d48:	1e640800 	fmul	d0, d0, d4
          xxcon2*con43 * (up1 - 2.0*uijk + um1) -
    40014d4c:	1e603842 	fsub	d2, d2, d0
          (u[k][j][i+1][2] - 2.0*u[k][j][i][2] +
    40014d50:	fd400800 	ldr	d0, [x0, #16]
    40014d54:	1e602800 	fadd	d0, d0, d0
        rhs[k][j][i][1] = rhs[k][j][i][1] + dx2tx1 * 
    40014d58:	fd000502 	str	d2, [x8, #8]
          (u[k][j][i+1][2] - 2.0*u[k][j][i][2] +
    40014d5c:	fd401c02 	ldr	d2, [x0, #56]
    40014d60:	1e603840 	fsub	d0, d2, d0
          tx2 * (u[k][j][i+1][2]*up1 - 
    40014d64:	1e7c0842 	fmul	d2, d2, d28
          (u[k][j][i+1][2] - 2.0*u[k][j][i][2] +
    40014d68:	1e6a2800 	fadd	d0, d0, d10
              u[k][j][i-1][2]*um1);
    40014d6c:	1e7a094a 	fmul	d10, d10, d26
        rhs[k][j][i][2] = rhs[k][j][i][2] + dx3tx1 * 
    40014d70:	1e730800 	fmul	d0, d0, d19
          tx2 * (u[k][j][i+1][2]*up1 - 
    40014d74:	1e6a3842 	fsub	d2, d2, d10
           u[k][j][i-1][3]) +
    40014d78:	fc5f000a 	ldur	d10, [x0, #-16]
        rhs[k][j][i][2] = rhs[k][j][i][2] + dx3tx1 * 
    40014d7c:	1e692800 	fadd	d0, d0, d9
          xxcon2 * (vs[k][j][i+1] - 2.0*vs[k][j][i] +
    40014d80:	fd4001a9 	ldr	d9, [x13]
          tx2 * (u[k][j][i+1][2]*up1 - 
    40014d84:	1e640842 	fmul	d2, d2, d4
          xxcon2 * (vs[k][j][i+1] - 2.0*vs[k][j][i] +
    40014d88:	1e69292b 	fadd	d11, d9, d9
    40014d8c:	fd4005a9 	ldr	d9, [x13, #8]
    40014d90:	1e6b3929 	fsub	d9, d9, d11
    40014d94:	fc5f81ab 	ldur	d11, [x13, #-8]
    40014d98:	1e6b2929 	fadd	d9, d9, d11
    40014d9c:	1e660929 	fmul	d9, d9, d6
           u[k][j][i-1][2]) +
    40014da0:	1e692809 	fadd	d9, d0, d9
          (u[k][j][i+1][3] - 2.0*u[k][j][i][3] +
    40014da4:	fd400c00 	ldr	d0, [x0, #24]
    40014da8:	1e602800 	fadd	d0, d0, d0
              vs[k][j][i-1]) -
    40014dac:	1e623922 	fsub	d2, d9, d2
        rhs[k][j][i][3] = rhs[k][j][i][3] + dx4tx1 * 
    40014db0:	fd400d09 	ldr	d9, [x8, #24]
        rhs[k][j][i][2] = rhs[k][j][i][2] + dx3tx1 * 
    40014db4:	fd000902 	str	d2, [x8, #16]
          (u[k][j][i+1][3] - 2.0*u[k][j][i][3] +
    40014db8:	fd402002 	ldr	d2, [x0, #64]
    40014dbc:	1e603840 	fsub	d0, d2, d0
          tx2 * (u[k][j][i+1][3]*up1 - 
    40014dc0:	1e7c0842 	fmul	d2, d2, d28
          (u[k][j][i+1][3] - 2.0*u[k][j][i][3] +
    40014dc4:	1e6a2800 	fadd	d0, d0, d10
              u[k][j][i-1][3]*um1);
    40014dc8:	1e7a094a 	fmul	d10, d10, d26
        rhs[k][j][i][3] = rhs[k][j][i][3] + dx4tx1 * 
    40014dcc:	1e740800 	fmul	d0, d0, d20
          tx2 * (u[k][j][i+1][3]*up1 - 
    40014dd0:	1e6a3842 	fsub	d2, d2, d10
        rhs[k][j][i][3] = rhs[k][j][i][3] + dx4tx1 * 
    40014dd4:	1e692800 	fadd	d0, d0, d9
          xxcon2 * (ws[k][j][i+1] - 2.0*ws[k][j][i] +
    40014dd8:	fd400189 	ldr	d9, [x12]
          tx2 * (u[k][j][i+1][3]*up1 - 
    40014ddc:	1e640842 	fmul	d2, d2, d4
          xxcon2 * (ws[k][j][i+1] - 2.0*ws[k][j][i] +
    40014de0:	1e69292b 	fadd	d11, d9, d9
    40014de4:	fd400589 	ldr	d9, [x12, #8]
    40014de8:	1e6b3929 	fsub	d9, d9, d11
    40014dec:	fc5f818b 	ldur	d11, [x12, #-8]
    40014df0:	1e6b2929 	fadd	d9, d9, d11
    40014df4:	1e660929 	fmul	d9, d9, d6
           u[k][j][i-1][3]) +
    40014df8:	1e692809 	fadd	d9, d0, d9
              ws[k][j][i-1]) -
    40014dfc:	1e623922 	fsub	d2, d9, d2
        rhs[k][j][i][3] = rhs[k][j][i][3] + dx4tx1 * 
    40014e00:	fd000d02 	str	d2, [x8, #24]
          xxcon3 * (qs[k][j][i+1] - 2.0*qs[k][j][i] +
    40014e04:	fd400160 	ldr	d0, [x11]
          (u[k][j][i+1][4] - 2.0*u[k][j][i][4] +
    40014e08:	fd401009 	ldr	d9, [x0, #32]
        rhs[k][j][i][4] = rhs[k][j][i][4] + dx5tx1 * 
    40014e0c:	fd40110a 	ldr	d10, [x8, #32]
          xxcon3 * (qs[k][j][i+1] - 2.0*qs[k][j][i] +
    40014e10:	1e602802 	fadd	d2, d0, d0
    40014e14:	fd400560 	ldr	d0, [x11, #8]
          (u[k][j][i+1][4] - 2.0*u[k][j][i][4] +
    40014e18:	1e692929 	fadd	d9, d9, d9
          xxcon3 * (qs[k][j][i+1] - 2.0*qs[k][j][i] +
    40014e1c:	1e623800 	fsub	d0, d0, d2
    40014e20:	fc5f8162 	ldur	d2, [x11, #-8]
    40014e24:	1e622800 	fadd	d0, d0, d2
          (u[k][j][i+1][4] - 2.0*u[k][j][i][4] +
    40014e28:	1e693822 	fsub	d2, d1, d9
    40014e2c:	1e792842 	fadd	d2, d2, d25
          xxcon3 * (qs[k][j][i+1] - 2.0*qs[k][j][i] +
    40014e30:	1e760800 	fmul	d0, d0, d22
        rhs[k][j][i][4] = rhs[k][j][i][4] + dx5tx1 * 
    40014e34:	1e750842 	fmul	d2, d2, d21
    40014e38:	1e6a2842 	fadd	d2, d2, d10
           u[k][j][i-1][4]) +
    40014e3c:	1e622800 	fadd	d0, d0, d2
          xxcon4 * (up1*up1 -       2.0*uijk*uijk + 
    40014e40:	1e7c0b82 	fmul	d2, d28, d28
    40014e44:	1e7e385e 	fsub	d30, d2, d30
          xxcon5 * (u[k][j][i+1][4]*rho_i[k][j][i+1] - 
    40014e48:	6d40084a 	ldp	d10, d2, [x2]
          xxcon4 * (up1*up1 -       2.0*uijk*uijk + 
    40014e4c:	1e7f2bde 	fadd	d30, d30, d31
          xxcon5 * (u[k][j][i+1][4]*rho_i[k][j][i+1] - 
    40014e50:	1e620822 	fmul	d2, d1, d2
              2.0*u[k][j][i][4]*rho_i[k][j][i] +
    40014e54:	1e6a0929 	fmul	d9, d9, d10
          tx2 * ( (c1*u[k][j][i+1][4] - 
    40014e58:	1e680821 	fmul	d1, d1, d8
          xxcon4 * (up1*up1 -       2.0*uijk*uijk + 
    40014e5c:	1e770bde 	fmul	d30, d30, d23
          xxcon5 * (u[k][j][i+1][4]*rho_i[k][j][i+1] - 
    40014e60:	1e693842 	fsub	d2, d2, d9
              u[k][j][i-1][4]*rho_i[k][j][i-1]) -
    40014e64:	fc5f8049 	ldur	d9, [x2, #-8]
          tx2 * ( (c1*u[k][j][i+1][4] - 
    40014e68:	1e7d3821 	fsub	d1, d1, d29
              u[k][j][i-1][4]*rho_i[k][j][i-1]) -
    40014e6c:	1e690b29 	fmul	d9, d25, d9
              (c1*u[k][j][i-1][4] - 
    40014e70:	1e680b39 	fmul	d25, d25, d8
              qs[k][j][i-1]) +
    40014e74:	1e7e2800 	fadd	d0, d0, d30
                c2*square[k][j][i+1])*up1 -
    40014e78:	1e7c0821 	fmul	d1, d1, d28
              (c1*u[k][j][i-1][4] - 
    40014e7c:	1e7b3b39 	fsub	d25, d25, d27
              2.0*u[k][j][i][4]*rho_i[k][j][i] +
    40014e80:	1e692842 	fadd	d2, d2, d9
               c2*square[k][j][i-1])*um1 );
    40014e84:	1e7a0b3a 	fmul	d26, d25, d26
          xxcon5 * (u[k][j][i+1][4]*rho_i[k][j][i+1] - 
    40014e88:	1e780842 	fmul	d2, d2, d24
                c2*square[k][j][i+1])*up1 -
    40014e8c:	1e7a3821 	fsub	d1, d1, d26
              um1*um1) +
    40014e90:	1e622800 	fadd	d0, d0, d2
          tx2 * ( (c1*u[k][j][i+1][4] - 
    40014e94:	1e640821 	fmul	d1, d1, d4
              u[k][j][i-1][4]*rho_i[k][j][i-1]) -
    40014e98:	1e613800 	fsub	d0, d0, d1
        rhs[k][j][i][4] = rhs[k][j][i][4] + dx5tx1 * 
    40014e9c:	fd001100 	str	d0, [x8, #32]
      for (i = 1; i <= grid_points[0]-2; i++) {
    40014ea0:	910021ce 	add	x14, x14, #0x8
    40014ea4:	9100a108 	add	x8, x8, #0x28
    40014ea8:	9100a000 	add	x0, x0, #0x28
    40014eac:	910021ad 	add	x13, x13, #0x8
    40014eb0:	9100218c 	add	x12, x12, #0x8
    40014eb4:	9100216b 	add	x11, x11, #0x8
    40014eb8:	91002042 	add	x2, x2, #0x8
    40014ebc:	6b1000df 	cmp	w6, w16
    40014ec0:	54ffee4a 	b.ge	40014c88 <compute_rhs+0x378>  // b.tcont
    for (j = 1; j <= grid_points[1]-2; j++) {
    40014ec4:	1100054a 	add	w10, w10, #0x1
    40014ec8:	6b0a009f 	cmp	w4, w10
    40014ecc:	5400024b 	b.lt	40014f14 <compute_rhs+0x604>  // b.tstop
    40014ed0:	a94d2fe0 	ldp	x0, x11, [sp, #208]
    40014ed4:	9b365d42 	smaddl	x2, w10, w22, x23
    40014ed8:	f9407ff0 	ldr	x16, [sp, #248]
    40014edc:	8b0b0051 	add	x17, x2, x11
    40014ee0:	8b00004e 	add	x14, x2, x0
    40014ee4:	f94073eb 	ldr	x11, [sp, #224]
    40014ee8:	9b320d40 	smaddl	x0, w10, w18, x3
    40014eec:	8b0b004d 	add	x13, x2, x11
    40014ef0:	8b000028 	add	x8, x1, x0
    40014ef4:	f94077eb 	ldr	x11, [sp, #232]
    40014ef8:	8b000260 	add	x0, x19, x0
    40014efc:	8b0b004c 	add	x12, x2, x11
    40014f00:	f9407beb 	ldr	x11, [sp, #240]
    40014f04:	8b0b004b 	add	x11, x2, x11
    40014f08:	8b100042 	add	x2, x2, x16
      for (i = 1; i <= grid_points[0]-2; i++) {
    40014f0c:	52800030 	mov	w16, #0x1                   	// #1
    40014f10:	17ffffe4 	b	40014ea0 <compute_rhs+0x590>
    40014f14:	9108c060 	add	x0, x3, #0x230
    for (j = 1; j <= grid_points[1]-2; j++) {
    40014f18:	5280002b 	mov	w11, #0x1                   	// #1
    40014f1c:	8b000028 	add	x8, x1, x0
    40014f20:	8b000260 	add	x0, x19, x0
          ( 5.0*u[k][j][i][m] - 4.0*u[k][j][i+1][m] +
    40014f24:	1e629002 	fmov	d2, #5.000000000000000000e+00
          (-4.0*u[k][j][i-1][m] + 6.0*u[k][j][i][m] -
    40014f28:	1e721009 	fmov	d9, #-4.000000000000000000e+00
    40014f2c:	1e63100a 	fmov	d10, #6.000000000000000000e+00
    for (j = 1; j <= grid_points[1]-2; j++) {
    40014f30:	6b0b009f 	cmp	w4, w11
    40014f34:	540001ca 	b.ge	40014f6c <compute_rhs+0x65c>  // b.tcont
    40014f38:	9101e070 	add	x16, x3, #0x78
    40014f3c:	d280410b 	mov	x11, #0x208                 	// #520
    for (j = 1; j <= grid_points[1]-2; j++) {
    40014f40:	5280002c 	mov	w12, #0x1                   	// #1
            (  u[k][j][i-2][m] - 4.0*u[k][j][i-1][m] + 
    40014f44:	928004f1 	mov	x17, #0xffffffffffffffd8    	// #-40
               6.0*u[k][j][i][m] - 4.0*u[k][j][i+1][m] + 
    40014f48:	1e631002 	fmov	d2, #6.000000000000000000e+00
    40014f4c:	d2800512 	mov	x18, #0x28                  	// #40
               u[k][j][i+2][m] );
    40014f50:	d2800a16 	mov	x22, #0x50                  	// #80
    for (j = 1; j <= grid_points[1]-2; j++) {
    40014f54:	6b0c009f 	cmp	w4, w12
    40014f58:	54000b6b 	b.lt	400150c4 <compute_rhs+0x7b4>  // b.tstop
    40014f5c:	8b0b0208 	add	x8, x16, x11
    40014f60:	92800ee0 	mov	x0, #0xffffffffffffff88    	// #-120
      for (i = 3; i <= grid_points[0]-4; i++) {
    40014f64:	5280006a 	mov	w10, #0x3                   	// #3
    40014f68:	14000052 	b	400150b0 <compute_rhs+0x7a0>
    40014f6c:	aa0003e2 	mov	x2, x0
    40014f70:	aa0803ec 	mov	x12, x8
      for (m = 0; m < 5; m++) {
    40014f74:	5280000a 	mov	w10, #0x0                   	// #0
          ( 5.0*u[k][j][i][m] - 4.0*u[k][j][i+1][m] +
    40014f78:	fd400040 	ldr	d0, [x2]
      for (m = 0; m < 5; m++) {
    40014f7c:	1100054a 	add	w10, w10, #0x1
          ( 5.0*u[k][j][i][m] - 4.0*u[k][j][i+1][m] +
    40014f80:	fd401441 	ldr	d1, [x2, #40]
      for (m = 0; m < 5; m++) {
    40014f84:	7100155f 	cmp	w10, #0x5
    40014f88:	91002042 	add	x2, x2, #0x8
          ( 5.0*u[k][j][i][m] - 4.0*u[k][j][i+1][m] +
    40014f8c:	1e620800 	fmul	d0, d0, d2
    40014f90:	1e630821 	fmul	d1, d1, d3
    40014f94:	1e613800 	fsub	d0, d0, d1
    40014f98:	fd402441 	ldr	d1, [x2, #72]
    40014f9c:	1e612800 	fadd	d0, d0, d1
        rhs[k][j][i][m] = rhs[k][j][i][m]- dssp * 
    40014fa0:	fd400181 	ldr	d1, [x12]
    40014fa4:	1e650800 	fmul	d0, d0, d5
    40014fa8:	1e603820 	fsub	d0, d1, d0
    40014fac:	fc008580 	str	d0, [x12], #8
      for (m = 0; m < 5; m++) {
    40014fb0:	54fffe41 	b.ne	40014f78 <compute_rhs+0x668>  // b.any
    40014fb4:	d100a10a 	sub	x10, x8, #0x28
    40014fb8:	d100a002 	sub	x2, x0, #0x28
      for (m = 0; m < 5; m++) {
    40014fbc:	5280000c 	mov	w12, #0x0                   	// #0
          (-4.0*u[k][j][i-1][m] + 6.0*u[k][j][i][m] -
    40014fc0:	fd401440 	ldr	d0, [x2, #40]
      for (m = 0; m < 5; m++) {
    40014fc4:	1100058c 	add	w12, w12, #0x1
          (-4.0*u[k][j][i-1][m] + 6.0*u[k][j][i][m] -
    40014fc8:	fd402841 	ldr	d1, [x2, #80]
      for (m = 0; m < 5; m++) {
    40014fcc:	7100159f 	cmp	w12, #0x5
    40014fd0:	91002042 	add	x2, x2, #0x8
    40014fd4:	9100214a 	add	x10, x10, #0x8
          (-4.0*u[k][j][i-1][m] + 6.0*u[k][j][i][m] -
    40014fd8:	1e690800 	fmul	d0, d0, d9
    40014fdc:	1e6a0821 	fmul	d1, d1, d10
    40014fe0:	1e612800 	fadd	d0, d0, d1
           4.0*u[k][j][i+1][m] + u[k][j][i+2][m]);
    40014fe4:	fd403841 	ldr	d1, [x2, #112]
    40014fe8:	1e630821 	fmul	d1, d1, d3
          (-4.0*u[k][j][i-1][m] + 6.0*u[k][j][i][m] -
    40014fec:	1e613800 	fsub	d0, d0, d1
           4.0*u[k][j][i+1][m] + u[k][j][i+2][m]);
    40014ff0:	fd404c41 	ldr	d1, [x2, #152]
    40014ff4:	1e612800 	fadd	d0, d0, d1
        rhs[k][j][i][m] = rhs[k][j][i][m] - dssp * 
    40014ff8:	fd402541 	ldr	d1, [x10, #72]
    40014ffc:	1e650800 	fmul	d0, d0, d5
    40015000:	1e603820 	fsub	d0, d1, d0
    40015004:	fd002540 	str	d0, [x10, #72]
      for (m = 0; m < 5; m++) {
    40015008:	54fffdc1 	b.ne	40014fc0 <compute_rhs+0x6b0>  // b.any
    for (j = 1; j <= grid_points[1]-2; j++) {
    4001500c:	1100056b 	add	w11, w11, #0x1
    40015010:	91082108 	add	x8, x8, #0x208
    40015014:	91082000 	add	x0, x0, #0x208
    40015018:	17ffffc6 	b	40014f30 <compute_rhs+0x620>
            (  u[k][j][i-2][m] - 4.0*u[k][j][i-1][m] + 
    4001501c:	928009f7 	mov	x23, #0xffffffffffffffb0    	// #-80
    40015020:	cb0002fc 	sub	x28, x23, x0
               6.0*u[k][j][i][m] - 4.0*u[k][j][i+1][m] + 
    40015024:	cb000257 	sub	x23, x18, x0
    40015028:	8b08002e 	add	x14, x1, x8
    4001502c:	8b080262 	add	x2, x19, x8
            (  u[k][j][i-2][m] - 4.0*u[k][j][i-1][m] + 
    40015030:	cb00023b 	sub	x27, x17, x0
               6.0*u[k][j][i][m] - 4.0*u[k][j][i+1][m] + 
    40015034:	f90067f7 	str	x23, [sp, #200]
               u[k][j][i+2][m] );
    40015038:	cb0002d7 	sub	x23, x22, x0
        for (m = 0; m < 5; m++) {
    4001503c:	5280000d 	mov	w13, #0x0                   	// #0
            (  u[k][j][i-2][m] - 4.0*u[k][j][i-1][m] + 
    40015040:	8b02037a 	add	x26, x27, x2
    40015044:	8b020399 	add	x25, x28, x2
        for (m = 0; m < 5; m++) {
    40015048:	110005ad 	add	w13, w13, #0x1
    4001504c:	710015bf 	cmp	w13, #0x5
            (  u[k][j][i-2][m] - 4.0*u[k][j][i-1][m] + 
    40015050:	fc606b40 	ldr	d0, [x26, x0]
    40015054:	1e630801 	fmul	d1, d0, d3
    40015058:	fc606b20 	ldr	d0, [x25, x0]
               6.0*u[k][j][i][m] - 4.0*u[k][j][i+1][m] + 
    4001505c:	f94067f9 	ldr	x25, [sp, #200]
            (  u[k][j][i-2][m] - 4.0*u[k][j][i-1][m] + 
    40015060:	1e613800 	fsub	d0, d0, d1
               6.0*u[k][j][i][m] - 4.0*u[k][j][i+1][m] + 
    40015064:	fd400041 	ldr	d1, [x2]
    40015068:	8b020339 	add	x25, x25, x2
    4001506c:	1e620821 	fmul	d1, d1, d2
            (  u[k][j][i-2][m] - 4.0*u[k][j][i-1][m] + 
    40015070:	1e612800 	fadd	d0, d0, d1
               6.0*u[k][j][i][m] - 4.0*u[k][j][i+1][m] + 
    40015074:	fc606b21 	ldr	d1, [x25, x0]
               u[k][j][i+2][m] );
    40015078:	8b0202f9 	add	x25, x23, x2
        for (m = 0; m < 5; m++) {
    4001507c:	91002042 	add	x2, x2, #0x8
               6.0*u[k][j][i][m] - 4.0*u[k][j][i+1][m] + 
    40015080:	1e630821 	fmul	d1, d1, d3
    40015084:	1e613800 	fsub	d0, d0, d1
    40015088:	fc606b21 	ldr	d1, [x25, x0]
    4001508c:	1e612800 	fadd	d0, d0, d1
          rhs[k][j][i][m] = rhs[k][j][i][m] - dssp * 
    40015090:	fd4001c1 	ldr	d1, [x14]
    40015094:	1e650800 	fmul	d0, d0, d5
    40015098:	1e603820 	fsub	d0, d1, d0
    4001509c:	fc0085c0 	str	d0, [x14], #8
        for (m = 0; m < 5; m++) {
    400150a0:	54fffd01 	b.ne	40015040 <compute_rhs+0x730>  // b.any
               6.0*u[k][j][i][m] - 4.0*u[k][j][i+1][m] + 
    400150a4:	1100054a 	add	w10, w10, #0x1
    400150a8:	d100a000 	sub	x0, x0, #0x28
    400150ac:	9100a108 	add	x8, x8, #0x28
      for (i = 3; i <= grid_points[0]-4; i++) {
    400150b0:	6b0a013f 	cmp	w9, w10
    400150b4:	54fffb4a 	b.ge	4001501c <compute_rhs+0x70c>  // b.tcont
    for (j = 1; j <= grid_points[1]-2; j++) {
    400150b8:	1100058c 	add	w12, w12, #0x1
    400150bc:	9108216b 	add	x11, x11, #0x208
    400150c0:	17ffffa5 	b	40014f54 <compute_rhs+0x644>
    400150c4:	910821e0 	add	x0, x15, #0x208
    for (j = 1; j <= grid_points[1]-2; j++) {
    400150c8:	52800028 	mov	w8, #0x1                   	// #1
    400150cc:	8b030003 	add	x3, x0, x3
          ( u[k][j][i-2][m] - 4.0*u[k][j][i-1][m] + 
            6.0*u[k][j][i][m] - 4.0*u[k][j][i+1][m] );
    400150d0:	1e631002 	fmov	d2, #6.000000000000000000e+00

      i = grid_points[0]-2;
      for (m = 0; m < 5; m++) {
        rhs[k][j][i][m] = rhs[k][j][i][m] - dssp *
          ( u[k][j][i-2][m] - 4.*u[k][j][i-1][m] +
            5.*u[k][j][i][m] );
    400150d4:	1e629009 	fmov	d9, #5.000000000000000000e+00
    for (j = 1; j <= grid_points[1]-2; j++) {
    400150d8:	6b08009f 	cmp	w4, w8
    400150dc:	5400006a 	b.ge	400150e8 <compute_rhs+0x7d8>  // b.tcont
  for (k = 1; k <= grid_points[2]-2; k++) {
    400150e0:	110004a5 	add	w5, w5, #0x1
    400150e4:	17fffedc 	b	40014c54 <compute_rhs+0x344>
    400150e8:	f9405fe0 	ldr	x0, [sp, #184]
      for (m = 0; m < 5; m++) {
    400150ec:	5280000a 	mov	w10, #0x0                   	// #0
    400150f0:	8b000062 	add	x2, x3, x0
    400150f4:	f94063e0 	ldr	x0, [sp, #192]
    400150f8:	8b000060 	add	x0, x3, x0
          ( u[k][j][i-2][m] - 4.0*u[k][j][i-1][m] + 
    400150fc:	f9405beb 	ldr	x11, [sp, #176]
      for (m = 0; m < 5; m++) {
    40015100:	1100054a 	add	w10, w10, #0x1
          ( u[k][j][i-2][m] - 4.0*u[k][j][i-1][m] + 
    40015104:	fd400040 	ldr	d0, [x2]
      for (m = 0; m < 5; m++) {
    40015108:	7100155f 	cmp	w10, #0x5
          ( u[k][j][i-2][m] - 4.0*u[k][j][i-1][m] + 
    4001510c:	8b0b004b 	add	x11, x2, x11
    40015110:	1e630801 	fmul	d1, d0, d3
    40015114:	fc676960 	ldr	d0, [x11, x7]
            6.0*u[k][j][i][m] - 4.0*u[k][j][i+1][m] );
    40015118:	8b0f004b 	add	x11, x2, x15
      for (m = 0; m < 5; m++) {
    4001511c:	91002042 	add	x2, x2, #0x8
          ( u[k][j][i-2][m] - 4.0*u[k][j][i-1][m] + 
    40015120:	1e613800 	fsub	d0, d0, d1
            6.0*u[k][j][i][m] - 4.0*u[k][j][i+1][m] );
    40015124:	fc606a61 	ldr	d1, [x19, x0]
    40015128:	1e620821 	fmul	d1, d1, d2
          ( u[k][j][i-2][m] - 4.0*u[k][j][i-1][m] + 
    4001512c:	1e612800 	fadd	d0, d0, d1
            6.0*u[k][j][i][m] - 4.0*u[k][j][i+1][m] );
    40015130:	fc676961 	ldr	d1, [x11, x7]
    40015134:	1e630821 	fmul	d1, d1, d3
    40015138:	1e613800 	fsub	d0, d0, d1
        rhs[k][j][i][m] = rhs[k][j][i][m] - dssp *
    4001513c:	fc606821 	ldr	d1, [x1, x0]
    40015140:	1e650800 	fmul	d0, d0, d5
    40015144:	1e603820 	fsub	d0, d1, d0
    40015148:	fc206820 	str	d0, [x1, x0]
      for (m = 0; m < 5; m++) {
    4001514c:	91002000 	add	x0, x0, #0x8
    40015150:	54fffd61 	b.ne	400150fc <compute_rhs+0x7ec>  // b.any
    40015154:	aa0303e0 	mov	x0, x3
      for (m = 0; m < 5; m++) {
    40015158:	52800002 	mov	w2, #0x0                   	// #0
          ( u[k][j][i-2][m] - 4.*u[k][j][i-1][m] +
    4001515c:	fc606bc0 	ldr	d0, [x30, x0]
      for (m = 0; m < 5; m++) {
    40015160:	11000442 	add	w2, w2, #0x1
    40015164:	7100145f 	cmp	w2, #0x5
          ( u[k][j][i-2][m] - 4.*u[k][j][i-1][m] +
    40015168:	1e630801 	fmul	d1, d0, d3
    4001516c:	fc606b00 	ldr	d0, [x24, x0]
    40015170:	1e613800 	fsub	d0, d0, d1
            5.*u[k][j][i][m] );
    40015174:	fc606a61 	ldr	d1, [x19, x0]
    40015178:	1e690821 	fmul	d1, d1, d9
          ( u[k][j][i-2][m] - 4.*u[k][j][i-1][m] +
    4001517c:	1e612800 	fadd	d0, d0, d1
        rhs[k][j][i][m] = rhs[k][j][i][m] - dssp *
    40015180:	fc606821 	ldr	d1, [x1, x0]
    40015184:	1e650800 	fmul	d0, d0, d5
    40015188:	1e603820 	fsub	d0, d1, d0
    4001518c:	fc206820 	str	d0, [x1, x0]
      for (m = 0; m < 5; m++) {
    40015190:	91002000 	add	x0, x0, #0x8
    40015194:	54fffe41 	b.ne	4001515c <compute_rhs+0x84c>  // b.any
    for (j = 1; j <= grid_points[1]-2; j++) {
    40015198:	11000508 	add	w8, w8, #0x1
    4001519c:	91082063 	add	x3, x3, #0x208
    400151a0:	17ffffce 	b	400150d8 <compute_rhs+0x7c8>
      }
    }
  }
  if (timeron) timer_stop(t_rhsx);
    400151a4:	b94a8e80 	ldr	w0, [x20, #2700]
    400151a8:	340000e0 	cbz	w0, 400151c4 <compute_rhs+0x8b4>
    400151ac:	52800040 	mov	w0, #0x2                   	// #2
    400151b0:	97fff5a3 	bl	4001283c <timer_stop>

  if (timeron) timer_start(t_rhsy);
    400151b4:	b94a8e80 	ldr	w0, [x20, #2700]
    400151b8:	34000060 	cbz	w0, 400151c4 <compute_rhs+0x8b4>
    400151bc:	52800060 	mov	w0, #0x3                   	// #3
    400151c0:	97fff592 	bl	40012808 <timer_start>
  //---------------------------------------------------------------------
  // compute eta-direction fluxes 
  //---------------------------------------------------------------------
  for (k = 1; k <= grid_points[2]-2; k++) {
    400151c4:	294082a2 	ldp	w2, w0, [x21, #4]
    400151c8:	52804105 	mov	w5, #0x208                 	// #520
    400151cc:	928040e6 	mov	x6, #0xfffffffffffffdf8    	// #-520
          (u[k][j+1][i][2] - 2.0*u[k][j][i][2] + 
           u[k][j-1][i][2]) +
          yycon2*con43 * (vp1 - 2.0*vijk + vm1) -
          ty2 * (u[k][j+1][i][2]*vp1 - 
              u[k][j-1][i][2]*vm1 +
              (u[k][j+1][i][4] - square[k][j+1][i] - 
    400151d0:	d000024c 	adrp	x12, 4005f000 <rhs+0x13488>
    400151d4:	9121618c 	add	x12, x12, #0x858
  for (k = 1; k <= grid_points[2]-2; k++) {
    400151d8:	51000800 	sub	w0, w0, #0x2
    400151dc:	b900b3e0 	str	w0, [sp, #176]
    for (j = 1; j <= grid_points[1]-2; j++) {
    400151e0:	5100084e 	sub	w14, w2, #0x2

    //---------------------------------------------------------------------
    // add fourth order eta-direction dissipation         
    //---------------------------------------------------------------------
    j = 1;
    for (i = 1; i <= grid_points[0]-2; i++) {
    400151e4:	f94043e0 	ldr	x0, [sp, #128]
          (-4.0*u[k][j-1][i][m] + 6.0*u[k][j][i][m] -
           4.0*u[k][j+1][i][m] + u[k][j+2][i][m]);
      }
    }

    for (j = 3; j <= grid_points[1]-4; j++) {
    400151e8:	5100105b 	sub	w27, w2, #0x4
          yycon2 * (ws[k][j+1][i] - 2.0*ws[k][j][i] + 
    400151ec:	d0000348 	adrp	x8, 4007f000 <vs+0x39a0>
    400151f0:	91170108 	add	x8, x8, #0x5c0
          yycon3 * (qs[k][j+1][i] - 2.0*qs[k][j][i] + 
    400151f4:	d0000169 	adrp	x9, 40043000 <lhs+0x1c50>
    400151f8:	9132e129 	add	x9, x9, #0xcb8
    for (i = 1; i <= grid_points[0]-2; i++) {
    400151fc:	b94a8001 	ldr	w1, [x0, #2688]
    40015200:	9b257f64 	smull	x4, w27, w5
    }

    j = grid_points[1]-2;
    for (i = 1; i <= grid_points[0]-2; i++) {
      for (m = 0; m < 5; m++) {
        rhs[k][j][i][m] = rhs[k][j][i][m] - dssp *
    40015204:	f9404be0 	ldr	x0, [sp, #144]
          yycon5 * (u[k][j+1][i][4]*rho_i[k][j+1][i] - 
    40015208:	d000018a 	adrp	x10, 40047000 <qs+0x3348>
    4001520c:	9130614a 	add	x10, x10, #0xc18
    for (i = 1; i <= grid_points[0]-2; i++) {
    40015210:	51000821 	sub	w1, w1, #0x2
        rhs[k][j][i][m] = rhs[k][j][i][m] - dssp *
    40015214:	fd45ac04 	ldr	d4, [x0, #2904]
        rhs[k][j][i][0] = rhs[k][j][i][0] + dy1ty1 * 
    40015218:	f00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    4001521c:	fd460011 	ldr	d17, [x0, #3072]
          ty2 * (u[k][j+1][i][2] - u[k][j-1][i][2]);
    40015220:	d0000260 	adrp	x0, 40063000 <square+0x37a8>
    40015224:	fd43f803 	ldr	d3, [x0, #2032]
        rhs[k][j][i][1] = rhs[k][j][i][1] + dy2ty1 * 
    40015228:	f00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    4001522c:	fd460812 	ldr	d18, [x0, #3088]
          yycon2 * (us[k][j+1][i] - 2.0*us[k][j][i] + 
    40015230:	d0000360 	adrp	x0, 40083000 <ws+0x3a40>
    40015234:	fd42a805 	ldr	d5, [x0, #1360]
        rhs[k][j][i][2] = rhs[k][j][i][2] + dy3ty1 * 
    40015238:	f00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    4001523c:	fd461013 	ldr	d19, [x0, #3104]
          yycon2*con43 * (vp1 - 2.0*vijk + vm1) -
    40015240:	f9404fe0 	ldr	x0, [sp, #152]
    40015244:	fd456414 	ldr	d20, [x0, #2760]
              *c2);
    40015248:	f94053e0 	ldr	x0, [sp, #160]
    4001524c:	fd441406 	ldr	d6, [x0, #2088]
        rhs[k][j][i][3] = rhs[k][j][i][3] + dy4ty1 * 
    40015250:	f00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    40015254:	fd461815 	ldr	d21, [x0, #3120]
        rhs[k][j][i][4] = rhs[k][j][i][4] + dy5ty1 * 
    40015258:	f00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    4001525c:	fd462016 	ldr	d22, [x0, #3136]
          yycon3 * (qs[k][j+1][i] - 2.0*qs[k][j][i] + 
    40015260:	d0000360 	adrp	x0, 40083000 <ws+0x3a40>
    40015264:	fd42ac17 	ldr	d23, [x0, #1368]
          yycon4 * (vp1*vp1       - 2.0*vijk*vijk + 
    40015268:	d0000360 	adrp	x0, 40083000 <ws+0x3a40>
    4001526c:	fd42b018 	ldr	d24, [x0, #1376]
          yycon5 * (u[k][j+1][i][4]*rho_i[k][j+1][i] - 
    40015270:	d0000360 	adrp	x0, 40083000 <ws+0x3a40>
    40015274:	fd42b419 	ldr	d25, [x0, #1384]
          ty2 * ((c1*u[k][j+1][i][4] - 
    40015278:	f94057e0 	ldr	x0, [sp, #168]
    4001527c:	fd440410 	ldr	d16, [x0, #2056]
    j = grid_points[1]-3;
    40015280:	51000c40 	sub	w0, w2, #0x3
    40015284:	51001442 	sub	w2, w2, #0x5
    40015288:	9b257c03 	smull	x3, w0, w5
    4001528c:	f9006fe3 	str	x3, [sp, #216]
    40015290:	9b257dc3 	smull	x3, w14, w5
    40015294:	f90047e3 	str	x3, [sp, #136]
    40015298:	93407dc3 	sxtw	x3, w14
    4001529c:	9b067c63 	mul	x3, x3, x6
    400152a0:	8b030087 	add	x7, x4, x3
    400152a4:	8b07027e 	add	x30, x19, x7
    400152a8:	9b257c07 	smull	x7, w0, w5
    400152ac:	93407c00 	sxtw	x0, w0
    400152b0:	8b070063 	add	x3, x3, x7
          yycon2 * (us[k][j+1][i] - 2.0*us[k][j][i] + 
    400152b4:	d0000307 	adrp	x7, 40077000 <u+0x137e8>
    400152b8:	911c00e7 	add	x7, x7, #0x700
    400152bc:	8b030263 	add	x3, x19, x3
    400152c0:	9b067c00 	mul	x0, x0, x6
        vijk = vs[k][j][i];
    400152c4:	d0000326 	adrp	x6, 4007b000 <us+0x3900>
    400152c8:	911980c6 	add	x6, x6, #0x660
    400152cc:	9b250042 	smaddl	x2, w2, w5, x0
    400152d0:	8b000084 	add	x4, x4, x0
    j = grid_points[1]-3;
    400152d4:	52800025 	mov	w5, #0x1                   	// #1
    400152d8:	8b020262 	add	x2, x19, x2
    400152dc:	a90b8be3 	stp	x3, x2, [sp, #184]
    400152e0:	8b040262 	add	x2, x19, x4
    400152e4:	f90067e2 	str	x2, [sp, #200]
    400152e8:	f94047e2 	ldr	x2, [sp, #136]
    400152ec:	8b000040 	add	x0, x2, x0
    400152f0:	8b000260 	add	x0, x19, x0
    400152f4:	f9006be0 	str	x0, [sp, #208]
  for (k = 1; k <= grid_points[2]-2; k++) {
    400152f8:	b940b3e0 	ldr	w0, [sp, #176]
    400152fc:	6b05001f 	cmp	w0, w5
    40015300:	54002d6b 	b.lt	400158ac <compute_rhs+0xf9c>  // b.tstop
    40015304:	52834d00 	mov	w0, #0x1a68                	// #6760
    40015308:	5280a911 	mov	w17, #0x548                 	// #1352
    4001530c:	d00001b6 	adrp	x22, 4004b000 <rho_i+0x33e8>
    40015310:	912de2d6 	add	x22, x22, #0xb78
    40015314:	9b207ca2 	smull	x2, w5, w0
    40015318:	52804117 	mov	w23, #0x208                 	// #520
    4001531c:	9b317cb1 	smull	x17, w5, w17
    for (j = 1; j <= grid_points[1]-2; j++) {
    40015320:	52800020 	mov	w0, #0x1                   	// #1
    40015324:	52800d12 	mov	w18, #0x68                  	// #104
    40015328:	14000093 	b	40015574 <compute_rhs+0xc64>
          (u[k][j+1][i][0] - 2.0*u[k][j][i][0] + 
    4001532c:	fd400160 	ldr	d0, [x11]
      for (i = 1; i <= grid_points[0]-2; i++) {
    40015330:	11000718 	add	w24, w24, #0x1
          ty2 * (u[k][j+1][i][2] - u[k][j-1][i][2]);
    40015334:	6d40a1ba 	ldp	d26, d8, [x13, #8]
          (u[k][j+1][i][0] - 2.0*u[k][j][i][0] + 
    40015338:	1e602809 	fadd	d9, d0, d0
    4001533c:	fd4001e0 	ldr	d0, [x15]
          ty2 * (u[k][j+1][i][2] - u[k][j-1][i][2]);
    40015340:	fd4009ff 	ldr	d31, [x15, #16]
        rhs[k][j][i][1] = rhs[k][j][i][1] + dy2ty1 * 
    40015344:	fd40046a 	ldr	d10, [x3, #8]
        vp1  = vs[k][j+1][i];
    40015348:	fc666a02 	ldr	d2, [x16, x6]
          (u[k][j+1][i][0] - 2.0*u[k][j][i][0] + 
    4001534c:	1e693800 	fsub	d0, d0, d9
    40015350:	fd4001a9 	ldr	d9, [x13]
        vm1  = vs[k][j-1][i];
    40015354:	fc666881 	ldr	d1, [x4, x6]
          yycon2 * (us[k][j+1][i] - 2.0*us[k][j][i] + 
    40015358:	fc67688b 	ldr	d11, [x4, x7]
        vijk = vs[k][j][i];
    4001535c:	fc666807 	ldr	d7, [x0, x6]
          (u[k][j+1][i][0] - 2.0*u[k][j][i][0] + 
    40015360:	1e692800 	fadd	d0, d0, d9
        rhs[k][j][i][0] = rhs[k][j][i][0] + dy1ty1 * 
    40015364:	fd400069 	ldr	d9, [x3]
              (u[k][j+1][i][4] - square[k][j+1][i] - 
    40015368:	fc6c6a1d 	ldr	d29, [x16, x12]
          yycon2*con43 * (vp1 - 2.0*vijk + vm1) -
    4001536c:	1e6728fe 	fadd	d30, d7, d7
               u[k][j-1][i][4] + square[k][j-1][i])
    40015370:	fc6c689c 	ldr	d28, [x4, x12]
        rhs[k][j][i][0] = rhs[k][j][i][0] + dy1ty1 * 
    40015374:	1e710800 	fmul	d0, d0, d17
          yycon4 * (vp1*vp1       - 2.0*vijk*vijk + 
    40015378:	1e670bc7 	fmul	d7, d30, d7
        rhs[k][j][i][0] = rhs[k][j][i][0] + dy1ty1 * 
    4001537c:	1e692800 	fadd	d0, d0, d9
          ty2 * (u[k][j+1][i][2] - u[k][j-1][i][2]);
    40015380:	1e683be9 	fsub	d9, d31, d8
    40015384:	1e630929 	fmul	d9, d9, d3
           u[k][j-1][i][0]) -
    40015388:	1e693800 	fsub	d0, d0, d9
          (u[k][j+1][i][1] - 2.0*u[k][j][i][1] + 
    4001538c:	fd4005e9 	ldr	d9, [x15, #8]
        rhs[k][j][i][0] = rhs[k][j][i][0] + dy1ty1 * 
    40015390:	fd000060 	str	d0, [x3]
          (u[k][j+1][i][1] - 2.0*u[k][j][i][1] + 
    40015394:	fd400560 	ldr	d0, [x11, #8]
    40015398:	1e602800 	fadd	d0, d0, d0
    4001539c:	1e603920 	fsub	d0, d9, d0
          ty2 * (u[k][j+1][i][1]*vp1 - 
    400153a0:	1e620929 	fmul	d9, d9, d2
          (u[k][j+1][i][1] - 2.0*u[k][j][i][1] + 
    400153a4:	1e7a2800 	fadd	d0, d0, d26
              u[k][j-1][i][1]*vm1);
    400153a8:	1e610b5a 	fmul	d26, d26, d1
        rhs[k][j][i][1] = rhs[k][j][i][1] + dy2ty1 * 
    400153ac:	1e720800 	fmul	d0, d0, d18
          ty2 * (u[k][j+1][i][1]*vp1 - 
    400153b0:	1e7a3929 	fsub	d9, d9, d26
              (u[k][j+1][i][4] - square[k][j+1][i] - 
    400153b4:	fd4011fa 	ldr	d26, [x15, #32]
        rhs[k][j][i][1] = rhs[k][j][i][1] + dy2ty1 * 
    400153b8:	1e6a2800 	fadd	d0, d0, d10
          yycon2 * (us[k][j+1][i] - 2.0*us[k][j][i] + 
    400153bc:	fc67680a 	ldr	d10, [x0, x7]
          ty2 * (u[k][j+1][i][1]*vp1 - 
    400153c0:	1e630929 	fmul	d9, d9, d3
          yycon2 * (us[k][j+1][i] - 2.0*us[k][j][i] + 
    400153c4:	1e6a295b 	fadd	d27, d10, d10
    400153c8:	fc676a0a 	ldr	d10, [x16, x7]
    400153cc:	1e7b394a 	fsub	d10, d10, d27
               u[k][j-1][i][4] + square[k][j-1][i])
    400153d0:	fd4011bb 	ldr	d27, [x13, #32]
          yycon2 * (us[k][j+1][i] - 2.0*us[k][j][i] + 
    400153d4:	1e6b294a 	fadd	d10, d10, d11
          yycon2 * (ws[k][j+1][i] - 2.0*ws[k][j][i] + 
    400153d8:	fc68688b 	ldr	d11, [x4, x8]
          yycon2 * (us[k][j+1][i] - 2.0*us[k][j][i] + 
    400153dc:	1e65094a 	fmul	d10, d10, d5
           u[k][j-1][i][1]) +
    400153e0:	1e6a2800 	fadd	d0, d0, d10
          yycon2*con43 * (vp1 - 2.0*vijk + vm1) -
    400153e4:	1e7408aa 	fmul	d10, d5, d20
              us[k][j-1][i]) -
    400153e8:	1e693800 	fsub	d0, d0, d9
        rhs[k][j][i][2] = rhs[k][j][i][2] + dy3ty1 * 
    400153ec:	fd400869 	ldr	d9, [x3, #16]
        rhs[k][j][i][1] = rhs[k][j][i][1] + dy2ty1 * 
    400153f0:	fd000460 	str	d0, [x3, #8]
          (u[k][j+1][i][2] - 2.0*u[k][j][i][2] + 
    400153f4:	fd400960 	ldr	d0, [x11, #16]
    400153f8:	1e602800 	fadd	d0, d0, d0
    400153fc:	1e603be0 	fsub	d0, d31, d0
          ty2 * (u[k][j+1][i][2]*vp1 - 
    40015400:	1e620bff 	fmul	d31, d31, d2
          (u[k][j+1][i][2] - 2.0*u[k][j][i][2] + 
    40015404:	1e682800 	fadd	d0, d0, d8
              u[k][j-1][i][2]*vm1 +
    40015408:	1e610908 	fmul	d8, d8, d1
        rhs[k][j][i][2] = rhs[k][j][i][2] + dy3ty1 * 
    4001540c:	1e730800 	fmul	d0, d0, d19
          ty2 * (u[k][j+1][i][2]*vp1 - 
    40015410:	1e683be8 	fsub	d8, d31, d8
        rhs[k][j][i][2] = rhs[k][j][i][2] + dy3ty1 * 
    40015414:	1e692800 	fadd	d0, d0, d9
          yycon2*con43 * (vp1 - 2.0*vijk + vm1) -
    40015418:	1e7e3849 	fsub	d9, d2, d30
              vm1*vm1) +
    4001541c:	1e61083e 	fmul	d30, d1, d1
          yycon2*con43 * (vp1 - 2.0*vijk + vm1) -
    40015420:	1e612929 	fadd	d9, d9, d1
    40015424:	1e6a0929 	fmul	d9, d9, d10
        rhs[k][j][i][3] = rhs[k][j][i][3] + dy4ty1 * 
    40015428:	fd400c6a 	ldr	d10, [x3, #24]
           u[k][j-1][i][2]) +
    4001542c:	1e692800 	fadd	d0, d0, d9
              (u[k][j+1][i][4] - square[k][j+1][i] - 
    40015430:	1e7d3b49 	fsub	d9, d26, d29
                c2*square[k][j+1][i]) * vp1 -
    40015434:	1e660bbd 	fmul	d29, d29, d6
              (u[k][j+1][i][4] - square[k][j+1][i] - 
    40015438:	1e7b3929 	fsub	d9, d9, d27
               u[k][j-1][i][4] + square[k][j-1][i])
    4001543c:	1e7c2929 	fadd	d9, d9, d28
               c2*square[k][j-1][i]) * vm1);
    40015440:	1e660b9c 	fmul	d28, d28, d6
              *c2);
    40015444:	1e660929 	fmul	d9, d9, d6
              u[k][j-1][i][2]*vm1 +
    40015448:	1e682928 	fadd	d8, d9, d8
           u[k][j-1][i][3]) +
    4001544c:	fd400da9 	ldr	d9, [x13, #24]
          ty2 * (u[k][j+1][i][2]*vp1 - 
    40015450:	1e630908 	fmul	d8, d8, d3
          yycon2*con43 * (vp1 - 2.0*vijk + vm1) -
    40015454:	1e683808 	fsub	d8, d0, d8
          (u[k][j+1][i][3] - 2.0*u[k][j][i][3] + 
    40015458:	fd400d60 	ldr	d0, [x11, #24]
    4001545c:	1e602800 	fadd	d0, d0, d0
        rhs[k][j][i][2] = rhs[k][j][i][2] + dy3ty1 * 
    40015460:	fd000868 	str	d8, [x3, #16]
          (u[k][j+1][i][3] - 2.0*u[k][j][i][3] + 
    40015464:	fd400de8 	ldr	d8, [x15, #24]
    40015468:	1e603900 	fsub	d0, d8, d0
          ty2 * (u[k][j+1][i][3]*vp1 - 
    4001546c:	1e620908 	fmul	d8, d8, d2
          (u[k][j+1][i][3] - 2.0*u[k][j][i][3] + 
    40015470:	1e692800 	fadd	d0, d0, d9
              u[k][j-1][i][3]*vm1);
    40015474:	1e610929 	fmul	d9, d9, d1
        rhs[k][j][i][3] = rhs[k][j][i][3] + dy4ty1 * 
    40015478:	1e750800 	fmul	d0, d0, d21
          ty2 * (u[k][j+1][i][3]*vp1 - 
    4001547c:	1e693908 	fsub	d8, d8, d9
        rhs[k][j][i][3] = rhs[k][j][i][3] + dy4ty1 * 
    40015480:	1e6a2800 	fadd	d0, d0, d10
          yycon2 * (ws[k][j+1][i] - 2.0*ws[k][j][i] + 
    40015484:	fc68680a 	ldr	d10, [x0, x8]
          ty2 * (u[k][j+1][i][3]*vp1 - 
    40015488:	1e630908 	fmul	d8, d8, d3
          yycon2 * (ws[k][j+1][i] - 2.0*ws[k][j][i] + 
    4001548c:	1e6a295f 	fadd	d31, d10, d10
    40015490:	fc686a0a 	ldr	d10, [x16, x8]
    40015494:	1e7f394a 	fsub	d10, d10, d31
    40015498:	1e6b294a 	fadd	d10, d10, d11
    4001549c:	1e65094a 	fmul	d10, d10, d5
           u[k][j-1][i][3]) +
    400154a0:	1e6a2800 	fadd	d0, d0, d10
              ws[k][j-1][i]) -
    400154a4:	1e683800 	fsub	d0, d0, d8
        rhs[k][j][i][3] = rhs[k][j][i][3] + dy4ty1 * 
    400154a8:	fd000c60 	str	d0, [x3, #24]
          yycon3 * (qs[k][j+1][i] - 2.0*qs[k][j][i] + 
    400154ac:	fc696800 	ldr	d0, [x0, x9]
          (u[k][j+1][i][4] - 2.0*u[k][j][i][4] + 
    400154b0:	fd401168 	ldr	d8, [x11, #32]
        rhs[k][j][i][4] = rhs[k][j][i][4] + dy5ty1 * 
    400154b4:	fd40106a 	ldr	d10, [x3, #32]
          yycon3 * (qs[k][j+1][i] - 2.0*qs[k][j][i] + 
    400154b8:	1e602809 	fadd	d9, d0, d0
    400154bc:	fc696a00 	ldr	d0, [x16, x9]
          (u[k][j+1][i][4] - 2.0*u[k][j][i][4] + 
    400154c0:	1e682908 	fadd	d8, d8, d8
          yycon3 * (qs[k][j+1][i] - 2.0*qs[k][j][i] + 
    400154c4:	1e693800 	fsub	d0, d0, d9
    400154c8:	fc696889 	ldr	d9, [x4, x9]
    400154cc:	1e692800 	fadd	d0, d0, d9
          (u[k][j+1][i][4] - 2.0*u[k][j][i][4] + 
    400154d0:	1e683b49 	fsub	d9, d26, d8
    400154d4:	1e7b2929 	fadd	d9, d9, d27
          yycon3 * (qs[k][j+1][i] - 2.0*qs[k][j][i] + 
    400154d8:	1e770800 	fmul	d0, d0, d23
        rhs[k][j][i][4] = rhs[k][j][i][4] + dy5ty1 * 
    400154dc:	1e760929 	fmul	d9, d9, d22
    400154e0:	1e6a2929 	fadd	d9, d9, d10
           u[k][j-1][i][4]) +
    400154e4:	1e692800 	fadd	d0, d0, d9
          yycon4 * (vp1*vp1       - 2.0*vijk*vijk + 
    400154e8:	1e620849 	fmul	d9, d2, d2
    400154ec:	1e673927 	fsub	d7, d9, d7
              2.0*u[k][j][i][4]*rho_i[k][j][i] +
    400154f0:	fc6a6809 	ldr	d9, [x0, x10]
    400154f4:	1e690908 	fmul	d8, d8, d9
          yycon4 * (vp1*vp1       - 2.0*vijk*vijk + 
    400154f8:	1e7e28e7 	fadd	d7, d7, d30
    400154fc:	1e7808e7 	fmul	d7, d7, d24
              qs[k][j-1][i]) +
    40015500:	1e672800 	fadd	d0, d0, d7
          yycon5 * (u[k][j+1][i][4]*rho_i[k][j+1][i] - 
    40015504:	fc6a6a07 	ldr	d7, [x16, x10]
    40015508:	1e670b47 	fmul	d7, d26, d7
          ty2 * ((c1*u[k][j+1][i][4] - 
    4001550c:	1e700b5a 	fmul	d26, d26, d16
          yycon5 * (u[k][j+1][i][4]*rho_i[k][j+1][i] - 
    40015510:	1e6838e7 	fsub	d7, d7, d8
              u[k][j-1][i][4]*rho_i[k][j-1][i]) -
    40015514:	fc6a6888 	ldr	d8, [x4, x10]
          ty2 * ((c1*u[k][j+1][i][4] - 
    40015518:	1e7d3b5a 	fsub	d26, d26, d29
              u[k][j-1][i][4]*rho_i[k][j-1][i]) -
    4001551c:	1e680b68 	fmul	d8, d27, d8
              (c1*u[k][j-1][i][4] - 
    40015520:	1e700b7b 	fmul	d27, d27, d16
                c2*square[k][j+1][i]) * vp1 -
    40015524:	1e620b42 	fmul	d2, d26, d2
              (c1*u[k][j-1][i][4] - 
    40015528:	1e7c3b7b 	fsub	d27, d27, d28
              2.0*u[k][j][i][4]*rho_i[k][j][i] +
    4001552c:	1e6828e7 	fadd	d7, d7, d8
               c2*square[k][j-1][i]) * vm1);
    40015530:	1e610b61 	fmul	d1, d27, d1
          yycon5 * (u[k][j+1][i][4]*rho_i[k][j+1][i] - 
    40015534:	1e7908e7 	fmul	d7, d7, d25
                c2*square[k][j+1][i]) * vp1 -
    40015538:	1e613841 	fsub	d1, d2, d1
              vm1*vm1) +
    4001553c:	1e672800 	fadd	d0, d0, d7
          ty2 * ((c1*u[k][j+1][i][4] - 
    40015540:	1e630821 	fmul	d1, d1, d3
              u[k][j-1][i][4]*rho_i[k][j-1][i]) -
    40015544:	1e613801 	fsub	d1, d0, d1
        rhs[k][j][i][4] = rhs[k][j][i][4] + dy5ty1 * 
    40015548:	fd001061 	str	d1, [x3, #32]
      for (i = 1; i <= grid_points[0]-2; i++) {
    4001554c:	9100a063 	add	x3, x3, #0x28
    40015550:	9100a1ef 	add	x15, x15, #0x28
    40015554:	9100a16b 	add	x11, x11, #0x28
    40015558:	9100a1ad 	add	x13, x13, #0x28
    4001555c:	91002210 	add	x16, x16, #0x8
    40015560:	91002084 	add	x4, x4, #0x8
    40015564:	91002000 	add	x0, x0, #0x8
    40015568:	6b18003f 	cmp	w1, w24
    4001556c:	54ffee0a 	b.ge	4001532c <compute_rhs+0xa1c>  // b.tcont
        vp1  = vs[k][j+1][i];
    40015570:	2a1903e0 	mov	w0, w25
    for (j = 1; j <= grid_points[1]-2; j++) {
    40015574:	6b0001df 	cmp	w14, w0
    40015578:	540001eb 	b.lt	400155b4 <compute_rhs+0xca4>  // b.tstop
    4001557c:	11000419 	add	w25, w0, #0x1
    40015580:	51000404 	sub	w4, w0, #0x1
    40015584:	9b37080b 	smaddl	x11, w0, w23, x2
      for (i = 1; i <= grid_points[0]-2; i++) {
    40015588:	52800038 	mov	w24, #0x1                   	// #1
    4001558c:	9b324400 	smaddl	x0, w0, w18, x17
    40015590:	9b37088d 	smaddl	x13, w4, w23, x2
    40015594:	8b160163 	add	x3, x11, x22
    40015598:	9b370b2f 	smaddl	x15, w25, w23, x2
    4001559c:	8b0b026b 	add	x11, x19, x11
    400155a0:	9b324730 	smaddl	x16, w25, w18, x17
    400155a4:	8b0d026d 	add	x13, x19, x13
    400155a8:	9b324484 	smaddl	x4, w4, w18, x17
    400155ac:	8b0f026f 	add	x15, x19, x15
    400155b0:	17ffffe7 	b	4001554c <compute_rhs+0xc3c>
    400155b4:	d00001ab 	adrp	x11, 4004b000 <rho_i+0x33e8>
    400155b8:	912de16b 	add	x11, x11, #0xb78
    400155bc:	9108c043 	add	x3, x2, #0x230
    for (i = 1; i <= grid_points[0]-2; i++) {
    400155c0:	52800024 	mov	w4, #0x1                   	// #1
          ( 5.0*u[k][j][i][m] - 4.0*u[k][j+1][i][m] +
    400155c4:	1e629002 	fmov	d2, #5.000000000000000000e+00
    400155c8:	1e621007 	fmov	d7, #4.000000000000000000e+00
    for (i = 1; i <= grid_points[0]-2; i++) {
    400155cc:	6b04003f 	cmp	w1, w4
    400155d0:	5400044a 	b.ge	40015658 <compute_rhs+0xd48>  // b.tcont
    400155d4:	9100a059 	add	x25, x2, #0x28
    400155d8:	d00001ad 	adrp	x13, 4004b000 <rho_i+0x33e8>
    400155dc:	912de1ad 	add	x13, x13, #0xb78
    400155e0:	aa1903e3 	mov	x3, x25
    for (i = 1; i <= grid_points[0]-2; i++) {
    400155e4:	5280002b 	mov	w11, #0x1                   	// #1
          (-4.0*u[k][j-1][i][m] + 6.0*u[k][j][i][m] -
    400155e8:	1e721002 	fmov	d2, #-4.000000000000000000e+00
    400155ec:	1e631007 	fmov	d7, #6.000000000000000000e+00
           4.0*u[k][j+1][i][m] + u[k][j+2][i][m]);
    400155f0:	1e621008 	fmov	d8, #4.000000000000000000e+00
    for (i = 1; i <= grid_points[0]-2; i++) {
    400155f4:	6b0b003f 	cmp	w1, w11
    400155f8:	540005aa 	b.ge	400156ac <compute_rhs+0xd9c>  // b.tcont
    400155fc:	d00001b2 	adrp	x18, 4004b000 <rho_i+0x33e8>
    40015600:	912de252 	add	x18, x18, #0xb78
    for (j = 3; j <= grid_points[1]-4; j++) {
    40015604:	52800060 	mov	w0, #0x3                   	// #3
    40015608:	5280410b 	mov	w11, #0x208                 	// #520
            (  u[k][j-2][i][m] - 4.0*u[k][j-1][i][m] + 
    4001560c:	1e621002 	fmov	d2, #4.000000000000000000e+00
               6.0*u[k][j][i][m] - 4.0*u[k][j+1][i][m] + 
    40015610:	1e631007 	fmov	d7, #6.000000000000000000e+00
    for (j = 3; j <= grid_points[1]-4; j++) {
    40015614:	6b00037f 	cmp	w27, w0
    40015618:	54000c0b 	b.lt	40015798 <compute_rhs+0xe88>  // b.tstop
    4001561c:	93407c04 	sxtw	x4, w0
    40015620:	11000418 	add	w24, w0, #0x1
    40015624:	51000811 	sub	w17, w0, #0x2
    40015628:	51000410 	sub	w16, w0, #0x1
    4001562c:	928040e3 	mov	x3, #0xfffffffffffffdf8    	// #-520
    40015630:	9b2b640d 	smaddl	x13, w0, w11, x25
    40015634:	11000800 	add	w0, w0, #0x2
      for (i = 1; i <= grid_points[0]-2; i++) {
    40015638:	5280002f 	mov	w15, #0x1                   	// #1
    4001563c:	9b037c84 	mul	x4, x4, x3
    40015640:	9b2b7f03 	smull	x3, w24, w11
    40015644:	9b2b7e31 	smull	x17, w17, w11
    40015648:	f90073e3 	str	x3, [sp, #224]
    4001564c:	9b2b7e10 	smull	x16, w16, w11
    40015650:	9b2b7c00 	smull	x0, w0, w11
    40015654:	1400004d 	b	40015788 <compute_rhs+0xe78>
    40015658:	8b0b006f 	add	x15, x3, x11
    4001565c:	8b130060 	add	x0, x3, x19
      for (m = 0; m < 5; m++) {
    40015660:	5280000d 	mov	w13, #0x0                   	// #0
          ( 5.0*u[k][j][i][m] - 4.0*u[k][j+1][i][m] +
    40015664:	fd400000 	ldr	d0, [x0]
      for (m = 0; m < 5; m++) {
    40015668:	110005ad 	add	w13, w13, #0x1
          ( 5.0*u[k][j][i][m] - 4.0*u[k][j+1][i][m] +
    4001566c:	fd410401 	ldr	d1, [x0, #520]
      for (m = 0; m < 5; m++) {
    40015670:	710015bf 	cmp	w13, #0x5
    40015674:	91002000 	add	x0, x0, #0x8
          ( 5.0*u[k][j][i][m] - 4.0*u[k][j+1][i][m] +
    40015678:	1e620800 	fmul	d0, d0, d2
    4001567c:	1e670821 	fmul	d1, d1, d7
    40015680:	1e613800 	fsub	d0, d0, d1
    40015684:	fd420401 	ldr	d1, [x0, #1032]
    40015688:	1e612800 	fadd	d0, d0, d1
        rhs[k][j][i][m] = rhs[k][j][i][m]- dssp * 
    4001568c:	fd4001e1 	ldr	d1, [x15]
    40015690:	1e640800 	fmul	d0, d0, d4
    40015694:	1e603820 	fsub	d0, d1, d0
    40015698:	fc0085e0 	str	d0, [x15], #8
      for (m = 0; m < 5; m++) {
    4001569c:	54fffe41 	b.ne	40015664 <compute_rhs+0xd54>  // b.any
    for (i = 1; i <= grid_points[0]-2; i++) {
    400156a0:	11000484 	add	w4, w4, #0x1
    400156a4:	9100a063 	add	x3, x3, #0x28
    400156a8:	17ffffc9 	b	400155cc <compute_rhs+0xcbc>
    400156ac:	8b0d0064 	add	x4, x3, x13
    400156b0:	8b130060 	add	x0, x3, x19
      for (m = 0; m < 5; m++) {
    400156b4:	5280000f 	mov	w15, #0x0                   	// #0
          (-4.0*u[k][j-1][i][m] + 6.0*u[k][j][i][m] -
    400156b8:	fd410400 	ldr	d0, [x0, #520]
      for (m = 0; m < 5; m++) {
    400156bc:	110005ef 	add	w15, w15, #0x1
          (-4.0*u[k][j-1][i][m] + 6.0*u[k][j][i][m] -
    400156c0:	fd420801 	ldr	d1, [x0, #1040]
      for (m = 0; m < 5; m++) {
    400156c4:	710015ff 	cmp	w15, #0x5
    400156c8:	91002000 	add	x0, x0, #0x8
    400156cc:	91002084 	add	x4, x4, #0x8
          (-4.0*u[k][j-1][i][m] + 6.0*u[k][j][i][m] -
    400156d0:	1e620800 	fmul	d0, d0, d2
    400156d4:	1e670821 	fmul	d1, d1, d7
    400156d8:	1e612800 	fadd	d0, d0, d1
           4.0*u[k][j+1][i][m] + u[k][j+2][i][m]);
    400156dc:	fd430801 	ldr	d1, [x0, #1552]
    400156e0:	1e680821 	fmul	d1, d1, d8
          (-4.0*u[k][j-1][i][m] + 6.0*u[k][j][i][m] -
    400156e4:	1e613800 	fsub	d0, d0, d1
           4.0*u[k][j+1][i][m] + u[k][j+2][i][m]);
    400156e8:	fd440c01 	ldr	d1, [x0, #2072]
    400156ec:	1e612800 	fadd	d0, d0, d1
        rhs[k][j][i][m] = rhs[k][j][i][m] - dssp * 
    400156f0:	fd420481 	ldr	d1, [x4, #1032]
    400156f4:	1e640800 	fmul	d0, d0, d4
    400156f8:	1e603820 	fsub	d0, d1, d0
    400156fc:	fd020480 	str	d0, [x4, #1032]
      for (m = 0; m < 5; m++) {
    40015700:	54fffdc1 	b.ne	400156b8 <compute_rhs+0xda8>  // b.any
    for (i = 1; i <= grid_points[0]-2; i++) {
    40015704:	1100056b 	add	w11, w11, #0x1
    40015708:	9100a063 	add	x3, x3, #0x28
    4001570c:	17ffffba 	b	400155f4 <compute_rhs+0xce4>
    40015710:	8b1201b7 	add	x23, x13, x18
    40015714:	8b1301a3 	add	x3, x13, x19
        for (m = 0; m < 5; m++) {
    40015718:	52800016 	mov	w22, #0x0                   	// #0
            (  u[k][j-2][i][m] - 4.0*u[k][j-1][i][m] + 
    4001571c:	8b10007a 	add	x26, x3, x16
    40015720:	8b11007c 	add	x28, x3, x17
        for (m = 0; m < 5; m++) {
    40015724:	110006d6 	add	w22, w22, #0x1
    40015728:	710016df 	cmp	w22, #0x5
            (  u[k][j-2][i][m] - 4.0*u[k][j-1][i][m] + 
    4001572c:	fc646b40 	ldr	d0, [x26, x4]
               6.0*u[k][j][i][m] - 4.0*u[k][j+1][i][m] + 
    40015730:	f94073fa 	ldr	x26, [sp, #224]
            (  u[k][j-2][i][m] - 4.0*u[k][j-1][i][m] + 
    40015734:	1e620801 	fmul	d1, d0, d2
    40015738:	fc646b80 	ldr	d0, [x28, x4]
               6.0*u[k][j][i][m] - 4.0*u[k][j+1][i][m] + 
    4001573c:	8b1a007c 	add	x28, x3, x26
            (  u[k][j-2][i][m] - 4.0*u[k][j-1][i][m] + 
    40015740:	1e613800 	fsub	d0, d0, d1
               6.0*u[k][j][i][m] - 4.0*u[k][j+1][i][m] + 
    40015744:	fd400061 	ldr	d1, [x3]
    40015748:	1e670821 	fmul	d1, d1, d7
            (  u[k][j-2][i][m] - 4.0*u[k][j-1][i][m] + 
    4001574c:	1e612800 	fadd	d0, d0, d1
               6.0*u[k][j][i][m] - 4.0*u[k][j+1][i][m] + 
    40015750:	fc646b81 	ldr	d1, [x28, x4]
               u[k][j+2][i][m] );
    40015754:	8b00007c 	add	x28, x3, x0
        for (m = 0; m < 5; m++) {
    40015758:	91002063 	add	x3, x3, #0x8
               6.0*u[k][j][i][m] - 4.0*u[k][j+1][i][m] + 
    4001575c:	1e620821 	fmul	d1, d1, d2
    40015760:	1e613800 	fsub	d0, d0, d1
    40015764:	fc646b81 	ldr	d1, [x28, x4]
    40015768:	1e612800 	fadd	d0, d0, d1
          rhs[k][j][i][m] = rhs[k][j][i][m] - dssp * 
    4001576c:	fd4002e1 	ldr	d1, [x23]
    40015770:	1e640800 	fmul	d0, d0, d4
    40015774:	1e603820 	fsub	d0, d1, d0
    40015778:	fc0086e0 	str	d0, [x23], #8
        for (m = 0; m < 5; m++) {
    4001577c:	54fffd01 	b.ne	4001571c <compute_rhs+0xe0c>  // b.any
      for (i = 1; i <= grid_points[0]-2; i++) {
    40015780:	110005ef 	add	w15, w15, #0x1
    40015784:	9100a1ad 	add	x13, x13, #0x28
    40015788:	6b0f003f 	cmp	w1, w15
    4001578c:	54fffc2a 	b.ge	40015710 <compute_rhs+0xe00>  // b.tcont
    for (j = 3; j <= grid_points[1]-4; j++) {
    40015790:	2a1803e0 	mov	w0, w24
    40015794:	17ffffa0 	b	40015614 <compute_rhs+0xd04>
    for (i = 1; i <= grid_points[0]-2; i++) {
    40015798:	f9406fe0 	ldr	x0, [sp, #216]
        rhs[k][j][i][m] = rhs[k][j][i][m] - dssp *
    4001579c:	d00001a4 	adrp	x4, 4004b000 <rho_i+0x33e8>
    400157a0:	912de084 	add	x4, x4, #0xb78
    for (i = 1; i <= grid_points[0]-2; i++) {
    400157a4:	5280002b 	mov	w11, #0x1                   	// #1
    400157a8:	9100a003 	add	x3, x0, #0x28
          ( u[k][j-2][i][m] - 4.0*u[k][j-1][i][m] + 
    400157ac:	1e621002 	fmov	d2, #4.000000000000000000e+00
    400157b0:	8b020063 	add	x3, x3, x2
            6.0*u[k][j][i][m] - 4.0*u[k][j+1][i][m] );
    400157b4:	1e631007 	fmov	d7, #6.000000000000000000e+00
    for (i = 1; i <= grid_points[0]-2; i++) {
    400157b8:	6b0b003f 	cmp	w1, w11
    400157bc:	540001aa 	b.ge	400157f0 <compute_rhs+0xee0>  // b.tcont
    400157c0:	f94047e0 	ldr	x0, [sp, #136]
        rhs[k][j][i][m] = rhs[k][j][i][m] - dssp *
    400157c4:	d00001a3 	adrp	x3, 4004b000 <rho_i+0x33e8>
    400157c8:	912de063 	add	x3, x3, #0xb78
    for (i = 1; i <= grid_points[0]-2; i++) {
    400157cc:	52800024 	mov	w4, #0x1                   	// #1
    400157d0:	9100a000 	add	x0, x0, #0x28
          ( u[k][j-2][i][m] - 4.*u[k][j-1][i][m] +
    400157d4:	1e621002 	fmov	d2, #4.000000000000000000e+00
    400157d8:	8b020002 	add	x2, x0, x2
            5.*u[k][j][i][m] );
    400157dc:	1e629007 	fmov	d7, #5.000000000000000000e+00
    for (i = 1; i <= grid_points[0]-2; i++) {
    400157e0:	6b04003f 	cmp	w1, w4
    400157e4:	540003aa 	b.ge	40015858 <compute_rhs+0xf48>  // b.tcont
  for (k = 1; k <= grid_points[2]-2; k++) {
    400157e8:	110004a5 	add	w5, w5, #0x1
    400157ec:	17fffec3 	b	400152f8 <compute_rhs+0x9e8>
    400157f0:	aa0303e0 	mov	x0, x3
      for (m = 0; m < 5; m++) {
    400157f4:	5280000d 	mov	w13, #0x0                   	// #0
          ( u[k][j-2][i][m] - 4.0*u[k][j-1][i][m] + 
    400157f8:	f94067ef 	ldr	x15, [sp, #200]
      for (m = 0; m < 5; m++) {
    400157fc:	110005ad 	add	w13, w13, #0x1
    40015800:	710015bf 	cmp	w13, #0x5
          ( u[k][j-2][i][m] - 4.0*u[k][j-1][i][m] + 
    40015804:	fc6069e0 	ldr	d0, [x15, x0]
    40015808:	f94063ef 	ldr	x15, [sp, #192]
    4001580c:	1e620801 	fmul	d1, d0, d2
    40015810:	fc6069e0 	ldr	d0, [x15, x0]
            6.0*u[k][j][i][m] - 4.0*u[k][j+1][i][m] );
    40015814:	f9406bef 	ldr	x15, [sp, #208]
          ( u[k][j-2][i][m] - 4.0*u[k][j-1][i][m] + 
    40015818:	1e613800 	fsub	d0, d0, d1
            6.0*u[k][j][i][m] - 4.0*u[k][j+1][i][m] );
    4001581c:	fc606a61 	ldr	d1, [x19, x0]
    40015820:	1e670821 	fmul	d1, d1, d7
          ( u[k][j-2][i][m] - 4.0*u[k][j-1][i][m] + 
    40015824:	1e612800 	fadd	d0, d0, d1
            6.0*u[k][j][i][m] - 4.0*u[k][j+1][i][m] );
    40015828:	fc6069e1 	ldr	d1, [x15, x0]
    4001582c:	1e620821 	fmul	d1, d1, d2
    40015830:	1e613800 	fsub	d0, d0, d1
        rhs[k][j][i][m] = rhs[k][j][i][m] - dssp *
    40015834:	fc646801 	ldr	d1, [x0, x4]
    40015838:	1e640800 	fmul	d0, d0, d4
    4001583c:	1e603820 	fsub	d0, d1, d0
    40015840:	fc246800 	str	d0, [x0, x4]
      for (m = 0; m < 5; m++) {
    40015844:	91002000 	add	x0, x0, #0x8
    40015848:	54fffd81 	b.ne	400157f8 <compute_rhs+0xee8>  // b.any
    for (i = 1; i <= grid_points[0]-2; i++) {
    4001584c:	1100056b 	add	w11, w11, #0x1
    40015850:	9100a063 	add	x3, x3, #0x28
    40015854:	17ffffd9 	b	400157b8 <compute_rhs+0xea8>
    40015858:	aa0203e0 	mov	x0, x2
      for (m = 0; m < 5; m++) {
    4001585c:	5280000b 	mov	w11, #0x0                   	// #0
          ( u[k][j-2][i][m] - 4.*u[k][j-1][i][m] +
    40015860:	f9405fed 	ldr	x13, [sp, #184]
      for (m = 0; m < 5; m++) {
    40015864:	1100056b 	add	w11, w11, #0x1
    40015868:	7100157f 	cmp	w11, #0x5
          ( u[k][j-2][i][m] - 4.*u[k][j-1][i][m] +
    4001586c:	fc6069a0 	ldr	d0, [x13, x0]
    40015870:	1e620801 	fmul	d1, d0, d2
    40015874:	fc606bc0 	ldr	d0, [x30, x0]
    40015878:	1e613800 	fsub	d0, d0, d1
            5.*u[k][j][i][m] );
    4001587c:	fc606a61 	ldr	d1, [x19, x0]
    40015880:	1e670821 	fmul	d1, d1, d7
          ( u[k][j-2][i][m] - 4.*u[k][j-1][i][m] +
    40015884:	1e612800 	fadd	d0, d0, d1
        rhs[k][j][i][m] = rhs[k][j][i][m] - dssp *
    40015888:	fc636801 	ldr	d1, [x0, x3]
    4001588c:	1e640800 	fmul	d0, d0, d4
    40015890:	1e603820 	fsub	d0, d1, d0
    40015894:	fc236800 	str	d0, [x0, x3]
      for (m = 0; m < 5; m++) {
    40015898:	91002000 	add	x0, x0, #0x8
    4001589c:	54fffe21 	b.ne	40015860 <compute_rhs+0xf50>  // b.any
    for (i = 1; i <= grid_points[0]-2; i++) {
    400158a0:	11000484 	add	w4, w4, #0x1
    400158a4:	9100a042 	add	x2, x2, #0x28
    400158a8:	17ffffce 	b	400157e0 <compute_rhs+0xed0>
      }
    }
  }
  if (timeron) timer_stop(t_rhsy);
    400158ac:	b94a8e80 	ldr	w0, [x20, #2700]
    400158b0:	340000e0 	cbz	w0, 400158cc <compute_rhs+0xfbc>
    400158b4:	52800060 	mov	w0, #0x3                   	// #3
    400158b8:	97fff3e1 	bl	4001283c <timer_stop>

  if (timeron) timer_start(t_rhsz);
    400158bc:	b94a8e80 	ldr	w0, [x20, #2700]
    400158c0:	34000060 	cbz	w0, 400158cc <compute_rhs+0xfbc>
    400158c4:	52800080 	mov	w0, #0x4                   	// #4
    400158c8:	97fff3d0 	bl	40012808 <timer_start>
  //---------------------------------------------------------------------
  // compute zeta-direction fluxes 
  //---------------------------------------------------------------------
  for (k = 1; k <= grid_points[2]-2; k++) {
    for (j = 1; j <= grid_points[1]-2; j++) {
      for (i = 1; i <= grid_points[0]-2; i++) {
    400158cc:	f94043e0 	ldr	x0, [sp, #128]
        wijk = ws[k][j][i];
    400158d0:	d000034c 	adrp	x12, 4007f000 <vs+0x39a0>
    400158d4:	9117018c 	add	x12, x12, #0x5c0
           u[k-1][j][i][0]) -
          tz2 * (u[k+1][j][i][3] - u[k-1][j][i][3]);
        rhs[k][j][i][1] = rhs[k][j][i][1] + dz2tz1 * 
          (u[k+1][j][i][1] - 2.0*u[k][j][i][1] + 
           u[k-1][j][i][1]) +
          zzcon2 * (us[k+1][j][i] - 2.0*us[k][j][i] + 
    400158d8:	d000030d 	adrp	x13, 40077000 <u+0x137e8>
    400158dc:	911c01ad 	add	x13, x13, #0x700
          tz2 * (u[k+1][j][i][1]*wp1 - 
              u[k-1][j][i][1]*wm1);
        rhs[k][j][i][2] = rhs[k][j][i][2] + dz3tz1 * 
          (u[k+1][j][i][2] - 2.0*u[k][j][i][2] + 
           u[k-1][j][i][2]) +
          zzcon2 * (vs[k+1][j][i] - 2.0*vs[k][j][i] + 
    400158e0:	d000032e 	adrp	x14, 4007b000 <us+0x3900>
    400158e4:	911981ce 	add	x14, x14, #0x660
      for (i = 1; i <= grid_points[0]-2; i++) {
    400158e8:	b94a8005 	ldr	w5, [x0, #2688]
        rhs[k][j][i][0] = rhs[k][j][i][0] + dz1tz1 * 
    400158ec:	f00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    400158f0:	fd462c12 	ldr	d18, [x0, #3160]
          tz2 * (u[k+1][j][i][3] - u[k-1][j][i][3]);
    400158f4:	d0000260 	adrp	x0, 40063000 <square+0x37a8>
    400158f8:	fd440404 	ldr	d4, [x0, #2056]
        rhs[k][j][i][1] = rhs[k][j][i][1] + dz2tz1 * 
    400158fc:	f00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    40015900:	fd463413 	ldr	d19, [x0, #3176]
          zzcon2 * (us[k+1][j][i] - 2.0*us[k][j][i] + 
    40015904:	d0000360 	adrp	x0, 40083000 <ws+0x3a40>
    40015908:	fd42bc06 	ldr	d6, [x0, #1400]
        rhs[k][j][i][2] = rhs[k][j][i][2] + dz3tz1 * 
    4001590c:	f00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    40015910:	fd463c14 	ldr	d20, [x0, #3192]
              vs[k-1][j][i]) -
          tz2 * (u[k+1][j][i][2]*wp1 - 
              u[k-1][j][i][2]*wm1);
        rhs[k][j][i][3] = rhs[k][j][i][3] + dz4tz1 * 
    40015914:	f00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    40015918:	fd464415 	ldr	d21, [x0, #3208]
          (u[k+1][j][i][3] - 2.0*u[k][j][i][3] + 
           u[k-1][j][i][3]) +
          zzcon2*con43 * (wp1 - 2.0*wijk + wm1) -
    4001591c:	f9404fe0 	ldr	x0, [sp, #152]
          tz2 * (u[k+1][j][i][3]*wp1 - 
              u[k-1][j][i][3]*wm1 +
              (u[k+1][j][i][4] - square[k+1][j][i] - 
    40015920:	d0000252 	adrp	x18, 4005f000 <rhs+0x13488>
    40015924:	91216252 	add	x18, x18, #0x858
               u[k-1][j][i][4] + square[k-1][j][i])
              *c2);
        rhs[k][j][i][4] = rhs[k][j][i][4] + dz5tz1 * 
          (u[k+1][j][i][4] - 2.0*u[k][j][i][4] + 
           u[k-1][j][i][4]) +
          zzcon3 * (qs[k+1][j][i] - 2.0*qs[k][j][i] + 
    40015928:	d000016f 	adrp	x15, 40043000 <lhs+0x1c50>
    4001592c:	9132e1ef 	add	x15, x15, #0xcb8
              qs[k-1][j][i]) +
          zzcon4 * (wp1*wp1 - 2.0*wijk*wijk + 
              wm1*wm1) +
          zzcon5 * (u[k+1][j][i][4]*rho_i[k+1][j][i] - 
    40015930:	d0000190 	adrp	x16, 40047000 <qs+0x3348>
    40015934:	91306210 	add	x16, x16, #0xc18
          zzcon2*con43 * (wp1 - 2.0*wijk + wm1) -
    40015938:	fd456416 	ldr	d22, [x0, #2760]
              *c2);
    4001593c:	f94053e0 	ldr	x0, [sp, #160]
      for (i = 1; i <= grid_points[0]-2; i++) {
    40015940:	510008a5 	sub	w5, w5, #0x2
  for (k = 1; k <= grid_points[2]-2; k++) {
    40015944:	29409ea6 	ldp	w6, w7, [x21, #4]
              2.0*u[k][j][i][4]*rho_i[k][j][i] +
              u[k-1][j][i][4]*rho_i[k-1][j][i]) -
          tz2 * ( (c1*u[k+1][j][i][4] - 
    40015948:	52800028 	mov	w8, #0x1                   	// #1
              *c2);
    4001594c:	fd441407 	ldr	d7, [x0, #2088]
        rhs[k][j][i][4] = rhs[k][j][i][4] + dz5tz1 * 
    40015950:	f00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    40015954:	fd464c17 	ldr	d23, [x0, #3224]
          zzcon3 * (qs[k+1][j][i] - 2.0*qs[k][j][i] + 
    40015958:	d0000360 	adrp	x0, 40083000 <ws+0x3a40>
    4001595c:	fd42c018 	ldr	d24, [x0, #1408]
          zzcon4 * (wp1*wp1 - 2.0*wijk*wijk + 
    40015960:	d0000360 	adrp	x0, 40083000 <ws+0x3a40>
    40015964:	fd42c419 	ldr	d25, [x0, #1416]
          zzcon5 * (u[k+1][j][i][4]*rho_i[k+1][j][i] - 
    40015968:	d0000360 	adrp	x0, 40083000 <ws+0x3a40>
    4001596c:	fd42c81a 	ldr	d26, [x0, #1424]
  for (k = 1; k <= grid_points[2]-2; k++) {
    40015970:	510008fe 	sub	w30, w7, #0x2
          tz2 * ( (c1*u[k+1][j][i][4] - 
    40015974:	f94057e0 	ldr	x0, [sp, #168]
    for (j = 1; j <= grid_points[1]-2; j++) {
    40015978:	510008c6 	sub	w6, w6, #0x2
    4001597c:	52834d17 	mov	w23, #0x1a68                	// #6760
          tz2 * ( (c1*u[k+1][j][i][4] - 
    40015980:	fd440411 	ldr	d17, [x0, #2056]
  for (k = 1; k <= grid_points[2]-2; k++) {
    40015984:	6b0803df 	cmp	w30, w8
    40015988:	540016eb 	b.lt	40015c64 <compute_rhs+0x1354>  // b.tstop
    4001598c:	51000511 	sub	w17, w8, #0x1
    40015990:	11000516 	add	w22, w8, #0x1
    40015994:	9b377d1c 	smull	x28, w8, w23
    for (j = 1; j <= grid_points[1]-2; j++) {
    40015998:	5280002b 	mov	w11, #0x1                   	// #1
    4001599c:	9b377e20 	smull	x0, w17, w23
    400159a0:	9b377edb 	smull	x27, w22, w23
    400159a4:	aa0003fa 	mov	x26, x0
    400159a8:	5280a900 	mov	w0, #0x548                 	// #1352
    400159ac:	9b207ed9 	smull	x25, w22, w0
    400159b0:	9b207e31 	smull	x17, w17, w0
    400159b4:	9b207d08 	smull	x8, w8, w0
    400159b8:	d00001a0 	adrp	x0, 4004b000 <rho_i+0x33e8>
    400159bc:	912de000 	add	x0, x0, #0xb78
    400159c0:	f90047e0 	str	x0, [sp, #136]
    400159c4:	14000093 	b	40015c10 <compute_rhs+0x1300>
          (u[k+1][j][i][0] - 2.0*u[k][j][i][0] + 
    400159c8:	fd400060 	ldr	d0, [x3]
      for (i = 1; i <= grid_points[0]-2; i++) {
    400159cc:	11000718 	add	w24, w24, #0x1
              (u[k+1][j][i][4] - square[k+1][j][i] - 
    400159d0:	6d41f883 	ldp	d3, d30, [x4, #24]
          (u[k+1][j][i][0] - 2.0*u[k][j][i][0] + 
    400159d4:	1e602808 	fadd	d8, d0, d0
    400159d8:	fd400080 	ldr	d0, [x4]
          tz2 * (u[k+1][j][i][3] - u[k-1][j][i][3]);
    400159dc:	fd400c05 	ldr	d5, [x0, #24]
           u[k-1][j][i][1]) +
    400159e0:	fd40040a 	ldr	d10, [x0, #8]
        rhs[k][j][i][1] = rhs[k][j][i][1] + dz2tz1 * 
    400159e4:	fd400429 	ldr	d9, [x1, #8]
          (u[k+1][j][i][0] - 2.0*u[k][j][i][0] + 
    400159e8:	1e683800 	fsub	d0, d0, d8
    400159ec:	fd400008 	ldr	d8, [x0]
        wp1  = ws[k+1][j][i];
    400159f0:	fc6c6942 	ldr	d2, [x10, x12]
        wm1  = ws[k-1][j][i];
    400159f4:	fc6c6921 	ldr	d1, [x9, x12]
          zzcon2 * (us[k+1][j][i] - 2.0*us[k][j][i] + 
    400159f8:	fc6d692b 	ldr	d11, [x9, x13]
          (u[k+1][j][i][0] - 2.0*u[k][j][i][0] + 
    400159fc:	1e682800 	fadd	d0, d0, d8
        rhs[k][j][i][0] = rhs[k][j][i][0] + dz1tz1 * 
    40015a00:	fd400028 	ldr	d8, [x1]
        wijk = ws[k][j][i];
    40015a04:	fc6c6850 	ldr	d16, [x2, x12]
              (u[k+1][j][i][4] - square[k+1][j][i] - 
    40015a08:	fc72695d 	ldr	d29, [x10, x18]
               u[k-1][j][i][4] + square[k-1][j][i])
    40015a0c:	fc72693c 	ldr	d28, [x9, x18]
        rhs[k][j][i][0] = rhs[k][j][i][0] + dz1tz1 * 
    40015a10:	1e720800 	fmul	d0, d0, d18
          zzcon2*con43 * (wp1 - 2.0*wijk + wm1) -
    40015a14:	1e702a1f 	fadd	d31, d16, d16
        rhs[k][j][i][0] = rhs[k][j][i][0] + dz1tz1 * 
    40015a18:	1e682800 	fadd	d0, d0, d8
          tz2 * (u[k+1][j][i][3] - u[k-1][j][i][3]);
    40015a1c:	1e653868 	fsub	d8, d3, d5
          zzcon4 * (wp1*wp1 - 2.0*wijk*wijk + 
    40015a20:	1e700bf0 	fmul	d16, d31, d16
          tz2 * (u[k+1][j][i][3] - u[k-1][j][i][3]);
    40015a24:	1e640908 	fmul	d8, d8, d4
           u[k-1][j][i][0]) -
    40015a28:	1e683800 	fsub	d0, d0, d8
          (u[k+1][j][i][1] - 2.0*u[k][j][i][1] + 
    40015a2c:	fd400488 	ldr	d8, [x4, #8]
        rhs[k][j][i][0] = rhs[k][j][i][0] + dz1tz1 * 
    40015a30:	fd000020 	str	d0, [x1]
          (u[k+1][j][i][1] - 2.0*u[k][j][i][1] + 
    40015a34:	fd400460 	ldr	d0, [x3, #8]
    40015a38:	1e602800 	fadd	d0, d0, d0
    40015a3c:	1e603900 	fsub	d0, d8, d0
          tz2 * (u[k+1][j][i][1]*wp1 - 
    40015a40:	1e620908 	fmul	d8, d8, d2
          (u[k+1][j][i][1] - 2.0*u[k][j][i][1] + 
    40015a44:	1e6a2800 	fadd	d0, d0, d10
              u[k-1][j][i][1]*wm1);
    40015a48:	1e61094a 	fmul	d10, d10, d1
        rhs[k][j][i][1] = rhs[k][j][i][1] + dz2tz1 * 
    40015a4c:	1e730800 	fmul	d0, d0, d19
          tz2 * (u[k+1][j][i][1]*wp1 - 
    40015a50:	1e6a3908 	fsub	d8, d8, d10
           u[k-1][j][i][2]) +
    40015a54:	fd40080a 	ldr	d10, [x0, #16]
        rhs[k][j][i][1] = rhs[k][j][i][1] + dz2tz1 * 
    40015a58:	1e692800 	fadd	d0, d0, d9
          zzcon2 * (us[k+1][j][i] - 2.0*us[k][j][i] + 
    40015a5c:	fc6d6849 	ldr	d9, [x2, x13]
          tz2 * (u[k+1][j][i][1]*wp1 - 
    40015a60:	1e640908 	fmul	d8, d8, d4
          zzcon2 * (us[k+1][j][i] - 2.0*us[k][j][i] + 
    40015a64:	1e69293b 	fadd	d27, d9, d9
    40015a68:	fc6d6949 	ldr	d9, [x10, x13]
    40015a6c:	1e7b3929 	fsub	d9, d9, d27
    40015a70:	1e6b2929 	fadd	d9, d9, d11
          zzcon2 * (vs[k+1][j][i] - 2.0*vs[k][j][i] + 
    40015a74:	fc6e692b 	ldr	d11, [x9, x14]
          zzcon2 * (us[k+1][j][i] - 2.0*us[k][j][i] + 
    40015a78:	1e660929 	fmul	d9, d9, d6
           u[k-1][j][i][1]) +
    40015a7c:	1e692800 	fadd	d0, d0, d9
        rhs[k][j][i][2] = rhs[k][j][i][2] + dz3tz1 * 
    40015a80:	fd400829 	ldr	d9, [x1, #16]
              us[k-1][j][i]) -
    40015a84:	1e683800 	fsub	d0, d0, d8
          (u[k+1][j][i][2] - 2.0*u[k][j][i][2] + 
    40015a88:	fd400888 	ldr	d8, [x4, #16]
        rhs[k][j][i][1] = rhs[k][j][i][1] + dz2tz1 * 
    40015a8c:	fd000420 	str	d0, [x1, #8]
          (u[k+1][j][i][2] - 2.0*u[k][j][i][2] + 
    40015a90:	fd400860 	ldr	d0, [x3, #16]
    40015a94:	1e602800 	fadd	d0, d0, d0
    40015a98:	1e603900 	fsub	d0, d8, d0
          tz2 * (u[k+1][j][i][2]*wp1 - 
    40015a9c:	1e620908 	fmul	d8, d8, d2
          (u[k+1][j][i][2] - 2.0*u[k][j][i][2] + 
    40015aa0:	1e6a2800 	fadd	d0, d0, d10
              u[k-1][j][i][2]*wm1);
    40015aa4:	1e61094a 	fmul	d10, d10, d1
        rhs[k][j][i][2] = rhs[k][j][i][2] + dz3tz1 * 
    40015aa8:	1e740800 	fmul	d0, d0, d20
          tz2 * (u[k+1][j][i][2]*wp1 - 
    40015aac:	1e6a3908 	fsub	d8, d8, d10
        rhs[k][j][i][2] = rhs[k][j][i][2] + dz3tz1 * 
    40015ab0:	1e692800 	fadd	d0, d0, d9
          zzcon2 * (vs[k+1][j][i] - 2.0*vs[k][j][i] + 
    40015ab4:	fc6e6849 	ldr	d9, [x2, x14]
          tz2 * (u[k+1][j][i][2]*wp1 - 
    40015ab8:	1e640908 	fmul	d8, d8, d4
          zzcon2 * (vs[k+1][j][i] - 2.0*vs[k][j][i] + 
    40015abc:	1e69293b 	fadd	d27, d9, d9
    40015ac0:	fc6e6949 	ldr	d9, [x10, x14]
    40015ac4:	1e7b3929 	fsub	d9, d9, d27
               u[k-1][j][i][4] + square[k-1][j][i])
    40015ac8:	fd40101b 	ldr	d27, [x0, #32]
          zzcon2 * (vs[k+1][j][i] - 2.0*vs[k][j][i] + 
    40015acc:	1e6b2929 	fadd	d9, d9, d11
    40015ad0:	1e660929 	fmul	d9, d9, d6
           u[k-1][j][i][2]) +
    40015ad4:	1e692800 	fadd	d0, d0, d9
          zzcon2*con43 * (wp1 - 2.0*wijk + wm1) -
    40015ad8:	1e7608c9 	fmul	d9, d6, d22
              vs[k-1][j][i]) -
    40015adc:	1e683800 	fsub	d0, d0, d8
        rhs[k][j][i][3] = rhs[k][j][i][3] + dz4tz1 * 
    40015ae0:	fd400c28 	ldr	d8, [x1, #24]
        rhs[k][j][i][2] = rhs[k][j][i][2] + dz3tz1 * 
    40015ae4:	fd000820 	str	d0, [x1, #16]
          (u[k+1][j][i][3] - 2.0*u[k][j][i][3] + 
    40015ae8:	fd400c60 	ldr	d0, [x3, #24]
    40015aec:	1e602800 	fadd	d0, d0, d0
    40015af0:	1e603860 	fsub	d0, d3, d0
          tz2 * (u[k+1][j][i][3]*wp1 - 
    40015af4:	1e620863 	fmul	d3, d3, d2
          (u[k+1][j][i][3] - 2.0*u[k][j][i][3] + 
    40015af8:	1e652800 	fadd	d0, d0, d5
              u[k-1][j][i][3]*wm1 +
    40015afc:	1e6108a5 	fmul	d5, d5, d1
        rhs[k][j][i][3] = rhs[k][j][i][3] + dz4tz1 * 
    40015b00:	1e750800 	fmul	d0, d0, d21
          tz2 * (u[k+1][j][i][3]*wp1 - 
    40015b04:	1e653863 	fsub	d3, d3, d5
        rhs[k][j][i][3] = rhs[k][j][i][3] + dz4tz1 * 
    40015b08:	1e682800 	fadd	d0, d0, d8
          zzcon2*con43 * (wp1 - 2.0*wijk + wm1) -
    40015b0c:	1e7f3848 	fsub	d8, d2, d31
              wm1*wm1) +
    40015b10:	1e61083f 	fmul	d31, d1, d1
          zzcon2*con43 * (wp1 - 2.0*wijk + wm1) -
    40015b14:	1e612908 	fadd	d8, d8, d1
    40015b18:	1e690908 	fmul	d8, d8, d9
           u[k-1][j][i][3]) +
    40015b1c:	1e682800 	fadd	d0, d0, d8
              (u[k+1][j][i][4] - square[k+1][j][i] - 
    40015b20:	1e7d3bc8 	fsub	d8, d30, d29
                c2*square[k+1][j][i])*wp1 -
    40015b24:	1e670bbd 	fmul	d29, d29, d7
              (u[k+1][j][i][4] - square[k+1][j][i] - 
    40015b28:	1e7b3908 	fsub	d8, d8, d27
               u[k-1][j][i][4] + square[k-1][j][i])
    40015b2c:	1e7c2908 	fadd	d8, d8, d28
              (c1*u[k-1][j][i][4] - 
               c2*square[k-1][j][i])*wm1);
    40015b30:	1e670b9c 	fmul	d28, d28, d7
              *c2);
    40015b34:	1e670908 	fmul	d8, d8, d7
              u[k-1][j][i][3]*wm1 +
    40015b38:	1e632903 	fadd	d3, d8, d3
          tz2 * (u[k+1][j][i][3]*wp1 - 
    40015b3c:	1e640863 	fmul	d3, d3, d4
          zzcon2*con43 * (wp1 - 2.0*wijk + wm1) -
    40015b40:	1e633803 	fsub	d3, d0, d3
        rhs[k][j][i][3] = rhs[k][j][i][3] + dz4tz1 * 
    40015b44:	fd000c23 	str	d3, [x1, #24]
          zzcon3 * (qs[k+1][j][i] - 2.0*qs[k][j][i] + 
    40015b48:	fc6f6840 	ldr	d0, [x2, x15]
          (u[k+1][j][i][4] - 2.0*u[k][j][i][4] + 
    40015b4c:	fd401065 	ldr	d5, [x3, #32]
        rhs[k][j][i][4] = rhs[k][j][i][4] + dz5tz1 * 
    40015b50:	fd401028 	ldr	d8, [x1, #32]
          zzcon3 * (qs[k+1][j][i] - 2.0*qs[k][j][i] + 
    40015b54:	1e602803 	fadd	d3, d0, d0
    40015b58:	fc6f6940 	ldr	d0, [x10, x15]
          (u[k+1][j][i][4] - 2.0*u[k][j][i][4] + 
    40015b5c:	1e6528a5 	fadd	d5, d5, d5
          zzcon3 * (qs[k+1][j][i] - 2.0*qs[k][j][i] + 
    40015b60:	1e633800 	fsub	d0, d0, d3
    40015b64:	fc6f6923 	ldr	d3, [x9, x15]
    40015b68:	1e632800 	fadd	d0, d0, d3
          (u[k+1][j][i][4] - 2.0*u[k][j][i][4] + 
    40015b6c:	1e653bc3 	fsub	d3, d30, d5
    40015b70:	1e7b2863 	fadd	d3, d3, d27
          zzcon3 * (qs[k+1][j][i] - 2.0*qs[k][j][i] + 
    40015b74:	1e780800 	fmul	d0, d0, d24
        rhs[k][j][i][4] = rhs[k][j][i][4] + dz5tz1 * 
    40015b78:	1e770863 	fmul	d3, d3, d23
    40015b7c:	1e682863 	fadd	d3, d3, d8
              2.0*u[k][j][i][4]*rho_i[k][j][i] +
    40015b80:	fc706848 	ldr	d8, [x2, x16]
    40015b84:	1e6808a5 	fmul	d5, d5, d8
           u[k-1][j][i][4]) +
    40015b88:	1e632800 	fadd	d0, d0, d3
          zzcon4 * (wp1*wp1 - 2.0*wijk*wijk + 
    40015b8c:	1e620843 	fmul	d3, d2, d2
    40015b90:	1e703870 	fsub	d16, d3, d16
          zzcon5 * (u[k+1][j][i][4]*rho_i[k+1][j][i] - 
    40015b94:	fc706943 	ldr	d3, [x10, x16]
    40015b98:	1e630bc3 	fmul	d3, d30, d3
          zzcon4 * (wp1*wp1 - 2.0*wijk*wijk + 
    40015b9c:	1e7f2a10 	fadd	d16, d16, d31
          zzcon5 * (u[k+1][j][i][4]*rho_i[k+1][j][i] - 
    40015ba0:	1e653863 	fsub	d3, d3, d5
              u[k-1][j][i][4]*rho_i[k-1][j][i]) -
    40015ba4:	fc706925 	ldr	d5, [x9, x16]
          zzcon4 * (wp1*wp1 - 2.0*wijk*wijk + 
    40015ba8:	1e790a10 	fmul	d16, d16, d25
              u[k-1][j][i][4]*rho_i[k-1][j][i]) -
    40015bac:	1e650b65 	fmul	d5, d27, d5
              (c1*u[k-1][j][i][4] - 
    40015bb0:	1e710b7b 	fmul	d27, d27, d17
              qs[k-1][j][i]) +
    40015bb4:	1e702800 	fadd	d0, d0, d16
              2.0*u[k][j][i][4]*rho_i[k][j][i] +
    40015bb8:	1e652863 	fadd	d3, d3, d5
              (c1*u[k-1][j][i][4] - 
    40015bbc:	1e7c3b7b 	fsub	d27, d27, d28
          zzcon5 * (u[k+1][j][i][4]*rho_i[k+1][j][i] - 
    40015bc0:	1e7a0863 	fmul	d3, d3, d26
               c2*square[k-1][j][i])*wm1);
    40015bc4:	1e610b61 	fmul	d1, d27, d1
              wm1*wm1) +
    40015bc8:	1e632800 	fadd	d0, d0, d3
          tz2 * ( (c1*u[k+1][j][i][4] - 
    40015bcc:	1e710bc3 	fmul	d3, d30, d17
    40015bd0:	1e7d3863 	fsub	d3, d3, d29
                c2*square[k+1][j][i])*wp1 -
    40015bd4:	1e620862 	fmul	d2, d3, d2
    40015bd8:	1e613841 	fsub	d1, d2, d1
          tz2 * ( (c1*u[k+1][j][i][4] - 
    40015bdc:	1e640821 	fmul	d1, d1, d4
              u[k-1][j][i][4]*rho_i[k-1][j][i]) -
    40015be0:	1e613801 	fsub	d1, d0, d1
        rhs[k][j][i][4] = rhs[k][j][i][4] + dz5tz1 * 
    40015be4:	fd001021 	str	d1, [x1, #32]
      for (i = 1; i <= grid_points[0]-2; i++) {
    40015be8:	9100a021 	add	x1, x1, #0x28
    40015bec:	9100a084 	add	x4, x4, #0x28
    40015bf0:	9100a063 	add	x3, x3, #0x28
    40015bf4:	9100a000 	add	x0, x0, #0x28
    40015bf8:	9100214a 	add	x10, x10, #0x8
    40015bfc:	91002129 	add	x9, x9, #0x8
    40015c00:	91002042 	add	x2, x2, #0x8
    40015c04:	6b1800bf 	cmp	w5, w24
    40015c08:	54ffee0a 	b.ge	400159c8 <compute_rhs+0x10b8>  // b.tcont
    for (j = 1; j <= grid_points[1]-2; j++) {
    40015c0c:	1100056b 	add	w11, w11, #0x1
    40015c10:	6b0b00df 	cmp	w6, w11
    40015c14:	5400024b 	b.lt	40015c5c <compute_rhs+0x134c>  // b.tstop
    40015c18:	52804100 	mov	w0, #0x208                 	// #520
    40015c1c:	52800d02 	mov	w2, #0x68                  	// #104
    40015c20:	f94047e1 	ldr	x1, [sp, #136]
    40015c24:	9b207d60 	smull	x0, w11, w0
    40015c28:	9b227d62 	smull	x2, w11, w2
      for (i = 1; i <= grid_points[0]-2; i++) {
    40015c2c:	52800038 	mov	w24, #0x1                   	// #1
    40015c30:	8b000383 	add	x3, x28, x0
    40015c34:	8b000364 	add	x4, x27, x0
    40015c38:	8b000340 	add	x0, x26, x0
    40015c3c:	8b02032a 	add	x10, x25, x2
    40015c40:	8b110049 	add	x9, x2, x17
    40015c44:	8b010061 	add	x1, x3, x1
    40015c48:	8b040264 	add	x4, x19, x4
    40015c4c:	8b000260 	add	x0, x19, x0
    40015c50:	8b080042 	add	x2, x2, x8
    40015c54:	8b030263 	add	x3, x19, x3
    40015c58:	17ffffe4 	b	40015be8 <compute_rhs+0x12d8>
  for (k = 1; k <= grid_points[2]-2; k++) {
    40015c5c:	2a1603e8 	mov	w8, w22
    40015c60:	17ffff49 	b	40015984 <compute_rhs+0x1074>
  //---------------------------------------------------------------------
  k = 1;
  for (j = 1; j <= grid_points[1]-2; j++) {
    for (i = 1; i <= grid_points[0]-2; i++) {
      for (m = 0; m < 5; m++) {
        rhs[k][j][i][m] = rhs[k][j][i][m]- dssp * 
    40015c64:	f9404be0 	ldr	x0, [sp, #144]
    40015c68:	d00001a4 	adrp	x4, 4004b000 <rho_i+0x33e8>
    40015c6c:	912de084 	add	x4, x4, #0xb78
  for (j = 1; j <= grid_points[1]-2; j++) {
    40015c70:	52800022 	mov	w2, #0x1                   	// #1
    40015c74:	5280410b 	mov	w11, #0x208                 	// #520
    40015c78:	d283520a 	mov	x10, #0x1a90                	// #6800
        rhs[k][j][i][m] = rhs[k][j][i][m]- dssp * 
    40015c7c:	fd45ac01 	ldr	d1, [x0, #2904]
          ( 5.0*u[k][j][i][m] - 4.0*u[k+1][j][i][m] +
    40015c80:	1e629003 	fmov	d3, #5.000000000000000000e+00
    40015c84:	1e621004 	fmov	d4, #4.000000000000000000e+00
  for (j = 1; j <= grid_points[1]-2; j++) {
    40015c88:	6b0200df 	cmp	w6, w2
    40015c8c:	540007ab 	b.lt	40015d80 <compute_rhs+0x1470>  // b.tstop
    40015c90:	9b2b2841 	smaddl	x1, w2, w11, x10
    for (i = 1; i <= grid_points[0]-2; i++) {
    40015c94:	52800023 	mov	w3, #0x1                   	// #1
    40015c98:	14000015 	b	40015cec <compute_rhs+0x13dc>
    40015c9c:	8b040029 	add	x9, x1, x4
    40015ca0:	8b130020 	add	x0, x1, x19
      for (m = 0; m < 5; m++) {
    40015ca4:	52800008 	mov	w8, #0x0                   	// #0
          ( 5.0*u[k][j][i][m] - 4.0*u[k+1][j][i][m] +
    40015ca8:	fd400000 	ldr	d0, [x0]
      for (m = 0; m < 5; m++) {
    40015cac:	11000508 	add	w8, w8, #0x1
          ( 5.0*u[k][j][i][m] - 4.0*u[k+1][j][i][m] +
    40015cb0:	fd4d3402 	ldr	d2, [x0, #6760]
      for (m = 0; m < 5; m++) {
    40015cb4:	7100151f 	cmp	w8, #0x5
    40015cb8:	91002000 	add	x0, x0, #0x8
          ( 5.0*u[k][j][i][m] - 4.0*u[k+1][j][i][m] +
    40015cbc:	1e630800 	fmul	d0, d0, d3
    40015cc0:	1e640842 	fmul	d2, d2, d4
    40015cc4:	1e623800 	fsub	d0, d0, d2
    40015cc8:	fd5a6402 	ldr	d2, [x0, #13512]
    40015ccc:	1e622800 	fadd	d0, d0, d2
        rhs[k][j][i][m] = rhs[k][j][i][m]- dssp * 
    40015cd0:	fd400122 	ldr	d2, [x9]
    40015cd4:	1e610800 	fmul	d0, d0, d1
    40015cd8:	1e603840 	fsub	d0, d2, d0
    40015cdc:	fc008520 	str	d0, [x9], #8
      for (m = 0; m < 5; m++) {
    40015ce0:	54fffe41 	b.ne	40015ca8 <compute_rhs+0x1398>  // b.any
    for (i = 1; i <= grid_points[0]-2; i++) {
    40015ce4:	11000463 	add	w3, w3, #0x1
    40015ce8:	9100a021 	add	x1, x1, #0x28
    40015cec:	6b0300bf 	cmp	w5, w3
    40015cf0:	54fffd6a 	b.ge	40015c9c <compute_rhs+0x138c>  // b.tcont
  for (j = 1; j <= grid_points[1]-2; j++) {
    40015cf4:	11000442 	add	w2, w2, #0x1
    40015cf8:	17ffffe4 	b	40015c88 <compute_rhs+0x1378>
    40015cfc:	8b090022 	add	x2, x1, x9
    40015d00:	8b130020 	add	x0, x1, x19
  }

  k = 2;
  for (j = 1; j <= grid_points[1]-2; j++) {
    for (i = 1; i <= grid_points[0]-2; i++) {
      for (m = 0; m < 5; m++) {
    40015d04:	5280000a 	mov	w10, #0x0                   	// #0
        rhs[k][j][i][m] = rhs[k][j][i][m] - dssp * 
          (-4.0*u[k-1][j][i][m] + 6.0*u[k][j][i][m] -
    40015d08:	fd4d3400 	ldr	d0, [x0, #6760]
      for (m = 0; m < 5; m++) {
    40015d0c:	1100054a 	add	w10, w10, #0x1
          (-4.0*u[k-1][j][i][m] + 6.0*u[k][j][i][m] -
    40015d10:	fd5a6802 	ldr	d2, [x0, #13520]
      for (m = 0; m < 5; m++) {
    40015d14:	7100155f 	cmp	w10, #0x5
    40015d18:	91002000 	add	x0, x0, #0x8
    40015d1c:	91002042 	add	x2, x2, #0x8
          (-4.0*u[k-1][j][i][m] + 6.0*u[k][j][i][m] -
    40015d20:	1e630800 	fmul	d0, d0, d3
    40015d24:	1e640842 	fmul	d2, d2, d4
    40015d28:	1e622800 	fadd	d0, d0, d2
           4.0*u[k+1][j][i][m] + u[k+2][j][i][m]);
    40015d2c:	fd679802 	ldr	d2, [x0, #20272]
    40015d30:	1e650842 	fmul	d2, d2, d5
          (-4.0*u[k-1][j][i][m] + 6.0*u[k][j][i][m] -
    40015d34:	1e623800 	fsub	d0, d0, d2
           4.0*u[k+1][j][i][m] + u[k+2][j][i][m]);
    40015d38:	fd74cc02 	ldr	d2, [x0, #27032]
    40015d3c:	1e622800 	fadd	d0, d0, d2
        rhs[k][j][i][m] = rhs[k][j][i][m] - dssp * 
    40015d40:	fd5a6442 	ldr	d2, [x2, #13512]
    40015d44:	1e610800 	fmul	d0, d0, d1
    40015d48:	1e603840 	fsub	d0, d2, d0
    40015d4c:	fd1a6440 	str	d0, [x2, #13512]
      for (m = 0; m < 5; m++) {
    40015d50:	54fffdc1 	b.ne	40015d08 <compute_rhs+0x13f8>  // b.any
    for (i = 1; i <= grid_points[0]-2; i++) {
    40015d54:	11000463 	add	w3, w3, #0x1
    40015d58:	9100a021 	add	x1, x1, #0x28
    40015d5c:	6b0300bf 	cmp	w5, w3
    40015d60:	54fffcea 	b.ge	40015cfc <compute_rhs+0x13ec>  // b.tcont
  for (j = 1; j <= grid_points[1]-2; j++) {
    40015d64:	11000508 	add	w8, w8, #0x1
    40015d68:	91082084 	add	x4, x4, #0x208
    40015d6c:	6b0800df 	cmp	w6, w8
    40015d70:	5400080b 	b.lt	40015e70 <compute_rhs+0x1560>  // b.tstop
    40015d74:	9100a081 	add	x1, x4, #0x28
    for (i = 1; i <= grid_points[0]-2; i++) {
    40015d78:	52800023 	mov	w3, #0x1                   	// #1
    40015d7c:	17fffff8 	b	40015d5c <compute_rhs+0x144c>
    40015d80:	d00001a9 	adrp	x9, 4004b000 <rho_i+0x33e8>
    40015d84:	912de129 	add	x9, x9, #0xb78
    40015d88:	d2804104 	mov	x4, #0x208                 	// #520
  for (j = 1; j <= grid_points[1]-2; j++) {
    40015d8c:	52800028 	mov	w8, #0x1                   	// #1
          (-4.0*u[k-1][j][i][m] + 6.0*u[k][j][i][m] -
    40015d90:	1e721003 	fmov	d3, #-4.000000000000000000e+00
    40015d94:	1e631004 	fmov	d4, #6.000000000000000000e+00
           4.0*u[k+1][j][i][m] + u[k+2][j][i][m]);
    40015d98:	1e621005 	fmov	d5, #4.000000000000000000e+00
    40015d9c:	17fffff4 	b	40015d6c <compute_rhs+0x145c>
    40015da0:	8b0e0031 	add	x17, x1, x14
    40015da4:	8b130032 	add	x18, x1, x19
  }

  for (k = 3; k <= grid_points[2]-4; k++) {
    for (j = 1; j <= grid_points[1]-2; j++) {
      for (i = 1; i <= grid_points[0]-2; i++) {
        for (m = 0; m < 5; m++) {
    40015da8:	52800010 	mov	w16, #0x0                   	// #0
          rhs[k][j][i][m] = rhs[k][j][i][m] - dssp * 
    40015dac:	8b1201a4 	add	x4, x13, x18
        for (m = 0; m < 5; m++) {
    40015db0:	11000610 	add	w16, w16, #0x1
    40015db4:	7100161f 	cmp	w16, #0x5
            (  u[k-2][j][i][m] - 4.0*u[k-1][j][i][m] + 
    40015db8:	fc6b6880 	ldr	d0, [x4, x11]
    40015dbc:	1e630802 	fmul	d2, d0, d3
    40015dc0:	fc6c6880 	ldr	d0, [x4, x12]
    40015dc4:	1e623800 	fsub	d0, d0, d2
               6.0*u[k][j][i][m] - 4.0*u[k+1][j][i][m] + 
    40015dc8:	fc408642 	ldr	d2, [x18], #8
    40015dcc:	1e640842 	fmul	d2, d2, d4
            (  u[k-2][j][i][m] - 4.0*u[k-1][j][i][m] + 
    40015dd0:	1e622800 	fadd	d0, d0, d2
               6.0*u[k][j][i][m] - 4.0*u[k+1][j][i][m] + 
    40015dd4:	fc786882 	ldr	d2, [x4, x24]
    40015dd8:	1e630842 	fmul	d2, d2, d3
    40015ddc:	1e623800 	fsub	d0, d0, d2
    40015de0:	fc606882 	ldr	d2, [x4, x0]
    40015de4:	1e622800 	fadd	d0, d0, d2
          rhs[k][j][i][m] = rhs[k][j][i][m] - dssp * 
    40015de8:	fd400222 	ldr	d2, [x17]
    40015dec:	1e610800 	fmul	d0, d0, d1
    40015df0:	1e603840 	fsub	d0, d2, d0
    40015df4:	fc008620 	str	d0, [x17], #8
        for (m = 0; m < 5; m++) {
    40015df8:	54fffda1 	b.ne	40015dac <compute_rhs+0x149c>  // b.any
      for (i = 1; i <= grid_points[0]-2; i++) {
    40015dfc:	110005ef 	add	w15, w15, #0x1
    40015e00:	9100a021 	add	x1, x1, #0x28
    40015e04:	6b0f00bf 	cmp	w5, w15
    40015e08:	54fffcca 	b.ge	40015da0 <compute_rhs+0x1490>  // b.tcont
    for (j = 1; j <= grid_points[1]-2; j++) {
    40015e0c:	11000529 	add	w9, w9, #0x1
    40015e10:	9108214a 	add	x10, x10, #0x208
    40015e14:	6b0900df 	cmp	w6, w9
    40015e18:	5400008b 	b.lt	40015e28 <compute_rhs+0x1518>  // b.tstop
    40015e1c:	8b0a0101 	add	x1, x8, x10
      for (i = 1; i <= grid_points[0]-2; i++) {
    40015e20:	5280002f 	mov	w15, #0x1                   	// #1
    40015e24:	17fffff8 	b	40015e04 <compute_rhs+0x14f4>
  for (k = 3; k <= grid_points[2]-4; k++) {
    40015e28:	2a1603e0 	mov	w0, w22
    40015e2c:	6b00005f 	cmp	w2, w0
    40015e30:	5400032b 	b.lt	40015e94 <compute_rhs+0x1584>  // b.tstop
    40015e34:	9b237c08 	smull	x8, w0, w3
    40015e38:	93407c0d 	sxtw	x13, w0
    40015e3c:	5100080c 	sub	w12, w0, #0x2
    40015e40:	5100040b 	sub	w11, w0, #0x1
    40015e44:	11000416 	add	w22, w0, #0x1
    40015e48:	11000800 	add	w0, w0, #0x2
    40015e4c:	9b177dad 	mul	x13, x13, x23
    40015e50:	9100a108 	add	x8, x8, #0x28
    40015e54:	9b237d8c 	smull	x12, w12, w3
    40015e58:	d280410a 	mov	x10, #0x208                 	// #520
    40015e5c:	9b237d6b 	smull	x11, w11, w3
    for (j = 1; j <= grid_points[1]-2; j++) {
    40015e60:	52800029 	mov	w9, #0x1                   	// #1
    40015e64:	9b237ed8 	smull	x24, w22, w3
    40015e68:	9b237c00 	smull	x0, w0, w3
    40015e6c:	17ffffea 	b	40015e14 <compute_rhs+0x1504>
    40015e70:	d00001ae 	adrp	x14, 4004b000 <rho_i+0x33e8>
    40015e74:	912de1ce 	add	x14, x14, #0xb78
  for (k = 3; k <= grid_points[2]-4; k++) {
    40015e78:	510010e2 	sub	w2, w7, #0x4
    40015e7c:	52800060 	mov	w0, #0x3                   	// #3
    40015e80:	52834d03 	mov	w3, #0x1a68                	// #6760
    40015e84:	92834cf7 	mov	x23, #0xffffffffffffe598    	// #-6760
            (  u[k-2][j][i][m] - 4.0*u[k-1][j][i][m] + 
    40015e88:	1e621003 	fmov	d3, #4.000000000000000000e+00
               6.0*u[k][j][i][m] - 4.0*u[k+1][j][i][m] + 
    40015e8c:	1e631004 	fmov	d4, #6.000000000000000000e+00
    40015e90:	17ffffe7 	b	40015e2c <compute_rhs+0x151c>
        }
      }
    }
  }

  k = grid_points[2]-3;
    40015e94:	51000ce0 	sub	w0, w7, #0x3
  for (j = 1; j <= grid_points[1]-2; j++) {
    40015e98:	93407c44 	sxtw	x4, w2
    40015e9c:	510014e7 	sub	w7, w7, #0x5
    40015ea0:	d2834d08 	mov	x8, #0x1a68                	// #6760
    40015ea4:	92834ce9 	mov	x9, #0xffffffffffffe598    	// #-6760
    40015ea8:	9b237c42 	smull	x2, w2, w3
    40015eac:	9b237c01 	smull	x1, w0, w3
    40015eb0:	cb20c080 	sub	x0, x4, w0, sxtw
    40015eb4:	9b097c89 	mul	x9, x4, x9
    40015eb8:	93407fc4 	sxtw	x4, w30
    40015ebc:	9b237ce7 	smull	x7, w7, w3
    for (i = 1; i <= grid_points[0]-2; i++) {
      for (m = 0; m < 5; m++) {
        rhs[k][j][i][m] = rhs[k][j][i][m] - dssp *
    40015ec0:	d00001aa 	adrp	x10, 4004b000 <rho_i+0x33e8>
    40015ec4:	912de14a 	add	x10, x10, #0xb78
    40015ec8:	9b084c00 	madd	x0, x0, x8, x19
    40015ecc:	9b237fde 	smull	x30, w30, w3
    40015ed0:	9100a031 	add	x17, x1, #0x28
  for (j = 1; j <= grid_points[1]-2; j++) {
    40015ed4:	d280410c 	mov	x12, #0x208                 	// #520
    40015ed8:	5280002d 	mov	w13, #0x1                   	// #1
          ( u[k-2][j][i][m] - 4.0*u[k-1][j][i][m] + 
    40015edc:	1e621003 	fmov	d3, #4.000000000000000000e+00
            6.0*u[k][j][i][m] - 4.0*u[k+1][j][i][m] );
    40015ee0:	1e631004 	fmov	d4, #6.000000000000000000e+00
  for (j = 1; j <= grid_points[1]-2; j++) {
    40015ee4:	6b0d00df 	cmp	w6, w13
    40015ee8:	5400042b 	b.lt	40015f6c <compute_rhs+0x165c>  // b.tstop
    40015eec:	8b0c0228 	add	x8, x17, x12
    for (i = 1; i <= grid_points[0]-2; i++) {
    40015ef0:	5280002b 	mov	w11, #0x1                   	// #1
    40015ef4:	14000019 	b	40015f58 <compute_rhs+0x1648>
    40015ef8:	8b08000f 	add	x15, x0, x8
    40015efc:	aa0803e3 	mov	x3, x8
      for (m = 0; m < 5; m++) {
    40015f00:	5280000e 	mov	w14, #0x0                   	// #0
        rhs[k][j][i][m] = rhs[k][j][i][m] - dssp *
    40015f04:	8b0f0130 	add	x16, x9, x15
          ( u[k-2][j][i][m] - 4.0*u[k-1][j][i][m] + 
    40015f08:	fc4085e0 	ldr	d0, [x15], #8
      for (m = 0; m < 5; m++) {
    40015f0c:	110005ce 	add	w14, w14, #0x1
    40015f10:	710015df 	cmp	w14, #0x5
          ( u[k-2][j][i][m] - 4.0*u[k-1][j][i][m] + 
    40015f14:	1e630802 	fmul	d2, d0, d3
    40015f18:	fc676a00 	ldr	d0, [x16, x7]
    40015f1c:	1e623800 	fsub	d0, d0, d2
            6.0*u[k][j][i][m] - 4.0*u[k+1][j][i][m] );
    40015f20:	fc636a62 	ldr	d2, [x19, x3]
    40015f24:	1e640842 	fmul	d2, d2, d4
          ( u[k-2][j][i][m] - 4.0*u[k-1][j][i][m] + 
    40015f28:	1e622800 	fadd	d0, d0, d2
            6.0*u[k][j][i][m] - 4.0*u[k+1][j][i][m] );
    40015f2c:	fc7e6a02 	ldr	d2, [x16, x30]
    40015f30:	1e630842 	fmul	d2, d2, d3
    40015f34:	1e623800 	fsub	d0, d0, d2
        rhs[k][j][i][m] = rhs[k][j][i][m] - dssp *
    40015f38:	fc6a6862 	ldr	d2, [x3, x10]
    40015f3c:	1e610800 	fmul	d0, d0, d1
    40015f40:	1e603840 	fsub	d0, d2, d0
    40015f44:	fc2a6860 	str	d0, [x3, x10]
      for (m = 0; m < 5; m++) {
    40015f48:	91002063 	add	x3, x3, #0x8
    40015f4c:	54fffdc1 	b.ne	40015f04 <compute_rhs+0x15f4>  // b.any
    for (i = 1; i <= grid_points[0]-2; i++) {
    40015f50:	1100056b 	add	w11, w11, #0x1
    40015f54:	9100a108 	add	x8, x8, #0x28
    40015f58:	6b0b00bf 	cmp	w5, w11
    40015f5c:	54fffcea 	b.ge	40015ef8 <compute_rhs+0x15e8>  // b.tcont
  for (j = 1; j <= grid_points[1]-2; j++) {
    40015f60:	110005ad 	add	w13, w13, #0x1
    40015f64:	9108218c 	add	x12, x12, #0x208
    40015f68:	17ffffdf 	b	40015ee4 <compute_rhs+0x15d4>
    40015f6c:	92834ce0 	mov	x0, #0xffffffffffffe598    	// #-6760

  k = grid_points[2]-2;
  for (j = 1; j <= grid_points[1]-2; j++) {
    for (i = 1; i <= grid_points[0]-2; i++) {
      for (m = 0; m < 5; m++) {
        rhs[k][j][i][m] = rhs[k][j][i][m] - dssp *
    40015f70:	d00001a3 	adrp	x3, 4004b000 <rho_i+0x33e8>
    40015f74:	912de063 	add	x3, x3, #0xb78
    40015f78:	9100a3de 	add	x30, x30, #0x28
    40015f7c:	9b007c80 	mul	x0, x4, x0
  for (j = 1; j <= grid_points[1]-2; j++) {
    40015f80:	d2804108 	mov	x8, #0x208                 	// #520
  for (j = 1; j <= grid_points[1]-2; j++) {
    40015f84:	52800029 	mov	w9, #0x1                   	// #1
          ( u[k-2][j][i][m] - 4.*u[k-1][j][i][m] +
    40015f88:	1e621003 	fmov	d3, #4.000000000000000000e+00
    40015f8c:	8b000042 	add	x2, x2, x0
    40015f90:	8b000021 	add	x1, x1, x0
    40015f94:	8b020262 	add	x2, x19, x2
    40015f98:	8b010261 	add	x1, x19, x1
            5.*u[k][j][i][m] );
    40015f9c:	1e629004 	fmov	d4, #5.000000000000000000e+00
  for (j = 1; j <= grid_points[1]-2; j++) {
    40015fa0:	6b0900df 	cmp	w6, w9
    40015fa4:	5400038b 	b.lt	40016014 <compute_rhs+0x1704>  // b.tstop
    40015fa8:	8b0803c7 	add	x7, x30, x8
    for (i = 1; i <= grid_points[0]-2; i++) {
    40015fac:	52800024 	mov	w4, #0x1                   	// #1
    40015fb0:	14000014 	b	40016000 <compute_rhs+0x16f0>
    40015fb4:	aa0703e0 	mov	x0, x7
      for (m = 0; m < 5; m++) {
    40015fb8:	5280000a 	mov	w10, #0x0                   	// #0
          ( u[k-2][j][i][m] - 4.*u[k-1][j][i][m] +
    40015fbc:	fc606820 	ldr	d0, [x1, x0]
      for (m = 0; m < 5; m++) {
    40015fc0:	1100054a 	add	w10, w10, #0x1
    40015fc4:	7100155f 	cmp	w10, #0x5
          ( u[k-2][j][i][m] - 4.*u[k-1][j][i][m] +
    40015fc8:	1e630802 	fmul	d2, d0, d3
    40015fcc:	fc606840 	ldr	d0, [x2, x0]
    40015fd0:	1e623800 	fsub	d0, d0, d2
            5.*u[k][j][i][m] );
    40015fd4:	fc606a62 	ldr	d2, [x19, x0]
    40015fd8:	1e640842 	fmul	d2, d2, d4
          ( u[k-2][j][i][m] - 4.*u[k-1][j][i][m] +
    40015fdc:	1e622800 	fadd	d0, d0, d2
        rhs[k][j][i][m] = rhs[k][j][i][m] - dssp *
    40015fe0:	fc636802 	ldr	d2, [x0, x3]
    40015fe4:	1e610800 	fmul	d0, d0, d1
    40015fe8:	1e603840 	fsub	d0, d2, d0
    40015fec:	fc236800 	str	d0, [x0, x3]
      for (m = 0; m < 5; m++) {
    40015ff0:	91002000 	add	x0, x0, #0x8
    40015ff4:	54fffe41 	b.ne	40015fbc <compute_rhs+0x16ac>  // b.any
    for (i = 1; i <= grid_points[0]-2; i++) {
    40015ff8:	11000484 	add	w4, w4, #0x1
    40015ffc:	9100a0e7 	add	x7, x7, #0x28
    40016000:	6b0400bf 	cmp	w5, w4
    40016004:	54fffd8a 	b.ge	40015fb4 <compute_rhs+0x16a4>  // b.tcont
  for (j = 1; j <= grid_points[1]-2; j++) {
    40016008:	11000529 	add	w9, w9, #0x1
    4001600c:	91082108 	add	x8, x8, #0x208
    40016010:	17ffffe4 	b	40015fa0 <compute_rhs+0x1690>
      }
    }
  }
  if (timeron) timer_stop(t_rhsz);
    40016014:	b94a8e80 	ldr	w0, [x20, #2700]
    40016018:	34000060 	cbz	w0, 40016024 <compute_rhs+0x1714>
    4001601c:	52800080 	mov	w0, #0x4                   	// #4
    40016020:	97fff207 	bl	4001283c <timer_stop>

  for (k = 1; k <= grid_points[2]-2; k++) {
    for (j = 1; j <= grid_points[1]-2; j++) {
      for (i = 1; i <= grid_points[0]-2; i++) {
    40016024:	f94043e0 	ldr	x0, [sp, #128]
    40016028:	b00001a7 	adrp	x7, 4004b000 <rho_i+0x33e8>
    4001602c:	912de0e7 	add	x7, x7, #0xb78
        for (m = 0; m < 5; m++) {
          rhs[k][j][i][m] = rhs[k][j][i][m] * dt;
    40016030:	52800023 	mov	w3, #0x1                   	// #1
  for (k = 1; k <= grid_points[2]-2; k++) {
    40016034:	29409aa5 	ldp	w5, w6, [x21, #4]
    40016038:	52834d0b 	mov	w11, #0x1a68                	// #6760
      for (i = 1; i <= grid_points[0]-2; i++) {
    4001603c:	b94a8004 	ldr	w4, [x0, #2688]
          rhs[k][j][i][m] = rhs[k][j][i][m] * dt;
    40016040:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    40016044:	fd45b001 	ldr	d1, [x0, #2912]
  for (k = 1; k <= grid_points[2]-2; k++) {
    40016048:	510008c6 	sub	w6, w6, #0x2
    for (j = 1; j <= grid_points[1]-2; j++) {
    4001604c:	510008a5 	sub	w5, w5, #0x2
      for (i = 1; i <= grid_points[0]-2; i++) {
    40016050:	51000884 	sub	w4, w4, #0x2
    40016054:	5280410c 	mov	w12, #0x208                 	// #520
  for (k = 1; k <= grid_points[2]-2; k++) {
    40016058:	6b0300df 	cmp	w6, w3
    4001605c:	5400034b 	b.lt	400160c4 <compute_rhs+0x17b4>  // b.tstop
    40016060:	9b2b7c60 	smull	x0, w3, w11
    for (j = 1; j <= grid_points[1]-2; j++) {
    40016064:	52800022 	mov	w2, #0x1                   	// #1
    40016068:	9100a000 	add	x0, x0, #0x28
    4001606c:	1400000e 	b	400160a4 <compute_rhs+0x1794>
    40016070:	aa0103ea 	mov	x10, x1
        for (m = 0; m < 5; m++) {
    40016074:	52800009 	mov	w9, #0x0                   	// #0
          rhs[k][j][i][m] = rhs[k][j][i][m] * dt;
    40016078:	fd400140 	ldr	d0, [x10]
        for (m = 0; m < 5; m++) {
    4001607c:	11000529 	add	w9, w9, #0x1
    40016080:	7100153f 	cmp	w9, #0x5
          rhs[k][j][i][m] = rhs[k][j][i][m] * dt;
    40016084:	1e610800 	fmul	d0, d0, d1
    40016088:	fc008540 	str	d0, [x10], #8
        for (m = 0; m < 5; m++) {
    4001608c:	54ffff61 	b.ne	40016078 <compute_rhs+0x1768>  // b.any
      for (i = 1; i <= grid_points[0]-2; i++) {
    40016090:	11000508 	add	w8, w8, #0x1
    40016094:	9100a021 	add	x1, x1, #0x28
    40016098:	6b08009f 	cmp	w4, w8
    4001609c:	54fffeaa 	b.ge	40016070 <compute_rhs+0x1760>  // b.tcont
    for (j = 1; j <= grid_points[1]-2; j++) {
    400160a0:	11000442 	add	w2, w2, #0x1
    400160a4:	6b0200bf 	cmp	w5, w2
    400160a8:	540000ab 	b.lt	400160bc <compute_rhs+0x17ac>  // b.tstop
    400160ac:	9b2c0041 	smaddl	x1, w2, w12, x0
      for (i = 1; i <= grid_points[0]-2; i++) {
    400160b0:	52800028 	mov	w8, #0x1                   	// #1
    400160b4:	8b070021 	add	x1, x1, x7
    400160b8:	17fffff8 	b	40016098 <compute_rhs+0x1788>
  for (k = 1; k <= grid_points[2]-2; k++) {
    400160bc:	11000463 	add	w3, w3, #0x1
    400160c0:	17ffffe6 	b	40016058 <compute_rhs+0x1748>
        }
      }
    }
  }
  if (timeron) timer_stop(t_rhs);
    400160c4:	b94a8e80 	ldr	w0, [x20, #2700]
    400160c8:	34000160 	cbz	w0, 400160f4 <compute_rhs+0x17e4>
}
    400160cc:	a94153f3 	ldp	x19, x20, [sp, #16]
  if (timeron) timer_stop(t_rhs);
    400160d0:	528000a0 	mov	w0, #0x5                   	// #5
}
    400160d4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    400160d8:	a94363f7 	ldp	x23, x24, [sp, #48]
    400160dc:	a9446bf9 	ldp	x25, x26, [sp, #64]
    400160e0:	a94573fb 	ldp	x27, x28, [sp, #80]
    400160e4:	6d4627e8 	ldp	d8, d9, [sp, #96]
    400160e8:	6d472fea 	ldp	d10, d11, [sp, #112]
    400160ec:	a8d07bfd 	ldp	x29, x30, [sp], #256
  if (timeron) timer_stop(t_rhs);
    400160f0:	17fff1d3 	b	4001283c <timer_stop>
}
    400160f4:	a94153f3 	ldp	x19, x20, [sp, #16]
    400160f8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    400160fc:	a94363f7 	ldp	x23, x24, [sp, #48]
    40016100:	a9446bf9 	ldp	x25, x26, [sp, #64]
    40016104:	a94573fb 	ldp	x27, x28, [sp, #80]
    40016108:	6d4627e8 	ldp	d8, d9, [sp, #96]
    4001610c:	6d472fea 	ldp	d10, d11, [sp, #112]
    40016110:	a8d07bfd 	ldp	x29, x30, [sp], #256
    40016114:	d65f03c0 	ret

0000000040016118 <set_constants>:

#include "header.h"

void set_constants()
{
  ce[0][0]  = 2.0;
    40016118:	1e601002 	fmov	d2, #2.000000000000000000e+00
    4001611c:	d00000a1 	adrp	x1, 4002c000 <z_idle_threads>
    40016120:	91226020 	add	x0, x1, #0x898
  ce[0][9]  = 0.03;
  ce[0][10] = 0.5;
  ce[0][11] = 0.4;
  ce[0][12] = 0.3;

  ce[1][0]  = 1.0;
    40016124:	1e6e1000 	fmov	d0, #1.000000000000000000e+00
  ce[0][0]  = 2.0;
    40016128:	fd044c22 	str	d2, [x1, #2200]
  ce[0][7]  = 0.02;
    4001612c:	d0000041 	adrp	x1, 40020000 <__rodata_region_start>
    40016130:	fd475c27 	ldr	d7, [x1, #3768]
  ce[0][8]  = 0.01;
    40016134:	d0000041 	adrp	x1, 40020000 <__rodata_region_start>
    40016138:	fd474430 	ldr	d16, [x1, #3720]
  ce[0][9]  = 0.03;
    4001613c:	d0000041 	adrp	x1, 40020000 <__rodata_region_start>
    40016140:	fd476025 	ldr	d5, [x1, #3776]
  ce[0][11] = 0.4;
    40016144:	d0000041 	adrp	x1, 40020000 <__rodata_region_start>
    40016148:	fd476424 	ldr	d4, [x1, #3784]
  ce[0][12] = 0.3;
    4001614c:	d0000041 	adrp	x1, 40020000 <__rodata_region_start>
    40016150:	fd476823 	ldr	d3, [x1, #3792]
  ce[0][5]  = 3.0;
    40016154:	1e611006 	fmov	d6, #3.000000000000000000e+00
  ce[0][6]  = 0.5;
    40016158:	1e6c1001 	fmov	d1, #5.000000000000000000e-01
  ce[0][3]  = 4.0;
    4001615c:	1e621017 	fmov	d23, #4.000000000000000000e+00
  ce[0][4]  = 5.0;
    40016160:	1e629016 	fmov	d22, #5.000000000000000000e+00
  ce[0][2]  = 0.0;
    40016164:	a900fc1f 	stp	xzr, xzr, [x0, #8]

  dxmax = max(dx3, dx4);
  dymax = max(dy2, dy4);
  dzmax = max(dz2, dz3);

  dssp = 0.25 * max(dx1, max(dy1, dz1) );
    40016168:	1e6a1019 	fmov	d25, #2.500000000000000000e-01
  ce[1][2]  = 0.0;
    4001616c:	a9077c1f 	stp	xzr, xzr, [x0, #112]
  ce[1][3]  = 0.0;
    40016170:	f900401f 	str	xzr, [x0, #128]
  ce[0][4]  = 5.0;
    40016174:	6d01d817 	stp	d23, d22, [x0, #24]
  ce[0][6]  = 0.5;
    40016178:	6d028406 	stp	d6, d1, [x0, #40]
  ce[0][8]  = 0.01;
    4001617c:	6d03c007 	stp	d7, d16, [x0, #56]
  ce[0][10] = 0.5;
    40016180:	6d048405 	stp	d5, d1, [x0, #72]
  ce[0][12] = 0.3;
    40016184:	6d058c04 	stp	d4, d3, [x0, #88]
  ce[1][0]  = 1.0;
    40016188:	fd003400 	str	d0, [x0, #104]
  ce[1][5]  = 2.0;
    4001618c:	6d088800 	stp	d0, d2, [x0, #136]
  ce[1][7]  = 0.01;
    40016190:	6d09c006 	stp	d6, d16, [x0, #152]
  ce[1][9]  = 0.02;
    40016194:	6d0a9c05 	stp	d5, d7, [x0, #168]
  ce[1][11] = 0.3;
    40016198:	6d0b8c04 	stp	d4, d3, [x0, #184]
  ce[2][0]  = 2.0;
    4001619c:	6d0c8801 	stp	d1, d2, [x0, #200]
  ce[2][1]  = 2.0;
    400161a0:	fd006c02 	str	d2, [x0, #216]
  ce[2][7]  = 0.04;
    400161a4:	d0000041 	adrp	x1, 40020000 <__rodata_region_start>
    400161a8:	fd476c27 	ldr	d7, [x1, #3800]
  ce[2][9]  = 0.05;
    400161ac:	d0000041 	adrp	x1, 40020000 <__rodata_region_start>
    400161b0:	fd477030 	ldr	d16, [x1, #3808]
  ce[3][10] = 0.2;
    400161b4:	d0000041 	adrp	x1, 40020000 <__rodata_region_start>
    400161b8:	fd477431 	ldr	d17, [x1, #3816]
  ce[2][11] = 0.5;
    400161bc:	6d120403 	stp	d3, d1, [x0, #288]
  ce[3][11] = 0.1;
    400161c0:	d0000041 	adrp	x1, 40020000 <__rodata_region_start>
    400161c4:	fd477821 	ldr	d1, [x1, #3824]
  ce[2][3]  = 0.0;
    400161c8:	a90e7c1f 	stp	xzr, xzr, [x0, #224]
  ce[2][4]  = 0.0;
    400161cc:	f900781f 	str	xzr, [x0, #240]
  ce[3][3]  = 0.0;
    400161d0:	a914fc1f 	stp	xzr, xzr, [x0, #328]
  ce[3][4]  = 0.0;
    400161d4:	f900ac1f 	str	xzr, [x0, #344]
  ce[2][6]  = 3.0;
    400161d8:	6d0f9802 	stp	d2, d6, [x0, #248]
  ce[2][7]  = 0.04;
    400161dc:	fd008407 	str	d7, [x0, #264]
  ce[2][8]  = 0.03;
    400161e0:	fd008805 	str	d5, [x0, #272]
  ce[2][9]  = 0.05;
    400161e4:	fd008c10 	str	d16, [x0, #280]
  ce[3][0]  = 2.0;
    400161e8:	6d130804 	stp	d4, d2, [x0, #304]
  ce[3][1]  = 2.0;
    400161ec:	fd00a002 	str	d2, [x0, #320]
  ce[3][6]  = 3.0;
    400161f0:	6d161802 	stp	d2, d6, [x0, #352]
  ce[3][7]  = 0.03;
    400161f4:	fd00b805 	str	d5, [x0, #368]
  ce[3][9] = 0.04;
    400161f8:	6d179c10 	stp	d16, d7, [x0, #376]
  ce[3][11] = 0.1;
    400161fc:	6d188411 	stp	d17, d1, [x0, #392]
  ce[4][0]  = 5.0;
    40016200:	6d19d803 	stp	d3, d22, [x0, #408]
  ce[4][2]  = 3.0;
    40016204:	6d1a9817 	stp	d23, d6, [x0, #424]
  ce[4][3]  = 2.0;
    40016208:	fd00dc02 	str	d2, [x0, #440]
  ce[4][5]  = 0.4;
    4001620c:	6d1c1001 	stp	d1, d4, [x0, #448]
  ce[4][7]  = 0.05;
    40016210:	6d1d4003 	stp	d3, d16, [x0, #464]
  ce[4][9] = 0.03;
    40016214:	6d1e1407 	stp	d7, d5, [x0, #480]
  ce[4][11] = 0.3;
    40016218:	6d1f0c01 	stp	d1, d3, [x0, #496]
  ce[4][12] = 0.2;
    4001621c:	fd010011 	str	d17, [x0, #512]
  c1 = 1.4;
    40016220:	d0000040 	adrp	x0, 40020000 <__rodata_region_start>
    40016224:	fd477c02 	ldr	d2, [x0, #3832]
    40016228:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    4001622c:	fd040402 	str	d2, [x0, #2056]
  c2 = 0.4;
    40016230:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    40016234:	fd041404 	str	d4, [x0, #2088]
  c3 = 0.1;
    40016238:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    4001623c:	fd042801 	str	d1, [x0, #2128]
  c4 = 1.0;
    40016240:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    40016244:	fd043c00 	str	d0, [x0, #2168]
  c5 = 1.4;
    40016248:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    4001624c:	fd044402 	str	d2, [x0, #2184]
  dnxm1 = 1.0 / (double)(grid_points[0]-1);
    40016250:	b0000360 	adrp	x0, 40083000 <ws+0x3a40>
    40016254:	912a0001 	add	x1, x0, #0xa80
    40016258:	b94a8000 	ldr	w0, [x0, #2688]
    4001625c:	51000400 	sub	w0, w0, #0x1
    40016260:	1e620005 	scvtf	d5, w0
    40016264:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    40016268:	1e651805 	fdiv	d5, d0, d5
    4001626c:	fd05a005 	str	d5, [x0, #2880]
  tx1 = 1.0 / (dnxm1 * dnxm1);
    40016270:	1e6508b0 	fmul	d16, d5, d5
  dnym1 = 1.0 / (double)(grid_points[1]-1);
    40016274:	b9400420 	ldr	w0, [x1, #4]
  tx2 = 1.0 / (2.0 * dnxm1);
    40016278:	1e6528b5 	fadd	d21, d5, d5
  tx3 = 1.0 / dnxm1;
    4001627c:	1e651811 	fdiv	d17, d0, d5
  dnym1 = 1.0 / (double)(grid_points[1]-1);
    40016280:	51000400 	sub	w0, w0, #0x1
  tx1 = 1.0 / (dnxm1 * dnxm1);
    40016284:	1e701810 	fdiv	d16, d0, d16
  tx2 = 1.0 / (2.0 * dnxm1);
    40016288:	1e751815 	fdiv	d21, d0, d21
  dnym1 = 1.0 / (double)(grid_points[1]-1);
    4001628c:	1e620002 	scvtf	d2, w0
    40016290:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    40016294:	1e621802 	fdiv	d2, d0, d2
    40016298:	fd05a402 	str	d2, [x0, #2888]
  ty2 = 1.0 / (2.0 * dnym1);
    4001629c:	1e622854 	fadd	d20, d2, d2
  dnzm1 = 1.0 / (double)(grid_points[2]-1);
    400162a0:	b9400820 	ldr	w0, [x1, #8]
  c1c2 = c1 * c2;
    400162a4:	d0000041 	adrp	x1, 40020000 <__rodata_region_start>
    400162a8:	fd478023 	ldr	d3, [x1, #3840]
  dnzm1 = 1.0 / (double)(grid_points[2]-1);
    400162ac:	51000400 	sub	w0, w0, #0x1
  ty2 = 1.0 / (2.0 * dnym1);
    400162b0:	1e741814 	fdiv	d20, d0, d20
  dnzm1 = 1.0 / (double)(grid_points[2]-1);
    400162b4:	1e620004 	scvtf	d4, w0
    400162b8:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    400162bc:	1e641804 	fdiv	d4, d0, d4
    400162c0:	fd05a804 	str	d4, [x0, #2896]
  c1c2 = c1 * c2;
    400162c4:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
  tz1 = 1.0 / (dnzm1 * dnzm1);
    400162c8:	1e640886 	fmul	d6, d4, d4
  tz2 = 1.0 / (2.0 * dnzm1);
    400162cc:	1e642885 	fadd	d5, d4, d4
  tz3 = 1.0 / dnzm1;
    400162d0:	1e641804 	fdiv	d4, d0, d4
  c1c2 = c1 * c2;
    400162d4:	fd040c03 	str	d3, [x0, #2072]
  c1c5 = c1 * c5;
    400162d8:	d0000040 	adrp	x0, 40020000 <__rodata_region_start>
    400162dc:	fd478412 	ldr	d18, [x0, #3848]
    400162e0:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
  c1345 = c1c5 * c3c4;
    400162e4:	d0000041 	adrp	x1, 40020000 <__rodata_region_start>
    400162e8:	fd478823 	ldr	d3, [x1, #3856]
  tz1 = 1.0 / (dnzm1 * dnzm1);
    400162ec:	1e661806 	fdiv	d6, d0, d6
  c1c5 = c1 * c5;
    400162f0:	fd041012 	str	d18, [x0, #2080]
  tz2 = 1.0 / (2.0 * dnzm1);
    400162f4:	1e651805 	fdiv	d5, d0, d5
  c3c4 = c3 * c4;
    400162f8:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    400162fc:	fd042c01 	str	d1, [x0, #2136]
  c1345 = c1c5 * c3c4;
    40016300:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    40016304:	fd040803 	str	d3, [x0, #2064]
  ty1 = 1.0 / (dnym1 * dnym1);
    40016308:	1e620843 	fmul	d3, d2, d2
  ty3 = 1.0 / dnym1;
    4001630c:	1e621802 	fdiv	d2, d0, d2
  conz1 = (1.0-c1c5);
    40016310:	d0000040 	adrp	x0, 40020000 <__rodata_region_start>
    40016314:	fd478c13 	ldr	d19, [x0, #3864]
    40016318:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
  ty1 = 1.0 / (dnym1 * dnym1);
    4001631c:	1e631807 	fdiv	d7, d0, d3
  dx1 = 0.75;
    40016320:	1e6d1003 	fmov	d3, #7.500000000000000000e-01
  conz1 = (1.0-c1c5);
    40016324:	fd056813 	str	d19, [x0, #2768]
  tx1 = 1.0 / (dnxm1 * dnxm1);
    40016328:	b0000260 	adrp	x0, 40063000 <square+0x37a8>
    4001632c:	fd03e810 	str	d16, [x0, #2000]
  tx2 = 1.0 / (2.0 * dnxm1);
    40016330:	b0000260 	adrp	x0, 40063000 <square+0x37a8>
    40016334:	fd03ec15 	str	d21, [x0, #2008]
  tx3 = 1.0 / dnxm1;
    40016338:	b0000260 	adrp	x0, 40063000 <square+0x37a8>
    4001633c:	fd03f011 	str	d17, [x0, #2016]
  ty1 = 1.0 / (dnym1 * dnym1);
    40016340:	b0000260 	adrp	x0, 40063000 <square+0x37a8>
    40016344:	fd03f407 	str	d7, [x0, #2024]
  ty2 = 1.0 / (2.0 * dnym1);
    40016348:	b0000260 	adrp	x0, 40063000 <square+0x37a8>
    4001634c:	fd03f814 	str	d20, [x0, #2032]
  ty3 = 1.0 / dnym1;
    40016350:	b0000260 	adrp	x0, 40063000 <square+0x37a8>
    40016354:	fd03fc02 	str	d2, [x0, #2040]
  tz1 = 1.0 / (dnzm1 * dnzm1);
    40016358:	b0000260 	adrp	x0, 40063000 <square+0x37a8>
    4001635c:	fd040006 	str	d6, [x0, #2048]
  tz2 = 1.0 / (2.0 * dnzm1);
    40016360:	b0000260 	adrp	x0, 40063000 <square+0x37a8>
    40016364:	fd040405 	str	d5, [x0, #2056]
  tz3 = 1.0 / dnzm1;
    40016368:	b0000260 	adrp	x0, 40063000 <square+0x37a8>
    4001636c:	fd040804 	str	d4, [x0, #2064]
  dx1 = 0.75;
    40016370:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    40016374:	fd05d003 	str	d3, [x0, #2976]
  dx2 = 0.75;
    40016378:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    4001637c:	fd05d803 	str	d3, [x0, #2992]
  dx3 = 0.75;
    40016380:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    40016384:	fd05e003 	str	d3, [x0, #3008]
  dx4 = 0.75;
    40016388:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    4001638c:	fd05e803 	str	d3, [x0, #3024]
  dx5 = 0.75;
    40016390:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    40016394:	fd05f003 	str	d3, [x0, #3040]
  dy1 = 0.75;
    40016398:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    4001639c:	fd05fc03 	str	d3, [x0, #3064]
  dy2 = 0.75;
    400163a0:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    400163a4:	fd060403 	str	d3, [x0, #3080]
  dy3 = 0.75;
    400163a8:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    400163ac:	fd060c03 	str	d3, [x0, #3096]
  dy4 = 0.75;
    400163b0:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    400163b4:	fd061403 	str	d3, [x0, #3112]
  dy5 = 0.75;
    400163b8:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    400163bc:	fd061c03 	str	d3, [x0, #3128]
  dz1 = 1.0;
    400163c0:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    400163c4:	fd062800 	str	d0, [x0, #3152]
  dz2 = 1.0;
    400163c8:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    400163cc:	fd063000 	str	d0, [x0, #3168]
  dz3 = 1.0;
    400163d0:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    400163d4:	fd063800 	str	d0, [x0, #3184]
  dz4 = 1.0;
    400163d8:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    400163dc:	fd064000 	str	d0, [x0, #3200]
  dz5 = 1.0;
    400163e0:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    400163e4:	fd064800 	str	d0, [x0, #3216]
  dxmax = max(dx3, dx4);
    400163e8:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    400163ec:	fd05f803 	str	d3, [x0, #3056]
  dymax = max(dy2, dy4);
    400163f0:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    400163f4:	fd062403 	str	d3, [x0, #3144]
  dzmax = max(dz2, dz3);
    400163f8:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    400163fc:	fd065000 	str	d0, [x0, #3232]
  dssp = 0.25 * max(dx1, max(dy1, dz1) );
    40016400:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    40016404:	fd05ac19 	str	d25, [x0, #2904]

  c4dssp = 4.0 * dssp;
    40016408:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    4001640c:	fd044000 	str	d0, [x0, #2176]
  c5dssp = 5.0 * dssp;
    40016410:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    40016414:	1e6e9000 	fmov	d0, #1.250000000000000000e+00
    40016418:	fd044800 	str	d0, [x0, #2192]

  dttx1 = dt*tx1;
    4001641c:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    40016420:	fd45b000 	ldr	d0, [x0, #2912]
    40016424:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    40016428:	1e600a18 	fmul	d24, d16, d0
  dttx2 = dt*tx2;
    4001642c:	1e600ab5 	fmul	d21, d21, d0
  dtty1 = dt*ty1;
  dtty2 = dt*ty2;
    40016430:	1e600a94 	fmul	d20, d20, d0
  dttz1 = dt*tz1;
  dttz2 = dt*tz2;
    40016434:	1e6008a5 	fmul	d5, d5, d0

  c3c4tx3 = c3c4*tx3;
  c3c4ty3 = c3c4*ty3;
  c3c4tz3 = c3c4*tz3;

  dx1tx1 = dx1*tx1;
    40016438:	1e630a10 	fmul	d16, d16, d3
  dx2tx1 = dx2*tx1;
  dx3tx1 = dx3*tx1;
  dx4tx1 = dx4*tx1;
  dx5tx1 = dx5*tx1;

  dy1ty1 = dy1*ty1;
    4001643c:	1e6308e3 	fmul	d3, d7, d3
  dttx1 = dt*tx1;
    40016440:	fd05b818 	str	d24, [x0, #2928]
  dttx2 = dt*tx2;
    40016444:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
  c2dttx1 = 2.0*dttx1;
    40016448:	1e782b18 	fadd	d24, d24, d24
  dttx2 = dt*tx2;
    4001644c:	fd05bc15 	str	d21, [x0, #2936]
  dtty1 = dt*ty1;
    40016450:	1e6008f5 	fmul	d21, d7, d0
    40016454:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    40016458:	fd05c015 	str	d21, [x0, #2944]
  dtty2 = dt*ty2;
    4001645c:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
  c2dtty1 = 2.0*dtty1;
    40016460:	1e752ab5 	fadd	d21, d21, d21
  dtty2 = dt*ty2;
    40016464:	fd05c414 	str	d20, [x0, #2952]
  dttz1 = dt*tz1;
    40016468:	1e6008d4 	fmul	d20, d6, d0
    4001646c:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
  dtdssp = dt*dssp;
    40016470:	1e790800 	fmul	d0, d0, d25
  dttz1 = dt*tz1;
    40016474:	fd05c814 	str	d20, [x0, #2960]
  dttz2 = dt*tz2;
    40016478:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
  c2dttz1 = 2.0*dttz1;
    4001647c:	1e742a94 	fadd	d20, d20, d20
  comz4  = 4.0*dtdssp;
    40016480:	1e770817 	fmul	d23, d0, d23
  dttz2 = dt*tz2;
    40016484:	fd05cc05 	str	d5, [x0, #2968]
  c2dttx1 = 2.0*dttx1;
    40016488:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
  comz5  = 5.0*dtdssp;
    4001648c:	1e760816 	fmul	d22, d0, d22
  comz6  = 6.0*dtdssp;
    40016490:	1e631005 	fmov	d5, #6.000000000000000000e+00
  c2dttx1 = 2.0*dttx1;
    40016494:	fd041818 	str	d24, [x0, #2096]
  c2dtty1 = 2.0*dtty1;
    40016498:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    4001649c:	fd041c15 	str	d21, [x0, #2104]
  c2dttz1 = 2.0*dttz1;
    400164a0:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    400164a4:	fd042014 	str	d20, [x0, #2112]
  dtdssp = dt*dssp;
    400164a8:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    400164ac:	fd05b400 	str	d0, [x0, #2920]
  comz1  = dtdssp;
    400164b0:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    400164b4:	fd055000 	str	d0, [x0, #2720]
  comz4  = 4.0*dtdssp;
    400164b8:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
  comz6  = 6.0*dtdssp;
    400164bc:	1e650800 	fmul	d0, d0, d5
  c3c4tx3 = c3c4*tx3;
    400164c0:	1e610a25 	fmul	d5, d17, d1
  comz4  = 4.0*dtdssp;
    400164c4:	fd055417 	str	d23, [x0, #2728]
  comz5  = 5.0*dtdssp;
    400164c8:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    400164cc:	fd055816 	str	d22, [x0, #2736]
  comz6  = 6.0*dtdssp;
    400164d0:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    400164d4:	fd055c00 	str	d0, [x0, #2744]
  c3c4ty3 = c3c4*ty3;
    400164d8:	1e610840 	fmul	d0, d2, d1
  c3c4tx3 = c3c4*tx3;
    400164dc:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
  c3c4tz3 = c3c4*tz3;
    400164e0:	1e610881 	fmul	d1, d4, d1
  c3c4tx3 = c3c4*tx3;
    400164e4:	fd043005 	str	d5, [x0, #2144]
  c3c4ty3 = c3c4*ty3;
    400164e8:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    400164ec:	fd043400 	str	d0, [x0, #2152]
  c3c4tz3 = c3c4*tz3;
    400164f0:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    400164f4:	fd043801 	str	d1, [x0, #2160]
  dx1tx1 = dx1*tx1;
    400164f8:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    400164fc:	fd05d410 	str	d16, [x0, #2984]
  dx2tx1 = dx2*tx1;
    40016500:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    40016504:	fd05dc10 	str	d16, [x0, #3000]
  dx3tx1 = dx3*tx1;
    40016508:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    4001650c:	fd05e410 	str	d16, [x0, #3016]
  dx4tx1 = dx4*tx1;
    40016510:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    40016514:	fd05ec10 	str	d16, [x0, #3032]
  dx5tx1 = dx5*tx1;
    40016518:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    4001651c:	fd05f410 	str	d16, [x0, #3048]
  dy1ty1 = dy1*ty1;
    40016520:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    40016524:	fd060003 	str	d3, [x0, #3072]
  dy2ty1 = dy2*ty1;
    40016528:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    4001652c:	fd060803 	str	d3, [x0, #3088]
  dy3ty1 = dy3*ty1;
    40016530:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    40016534:	fd061003 	str	d3, [x0, #3104]
  dy4ty1 = dy4*ty1;
    40016538:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    4001653c:	fd061803 	str	d3, [x0, #3120]
  dy5ty1 = dy5*ty1;
    40016540:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    40016544:	fd062003 	str	d3, [x0, #3136]

  dz1tz1 = dz1*tz1;
    40016548:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
  dz2tz1 = dz2*tz1;
  dz3tz1 = dz3*tz1;
  dz4tz1 = dz4*tz1;
  dz5tz1 = dz5*tz1;

  c2iv  = 2.5;
    4001654c:	1e609003 	fmov	d3, #2.500000000000000000e+00
  dz1tz1 = dz1*tz1;
    40016550:	fd062c06 	str	d6, [x0, #3160]
  dz2tz1 = dz2*tz1;
    40016554:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    40016558:	fd063406 	str	d6, [x0, #3176]
  dz3tz1 = dz3*tz1;
    4001655c:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    40016560:	fd063c06 	str	d6, [x0, #3192]
  dz4tz1 = dz4*tz1;
    40016564:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    40016568:	fd064406 	str	d6, [x0, #3208]
  dz5tz1 = dz5*tz1;
    4001656c:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    40016570:	fd064c06 	str	d6, [x0, #3224]
  c2iv  = 2.5;
    40016574:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
    40016578:	fd042403 	str	d3, [x0, #2120]
  con43 = 4.0/3.0;
    4001657c:	d0000040 	adrp	x0, 40020000 <__rodata_region_start>
    40016580:	fd479006 	ldr	d6, [x0, #3872]
    40016584:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
  con16 = 1.0/6.0;

  xxcon1 = c3c4tx3*con43*tx3;
    40016588:	1e6608a7 	fmul	d7, d5, d6
  con43 = 4.0/3.0;
    4001658c:	fd056406 	str	d6, [x0, #2760]
  con16 = 1.0/6.0;
    40016590:	d0000040 	adrp	x0, 40020000 <__rodata_region_start>
    40016594:	fd479403 	ldr	d3, [x0, #3880]
    40016598:	d00000a0 	adrp	x0, 4002c000 <z_idle_threads>
  xxcon1 = c3c4tx3*con43*tx3;
    4001659c:	1e7108e7 	fmul	d7, d7, d17
  con16 = 1.0/6.0;
    400165a0:	fd056003 	str	d3, [x0, #2752]
  xxcon1 = c3c4tx3*con43*tx3;
    400165a4:	b0000360 	adrp	x0, 40083000 <ws+0x3a40>
    400165a8:	fd029007 	str	d7, [x0, #1312]
  xxcon2 = c3c4tx3*tx3;
    400165ac:	1e650a27 	fmul	d7, d17, d5
    400165b0:	b0000360 	adrp	x0, 40083000 <ws+0x3a40>
    400165b4:	fd029407 	str	d7, [x0, #1320]
  xxcon3 = c3c4tx3*conz1*tx3;
    400165b8:	1e7308a7 	fmul	d7, d5, d19
    400165bc:	b0000360 	adrp	x0, 40083000 <ws+0x3a40>
    400165c0:	1e7108e7 	fmul	d7, d7, d17
    400165c4:	fd029807 	str	d7, [x0, #1328]
  xxcon4 = c3c4tx3*con16*tx3;
    400165c8:	1e6308a7 	fmul	d7, d5, d3
  xxcon5 = c3c4tx3*c1c5*tx3;
    400165cc:	1e7208a5 	fmul	d5, d5, d18
  xxcon4 = c3c4tx3*con16*tx3;
    400165d0:	b0000360 	adrp	x0, 40083000 <ws+0x3a40>
    400165d4:	1e7108e7 	fmul	d7, d7, d17
  xxcon5 = c3c4tx3*c1c5*tx3;
    400165d8:	1e7108a5 	fmul	d5, d5, d17
  xxcon4 = c3c4tx3*con16*tx3;
    400165dc:	fd029c07 	str	d7, [x0, #1336]
  xxcon5 = c3c4tx3*c1c5*tx3;
    400165e0:	b0000360 	adrp	x0, 40083000 <ws+0x3a40>
    400165e4:	fd02a005 	str	d5, [x0, #1344]

  yycon1 = c3c4ty3*con43*ty3;
    400165e8:	1e660805 	fmul	d5, d0, d6
    400165ec:	b0000360 	adrp	x0, 40083000 <ws+0x3a40>
  yycon2 = c3c4ty3*ty3;
  yycon3 = c3c4ty3*conz1*ty3;
  yycon4 = c3c4ty3*con16*ty3;
  yycon5 = c3c4ty3*c1c5*ty3;

  zzcon1 = c3c4tz3*con43*tz3;
    400165f0:	1e660826 	fmul	d6, d1, d6
  yycon1 = c3c4ty3*con43*ty3;
    400165f4:	1e6208a5 	fmul	d5, d5, d2
  zzcon1 = c3c4tz3*con43*tz3;
    400165f8:	1e6408c6 	fmul	d6, d6, d4
  yycon1 = c3c4ty3*con43*ty3;
    400165fc:	fd02a405 	str	d5, [x0, #1352]
  yycon2 = c3c4ty3*ty3;
    40016600:	1e600845 	fmul	d5, d2, d0
    40016604:	b0000360 	adrp	x0, 40083000 <ws+0x3a40>
    40016608:	fd02a805 	str	d5, [x0, #1360]
  yycon3 = c3c4ty3*conz1*ty3;
    4001660c:	1e730805 	fmul	d5, d0, d19
    40016610:	b0000360 	adrp	x0, 40083000 <ws+0x3a40>
    40016614:	1e6208a5 	fmul	d5, d5, d2
    40016618:	fd02ac05 	str	d5, [x0, #1368]
  yycon4 = c3c4ty3*con16*ty3;
    4001661c:	1e630805 	fmul	d5, d0, d3
  yycon5 = c3c4ty3*c1c5*ty3;
    40016620:	1e720800 	fmul	d0, d0, d18
  yycon4 = c3c4ty3*con16*ty3;
    40016624:	b0000360 	adrp	x0, 40083000 <ws+0x3a40>
  zzcon2 = c3c4tz3*tz3;
  zzcon3 = c3c4tz3*conz1*tz3;
  zzcon4 = c3c4tz3*con16*tz3;
    40016628:	1e630823 	fmul	d3, d1, d3
  yycon4 = c3c4ty3*con16*ty3;
    4001662c:	1e6208a5 	fmul	d5, d5, d2
  yycon5 = c3c4ty3*c1c5*ty3;
    40016630:	1e620802 	fmul	d2, d0, d2
  zzcon2 = c3c4tz3*tz3;
    40016634:	1e610880 	fmul	d0, d4, d1
  zzcon4 = c3c4tz3*con16*tz3;
    40016638:	1e640863 	fmul	d3, d3, d4
  yycon4 = c3c4ty3*con16*ty3;
    4001663c:	fd02b005 	str	d5, [x0, #1376]
  yycon5 = c3c4ty3*c1c5*ty3;
    40016640:	b0000360 	adrp	x0, 40083000 <ws+0x3a40>
    40016644:	fd02b402 	str	d2, [x0, #1384]
  zzcon1 = c3c4tz3*con43*tz3;
    40016648:	b0000360 	adrp	x0, 40083000 <ws+0x3a40>
    4001664c:	fd02b806 	str	d6, [x0, #1392]
  zzcon2 = c3c4tz3*tz3;
    40016650:	b0000360 	adrp	x0, 40083000 <ws+0x3a40>
    40016654:	fd02bc00 	str	d0, [x0, #1400]
  zzcon3 = c3c4tz3*conz1*tz3;
    40016658:	1e730820 	fmul	d0, d1, d19
  zzcon5 = c3c4tz3*c1c5*tz3;
    4001665c:	1e720821 	fmul	d1, d1, d18
  zzcon3 = c3c4tz3*conz1*tz3;
    40016660:	b0000360 	adrp	x0, 40083000 <ws+0x3a40>
    40016664:	1e640800 	fmul	d0, d0, d4
  zzcon5 = c3c4tz3*c1c5*tz3;
    40016668:	1e640821 	fmul	d1, d1, d4
  zzcon3 = c3c4tz3*conz1*tz3;
    4001666c:	fd02c000 	str	d0, [x0, #1408]
  zzcon4 = c3c4tz3*con16*tz3;
    40016670:	b0000360 	adrp	x0, 40083000 <ws+0x3a40>
    40016674:	fd02c403 	str	d3, [x0, #1416]
  zzcon5 = c3c4tz3*c1c5*tz3;
    40016678:	b0000360 	adrp	x0, 40083000 <ws+0x3a40>
    4001667c:	fd02c801 	str	d1, [x0, #1424]
}
    40016680:	d65f03c0 	ret

0000000040016684 <matvec_sub>:
{
  //---------------------------------------------------------------------
  // rhs[kc][jc][ic][i] = rhs[kc][jc][ic][i] 
  // $                  - lhs[ia][ablock][0][i]*
  //---------------------------------------------------------------------
  bvec[0] = bvec[0] - ablock[0][0]*avec[0]
    40016684:	aa0003e3 	mov	x3, x0
                    - ablock[1][0]*avec[1]
    40016688:	6d400821 	ldp	d1, d2, [x1]
  bvec[0] = bvec[0] - ablock[0][0]*avec[0]
    4001668c:	fc428460 	ldr	d0, [x3], #40
    40016690:	1e610801 	fmul	d1, d0, d1
    40016694:	fd400040 	ldr	d0, [x2]
    40016698:	1e613800 	fsub	d0, d0, d1
                    - ablock[1][0]*avec[1]
    4001669c:	fd401401 	ldr	d1, [x0, #40]
    400166a0:	1e620821 	fmul	d1, d1, d2
                    - ablock[2][0]*avec[2]
    400166a4:	fd400822 	ldr	d2, [x1, #16]
                    - ablock[1][0]*avec[1]
    400166a8:	1e613800 	fsub	d0, d0, d1
                    - ablock[2][0]*avec[2]
    400166ac:	fd402801 	ldr	d1, [x0, #80]
    400166b0:	1e620821 	fmul	d1, d1, d2
                    - ablock[3][0]*avec[3]
    400166b4:	fd400c22 	ldr	d2, [x1, #24]
                    - ablock[2][0]*avec[2]
    400166b8:	1e613800 	fsub	d0, d0, d1
                    - ablock[3][0]*avec[3]
    400166bc:	fd403c01 	ldr	d1, [x0, #120]
    400166c0:	1e620821 	fmul	d1, d1, d2
                    - ablock[4][0]*avec[4];
    400166c4:	fd401022 	ldr	d2, [x1, #32]
                    - ablock[3][0]*avec[3]
    400166c8:	1e613800 	fsub	d0, d0, d1
                    - ablock[4][0]*avec[4];
    400166cc:	fd405001 	ldr	d1, [x0, #160]
    400166d0:	1e620821 	fmul	d1, d1, d2
    400166d4:	1e613800 	fsub	d0, d0, d1
  bvec[0] = bvec[0] - ablock[0][0]*avec[0]
    400166d8:	fd000040 	str	d0, [x2]
  bvec[1] = bvec[1] - ablock[0][1]*avec[0]
                    - ablock[1][1]*avec[1]
    400166dc:	6d400821 	ldp	d1, d2, [x1]
  bvec[1] = bvec[1] - ablock[0][1]*avec[0]
    400166e0:	fd400400 	ldr	d0, [x0, #8]
    400166e4:	1e610801 	fmul	d1, d0, d1
    400166e8:	fd400440 	ldr	d0, [x2, #8]
    400166ec:	1e613800 	fsub	d0, d0, d1
                    - ablock[1][1]*avec[1]
    400166f0:	fd400461 	ldr	d1, [x3, #8]
    400166f4:	1e620821 	fmul	d1, d1, d2
                    - ablock[2][1]*avec[2]
    400166f8:	fd400822 	ldr	d2, [x1, #16]
                    - ablock[1][1]*avec[1]
    400166fc:	1e613800 	fsub	d0, d0, d1
                    - ablock[2][1]*avec[2]
    40016700:	fd402c01 	ldr	d1, [x0, #88]
    40016704:	1e620821 	fmul	d1, d1, d2
                    - ablock[3][1]*avec[3]
    40016708:	fd400c22 	ldr	d2, [x1, #24]
                    - ablock[2][1]*avec[2]
    4001670c:	1e613800 	fsub	d0, d0, d1
                    - ablock[3][1]*avec[3]
    40016710:	fd404001 	ldr	d1, [x0, #128]
    40016714:	1e620821 	fmul	d1, d1, d2
                    - ablock[4][1]*avec[4];
    40016718:	fd401022 	ldr	d2, [x1, #32]
                    - ablock[3][1]*avec[3]
    4001671c:	1e613800 	fsub	d0, d0, d1
                    - ablock[4][1]*avec[4];
    40016720:	fd405401 	ldr	d1, [x0, #168]
    40016724:	1e620821 	fmul	d1, d1, d2
    40016728:	1e613800 	fsub	d0, d0, d1
  bvec[1] = bvec[1] - ablock[0][1]*avec[0]
    4001672c:	fd000440 	str	d0, [x2, #8]
  bvec[2] = bvec[2] - ablock[0][2]*avec[0]
                    - ablock[1][2]*avec[1]
    40016730:	6d400821 	ldp	d1, d2, [x1]
  bvec[2] = bvec[2] - ablock[0][2]*avec[0]
    40016734:	fd400800 	ldr	d0, [x0, #16]
    40016738:	1e610801 	fmul	d1, d0, d1
    4001673c:	fd400840 	ldr	d0, [x2, #16]
    40016740:	1e613800 	fsub	d0, d0, d1
                    - ablock[1][2]*avec[1]
    40016744:	fd400861 	ldr	d1, [x3, #16]
    40016748:	1e620821 	fmul	d1, d1, d2
                    - ablock[2][2]*avec[2]
    4001674c:	fd400822 	ldr	d2, [x1, #16]
                    - ablock[1][2]*avec[1]
    40016750:	1e613800 	fsub	d0, d0, d1
                    - ablock[2][2]*avec[2]
    40016754:	fd403001 	ldr	d1, [x0, #96]
    40016758:	1e620821 	fmul	d1, d1, d2
    4001675c:	1e613800 	fsub	d0, d0, d1
                    - ablock[3][2]*avec[3]
    40016760:	fd404401 	ldr	d1, [x0, #136]
    40016764:	fd400c22 	ldr	d2, [x1, #24]
    40016768:	1e620821 	fmul	d1, d1, d2
                    - ablock[4][2]*avec[4];
    4001676c:	fd401022 	ldr	d2, [x1, #32]
                    - ablock[3][2]*avec[3]
    40016770:	1e613800 	fsub	d0, d0, d1
                    - ablock[4][2]*avec[4];
    40016774:	fd405801 	ldr	d1, [x0, #176]
    40016778:	1e620821 	fmul	d1, d1, d2
    4001677c:	1e613800 	fsub	d0, d0, d1
  bvec[2] = bvec[2] - ablock[0][2]*avec[0]
    40016780:	fd000840 	str	d0, [x2, #16]
  bvec[3] = bvec[3] - ablock[0][3]*avec[0]
                    - ablock[1][3]*avec[1]
    40016784:	6d400821 	ldp	d1, d2, [x1]
  bvec[3] = bvec[3] - ablock[0][3]*avec[0]
    40016788:	fd400c00 	ldr	d0, [x0, #24]
    4001678c:	1e610801 	fmul	d1, d0, d1
    40016790:	fd400c40 	ldr	d0, [x2, #24]
    40016794:	1e613800 	fsub	d0, d0, d1
                    - ablock[1][3]*avec[1]
    40016798:	fd400c61 	ldr	d1, [x3, #24]
    4001679c:	1e620821 	fmul	d1, d1, d2
                    - ablock[2][3]*avec[2]
    400167a0:	fd400822 	ldr	d2, [x1, #16]
                    - ablock[1][3]*avec[1]
    400167a4:	1e613800 	fsub	d0, d0, d1
                    - ablock[2][3]*avec[2]
    400167a8:	fd403401 	ldr	d1, [x0, #104]
    400167ac:	1e620821 	fmul	d1, d1, d2
                    - ablock[3][3]*avec[3]
    400167b0:	fd400c22 	ldr	d2, [x1, #24]
                    - ablock[2][3]*avec[2]
    400167b4:	1e613800 	fsub	d0, d0, d1
                    - ablock[3][3]*avec[3]
    400167b8:	fd404801 	ldr	d1, [x0, #144]
    400167bc:	1e620821 	fmul	d1, d1, d2
                    - ablock[4][3]*avec[4];
    400167c0:	fd401022 	ldr	d2, [x1, #32]
                    - ablock[3][3]*avec[3]
    400167c4:	1e613800 	fsub	d0, d0, d1
                    - ablock[4][3]*avec[4];
    400167c8:	fd405c01 	ldr	d1, [x0, #184]
    400167cc:	1e620821 	fmul	d1, d1, d2
    400167d0:	1e613800 	fsub	d0, d0, d1
  bvec[3] = bvec[3] - ablock[0][3]*avec[0]
    400167d4:	fd000c40 	str	d0, [x2, #24]
  bvec[4] = bvec[4] - ablock[0][4]*avec[0]
                    - ablock[1][4]*avec[1]
    400167d8:	6d400821 	ldp	d1, d2, [x1]
  bvec[4] = bvec[4] - ablock[0][4]*avec[0]
    400167dc:	fd401000 	ldr	d0, [x0, #32]
    400167e0:	1e610801 	fmul	d1, d0, d1
    400167e4:	fd401040 	ldr	d0, [x2, #32]
    400167e8:	1e613800 	fsub	d0, d0, d1
                    - ablock[1][4]*avec[1]
    400167ec:	fd401061 	ldr	d1, [x3, #32]
    400167f0:	1e620821 	fmul	d1, d1, d2
                    - ablock[2][4]*avec[2]
    400167f4:	fd400822 	ldr	d2, [x1, #16]
                    - ablock[1][4]*avec[1]
    400167f8:	1e613800 	fsub	d0, d0, d1
                    - ablock[2][4]*avec[2]
    400167fc:	fd403801 	ldr	d1, [x0, #112]
    40016800:	1e620821 	fmul	d1, d1, d2
                    - ablock[3][4]*avec[3]
    40016804:	fd400c22 	ldr	d2, [x1, #24]
                    - ablock[2][4]*avec[2]
    40016808:	1e613800 	fsub	d0, d0, d1
                    - ablock[3][4]*avec[3]
    4001680c:	fd404c01 	ldr	d1, [x0, #152]
    40016810:	1e620821 	fmul	d1, d1, d2
                    - ablock[4][4]*avec[4];
    40016814:	fd401022 	ldr	d2, [x1, #32]
                    - ablock[3][4]*avec[3]
    40016818:	1e613800 	fsub	d0, d0, d1
                    - ablock[4][4]*avec[4];
    4001681c:	fd406001 	ldr	d1, [x0, #192]
    40016820:	1e620821 	fmul	d1, d1, d2
    40016824:	1e613800 	fsub	d0, d0, d1
  bvec[4] = bvec[4] - ablock[0][4]*avec[0]
    40016828:	fd001040 	str	d0, [x2, #32]
}
    4001682c:	d65f03c0 	ret

0000000040016830 <matmul_sub>:
//---------------------------------------------------------------------
// subtracts a(i,j,k) X b(i,j,k) from c(i,j,k)
//---------------------------------------------------------------------
void matmul_sub(double ablock[5][5], double bblock[5][5], double cblock[5][5])
{
  cblock[0][0] = cblock[0][0] - ablock[0][0]*bblock[0][0]
    40016830:	aa0003e3 	mov	x3, x0
                              - ablock[1][0]*bblock[0][1]
                              - ablock[2][0]*bblock[0][2]
    40016834:	91014007 	add	x7, x0, #0x50
                              - ablock[1][0]*bblock[0][1]
    40016838:	6d400821 	ldp	d1, d2, [x1]
                              - ablock[3][0]*bblock[0][3]
    4001683c:	9101e006 	add	x6, x0, #0x78
  cblock[0][0] = cblock[0][0] - ablock[0][0]*bblock[0][0]
    40016840:	fc428460 	ldr	d0, [x3], #40
                              - ablock[4][0]*bblock[0][4];
    40016844:	91028005 	add	x5, x0, #0xa0
  cblock[0][4] = cblock[0][4] - ablock[0][4]*bblock[0][0]
                              - ablock[1][4]*bblock[0][1]
                              - ablock[2][4]*bblock[0][2]
                              - ablock[3][4]*bblock[0][3]
                              - ablock[4][4]*bblock[0][4];
  cblock[1][0] = cblock[1][0] - ablock[0][0]*bblock[1][0]
    40016848:	9100a024 	add	x4, x1, #0x28
  cblock[0][0] = cblock[0][0] - ablock[0][0]*bblock[0][0]
    4001684c:	1e610801 	fmul	d1, d0, d1
    40016850:	fd400040 	ldr	d0, [x2]
    40016854:	1e613800 	fsub	d0, d0, d1
                              - ablock[1][0]*bblock[0][1]
    40016858:	fd401401 	ldr	d1, [x0, #40]
    4001685c:	1e620821 	fmul	d1, d1, d2
                              - ablock[2][0]*bblock[0][2]
    40016860:	fd400822 	ldr	d2, [x1, #16]
                              - ablock[1][0]*bblock[0][1]
    40016864:	1e613800 	fsub	d0, d0, d1
                              - ablock[2][0]*bblock[0][2]
    40016868:	fd402801 	ldr	d1, [x0, #80]
    4001686c:	1e620821 	fmul	d1, d1, d2
                              - ablock[3][0]*bblock[0][3]
    40016870:	fd400c22 	ldr	d2, [x1, #24]
                              - ablock[2][0]*bblock[0][2]
    40016874:	1e613800 	fsub	d0, d0, d1
                              - ablock[3][0]*bblock[0][3]
    40016878:	fd403c01 	ldr	d1, [x0, #120]
    4001687c:	1e620821 	fmul	d1, d1, d2
                              - ablock[4][0]*bblock[0][4];
    40016880:	fd401022 	ldr	d2, [x1, #32]
                              - ablock[3][0]*bblock[0][3]
    40016884:	1e613800 	fsub	d0, d0, d1
                              - ablock[4][0]*bblock[0][4];
    40016888:	fd405001 	ldr	d1, [x0, #160]
    4001688c:	1e620821 	fmul	d1, d1, d2
    40016890:	1e613800 	fsub	d0, d0, d1
  cblock[0][0] = cblock[0][0] - ablock[0][0]*bblock[0][0]
    40016894:	fd000040 	str	d0, [x2]
                              - ablock[1][1]*bblock[0][1]
    40016898:	6d400821 	ldp	d1, d2, [x1]
  cblock[0][1] = cblock[0][1] - ablock[0][1]*bblock[0][0]
    4001689c:	fd400400 	ldr	d0, [x0, #8]
    400168a0:	1e610801 	fmul	d1, d0, d1
    400168a4:	fd400440 	ldr	d0, [x2, #8]
    400168a8:	1e613800 	fsub	d0, d0, d1
                              - ablock[1][1]*bblock[0][1]
    400168ac:	fd400461 	ldr	d1, [x3, #8]
    400168b0:	1e620821 	fmul	d1, d1, d2
                              - ablock[2][1]*bblock[0][2]
    400168b4:	fd400822 	ldr	d2, [x1, #16]
                              - ablock[1][1]*bblock[0][1]
    400168b8:	1e613800 	fsub	d0, d0, d1
                              - ablock[2][1]*bblock[0][2]
    400168bc:	fd4004e1 	ldr	d1, [x7, #8]
    400168c0:	1e620821 	fmul	d1, d1, d2
                              - ablock[3][1]*bblock[0][3]
    400168c4:	fd400c22 	ldr	d2, [x1, #24]
                              - ablock[2][1]*bblock[0][2]
    400168c8:	1e613800 	fsub	d0, d0, d1
                              - ablock[3][1]*bblock[0][3]
    400168cc:	fd4004c1 	ldr	d1, [x6, #8]
    400168d0:	1e620821 	fmul	d1, d1, d2
                              - ablock[4][1]*bblock[0][4];
    400168d4:	fd401022 	ldr	d2, [x1, #32]
                              - ablock[3][1]*bblock[0][3]
    400168d8:	1e613800 	fsub	d0, d0, d1
                              - ablock[4][1]*bblock[0][4];
    400168dc:	fd4004a1 	ldr	d1, [x5, #8]
    400168e0:	1e620821 	fmul	d1, d1, d2
    400168e4:	1e613800 	fsub	d0, d0, d1
  cblock[0][1] = cblock[0][1] - ablock[0][1]*bblock[0][0]
    400168e8:	fd000440 	str	d0, [x2, #8]
                              - ablock[1][2]*bblock[0][1]
    400168ec:	6d400821 	ldp	d1, d2, [x1]
  cblock[0][2] = cblock[0][2] - ablock[0][2]*bblock[0][0]
    400168f0:	fd400800 	ldr	d0, [x0, #16]
    400168f4:	1e610801 	fmul	d1, d0, d1
    400168f8:	fd400840 	ldr	d0, [x2, #16]
    400168fc:	1e613800 	fsub	d0, d0, d1
                              - ablock[1][2]*bblock[0][1]
    40016900:	fd400861 	ldr	d1, [x3, #16]
    40016904:	1e620821 	fmul	d1, d1, d2
                              - ablock[2][2]*bblock[0][2]
    40016908:	fd400822 	ldr	d2, [x1, #16]
                              - ablock[1][2]*bblock[0][1]
    4001690c:	1e613800 	fsub	d0, d0, d1
                              - ablock[2][2]*bblock[0][2]
    40016910:	fd4008e1 	ldr	d1, [x7, #16]
    40016914:	1e620821 	fmul	d1, d1, d2
    40016918:	1e613800 	fsub	d0, d0, d1
                              - ablock[3][2]*bblock[0][3]
    4001691c:	fd4008c1 	ldr	d1, [x6, #16]
    40016920:	fd400c22 	ldr	d2, [x1, #24]
    40016924:	1e620821 	fmul	d1, d1, d2
                              - ablock[4][2]*bblock[0][4];
    40016928:	fd401022 	ldr	d2, [x1, #32]
                              - ablock[3][2]*bblock[0][3]
    4001692c:	1e613800 	fsub	d0, d0, d1
                              - ablock[4][2]*bblock[0][4];
    40016930:	fd4008a1 	ldr	d1, [x5, #16]
    40016934:	1e620821 	fmul	d1, d1, d2
    40016938:	1e613800 	fsub	d0, d0, d1
  cblock[0][2] = cblock[0][2] - ablock[0][2]*bblock[0][0]
    4001693c:	fd000840 	str	d0, [x2, #16]
                              - ablock[1][3]*bblock[0][1]
    40016940:	6d400821 	ldp	d1, d2, [x1]
  cblock[0][3] = cblock[0][3] - ablock[0][3]*bblock[0][0]
    40016944:	fd400c00 	ldr	d0, [x0, #24]
    40016948:	1e610801 	fmul	d1, d0, d1
    4001694c:	fd400c40 	ldr	d0, [x2, #24]
    40016950:	1e613800 	fsub	d0, d0, d1
                              - ablock[1][3]*bblock[0][1]
    40016954:	fd400c61 	ldr	d1, [x3, #24]
    40016958:	1e620821 	fmul	d1, d1, d2
                              - ablock[2][3]*bblock[0][2]
    4001695c:	fd400822 	ldr	d2, [x1, #16]
                              - ablock[1][3]*bblock[0][1]
    40016960:	1e613800 	fsub	d0, d0, d1
                              - ablock[2][3]*bblock[0][2]
    40016964:	fd400ce1 	ldr	d1, [x7, #24]
    40016968:	1e620821 	fmul	d1, d1, d2
                              - ablock[3][3]*bblock[0][3]
    4001696c:	fd400c22 	ldr	d2, [x1, #24]
                              - ablock[2][3]*bblock[0][2]
    40016970:	1e613800 	fsub	d0, d0, d1
                              - ablock[3][3]*bblock[0][3]
    40016974:	fd400cc1 	ldr	d1, [x6, #24]
    40016978:	1e620821 	fmul	d1, d1, d2
                              - ablock[4][3]*bblock[0][4];
    4001697c:	fd401022 	ldr	d2, [x1, #32]
                              - ablock[3][3]*bblock[0][3]
    40016980:	1e613800 	fsub	d0, d0, d1
                              - ablock[4][3]*bblock[0][4];
    40016984:	fd400ca1 	ldr	d1, [x5, #24]
    40016988:	1e620821 	fmul	d1, d1, d2
    4001698c:	1e613800 	fsub	d0, d0, d1
  cblock[0][3] = cblock[0][3] - ablock[0][3]*bblock[0][0]
    40016990:	fd000c40 	str	d0, [x2, #24]
                              - ablock[1][4]*bblock[0][1]
    40016994:	6d400821 	ldp	d1, d2, [x1]
  cblock[0][4] = cblock[0][4] - ablock[0][4]*bblock[0][0]
    40016998:	fd401000 	ldr	d0, [x0, #32]
    4001699c:	1e610801 	fmul	d1, d0, d1
    400169a0:	fd401040 	ldr	d0, [x2, #32]
    400169a4:	1e613800 	fsub	d0, d0, d1
                              - ablock[1][4]*bblock[0][1]
    400169a8:	fd401061 	ldr	d1, [x3, #32]
    400169ac:	1e620821 	fmul	d1, d1, d2
                              - ablock[2][4]*bblock[0][2]
    400169b0:	fd400822 	ldr	d2, [x1, #16]
                              - ablock[1][4]*bblock[0][1]
    400169b4:	1e613800 	fsub	d0, d0, d1
                              - ablock[2][4]*bblock[0][2]
    400169b8:	fd4010e1 	ldr	d1, [x7, #32]
    400169bc:	1e620821 	fmul	d1, d1, d2
                              - ablock[3][4]*bblock[0][3]
    400169c0:	fd400c22 	ldr	d2, [x1, #24]
                              - ablock[2][4]*bblock[0][2]
    400169c4:	1e613800 	fsub	d0, d0, d1
                              - ablock[3][4]*bblock[0][3]
    400169c8:	fd4010c1 	ldr	d1, [x6, #32]
    400169cc:	1e620821 	fmul	d1, d1, d2
                              - ablock[4][4]*bblock[0][4];
    400169d0:	fd401022 	ldr	d2, [x1, #32]
                              - ablock[3][4]*bblock[0][3]
    400169d4:	1e613800 	fsub	d0, d0, d1
                              - ablock[4][4]*bblock[0][4];
    400169d8:	fd4010a1 	ldr	d1, [x5, #32]
    400169dc:	1e620821 	fmul	d1, d1, d2
    400169e0:	1e613800 	fsub	d0, d0, d1
  cblock[0][4] = cblock[0][4] - ablock[0][4]*bblock[0][0]
    400169e4:	fd001040 	str	d0, [x2, #32]
  cblock[1][0] = cblock[1][0] - ablock[0][0]*bblock[1][0]
    400169e8:	fd400000 	ldr	d0, [x0]
    400169ec:	fd401421 	ldr	d1, [x1, #40]
    400169f0:	1e610801 	fmul	d1, d0, d1
    400169f4:	fd401440 	ldr	d0, [x2, #40]
    400169f8:	1e613800 	fsub	d0, d0, d1
                              - ablock[1][0]*bblock[1][1]
    400169fc:	fd401401 	ldr	d1, [x0, #40]
    40016a00:	fd400482 	ldr	d2, [x4, #8]
    40016a04:	1e620821 	fmul	d1, d1, d2
                              - ablock[2][0]*bblock[1][2]
    40016a08:	fd400882 	ldr	d2, [x4, #16]
                              - ablock[1][0]*bblock[1][1]
    40016a0c:	1e613800 	fsub	d0, d0, d1
                              - ablock[2][0]*bblock[1][2]
    40016a10:	fd402801 	ldr	d1, [x0, #80]
    40016a14:	1e620821 	fmul	d1, d1, d2
                              - ablock[3][0]*bblock[1][3]
    40016a18:	fd400c82 	ldr	d2, [x4, #24]
                              - ablock[2][0]*bblock[1][2]
    40016a1c:	1e613800 	fsub	d0, d0, d1
                              - ablock[3][0]*bblock[1][3]
    40016a20:	fd403c01 	ldr	d1, [x0, #120]
    40016a24:	1e620821 	fmul	d1, d1, d2
                              - ablock[4][0]*bblock[1][4];
    40016a28:	fd401082 	ldr	d2, [x4, #32]
                              - ablock[3][0]*bblock[1][3]
    40016a2c:	1e613800 	fsub	d0, d0, d1
                              - ablock[4][0]*bblock[1][4];
    40016a30:	fd405001 	ldr	d1, [x0, #160]
    40016a34:	1e620821 	fmul	d1, d1, d2
    40016a38:	1e613800 	fsub	d0, d0, d1
  cblock[1][0] = cblock[1][0] - ablock[0][0]*bblock[1][0]
    40016a3c:	fd001440 	str	d0, [x2, #40]
  cblock[1][1] = cblock[1][1] - ablock[0][1]*bblock[1][0]
    40016a40:	fd400400 	ldr	d0, [x0, #8]
    40016a44:	fd401421 	ldr	d1, [x1, #40]
                              - ablock[1][1]*bblock[1][1]
    40016a48:	fd400482 	ldr	d2, [x4, #8]
  cblock[1][1] = cblock[1][1] - ablock[0][1]*bblock[1][0]
    40016a4c:	1e610801 	fmul	d1, d0, d1
    40016a50:	fd401840 	ldr	d0, [x2, #48]
    40016a54:	1e613800 	fsub	d0, d0, d1
                              - ablock[1][1]*bblock[1][1]
    40016a58:	fd400461 	ldr	d1, [x3, #8]
    40016a5c:	1e620821 	fmul	d1, d1, d2
                              - ablock[2][1]*bblock[1][2]
    40016a60:	fd400882 	ldr	d2, [x4, #16]
                              - ablock[1][1]*bblock[1][1]
    40016a64:	1e613800 	fsub	d0, d0, d1
                              - ablock[2][1]*bblock[1][2]
    40016a68:	fd4004e1 	ldr	d1, [x7, #8]
    40016a6c:	1e620821 	fmul	d1, d1, d2
                              - ablock[3][1]*bblock[1][3]
    40016a70:	fd400c82 	ldr	d2, [x4, #24]
                              - ablock[2][1]*bblock[1][2]
    40016a74:	1e613800 	fsub	d0, d0, d1
                              - ablock[3][1]*bblock[1][3]
    40016a78:	fd4004c1 	ldr	d1, [x6, #8]
    40016a7c:	1e620821 	fmul	d1, d1, d2
                              - ablock[4][1]*bblock[1][4];
    40016a80:	fd401082 	ldr	d2, [x4, #32]
                              - ablock[3][1]*bblock[1][3]
    40016a84:	1e613800 	fsub	d0, d0, d1
                              - ablock[4][1]*bblock[1][4];
    40016a88:	fd4004a1 	ldr	d1, [x5, #8]
    40016a8c:	1e620821 	fmul	d1, d1, d2
    40016a90:	1e613800 	fsub	d0, d0, d1
  cblock[1][1] = cblock[1][1] - ablock[0][1]*bblock[1][0]
    40016a94:	fd001840 	str	d0, [x2, #48]
  cblock[1][2] = cblock[1][2] - ablock[0][2]*bblock[1][0]
    40016a98:	fd400800 	ldr	d0, [x0, #16]
    40016a9c:	fd401421 	ldr	d1, [x1, #40]
                              - ablock[1][2]*bblock[1][1]
    40016aa0:	fd400482 	ldr	d2, [x4, #8]
  cblock[1][2] = cblock[1][2] - ablock[0][2]*bblock[1][0]
    40016aa4:	1e610801 	fmul	d1, d0, d1
    40016aa8:	fd401c40 	ldr	d0, [x2, #56]
    40016aac:	1e613800 	fsub	d0, d0, d1
                              - ablock[1][2]*bblock[1][1]
    40016ab0:	fd400861 	ldr	d1, [x3, #16]
    40016ab4:	1e620821 	fmul	d1, d1, d2
                              - ablock[2][2]*bblock[1][2]
    40016ab8:	fd400882 	ldr	d2, [x4, #16]
                              - ablock[1][2]*bblock[1][1]
    40016abc:	1e613800 	fsub	d0, d0, d1
                              - ablock[2][2]*bblock[1][2]
    40016ac0:	fd4008e1 	ldr	d1, [x7, #16]
    40016ac4:	1e620821 	fmul	d1, d1, d2
                              - ablock[3][2]*bblock[1][3]
    40016ac8:	fd400c82 	ldr	d2, [x4, #24]
                              - ablock[2][2]*bblock[1][2]
    40016acc:	1e613800 	fsub	d0, d0, d1
                              - ablock[3][2]*bblock[1][3]
    40016ad0:	fd4008c1 	ldr	d1, [x6, #16]
    40016ad4:	1e620821 	fmul	d1, d1, d2
                              - ablock[4][2]*bblock[1][4];
    40016ad8:	fd401082 	ldr	d2, [x4, #32]
                              - ablock[3][2]*bblock[1][3]
    40016adc:	1e613800 	fsub	d0, d0, d1
                              - ablock[4][2]*bblock[1][4];
    40016ae0:	fd4008a1 	ldr	d1, [x5, #16]
    40016ae4:	1e620821 	fmul	d1, d1, d2
    40016ae8:	1e613800 	fsub	d0, d0, d1
  cblock[1][2] = cblock[1][2] - ablock[0][2]*bblock[1][0]
    40016aec:	fd001c40 	str	d0, [x2, #56]
  cblock[1][3] = cblock[1][3] - ablock[0][3]*bblock[1][0]
    40016af0:	fd400c00 	ldr	d0, [x0, #24]
    40016af4:	fd401421 	ldr	d1, [x1, #40]
                              - ablock[1][3]*bblock[1][1]
    40016af8:	fd400482 	ldr	d2, [x4, #8]
  cblock[1][3] = cblock[1][3] - ablock[0][3]*bblock[1][0]
    40016afc:	1e610801 	fmul	d1, d0, d1
    40016b00:	fd402040 	ldr	d0, [x2, #64]
    40016b04:	1e613800 	fsub	d0, d0, d1
                              - ablock[1][3]*bblock[1][1]
    40016b08:	fd400c61 	ldr	d1, [x3, #24]
    40016b0c:	1e620821 	fmul	d1, d1, d2
                              - ablock[2][3]*bblock[1][2]
    40016b10:	fd400882 	ldr	d2, [x4, #16]
                              - ablock[1][3]*bblock[1][1]
    40016b14:	1e613800 	fsub	d0, d0, d1
                              - ablock[2][3]*bblock[1][2]
    40016b18:	fd400ce1 	ldr	d1, [x7, #24]
    40016b1c:	1e620821 	fmul	d1, d1, d2
                              - ablock[3][3]*bblock[1][3]
    40016b20:	fd400c82 	ldr	d2, [x4, #24]
                              - ablock[2][3]*bblock[1][2]
    40016b24:	1e613800 	fsub	d0, d0, d1
                              - ablock[3][3]*bblock[1][3]
    40016b28:	fd400cc1 	ldr	d1, [x6, #24]
    40016b2c:	1e620821 	fmul	d1, d1, d2
                              - ablock[4][3]*bblock[1][4];
    40016b30:	fd401082 	ldr	d2, [x4, #32]
                              - ablock[3][3]*bblock[1][3]
    40016b34:	1e613800 	fsub	d0, d0, d1
                              - ablock[4][3]*bblock[1][4];
    40016b38:	fd400ca1 	ldr	d1, [x5, #24]
    40016b3c:	1e620821 	fmul	d1, d1, d2
    40016b40:	1e613800 	fsub	d0, d0, d1
  cblock[1][3] = cblock[1][3] - ablock[0][3]*bblock[1][0]
    40016b44:	fd002040 	str	d0, [x2, #64]
  cblock[1][4] = cblock[1][4] - ablock[0][4]*bblock[1][0]
    40016b48:	fd401000 	ldr	d0, [x0, #32]
    40016b4c:	fd401421 	ldr	d1, [x1, #40]
                              - ablock[1][4]*bblock[1][1]
    40016b50:	fd400482 	ldr	d2, [x4, #8]
  cblock[1][4] = cblock[1][4] - ablock[0][4]*bblock[1][0]
    40016b54:	1e610801 	fmul	d1, d0, d1
    40016b58:	fd402440 	ldr	d0, [x2, #72]
    40016b5c:	1e613800 	fsub	d0, d0, d1
                              - ablock[1][4]*bblock[1][1]
    40016b60:	fd401061 	ldr	d1, [x3, #32]
    40016b64:	1e620821 	fmul	d1, d1, d2
                              - ablock[2][4]*bblock[1][2]
    40016b68:	fd400882 	ldr	d2, [x4, #16]
                              - ablock[1][4]*bblock[1][1]
    40016b6c:	1e613800 	fsub	d0, d0, d1
                              - ablock[2][4]*bblock[1][2]
    40016b70:	fd4010e1 	ldr	d1, [x7, #32]
    40016b74:	1e620821 	fmul	d1, d1, d2
                              - ablock[3][4]*bblock[1][3]
    40016b78:	fd400c82 	ldr	d2, [x4, #24]
                              - ablock[2][4]*bblock[1][2]
    40016b7c:	1e613800 	fsub	d0, d0, d1
                              - ablock[3][4]*bblock[1][3]
    40016b80:	fd4010c1 	ldr	d1, [x6, #32]
    40016b84:	1e620821 	fmul	d1, d1, d2
                              - ablock[4][4]*bblock[1][4];
    40016b88:	fd401082 	ldr	d2, [x4, #32]
  cblock[2][0] = cblock[2][0] - ablock[0][0]*bblock[2][0]
    40016b8c:	91014024 	add	x4, x1, #0x50
                              - ablock[3][4]*bblock[1][3]
    40016b90:	1e613800 	fsub	d0, d0, d1
                              - ablock[4][4]*bblock[1][4];
    40016b94:	fd4010a1 	ldr	d1, [x5, #32]
    40016b98:	1e620821 	fmul	d1, d1, d2
    40016b9c:	1e613800 	fsub	d0, d0, d1
  cblock[1][4] = cblock[1][4] - ablock[0][4]*bblock[1][0]
    40016ba0:	fd002440 	str	d0, [x2, #72]
  cblock[2][0] = cblock[2][0] - ablock[0][0]*bblock[2][0]
    40016ba4:	fd400000 	ldr	d0, [x0]
    40016ba8:	fd402821 	ldr	d1, [x1, #80]
                              - ablock[1][0]*bblock[2][1]
    40016bac:	fd400482 	ldr	d2, [x4, #8]
  cblock[2][0] = cblock[2][0] - ablock[0][0]*bblock[2][0]
    40016bb0:	1e610801 	fmul	d1, d0, d1
    40016bb4:	fd402840 	ldr	d0, [x2, #80]
    40016bb8:	1e613800 	fsub	d0, d0, d1
                              - ablock[1][0]*bblock[2][1]
    40016bbc:	fd401401 	ldr	d1, [x0, #40]
    40016bc0:	1e620821 	fmul	d1, d1, d2
                              - ablock[2][0]*bblock[2][2]
    40016bc4:	fd400882 	ldr	d2, [x4, #16]
                              - ablock[1][0]*bblock[2][1]
    40016bc8:	1e613800 	fsub	d0, d0, d1
                              - ablock[2][0]*bblock[2][2]
    40016bcc:	fd402801 	ldr	d1, [x0, #80]
    40016bd0:	1e620821 	fmul	d1, d1, d2
    40016bd4:	1e613800 	fsub	d0, d0, d1
                              - ablock[3][0]*bblock[2][3]
    40016bd8:	fd403c01 	ldr	d1, [x0, #120]
    40016bdc:	fd400c82 	ldr	d2, [x4, #24]
    40016be0:	1e620821 	fmul	d1, d1, d2
                              - ablock[4][0]*bblock[2][4];
    40016be4:	fd401082 	ldr	d2, [x4, #32]
                              - ablock[3][0]*bblock[2][3]
    40016be8:	1e613800 	fsub	d0, d0, d1
                              - ablock[4][0]*bblock[2][4];
    40016bec:	fd405001 	ldr	d1, [x0, #160]
    40016bf0:	1e620821 	fmul	d1, d1, d2
    40016bf4:	1e613800 	fsub	d0, d0, d1
  cblock[2][0] = cblock[2][0] - ablock[0][0]*bblock[2][0]
    40016bf8:	fd002840 	str	d0, [x2, #80]
  cblock[2][1] = cblock[2][1] - ablock[0][1]*bblock[2][0]
    40016bfc:	fd400400 	ldr	d0, [x0, #8]
    40016c00:	fd402821 	ldr	d1, [x1, #80]
                              - ablock[1][1]*bblock[2][1]
    40016c04:	fd400482 	ldr	d2, [x4, #8]
  cblock[2][1] = cblock[2][1] - ablock[0][1]*bblock[2][0]
    40016c08:	1e610801 	fmul	d1, d0, d1
    40016c0c:	fd402c40 	ldr	d0, [x2, #88]
    40016c10:	1e613800 	fsub	d0, d0, d1
                              - ablock[1][1]*bblock[2][1]
    40016c14:	fd400461 	ldr	d1, [x3, #8]
    40016c18:	1e620821 	fmul	d1, d1, d2
                              - ablock[2][1]*bblock[2][2]
    40016c1c:	fd400882 	ldr	d2, [x4, #16]
                              - ablock[1][1]*bblock[2][1]
    40016c20:	1e613800 	fsub	d0, d0, d1
                              - ablock[2][1]*bblock[2][2]
    40016c24:	fd4004e1 	ldr	d1, [x7, #8]
    40016c28:	1e620821 	fmul	d1, d1, d2
                              - ablock[3][1]*bblock[2][3]
    40016c2c:	fd400c82 	ldr	d2, [x4, #24]
                              - ablock[2][1]*bblock[2][2]
    40016c30:	1e613800 	fsub	d0, d0, d1
                              - ablock[3][1]*bblock[2][3]
    40016c34:	fd4004c1 	ldr	d1, [x6, #8]
    40016c38:	1e620821 	fmul	d1, d1, d2
                              - ablock[4][1]*bblock[2][4];
    40016c3c:	fd401082 	ldr	d2, [x4, #32]
                              - ablock[3][1]*bblock[2][3]
    40016c40:	1e613800 	fsub	d0, d0, d1
                              - ablock[4][1]*bblock[2][4];
    40016c44:	fd4004a1 	ldr	d1, [x5, #8]
    40016c48:	1e620821 	fmul	d1, d1, d2
    40016c4c:	1e613800 	fsub	d0, d0, d1
  cblock[2][1] = cblock[2][1] - ablock[0][1]*bblock[2][0]
    40016c50:	fd002c40 	str	d0, [x2, #88]
  cblock[2][2] = cblock[2][2] - ablock[0][2]*bblock[2][0]
    40016c54:	fd400800 	ldr	d0, [x0, #16]
    40016c58:	fd402821 	ldr	d1, [x1, #80]
                              - ablock[1][2]*bblock[2][1]
    40016c5c:	fd400482 	ldr	d2, [x4, #8]
  cblock[2][2] = cblock[2][2] - ablock[0][2]*bblock[2][0]
    40016c60:	1e610801 	fmul	d1, d0, d1
    40016c64:	fd403040 	ldr	d0, [x2, #96]
    40016c68:	1e613800 	fsub	d0, d0, d1
                              - ablock[1][2]*bblock[2][1]
    40016c6c:	fd400861 	ldr	d1, [x3, #16]
    40016c70:	1e620821 	fmul	d1, d1, d2
                              - ablock[2][2]*bblock[2][2]
    40016c74:	fd400882 	ldr	d2, [x4, #16]
                              - ablock[1][2]*bblock[2][1]
    40016c78:	1e613800 	fsub	d0, d0, d1
                              - ablock[2][2]*bblock[2][2]
    40016c7c:	fd4008e1 	ldr	d1, [x7, #16]
    40016c80:	1e620821 	fmul	d1, d1, d2
                              - ablock[3][2]*bblock[2][3]
    40016c84:	fd400c82 	ldr	d2, [x4, #24]
                              - ablock[2][2]*bblock[2][2]
    40016c88:	1e613800 	fsub	d0, d0, d1
                              - ablock[3][2]*bblock[2][3]
    40016c8c:	fd4008c1 	ldr	d1, [x6, #16]
    40016c90:	1e620821 	fmul	d1, d1, d2
                              - ablock[4][2]*bblock[2][4];
    40016c94:	fd401082 	ldr	d2, [x4, #32]
                              - ablock[3][2]*bblock[2][3]
    40016c98:	1e613800 	fsub	d0, d0, d1
                              - ablock[4][2]*bblock[2][4];
    40016c9c:	fd4008a1 	ldr	d1, [x5, #16]
    40016ca0:	1e620821 	fmul	d1, d1, d2
    40016ca4:	1e613800 	fsub	d0, d0, d1
  cblock[2][2] = cblock[2][2] - ablock[0][2]*bblock[2][0]
    40016ca8:	fd003040 	str	d0, [x2, #96]
  cblock[2][3] = cblock[2][3] - ablock[0][3]*bblock[2][0]
    40016cac:	fd400c00 	ldr	d0, [x0, #24]
    40016cb0:	fd402821 	ldr	d1, [x1, #80]
    40016cb4:	1e610801 	fmul	d1, d0, d1
    40016cb8:	fd403440 	ldr	d0, [x2, #104]
    40016cbc:	1e613800 	fsub	d0, d0, d1
                              - ablock[1][3]*bblock[2][1]
    40016cc0:	fd400c61 	ldr	d1, [x3, #24]
    40016cc4:	fd400482 	ldr	d2, [x4, #8]
    40016cc8:	1e620821 	fmul	d1, d1, d2
                              - ablock[2][3]*bblock[2][2]
    40016ccc:	fd400882 	ldr	d2, [x4, #16]
                              - ablock[1][3]*bblock[2][1]
    40016cd0:	1e613800 	fsub	d0, d0, d1
                              - ablock[2][3]*bblock[2][2]
    40016cd4:	fd400ce1 	ldr	d1, [x7, #24]
    40016cd8:	1e620821 	fmul	d1, d1, d2
                              - ablock[3][3]*bblock[2][3]
    40016cdc:	fd400c82 	ldr	d2, [x4, #24]
                              - ablock[2][3]*bblock[2][2]
    40016ce0:	1e613800 	fsub	d0, d0, d1
                              - ablock[3][3]*bblock[2][3]
    40016ce4:	fd400cc1 	ldr	d1, [x6, #24]
    40016ce8:	1e620821 	fmul	d1, d1, d2
                              - ablock[4][3]*bblock[2][4];
    40016cec:	fd401082 	ldr	d2, [x4, #32]
                              - ablock[3][3]*bblock[2][3]
    40016cf0:	1e613800 	fsub	d0, d0, d1
                              - ablock[4][3]*bblock[2][4];
    40016cf4:	fd400ca1 	ldr	d1, [x5, #24]
    40016cf8:	1e620821 	fmul	d1, d1, d2
    40016cfc:	1e613800 	fsub	d0, d0, d1
  cblock[2][3] = cblock[2][3] - ablock[0][3]*bblock[2][0]
    40016d00:	fd003440 	str	d0, [x2, #104]
  cblock[2][4] = cblock[2][4] - ablock[0][4]*bblock[2][0]
    40016d04:	fd401000 	ldr	d0, [x0, #32]
    40016d08:	fd402821 	ldr	d1, [x1, #80]
                              - ablock[1][4]*bblock[2][1]
    40016d0c:	fd400482 	ldr	d2, [x4, #8]
  cblock[2][4] = cblock[2][4] - ablock[0][4]*bblock[2][0]
    40016d10:	1e610801 	fmul	d1, d0, d1
    40016d14:	fd403840 	ldr	d0, [x2, #112]
    40016d18:	1e613800 	fsub	d0, d0, d1
                              - ablock[1][4]*bblock[2][1]
    40016d1c:	fd401061 	ldr	d1, [x3, #32]
    40016d20:	1e620821 	fmul	d1, d1, d2
                              - ablock[2][4]*bblock[2][2]
    40016d24:	fd400882 	ldr	d2, [x4, #16]
                              - ablock[1][4]*bblock[2][1]
    40016d28:	1e613800 	fsub	d0, d0, d1
                              - ablock[2][4]*bblock[2][2]
    40016d2c:	fd4010e1 	ldr	d1, [x7, #32]
    40016d30:	1e620821 	fmul	d1, d1, d2
                              - ablock[3][4]*bblock[2][3]
    40016d34:	fd400c82 	ldr	d2, [x4, #24]
                              - ablock[2][4]*bblock[2][2]
    40016d38:	1e613800 	fsub	d0, d0, d1
                              - ablock[3][4]*bblock[2][3]
    40016d3c:	fd4010c1 	ldr	d1, [x6, #32]
    40016d40:	1e620821 	fmul	d1, d1, d2
                              - ablock[4][4]*bblock[2][4];
    40016d44:	fd401082 	ldr	d2, [x4, #32]
  cblock[3][0] = cblock[3][0] - ablock[0][0]*bblock[3][0]
    40016d48:	9101e024 	add	x4, x1, #0x78
                              - ablock[3][4]*bblock[2][3]
    40016d4c:	1e613800 	fsub	d0, d0, d1
                              - ablock[4][4]*bblock[2][4];
    40016d50:	fd4010a1 	ldr	d1, [x5, #32]
    40016d54:	1e620821 	fmul	d1, d1, d2
    40016d58:	1e613800 	fsub	d0, d0, d1
  cblock[2][4] = cblock[2][4] - ablock[0][4]*bblock[2][0]
    40016d5c:	fd003840 	str	d0, [x2, #112]
  cblock[3][0] = cblock[3][0] - ablock[0][0]*bblock[3][0]
    40016d60:	fd400000 	ldr	d0, [x0]
    40016d64:	fd403c21 	ldr	d1, [x1, #120]
                              - ablock[1][0]*bblock[3][1]
    40016d68:	fd400482 	ldr	d2, [x4, #8]
  cblock[3][0] = cblock[3][0] - ablock[0][0]*bblock[3][0]
    40016d6c:	1e610801 	fmul	d1, d0, d1
    40016d70:	fd403c40 	ldr	d0, [x2, #120]
    40016d74:	1e613800 	fsub	d0, d0, d1
                              - ablock[1][0]*bblock[3][1]
    40016d78:	fd401401 	ldr	d1, [x0, #40]
    40016d7c:	1e620821 	fmul	d1, d1, d2
                              - ablock[2][0]*bblock[3][2]
    40016d80:	fd400882 	ldr	d2, [x4, #16]
                              - ablock[1][0]*bblock[3][1]
    40016d84:	1e613800 	fsub	d0, d0, d1
                              - ablock[2][0]*bblock[3][2]
    40016d88:	fd402801 	ldr	d1, [x0, #80]
    40016d8c:	1e620821 	fmul	d1, d1, d2
                              - ablock[3][0]*bblock[3][3]
    40016d90:	fd400c82 	ldr	d2, [x4, #24]
                              - ablock[2][0]*bblock[3][2]
    40016d94:	1e613800 	fsub	d0, d0, d1
                              - ablock[3][0]*bblock[3][3]
    40016d98:	fd403c01 	ldr	d1, [x0, #120]
    40016d9c:	1e620821 	fmul	d1, d1, d2
                              - ablock[4][0]*bblock[3][4];
    40016da0:	fd401082 	ldr	d2, [x4, #32]
                              - ablock[3][0]*bblock[3][3]
    40016da4:	1e613800 	fsub	d0, d0, d1
                              - ablock[4][0]*bblock[3][4];
    40016da8:	fd405001 	ldr	d1, [x0, #160]
    40016dac:	1e620821 	fmul	d1, d1, d2
    40016db0:	1e613800 	fsub	d0, d0, d1
  cblock[3][0] = cblock[3][0] - ablock[0][0]*bblock[3][0]
    40016db4:	fd003c40 	str	d0, [x2, #120]
  cblock[3][1] = cblock[3][1] - ablock[0][1]*bblock[3][0]
    40016db8:	fd400400 	ldr	d0, [x0, #8]
    40016dbc:	fd403c21 	ldr	d1, [x1, #120]
                              - ablock[1][1]*bblock[3][1]
    40016dc0:	fd400482 	ldr	d2, [x4, #8]
  cblock[3][1] = cblock[3][1] - ablock[0][1]*bblock[3][0]
    40016dc4:	1e610801 	fmul	d1, d0, d1
    40016dc8:	fd404040 	ldr	d0, [x2, #128]
    40016dcc:	1e613800 	fsub	d0, d0, d1
                              - ablock[1][1]*bblock[3][1]
    40016dd0:	fd400461 	ldr	d1, [x3, #8]
    40016dd4:	1e620821 	fmul	d1, d1, d2
                              - ablock[2][1]*bblock[3][2]
    40016dd8:	fd400882 	ldr	d2, [x4, #16]
                              - ablock[1][1]*bblock[3][1]
    40016ddc:	1e613800 	fsub	d0, d0, d1
                              - ablock[2][1]*bblock[3][2]
    40016de0:	fd4004e1 	ldr	d1, [x7, #8]
    40016de4:	1e620821 	fmul	d1, d1, d2
                              - ablock[3][1]*bblock[3][3]
    40016de8:	fd400c82 	ldr	d2, [x4, #24]
                              - ablock[2][1]*bblock[3][2]
    40016dec:	1e613800 	fsub	d0, d0, d1
                              - ablock[3][1]*bblock[3][3]
    40016df0:	fd4004c1 	ldr	d1, [x6, #8]
    40016df4:	1e620821 	fmul	d1, d1, d2
                              - ablock[4][1]*bblock[3][4];
    40016df8:	fd401082 	ldr	d2, [x4, #32]
                              - ablock[3][1]*bblock[3][3]
    40016dfc:	1e613800 	fsub	d0, d0, d1
                              - ablock[4][1]*bblock[3][4];
    40016e00:	fd4004a1 	ldr	d1, [x5, #8]
    40016e04:	1e620821 	fmul	d1, d1, d2
    40016e08:	1e613800 	fsub	d0, d0, d1
  cblock[3][1] = cblock[3][1] - ablock[0][1]*bblock[3][0]
    40016e0c:	fd004040 	str	d0, [x2, #128]
  cblock[3][2] = cblock[3][2] - ablock[0][2]*bblock[3][0]
    40016e10:	fd400800 	ldr	d0, [x0, #16]
    40016e14:	fd403c21 	ldr	d1, [x1, #120]
                              - ablock[1][2]*bblock[3][1]
    40016e18:	fd400482 	ldr	d2, [x4, #8]
  cblock[3][2] = cblock[3][2] - ablock[0][2]*bblock[3][0]
    40016e1c:	1e610801 	fmul	d1, d0, d1
    40016e20:	fd404440 	ldr	d0, [x2, #136]
    40016e24:	1e613800 	fsub	d0, d0, d1
                              - ablock[1][2]*bblock[3][1]
    40016e28:	fd400861 	ldr	d1, [x3, #16]
    40016e2c:	1e620821 	fmul	d1, d1, d2
                              - ablock[2][2]*bblock[3][2]
    40016e30:	fd400882 	ldr	d2, [x4, #16]
                              - ablock[1][2]*bblock[3][1]
    40016e34:	1e613800 	fsub	d0, d0, d1
                              - ablock[2][2]*bblock[3][2]
    40016e38:	fd4008e1 	ldr	d1, [x7, #16]
    40016e3c:	1e620821 	fmul	d1, d1, d2
                              - ablock[3][2]*bblock[3][3]
    40016e40:	fd400c82 	ldr	d2, [x4, #24]
                              - ablock[2][2]*bblock[3][2]
    40016e44:	1e613800 	fsub	d0, d0, d1
                              - ablock[3][2]*bblock[3][3]
    40016e48:	fd4008c1 	ldr	d1, [x6, #16]
    40016e4c:	1e620821 	fmul	d1, d1, d2
                              - ablock[4][2]*bblock[3][4];
    40016e50:	fd401082 	ldr	d2, [x4, #32]
                              - ablock[3][2]*bblock[3][3]
    40016e54:	1e613800 	fsub	d0, d0, d1
                              - ablock[4][2]*bblock[3][4];
    40016e58:	fd4008a1 	ldr	d1, [x5, #16]
    40016e5c:	1e620821 	fmul	d1, d1, d2
    40016e60:	1e613800 	fsub	d0, d0, d1
  cblock[3][2] = cblock[3][2] - ablock[0][2]*bblock[3][0]
    40016e64:	fd004440 	str	d0, [x2, #136]
  cblock[3][3] = cblock[3][3] - ablock[0][3]*bblock[3][0]
    40016e68:	fd400c00 	ldr	d0, [x0, #24]
    40016e6c:	fd403c21 	ldr	d1, [x1, #120]
                              - ablock[1][3]*bblock[3][1]
    40016e70:	fd400482 	ldr	d2, [x4, #8]
  cblock[3][3] = cblock[3][3] - ablock[0][3]*bblock[3][0]
    40016e74:	1e610801 	fmul	d1, d0, d1
    40016e78:	fd404840 	ldr	d0, [x2, #144]
    40016e7c:	1e613800 	fsub	d0, d0, d1
                              - ablock[1][3]*bblock[3][1]
    40016e80:	fd400c61 	ldr	d1, [x3, #24]
    40016e84:	1e620821 	fmul	d1, d1, d2
                              - ablock[2][3]*bblock[3][2]
    40016e88:	fd400882 	ldr	d2, [x4, #16]
                              - ablock[1][3]*bblock[3][1]
    40016e8c:	1e613800 	fsub	d0, d0, d1
                              - ablock[2][3]*bblock[3][2]
    40016e90:	fd400ce1 	ldr	d1, [x7, #24]
    40016e94:	1e620821 	fmul	d1, d1, d2
    40016e98:	1e613800 	fsub	d0, d0, d1
                              - ablock[3][3]*bblock[3][3]
    40016e9c:	fd400cc1 	ldr	d1, [x6, #24]
    40016ea0:	fd400c82 	ldr	d2, [x4, #24]
    40016ea4:	1e620821 	fmul	d1, d1, d2
                              - ablock[4][3]*bblock[3][4];
    40016ea8:	fd401082 	ldr	d2, [x4, #32]
                              - ablock[3][3]*bblock[3][3]
    40016eac:	1e613800 	fsub	d0, d0, d1
                              - ablock[4][3]*bblock[3][4];
    40016eb0:	fd400ca1 	ldr	d1, [x5, #24]
    40016eb4:	1e620821 	fmul	d1, d1, d2
    40016eb8:	1e613800 	fsub	d0, d0, d1
  cblock[3][3] = cblock[3][3] - ablock[0][3]*bblock[3][0]
    40016ebc:	fd004840 	str	d0, [x2, #144]
  cblock[3][4] = cblock[3][4] - ablock[0][4]*bblock[3][0]
    40016ec0:	fd401000 	ldr	d0, [x0, #32]
    40016ec4:	fd403c21 	ldr	d1, [x1, #120]
                              - ablock[1][4]*bblock[3][1]
    40016ec8:	fd400482 	ldr	d2, [x4, #8]
  cblock[3][4] = cblock[3][4] - ablock[0][4]*bblock[3][0]
    40016ecc:	1e610801 	fmul	d1, d0, d1
    40016ed0:	fd404c40 	ldr	d0, [x2, #152]
    40016ed4:	1e613800 	fsub	d0, d0, d1
                              - ablock[1][4]*bblock[3][1]
    40016ed8:	fd401061 	ldr	d1, [x3, #32]
    40016edc:	1e620821 	fmul	d1, d1, d2
                              - ablock[2][4]*bblock[3][2]
    40016ee0:	fd400882 	ldr	d2, [x4, #16]
                              - ablock[1][4]*bblock[3][1]
    40016ee4:	1e613800 	fsub	d0, d0, d1
                              - ablock[2][4]*bblock[3][2]
    40016ee8:	fd4010e1 	ldr	d1, [x7, #32]
    40016eec:	1e620821 	fmul	d1, d1, d2
                              - ablock[3][4]*bblock[3][3]
    40016ef0:	fd400c82 	ldr	d2, [x4, #24]
                              - ablock[2][4]*bblock[3][2]
    40016ef4:	1e613800 	fsub	d0, d0, d1
                              - ablock[3][4]*bblock[3][3]
    40016ef8:	fd4010c1 	ldr	d1, [x6, #32]
    40016efc:	1e620821 	fmul	d1, d1, d2
                              - ablock[4][4]*bblock[3][4];
    40016f00:	fd401082 	ldr	d2, [x4, #32]
  cblock[4][0] = cblock[4][0] - ablock[0][0]*bblock[4][0]
    40016f04:	91028024 	add	x4, x1, #0xa0
                              - ablock[3][4]*bblock[3][3]
    40016f08:	1e613800 	fsub	d0, d0, d1
                              - ablock[4][4]*bblock[3][4];
    40016f0c:	fd4010a1 	ldr	d1, [x5, #32]
    40016f10:	1e620821 	fmul	d1, d1, d2
    40016f14:	1e613800 	fsub	d0, d0, d1
  cblock[3][4] = cblock[3][4] - ablock[0][4]*bblock[3][0]
    40016f18:	fd004c40 	str	d0, [x2, #152]
  cblock[4][0] = cblock[4][0] - ablock[0][0]*bblock[4][0]
    40016f1c:	fd400000 	ldr	d0, [x0]
    40016f20:	fd405021 	ldr	d1, [x1, #160]
                              - ablock[1][0]*bblock[4][1]
    40016f24:	fd400482 	ldr	d2, [x4, #8]
  cblock[4][0] = cblock[4][0] - ablock[0][0]*bblock[4][0]
    40016f28:	1e610801 	fmul	d1, d0, d1
    40016f2c:	fd405040 	ldr	d0, [x2, #160]
    40016f30:	1e613800 	fsub	d0, d0, d1
                              - ablock[1][0]*bblock[4][1]
    40016f34:	fd401401 	ldr	d1, [x0, #40]
    40016f38:	1e620821 	fmul	d1, d1, d2
                              - ablock[2][0]*bblock[4][2]
    40016f3c:	fd400882 	ldr	d2, [x4, #16]
                              - ablock[1][0]*bblock[4][1]
    40016f40:	1e613800 	fsub	d0, d0, d1
                              - ablock[2][0]*bblock[4][2]
    40016f44:	fd402801 	ldr	d1, [x0, #80]
    40016f48:	1e620821 	fmul	d1, d1, d2
                              - ablock[3][0]*bblock[4][3]
    40016f4c:	fd400c82 	ldr	d2, [x4, #24]
                              - ablock[2][0]*bblock[4][2]
    40016f50:	1e613800 	fsub	d0, d0, d1
                              - ablock[3][0]*bblock[4][3]
    40016f54:	fd403c01 	ldr	d1, [x0, #120]
    40016f58:	1e620821 	fmul	d1, d1, d2
                              - ablock[4][0]*bblock[4][4];
    40016f5c:	fd401082 	ldr	d2, [x4, #32]
                              - ablock[3][0]*bblock[4][3]
    40016f60:	1e613800 	fsub	d0, d0, d1
                              - ablock[4][0]*bblock[4][4];
    40016f64:	fd405001 	ldr	d1, [x0, #160]
    40016f68:	1e620821 	fmul	d1, d1, d2
    40016f6c:	1e613800 	fsub	d0, d0, d1
  cblock[4][0] = cblock[4][0] - ablock[0][0]*bblock[4][0]
    40016f70:	fd005040 	str	d0, [x2, #160]
  cblock[4][1] = cblock[4][1] - ablock[0][1]*bblock[4][0]
    40016f74:	fd400400 	ldr	d0, [x0, #8]
    40016f78:	fd405021 	ldr	d1, [x1, #160]
    40016f7c:	1e610801 	fmul	d1, d0, d1
    40016f80:	fd405440 	ldr	d0, [x2, #168]
    40016f84:	1e613800 	fsub	d0, d0, d1
                              - ablock[1][1]*bblock[4][1]
    40016f88:	fd400461 	ldr	d1, [x3, #8]
    40016f8c:	fd400482 	ldr	d2, [x4, #8]
    40016f90:	1e620821 	fmul	d1, d1, d2
                              - ablock[2][1]*bblock[4][2]
    40016f94:	fd400882 	ldr	d2, [x4, #16]
                              - ablock[1][1]*bblock[4][1]
    40016f98:	1e613800 	fsub	d0, d0, d1
                              - ablock[2][1]*bblock[4][2]
    40016f9c:	fd4004e1 	ldr	d1, [x7, #8]
    40016fa0:	1e620821 	fmul	d1, d1, d2
                              - ablock[3][1]*bblock[4][3]
    40016fa4:	fd400c82 	ldr	d2, [x4, #24]
                              - ablock[2][1]*bblock[4][2]
    40016fa8:	1e613800 	fsub	d0, d0, d1
                              - ablock[3][1]*bblock[4][3]
    40016fac:	fd4004c1 	ldr	d1, [x6, #8]
    40016fb0:	1e620821 	fmul	d1, d1, d2
                              - ablock[4][1]*bblock[4][4];
    40016fb4:	fd401082 	ldr	d2, [x4, #32]
                              - ablock[3][1]*bblock[4][3]
    40016fb8:	1e613800 	fsub	d0, d0, d1
                              - ablock[4][1]*bblock[4][4];
    40016fbc:	fd4004a1 	ldr	d1, [x5, #8]
    40016fc0:	1e620821 	fmul	d1, d1, d2
    40016fc4:	1e613800 	fsub	d0, d0, d1
  cblock[4][1] = cblock[4][1] - ablock[0][1]*bblock[4][0]
    40016fc8:	fd005440 	str	d0, [x2, #168]
  cblock[4][2] = cblock[4][2] - ablock[0][2]*bblock[4][0]
    40016fcc:	fd400800 	ldr	d0, [x0, #16]
    40016fd0:	fd405021 	ldr	d1, [x1, #160]
                              - ablock[1][2]*bblock[4][1]
    40016fd4:	fd400482 	ldr	d2, [x4, #8]
  cblock[4][2] = cblock[4][2] - ablock[0][2]*bblock[4][0]
    40016fd8:	1e610801 	fmul	d1, d0, d1
    40016fdc:	fd405840 	ldr	d0, [x2, #176]
    40016fe0:	1e613800 	fsub	d0, d0, d1
                              - ablock[1][2]*bblock[4][1]
    40016fe4:	fd400861 	ldr	d1, [x3, #16]
    40016fe8:	1e620821 	fmul	d1, d1, d2
                              - ablock[2][2]*bblock[4][2]
    40016fec:	fd400882 	ldr	d2, [x4, #16]
                              - ablock[1][2]*bblock[4][1]
    40016ff0:	1e613800 	fsub	d0, d0, d1
                              - ablock[2][2]*bblock[4][2]
    40016ff4:	fd4008e1 	ldr	d1, [x7, #16]
    40016ff8:	1e620821 	fmul	d1, d1, d2
                              - ablock[3][2]*bblock[4][3]
    40016ffc:	fd400c82 	ldr	d2, [x4, #24]
                              - ablock[2][2]*bblock[4][2]
    40017000:	1e613800 	fsub	d0, d0, d1
                              - ablock[3][2]*bblock[4][3]
    40017004:	fd4008c1 	ldr	d1, [x6, #16]
    40017008:	1e620821 	fmul	d1, d1, d2
                              - ablock[4][2]*bblock[4][4];
    4001700c:	fd401082 	ldr	d2, [x4, #32]
                              - ablock[3][2]*bblock[4][3]
    40017010:	1e613800 	fsub	d0, d0, d1
                              - ablock[4][2]*bblock[4][4];
    40017014:	fd4008a1 	ldr	d1, [x5, #16]
    40017018:	1e620821 	fmul	d1, d1, d2
    4001701c:	1e613800 	fsub	d0, d0, d1
  cblock[4][2] = cblock[4][2] - ablock[0][2]*bblock[4][0]
    40017020:	fd005840 	str	d0, [x2, #176]
  cblock[4][3] = cblock[4][3] - ablock[0][3]*bblock[4][0]
    40017024:	fd400c00 	ldr	d0, [x0, #24]
    40017028:	fd405021 	ldr	d1, [x1, #160]
                              - ablock[1][3]*bblock[4][1]
    4001702c:	fd400482 	ldr	d2, [x4, #8]
  cblock[4][3] = cblock[4][3] - ablock[0][3]*bblock[4][0]
    40017030:	1e610801 	fmul	d1, d0, d1
    40017034:	fd405c40 	ldr	d0, [x2, #184]
    40017038:	1e613800 	fsub	d0, d0, d1
                              - ablock[1][3]*bblock[4][1]
    4001703c:	fd400c61 	ldr	d1, [x3, #24]
    40017040:	1e620821 	fmul	d1, d1, d2
                              - ablock[2][3]*bblock[4][2]
    40017044:	fd400882 	ldr	d2, [x4, #16]
                              - ablock[1][3]*bblock[4][1]
    40017048:	1e613800 	fsub	d0, d0, d1
                              - ablock[2][3]*bblock[4][2]
    4001704c:	fd400ce1 	ldr	d1, [x7, #24]
    40017050:	1e620821 	fmul	d1, d1, d2
                              - ablock[3][3]*bblock[4][3]
    40017054:	fd400c82 	ldr	d2, [x4, #24]
                              - ablock[2][3]*bblock[4][2]
    40017058:	1e613800 	fsub	d0, d0, d1
                              - ablock[3][3]*bblock[4][3]
    4001705c:	fd400cc1 	ldr	d1, [x6, #24]
    40017060:	1e620821 	fmul	d1, d1, d2
                              - ablock[4][3]*bblock[4][4];
    40017064:	fd401082 	ldr	d2, [x4, #32]
                              - ablock[3][3]*bblock[4][3]
    40017068:	1e613800 	fsub	d0, d0, d1
                              - ablock[4][3]*bblock[4][4];
    4001706c:	fd400ca1 	ldr	d1, [x5, #24]
    40017070:	1e620821 	fmul	d1, d1, d2
    40017074:	1e613800 	fsub	d0, d0, d1
  cblock[4][3] = cblock[4][3] - ablock[0][3]*bblock[4][0]
    40017078:	fd005c40 	str	d0, [x2, #184]
  cblock[4][4] = cblock[4][4] - ablock[0][4]*bblock[4][0]
    4001707c:	fd401000 	ldr	d0, [x0, #32]
    40017080:	fd405021 	ldr	d1, [x1, #160]
                              - ablock[1][4]*bblock[4][1]
    40017084:	fd400482 	ldr	d2, [x4, #8]
  cblock[4][4] = cblock[4][4] - ablock[0][4]*bblock[4][0]
    40017088:	1e610801 	fmul	d1, d0, d1
    4001708c:	fd406040 	ldr	d0, [x2, #192]
    40017090:	1e613800 	fsub	d0, d0, d1
                              - ablock[1][4]*bblock[4][1]
    40017094:	fd401061 	ldr	d1, [x3, #32]
    40017098:	1e620821 	fmul	d1, d1, d2
                              - ablock[2][4]*bblock[4][2]
    4001709c:	fd400882 	ldr	d2, [x4, #16]
                              - ablock[1][4]*bblock[4][1]
    400170a0:	1e613800 	fsub	d0, d0, d1
                              - ablock[2][4]*bblock[4][2]
    400170a4:	fd4010e1 	ldr	d1, [x7, #32]
    400170a8:	1e620821 	fmul	d1, d1, d2
                              - ablock[3][4]*bblock[4][3]
    400170ac:	fd400c82 	ldr	d2, [x4, #24]
                              - ablock[2][4]*bblock[4][2]
    400170b0:	1e613800 	fsub	d0, d0, d1
                              - ablock[3][4]*bblock[4][3]
    400170b4:	fd4010c1 	ldr	d1, [x6, #32]
    400170b8:	1e620821 	fmul	d1, d1, d2
                              - ablock[4][4]*bblock[4][4];
    400170bc:	fd401082 	ldr	d2, [x4, #32]
                              - ablock[3][4]*bblock[4][3]
    400170c0:	1e613800 	fsub	d0, d0, d1
                              - ablock[4][4]*bblock[4][4];
    400170c4:	fd4010a1 	ldr	d1, [x5, #32]
    400170c8:	1e620821 	fmul	d1, d1, d2
    400170cc:	1e613800 	fsub	d0, d0, d1
  cblock[4][4] = cblock[4][4] - ablock[0][4]*bblock[4][0]
    400170d0:	fd006040 	str	d0, [x2, #192]
}
    400170d4:	d65f03c0 	ret

00000000400170d8 <binvcrhs>:

void binvcrhs(double lhs[5][5], double c[5][5], double r[5])
{
  double pivot, coeff;

  pivot = 1.00/lhs[0][0];
    400170d8:	aa0003ea 	mov	x10, x0
    400170dc:	1e6e1000 	fmov	d0, #1.000000000000000000e+00
  lhs[1][0] = lhs[1][0]*pivot;
    400170e0:	fd401402 	ldr	d2, [x0, #40]
  lhs[2][0] = lhs[2][0]*pivot;
  lhs[3][0] = lhs[3][0]*pivot;
  lhs[4][0] = lhs[4][0]*pivot;
  c[0][0] = c[0][0]*pivot;
    400170e4:	aa0103e3 	mov	x3, x1
  lhs[2][0] = lhs[2][0]*pivot;
    400170e8:	91014009 	add	x9, x0, #0x50
  lhs[3][0] = lhs[3][0]*pivot;
    400170ec:	9101e008 	add	x8, x0, #0x78
  pivot = 1.00/lhs[0][0];
    400170f0:	fc428541 	ldr	d1, [x10], #40
  lhs[4][0] = lhs[4][0]*pivot;
    400170f4:	91028007 	add	x7, x0, #0xa0
  c[1][0] = c[1][0]*pivot;
  c[2][0] = c[2][0]*pivot;
    400170f8:	91014026 	add	x6, x1, #0x50
  c[3][0] = c[3][0]*pivot;
    400170fc:	9101e025 	add	x5, x1, #0x78
  c[4][0] = c[4][0]*pivot;
    40017100:	91028024 	add	x4, x1, #0xa0
  pivot = 1.00/lhs[0][0];
    40017104:	1e611801 	fdiv	d1, d0, d1
  lhs[1][0] = lhs[1][0]*pivot;
    40017108:	1e610842 	fmul	d2, d2, d1
    4001710c:	fd001402 	str	d2, [x0, #40]
  lhs[2][0] = lhs[2][0]*pivot;
    40017110:	fd402802 	ldr	d2, [x0, #80]
    40017114:	1e610842 	fmul	d2, d2, d1
    40017118:	fd002802 	str	d2, [x0, #80]
  lhs[3][0] = lhs[3][0]*pivot;
    4001711c:	fd403c02 	ldr	d2, [x0, #120]
    40017120:	1e610842 	fmul	d2, d2, d1
    40017124:	fd003c02 	str	d2, [x0, #120]
  lhs[4][0] = lhs[4][0]*pivot;
    40017128:	fd405002 	ldr	d2, [x0, #160]
    4001712c:	1e610842 	fmul	d2, d2, d1
    40017130:	fd005002 	str	d2, [x0, #160]
  c[0][0] = c[0][0]*pivot;
    40017134:	fd400022 	ldr	d2, [x1]
    40017138:	1e610842 	fmul	d2, d2, d1
    4001713c:	fc028462 	str	d2, [x3], #40
  c[1][0] = c[1][0]*pivot;
    40017140:	fd401422 	ldr	d2, [x1, #40]
    40017144:	1e610842 	fmul	d2, d2, d1
    40017148:	fd001422 	str	d2, [x1, #40]
  c[2][0] = c[2][0]*pivot;
    4001714c:	fd402822 	ldr	d2, [x1, #80]
    40017150:	1e610842 	fmul	d2, d2, d1
    40017154:	fd002822 	str	d2, [x1, #80]
  c[3][0] = c[3][0]*pivot;
    40017158:	fd403c22 	ldr	d2, [x1, #120]
    4001715c:	1e610842 	fmul	d2, d2, d1
    40017160:	fd003c22 	str	d2, [x1, #120]
  c[4][0] = c[4][0]*pivot;
    40017164:	fd405022 	ldr	d2, [x1, #160]
    40017168:	1e610842 	fmul	d2, d2, d1
    4001716c:	fd005022 	str	d2, [x1, #160]
  r[0]   = r[0]  *pivot;
    40017170:	fd400042 	ldr	d2, [x2]
    40017174:	1e610841 	fmul	d1, d2, d1
    40017178:	fd000041 	str	d1, [x2]

  coeff = lhs[0][1];
    4001717c:	fd400401 	ldr	d1, [x0, #8]
  lhs[1][1]= lhs[1][1] - coeff*lhs[1][0];
    40017180:	fd401402 	ldr	d2, [x0, #40]
    40017184:	1e620823 	fmul	d3, d1, d2
    40017188:	fd400542 	ldr	d2, [x10, #8]
    4001718c:	1e633842 	fsub	d2, d2, d3
    40017190:	fd000542 	str	d2, [x10, #8]
  lhs[2][1]= lhs[2][1] - coeff*lhs[2][0];
    40017194:	fd402802 	ldr	d2, [x0, #80]
    40017198:	1e620823 	fmul	d3, d1, d2
    4001719c:	fd400522 	ldr	d2, [x9, #8]
    400171a0:	1e633842 	fsub	d2, d2, d3
    400171a4:	fd000522 	str	d2, [x9, #8]
  lhs[3][1]= lhs[3][1] - coeff*lhs[3][0];
    400171a8:	fd403c02 	ldr	d2, [x0, #120]
    400171ac:	1e620823 	fmul	d3, d1, d2
    400171b0:	fd400502 	ldr	d2, [x8, #8]
    400171b4:	1e633842 	fsub	d2, d2, d3
    400171b8:	fd000502 	str	d2, [x8, #8]
  lhs[4][1]= lhs[4][1] - coeff*lhs[4][0];
    400171bc:	fd405002 	ldr	d2, [x0, #160]
    400171c0:	1e620823 	fmul	d3, d1, d2
    400171c4:	fd4004e2 	ldr	d2, [x7, #8]
    400171c8:	1e633842 	fsub	d2, d2, d3
    400171cc:	fd0004e2 	str	d2, [x7, #8]
  c[0][1] = c[0][1] - coeff*c[0][0];
    400171d0:	fd400022 	ldr	d2, [x1]
    400171d4:	1e620823 	fmul	d3, d1, d2
    400171d8:	fd400422 	ldr	d2, [x1, #8]
    400171dc:	1e633842 	fsub	d2, d2, d3
    400171e0:	fd000422 	str	d2, [x1, #8]
  c[1][1] = c[1][1] - coeff*c[1][0];
    400171e4:	fd401422 	ldr	d2, [x1, #40]
    400171e8:	1e620823 	fmul	d3, d1, d2
    400171ec:	fd400462 	ldr	d2, [x3, #8]
    400171f0:	1e633842 	fsub	d2, d2, d3
    400171f4:	fd000462 	str	d2, [x3, #8]
  c[2][1] = c[2][1] - coeff*c[2][0];
    400171f8:	fd402822 	ldr	d2, [x1, #80]
    400171fc:	1e620823 	fmul	d3, d1, d2
    40017200:	fd4004c2 	ldr	d2, [x6, #8]
    40017204:	1e633842 	fsub	d2, d2, d3
    40017208:	fd0004c2 	str	d2, [x6, #8]
  c[3][1] = c[3][1] - coeff*c[3][0];
    4001720c:	fd403c22 	ldr	d2, [x1, #120]
    40017210:	1e620823 	fmul	d3, d1, d2
    40017214:	fd4004a2 	ldr	d2, [x5, #8]
    40017218:	1e633842 	fsub	d2, d2, d3
    4001721c:	fd0004a2 	str	d2, [x5, #8]
  c[4][1] = c[4][1] - coeff*c[4][0];
    40017220:	fd405022 	ldr	d2, [x1, #160]
    40017224:	1e620823 	fmul	d3, d1, d2
    40017228:	fd400482 	ldr	d2, [x4, #8]
    4001722c:	1e633842 	fsub	d2, d2, d3
    40017230:	fd000482 	str	d2, [x4, #8]
  r[1]   = r[1]   - coeff*r[0];
    40017234:	fd400042 	ldr	d2, [x2]
    40017238:	1e620821 	fmul	d1, d1, d2
    4001723c:	fd400442 	ldr	d2, [x2, #8]
    40017240:	1e613841 	fsub	d1, d2, d1
    40017244:	fd000441 	str	d1, [x2, #8]

  coeff = lhs[0][2];
    40017248:	fd400801 	ldr	d1, [x0, #16]
  lhs[1][2]= lhs[1][2] - coeff*lhs[1][0];
    4001724c:	fd401402 	ldr	d2, [x0, #40]
    40017250:	1e620823 	fmul	d3, d1, d2
    40017254:	fd400942 	ldr	d2, [x10, #16]
    40017258:	1e633842 	fsub	d2, d2, d3
    4001725c:	fd000942 	str	d2, [x10, #16]
  lhs[2][2]= lhs[2][2] - coeff*lhs[2][0];
    40017260:	fd402802 	ldr	d2, [x0, #80]
    40017264:	1e620823 	fmul	d3, d1, d2
    40017268:	fd400922 	ldr	d2, [x9, #16]
    4001726c:	1e633842 	fsub	d2, d2, d3
    40017270:	fd000922 	str	d2, [x9, #16]
  lhs[3][2]= lhs[3][2] - coeff*lhs[3][0];
    40017274:	fd403c02 	ldr	d2, [x0, #120]
    40017278:	1e620823 	fmul	d3, d1, d2
    4001727c:	fd400902 	ldr	d2, [x8, #16]
    40017280:	1e633842 	fsub	d2, d2, d3
    40017284:	fd000902 	str	d2, [x8, #16]
  lhs[4][2]= lhs[4][2] - coeff*lhs[4][0];
    40017288:	fd405002 	ldr	d2, [x0, #160]
    4001728c:	1e620823 	fmul	d3, d1, d2
    40017290:	fd4008e2 	ldr	d2, [x7, #16]
    40017294:	1e633842 	fsub	d2, d2, d3
    40017298:	fd0008e2 	str	d2, [x7, #16]
  c[0][2] = c[0][2] - coeff*c[0][0];
    4001729c:	fd400022 	ldr	d2, [x1]
    400172a0:	1e620823 	fmul	d3, d1, d2
    400172a4:	fd400822 	ldr	d2, [x1, #16]
    400172a8:	1e633842 	fsub	d2, d2, d3
    400172ac:	fd000822 	str	d2, [x1, #16]
  c[1][2] = c[1][2] - coeff*c[1][0];
    400172b0:	fd401422 	ldr	d2, [x1, #40]
    400172b4:	1e620823 	fmul	d3, d1, d2
    400172b8:	fd400862 	ldr	d2, [x3, #16]
    400172bc:	1e633842 	fsub	d2, d2, d3
    400172c0:	fd000862 	str	d2, [x3, #16]
  c[2][2] = c[2][2] - coeff*c[2][0];
    400172c4:	fd402822 	ldr	d2, [x1, #80]
    400172c8:	1e620823 	fmul	d3, d1, d2
    400172cc:	fd4008c2 	ldr	d2, [x6, #16]
    400172d0:	1e633842 	fsub	d2, d2, d3
    400172d4:	fd0008c2 	str	d2, [x6, #16]
  c[3][2] = c[3][2] - coeff*c[3][0];
    400172d8:	fd403c22 	ldr	d2, [x1, #120]
    400172dc:	1e620823 	fmul	d3, d1, d2
    400172e0:	fd4008a2 	ldr	d2, [x5, #16]
    400172e4:	1e633842 	fsub	d2, d2, d3
    400172e8:	fd0008a2 	str	d2, [x5, #16]
  c[4][2] = c[4][2] - coeff*c[4][0];
    400172ec:	fd405022 	ldr	d2, [x1, #160]
    400172f0:	1e620823 	fmul	d3, d1, d2
    400172f4:	fd400882 	ldr	d2, [x4, #16]
    400172f8:	1e633842 	fsub	d2, d2, d3
    400172fc:	fd000882 	str	d2, [x4, #16]
  r[2]   = r[2]   - coeff*r[0];
    40017300:	fd400042 	ldr	d2, [x2]
    40017304:	1e620821 	fmul	d1, d1, d2
    40017308:	fd400842 	ldr	d2, [x2, #16]
    4001730c:	1e613841 	fsub	d1, d2, d1
    40017310:	fd000841 	str	d1, [x2, #16]

  coeff = lhs[0][3];
    40017314:	fd400c01 	ldr	d1, [x0, #24]
  lhs[1][3]= lhs[1][3] - coeff*lhs[1][0];
    40017318:	fd401402 	ldr	d2, [x0, #40]
    4001731c:	1e620823 	fmul	d3, d1, d2
    40017320:	fd400d42 	ldr	d2, [x10, #24]
    40017324:	1e633842 	fsub	d2, d2, d3
    40017328:	fd000d42 	str	d2, [x10, #24]
  lhs[2][3]= lhs[2][3] - coeff*lhs[2][0];
    4001732c:	fd402802 	ldr	d2, [x0, #80]
    40017330:	1e620823 	fmul	d3, d1, d2
    40017334:	fd400d22 	ldr	d2, [x9, #24]
    40017338:	1e633842 	fsub	d2, d2, d3
    4001733c:	fd000d22 	str	d2, [x9, #24]
  lhs[3][3]= lhs[3][3] - coeff*lhs[3][0];
    40017340:	fd403c02 	ldr	d2, [x0, #120]
    40017344:	1e620823 	fmul	d3, d1, d2
    40017348:	fd400d02 	ldr	d2, [x8, #24]
    4001734c:	1e633842 	fsub	d2, d2, d3
    40017350:	fd000d02 	str	d2, [x8, #24]
  lhs[4][3]= lhs[4][3] - coeff*lhs[4][0];
    40017354:	fd405002 	ldr	d2, [x0, #160]
    40017358:	1e620823 	fmul	d3, d1, d2
    4001735c:	fd400ce2 	ldr	d2, [x7, #24]
    40017360:	1e633842 	fsub	d2, d2, d3
    40017364:	fd000ce2 	str	d2, [x7, #24]
  c[0][3] = c[0][3] - coeff*c[0][0];
    40017368:	fd400022 	ldr	d2, [x1]
    4001736c:	1e620823 	fmul	d3, d1, d2
    40017370:	fd400c22 	ldr	d2, [x1, #24]
    40017374:	1e633842 	fsub	d2, d2, d3
    40017378:	fd000c22 	str	d2, [x1, #24]
  c[1][3] = c[1][3] - coeff*c[1][0];
    4001737c:	fd401422 	ldr	d2, [x1, #40]
    40017380:	1e620823 	fmul	d3, d1, d2
    40017384:	fd400c62 	ldr	d2, [x3, #24]
    40017388:	1e633842 	fsub	d2, d2, d3
    4001738c:	fd000c62 	str	d2, [x3, #24]
  c[2][3] = c[2][3] - coeff*c[2][0];
    40017390:	fd402822 	ldr	d2, [x1, #80]
    40017394:	1e620823 	fmul	d3, d1, d2
    40017398:	fd400cc2 	ldr	d2, [x6, #24]
    4001739c:	1e633842 	fsub	d2, d2, d3
    400173a0:	fd000cc2 	str	d2, [x6, #24]
  c[3][3] = c[3][3] - coeff*c[3][0];
    400173a4:	fd403c22 	ldr	d2, [x1, #120]
    400173a8:	1e620823 	fmul	d3, d1, d2
    400173ac:	fd400ca2 	ldr	d2, [x5, #24]
    400173b0:	1e633842 	fsub	d2, d2, d3
    400173b4:	fd000ca2 	str	d2, [x5, #24]
  c[4][3] = c[4][3] - coeff*c[4][0];
    400173b8:	fd405022 	ldr	d2, [x1, #160]
    400173bc:	1e620823 	fmul	d3, d1, d2
    400173c0:	fd400c82 	ldr	d2, [x4, #24]
    400173c4:	1e633842 	fsub	d2, d2, d3
    400173c8:	fd000c82 	str	d2, [x4, #24]
  r[3]   = r[3]   - coeff*r[0];
    400173cc:	fd400042 	ldr	d2, [x2]
    400173d0:	1e620821 	fmul	d1, d1, d2
    400173d4:	fd400c42 	ldr	d2, [x2, #24]
    400173d8:	1e613841 	fsub	d1, d2, d1
    400173dc:	fd000c41 	str	d1, [x2, #24]

  coeff = lhs[0][4];
  lhs[1][4]= lhs[1][4] - coeff*lhs[1][0];
    400173e0:	6d420801 	ldp	d1, d2, [x0, #32]
    400173e4:	1e620823 	fmul	d3, d1, d2
    400173e8:	fd401142 	ldr	d2, [x10, #32]
    400173ec:	1e633842 	fsub	d2, d2, d3
    400173f0:	fd001142 	str	d2, [x10, #32]
  lhs[2][4]= lhs[2][4] - coeff*lhs[2][0];
    400173f4:	fd402802 	ldr	d2, [x0, #80]
    400173f8:	1e620823 	fmul	d3, d1, d2
    400173fc:	fd401122 	ldr	d2, [x9, #32]
    40017400:	1e633842 	fsub	d2, d2, d3
    40017404:	fd001122 	str	d2, [x9, #32]
  lhs[3][4]= lhs[3][4] - coeff*lhs[3][0];
    40017408:	fd403c02 	ldr	d2, [x0, #120]
    4001740c:	1e620823 	fmul	d3, d1, d2
    40017410:	fd401102 	ldr	d2, [x8, #32]
    40017414:	1e633842 	fsub	d2, d2, d3
    40017418:	fd001102 	str	d2, [x8, #32]
  lhs[4][4]= lhs[4][4] - coeff*lhs[4][0];
    4001741c:	fd405002 	ldr	d2, [x0, #160]
    40017420:	1e620823 	fmul	d3, d1, d2
    40017424:	fd4010e2 	ldr	d2, [x7, #32]
    40017428:	1e633842 	fsub	d2, d2, d3
    4001742c:	fd0010e2 	str	d2, [x7, #32]
  c[0][4] = c[0][4] - coeff*c[0][0];
    40017430:	fd400022 	ldr	d2, [x1]
    40017434:	1e620823 	fmul	d3, d1, d2
    40017438:	fd401022 	ldr	d2, [x1, #32]
    4001743c:	1e633842 	fsub	d2, d2, d3
    40017440:	fd001022 	str	d2, [x1, #32]
  c[1][4] = c[1][4] - coeff*c[1][0];
    40017444:	fd401422 	ldr	d2, [x1, #40]
    40017448:	1e620823 	fmul	d3, d1, d2
    4001744c:	fd401062 	ldr	d2, [x3, #32]
    40017450:	1e633842 	fsub	d2, d2, d3
    40017454:	fd001062 	str	d2, [x3, #32]
  c[2][4] = c[2][4] - coeff*c[2][0];
    40017458:	fd402822 	ldr	d2, [x1, #80]
    4001745c:	1e620823 	fmul	d3, d1, d2
    40017460:	fd4010c2 	ldr	d2, [x6, #32]
    40017464:	1e633842 	fsub	d2, d2, d3
    40017468:	fd0010c2 	str	d2, [x6, #32]
  c[3][4] = c[3][4] - coeff*c[3][0];
    4001746c:	fd403c22 	ldr	d2, [x1, #120]
    40017470:	1e620823 	fmul	d3, d1, d2
    40017474:	fd4010a2 	ldr	d2, [x5, #32]
    40017478:	1e633842 	fsub	d2, d2, d3
    4001747c:	fd0010a2 	str	d2, [x5, #32]
  c[4][4] = c[4][4] - coeff*c[4][0];
    40017480:	fd405022 	ldr	d2, [x1, #160]
    40017484:	1e620823 	fmul	d3, d1, d2
    40017488:	fd401082 	ldr	d2, [x4, #32]
    4001748c:	1e633842 	fsub	d2, d2, d3
    40017490:	fd001082 	str	d2, [x4, #32]
  r[4]   = r[4]   - coeff*r[0];
    40017494:	fd400042 	ldr	d2, [x2]
    40017498:	1e620821 	fmul	d1, d1, d2
    4001749c:	fd401042 	ldr	d2, [x2, #32]
    400174a0:	1e613841 	fsub	d1, d2, d1
    400174a4:	fd001041 	str	d1, [x2, #32]


  pivot = 1.00/lhs[1][1];
    400174a8:	fd400541 	ldr	d1, [x10, #8]
  lhs[2][1] = lhs[2][1]*pivot;
    400174ac:	fd400522 	ldr	d2, [x9, #8]
  pivot = 1.00/lhs[1][1];
    400174b0:	1e611801 	fdiv	d1, d0, d1
  lhs[2][1] = lhs[2][1]*pivot;
    400174b4:	1e610842 	fmul	d2, d2, d1
    400174b8:	fd000522 	str	d2, [x9, #8]
  lhs[3][1] = lhs[3][1]*pivot;
    400174bc:	fd400502 	ldr	d2, [x8, #8]
    400174c0:	1e610842 	fmul	d2, d2, d1
    400174c4:	fd000502 	str	d2, [x8, #8]
  lhs[4][1] = lhs[4][1]*pivot;
    400174c8:	fd4004e2 	ldr	d2, [x7, #8]
    400174cc:	1e610842 	fmul	d2, d2, d1
    400174d0:	fd0004e2 	str	d2, [x7, #8]
  c[0][1] = c[0][1]*pivot;
    400174d4:	fd400422 	ldr	d2, [x1, #8]
    400174d8:	1e610842 	fmul	d2, d2, d1
    400174dc:	fd000422 	str	d2, [x1, #8]
  c[1][1] = c[1][1]*pivot;
    400174e0:	fd400462 	ldr	d2, [x3, #8]
    400174e4:	1e610842 	fmul	d2, d2, d1
    400174e8:	fd000462 	str	d2, [x3, #8]
  c[2][1] = c[2][1]*pivot;
    400174ec:	fd4004c2 	ldr	d2, [x6, #8]
    400174f0:	1e610842 	fmul	d2, d2, d1
    400174f4:	fd0004c2 	str	d2, [x6, #8]
  c[3][1] = c[3][1]*pivot;
    400174f8:	fd4004a2 	ldr	d2, [x5, #8]
    400174fc:	1e610842 	fmul	d2, d2, d1
    40017500:	fd0004a2 	str	d2, [x5, #8]
  c[4][1] = c[4][1]*pivot;
    40017504:	fd400482 	ldr	d2, [x4, #8]
    40017508:	1e610842 	fmul	d2, d2, d1
    4001750c:	fd000482 	str	d2, [x4, #8]
  r[1]   = r[1]  *pivot;
    40017510:	fd400442 	ldr	d2, [x2, #8]
    40017514:	1e610841 	fmul	d1, d2, d1
    40017518:	fd000441 	str	d1, [x2, #8]

  coeff = lhs[1][0];
  lhs[2][0]= lhs[2][0] - coeff*lhs[2][1];
    4001751c:	fd400522 	ldr	d2, [x9, #8]
  coeff = lhs[1][0];
    40017520:	fd401401 	ldr	d1, [x0, #40]
  lhs[2][0]= lhs[2][0] - coeff*lhs[2][1];
    40017524:	1e620823 	fmul	d3, d1, d2
    40017528:	fd402802 	ldr	d2, [x0, #80]
    4001752c:	1e633842 	fsub	d2, d2, d3
    40017530:	fd002802 	str	d2, [x0, #80]
  lhs[3][0]= lhs[3][0] - coeff*lhs[3][1];
    40017534:	fd400502 	ldr	d2, [x8, #8]
    40017538:	1e620823 	fmul	d3, d1, d2
    4001753c:	fd403c02 	ldr	d2, [x0, #120]
    40017540:	1e633842 	fsub	d2, d2, d3
    40017544:	fd003c02 	str	d2, [x0, #120]
  lhs[4][0]= lhs[4][0] - coeff*lhs[4][1];
    40017548:	fd4004e2 	ldr	d2, [x7, #8]
    4001754c:	1e620823 	fmul	d3, d1, d2
    40017550:	fd405002 	ldr	d2, [x0, #160]
    40017554:	1e633842 	fsub	d2, d2, d3
    40017558:	fd005002 	str	d2, [x0, #160]
  c[0][0] = c[0][0] - coeff*c[0][1];
    4001755c:	fd400422 	ldr	d2, [x1, #8]
    40017560:	1e620823 	fmul	d3, d1, d2
    40017564:	fd400022 	ldr	d2, [x1]
    40017568:	1e633842 	fsub	d2, d2, d3
    4001756c:	fd000022 	str	d2, [x1]
  c[1][0] = c[1][0] - coeff*c[1][1];
    40017570:	fd400462 	ldr	d2, [x3, #8]
    40017574:	1e620823 	fmul	d3, d1, d2
    40017578:	fd401422 	ldr	d2, [x1, #40]
    4001757c:	1e633842 	fsub	d2, d2, d3
    40017580:	fd001422 	str	d2, [x1, #40]
  c[2][0] = c[2][0] - coeff*c[2][1];
    40017584:	fd4004c2 	ldr	d2, [x6, #8]
    40017588:	1e620823 	fmul	d3, d1, d2
    4001758c:	fd402822 	ldr	d2, [x1, #80]
    40017590:	1e633842 	fsub	d2, d2, d3
    40017594:	fd002822 	str	d2, [x1, #80]
  c[3][0] = c[3][0] - coeff*c[3][1];
    40017598:	fd4004a2 	ldr	d2, [x5, #8]
    4001759c:	1e620823 	fmul	d3, d1, d2
    400175a0:	fd403c22 	ldr	d2, [x1, #120]
    400175a4:	1e633842 	fsub	d2, d2, d3
    400175a8:	fd003c22 	str	d2, [x1, #120]
  c[4][0] = c[4][0] - coeff*c[4][1];
    400175ac:	fd400482 	ldr	d2, [x4, #8]
    400175b0:	1e620823 	fmul	d3, d1, d2
    400175b4:	fd405022 	ldr	d2, [x1, #160]
    400175b8:	1e633842 	fsub	d2, d2, d3
    400175bc:	fd005022 	str	d2, [x1, #160]
  r[0]   = r[0]   - coeff*r[1];
    400175c0:	fd400442 	ldr	d2, [x2, #8]
    400175c4:	1e620821 	fmul	d1, d1, d2
    400175c8:	fd400042 	ldr	d2, [x2]
    400175cc:	1e613841 	fsub	d1, d2, d1
    400175d0:	fd000041 	str	d1, [x2]

  coeff = lhs[1][2];
  lhs[2][2]= lhs[2][2] - coeff*lhs[2][1];
    400175d4:	fd400522 	ldr	d2, [x9, #8]
  coeff = lhs[1][2];
    400175d8:	fd400941 	ldr	d1, [x10, #16]
  lhs[2][2]= lhs[2][2] - coeff*lhs[2][1];
    400175dc:	1e620823 	fmul	d3, d1, d2
    400175e0:	fd400922 	ldr	d2, [x9, #16]
    400175e4:	1e633842 	fsub	d2, d2, d3
    400175e8:	fd000922 	str	d2, [x9, #16]
  lhs[3][2]= lhs[3][2] - coeff*lhs[3][1];
    400175ec:	fd400502 	ldr	d2, [x8, #8]
    400175f0:	1e620823 	fmul	d3, d1, d2
    400175f4:	fd400902 	ldr	d2, [x8, #16]
    400175f8:	1e633842 	fsub	d2, d2, d3
    400175fc:	fd000902 	str	d2, [x8, #16]
  lhs[4][2]= lhs[4][2] - coeff*lhs[4][1];
    40017600:	fd4004e2 	ldr	d2, [x7, #8]
    40017604:	1e620823 	fmul	d3, d1, d2
    40017608:	fd4008e2 	ldr	d2, [x7, #16]
    4001760c:	1e633842 	fsub	d2, d2, d3
    40017610:	fd0008e2 	str	d2, [x7, #16]
  c[0][2] = c[0][2] - coeff*c[0][1];
    40017614:	fd400422 	ldr	d2, [x1, #8]
    40017618:	1e620823 	fmul	d3, d1, d2
    4001761c:	fd400822 	ldr	d2, [x1, #16]
    40017620:	1e633842 	fsub	d2, d2, d3
    40017624:	fd000822 	str	d2, [x1, #16]
  c[1][2] = c[1][2] - coeff*c[1][1];
    40017628:	fd400462 	ldr	d2, [x3, #8]
    4001762c:	1e620823 	fmul	d3, d1, d2
    40017630:	fd400862 	ldr	d2, [x3, #16]
    40017634:	1e633842 	fsub	d2, d2, d3
    40017638:	fd000862 	str	d2, [x3, #16]
  c[2][2] = c[2][2] - coeff*c[2][1];
    4001763c:	fd4004c2 	ldr	d2, [x6, #8]
    40017640:	1e620823 	fmul	d3, d1, d2
    40017644:	fd4008c2 	ldr	d2, [x6, #16]
    40017648:	1e633842 	fsub	d2, d2, d3
    4001764c:	fd0008c2 	str	d2, [x6, #16]
  c[3][2] = c[3][2] - coeff*c[3][1];
    40017650:	fd4004a2 	ldr	d2, [x5, #8]
    40017654:	1e620823 	fmul	d3, d1, d2
    40017658:	fd4008a2 	ldr	d2, [x5, #16]
    4001765c:	1e633842 	fsub	d2, d2, d3
    40017660:	fd0008a2 	str	d2, [x5, #16]
  c[4][2] = c[4][2] - coeff*c[4][1];
    40017664:	fd400482 	ldr	d2, [x4, #8]
    40017668:	1e620823 	fmul	d3, d1, d2
    4001766c:	fd400882 	ldr	d2, [x4, #16]
    40017670:	1e633842 	fsub	d2, d2, d3
    40017674:	fd000882 	str	d2, [x4, #16]
  r[2]   = r[2]   - coeff*r[1];
    40017678:	fd400442 	ldr	d2, [x2, #8]
    4001767c:	1e620821 	fmul	d1, d1, d2
    40017680:	fd400842 	ldr	d2, [x2, #16]
    40017684:	1e613841 	fsub	d1, d2, d1
    40017688:	fd000841 	str	d1, [x2, #16]

  coeff = lhs[1][3];
  lhs[2][3]= lhs[2][3] - coeff*lhs[2][1];
    4001768c:	fd400522 	ldr	d2, [x9, #8]
  coeff = lhs[1][3];
    40017690:	fd400d41 	ldr	d1, [x10, #24]
  lhs[2][3]= lhs[2][3] - coeff*lhs[2][1];
    40017694:	1e620823 	fmul	d3, d1, d2
    40017698:	fd400d22 	ldr	d2, [x9, #24]
    4001769c:	1e633842 	fsub	d2, d2, d3
    400176a0:	fd000d22 	str	d2, [x9, #24]
  lhs[3][3]= lhs[3][3] - coeff*lhs[3][1];
    400176a4:	fd400502 	ldr	d2, [x8, #8]
    400176a8:	1e620823 	fmul	d3, d1, d2
    400176ac:	fd400d02 	ldr	d2, [x8, #24]
    400176b0:	1e633842 	fsub	d2, d2, d3
    400176b4:	fd000d02 	str	d2, [x8, #24]
  lhs[4][3]= lhs[4][3] - coeff*lhs[4][1];
    400176b8:	fd4004e2 	ldr	d2, [x7, #8]
    400176bc:	1e620823 	fmul	d3, d1, d2
    400176c0:	fd400ce2 	ldr	d2, [x7, #24]
    400176c4:	1e633842 	fsub	d2, d2, d3
    400176c8:	fd000ce2 	str	d2, [x7, #24]
  c[0][3] = c[0][3] - coeff*c[0][1];
    400176cc:	fd400422 	ldr	d2, [x1, #8]
    400176d0:	1e620823 	fmul	d3, d1, d2
    400176d4:	fd400c22 	ldr	d2, [x1, #24]
    400176d8:	1e633842 	fsub	d2, d2, d3
    400176dc:	fd000c22 	str	d2, [x1, #24]
  c[1][3] = c[1][3] - coeff*c[1][1];
    400176e0:	fd400462 	ldr	d2, [x3, #8]
    400176e4:	1e620823 	fmul	d3, d1, d2
    400176e8:	fd400c62 	ldr	d2, [x3, #24]
    400176ec:	1e633842 	fsub	d2, d2, d3
    400176f0:	fd000c62 	str	d2, [x3, #24]
  c[2][3] = c[2][3] - coeff*c[2][1];
    400176f4:	fd4004c2 	ldr	d2, [x6, #8]
    400176f8:	1e620823 	fmul	d3, d1, d2
    400176fc:	fd400cc2 	ldr	d2, [x6, #24]
    40017700:	1e633842 	fsub	d2, d2, d3
    40017704:	fd000cc2 	str	d2, [x6, #24]
  c[3][3] = c[3][3] - coeff*c[3][1];
    40017708:	fd4004a2 	ldr	d2, [x5, #8]
    4001770c:	1e620823 	fmul	d3, d1, d2
    40017710:	fd400ca2 	ldr	d2, [x5, #24]
    40017714:	1e633842 	fsub	d2, d2, d3
    40017718:	fd000ca2 	str	d2, [x5, #24]
  c[4][3] = c[4][3] - coeff*c[4][1];
    4001771c:	fd400482 	ldr	d2, [x4, #8]
    40017720:	1e620823 	fmul	d3, d1, d2
    40017724:	fd400c82 	ldr	d2, [x4, #24]
    40017728:	1e633842 	fsub	d2, d2, d3
    4001772c:	fd000c82 	str	d2, [x4, #24]
  r[3]   = r[3]   - coeff*r[1];
    40017730:	fd400442 	ldr	d2, [x2, #8]
    40017734:	1e620821 	fmul	d1, d1, d2
    40017738:	fd400c42 	ldr	d2, [x2, #24]
    4001773c:	1e613841 	fsub	d1, d2, d1
    40017740:	fd000c41 	str	d1, [x2, #24]

  coeff = lhs[1][4];
  lhs[2][4]= lhs[2][4] - coeff*lhs[2][1];
    40017744:	fd400522 	ldr	d2, [x9, #8]
  coeff = lhs[1][4];
    40017748:	fd401141 	ldr	d1, [x10, #32]
  lhs[2][4]= lhs[2][4] - coeff*lhs[2][1];
    4001774c:	1e620823 	fmul	d3, d1, d2
    40017750:	fd401122 	ldr	d2, [x9, #32]
    40017754:	1e633842 	fsub	d2, d2, d3
    40017758:	fd001122 	str	d2, [x9, #32]
  lhs[3][4]= lhs[3][4] - coeff*lhs[3][1];
    4001775c:	fd400502 	ldr	d2, [x8, #8]
    40017760:	1e620823 	fmul	d3, d1, d2
    40017764:	fd401102 	ldr	d2, [x8, #32]
    40017768:	1e633842 	fsub	d2, d2, d3
    4001776c:	fd001102 	str	d2, [x8, #32]
  lhs[4][4]= lhs[4][4] - coeff*lhs[4][1];
    40017770:	fd4004e2 	ldr	d2, [x7, #8]
    40017774:	1e620823 	fmul	d3, d1, d2
    40017778:	fd4010e2 	ldr	d2, [x7, #32]
    4001777c:	1e633842 	fsub	d2, d2, d3
    40017780:	fd0010e2 	str	d2, [x7, #32]
  c[0][4] = c[0][4] - coeff*c[0][1];
    40017784:	fd400422 	ldr	d2, [x1, #8]
    40017788:	1e620823 	fmul	d3, d1, d2
    4001778c:	fd401022 	ldr	d2, [x1, #32]
    40017790:	1e633842 	fsub	d2, d2, d3
    40017794:	fd001022 	str	d2, [x1, #32]
  c[1][4] = c[1][4] - coeff*c[1][1];
    40017798:	fd400462 	ldr	d2, [x3, #8]
    4001779c:	1e620823 	fmul	d3, d1, d2
    400177a0:	fd401062 	ldr	d2, [x3, #32]
    400177a4:	1e633842 	fsub	d2, d2, d3
    400177a8:	fd001062 	str	d2, [x3, #32]
  c[2][4] = c[2][4] - coeff*c[2][1];
    400177ac:	fd4004c2 	ldr	d2, [x6, #8]
    400177b0:	1e620823 	fmul	d3, d1, d2
    400177b4:	fd4010c2 	ldr	d2, [x6, #32]
    400177b8:	1e633842 	fsub	d2, d2, d3
    400177bc:	fd0010c2 	str	d2, [x6, #32]
  c[3][4] = c[3][4] - coeff*c[3][1];
    400177c0:	fd4004a2 	ldr	d2, [x5, #8]
    400177c4:	1e620823 	fmul	d3, d1, d2
    400177c8:	fd4010a2 	ldr	d2, [x5, #32]
    400177cc:	1e633842 	fsub	d2, d2, d3
    400177d0:	fd0010a2 	str	d2, [x5, #32]
  c[4][4] = c[4][4] - coeff*c[4][1];
    400177d4:	fd400482 	ldr	d2, [x4, #8]
    400177d8:	1e620823 	fmul	d3, d1, d2
    400177dc:	fd401082 	ldr	d2, [x4, #32]
    400177e0:	1e633842 	fsub	d2, d2, d3
    400177e4:	fd001082 	str	d2, [x4, #32]
  r[4]   = r[4]   - coeff*r[1];
    400177e8:	fd400442 	ldr	d2, [x2, #8]
    400177ec:	1e620821 	fmul	d1, d1, d2
    400177f0:	fd401042 	ldr	d2, [x2, #32]
    400177f4:	1e613841 	fsub	d1, d2, d1
    400177f8:	fd001041 	str	d1, [x2, #32]


  pivot = 1.00/lhs[2][2];
    400177fc:	fd400921 	ldr	d1, [x9, #16]
  lhs[3][2] = lhs[3][2]*pivot;
    40017800:	fd400902 	ldr	d2, [x8, #16]
  pivot = 1.00/lhs[2][2];
    40017804:	1e611801 	fdiv	d1, d0, d1
  lhs[3][2] = lhs[3][2]*pivot;
    40017808:	1e610842 	fmul	d2, d2, d1
    4001780c:	fd000902 	str	d2, [x8, #16]
  lhs[4][2] = lhs[4][2]*pivot;
    40017810:	fd4008e2 	ldr	d2, [x7, #16]
    40017814:	1e610842 	fmul	d2, d2, d1
    40017818:	fd0008e2 	str	d2, [x7, #16]
  c[0][2] = c[0][2]*pivot;
    4001781c:	fd400822 	ldr	d2, [x1, #16]
    40017820:	1e610842 	fmul	d2, d2, d1
    40017824:	fd000822 	str	d2, [x1, #16]
  c[1][2] = c[1][2]*pivot;
    40017828:	fd400862 	ldr	d2, [x3, #16]
    4001782c:	1e610842 	fmul	d2, d2, d1
    40017830:	fd000862 	str	d2, [x3, #16]
  c[2][2] = c[2][2]*pivot;
    40017834:	fd4008c2 	ldr	d2, [x6, #16]
    40017838:	1e610842 	fmul	d2, d2, d1
    4001783c:	fd0008c2 	str	d2, [x6, #16]
  c[3][2] = c[3][2]*pivot;
    40017840:	fd4008a2 	ldr	d2, [x5, #16]
    40017844:	1e610842 	fmul	d2, d2, d1
    40017848:	fd0008a2 	str	d2, [x5, #16]
  c[4][2] = c[4][2]*pivot;
    4001784c:	fd400882 	ldr	d2, [x4, #16]
    40017850:	1e610842 	fmul	d2, d2, d1
    40017854:	fd000882 	str	d2, [x4, #16]
  r[2]   = r[2]  *pivot;
    40017858:	fd400842 	ldr	d2, [x2, #16]
    4001785c:	1e610841 	fmul	d1, d2, d1
    40017860:	fd000841 	str	d1, [x2, #16]

  coeff = lhs[2][0];
  lhs[3][0]= lhs[3][0] - coeff*lhs[3][2];
    40017864:	fd400902 	ldr	d2, [x8, #16]
  coeff = lhs[2][0];
    40017868:	fd402801 	ldr	d1, [x0, #80]
  lhs[3][0]= lhs[3][0] - coeff*lhs[3][2];
    4001786c:	1e620823 	fmul	d3, d1, d2
    40017870:	fd403c02 	ldr	d2, [x0, #120]
    40017874:	1e633842 	fsub	d2, d2, d3
    40017878:	fd003c02 	str	d2, [x0, #120]
  lhs[4][0]= lhs[4][0] - coeff*lhs[4][2];
    4001787c:	fd4008e2 	ldr	d2, [x7, #16]
    40017880:	1e620823 	fmul	d3, d1, d2
    40017884:	fd405002 	ldr	d2, [x0, #160]
    40017888:	1e633842 	fsub	d2, d2, d3
    4001788c:	fd005002 	str	d2, [x0, #160]
  c[0][0] = c[0][0] - coeff*c[0][2];
    40017890:	fd400822 	ldr	d2, [x1, #16]
    40017894:	1e620823 	fmul	d3, d1, d2
    40017898:	fd400022 	ldr	d2, [x1]
    4001789c:	1e633842 	fsub	d2, d2, d3
    400178a0:	fd000022 	str	d2, [x1]
  c[1][0] = c[1][0] - coeff*c[1][2];
    400178a4:	fd400862 	ldr	d2, [x3, #16]
    400178a8:	1e620823 	fmul	d3, d1, d2
    400178ac:	fd401422 	ldr	d2, [x1, #40]
    400178b0:	1e633842 	fsub	d2, d2, d3
    400178b4:	fd001422 	str	d2, [x1, #40]
  c[2][0] = c[2][0] - coeff*c[2][2];
    400178b8:	fd4008c2 	ldr	d2, [x6, #16]
    400178bc:	1e620823 	fmul	d3, d1, d2
    400178c0:	fd402822 	ldr	d2, [x1, #80]
    400178c4:	1e633842 	fsub	d2, d2, d3
    400178c8:	fd002822 	str	d2, [x1, #80]
  c[3][0] = c[3][0] - coeff*c[3][2];
    400178cc:	fd4008a2 	ldr	d2, [x5, #16]
    400178d0:	1e620823 	fmul	d3, d1, d2
    400178d4:	fd403c22 	ldr	d2, [x1, #120]
    400178d8:	1e633842 	fsub	d2, d2, d3
    400178dc:	fd003c22 	str	d2, [x1, #120]
  c[4][0] = c[4][0] - coeff*c[4][2];
    400178e0:	fd400882 	ldr	d2, [x4, #16]
    400178e4:	1e620823 	fmul	d3, d1, d2
    400178e8:	fd405022 	ldr	d2, [x1, #160]
    400178ec:	1e633842 	fsub	d2, d2, d3
    400178f0:	fd005022 	str	d2, [x1, #160]
  r[0]   = r[0]   - coeff*r[2];
    400178f4:	fd400842 	ldr	d2, [x2, #16]
    400178f8:	1e620821 	fmul	d1, d1, d2
    400178fc:	fd400042 	ldr	d2, [x2]
    40017900:	1e613841 	fsub	d1, d2, d1
    40017904:	fd000041 	str	d1, [x2]

  coeff = lhs[2][1];
    40017908:	fd400521 	ldr	d1, [x9, #8]
  lhs[3][1]= lhs[3][1] - coeff*lhs[3][2];
    4001790c:	fd400902 	ldr	d2, [x8, #16]
    40017910:	1e620823 	fmul	d3, d1, d2
    40017914:	fd400502 	ldr	d2, [x8, #8]
    40017918:	1e633842 	fsub	d2, d2, d3
    4001791c:	fd000502 	str	d2, [x8, #8]
  lhs[4][1]= lhs[4][1] - coeff*lhs[4][2];
    40017920:	fd4008e2 	ldr	d2, [x7, #16]
    40017924:	1e620823 	fmul	d3, d1, d2
    40017928:	fd4004e2 	ldr	d2, [x7, #8]
    4001792c:	1e633842 	fsub	d2, d2, d3
    40017930:	fd0004e2 	str	d2, [x7, #8]
  c[0][1] = c[0][1] - coeff*c[0][2];
    40017934:	fd400822 	ldr	d2, [x1, #16]
    40017938:	1e620823 	fmul	d3, d1, d2
    4001793c:	fd400422 	ldr	d2, [x1, #8]
    40017940:	1e633842 	fsub	d2, d2, d3
    40017944:	fd000422 	str	d2, [x1, #8]
  c[1][1] = c[1][1] - coeff*c[1][2];
    40017948:	fd400862 	ldr	d2, [x3, #16]
    4001794c:	1e620823 	fmul	d3, d1, d2
    40017950:	fd400462 	ldr	d2, [x3, #8]
    40017954:	1e633842 	fsub	d2, d2, d3
    40017958:	fd000462 	str	d2, [x3, #8]
  c[2][1] = c[2][1] - coeff*c[2][2];
    4001795c:	fd4008c2 	ldr	d2, [x6, #16]
    40017960:	1e620823 	fmul	d3, d1, d2
    40017964:	fd4004c2 	ldr	d2, [x6, #8]
    40017968:	1e633842 	fsub	d2, d2, d3
    4001796c:	fd0004c2 	str	d2, [x6, #8]
  c[3][1] = c[3][1] - coeff*c[3][2];
    40017970:	fd4008a2 	ldr	d2, [x5, #16]
    40017974:	1e620823 	fmul	d3, d1, d2
    40017978:	fd4004a2 	ldr	d2, [x5, #8]
    4001797c:	1e633842 	fsub	d2, d2, d3
    40017980:	fd0004a2 	str	d2, [x5, #8]
  c[4][1] = c[4][1] - coeff*c[4][2];
    40017984:	fd400882 	ldr	d2, [x4, #16]
    40017988:	1e620823 	fmul	d3, d1, d2
    4001798c:	fd400482 	ldr	d2, [x4, #8]
    40017990:	1e633842 	fsub	d2, d2, d3
    40017994:	fd000482 	str	d2, [x4, #8]
  r[1]   = r[1]   - coeff*r[2];
    40017998:	fd400842 	ldr	d2, [x2, #16]
    4001799c:	1e620821 	fmul	d1, d1, d2
    400179a0:	fd400442 	ldr	d2, [x2, #8]
    400179a4:	1e613841 	fsub	d1, d2, d1
    400179a8:	fd000441 	str	d1, [x2, #8]

  coeff = lhs[2][3];
  lhs[3][3]= lhs[3][3] - coeff*lhs[3][2];
    400179ac:	fd400902 	ldr	d2, [x8, #16]
  coeff = lhs[2][3];
    400179b0:	fd400d21 	ldr	d1, [x9, #24]
  lhs[3][3]= lhs[3][3] - coeff*lhs[3][2];
    400179b4:	1e620823 	fmul	d3, d1, d2
    400179b8:	fd400d02 	ldr	d2, [x8, #24]
    400179bc:	1e633842 	fsub	d2, d2, d3
    400179c0:	fd000d02 	str	d2, [x8, #24]
  lhs[4][3]= lhs[4][3] - coeff*lhs[4][2];
    400179c4:	fd4008e2 	ldr	d2, [x7, #16]
    400179c8:	1e620823 	fmul	d3, d1, d2
    400179cc:	fd400ce2 	ldr	d2, [x7, #24]
    400179d0:	1e633842 	fsub	d2, d2, d3
    400179d4:	fd000ce2 	str	d2, [x7, #24]
  c[0][3] = c[0][3] - coeff*c[0][2];
    400179d8:	fd400822 	ldr	d2, [x1, #16]
    400179dc:	1e620823 	fmul	d3, d1, d2
    400179e0:	fd400c22 	ldr	d2, [x1, #24]
    400179e4:	1e633842 	fsub	d2, d2, d3
    400179e8:	fd000c22 	str	d2, [x1, #24]
  c[1][3] = c[1][3] - coeff*c[1][2];
    400179ec:	fd400862 	ldr	d2, [x3, #16]
    400179f0:	1e620823 	fmul	d3, d1, d2
    400179f4:	fd400c62 	ldr	d2, [x3, #24]
    400179f8:	1e633842 	fsub	d2, d2, d3
    400179fc:	fd000c62 	str	d2, [x3, #24]
  c[2][3] = c[2][3] - coeff*c[2][2];
    40017a00:	fd4008c2 	ldr	d2, [x6, #16]
    40017a04:	1e620823 	fmul	d3, d1, d2
    40017a08:	fd400cc2 	ldr	d2, [x6, #24]
    40017a0c:	1e633842 	fsub	d2, d2, d3
    40017a10:	fd000cc2 	str	d2, [x6, #24]
  c[3][3] = c[3][3] - coeff*c[3][2];
    40017a14:	fd4008a2 	ldr	d2, [x5, #16]
    40017a18:	1e620823 	fmul	d3, d1, d2
    40017a1c:	fd400ca2 	ldr	d2, [x5, #24]
    40017a20:	1e633842 	fsub	d2, d2, d3
    40017a24:	fd000ca2 	str	d2, [x5, #24]
  c[4][3] = c[4][3] - coeff*c[4][2];
    40017a28:	fd400882 	ldr	d2, [x4, #16]
    40017a2c:	1e620823 	fmul	d3, d1, d2
    40017a30:	fd400c82 	ldr	d2, [x4, #24]
    40017a34:	1e633842 	fsub	d2, d2, d3
    40017a38:	fd000c82 	str	d2, [x4, #24]
  r[3]   = r[3]   - coeff*r[2];
    40017a3c:	fd400842 	ldr	d2, [x2, #16]
    40017a40:	1e620821 	fmul	d1, d1, d2
    40017a44:	fd400c42 	ldr	d2, [x2, #24]
    40017a48:	1e613841 	fsub	d1, d2, d1
    40017a4c:	fd000c41 	str	d1, [x2, #24]

  coeff = lhs[2][4];
  lhs[3][4]= lhs[3][4] - coeff*lhs[3][2];
    40017a50:	fd400902 	ldr	d2, [x8, #16]
  coeff = lhs[2][4];
    40017a54:	fd401121 	ldr	d1, [x9, #32]
  lhs[3][4]= lhs[3][4] - coeff*lhs[3][2];
    40017a58:	1e620823 	fmul	d3, d1, d2
    40017a5c:	fd401102 	ldr	d2, [x8, #32]
    40017a60:	1e633842 	fsub	d2, d2, d3
    40017a64:	fd001102 	str	d2, [x8, #32]
  lhs[4][4]= lhs[4][4] - coeff*lhs[4][2];
    40017a68:	fd4008e2 	ldr	d2, [x7, #16]
    40017a6c:	1e620823 	fmul	d3, d1, d2
    40017a70:	fd4010e2 	ldr	d2, [x7, #32]
    40017a74:	1e633842 	fsub	d2, d2, d3
    40017a78:	fd0010e2 	str	d2, [x7, #32]
  c[0][4] = c[0][4] - coeff*c[0][2];
    40017a7c:	fd400822 	ldr	d2, [x1, #16]
    40017a80:	1e620823 	fmul	d3, d1, d2
    40017a84:	fd401022 	ldr	d2, [x1, #32]
    40017a88:	1e633842 	fsub	d2, d2, d3
    40017a8c:	fd001022 	str	d2, [x1, #32]
  c[1][4] = c[1][4] - coeff*c[1][2];
    40017a90:	fd400862 	ldr	d2, [x3, #16]
    40017a94:	1e620823 	fmul	d3, d1, d2
    40017a98:	fd401062 	ldr	d2, [x3, #32]
    40017a9c:	1e633842 	fsub	d2, d2, d3
    40017aa0:	fd001062 	str	d2, [x3, #32]
  c[2][4] = c[2][4] - coeff*c[2][2];
    40017aa4:	fd4008c2 	ldr	d2, [x6, #16]
    40017aa8:	1e620823 	fmul	d3, d1, d2
    40017aac:	fd4010c2 	ldr	d2, [x6, #32]
    40017ab0:	1e633842 	fsub	d2, d2, d3
    40017ab4:	fd0010c2 	str	d2, [x6, #32]
  c[3][4] = c[3][4] - coeff*c[3][2];
    40017ab8:	fd4008a2 	ldr	d2, [x5, #16]
    40017abc:	1e620823 	fmul	d3, d1, d2
    40017ac0:	fd4010a2 	ldr	d2, [x5, #32]
    40017ac4:	1e633842 	fsub	d2, d2, d3
    40017ac8:	fd0010a2 	str	d2, [x5, #32]
  c[4][4] = c[4][4] - coeff*c[4][2];
    40017acc:	fd400882 	ldr	d2, [x4, #16]
    40017ad0:	1e620823 	fmul	d3, d1, d2
    40017ad4:	fd401082 	ldr	d2, [x4, #32]
    40017ad8:	1e633842 	fsub	d2, d2, d3
    40017adc:	fd001082 	str	d2, [x4, #32]
  r[4]   = r[4]   - coeff*r[2];
    40017ae0:	fd400842 	ldr	d2, [x2, #16]
    40017ae4:	1e620821 	fmul	d1, d1, d2
    40017ae8:	fd401042 	ldr	d2, [x2, #32]
    40017aec:	1e613841 	fsub	d1, d2, d1
    40017af0:	fd001041 	str	d1, [x2, #32]


  pivot = 1.00/lhs[3][3];
    40017af4:	fd400d01 	ldr	d1, [x8, #24]
  lhs[4][3] = lhs[4][3]*pivot;
    40017af8:	fd400ce2 	ldr	d2, [x7, #24]
  pivot = 1.00/lhs[3][3];
    40017afc:	1e611801 	fdiv	d1, d0, d1
  lhs[4][3] = lhs[4][3]*pivot;
    40017b00:	1e610842 	fmul	d2, d2, d1
    40017b04:	fd000ce2 	str	d2, [x7, #24]
  c[0][3] = c[0][3]*pivot;
    40017b08:	fd400c22 	ldr	d2, [x1, #24]
    40017b0c:	1e610842 	fmul	d2, d2, d1
    40017b10:	fd000c22 	str	d2, [x1, #24]
  c[1][3] = c[1][3]*pivot;
    40017b14:	fd400c62 	ldr	d2, [x3, #24]
    40017b18:	1e610842 	fmul	d2, d2, d1
    40017b1c:	fd000c62 	str	d2, [x3, #24]
  c[2][3] = c[2][3]*pivot;
    40017b20:	fd400cc2 	ldr	d2, [x6, #24]
    40017b24:	1e610842 	fmul	d2, d2, d1
    40017b28:	fd000cc2 	str	d2, [x6, #24]
  c[3][3] = c[3][3]*pivot;
    40017b2c:	fd400ca2 	ldr	d2, [x5, #24]
    40017b30:	1e610842 	fmul	d2, d2, d1
    40017b34:	fd000ca2 	str	d2, [x5, #24]
  c[4][3] = c[4][3]*pivot;
    40017b38:	fd400c82 	ldr	d2, [x4, #24]
    40017b3c:	1e610842 	fmul	d2, d2, d1
    40017b40:	fd000c82 	str	d2, [x4, #24]
  r[3]   = r[3]  *pivot;
    40017b44:	fd400c42 	ldr	d2, [x2, #24]
    40017b48:	1e610841 	fmul	d1, d2, d1
    40017b4c:	fd000c41 	str	d1, [x2, #24]

  coeff = lhs[3][0];
  lhs[4][0]= lhs[4][0] - coeff*lhs[4][3];
    40017b50:	fd400ce2 	ldr	d2, [x7, #24]
  coeff = lhs[3][0];
    40017b54:	fd403c01 	ldr	d1, [x0, #120]
  lhs[4][0]= lhs[4][0] - coeff*lhs[4][3];
    40017b58:	1e620823 	fmul	d3, d1, d2
    40017b5c:	fd405002 	ldr	d2, [x0, #160]
    40017b60:	1e633842 	fsub	d2, d2, d3
    40017b64:	fd005002 	str	d2, [x0, #160]
  c[0][0] = c[0][0] - coeff*c[0][3];
    40017b68:	fd400c22 	ldr	d2, [x1, #24]
    40017b6c:	1e620823 	fmul	d3, d1, d2
    40017b70:	fd400022 	ldr	d2, [x1]
    40017b74:	1e633842 	fsub	d2, d2, d3
    40017b78:	fd000022 	str	d2, [x1]
  c[1][0] = c[1][0] - coeff*c[1][3];
    40017b7c:	fd400c62 	ldr	d2, [x3, #24]
    40017b80:	1e620823 	fmul	d3, d1, d2
    40017b84:	fd401422 	ldr	d2, [x1, #40]
    40017b88:	1e633842 	fsub	d2, d2, d3
    40017b8c:	fd001422 	str	d2, [x1, #40]
  c[2][0] = c[2][0] - coeff*c[2][3];
    40017b90:	fd400cc2 	ldr	d2, [x6, #24]
    40017b94:	1e620823 	fmul	d3, d1, d2
    40017b98:	fd402822 	ldr	d2, [x1, #80]
    40017b9c:	1e633842 	fsub	d2, d2, d3
    40017ba0:	fd002822 	str	d2, [x1, #80]
  c[3][0] = c[3][0] - coeff*c[3][3];
    40017ba4:	fd400ca2 	ldr	d2, [x5, #24]
    40017ba8:	1e620823 	fmul	d3, d1, d2
    40017bac:	fd403c22 	ldr	d2, [x1, #120]
    40017bb0:	1e633842 	fsub	d2, d2, d3
    40017bb4:	fd003c22 	str	d2, [x1, #120]
  c[4][0] = c[4][0] - coeff*c[4][3];
    40017bb8:	fd400c82 	ldr	d2, [x4, #24]
    40017bbc:	1e620823 	fmul	d3, d1, d2
    40017bc0:	fd405022 	ldr	d2, [x1, #160]
    40017bc4:	1e633842 	fsub	d2, d2, d3
    40017bc8:	fd005022 	str	d2, [x1, #160]
  r[0]   = r[0]   - coeff*r[3];
    40017bcc:	fd400c42 	ldr	d2, [x2, #24]
    40017bd0:	1e620821 	fmul	d1, d1, d2
    40017bd4:	fd400042 	ldr	d2, [x2]
    40017bd8:	1e613841 	fsub	d1, d2, d1
    40017bdc:	fd000041 	str	d1, [x2]

  coeff = lhs[3][1];
    40017be0:	fd400501 	ldr	d1, [x8, #8]
  lhs[4][1]= lhs[4][1] - coeff*lhs[4][3];
    40017be4:	fd400ce2 	ldr	d2, [x7, #24]
    40017be8:	1e620823 	fmul	d3, d1, d2
    40017bec:	fd4004e2 	ldr	d2, [x7, #8]
    40017bf0:	1e633842 	fsub	d2, d2, d3
    40017bf4:	fd0004e2 	str	d2, [x7, #8]
  c[0][1] = c[0][1] - coeff*c[0][3];
    40017bf8:	fd400c22 	ldr	d2, [x1, #24]
    40017bfc:	1e620823 	fmul	d3, d1, d2
    40017c00:	fd400422 	ldr	d2, [x1, #8]
    40017c04:	1e633842 	fsub	d2, d2, d3
    40017c08:	fd000422 	str	d2, [x1, #8]
  c[1][1] = c[1][1] - coeff*c[1][3];
    40017c0c:	fd400c62 	ldr	d2, [x3, #24]
    40017c10:	1e620823 	fmul	d3, d1, d2
    40017c14:	fd400462 	ldr	d2, [x3, #8]
    40017c18:	1e633842 	fsub	d2, d2, d3
    40017c1c:	fd000462 	str	d2, [x3, #8]
  c[2][1] = c[2][1] - coeff*c[2][3];
    40017c20:	fd400cc2 	ldr	d2, [x6, #24]
    40017c24:	1e620823 	fmul	d3, d1, d2
    40017c28:	fd4004c2 	ldr	d2, [x6, #8]
    40017c2c:	1e633842 	fsub	d2, d2, d3
    40017c30:	fd0004c2 	str	d2, [x6, #8]
  c[3][1] = c[3][1] - coeff*c[3][3];
    40017c34:	fd400ca2 	ldr	d2, [x5, #24]
    40017c38:	1e620823 	fmul	d3, d1, d2
    40017c3c:	fd4004a2 	ldr	d2, [x5, #8]
    40017c40:	1e633842 	fsub	d2, d2, d3
    40017c44:	fd0004a2 	str	d2, [x5, #8]
  c[4][1] = c[4][1] - coeff*c[4][3];
    40017c48:	fd400c82 	ldr	d2, [x4, #24]
    40017c4c:	1e620823 	fmul	d3, d1, d2
    40017c50:	fd400482 	ldr	d2, [x4, #8]
    40017c54:	1e633842 	fsub	d2, d2, d3
    40017c58:	fd000482 	str	d2, [x4, #8]
  r[1]   = r[1]   - coeff*r[3];
    40017c5c:	fd400c42 	ldr	d2, [x2, #24]
    40017c60:	1e620821 	fmul	d1, d1, d2
    40017c64:	fd400442 	ldr	d2, [x2, #8]
    40017c68:	1e613841 	fsub	d1, d2, d1
    40017c6c:	fd000441 	str	d1, [x2, #8]

  coeff = lhs[3][2];
    40017c70:	fd400901 	ldr	d1, [x8, #16]
  lhs[4][2]= lhs[4][2] - coeff*lhs[4][3];
    40017c74:	fd400ce2 	ldr	d2, [x7, #24]
    40017c78:	1e620823 	fmul	d3, d1, d2
    40017c7c:	fd4008e2 	ldr	d2, [x7, #16]
    40017c80:	1e633842 	fsub	d2, d2, d3
    40017c84:	fd0008e2 	str	d2, [x7, #16]
  c[0][2] = c[0][2] - coeff*c[0][3];
    40017c88:	fd400c22 	ldr	d2, [x1, #24]
    40017c8c:	1e620823 	fmul	d3, d1, d2
    40017c90:	fd400822 	ldr	d2, [x1, #16]
    40017c94:	1e633842 	fsub	d2, d2, d3
    40017c98:	fd000822 	str	d2, [x1, #16]
  c[1][2] = c[1][2] - coeff*c[1][3];
    40017c9c:	fd400c62 	ldr	d2, [x3, #24]
    40017ca0:	1e620823 	fmul	d3, d1, d2
    40017ca4:	fd400862 	ldr	d2, [x3, #16]
    40017ca8:	1e633842 	fsub	d2, d2, d3
    40017cac:	fd000862 	str	d2, [x3, #16]
  c[2][2] = c[2][2] - coeff*c[2][3];
    40017cb0:	fd400cc2 	ldr	d2, [x6, #24]
    40017cb4:	1e620823 	fmul	d3, d1, d2
    40017cb8:	fd4008c2 	ldr	d2, [x6, #16]
    40017cbc:	1e633842 	fsub	d2, d2, d3
    40017cc0:	fd0008c2 	str	d2, [x6, #16]
  c[3][2] = c[3][2] - coeff*c[3][3];
    40017cc4:	fd400ca2 	ldr	d2, [x5, #24]
    40017cc8:	1e620823 	fmul	d3, d1, d2
    40017ccc:	fd4008a2 	ldr	d2, [x5, #16]
    40017cd0:	1e633842 	fsub	d2, d2, d3
    40017cd4:	fd0008a2 	str	d2, [x5, #16]
  c[4][2] = c[4][2] - coeff*c[4][3];
    40017cd8:	fd400c82 	ldr	d2, [x4, #24]
    40017cdc:	1e620823 	fmul	d3, d1, d2
    40017ce0:	fd400882 	ldr	d2, [x4, #16]
    40017ce4:	1e633842 	fsub	d2, d2, d3
    40017ce8:	fd000882 	str	d2, [x4, #16]
  r[2]   = r[2]   - coeff*r[3];
    40017cec:	fd400c42 	ldr	d2, [x2, #24]
    40017cf0:	1e620821 	fmul	d1, d1, d2
    40017cf4:	fd400842 	ldr	d2, [x2, #16]
    40017cf8:	1e613841 	fsub	d1, d2, d1
    40017cfc:	fd000841 	str	d1, [x2, #16]

  coeff = lhs[3][4];
  lhs[4][4]= lhs[4][4] - coeff*lhs[4][3];
    40017d00:	fd400ce2 	ldr	d2, [x7, #24]
  coeff = lhs[3][4];
    40017d04:	fd401101 	ldr	d1, [x8, #32]
  lhs[4][4]= lhs[4][4] - coeff*lhs[4][3];
    40017d08:	1e620823 	fmul	d3, d1, d2
    40017d0c:	fd4010e2 	ldr	d2, [x7, #32]
    40017d10:	1e633842 	fsub	d2, d2, d3
    40017d14:	fd0010e2 	str	d2, [x7, #32]
  c[0][4] = c[0][4] - coeff*c[0][3];
    40017d18:	fd400c22 	ldr	d2, [x1, #24]
    40017d1c:	1e620823 	fmul	d3, d1, d2
    40017d20:	fd401022 	ldr	d2, [x1, #32]
    40017d24:	1e633842 	fsub	d2, d2, d3
    40017d28:	fd001022 	str	d2, [x1, #32]
  c[1][4] = c[1][4] - coeff*c[1][3];
    40017d2c:	fd400c62 	ldr	d2, [x3, #24]
    40017d30:	1e620823 	fmul	d3, d1, d2
    40017d34:	fd401062 	ldr	d2, [x3, #32]
    40017d38:	1e633842 	fsub	d2, d2, d3
    40017d3c:	fd001062 	str	d2, [x3, #32]
  c[2][4] = c[2][4] - coeff*c[2][3];
    40017d40:	fd400cc2 	ldr	d2, [x6, #24]
    40017d44:	1e620823 	fmul	d3, d1, d2
    40017d48:	fd4010c2 	ldr	d2, [x6, #32]
    40017d4c:	1e633842 	fsub	d2, d2, d3
    40017d50:	fd0010c2 	str	d2, [x6, #32]
  c[3][4] = c[3][4] - coeff*c[3][3];
    40017d54:	fd400ca2 	ldr	d2, [x5, #24]
    40017d58:	1e620823 	fmul	d3, d1, d2
    40017d5c:	fd4010a2 	ldr	d2, [x5, #32]
    40017d60:	1e633842 	fsub	d2, d2, d3
    40017d64:	fd0010a2 	str	d2, [x5, #32]
  c[4][4] = c[4][4] - coeff*c[4][3];
    40017d68:	fd400c82 	ldr	d2, [x4, #24]
    40017d6c:	1e620823 	fmul	d3, d1, d2
    40017d70:	fd401082 	ldr	d2, [x4, #32]
    40017d74:	1e633842 	fsub	d2, d2, d3
    40017d78:	fd001082 	str	d2, [x4, #32]
  r[4]   = r[4]   - coeff*r[3];
    40017d7c:	fd400c42 	ldr	d2, [x2, #24]
    40017d80:	1e620821 	fmul	d1, d1, d2
    40017d84:	fd401042 	ldr	d2, [x2, #32]
    40017d88:	1e613841 	fsub	d1, d2, d1
    40017d8c:	fd001041 	str	d1, [x2, #32]


  pivot = 1.00/lhs[4][4];
    40017d90:	fd4010e1 	ldr	d1, [x7, #32]
    40017d94:	1e611800 	fdiv	d0, d0, d1
  c[0][4] = c[0][4]*pivot;
    40017d98:	fd401021 	ldr	d1, [x1, #32]
    40017d9c:	1e600821 	fmul	d1, d1, d0
    40017da0:	fd001021 	str	d1, [x1, #32]
  c[1][4] = c[1][4]*pivot;
    40017da4:	fd401061 	ldr	d1, [x3, #32]
    40017da8:	1e600821 	fmul	d1, d1, d0
    40017dac:	fd001061 	str	d1, [x3, #32]
  c[2][4] = c[2][4]*pivot;
    40017db0:	fd4010c1 	ldr	d1, [x6, #32]
    40017db4:	1e600821 	fmul	d1, d1, d0
    40017db8:	fd0010c1 	str	d1, [x6, #32]
  c[3][4] = c[3][4]*pivot;
    40017dbc:	fd4010a1 	ldr	d1, [x5, #32]
    40017dc0:	1e600821 	fmul	d1, d1, d0
    40017dc4:	fd0010a1 	str	d1, [x5, #32]
  c[4][4] = c[4][4]*pivot;
    40017dc8:	fd401081 	ldr	d1, [x4, #32]
    40017dcc:	1e600821 	fmul	d1, d1, d0
    40017dd0:	fd001081 	str	d1, [x4, #32]
  r[4]   = r[4]  *pivot;
    40017dd4:	fd401041 	ldr	d1, [x2, #32]
    40017dd8:	1e600820 	fmul	d0, d1, d0
    40017ddc:	fd001040 	str	d0, [x2, #32]

  coeff = lhs[4][0];
  c[0][0] = c[0][0] - coeff*c[0][4];
    40017de0:	fd401021 	ldr	d1, [x1, #32]
  coeff = lhs[4][0];
    40017de4:	fd405000 	ldr	d0, [x0, #160]
  c[0][0] = c[0][0] - coeff*c[0][4];
    40017de8:	1e610802 	fmul	d2, d0, d1
    40017dec:	fd400021 	ldr	d1, [x1]
    40017df0:	1e623821 	fsub	d1, d1, d2
    40017df4:	fd000021 	str	d1, [x1]
  c[1][0] = c[1][0] - coeff*c[1][4];
    40017df8:	fd401061 	ldr	d1, [x3, #32]
    40017dfc:	1e610802 	fmul	d2, d0, d1
    40017e00:	fd401421 	ldr	d1, [x1, #40]
    40017e04:	1e623821 	fsub	d1, d1, d2
    40017e08:	fd001421 	str	d1, [x1, #40]
  c[2][0] = c[2][0] - coeff*c[2][4];
    40017e0c:	fd4010c1 	ldr	d1, [x6, #32]
    40017e10:	1e610802 	fmul	d2, d0, d1
    40017e14:	fd402821 	ldr	d1, [x1, #80]
    40017e18:	1e623821 	fsub	d1, d1, d2
    40017e1c:	fd002821 	str	d1, [x1, #80]
  c[3][0] = c[3][0] - coeff*c[3][4];
    40017e20:	fd4010a1 	ldr	d1, [x5, #32]
    40017e24:	1e610802 	fmul	d2, d0, d1
    40017e28:	fd403c21 	ldr	d1, [x1, #120]
    40017e2c:	1e623821 	fsub	d1, d1, d2
    40017e30:	fd003c21 	str	d1, [x1, #120]
  c[4][0] = c[4][0] - coeff*c[4][4];
    40017e34:	fd401081 	ldr	d1, [x4, #32]
    40017e38:	1e610802 	fmul	d2, d0, d1
    40017e3c:	fd405021 	ldr	d1, [x1, #160]
    40017e40:	1e623821 	fsub	d1, d1, d2
    40017e44:	fd005021 	str	d1, [x1, #160]
  r[0]   = r[0]   - coeff*r[4];
    40017e48:	fd401041 	ldr	d1, [x2, #32]
    40017e4c:	1e610800 	fmul	d0, d0, d1
    40017e50:	fd400041 	ldr	d1, [x2]
    40017e54:	1e603820 	fsub	d0, d1, d0
    40017e58:	fd000040 	str	d0, [x2]

  coeff = lhs[4][1];
    40017e5c:	fd4004e0 	ldr	d0, [x7, #8]
  c[0][1] = c[0][1] - coeff*c[0][4];
    40017e60:	fd401021 	ldr	d1, [x1, #32]
    40017e64:	1e610802 	fmul	d2, d0, d1
    40017e68:	fd400421 	ldr	d1, [x1, #8]
    40017e6c:	1e623821 	fsub	d1, d1, d2
    40017e70:	fd000421 	str	d1, [x1, #8]
  c[1][1] = c[1][1] - coeff*c[1][4];
    40017e74:	fd401061 	ldr	d1, [x3, #32]
    40017e78:	1e610802 	fmul	d2, d0, d1
    40017e7c:	fd400461 	ldr	d1, [x3, #8]
    40017e80:	1e623821 	fsub	d1, d1, d2
    40017e84:	fd000461 	str	d1, [x3, #8]
  c[2][1] = c[2][1] - coeff*c[2][4];
    40017e88:	fd4010c1 	ldr	d1, [x6, #32]
    40017e8c:	1e610802 	fmul	d2, d0, d1
    40017e90:	fd4004c1 	ldr	d1, [x6, #8]
    40017e94:	1e623821 	fsub	d1, d1, d2
    40017e98:	fd0004c1 	str	d1, [x6, #8]
  c[3][1] = c[3][1] - coeff*c[3][4];
    40017e9c:	fd4010a1 	ldr	d1, [x5, #32]
    40017ea0:	1e610802 	fmul	d2, d0, d1
    40017ea4:	fd4004a1 	ldr	d1, [x5, #8]
    40017ea8:	1e623821 	fsub	d1, d1, d2
    40017eac:	fd0004a1 	str	d1, [x5, #8]
  c[4][1] = c[4][1] - coeff*c[4][4];
    40017eb0:	fd401081 	ldr	d1, [x4, #32]
    40017eb4:	1e610802 	fmul	d2, d0, d1
    40017eb8:	fd400481 	ldr	d1, [x4, #8]
    40017ebc:	1e623821 	fsub	d1, d1, d2
    40017ec0:	fd000481 	str	d1, [x4, #8]
  r[1]   = r[1]   - coeff*r[4];
    40017ec4:	fd401041 	ldr	d1, [x2, #32]
    40017ec8:	1e610800 	fmul	d0, d0, d1
    40017ecc:	fd400441 	ldr	d1, [x2, #8]
    40017ed0:	1e603820 	fsub	d0, d1, d0
    40017ed4:	fd000440 	str	d0, [x2, #8]

  coeff = lhs[4][2];
    40017ed8:	fd4008e0 	ldr	d0, [x7, #16]
  c[0][2] = c[0][2] - coeff*c[0][4];
    40017edc:	fd401021 	ldr	d1, [x1, #32]
    40017ee0:	1e610802 	fmul	d2, d0, d1
    40017ee4:	fd400821 	ldr	d1, [x1, #16]
    40017ee8:	1e623821 	fsub	d1, d1, d2
    40017eec:	fd000821 	str	d1, [x1, #16]
  c[1][2] = c[1][2] - coeff*c[1][4];
    40017ef0:	fd401061 	ldr	d1, [x3, #32]
    40017ef4:	1e610802 	fmul	d2, d0, d1
    40017ef8:	fd400861 	ldr	d1, [x3, #16]
    40017efc:	1e623821 	fsub	d1, d1, d2
    40017f00:	fd000861 	str	d1, [x3, #16]
  c[2][2] = c[2][2] - coeff*c[2][4];
    40017f04:	fd4010c1 	ldr	d1, [x6, #32]
    40017f08:	1e610802 	fmul	d2, d0, d1
    40017f0c:	fd4008c1 	ldr	d1, [x6, #16]
    40017f10:	1e623821 	fsub	d1, d1, d2
    40017f14:	fd0008c1 	str	d1, [x6, #16]
  c[3][2] = c[3][2] - coeff*c[3][4];
    40017f18:	fd4010a1 	ldr	d1, [x5, #32]
    40017f1c:	1e610802 	fmul	d2, d0, d1
    40017f20:	fd4008a1 	ldr	d1, [x5, #16]
    40017f24:	1e623821 	fsub	d1, d1, d2
    40017f28:	fd0008a1 	str	d1, [x5, #16]
  c[4][2] = c[4][2] - coeff*c[4][4];
    40017f2c:	fd401081 	ldr	d1, [x4, #32]
    40017f30:	1e610802 	fmul	d2, d0, d1
    40017f34:	fd400881 	ldr	d1, [x4, #16]
    40017f38:	1e623821 	fsub	d1, d1, d2
    40017f3c:	fd000881 	str	d1, [x4, #16]
  r[2]   = r[2]   - coeff*r[4];
    40017f40:	fd401041 	ldr	d1, [x2, #32]
    40017f44:	1e610800 	fmul	d0, d0, d1
    40017f48:	fd400841 	ldr	d1, [x2, #16]
    40017f4c:	1e603820 	fsub	d0, d1, d0
    40017f50:	fd000840 	str	d0, [x2, #16]

  coeff = lhs[4][3];
    40017f54:	fd400ce0 	ldr	d0, [x7, #24]
  c[0][3] = c[0][3] - coeff*c[0][4];
    40017f58:	fd401021 	ldr	d1, [x1, #32]
    40017f5c:	1e610802 	fmul	d2, d0, d1
    40017f60:	fd400c21 	ldr	d1, [x1, #24]
    40017f64:	1e623821 	fsub	d1, d1, d2
    40017f68:	fd000c21 	str	d1, [x1, #24]
  c[1][3] = c[1][3] - coeff*c[1][4];
    40017f6c:	fd401061 	ldr	d1, [x3, #32]
    40017f70:	1e610802 	fmul	d2, d0, d1
    40017f74:	fd400c61 	ldr	d1, [x3, #24]
    40017f78:	1e623821 	fsub	d1, d1, d2
    40017f7c:	fd000c61 	str	d1, [x3, #24]
  c[2][3] = c[2][3] - coeff*c[2][4];
    40017f80:	fd4010c1 	ldr	d1, [x6, #32]
    40017f84:	1e610802 	fmul	d2, d0, d1
    40017f88:	fd400cc1 	ldr	d1, [x6, #24]
    40017f8c:	1e623821 	fsub	d1, d1, d2
    40017f90:	fd000cc1 	str	d1, [x6, #24]
  c[3][3] = c[3][3] - coeff*c[3][4];
    40017f94:	fd4010a1 	ldr	d1, [x5, #32]
    40017f98:	1e610802 	fmul	d2, d0, d1
    40017f9c:	fd400ca1 	ldr	d1, [x5, #24]
    40017fa0:	1e623821 	fsub	d1, d1, d2
    40017fa4:	fd000ca1 	str	d1, [x5, #24]
  c[4][3] = c[4][3] - coeff*c[4][4];
    40017fa8:	fd401081 	ldr	d1, [x4, #32]
    40017fac:	1e610802 	fmul	d2, d0, d1
    40017fb0:	fd400c81 	ldr	d1, [x4, #24]
    40017fb4:	1e623821 	fsub	d1, d1, d2
    40017fb8:	fd000c81 	str	d1, [x4, #24]
  r[3]   = r[3]   - coeff*r[4];
    40017fbc:	fd401041 	ldr	d1, [x2, #32]
    40017fc0:	1e610800 	fmul	d0, d0, d1
    40017fc4:	fd400c41 	ldr	d1, [x2, #24]
    40017fc8:	1e603820 	fsub	d0, d1, d0
    40017fcc:	fd000c40 	str	d0, [x2, #24]
}
    40017fd0:	d65f03c0 	ret

0000000040017fd4 <binvrhs>:

void binvrhs(double lhs[5][5], double r[5])
{
  double pivot, coeff;

  pivot = 1.00/lhs[0][0];
    40017fd4:	aa0003e5 	mov	x5, x0
    40017fd8:	1e6e1001 	fmov	d1, #1.000000000000000000e+00
  lhs[1][0] = lhs[1][0]*pivot;
    40017fdc:	fd401402 	ldr	d2, [x0, #40]
  lhs[2][0] = lhs[2][0]*pivot;
    40017fe0:	91014004 	add	x4, x0, #0x50
  lhs[3][0] = lhs[3][0]*pivot;
    40017fe4:	9101e003 	add	x3, x0, #0x78
  lhs[4][0] = lhs[4][0]*pivot;
    40017fe8:	91028002 	add	x2, x0, #0xa0
  pivot = 1.00/lhs[0][0];
    40017fec:	fc4284a0 	ldr	d0, [x5], #40
    40017ff0:	1e601820 	fdiv	d0, d1, d0
  lhs[1][0] = lhs[1][0]*pivot;
    40017ff4:	1e600842 	fmul	d2, d2, d0
    40017ff8:	fd001402 	str	d2, [x0, #40]
  lhs[2][0] = lhs[2][0]*pivot;
    40017ffc:	fd402802 	ldr	d2, [x0, #80]
    40018000:	1e600842 	fmul	d2, d2, d0
    40018004:	fd002802 	str	d2, [x0, #80]
  lhs[3][0] = lhs[3][0]*pivot;
    40018008:	fd403c02 	ldr	d2, [x0, #120]
    4001800c:	1e600842 	fmul	d2, d2, d0
    40018010:	fd003c02 	str	d2, [x0, #120]
  lhs[4][0] = lhs[4][0]*pivot;
    40018014:	fd405002 	ldr	d2, [x0, #160]
    40018018:	1e600842 	fmul	d2, d2, d0
    4001801c:	fd005002 	str	d2, [x0, #160]
  r[0]   = r[0]  *pivot;
    40018020:	fd400022 	ldr	d2, [x1]
    40018024:	1e600840 	fmul	d0, d2, d0
    40018028:	fd000020 	str	d0, [x1]

  coeff = lhs[0][1];
    4001802c:	fd400400 	ldr	d0, [x0, #8]
  lhs[1][1]= lhs[1][1] - coeff*lhs[1][0];
    40018030:	fd401402 	ldr	d2, [x0, #40]
    40018034:	1e620803 	fmul	d3, d0, d2
    40018038:	fd4004a2 	ldr	d2, [x5, #8]
    4001803c:	1e633842 	fsub	d2, d2, d3
    40018040:	fd0004a2 	str	d2, [x5, #8]
  lhs[2][1]= lhs[2][1] - coeff*lhs[2][0];
    40018044:	fd402802 	ldr	d2, [x0, #80]
    40018048:	1e620803 	fmul	d3, d0, d2
    4001804c:	fd400482 	ldr	d2, [x4, #8]
    40018050:	1e633842 	fsub	d2, d2, d3
    40018054:	fd000482 	str	d2, [x4, #8]
  lhs[3][1]= lhs[3][1] - coeff*lhs[3][0];
    40018058:	fd403c02 	ldr	d2, [x0, #120]
    4001805c:	1e620803 	fmul	d3, d0, d2
    40018060:	fd400462 	ldr	d2, [x3, #8]
    40018064:	1e633842 	fsub	d2, d2, d3
    40018068:	fd000462 	str	d2, [x3, #8]
  lhs[4][1]= lhs[4][1] - coeff*lhs[4][0];
    4001806c:	fd405002 	ldr	d2, [x0, #160]
    40018070:	1e620803 	fmul	d3, d0, d2
    40018074:	fd400442 	ldr	d2, [x2, #8]
    40018078:	1e633842 	fsub	d2, d2, d3
    4001807c:	fd000442 	str	d2, [x2, #8]
  r[1]   = r[1]   - coeff*r[0];
    40018080:	fd400022 	ldr	d2, [x1]
    40018084:	1e620800 	fmul	d0, d0, d2
    40018088:	fd400422 	ldr	d2, [x1, #8]
    4001808c:	1e603840 	fsub	d0, d2, d0
    40018090:	fd000420 	str	d0, [x1, #8]

  coeff = lhs[0][2];
    40018094:	fd400800 	ldr	d0, [x0, #16]
  lhs[1][2]= lhs[1][2] - coeff*lhs[1][0];
    40018098:	fd401402 	ldr	d2, [x0, #40]
    4001809c:	1e620803 	fmul	d3, d0, d2
    400180a0:	fd4008a2 	ldr	d2, [x5, #16]
    400180a4:	1e633842 	fsub	d2, d2, d3
    400180a8:	fd0008a2 	str	d2, [x5, #16]
  lhs[2][2]= lhs[2][2] - coeff*lhs[2][0];
    400180ac:	fd402802 	ldr	d2, [x0, #80]
    400180b0:	1e620803 	fmul	d3, d0, d2
    400180b4:	fd400882 	ldr	d2, [x4, #16]
    400180b8:	1e633842 	fsub	d2, d2, d3
    400180bc:	fd000882 	str	d2, [x4, #16]
  lhs[3][2]= lhs[3][2] - coeff*lhs[3][0];
    400180c0:	fd403c02 	ldr	d2, [x0, #120]
    400180c4:	1e620803 	fmul	d3, d0, d2
    400180c8:	fd400862 	ldr	d2, [x3, #16]
    400180cc:	1e633842 	fsub	d2, d2, d3
    400180d0:	fd000862 	str	d2, [x3, #16]
  lhs[4][2]= lhs[4][2] - coeff*lhs[4][0];
    400180d4:	fd405002 	ldr	d2, [x0, #160]
    400180d8:	1e620803 	fmul	d3, d0, d2
    400180dc:	fd400842 	ldr	d2, [x2, #16]
    400180e0:	1e633842 	fsub	d2, d2, d3
    400180e4:	fd000842 	str	d2, [x2, #16]
  r[2]   = r[2]   - coeff*r[0];
    400180e8:	fd400022 	ldr	d2, [x1]
    400180ec:	1e620800 	fmul	d0, d0, d2
    400180f0:	fd400822 	ldr	d2, [x1, #16]
    400180f4:	1e603840 	fsub	d0, d2, d0
    400180f8:	fd000820 	str	d0, [x1, #16]

  coeff = lhs[0][3];
    400180fc:	fd400c00 	ldr	d0, [x0, #24]
  lhs[1][3]= lhs[1][3] - coeff*lhs[1][0];
    40018100:	fd401402 	ldr	d2, [x0, #40]
    40018104:	1e620803 	fmul	d3, d0, d2
    40018108:	fd400ca2 	ldr	d2, [x5, #24]
    4001810c:	1e633842 	fsub	d2, d2, d3
    40018110:	fd000ca2 	str	d2, [x5, #24]
  lhs[2][3]= lhs[2][3] - coeff*lhs[2][0];
    40018114:	fd402802 	ldr	d2, [x0, #80]
    40018118:	1e620803 	fmul	d3, d0, d2
    4001811c:	fd400c82 	ldr	d2, [x4, #24]
    40018120:	1e633842 	fsub	d2, d2, d3
    40018124:	fd000c82 	str	d2, [x4, #24]
  lhs[3][3]= lhs[3][3] - coeff*lhs[3][0];
    40018128:	fd403c02 	ldr	d2, [x0, #120]
    4001812c:	1e620803 	fmul	d3, d0, d2
    40018130:	fd400c62 	ldr	d2, [x3, #24]
    40018134:	1e633842 	fsub	d2, d2, d3
    40018138:	fd000c62 	str	d2, [x3, #24]
  lhs[4][3]= lhs[4][3] - coeff*lhs[4][0];
    4001813c:	fd405002 	ldr	d2, [x0, #160]
    40018140:	1e620803 	fmul	d3, d0, d2
    40018144:	fd400c42 	ldr	d2, [x2, #24]
    40018148:	1e633842 	fsub	d2, d2, d3
    4001814c:	fd000c42 	str	d2, [x2, #24]
  r[3]   = r[3]   - coeff*r[0];
    40018150:	fd400022 	ldr	d2, [x1]
    40018154:	1e620800 	fmul	d0, d0, d2
    40018158:	fd400c22 	ldr	d2, [x1, #24]
    4001815c:	1e603840 	fsub	d0, d2, d0
    40018160:	fd000c20 	str	d0, [x1, #24]

  coeff = lhs[0][4];
  lhs[1][4]= lhs[1][4] - coeff*lhs[1][0];
    40018164:	6d420800 	ldp	d0, d2, [x0, #32]
    40018168:	1e620803 	fmul	d3, d0, d2
    4001816c:	fd4010a2 	ldr	d2, [x5, #32]
    40018170:	1e633842 	fsub	d2, d2, d3
    40018174:	fd0010a2 	str	d2, [x5, #32]
  lhs[2][4]= lhs[2][4] - coeff*lhs[2][0];
    40018178:	fd402802 	ldr	d2, [x0, #80]
    4001817c:	1e620803 	fmul	d3, d0, d2
    40018180:	fd401082 	ldr	d2, [x4, #32]
    40018184:	1e633842 	fsub	d2, d2, d3
    40018188:	fd001082 	str	d2, [x4, #32]
  lhs[3][4]= lhs[3][4] - coeff*lhs[3][0];
    4001818c:	fd403c02 	ldr	d2, [x0, #120]
    40018190:	1e620803 	fmul	d3, d0, d2
    40018194:	fd401062 	ldr	d2, [x3, #32]
    40018198:	1e633842 	fsub	d2, d2, d3
    4001819c:	fd001062 	str	d2, [x3, #32]
  lhs[4][4]= lhs[4][4] - coeff*lhs[4][0];
    400181a0:	fd405002 	ldr	d2, [x0, #160]
    400181a4:	1e620803 	fmul	d3, d0, d2
    400181a8:	fd401042 	ldr	d2, [x2, #32]
    400181ac:	1e633842 	fsub	d2, d2, d3
    400181b0:	fd001042 	str	d2, [x2, #32]
  r[4]   = r[4]   - coeff*r[0];
    400181b4:	fd400022 	ldr	d2, [x1]
    400181b8:	1e620800 	fmul	d0, d0, d2
    400181bc:	fd401022 	ldr	d2, [x1, #32]
    400181c0:	1e603840 	fsub	d0, d2, d0
    400181c4:	fd001020 	str	d0, [x1, #32]


  pivot = 1.00/lhs[1][1];
    400181c8:	fd4004a0 	ldr	d0, [x5, #8]
  lhs[2][1] = lhs[2][1]*pivot;
    400181cc:	fd400482 	ldr	d2, [x4, #8]
  pivot = 1.00/lhs[1][1];
    400181d0:	1e601820 	fdiv	d0, d1, d0
  lhs[2][1] = lhs[2][1]*pivot;
    400181d4:	1e600842 	fmul	d2, d2, d0
    400181d8:	fd000482 	str	d2, [x4, #8]
  lhs[3][1] = lhs[3][1]*pivot;
    400181dc:	fd400462 	ldr	d2, [x3, #8]
    400181e0:	1e600842 	fmul	d2, d2, d0
    400181e4:	fd000462 	str	d2, [x3, #8]
  lhs[4][1] = lhs[4][1]*pivot;
    400181e8:	fd400442 	ldr	d2, [x2, #8]
    400181ec:	1e600842 	fmul	d2, d2, d0
    400181f0:	fd000442 	str	d2, [x2, #8]
  r[1]   = r[1]  *pivot;
    400181f4:	fd400422 	ldr	d2, [x1, #8]
    400181f8:	1e600840 	fmul	d0, d2, d0
    400181fc:	fd000420 	str	d0, [x1, #8]

  coeff = lhs[1][0];
  lhs[2][0]= lhs[2][0] - coeff*lhs[2][1];
    40018200:	fd400482 	ldr	d2, [x4, #8]
  coeff = lhs[1][0];
    40018204:	fd401400 	ldr	d0, [x0, #40]
  lhs[2][0]= lhs[2][0] - coeff*lhs[2][1];
    40018208:	1e620803 	fmul	d3, d0, d2
    4001820c:	fd402802 	ldr	d2, [x0, #80]
    40018210:	1e633842 	fsub	d2, d2, d3
    40018214:	fd002802 	str	d2, [x0, #80]
  lhs[3][0]= lhs[3][0] - coeff*lhs[3][1];
    40018218:	fd400462 	ldr	d2, [x3, #8]
    4001821c:	1e620803 	fmul	d3, d0, d2
    40018220:	fd403c02 	ldr	d2, [x0, #120]
    40018224:	1e633842 	fsub	d2, d2, d3
    40018228:	fd003c02 	str	d2, [x0, #120]
  lhs[4][0]= lhs[4][0] - coeff*lhs[4][1];
    4001822c:	fd400442 	ldr	d2, [x2, #8]
    40018230:	1e620803 	fmul	d3, d0, d2
    40018234:	fd405002 	ldr	d2, [x0, #160]
    40018238:	1e633842 	fsub	d2, d2, d3
    4001823c:	fd005002 	str	d2, [x0, #160]
  r[0]   = r[0]   - coeff*r[1];
    40018240:	fd400422 	ldr	d2, [x1, #8]
    40018244:	1e620800 	fmul	d0, d0, d2
    40018248:	fd400022 	ldr	d2, [x1]
    4001824c:	1e603840 	fsub	d0, d2, d0
    40018250:	fd000020 	str	d0, [x1]

  coeff = lhs[1][2];
  lhs[2][2]= lhs[2][2] - coeff*lhs[2][1];
    40018254:	fd400482 	ldr	d2, [x4, #8]
  coeff = lhs[1][2];
    40018258:	fd4008a0 	ldr	d0, [x5, #16]
  lhs[2][2]= lhs[2][2] - coeff*lhs[2][1];
    4001825c:	1e620803 	fmul	d3, d0, d2
    40018260:	fd400882 	ldr	d2, [x4, #16]
    40018264:	1e633842 	fsub	d2, d2, d3
    40018268:	fd000882 	str	d2, [x4, #16]
  lhs[3][2]= lhs[3][2] - coeff*lhs[3][1];
    4001826c:	fd400462 	ldr	d2, [x3, #8]
    40018270:	1e620803 	fmul	d3, d0, d2
    40018274:	fd400862 	ldr	d2, [x3, #16]
    40018278:	1e633842 	fsub	d2, d2, d3
    4001827c:	fd000862 	str	d2, [x3, #16]
  lhs[4][2]= lhs[4][2] - coeff*lhs[4][1];
    40018280:	fd400442 	ldr	d2, [x2, #8]
    40018284:	1e620803 	fmul	d3, d0, d2
    40018288:	fd400842 	ldr	d2, [x2, #16]
    4001828c:	1e633842 	fsub	d2, d2, d3
    40018290:	fd000842 	str	d2, [x2, #16]
  r[2]   = r[2]   - coeff*r[1];
    40018294:	fd400422 	ldr	d2, [x1, #8]
    40018298:	1e620800 	fmul	d0, d0, d2
    4001829c:	fd400822 	ldr	d2, [x1, #16]
    400182a0:	1e603840 	fsub	d0, d2, d0
    400182a4:	fd000820 	str	d0, [x1, #16]

  coeff = lhs[1][3];
  lhs[2][3]= lhs[2][3] - coeff*lhs[2][1];
    400182a8:	fd400482 	ldr	d2, [x4, #8]
  coeff = lhs[1][3];
    400182ac:	fd400ca0 	ldr	d0, [x5, #24]
  lhs[2][3]= lhs[2][3] - coeff*lhs[2][1];
    400182b0:	1e620803 	fmul	d3, d0, d2
    400182b4:	fd400c82 	ldr	d2, [x4, #24]
    400182b8:	1e633842 	fsub	d2, d2, d3
    400182bc:	fd000c82 	str	d2, [x4, #24]
  lhs[3][3]= lhs[3][3] - coeff*lhs[3][1];
    400182c0:	fd400462 	ldr	d2, [x3, #8]
    400182c4:	1e620803 	fmul	d3, d0, d2
    400182c8:	fd400c62 	ldr	d2, [x3, #24]
    400182cc:	1e633842 	fsub	d2, d2, d3
    400182d0:	fd000c62 	str	d2, [x3, #24]
  lhs[4][3]= lhs[4][3] - coeff*lhs[4][1];
    400182d4:	fd400442 	ldr	d2, [x2, #8]
    400182d8:	1e620803 	fmul	d3, d0, d2
    400182dc:	fd400c42 	ldr	d2, [x2, #24]
    400182e0:	1e633842 	fsub	d2, d2, d3
    400182e4:	fd000c42 	str	d2, [x2, #24]
  r[3]   = r[3]   - coeff*r[1];
    400182e8:	fd400422 	ldr	d2, [x1, #8]
    400182ec:	1e620800 	fmul	d0, d0, d2
    400182f0:	fd400c22 	ldr	d2, [x1, #24]
    400182f4:	1e603840 	fsub	d0, d2, d0
    400182f8:	fd000c20 	str	d0, [x1, #24]

  coeff = lhs[1][4];
  lhs[2][4]= lhs[2][4] - coeff*lhs[2][1];
    400182fc:	fd400482 	ldr	d2, [x4, #8]
  coeff = lhs[1][4];
    40018300:	fd4010a0 	ldr	d0, [x5, #32]
  lhs[2][4]= lhs[2][4] - coeff*lhs[2][1];
    40018304:	1e620803 	fmul	d3, d0, d2
    40018308:	fd401082 	ldr	d2, [x4, #32]
    4001830c:	1e633842 	fsub	d2, d2, d3
    40018310:	fd001082 	str	d2, [x4, #32]
  lhs[3][4]= lhs[3][4] - coeff*lhs[3][1];
    40018314:	fd400462 	ldr	d2, [x3, #8]
    40018318:	1e620803 	fmul	d3, d0, d2
    4001831c:	fd401062 	ldr	d2, [x3, #32]
    40018320:	1e633842 	fsub	d2, d2, d3
    40018324:	fd001062 	str	d2, [x3, #32]
  lhs[4][4]= lhs[4][4] - coeff*lhs[4][1];
    40018328:	fd400442 	ldr	d2, [x2, #8]
    4001832c:	1e620803 	fmul	d3, d0, d2
    40018330:	fd401042 	ldr	d2, [x2, #32]
    40018334:	1e633842 	fsub	d2, d2, d3
    40018338:	fd001042 	str	d2, [x2, #32]
  r[4]   = r[4]   - coeff*r[1];
    4001833c:	fd400422 	ldr	d2, [x1, #8]
    40018340:	1e620800 	fmul	d0, d0, d2
    40018344:	fd401022 	ldr	d2, [x1, #32]
    40018348:	1e603840 	fsub	d0, d2, d0
    4001834c:	fd001020 	str	d0, [x1, #32]


  pivot = 1.00/lhs[2][2];
    40018350:	fd400880 	ldr	d0, [x4, #16]
  lhs[3][2] = lhs[3][2]*pivot;
    40018354:	fd400862 	ldr	d2, [x3, #16]
  pivot = 1.00/lhs[2][2];
    40018358:	1e601820 	fdiv	d0, d1, d0
  lhs[3][2] = lhs[3][2]*pivot;
    4001835c:	1e600842 	fmul	d2, d2, d0
    40018360:	fd000862 	str	d2, [x3, #16]
  lhs[4][2] = lhs[4][2]*pivot;
    40018364:	fd400842 	ldr	d2, [x2, #16]
    40018368:	1e600842 	fmul	d2, d2, d0
    4001836c:	fd000842 	str	d2, [x2, #16]
  r[2]   = r[2]  *pivot;
    40018370:	fd400822 	ldr	d2, [x1, #16]
    40018374:	1e600840 	fmul	d0, d2, d0
    40018378:	fd000820 	str	d0, [x1, #16]

  coeff = lhs[2][0];
  lhs[3][0]= lhs[3][0] - coeff*lhs[3][2];
    4001837c:	fd400862 	ldr	d2, [x3, #16]
  coeff = lhs[2][0];
    40018380:	fd402800 	ldr	d0, [x0, #80]
  lhs[3][0]= lhs[3][0] - coeff*lhs[3][2];
    40018384:	1e620803 	fmul	d3, d0, d2
    40018388:	fd403c02 	ldr	d2, [x0, #120]
    4001838c:	1e633842 	fsub	d2, d2, d3
    40018390:	fd003c02 	str	d2, [x0, #120]
  lhs[4][0]= lhs[4][0] - coeff*lhs[4][2];
    40018394:	fd400842 	ldr	d2, [x2, #16]
    40018398:	1e620803 	fmul	d3, d0, d2
    4001839c:	fd405002 	ldr	d2, [x0, #160]
    400183a0:	1e633842 	fsub	d2, d2, d3
    400183a4:	fd005002 	str	d2, [x0, #160]
  r[0]   = r[0]   - coeff*r[2];
    400183a8:	fd400822 	ldr	d2, [x1, #16]
    400183ac:	1e620800 	fmul	d0, d0, d2
    400183b0:	fd400022 	ldr	d2, [x1]
    400183b4:	1e603840 	fsub	d0, d2, d0
    400183b8:	fd000020 	str	d0, [x1]

  coeff = lhs[2][1];
    400183bc:	fd400480 	ldr	d0, [x4, #8]
  lhs[3][1]= lhs[3][1] - coeff*lhs[3][2];
    400183c0:	fd400862 	ldr	d2, [x3, #16]
    400183c4:	1e620803 	fmul	d3, d0, d2
    400183c8:	fd400462 	ldr	d2, [x3, #8]
    400183cc:	1e633842 	fsub	d2, d2, d3
    400183d0:	fd000462 	str	d2, [x3, #8]
  lhs[4][1]= lhs[4][1] - coeff*lhs[4][2];
    400183d4:	fd400842 	ldr	d2, [x2, #16]
    400183d8:	1e620803 	fmul	d3, d0, d2
    400183dc:	fd400442 	ldr	d2, [x2, #8]
    400183e0:	1e633842 	fsub	d2, d2, d3
    400183e4:	fd000442 	str	d2, [x2, #8]
  r[1]   = r[1]   - coeff*r[2];
    400183e8:	fd400822 	ldr	d2, [x1, #16]
    400183ec:	1e620800 	fmul	d0, d0, d2
    400183f0:	fd400422 	ldr	d2, [x1, #8]
    400183f4:	1e603840 	fsub	d0, d2, d0
    400183f8:	fd000420 	str	d0, [x1, #8]

  coeff = lhs[2][3];
  lhs[3][3]= lhs[3][3] - coeff*lhs[3][2];
    400183fc:	fd400862 	ldr	d2, [x3, #16]
  coeff = lhs[2][3];
    40018400:	fd400c80 	ldr	d0, [x4, #24]
  lhs[3][3]= lhs[3][3] - coeff*lhs[3][2];
    40018404:	1e620803 	fmul	d3, d0, d2
    40018408:	fd400c62 	ldr	d2, [x3, #24]
    4001840c:	1e633842 	fsub	d2, d2, d3
    40018410:	fd000c62 	str	d2, [x3, #24]
  lhs[4][3]= lhs[4][3] - coeff*lhs[4][2];
    40018414:	fd400842 	ldr	d2, [x2, #16]
    40018418:	1e620803 	fmul	d3, d0, d2
    4001841c:	fd400c42 	ldr	d2, [x2, #24]
    40018420:	1e633842 	fsub	d2, d2, d3
    40018424:	fd000c42 	str	d2, [x2, #24]
  r[3]   = r[3]   - coeff*r[2];
    40018428:	fd400822 	ldr	d2, [x1, #16]
    4001842c:	1e620800 	fmul	d0, d0, d2
    40018430:	fd400c22 	ldr	d2, [x1, #24]
    40018434:	1e603840 	fsub	d0, d2, d0
    40018438:	fd000c20 	str	d0, [x1, #24]

  coeff = lhs[2][4];
  lhs[3][4]= lhs[3][4] - coeff*lhs[3][2];
    4001843c:	fd400862 	ldr	d2, [x3, #16]
  coeff = lhs[2][4];
    40018440:	fd401080 	ldr	d0, [x4, #32]
  lhs[3][4]= lhs[3][4] - coeff*lhs[3][2];
    40018444:	1e620803 	fmul	d3, d0, d2
    40018448:	fd401062 	ldr	d2, [x3, #32]
    4001844c:	1e633842 	fsub	d2, d2, d3
    40018450:	fd001062 	str	d2, [x3, #32]
  lhs[4][4]= lhs[4][4] - coeff*lhs[4][2];
    40018454:	fd400842 	ldr	d2, [x2, #16]
    40018458:	1e620803 	fmul	d3, d0, d2
    4001845c:	fd401042 	ldr	d2, [x2, #32]
    40018460:	1e633842 	fsub	d2, d2, d3
    40018464:	fd001042 	str	d2, [x2, #32]
  r[4]   = r[4]   - coeff*r[2];
    40018468:	fd400822 	ldr	d2, [x1, #16]
    4001846c:	1e620800 	fmul	d0, d0, d2
    40018470:	fd401022 	ldr	d2, [x1, #32]
    40018474:	1e603840 	fsub	d0, d2, d0
    40018478:	fd001020 	str	d0, [x1, #32]


  pivot = 1.00/lhs[3][3];
    4001847c:	fd400c60 	ldr	d0, [x3, #24]
  lhs[4][3] = lhs[4][3]*pivot;
    40018480:	fd400c42 	ldr	d2, [x2, #24]
  pivot = 1.00/lhs[3][3];
    40018484:	1e601820 	fdiv	d0, d1, d0
  lhs[4][3] = lhs[4][3]*pivot;
    40018488:	1e600842 	fmul	d2, d2, d0
    4001848c:	fd000c42 	str	d2, [x2, #24]
  r[3]   = r[3]  *pivot;
    40018490:	fd400c22 	ldr	d2, [x1, #24]
    40018494:	1e600840 	fmul	d0, d2, d0
    40018498:	fd000c20 	str	d0, [x1, #24]

  coeff = lhs[3][0];
  lhs[4][0]= lhs[4][0] - coeff*lhs[4][3];
    4001849c:	fd400c42 	ldr	d2, [x2, #24]
  coeff = lhs[3][0];
    400184a0:	fd403c00 	ldr	d0, [x0, #120]
  lhs[4][0]= lhs[4][0] - coeff*lhs[4][3];
    400184a4:	1e620803 	fmul	d3, d0, d2
    400184a8:	fd405002 	ldr	d2, [x0, #160]
    400184ac:	1e633842 	fsub	d2, d2, d3
    400184b0:	fd005002 	str	d2, [x0, #160]
  r[0]   = r[0]   - coeff*r[3];
    400184b4:	fd400c22 	ldr	d2, [x1, #24]
    400184b8:	1e620800 	fmul	d0, d0, d2
    400184bc:	fd400022 	ldr	d2, [x1]
    400184c0:	1e603840 	fsub	d0, d2, d0
    400184c4:	fd000020 	str	d0, [x1]

  coeff = lhs[3][1];
    400184c8:	fd400460 	ldr	d0, [x3, #8]
  lhs[4][1]= lhs[4][1] - coeff*lhs[4][3];
    400184cc:	fd400c42 	ldr	d2, [x2, #24]
    400184d0:	1e620803 	fmul	d3, d0, d2
    400184d4:	fd400442 	ldr	d2, [x2, #8]
    400184d8:	1e633842 	fsub	d2, d2, d3
    400184dc:	fd000442 	str	d2, [x2, #8]
  r[1]   = r[1]   - coeff*r[3];
    400184e0:	fd400c22 	ldr	d2, [x1, #24]
    400184e4:	1e620800 	fmul	d0, d0, d2
    400184e8:	fd400422 	ldr	d2, [x1, #8]
    400184ec:	1e603840 	fsub	d0, d2, d0
    400184f0:	fd000420 	str	d0, [x1, #8]

  coeff = lhs[3][2];
    400184f4:	fd400860 	ldr	d0, [x3, #16]
  lhs[4][2]= lhs[4][2] - coeff*lhs[4][3];
    400184f8:	fd400c42 	ldr	d2, [x2, #24]
    400184fc:	1e620803 	fmul	d3, d0, d2
    40018500:	fd400842 	ldr	d2, [x2, #16]
    40018504:	1e633842 	fsub	d2, d2, d3
    40018508:	fd000842 	str	d2, [x2, #16]
  r[2]   = r[2]   - coeff*r[3];
    4001850c:	fd400c22 	ldr	d2, [x1, #24]
    40018510:	1e620800 	fmul	d0, d0, d2
    40018514:	fd400822 	ldr	d2, [x1, #16]
    40018518:	1e603840 	fsub	d0, d2, d0
    4001851c:	fd000820 	str	d0, [x1, #16]

  coeff = lhs[3][4];
  lhs[4][4]= lhs[4][4] - coeff*lhs[4][3];
    40018520:	fd400c42 	ldr	d2, [x2, #24]
  coeff = lhs[3][4];
    40018524:	fd401060 	ldr	d0, [x3, #32]
  lhs[4][4]= lhs[4][4] - coeff*lhs[4][3];
    40018528:	1e620803 	fmul	d3, d0, d2
    4001852c:	fd401042 	ldr	d2, [x2, #32]
    40018530:	1e633842 	fsub	d2, d2, d3
    40018534:	fd001042 	str	d2, [x2, #32]
  r[4]   = r[4]   - coeff*r[3];
    40018538:	fd400c22 	ldr	d2, [x1, #24]
    4001853c:	1e600843 	fmul	d3, d2, d0
    40018540:	fd401020 	ldr	d0, [x1, #32]
    40018544:	1e633800 	fsub	d0, d0, d3
    40018548:	fd001020 	str	d0, [x1, #32]


  pivot = 1.00/lhs[4][4];
    4001854c:	fd401043 	ldr	d3, [x2, #32]
    40018550:	1e631821 	fdiv	d1, d1, d3
  r[4]   = r[4]  *pivot;
    40018554:	1e600820 	fmul	d0, d1, d0
    40018558:	fd001020 	str	d0, [x1, #32]

  coeff = lhs[4][0];
  r[0]   = r[0]   - coeff*r[4];
    4001855c:	fd405001 	ldr	d1, [x0, #160]
    40018560:	1e610803 	fmul	d3, d0, d1
    40018564:	fd400021 	ldr	d1, [x1]
    40018568:	1e633821 	fsub	d1, d1, d3
    4001856c:	fd000021 	str	d1, [x1]

  coeff = lhs[4][1];
  r[1]   = r[1]   - coeff*r[4];
    40018570:	fd400441 	ldr	d1, [x2, #8]
    40018574:	1e610803 	fmul	d3, d0, d1
    40018578:	fd400421 	ldr	d1, [x1, #8]
    4001857c:	1e633821 	fsub	d1, d1, d3
    40018580:	fd000421 	str	d1, [x1, #8]

  coeff = lhs[4][2];
  r[2]   = r[2]   - coeff*r[4];
    40018584:	fd400841 	ldr	d1, [x2, #16]
    40018588:	1e610803 	fmul	d3, d0, d1
    4001858c:	fd400821 	ldr	d1, [x1, #16]
    40018590:	1e633821 	fsub	d1, d1, d3
    40018594:	fd000821 	str	d1, [x1, #16]

  coeff = lhs[4][3];
  r[3]   = r[3]   - coeff*r[4];
    40018598:	fd400c41 	ldr	d1, [x2, #24]
    4001859c:	1e610800 	fmul	d0, d0, d1
    400185a0:	1e603840 	fsub	d0, d2, d0
    400185a4:	fd000c20 	str	d0, [x1, #24]
}
    400185a8:	d65f03c0 	ret

00000000400185ac <verify>:

//---------------------------------------------------------------------
// verification routine                         
//---------------------------------------------------------------------
void verify(int no_time_steps, char *Class, logical *verified)
{
    400185ac:	a9aa7bfd 	stp	x29, x30, [sp, #-352]!
    400185b0:	910003fd 	mov	x29, sp
    400185b4:	a90363f7 	stp	x23, x24, [sp, #48]
  epsilon = 1.0e-08;

  //---------------------------------------------------------------------
  // compute the error norm and the residual norm, and exit if not printing
  //---------------------------------------------------------------------
  error_norm(xce);
    400185b8:	910443f8 	add	x24, sp, #0x110
{
    400185bc:	a90153f3 	stp	x19, x20, [sp, #16]
    400185c0:	2a0003f4 	mov	w20, w0
  error_norm(xce);
    400185c4:	aa1803e0 	mov	x0, x24
{
    400185c8:	aa0103f3 	mov	x19, x1
    400185cc:	a9025bf5 	stp	x21, x22, [sp, #32]
    400185d0:	aa0203f5 	mov	x21, x2
  compute_rhs();

  rhs_norm(xcr);
    400185d4:	9104e3f6 	add	x22, sp, #0x138
{
    400185d8:	a9046bf9 	stp	x25, x26, [sp, #64]
    400185dc:	a90573fb 	stp	x27, x28, [sp, #80]
    400185e0:	fd0033e8 	str	d8, [sp, #96]
  error_norm(xce);
    400185e4:	97ffe8ae 	bl	4001289c <error_norm>
  compute_rhs();
    400185e8:	97fff0ca 	bl	40014910 <compute_rhs>
  rhs_norm(xcr);
    400185ec:	aa1603e0 	mov	x0, x22
    400185f0:	97ffe910 	bl	40012a30 <rhs_norm>

  for (m = 0; m < 5; m++) {
    xcr[m] = xcr[m] / dt;
    400185f4:	900000b7 	adrp	x23, 4002c000 <z_idle_threads>
    400185f8:	fd45b2e1 	ldr	d1, [x23, #2912]
    400185fc:	aa1603e1 	mov	x1, x22
    40018600:	528000a0 	mov	w0, #0x5                   	// #5
    40018604:	fd400020 	ldr	d0, [x1]
  for (m = 0; m < 5; m++) {
    40018608:	71000400 	subs	w0, w0, #0x1
    xcr[m] = xcr[m] / dt;
    4001860c:	1e611800 	fdiv	d0, d0, d1
    40018610:	fc008420 	str	d0, [x1], #8
  for (m = 0; m < 5; m++) {
    40018614:	54ffff81 	b.ne	40018604 <verify+0x58>  // b.any
  }

  *Class = 'U';
    40018618:	52800aa0 	mov	w0, #0x55                  	// #85
    4001861c:	39000260 	strb	w0, [x19]
  *verified = True;
    40018620:	52800020 	mov	w0, #0x1                   	// #1
    40018624:	b90002a0 	str	w0, [x21]
  }

  //---------------------------------------------------------------------
  // reference data for 12X12X12 grids after 60 time steps, with DT = 1.0e-02
  //---------------------------------------------------------------------
  if ( (grid_points[0] == 12) && (grid_points[1] == 12) &&
    40018628:	f0000340 	adrp	x0, 40083000 <ws+0x3a40>
    4001862c:	912a0001 	add	x1, x0, #0xa80
    xcrref[m] = 1.0;
    40018630:	1e6e1000 	fmov	d0, #1.000000000000000000e+00
  if ( (grid_points[0] == 12) && (grid_points[1] == 12) &&
    40018634:	b94a8000 	ldr	w0, [x0, #2688]
    xcrref[m] = 1.0;
    40018638:	6d0703e0 	stp	d0, d0, [sp, #112]
  if ( (grid_points[0] == 12) && (grid_points[1] == 12) &&
    4001863c:	7100301f 	cmp	w0, #0xc
    xcrref[m] = 1.0;
    40018640:	6d0803e0 	stp	d0, d0, [sp, #128]
    xceref[m] = 1.0;
    40018644:	6d0903e0 	stp	d0, d0, [sp, #144]
    40018648:	6d0a03e0 	stp	d0, d0, [sp, #160]
    4001864c:	6d0b03e0 	stp	d0, d0, [sp, #176]
  if ( (grid_points[0] == 12) && (grid_points[1] == 12) &&
    40018650:	54001341 	b.ne	400188b8 <verify+0x30c>  // b.any
    40018654:	b9400420 	ldr	w0, [x1, #4]
    40018658:	7100301f 	cmp	w0, #0xc
    4001865c:	54003441 	b.ne	40018ce4 <verify+0x738>  // b.any
    40018660:	b9400820 	ldr	w0, [x1, #8]
    40018664:	7100301f 	cmp	w0, #0xc
    40018668:	540033e1 	b.ne	40018ce4 <verify+0x738>  // b.any
       (grid_points[2] == 12) && (no_time_steps == 60))  {
    4001866c:	7100f29f 	cmp	w20, #0x3c
    40018670:	540033a1 	b.ne	40018ce4 <verify+0x738>  // b.any

    *Class = 'S';
    40018674:	52800a60 	mov	w0, #0x53                  	// #83
    40018678:	39000260 	strb	w0, [x19]
    dtref = 1.0e-2;

    //---------------------------------------------------------------------
    // Reference values of RMS-norms of residual.
    //---------------------------------------------------------------------
    xcrref[0] = 1.7034283709541311e-01;
    4001867c:	90000040 	adrp	x0, 40020000 <__rodata_region_start>
    40018680:	fd479800 	ldr	d0, [x0, #3888]
    40018684:	fd003be0 	str	d0, [sp, #112]
    xcrref[1] = 1.2975252070034097e-02;
    40018688:	90000040 	adrp	x0, 40020000 <__rodata_region_start>
    4001868c:	fd479c00 	ldr	d0, [x0, #3896]
    40018690:	fd003fe0 	str	d0, [sp, #120]
    xcrref[2] = 3.2527926989486055e-02;
    40018694:	90000040 	adrp	x0, 40020000 <__rodata_region_start>
    40018698:	fd47a000 	ldr	d0, [x0, #3904]
    4001869c:	fd0043e0 	str	d0, [sp, #128]
    xcrref[3] = 2.6436421275166801e-02;
    400186a0:	90000040 	adrp	x0, 40020000 <__rodata_region_start>
    400186a4:	fd47a400 	ldr	d0, [x0, #3912]
    400186a8:	fd0047e0 	str	d0, [sp, #136]
    xcrref[4] = 1.9211784131744430e-01;
    400186ac:	90000040 	adrp	x0, 40020000 <__rodata_region_start>
    400186b0:	fd47a800 	ldr	d0, [x0, #3920]
    400186b4:	fd004be0 	str	d0, [sp, #144]

    //---------------------------------------------------------------------
    // Reference values of RMS-norms of solution error.
    //---------------------------------------------------------------------
    xceref[0] = 4.9976913345811579e-04;
    400186b8:	90000040 	adrp	x0, 40020000 <__rodata_region_start>
    400186bc:	fd47ac00 	ldr	d0, [x0, #3928]
    400186c0:	fd004fe0 	str	d0, [sp, #152]
    xceref[1] = 4.5195666782961927e-05;
    400186c4:	90000040 	adrp	x0, 40020000 <__rodata_region_start>
    400186c8:	fd47b000 	ldr	d0, [x0, #3936]
    400186cc:	fd0053e0 	str	d0, [sp, #160]
    xceref[2] = 7.3973765172921357e-05;
    400186d0:	90000040 	adrp	x0, 40020000 <__rodata_region_start>
    400186d4:	fd47b400 	ldr	d0, [x0, #3944]
    400186d8:	fd0057e0 	str	d0, [sp, #168]
    xceref[3] = 7.3821238632439731e-05;
    400186dc:	90000040 	adrp	x0, 40020000 <__rodata_region_start>
    400186e0:	fd47b800 	ldr	d0, [x0, #3952]
    400186e4:	fd005be0 	str	d0, [sp, #176]
    xceref[4] = 8.9269630987491446e-04;
    400186e8:	90000040 	adrp	x0, 40020000 <__rodata_region_start>
    400186ec:	fd47bc00 	ldr	d0, [x0, #3960]
    dtref = 1.0e-2;
    400186f0:	90000040 	adrp	x0, 40020000 <__rodata_region_start>
    400186f4:	fd474408 	ldr	d8, [x0, #3720]
    xceref[4] = 8.9269630987491446e-04;
    400186f8:	fd005fe0 	str	d0, [sp, #184]

  //---------------------------------------------------------------------
  // Compute the difference of solution values and the known reference values.
  //---------------------------------------------------------------------
  for (m = 0; m < 5; m++) {
    xcrdif[m] = fabs((xcr[m]-xcrref[m])/xcrref[m]);
    400186fc:	9101c3fb 	add	x27, sp, #0x70
    40018700:	910303fc 	add	x28, sp, #0xc0
    xcedif[m] = fabs((xce[m]-xceref[m])/xceref[m]);
    40018704:	910263f9 	add	x25, sp, #0x98
  double epsilon, xce[5], xcr[5], dtref = 0.0;
    40018708:	d2800014 	mov	x20, #0x0                   	// #0
    xcrdif[m] = fabs((xcr[m]-xcrref[m])/xcrref[m]);
    4001870c:	fc7b6a81 	ldr	d1, [x20, x27]
    40018710:	fc746ac0 	ldr	d0, [x22, x20]
    40018714:	1e613800 	fsub	d0, d0, d1
    40018718:	1e611800 	fdiv	d0, d0, d1
    4001871c:	97ffa68d 	bl	40002150 <fabs>
    40018720:	fc346b80 	str	d0, [x28, x20]
    xcedif[m] = fabs((xce[m]-xceref[m])/xceref[m]);
    40018724:	fc796a81 	ldr	d1, [x20, x25]
    40018728:	fc746b00 	ldr	d0, [x24, x20]
    4001872c:	1e613800 	fsub	d0, d0, d1
    40018730:	1e611800 	fdiv	d0, d0, d1
    40018734:	97ffa687 	bl	40002150 <fabs>
    40018738:	9103a3e0 	add	x0, sp, #0xe8
    4001873c:	fc346800 	str	d0, [x0, x20]
  for (m = 0; m < 5; m++) {
    40018740:	91002294 	add	x20, x20, #0x8
    40018744:	f100a29f 	cmp	x20, #0x28
    40018748:	54fffe21 	b.ne	4001870c <verify+0x160>  // b.any
  }

  //---------------------------------------------------------------------
  // Output the comparison of computed results to known cases.
  //---------------------------------------------------------------------
  if (*Class != 'U') {
    4001874c:	39400261 	ldrb	w1, [x19]
    40018750:	7101543f 	cmp	w1, #0x55
    40018754:	54002ce0 	b.eq	40018cf0 <verify+0x744>  // b.none
    printf(" Verification being performed for class %c\n", *Class);
    40018758:	f0000040 	adrp	x0, 40023000 <fpi.1>
    4001875c:	912e9c00 	add	x0, x0, #0xba7
    40018760:	97ffae3c 	bl	40004050 <printf>
    printf(" accuracy setting for epsilon = %20.13E\n", epsilon);
    40018764:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018768:	fd40c400 	ldr	d0, [x0, #392]
    4001876c:	f0000040 	adrp	x0, 40023000 <fpi.1>
    40018770:	912f4c00 	add	x0, x0, #0xbd3
    40018774:	97ffae37 	bl	40004050 <printf>
    *verified = (fabs(dt-dtref) <= epsilon);
    40018778:	fd45b2e0 	ldr	d0, [x23, #2912]
    4001877c:	1e683800 	fsub	d0, d0, d8
    40018780:	97ffa674 	bl	40002150 <fabs>
    40018784:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018788:	fd40c401 	ldr	d1, [x0, #392]
    4001878c:	1e612010 	fcmpe	d0, d1
    40018790:	1a9f87e0 	cset	w0, ls  // ls = plast
    40018794:	b90002a0 	str	w0, [x21]
    if (!(*verified)) {  
    40018798:	540000e9 	b.ls	400187b4 <verify+0x208>  // b.plast
      *Class = 'U';
      printf(" DT does not match the reference value of %15.8E\n", dtref);
    4001879c:	1e604100 	fmov	d0, d8
      *Class = 'U';
    400187a0:	52800aa0 	mov	w0, #0x55                  	// #85
    400187a4:	39000260 	strb	w0, [x19]
      printf(" DT does not match the reference value of %15.8E\n", dtref);
    400187a8:	f0000040 	adrp	x0, 40023000 <fpi.1>
    400187ac:	912ff000 	add	x0, x0, #0xbfc
    400187b0:	97ffae28 	bl	40004050 <printf>
    }
  } else { 
    printf(" Unknown class\n");
  }

  if (*Class != 'U') {
    400187b4:	39400260 	ldrb	w0, [x19]
    400187b8:	7101541f 	cmp	w0, #0x55
    400187bc:	54002a20 	b.eq	40018d00 <verify+0x754>  // b.none
    printf(" Comparison of RMS-norms of residual\n");
    400187c0:	f0000040 	adrp	x0, 40023000 <fpi.1>
    400187c4:	9130f800 	add	x0, x0, #0xc3e
    400187c8:	97ffae22 	bl	40004050 <printf>
    } else if (xcrdif[m] <= epsilon) {
      printf("          %2d%20.13E%20.13E%20.13E\n", 
          m+1, xcr[m], xcrref[m], xcrdif[m]);
    } else { 
      *verified = False;
      printf(" FAILURE: %2d%20.13E%20.13E%20.13E\n",
    400187cc:	f0000054 	adrp	x20, 40023000 <fpi.1>
    400187d0:	91327a94 	add	x20, x20, #0xc9e
    } else if (xcrdif[m] <= epsilon) {
    400187d4:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    400187d8:	fd40c408 	ldr	d8, [x0, #392]
      printf("          %2d%20.13E%20.13E%20.13E\n", 
    400187dc:	f0000057 	adrp	x23, 40023000 <fpi.1>
    400187e0:	9131eaf7 	add	x23, x23, #0xc7a
  double epsilon, xce[5], xcr[5], dtref = 0.0;
    400187e4:	d280001a 	mov	x26, #0x0                   	// #0
    if (*Class == 'U') {
    400187e8:	39400260 	ldrb	w0, [x19]
    400187ec:	11000741 	add	w1, w26, #0x1
      printf("          %2d%20.13E\n", m+1, xcr[m]);
    400187f0:	fc7a7ac0 	ldr	d0, [x22, x26, lsl #3]
    if (*Class == 'U') {
    400187f4:	7101541f 	cmp	w0, #0x55
    400187f8:	540028a1 	b.ne	40018d0c <verify+0x760>  // b.any
      printf("          %2d%20.13E\n", m+1, xcr[m]);
    400187fc:	f0000040 	adrp	x0, 40023000 <fpi.1>
    40018800:	91319000 	add	x0, x0, #0xc64
    40018804:	97ffae13 	bl	40004050 <printf>
  for (m = 0; m < 5; m++) {
    40018808:	9100075a 	add	x26, x26, #0x1
    4001880c:	f100175f 	cmp	x26, #0x5
    40018810:	54fffec1 	b.ne	400187e8 <verify+0x23c>  // b.any
          m+1, xcr[m], xcrref[m], xcrdif[m]);
    }
  }

  if (*Class != 'U') {
    40018814:	39400260 	ldrb	w0, [x19]
    40018818:	7101541f 	cmp	w0, #0x55
    4001881c:	540028c0 	b.eq	40018d34 <verify+0x788>  // b.none
    printf(" Comparison of RMS-norms of solution error\n");
    40018820:	f0000040 	adrp	x0, 40023000 <fpi.1>
    40018824:	91330800 	add	x0, x0, #0xcc2
    40018828:	97ffae0a 	bl	40004050 <printf>
    } else if (xcedif[m] <= epsilon) {
      printf("          %2d%20.13E%20.13E%20.13E\n", 
          m+1, xce[m], xceref[m], xcedif[m]);
    } else {
      *verified = False;
      printf(" FAILURE: %2d%20.13E%20.13E%20.13E\n",
    4001882c:	f0000056 	adrp	x22, 40023000 <fpi.1>
    40018830:	91327ad6 	add	x22, x22, #0xc9e
    } else if (xcedif[m] <= epsilon) {
    40018834:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018838:	fd40c408 	ldr	d8, [x0, #392]
      printf("          %2d%20.13E%20.13E%20.13E\n", 
    4001883c:	f0000057 	adrp	x23, 40023000 <fpi.1>
    40018840:	9131eaf7 	add	x23, x23, #0xc7a
  double epsilon, xce[5], xcr[5], dtref = 0.0;
    40018844:	d2800014 	mov	x20, #0x0                   	// #0
    if (*Class == 'U') {
    40018848:	39400260 	ldrb	w0, [x19]
    4001884c:	11000681 	add	w1, w20, #0x1
      printf("          %2d%20.13E\n", m+1, xce[m]);
    40018850:	fc747b00 	ldr	d0, [x24, x20, lsl #3]
    if (*Class == 'U') {
    40018854:	7101541f 	cmp	w0, #0x55
    40018858:	54002741 	b.ne	40018d40 <verify+0x794>  // b.any
      printf("          %2d%20.13E\n", m+1, xce[m]);
    4001885c:	f0000040 	adrp	x0, 40023000 <fpi.1>
    40018860:	91319000 	add	x0, x0, #0xc64
    40018864:	97ffadfb 	bl	40004050 <printf>
  for (m = 0; m < 5; m++) {
    40018868:	91000694 	add	x20, x20, #0x1
    4001886c:	f100169f 	cmp	x20, #0x5
    40018870:	54fffec1 	b.ne	40018848 <verify+0x29c>  // b.any
          m+1, xce[m], xceref[m], xcedif[m]);
    }
  }

  if (*Class == 'U') {
    40018874:	39400260 	ldrb	w0, [x19]
    40018878:	7101541f 	cmp	w0, #0x55
    4001887c:	54002781 	b.ne	40018d6c <verify+0x7c0>  // b.any
    printf(" No reference values provided\n");
    40018880:	f0000040 	adrp	x0, 40023000 <fpi.1>
    40018884:	9133b800 	add	x0, x0, #0xcee
    40018888:	97ffadf2 	bl	40004050 <printf>
    printf(" No verification performed\n");
    4001888c:	f0000040 	adrp	x0, 40023000 <fpi.1>
    40018890:	91343400 	add	x0, x0, #0xd0d
  } else if (*verified) {
    printf(" Verification Successful\n");
  } else {
    printf(" Verification failed\n");
    40018894:	97ffadef 	bl	40004050 <printf>
  }
}
    40018898:	a94153f3 	ldp	x19, x20, [sp, #16]
    4001889c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    400188a0:	a94363f7 	ldp	x23, x24, [sp, #48]
    400188a4:	a9446bf9 	ldp	x25, x26, [sp, #64]
    400188a8:	a94573fb 	ldp	x27, x28, [sp, #80]
    400188ac:	fd4033e8 	ldr	d8, [sp, #96]
    400188b0:	a8d67bfd 	ldp	x29, x30, [sp], #352
    400188b4:	d65f03c0 	ret
  } else if ( (grid_points[0] == 24) && (grid_points[1] == 24) &&
    400188b8:	7100601f 	cmp	w0, #0x18
    400188bc:	54000581 	b.ne	4001896c <verify+0x3c0>  // b.any
    400188c0:	b9400420 	ldr	w0, [x1, #4]
    400188c4:	7100601f 	cmp	w0, #0x18
    400188c8:	540020e1 	b.ne	40018ce4 <verify+0x738>  // b.any
    400188cc:	b9400820 	ldr	w0, [x1, #8]
    400188d0:	7100601f 	cmp	w0, #0x18
    400188d4:	54002081 	b.ne	40018ce4 <verify+0x738>  // b.any
              (grid_points[2] == 24) && (no_time_steps == 200) ) {
    400188d8:	7103229f 	cmp	w20, #0xc8
    400188dc:	54002041 	b.ne	40018ce4 <verify+0x738>  // b.any
    *Class = 'W';
    400188e0:	52800ae0 	mov	w0, #0x57                  	// #87
    400188e4:	39000260 	strb	w0, [x19]
    xcrref[0] = 0.1125590409344e+03;
    400188e8:	90000040 	adrp	x0, 40020000 <__rodata_region_start>
    400188ec:	fd47c000 	ldr	d0, [x0, #3968]
    400188f0:	fd003be0 	str	d0, [sp, #112]
    xcrref[1] = 0.1180007595731e+02;
    400188f4:	90000040 	adrp	x0, 40020000 <__rodata_region_start>
    400188f8:	fd47c400 	ldr	d0, [x0, #3976]
    400188fc:	fd003fe0 	str	d0, [sp, #120]
    xcrref[2] = 0.2710329767846e+02;
    40018900:	90000040 	adrp	x0, 40020000 <__rodata_region_start>
    40018904:	fd47c800 	ldr	d0, [x0, #3984]
    40018908:	fd0043e0 	str	d0, [sp, #128]
    xcrref[3] = 0.2469174937669e+02;
    4001890c:	90000040 	adrp	x0, 40020000 <__rodata_region_start>
    40018910:	fd47cc00 	ldr	d0, [x0, #3992]
    40018914:	fd0047e0 	str	d0, [sp, #136]
    xcrref[4] = 0.2638427874317e+03;
    40018918:	90000040 	adrp	x0, 40020000 <__rodata_region_start>
    4001891c:	fd47d000 	ldr	d0, [x0, #4000]
    40018920:	fd004be0 	str	d0, [sp, #144]
    xceref[0] = 0.4419655736008e+01;
    40018924:	90000040 	adrp	x0, 40020000 <__rodata_region_start>
    40018928:	fd47d400 	ldr	d0, [x0, #4008]
    4001892c:	fd004fe0 	str	d0, [sp, #152]
    xceref[1] = 0.4638531260002e+00;
    40018930:	90000040 	adrp	x0, 40020000 <__rodata_region_start>
    40018934:	fd47d800 	ldr	d0, [x0, #4016]
    40018938:	fd0053e0 	str	d0, [sp, #160]
    xceref[2] = 0.1011551749967e+01;
    4001893c:	90000040 	adrp	x0, 40020000 <__rodata_region_start>
    40018940:	fd47dc00 	ldr	d0, [x0, #4024]
    40018944:	fd0057e0 	str	d0, [sp, #168]
    xceref[3] = 0.9235878729944e+00;
    40018948:	90000040 	adrp	x0, 40020000 <__rodata_region_start>
    4001894c:	fd47e000 	ldr	d0, [x0, #4032]
    40018950:	fd005be0 	str	d0, [sp, #176]
    xceref[4] = 0.1018045837718e+02;
    40018954:	90000040 	adrp	x0, 40020000 <__rodata_region_start>
    40018958:	fd47e400 	ldr	d0, [x0, #4040]
    dtref = 0.8e-3;
    4001895c:	90000040 	adrp	x0, 40020000 <__rodata_region_start>
    40018960:	fd47e808 	ldr	d8, [x0, #4048]
    xceref[4] = 9.7379901770829278e+00;
    40018964:	fd005fe0 	str	d0, [sp, #184]
    40018968:	17ffff65 	b	400186fc <verify+0x150>
  } else if ( (grid_points[0] == 64) && (grid_points[1] == 64) &&
    4001896c:	7101001f 	cmp	w0, #0x40
    40018970:	54000521 	b.ne	40018a14 <verify+0x468>  // b.any
    40018974:	b9400420 	ldr	w0, [x1, #4]
    40018978:	7101001f 	cmp	w0, #0x40
    4001897c:	54001b41 	b.ne	40018ce4 <verify+0x738>  // b.any
    40018980:	b9400820 	ldr	w0, [x1, #8]
    40018984:	7101001f 	cmp	w0, #0x40
    40018988:	54001ae1 	b.ne	40018ce4 <verify+0x738>  // b.any
              (grid_points[2] == 64) && (no_time_steps == 200) ) {
    4001898c:	7103229f 	cmp	w20, #0xc8
    40018990:	54001aa1 	b.ne	40018ce4 <verify+0x738>  // b.any
    *Class = 'A';
    40018994:	52800820 	mov	w0, #0x41                  	// #65
    40018998:	39000260 	strb	w0, [x19]
    xcrref[0] = 1.0806346714637264e+02;
    4001899c:	90000040 	adrp	x0, 40020000 <__rodata_region_start>
    400189a0:	fd47ec00 	ldr	d0, [x0, #4056]
    400189a4:	fd003be0 	str	d0, [sp, #112]
    xcrref[1] = 1.1319730901220813e+01;
    400189a8:	90000040 	adrp	x0, 40020000 <__rodata_region_start>
    400189ac:	fd47f000 	ldr	d0, [x0, #4064]
    400189b0:	fd003fe0 	str	d0, [sp, #120]
    xcrref[2] = 2.5974354511582465e+01;
    400189b4:	90000040 	adrp	x0, 40020000 <__rodata_region_start>
    400189b8:	fd47f400 	ldr	d0, [x0, #4072]
    400189bc:	fd0043e0 	str	d0, [sp, #128]
    xcrref[3] = 2.3665622544678910e+01;
    400189c0:	90000040 	adrp	x0, 40020000 <__rodata_region_start>
    400189c4:	fd47f800 	ldr	d0, [x0, #4080]
    400189c8:	fd0047e0 	str	d0, [sp, #136]
    xcrref[4] = 2.5278963211748344e+02;
    400189cc:	90000040 	adrp	x0, 40020000 <__rodata_region_start>
    400189d0:	fd47fc00 	ldr	d0, [x0, #4088]
    400189d4:	fd004be0 	str	d0, [sp, #144]
    xceref[0] = 4.2348416040525025e+00;
    400189d8:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    400189dc:	fd400000 	ldr	d0, [x0]
    400189e0:	fd004fe0 	str	d0, [sp, #152]
    xceref[1] = 4.4390282496995698e-01;
    400189e4:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    400189e8:	fd400400 	ldr	d0, [x0, #8]
    400189ec:	fd0053e0 	str	d0, [sp, #160]
    xceref[2] = 9.6692480136345650e-01;
    400189f0:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    400189f4:	fd400800 	ldr	d0, [x0, #16]
    400189f8:	fd0057e0 	str	d0, [sp, #168]
    xceref[3] = 8.8302063039765474e-01;
    400189fc:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018a00:	fd400c00 	ldr	d0, [x0, #24]
    40018a04:	fd005be0 	str	d0, [sp, #176]
    xceref[4] = 9.7379901770829278e+00;
    40018a08:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018a0c:	fd401000 	ldr	d0, [x0, #32]
    40018a10:	17ffffd3 	b	4001895c <verify+0x3b0>
  } else if ( (grid_points[0] == 102) && (grid_points[1] == 102) &&
    40018a14:	7101981f 	cmp	w0, #0x66
    40018a18:	54000581 	b.ne	40018ac8 <verify+0x51c>  // b.any
    40018a1c:	b9400420 	ldr	w0, [x1, #4]
    40018a20:	7101981f 	cmp	w0, #0x66
    40018a24:	54001601 	b.ne	40018ce4 <verify+0x738>  // b.any
    40018a28:	b9400820 	ldr	w0, [x1, #8]
    40018a2c:	7101981f 	cmp	w0, #0x66
    40018a30:	540015a1 	b.ne	40018ce4 <verify+0x738>  // b.any
              (grid_points[2] == 102) && (no_time_steps == 200) ) {
    40018a34:	7103229f 	cmp	w20, #0xc8
    40018a38:	54001561 	b.ne	40018ce4 <verify+0x738>  // b.any
    *Class = 'B';
    40018a3c:	52800840 	mov	w0, #0x42                  	// #66
    40018a40:	39000260 	strb	w0, [x19]
    xcrref[0] = 1.4233597229287254e+03;
    40018a44:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018a48:	fd401400 	ldr	d0, [x0, #40]
    40018a4c:	fd003be0 	str	d0, [sp, #112]
    xcrref[1] = 9.9330522590150238e+01;
    40018a50:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018a54:	fd401800 	ldr	d0, [x0, #48]
    40018a58:	fd003fe0 	str	d0, [sp, #120]
    xcrref[2] = 3.5646025644535285e+02;
    40018a5c:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018a60:	fd401c00 	ldr	d0, [x0, #56]
    40018a64:	fd0043e0 	str	d0, [sp, #128]
    xcrref[3] = 3.2485447959084092e+02;
    40018a68:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018a6c:	fd402000 	ldr	d0, [x0, #64]
    40018a70:	fd0047e0 	str	d0, [sp, #136]
    xcrref[4] = 3.2707541254659363e+03;
    40018a74:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018a78:	fd402400 	ldr	d0, [x0, #72]
    40018a7c:	fd004be0 	str	d0, [sp, #144]
    xceref[0] = 5.2969847140936856e+01;
    40018a80:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018a84:	fd402800 	ldr	d0, [x0, #80]
    40018a88:	fd004fe0 	str	d0, [sp, #152]
    xceref[1] = 4.4632896115670668e+00;
    40018a8c:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018a90:	fd402c00 	ldr	d0, [x0, #88]
    40018a94:	fd0053e0 	str	d0, [sp, #160]
    xceref[2] = 1.3122573342210174e+01;
    40018a98:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018a9c:	fd403000 	ldr	d0, [x0, #96]
    40018aa0:	fd0057e0 	str	d0, [sp, #168]
    xceref[3] = 1.2006925323559144e+01;
    40018aa4:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018aa8:	fd403400 	ldr	d0, [x0, #104]
    40018aac:	fd005be0 	str	d0, [sp, #176]
    xceref[4] = 1.2459576151035986e+02;
    40018ab0:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018ab4:	fd403800 	ldr	d0, [x0, #112]
    dtref = 3.0e-4;
    40018ab8:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018abc:	fd403c08 	ldr	d8, [x0, #120]
    xceref[4] = 1.2459576151035986e+02;
    40018ac0:	fd005fe0 	str	d0, [sp, #184]
    40018ac4:	17ffff0e 	b	400186fc <verify+0x150>
  } else if ( (grid_points[0] == 162) && (grid_points[1] == 162) &&
    40018ac8:	7102881f 	cmp	w0, #0xa2
    40018acc:	54000581 	b.ne	40018b7c <verify+0x5d0>  // b.any
    40018ad0:	b9400420 	ldr	w0, [x1, #4]
    40018ad4:	7102881f 	cmp	w0, #0xa2
    40018ad8:	54001061 	b.ne	40018ce4 <verify+0x738>  // b.any
    40018adc:	b9400820 	ldr	w0, [x1, #8]
    40018ae0:	7102881f 	cmp	w0, #0xa2
    40018ae4:	54001001 	b.ne	40018ce4 <verify+0x738>  // b.any
              (grid_points[2] == 162) && (no_time_steps == 200) ) {
    40018ae8:	7103229f 	cmp	w20, #0xc8
    40018aec:	54000fc1 	b.ne	40018ce4 <verify+0x738>  // b.any
    *Class = 'C';
    40018af0:	52800860 	mov	w0, #0x43                  	// #67
    40018af4:	39000260 	strb	w0, [x19]
    xcrref[0] = 0.62398116551764615e+04;
    40018af8:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018afc:	fd404000 	ldr	d0, [x0, #128]
    40018b00:	fd003be0 	str	d0, [sp, #112]
    xcrref[1] = 0.50793239190423964e+03;
    40018b04:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018b08:	fd404400 	ldr	d0, [x0, #136]
    40018b0c:	fd003fe0 	str	d0, [sp, #120]
    xcrref[2] = 0.15423530093013596e+04;
    40018b10:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018b14:	fd404800 	ldr	d0, [x0, #144]
    40018b18:	fd0043e0 	str	d0, [sp, #128]
    xcrref[3] = 0.13302387929291190e+04;
    40018b1c:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018b20:	fd404c00 	ldr	d0, [x0, #152]
    40018b24:	fd0047e0 	str	d0, [sp, #136]
    xcrref[4] = 0.11604087428436455e+05;
    40018b28:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018b2c:	fd405000 	ldr	d0, [x0, #160]
    40018b30:	fd004be0 	str	d0, [sp, #144]
    xceref[0] = 0.16462008369091265e+03;
    40018b34:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018b38:	fd405400 	ldr	d0, [x0, #168]
    40018b3c:	fd004fe0 	str	d0, [sp, #152]
    xceref[1] = 0.11497107903824313e+02;
    40018b40:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018b44:	fd405800 	ldr	d0, [x0, #176]
    40018b48:	fd0053e0 	str	d0, [sp, #160]
    xceref[2] = 0.41207446207461508e+02;
    40018b4c:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018b50:	fd405c00 	ldr	d0, [x0, #184]
    40018b54:	fd0057e0 	str	d0, [sp, #168]
    xceref[3] = 0.37087651059694167e+02;
    40018b58:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018b5c:	fd406000 	ldr	d0, [x0, #192]
    40018b60:	fd005be0 	str	d0, [sp, #176]
    xceref[4] = 0.36211053051841265e+03;
    40018b64:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018b68:	fd406400 	ldr	d0, [x0, #200]
    dtref = 1.0e-4;
    40018b6c:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018b70:	fd406808 	ldr	d8, [x0, #208]
    xceref[4] = 0.36211053051841265e+03;
    40018b74:	fd005fe0 	str	d0, [sp, #184]
    40018b78:	17fffee1 	b	400186fc <verify+0x150>
  } else if ( (grid_points[0] == 408) && (grid_points[1] == 408) &&
    40018b7c:	7106601f 	cmp	w0, #0x198
    40018b80:	54000581 	b.ne	40018c30 <verify+0x684>  // b.any
    40018b84:	b9400420 	ldr	w0, [x1, #4]
    40018b88:	7106601f 	cmp	w0, #0x198
    40018b8c:	54000ac1 	b.ne	40018ce4 <verify+0x738>  // b.any
    40018b90:	b9400820 	ldr	w0, [x1, #8]
    40018b94:	7106601f 	cmp	w0, #0x198
    40018b98:	54000a61 	b.ne	40018ce4 <verify+0x738>  // b.any
              (grid_points[2] == 408) && (no_time_steps == 250) ) {
    40018b9c:	7103ea9f 	cmp	w20, #0xfa
    40018ba0:	54000a21 	b.ne	40018ce4 <verify+0x738>  // b.any
    *Class = 'D';
    40018ba4:	52800880 	mov	w0, #0x44                  	// #68
    40018ba8:	39000260 	strb	w0, [x19]
    xcrref[0] = 0.2533188551738e+05;
    40018bac:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018bb0:	fd406c00 	ldr	d0, [x0, #216]
    40018bb4:	fd003be0 	str	d0, [sp, #112]
    xcrref[1] = 0.2346393716980e+04;
    40018bb8:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018bbc:	fd407000 	ldr	d0, [x0, #224]
    40018bc0:	fd003fe0 	str	d0, [sp, #120]
    xcrref[2] = 0.6294554366904e+04;
    40018bc4:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018bc8:	fd407400 	ldr	d0, [x0, #232]
    40018bcc:	fd0043e0 	str	d0, [sp, #128]
    xcrref[3] = 0.5352565376030e+04;
    40018bd0:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018bd4:	fd407800 	ldr	d0, [x0, #240]
    40018bd8:	fd0047e0 	str	d0, [sp, #136]
    xcrref[4] = 0.3905864038618e+05;
    40018bdc:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018be0:	fd407c00 	ldr	d0, [x0, #248]
    40018be4:	fd004be0 	str	d0, [sp, #144]
    xceref[0] = 0.3100009377557e+03;
    40018be8:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018bec:	fd408000 	ldr	d0, [x0, #256]
    40018bf0:	fd004fe0 	str	d0, [sp, #152]
    xceref[1] = 0.2424086324913e+02;
    40018bf4:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018bf8:	fd408400 	ldr	d0, [x0, #264]
    40018bfc:	fd0053e0 	str	d0, [sp, #160]
    xceref[2] = 0.7782212022645e+02;
    40018c00:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018c04:	fd408800 	ldr	d0, [x0, #272]
    40018c08:	fd0057e0 	str	d0, [sp, #168]
    xceref[3] = 0.6835623860116e+02;
    40018c0c:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018c10:	fd408c00 	ldr	d0, [x0, #280]
    40018c14:	fd005be0 	str	d0, [sp, #176]
    xceref[4] = 0.6065737200368e+03;
    40018c18:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018c1c:	fd409000 	ldr	d0, [x0, #288]
    dtref = 0.2e-4;
    40018c20:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018c24:	fd409408 	ldr	d8, [x0, #296]
    xceref[4] = 0.6065737200368e+03;
    40018c28:	fd005fe0 	str	d0, [sp, #184]
    40018c2c:	17fffeb4 	b	400186fc <verify+0x150>
  } else if ( (grid_points[0] == 1020) && (grid_points[1] == 1020) &&
    40018c30:	710ff01f 	cmp	w0, #0x3fc
    40018c34:	54000581 	b.ne	40018ce4 <verify+0x738>  // b.any
    40018c38:	b9400420 	ldr	w0, [x1, #4]
    40018c3c:	710ff01f 	cmp	w0, #0x3fc
    40018c40:	54000521 	b.ne	40018ce4 <verify+0x738>  // b.any
    40018c44:	b9400820 	ldr	w0, [x1, #8]
    40018c48:	710ff01f 	cmp	w0, #0x3fc
    40018c4c:	540004c1 	b.ne	40018ce4 <verify+0x738>  // b.any
              (grid_points[2] == 1020) && (no_time_steps == 250) ) {
    40018c50:	7103ea9f 	cmp	w20, #0xfa
    40018c54:	54000481 	b.ne	40018ce4 <verify+0x738>  // b.any
    *Class = 'E';
    40018c58:	528008a0 	mov	w0, #0x45                  	// #69
    40018c5c:	39000260 	strb	w0, [x19]
    xcrref[0] = 0.9795372484517e+05;
    40018c60:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018c64:	fd409800 	ldr	d0, [x0, #304]
    40018c68:	fd003be0 	str	d0, [sp, #112]
    xcrref[1] = 0.9739814511521e+04;
    40018c6c:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018c70:	fd409c00 	ldr	d0, [x0, #312]
    40018c74:	fd003fe0 	str	d0, [sp, #120]
    xcrref[2] = 0.2467606342965e+05;
    40018c78:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018c7c:	fd40a000 	ldr	d0, [x0, #320]
    40018c80:	fd0043e0 	str	d0, [sp, #128]
    xcrref[3] = 0.2092419572860e+05;
    40018c84:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018c88:	fd40a400 	ldr	d0, [x0, #328]
    40018c8c:	fd0047e0 	str	d0, [sp, #136]
    xcrref[4] = 0.1392138856939e+06;
    40018c90:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018c94:	fd40a800 	ldr	d0, [x0, #336]
    40018c98:	fd004be0 	str	d0, [sp, #144]
    xceref[0] = 0.4327562208414e+03;
    40018c9c:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018ca0:	fd40ac00 	ldr	d0, [x0, #344]
    40018ca4:	fd004fe0 	str	d0, [sp, #152]
    xceref[1] = 0.3699051964887e+02;
    40018ca8:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018cac:	fd40b000 	ldr	d0, [x0, #352]
    40018cb0:	fd0053e0 	str	d0, [sp, #160]
    xceref[2] = 0.1089845040954e+03;
    40018cb4:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018cb8:	fd40b400 	ldr	d0, [x0, #360]
    40018cbc:	fd0057e0 	str	d0, [sp, #168]
    xceref[3] = 0.9462517622043e+02;
    40018cc0:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018cc4:	fd40b800 	ldr	d0, [x0, #368]
    40018cc8:	fd005be0 	str	d0, [sp, #176]
    xceref[4] = 0.7765512765309e+03;
    40018ccc:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018cd0:	fd40bc00 	ldr	d0, [x0, #376]
    dtref = 0.4e-5;
    40018cd4:	b0000040 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    40018cd8:	fd40c008 	ldr	d8, [x0, #384]
    xceref[4] = 0.7765512765309e+03;
    40018cdc:	fd005fe0 	str	d0, [sp, #184]
    40018ce0:	17fffe87 	b	400186fc <verify+0x150>
  double epsilon, xce[5], xcr[5], dtref = 0.0;
    40018ce4:	2f00e408 	movi	d8, #0x0
    *verified = False;
    40018ce8:	b90002bf 	str	wzr, [x21]
    40018cec:	17fffe84 	b	400186fc <verify+0x150>
    printf(" Unknown class\n");
    40018cf0:	f0000040 	adrp	x0, 40023000 <fpi.1>
    40018cf4:	9130b800 	add	x0, x0, #0xc2e
    40018cf8:	97ffacd6 	bl	40004050 <printf>
    40018cfc:	17fffeae 	b	400187b4 <verify+0x208>
    printf(" RMS-norms of residual\n");
    40018d00:	f0000040 	adrp	x0, 40023000 <fpi.1>
    40018d04:	91313000 	add	x0, x0, #0xc4c
    40018d08:	17fffeb0 	b	400187c8 <verify+0x21c>
    } else if (xcrdif[m] <= epsilon) {
    40018d0c:	fc7a7b82 	ldr	d2, [x28, x26, lsl #3]
      printf("          %2d%20.13E%20.13E%20.13E\n", 
    40018d10:	fc7a7b61 	ldr	d1, [x27, x26, lsl #3]
    } else if (xcrdif[m] <= epsilon) {
    40018d14:	1e682050 	fcmpe	d2, d8
    40018d18:	54000089 	b.ls	40018d28 <verify+0x77c>  // b.plast
      printf(" FAILURE: %2d%20.13E%20.13E%20.13E\n",
    40018d1c:	aa1403e0 	mov	x0, x20
      *verified = False;
    40018d20:	b90002bf 	str	wzr, [x21]
      printf(" FAILURE: %2d%20.13E%20.13E%20.13E\n",
    40018d24:	14000002 	b	40018d2c <verify+0x780>
      printf("          %2d%20.13E%20.13E%20.13E\n", 
    40018d28:	aa1703e0 	mov	x0, x23
      printf(" FAILURE: %2d%20.13E%20.13E%20.13E\n",
    40018d2c:	97ffacc9 	bl	40004050 <printf>
    40018d30:	17fffeb6 	b	40018808 <verify+0x25c>
    printf(" RMS-norms of solution error\n");
    40018d34:	f0000040 	adrp	x0, 40023000 <fpi.1>
    40018d38:	91334000 	add	x0, x0, #0xcd0
    40018d3c:	17fffebb 	b	40018828 <verify+0x27c>
    } else if (xcedif[m] <= epsilon) {
    40018d40:	9103a3e0 	add	x0, sp, #0xe8
      printf("          %2d%20.13E%20.13E%20.13E\n", 
    40018d44:	fc747b21 	ldr	d1, [x25, x20, lsl #3]
    } else if (xcedif[m] <= epsilon) {
    40018d48:	fc747802 	ldr	d2, [x0, x20, lsl #3]
    40018d4c:	1e682050 	fcmpe	d2, d8
    40018d50:	54000089 	b.ls	40018d60 <verify+0x7b4>  // b.plast
      printf(" FAILURE: %2d%20.13E%20.13E%20.13E\n",
    40018d54:	aa1603e0 	mov	x0, x22
      *verified = False;
    40018d58:	b90002bf 	str	wzr, [x21]
      printf(" FAILURE: %2d%20.13E%20.13E%20.13E\n",
    40018d5c:	14000002 	b	40018d64 <verify+0x7b8>
      printf("          %2d%20.13E%20.13E%20.13E\n", 
    40018d60:	aa1703e0 	mov	x0, x23
      printf(" FAILURE: %2d%20.13E%20.13E%20.13E\n",
    40018d64:	97ffacbb 	bl	40004050 <printf>
    40018d68:	17fffec0 	b	40018868 <verify+0x2bc>
  } else if (*verified) {
    40018d6c:	b94002a0 	ldr	w0, [x21]
    40018d70:	34000080 	cbz	w0, 40018d80 <verify+0x7d4>
    printf(" Verification Successful\n");
    40018d74:	f0000040 	adrp	x0, 40023000 <fpi.1>
    40018d78:	9134a400 	add	x0, x0, #0xd29
    40018d7c:	17fffec6 	b	40018894 <verify+0x2e8>
    printf(" Verification failed\n");
    40018d80:	f0000040 	adrp	x0, 40023000 <fpi.1>
    40018d84:	91350c00 	add	x0, x0, #0xd43
    40018d88:	17fffec3 	b	40018894 <verify+0x2e8>

0000000040018d8c <wtime_>:
#ifndef DOS
#include <sys/time.h>
#endif

void wtime(double *t)
{
    40018d8c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
  static int sec = -1;
  struct timeval tv;
  gettimeofday(&tv, (void *)0);
    40018d90:	d2800001 	mov	x1, #0x0                   	// #0
{
    40018d94:	910003fd 	mov	x29, sp
    40018d98:	f9000bf3 	str	x19, [sp, #16]
    40018d9c:	aa0003f3 	mov	x19, x0
  gettimeofday(&tv, (void *)0);
    40018da0:	910083e0 	add	x0, sp, #0x20
    40018da4:	97ffad77 	bl	40004380 <gettimeofday>
  if (sec < 0) sec = tv.tv_sec;
    40018da8:	f00005a2 	adrp	x2, 400cf000 <impure_data+0x3d0>
    40018dac:	b94a3c40 	ldr	w0, [x2, #2620]
    40018db0:	f94013e1 	ldr	x1, [sp, #32]
    40018db4:	36f80040 	tbz	w0, #31, 40018dbc <wtime_+0x30>
    40018db8:	b90a3c41 	str	w1, [x2, #2620]
  *t = (tv.tv_sec - sec) + 1.0e-6*tv.tv_usec;
    40018dbc:	fd4017e1 	ldr	d1, [sp, #40]
    40018dc0:	b98a3c40 	ldrsw	x0, [x2, #2620]
    40018dc4:	5e61d821 	scvtf	d1, d1
    40018dc8:	cb000021 	sub	x1, x1, x0
    40018dcc:	90000040 	adrp	x0, 40020000 <__rodata_region_start>
    40018dd0:	fd475402 	ldr	d2, [x0, #3752]
    40018dd4:	9e620020 	scvtf	d0, x1
    40018dd8:	1e620821 	fmul	d1, d1, d2
    40018ddc:	1e612800 	fadd	d0, d0, d1
    40018de0:	fd000260 	str	d0, [x19]
}
    40018de4:	f9400bf3 	ldr	x19, [sp, #16]
    40018de8:	a8c37bfd 	ldp	x29, x30, [sp], #48
    40018dec:	d65f03c0 	ret

0000000040018df0 <x_solve>:
// Make sure we treat elements zero to cell_size in the direction
// of the sweep.
// 
//---------------------------------------------------------------------
void x_solve()
{
    40018df0:	a9b17bfd 	stp	x29, x30, [sp, #-240]!
    40018df4:	910003fd 	mov	x29, sp
  int i, j, k, m, n, isize;

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------

  if (timeron) timer_start(t_xsolve);
    40018df8:	f0000340 	adrp	x0, 40083000 <ws+0x3a40>
    40018dfc:	b94a8c01 	ldr	w1, [x0, #2700]
{
    40018e00:	a90153f3 	stp	x19, x20, [sp, #16]
    40018e04:	a9025bf5 	stp	x21, x22, [sp, #32]
    40018e08:	a90363f7 	stp	x23, x24, [sp, #48]
    40018e0c:	a9046bf9 	stp	x25, x26, [sp, #64]
    40018e10:	a90573fb 	stp	x27, x28, [sp, #80]
    40018e14:	f9005be0 	str	x0, [sp, #176]
    40018e18:	fd0033e8 	str	d8, [sp, #96]
  if (timeron) timer_start(t_xsolve);
    40018e1c:	34000061 	cbz	w1, 40018e28 <x_solve+0x38>
    40018e20:	528000c0 	mov	w0, #0x6                   	// #6
    40018e24:	97ffe679 	bl	40012808 <timer_start>

  //---------------------------------------------------------------------
  // This function computes the left hand side in the xi-direction
  //---------------------------------------------------------------------

  isize = grid_points[0]-1;
    40018e28:	f000035a 	adrp	x26, 40083000 <ws+0x3a40>
    40018e2c:	b94a8353 	ldr	w19, [x26, #2688]
      }

      //---------------------------------------------------------------------
      // rhs(isize) = rhs(isize) - A*rhs(isize-1)
      //---------------------------------------------------------------------
      matvec_sub(lhs[isize][AA], rhs[k][j][isize-1], rhs[k][j][isize]);
    40018e30:	b0000147 	adrp	x7, 40041000 <forcing+0x13930>
    40018e34:	910ec0fc 	add	x28, x7, #0x3b0
  isize = grid_points[0]-1;
    40018e38:	51000679 	sub	w25, w19, #0x1
      for (i = 1; i <= isize-1; i++) {
    40018e3c:	51000a73 	sub	w19, w19, #0x2
    40018e40:	52804b00 	mov	w0, #0x258                 	// #600
  for (k = 1; k <= grid_points[2]-2; k++) {
    40018e44:	912a035a 	add	x26, x26, #0xa80
    40018e48:	52800038 	mov	w24, #0x1                   	// #1
    40018e4c:	9b207f34 	smull	x20, w25, w0

      //---------------------------------------------------------------------
      // B(isize) = B(isize) - C(isize-1)*A(isize)
      //---------------------------------------------------------------------
      matmul_sub(lhs[isize][AA], lhs[isize-1][CC], lhs[isize][BB]);
    40018e50:	9b207260 	smaddl	x0, w19, w0, x28
      matvec_sub(lhs[isize][AA], rhs[k][j][isize-1], rhs[k][j][isize]);
    40018e54:	8b1c0281 	add	x1, x20, x28
    40018e58:	f9003be1 	str	x1, [sp, #112]
      matmul_sub(lhs[isize][AA], lhs[isize-1][CC], lhs[isize][BB]);
    40018e5c:	91064000 	add	x0, x0, #0x190
    40018e60:	52800501 	mov	w1, #0x28                  	// #40
    40018e64:	f90043e0 	str	x0, [sp, #128]
    40018e68:	52800960 	mov	w0, #0x4b                  	// #75
    40018e6c:	9b217e62 	smull	x2, w19, w1
    40018e70:	91032294 	add	x20, x20, #0xc8
    40018e74:	9b217f21 	smull	x1, w25, w1
    40018e78:	8b1c0294 	add	x20, x20, x28
    40018e7c:	9b207e60 	smull	x0, w19, w0
    40018e80:	f9004be1 	str	x1, [sp, #144]
    40018e84:	93407f21 	sxtw	x1, w25
    40018e88:	f90053e0 	str	x0, [sp, #160]
    40018e8c:	928004e0 	mov	x0, #0xffffffffffffffd8    	// #-40
    40018e90:	f9003fe2 	str	x2, [sp, #120]
    40018e94:	9b000820 	madd	x0, x1, x0, x2
    40018e98:	f90047e0 	str	x0, [sp, #136]
        tmp1 = rho_i[k][j][i];
    40018e9c:	f0000160 	adrp	x0, 40047000 <qs+0x3348>
    40018ea0:	91306000 	add	x0, x0, #0xc18
    40018ea4:	f9005fe0 	str	x0, [sp, #184]
  for (k = 1; k <= grid_points[2]-2; k++) {
    40018ea8:	b9400b40 	ldr	w0, [x26, #8]
    40018eac:	51000800 	sub	w0, w0, #0x2
    40018eb0:	6b18001f 	cmp	w0, w24
    40018eb4:	54005c6b 	b.lt	40019a40 <x_solve+0xc50>  // b.tstop
    40018eb8:	5280a900 	mov	w0, #0x548                 	// #1352
    40018ebc:	52834d17 	mov	w23, #0x1a68                	// #6760
    40018ec0:	f0000255 	adrp	x21, 40063000 <square+0x37a8>
    40018ec4:	911ee2b5 	add	x21, x21, #0x7b8
    40018ec8:	9b207f00 	smull	x0, w24, w0
    for (j = 1; j <= grid_points[1]-2; j++) {
    40018ecc:	52800036 	mov	w22, #0x1                   	// #1
    40018ed0:	f90057e0 	str	x0, [sp, #168]
    40018ed4:	9b377f17 	smull	x23, w24, w23
    40018ed8:	f9404be0 	ldr	x0, [sp, #144]
    40018edc:	8b0002e0 	add	x0, x23, x0
    40018ee0:	f9004fe0 	str	x0, [sp, #152]
    40018ee4:	140002a7 	b	40019980 <x_solve+0xb90>
        tmp1 = rho_i[k][j][i];
    40018ee8:	f9405fe7 	ldr	x7, [sp, #184]
        fjac[i][0][0] = 0.0;
    40018eec:	f900001f 	str	xzr, [x0]
        fjac[i][2][1] = - c2 * ( u[k][j][i][2] * tmp1 );
    40018ef0:	6d4098c2 	ldp	d2, d6, [x6, #8]
        fjac[i][2][0] = 0.0;
    40018ef4:	f900281f 	str	xzr, [x0, #80]
        tmp1 = rho_i[k][j][i];
    40018ef8:	fc676901 	ldr	d1, [x8, x7]
      for (i = 0; i <= isize; i++) {
    40018efc:	1100056b 	add	w11, w11, #0x1
          + c2 * qs[k][j][i];
    40018f00:	fc6a6908 	ldr	d8, [x8, x10]
    40018f04:	91032000 	add	x0, x0, #0xc8
        fjac[i][0][4] = ( c2 * 2.0 * square[k][j][i] - c1 * u[k][j][i][4] )
    40018f08:	6d41f0c5 	ldp	d5, d28, [x6, #24]
        tmp2 = tmp1 * tmp1;
    40018f0c:	1e610820 	fmul	d0, d1, d1
          + c2 * qs[k][j][i];
    40018f10:	1e670904 	fmul	d4, d8, d7
        fjac[i][0][2] = - ( u[k][j][i][1]*u[k][j][i][2] ) * tmp2;
    40018f14:	1e66085b 	fmul	d27, d2, d6
        fjac[i][2][2] = u[k][j][i][1] * tmp1;
    40018f18:	1e62083e 	fmul	d30, d1, d2
        fjac[i][2][3] = 0.0;
    40018f1c:	f81a001f 	stur	xzr, [x0, #-96]
        fjac[i][0][4] = ( c2 * 2.0 * square[k][j][i] - c1 * u[k][j][i][4] )
    40018f20:	1e750b9d 	fmul	d29, d28, d21
        fjac[i][3][0] = 0.0;
    40018f24:	f81b001f 	stur	xzr, [x0, #-80]
        fjac[i][0][1] = -(u[k][j][i][1] * tmp2 * u[k][j][i][1])
    40018f28:	1e62081f 	fmul	d31, d0, d2
        fjac[i][3][2] = 0.0;
    40018f2c:	f81c001f 	stur	xzr, [x0, #-64]
        fjac[i][4][0] = 0.0;
    40018f30:	f81d801f 	stur	xzr, [x0, #-40]
        tmp3 = tmp1 * tmp2;
    40018f34:	1e600833 	fmul	d19, d1, d0
        fjac[i][4][2] = 0.0;
    40018f38:	f81e801f 	stur	xzr, [x0, #-24]
    40018f3c:	9100a0c6 	add	x6, x6, #0x28
        fjac[i][4][3] = 0.0;
    40018f40:	f81f001f 	stur	xzr, [x0, #-16]
      for (i = 0; i <= isize; i++) {
    40018f44:	5280002c 	mov	w12, #0x1                   	// #1
        fjac[i][0][1] = -(u[k][j][i][1] * tmp2 * u[k][j][i][1])
    40018f48:	1e7f0843 	fmul	d3, d2, d31
        fjac[i][1][0] = 1.0;
    40018f4c:	fc160017 	stur	d23, [x0, #-160]
        fjac[i][2][2] = u[k][j][i][1] * tmp1;
    40018f50:	fc19801e 	stur	d30, [x0, #-104]
        fjac[i][3][3] = u[k][j][i][1] * tmp1;
    40018f54:	fc1c801e 	stur	d30, [x0, #-56]
        fjac[i][4][4] = c1 * ( u[k][j][i][1] * tmp1 );
    40018f58:	1e750bde 	fmul	d30, d30, d21
        fjac[i][4][1] = c2;
    40018f5c:	fc1e0007 	stur	d7, [x0, #-32]
          + c2 * qs[k][j][i];
    40018f60:	1e633884 	fsub	d4, d4, d3
        fjac[i][1][1] = ( 2.0 - c2 ) * ( u[k][j][i][1] / u[k][j][i][0] );
    40018f64:	1e673ac3 	fsub	d3, d22, d7
        fjac[i][0][1] = -(u[k][j][i][1] * tmp2 * u[k][j][i][1])
    40018f68:	fc140004 	stur	d4, [x0, #-192]
        fjac[i][1][1] = ( 2.0 - c2 ) * ( u[k][j][i][1] / u[k][j][i][0] );
    40018f6c:	fc5d80c4 	ldur	d4, [x6, #-40]
    40018f70:	1e641844 	fdiv	d4, d2, d4
    40018f74:	1e630884 	fmul	d4, d4, d3
    40018f78:	fc168004 	stur	d4, [x0, #-152]
        fjac[i][2][1] = - c2 * ( u[k][j][i][2] * tmp1 );
    40018f7c:	1e660824 	fmul	d4, d1, d6
    40018f80:	1e640a43 	fmul	d3, d18, d4
        fjac[i][1][2] = u[k][j][i][2] * tmp1;
    40018f84:	fc170004 	stur	d4, [x0, #-144]
        fjac[i][2][1] = - c2 * ( u[k][j][i][2] * tmp1 );
    40018f88:	fc190003 	stur	d3, [x0, #-112]
        fjac[i][3][1] = - c2 * ( u[k][j][i][3] * tmp1 );
    40018f8c:	1e650823 	fmul	d3, d1, d5
    40018f90:	1e630a5a 	fmul	d26, d18, d3
        fjac[i][1][3] = u[k][j][i][3] * tmp1;
    40018f94:	fc178003 	stur	d3, [x0, #-136]
        fjac[i][0][4] = ( c2 * 2.0 * square[k][j][i] - c1 * u[k][j][i][4] )
    40018f98:	1e6728e3 	fadd	d3, d7, d7
        fjac[i][3][1] = - c2 * ( u[k][j][i][3] * tmp1 );
    40018f9c:	fc1b801a 	stur	d26, [x0, #-72]
        fjac[i][0][2] = - ( u[k][j][i][1]*u[k][j][i][2] ) * tmp2;
    40018fa0:	1e608b7a 	fnmul	d26, d27, d0
        fjac[i][2][4] = - c2 * ( u[k][j][i][2]*u[k][j][i][1] ) * tmp2;
    40018fa4:	1e7b0a5b 	fmul	d27, d18, d27
        fjac[i][0][2] = - ( u[k][j][i][1]*u[k][j][i][2] ) * tmp2;
    40018fa8:	fc14801a 	stur	d26, [x0, #-184]
        fjac[i][0][3] = - ( u[k][j][i][1]*u[k][j][i][3] ) * tmp2;
    40018fac:	1e65085a 	fmul	d26, d2, d5
        fjac[i][2][4] = - c2 * ( u[k][j][i][2]*u[k][j][i][1] ) * tmp2;
    40018fb0:	1e600b7b 	fmul	d27, d27, d0
        fjac[i][0][3] = - ( u[k][j][i][1]*u[k][j][i][3] ) * tmp2;
    40018fb4:	1e608b44 	fnmul	d4, d26, d0
        fjac[i][3][4] = - c2 * ( u[k][j][i][3]*u[k][j][i][1] ) * tmp2;
    40018fb8:	1e7a0a5a 	fmul	d26, d18, d26
        fjac[i][2][4] = - c2 * ( u[k][j][i][2]*u[k][j][i][1] ) * tmp2;
    40018fbc:	fc1a801b 	stur	d27, [x0, #-88]
          - ( c3c4 - c1345 ) * tmp3 * (u[k][j][i][2]*u[k][j][i][2])
    40018fc0:	1e6608db 	fmul	d27, d6, d6
        fjac[i][0][3] = - ( u[k][j][i][1]*u[k][j][i][3] ) * tmp2;
    40018fc4:	fc150004 	stur	d4, [x0, #-176]
        fjac[i][3][4] = - c2 * ( u[k][j][i][3]*u[k][j][i][1] ) * tmp2;
    40018fc8:	1e600b5a 	fmul	d26, d26, d0
        fjac[i][0][4] = ( c2 * 2.0 * square[k][j][i] - c1 * u[k][j][i][4] )
    40018fcc:	fc616904 	ldr	d4, [x8, x1]
    40018fd0:	91002108 	add	x8, x8, #0x8
    40018fd4:	1e640863 	fmul	d3, d3, d4
    40018fd8:	1e7d3863 	fsub	d3, d3, d29
        fjac[i][1][4] = c1 *  u[k][j][i][4] * tmp1 
    40018fdc:	1e7d083d 	fmul	d29, d1, d29
          * ( u[k][j][i][1] * tmp2 );
    40018fe0:	1e7f0863 	fmul	d3, d3, d31
          - c2 * ( u[k][j][i][1]*u[k][j][i][1] * tmp2 + qs[k][j][i] );
    40018fe4:	1e62085f 	fmul	d31, d2, d2
        fjac[i][0][4] = ( c2 * 2.0 * square[k][j][i] - c1 * u[k][j][i][4] )
    40018fe8:	fc158003 	stur	d3, [x0, #-168]
          - c2 * ( u[k][j][i][1]*u[k][j][i][1] * tmp2 + qs[k][j][i] );
    40018fec:	1e7f0803 	fmul	d3, d0, d31
    40018ff0:	1e682863 	fadd	d3, d3, d8
    40018ff4:	1e670863 	fmul	d3, d3, d7
    40018ff8:	1e633bbd 	fsub	d29, d29, d3
        njac[i][0][1] = - con43 * c3c4 * tmp2 * u[k][j][i][1];
    40018ffc:	1e700b23 	fmul	d3, d25, d16
    40019000:	1e600863 	fmul	d3, d3, d0
        fjac[i][1][4] = c1 *  u[k][j][i][4] * tmp1 
    40019004:	fc18001d 	stur	d29, [x0, #-128]
        fjac[i][3][4] = - c2 * ( u[k][j][i][3]*u[k][j][i][1] ) * tmp2;
    40019008:	fc1d001a 	stur	d26, [x0, #-48]
          - ( c3c4 - c1345 ) * tmp3 * (u[k][j][i][2]*u[k][j][i][2])
    4001900c:	1e713a1a 	fsub	d26, d16, d17
        njac[i][0][0] = 0.0;
    40019010:	f90000bf 	str	xzr, [x5]
        njac[i][1][0] = 0.0;
    40019014:	f90014bf 	str	xzr, [x5, #40]
        njac[i][0][1] = - con43 * c3c4 * tmp2 * u[k][j][i][1];
    40019018:	1e620863 	fmul	d3, d3, d2
        njac[i][1][2] =   0.0;
    4001901c:	f9001cbf 	str	xzr, [x5, #56]
          - ( c3c4 - c1345 ) * tmp3 * (u[k][j][i][2]*u[k][j][i][2])
    40019020:	1e7a0a7d 	fmul	d29, d19, d26
        njac[i][1][3] =   0.0;
    40019024:	f90020bf 	str	xzr, [x5, #64]
        njac[i][2][0] = 0.0;
    40019028:	f90028bf 	str	xzr, [x5, #80]
        njac[i][2][1] =   0.0;
    4001902c:	f9002cbf 	str	xzr, [x5, #88]
        njac[i][0][1] = - con43 * c3c4 * tmp2 * u[k][j][i][1];
    40019030:	fd0004a3 	str	d3, [x5, #8]
        njac[i][1][1] =   con43 * c3c4 * tmp1;
    40019034:	1e700a83 	fmul	d3, d20, d16
          - ( c3c4 - c1345 ) * tmp3 * (u[k][j][i][2]*u[k][j][i][2])
    40019038:	1e7d0b7b 	fmul	d27, d27, d29
        njac[i][2][3] =   0.0;
    4001903c:	f90034bf 	str	xzr, [x5, #104]
        njac[i][3][0] = 0.0;
    40019040:	f9003cbf 	str	xzr, [x5, #120]
        njac[i][3][1] =   0.0;
    40019044:	f90040bf 	str	xzr, [x5, #128]
        njac[i][1][1] =   con43 * c3c4 * tmp1;
    40019048:	1e630824 	fmul	d4, d1, d3
            - c1345 ) * tmp3 * (u[k][j][i][1]*u[k][j][i][1])
    4001904c:	1e713863 	fsub	d3, d3, d17
        njac[i][3][2] =   0.0;
    40019050:	f90044bf 	str	xzr, [x5, #136]
        njac[i][4][0] = 0.0;
    40019054:	f90050bf 	str	xzr, [x5, #160]
        njac[i][4][1] =   0.0;
    40019058:	f90054bf 	str	xzr, [x5, #168]
        njac[i][1][1] =   con43 * c3c4 * tmp1;
    4001905c:	fd0018a4 	str	d4, [x5, #48]
        njac[i][0][2] = - c3c4 * tmp2 * u[k][j][i][2];
    40019060:	1e780804 	fmul	d4, d0, d24
        njac[i][4][2] =   0.0;
    40019064:	f90058bf 	str	xzr, [x5, #176]
        njac[i][4][3] =   0.0;
    40019068:	f9005cbf 	str	xzr, [x5, #184]
        fjac[i][4][4] = c1 * ( u[k][j][i][1] * tmp1 );
    4001906c:	fc1f801e 	stur	d30, [x0, #-8]
        njac[i][0][2] = - c3c4 * tmp2 * u[k][j][i][2];
    40019070:	1e6408c8 	fmul	d8, d6, d4
        njac[i][0][3] = - c3c4 * tmp2 * u[k][j][i][3];
    40019074:	1e6408a4 	fmul	d4, d5, d4
    40019078:	6d0110a8 	stp	d8, d4, [x5, #16]
        njac[i][2][2] =   c3c4 * tmp1;
    4001907c:	1e700828 	fmul	d8, d1, d16
            - c1345 ) * tmp3 * (u[k][j][i][1]*u[k][j][i][1])
    40019080:	1e738864 	fnmul	d4, d3, d19
            - c1345 ) * tmp2 * u[k][j][i][1];
    40019084:	1e630803 	fmul	d3, d0, d3
    40019088:	910320a5 	add	x5, x5, #0xc8
        njac[i][2][2] =   c3c4 * tmp1;
    4001908c:	fc1980a8 	stur	d8, [x5, #-104]
            - c1345 ) * tmp3 * (u[k][j][i][1]*u[k][j][i][1])
    40019090:	1e7f0884 	fmul	d4, d4, d31
        njac[i][3][3] =   c3c4 * tmp1;
    40019094:	fc1c80a8 	stur	d8, [x5, #-56]
          - ( c3c4 - c1345 ) * tmp3 * (u[k][j][i][3]*u[k][j][i][3])
    40019098:	1e6508a8 	fmul	d8, d5, d5
            - c1345 ) * tmp2 * u[k][j][i][1];
    4001909c:	1e620862 	fmul	d2, d3, d2
          - ( c3c4 - c1345 ) * tmp3 * (u[k][j][i][2]*u[k][j][i][2])
    400190a0:	1e7b3884 	fsub	d4, d4, d27
          - ( c3c4 - c1345 ) * tmp3 * (u[k][j][i][3]*u[k][j][i][3])
    400190a4:	1e7d0908 	fmul	d8, d8, d29
        njac[i][1][4] = ( con43 * c3c4
    400190a8:	fc1800a2 	stur	d2, [x5, #-128]
        njac[i][2][4] = ( c3c4 - c1345 ) * tmp2 * u[k][j][i][2];
    400190ac:	1e7a0802 	fmul	d2, d0, d26
          - ( c3c4 - c1345 ) * tmp3 * (u[k][j][i][3]*u[k][j][i][3])
    400190b0:	1e683884 	fsub	d4, d4, d8
          - c1345 * tmp2 * u[k][j][i][4];
    400190b4:	1e710808 	fmul	d8, d0, d17
        njac[i][2][4] = ( c3c4 - c1345 ) * tmp2 * u[k][j][i][2];
    400190b8:	1e6208c3 	fmul	d3, d6, d2
        njac[i][3][4] = ( c3c4 - c1345 ) * tmp2 * u[k][j][i][3];
    400190bc:	1e6208a2 	fmul	d2, d5, d2
          - c1345 * tmp2 * u[k][j][i][4];
    400190c0:	1e7c091c 	fmul	d28, d8, d28
        njac[i][3][4] = ( c3c4 - c1345 ) * tmp2 * u[k][j][i][3];
    400190c4:	fc1d00a2 	stur	d2, [x5, #-48]
        njac[i][4][4] = ( c1345 ) * tmp1;
    400190c8:	1e710822 	fmul	d2, d1, d17
        njac[i][2][4] = ( c3c4 - c1345 ) * tmp2 * u[k][j][i][2];
    400190cc:	fc1a80a3 	stur	d3, [x5, #-88]
          - c1345 * tmp2 * u[k][j][i][4];
    400190d0:	1e7c3884 	fsub	d4, d4, d28
        njac[i][4][4] = ( c1345 ) * tmp1;
    400190d4:	fc1f80a2 	stur	d2, [x5, #-8]
        njac[i][0][4] = - ( con43 * c3c4
    400190d8:	fc1580a4 	stur	d4, [x5, #-168]
      for (i = 0; i <= isize; i++) {
    400190dc:	6b19017f 	cmp	w11, w25
    400190e0:	54fff04d 	b.le	40018ee8 <x_solve+0xf8>
    400190e4:	3400008c 	cbz	w12, 400190f4 <x_solve+0x304>
    400190e8:	fd03e120 	str	d0, [x9, #1984]
    400190ec:	fd03e5b3 	str	d19, [x13, #1992]
    400190f0:	fd0002a1 	str	d1, [x21]
      lhsinit(lhs, isize);
    400190f4:	2a1903e1 	mov	w1, w25
    400190f8:	aa1c03e0 	mov	x0, x28
    400190fc:	a90c0fe4 	stp	x4, x3, [sp, #192]
    40019100:	f9006be2 	str	x2, [sp, #208]
    40019104:	97ffed56 	bl	4001465c <lhsinit>
        tmp1 = dt * tx1;
    40019108:	f0000080 	adrp	x0, 4002c000 <z_idle_threads>
    4001910c:	fd45b007 	ldr	d7, [x0, #2912]
    40019110:	d0000240 	adrp	x0, 40063000 <square+0x37a8>
    40019114:	fd43e815 	ldr	d21, [x0, #2000]
        tmp2 = dt * tx2;
    40019118:	d0000240 	adrp	x0, 40063000 <square+0x37a8>
    4001911c:	fd43ec16 	ldr	d22, [x0, #2008]
          - tmp1 * dx1; 
    40019120:	f0000080 	adrp	x0, 4002c000 <z_idle_threads>
    40019124:	fd45d010 	ldr	d16, [x0, #2976]
          - tmp1 * dx2;
    40019128:	f0000080 	adrp	x0, 4002c000 <z_idle_threads>
    4001912c:	fd45d811 	ldr	d17, [x0, #2992]
          - tmp1 * dx3;
    40019130:	f0000080 	adrp	x0, 4002c000 <z_idle_threads>
    40019134:	fd45e012 	ldr	d18, [x0, #3008]
      for (i = 1; i <= isize-1; i++) {
    40019138:	a94c0fe4 	ldp	x4, x3, [sp, #192]
          - tmp1 * dx4;
    4001913c:	f0000080 	adrp	x0, 4002c000 <z_idle_threads>
    40019140:	fd45e813 	ldr	d19, [x0, #3024]
          - tmp1 * dx5;
    40019144:	f0000080 	adrp	x0, 4002c000 <z_idle_threads>
    40019148:	fd45f014 	ldr	d20, [x0, #3040]
    4001914c:	d0000249 	adrp	x9, 40063000 <square+0x37a8>
    40019150:	fd43e122 	ldr	d2, [x9, #1984]
      for (i = 1; i <= isize-1; i++) {
    40019154:	aa1c03e0 	mov	x0, x28
    40019158:	f9406be2 	ldr	x2, [sp, #208]
    4001915c:	52800005 	mov	w5, #0x0                   	// #0
    40019160:	fd4002a0 	ldr	d0, [x21]
    40019164:	52800021 	mov	w1, #0x1                   	// #1
          + tmp1 * 2.0 * njac[i][0][0]
    40019168:	1e6e1006 	fmov	d6, #1.000000000000000000e+00
      for (i = 1; i <= isize-1; i++) {
    4001916c:	91032063 	add	x3, x3, #0xc8
    40019170:	91096000 	add	x0, x0, #0x258
    40019174:	6b01027f 	cmp	w19, w1
    40019178:	5400068a 	b.ge	40019248 <x_solve+0x458>  // b.tcont
    4001917c:	34000065 	cbz	w5, 40019188 <x_solve+0x398>
    40019180:	fd03e122 	str	d2, [x9, #1984]
    40019184:	fd0002a0 	str	d0, [x21]
      binvcrhs( lhs[0][BB], lhs[0][CC], rhs[k][j][0] );
    40019188:	d0000184 	adrp	x4, 4004b000 <rho_i+0x33e8>
    4001918c:	912de084 	add	x4, x4, #0xb78
    40019190:	8b040042 	add	x2, x2, x4
    40019194:	90000141 	adrp	x1, 40041000 <forcing+0x13930>
    40019198:	91150021 	add	x1, x1, #0x540
    4001919c:	90000140 	adrp	x0, 40041000 <forcing+0x13930>
    400191a0:	9111e000 	add	x0, x0, #0x478
    400191a4:	f90063e2 	str	x2, [sp, #192]
    400191a8:	97fff7cc 	bl	400170d8 <binvcrhs>
      for (i = 1; i <= isize-1; i++) {
    400191ac:	f94063e2 	ldr	x2, [sp, #192]
    400191b0:	aa1c03e3 	mov	x3, x28
    400191b4:	52800025 	mov	w5, #0x1                   	// #1
    400191b8:	aa0203e1 	mov	x1, x2
    400191bc:	d0000180 	adrp	x0, 4004b000 <rho_i+0x33e8>
    400191c0:	912de004 	add	x4, x0, #0xb78
    400191c4:	91096068 	add	x8, x3, #0x258
    400191c8:	9100a026 	add	x6, x1, #0x28
    400191cc:	6b05027f 	cmp	w19, w5
    400191d0:	5400376a 	b.ge	400198bc <x_solve+0xacc>  // b.tcont
      matvec_sub(lhs[isize][AA], rhs[k][j][isize-1], rhs[k][j][isize]);
    400191d4:	f9404fe0 	ldr	x0, [sp, #152]
    400191d8:	8b1b0001 	add	x1, x0, x27
    400191dc:	f9403fe0 	ldr	x0, [sp, #120]
    400191e0:	8b010083 	add	x3, x4, x1
    400191e4:	aa0303e2 	mov	x2, x3
    400191e8:	f90063e3 	str	x3, [sp, #192]
    400191ec:	8b0002e1 	add	x1, x23, x0
    400191f0:	f9403be0 	ldr	x0, [sp, #112]
    400191f4:	8b1b0021 	add	x1, x1, x27
    400191f8:	8b010081 	add	x1, x4, x1
    400191fc:	97fff522 	bl	40016684 <matvec_sub>
      matmul_sub(lhs[isize][AA], lhs[isize-1][CC], lhs[isize][BB]);
    40019200:	f9403be0 	ldr	x0, [sp, #112]
    40019204:	aa1403e2 	mov	x2, x20
    40019208:	f94043e1 	ldr	x1, [sp, #128]
    4001920c:	97fff589 	bl	40016830 <matmul_sub>

      //---------------------------------------------------------------------
      // multiply rhs() by b_inverse() and copy to rhs
      //---------------------------------------------------------------------
      binvrhs( lhs[isize][BB], rhs[k][j][isize] );
    40019210:	f94063e3 	ldr	x3, [sp, #192]
    40019214:	aa1403e0 	mov	x0, x20
    40019218:	aa0303e1 	mov	x1, x3
    4001921c:	97fffb6e 	bl	40017fd4 <binvrhs>
      // back solve: if last cell, then generate U(isize)=rhs(isize)
      // else assume U(isize) is loaded in un pack backsub_info
      // so just use it
      // after u(istart) will be sent to next cell
      //---------------------------------------------------------------------
      for (i = isize-1; i >=0; i--) {
    40019220:	f94063e3 	ldr	x3, [sp, #192]
    40019224:	2a1303e5 	mov	w5, w19
    40019228:	f94053e4 	ldr	x4, [sp, #160]
    4001922c:	aa0303e1 	mov	x1, x3
    40019230:	37f83a65 	tbnz	w5, #31, 4001997c <x_solve+0xb8c>
    40019234:	f94047e0 	ldr	x0, [sp, #136]
    40019238:	8b040f88 	add	x8, x28, x4, lsl #3
    4001923c:	8b010002 	add	x2, x0, x1
    40019240:	d2800000 	mov	x0, #0x0                   	// #0
    40019244:	140001c7 	b	40019960 <x_solve+0xb70>
        tmp2 = dt * tx2;
    40019248:	1e7608e2 	fmul	d2, d7, d22
        tmp1 = dt * tx1;
    4001924c:	1e7508e0 	fmul	d0, d7, d21
          - tmp1 * njac[i-1][0][0]
    40019250:	fc538064 	ldur	d4, [x3, #-200]
        lhs[i][CC][0][0] =  tmp2 * fjac[i+1][0][0]
    40019254:	11000421 	add	w1, w1, #0x1
        lhs[i][AA][0][0] = - tmp2 * fjac[i-1][0][0]
    40019258:	fd400083 	ldr	d3, [x4]
        lhs[i][CC][4][4] =  tmp2 * fjac[i+1][4][4]
    4001925c:	52800025 	mov	w5, #0x1                   	// #1
    40019260:	91032084 	add	x4, x4, #0xc8
        lhs[i][AA][0][0] = - tmp2 * fjac[i-1][0][0]
    40019264:	1e614041 	fneg	d1, d2
          - tmp1 * njac[i-1][0][0]
    40019268:	1e640804 	fmul	d4, d0, d4
          - tmp1 * dx1; 
    4001926c:	1e700805 	fmul	d5, d0, d16
          - tmp1 * dx2;
    40019270:	1e710819 	fmul	d25, d0, d17
          - tmp1 * dx4;
    40019274:	1e730818 	fmul	d24, d0, d19
          - tmp1 * dx5;
    40019278:	1e740817 	fmul	d23, d0, d20
        lhs[i][AA][0][0] = - tmp2 * fjac[i-1][0][0]
    4001927c:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[i-1][0][0]
    40019280:	1e643863 	fsub	d3, d3, d4
          - tmp1 * njac[i-1][1][0];
    40019284:	fc560064 	ldur	d4, [x3, #-160]
    40019288:	1e640804 	fmul	d4, d0, d4
          - tmp1 * dx1; 
    4001928c:	1e653863 	fsub	d3, d3, d5
        lhs[i][AA][0][0] = - tmp2 * fjac[i-1][0][0]
    40019290:	fd000003 	str	d3, [x0]
        lhs[i][AA][1][0] = - tmp2 * fjac[i-1][1][0]
    40019294:	fc560083 	ldur	d3, [x4, #-160]
    40019298:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[i-1][1][0];
    4001929c:	1e643863 	fsub	d3, d3, d4
          - tmp1 * njac[i-1][2][0];
    400192a0:	fc588064 	ldur	d4, [x3, #-120]
    400192a4:	1e640804 	fmul	d4, d0, d4
        lhs[i][AA][1][0] = - tmp2 * fjac[i-1][1][0]
    400192a8:	fd001403 	str	d3, [x0, #40]
        lhs[i][AA][2][0] = - tmp2 * fjac[i-1][2][0]
    400192ac:	fc588083 	ldur	d3, [x4, #-120]
    400192b0:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[i-1][2][0];
    400192b4:	1e643863 	fsub	d3, d3, d4
          - tmp1 * njac[i-1][3][0];
    400192b8:	fc5b0064 	ldur	d4, [x3, #-80]
    400192bc:	1e640804 	fmul	d4, d0, d4
        lhs[i][AA][2][0] = - tmp2 * fjac[i-1][2][0]
    400192c0:	fd002803 	str	d3, [x0, #80]
        lhs[i][AA][3][0] = - tmp2 * fjac[i-1][3][0]
    400192c4:	fc5b0083 	ldur	d3, [x4, #-80]
    400192c8:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[i-1][3][0];
    400192cc:	1e643863 	fsub	d3, d3, d4
          - tmp1 * njac[i-1][4][0];
    400192d0:	fc5d8064 	ldur	d4, [x3, #-40]
    400192d4:	1e640804 	fmul	d4, d0, d4
        lhs[i][AA][3][0] = - tmp2 * fjac[i-1][3][0]
    400192d8:	fd003c03 	str	d3, [x0, #120]
        lhs[i][AA][4][0] = - tmp2 * fjac[i-1][4][0]
    400192dc:	fc5d8083 	ldur	d3, [x4, #-40]
    400192e0:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[i-1][4][0];
    400192e4:	1e643863 	fsub	d3, d3, d4
          - tmp1 * njac[i-1][0][1];
    400192e8:	fc540064 	ldur	d4, [x3, #-192]
    400192ec:	1e640804 	fmul	d4, d0, d4
        lhs[i][AA][4][0] = - tmp2 * fjac[i-1][4][0]
    400192f0:	fd005003 	str	d3, [x0, #160]
        lhs[i][AA][0][1] = - tmp2 * fjac[i-1][0][1]
    400192f4:	fc540083 	ldur	d3, [x4, #-192]
    400192f8:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[i-1][0][1];
    400192fc:	1e643863 	fsub	d3, d3, d4
          - tmp1 * njac[i-1][1][1]
    40019300:	fc568064 	ldur	d4, [x3, #-152]
    40019304:	1e640804 	fmul	d4, d0, d4
        lhs[i][AA][0][1] = - tmp2 * fjac[i-1][0][1]
    40019308:	fd000403 	str	d3, [x0, #8]
        lhs[i][AA][1][1] = - tmp2 * fjac[i-1][1][1]
    4001930c:	fc568083 	ldur	d3, [x4, #-152]
    40019310:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[i-1][1][1]
    40019314:	1e643863 	fsub	d3, d3, d4
          - tmp1 * njac[i-1][2][1];
    40019318:	fc590064 	ldur	d4, [x3, #-112]
    4001931c:	1e640804 	fmul	d4, d0, d4
          - tmp1 * dx2;
    40019320:	1e793863 	fsub	d3, d3, d25
        lhs[i][AA][1][1] = - tmp2 * fjac[i-1][1][1]
    40019324:	fd001803 	str	d3, [x0, #48]
        lhs[i][AA][2][1] = - tmp2 * fjac[i-1][2][1]
    40019328:	fc590083 	ldur	d3, [x4, #-112]
    4001932c:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[i-1][2][1];
    40019330:	1e643863 	fsub	d3, d3, d4
          - tmp1 * njac[i-1][3][1];
    40019334:	fc5b8064 	ldur	d4, [x3, #-72]
    40019338:	1e640804 	fmul	d4, d0, d4
        lhs[i][AA][2][1] = - tmp2 * fjac[i-1][2][1]
    4001933c:	fd002c03 	str	d3, [x0, #88]
        lhs[i][AA][3][1] = - tmp2 * fjac[i-1][3][1]
    40019340:	fc5b8083 	ldur	d3, [x4, #-72]
    40019344:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[i-1][3][1];
    40019348:	1e643863 	fsub	d3, d3, d4
          - tmp1 * njac[i-1][4][1];
    4001934c:	fc5e0064 	ldur	d4, [x3, #-32]
    40019350:	1e640804 	fmul	d4, d0, d4
        lhs[i][AA][3][1] = - tmp2 * fjac[i-1][3][1]
    40019354:	fd004003 	str	d3, [x0, #128]
        lhs[i][AA][4][1] = - tmp2 * fjac[i-1][4][1]
    40019358:	fc5e0083 	ldur	d3, [x4, #-32]
    4001935c:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[i-1][4][1];
    40019360:	1e643863 	fsub	d3, d3, d4
          - tmp1 * njac[i-1][0][2];
    40019364:	fc548064 	ldur	d4, [x3, #-184]
    40019368:	1e640804 	fmul	d4, d0, d4
        lhs[i][AA][4][1] = - tmp2 * fjac[i-1][4][1]
    4001936c:	fd005403 	str	d3, [x0, #168]
        lhs[i][AA][0][2] = - tmp2 * fjac[i-1][0][2]
    40019370:	fc548083 	ldur	d3, [x4, #-184]
    40019374:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[i-1][0][2];
    40019378:	1e643863 	fsub	d3, d3, d4
        lhs[i][AA][0][2] = - tmp2 * fjac[i-1][0][2]
    4001937c:	fd000803 	str	d3, [x0, #16]
        lhs[i][AA][1][2] = - tmp2 * fjac[i-1][1][2]
    40019380:	fc570083 	ldur	d3, [x4, #-144]
          - tmp1 * njac[i-1][1][2];
    40019384:	fc570064 	ldur	d4, [x3, #-144]
          - tmp1 * njac[i-1][2][2]
    40019388:	fc598068 	ldur	d8, [x3, #-104]
        lhs[i][AA][1][2] = - tmp2 * fjac[i-1][1][2]
    4001938c:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[i-1][1][2];
    40019390:	1e640804 	fmul	d4, d0, d4
          - tmp1 * njac[i-1][2][2]
    40019394:	1e680808 	fmul	d8, d0, d8
          - tmp1 * njac[i-1][1][2];
    40019398:	1e643863 	fsub	d3, d3, d4
        lhs[i][AA][2][2] = - tmp2 * fjac[i-1][2][2]
    4001939c:	fc598084 	ldur	d4, [x4, #-104]
    400193a0:	1e640824 	fmul	d4, d1, d4
        lhs[i][AA][1][2] = - tmp2 * fjac[i-1][1][2]
    400193a4:	fd001c03 	str	d3, [x0, #56]
          - tmp1 * dx3;
    400193a8:	1e720803 	fmul	d3, d0, d18
          - tmp1 * njac[i-1][2][2]
    400193ac:	1e683884 	fsub	d4, d4, d8
          - tmp1 * njac[i-1][3][2];
    400193b0:	fc5c0068 	ldur	d8, [x3, #-64]
    400193b4:	1e680808 	fmul	d8, d0, d8
          - tmp1 * dx3;
    400193b8:	1e633884 	fsub	d4, d4, d3
        lhs[i][AA][2][2] = - tmp2 * fjac[i-1][2][2]
    400193bc:	fd003004 	str	d4, [x0, #96]
        lhs[i][AA][3][2] = - tmp2 * fjac[i-1][3][2]
    400193c0:	fc5c0084 	ldur	d4, [x4, #-64]
    400193c4:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[i-1][3][2];
    400193c8:	1e683884 	fsub	d4, d4, d8
          - tmp1 * njac[i-1][4][2];
    400193cc:	fc5e8068 	ldur	d8, [x3, #-24]
    400193d0:	1e680808 	fmul	d8, d0, d8
        lhs[i][AA][3][2] = - tmp2 * fjac[i-1][3][2]
    400193d4:	fd004404 	str	d4, [x0, #136]
        lhs[i][AA][4][2] = - tmp2 * fjac[i-1][4][2]
    400193d8:	fc5e8084 	ldur	d4, [x4, #-24]
    400193dc:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[i-1][4][2];
    400193e0:	1e683884 	fsub	d4, d4, d8
          - tmp1 * njac[i-1][0][3];
    400193e4:	fc550068 	ldur	d8, [x3, #-176]
    400193e8:	1e680808 	fmul	d8, d0, d8
        lhs[i][AA][4][2] = - tmp2 * fjac[i-1][4][2]
    400193ec:	fd005804 	str	d4, [x0, #176]
        lhs[i][AA][0][3] = - tmp2 * fjac[i-1][0][3]
    400193f0:	fc550084 	ldur	d4, [x4, #-176]
    400193f4:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[i-1][0][3];
    400193f8:	1e683884 	fsub	d4, d4, d8
          - tmp1 * njac[i-1][1][3];
    400193fc:	fc578068 	ldur	d8, [x3, #-136]
    40019400:	1e680808 	fmul	d8, d0, d8
        lhs[i][AA][0][3] = - tmp2 * fjac[i-1][0][3]
    40019404:	fd000c04 	str	d4, [x0, #24]
        lhs[i][AA][1][3] = - tmp2 * fjac[i-1][1][3]
    40019408:	fc578084 	ldur	d4, [x4, #-136]
    4001940c:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[i-1][1][3];
    40019410:	1e683884 	fsub	d4, d4, d8
          - tmp1 * njac[i-1][2][3];
    40019414:	fc5a0068 	ldur	d8, [x3, #-96]
    40019418:	1e680808 	fmul	d8, d0, d8
        lhs[i][AA][1][3] = - tmp2 * fjac[i-1][1][3]
    4001941c:	fd002004 	str	d4, [x0, #64]
        lhs[i][AA][2][3] = - tmp2 * fjac[i-1][2][3]
    40019420:	fc5a0084 	ldur	d4, [x4, #-96]
    40019424:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[i-1][2][3];
    40019428:	1e683884 	fsub	d4, d4, d8
          - tmp1 * njac[i-1][3][3]
    4001942c:	fc5c8068 	ldur	d8, [x3, #-56]
    40019430:	1e680808 	fmul	d8, d0, d8
        lhs[i][AA][2][3] = - tmp2 * fjac[i-1][2][3]
    40019434:	fd003404 	str	d4, [x0, #104]
        lhs[i][AA][3][3] = - tmp2 * fjac[i-1][3][3]
    40019438:	fc5c8084 	ldur	d4, [x4, #-56]
    4001943c:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[i-1][3][3]
    40019440:	1e683884 	fsub	d4, d4, d8
          - tmp1 * njac[i-1][4][3];
    40019444:	fc5f0068 	ldur	d8, [x3, #-16]
    40019448:	1e680808 	fmul	d8, d0, d8
          - tmp1 * dx4;
    4001944c:	1e783884 	fsub	d4, d4, d24
        lhs[i][AA][3][3] = - tmp2 * fjac[i-1][3][3]
    40019450:	fd004804 	str	d4, [x0, #144]
        lhs[i][AA][4][3] = - tmp2 * fjac[i-1][4][3]
    40019454:	fc5f0084 	ldur	d4, [x4, #-16]
    40019458:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[i-1][4][3];
    4001945c:	1e683884 	fsub	d4, d4, d8
          - tmp1 * njac[i-1][0][4];
    40019460:	fc558068 	ldur	d8, [x3, #-168]
    40019464:	1e680808 	fmul	d8, d0, d8
        lhs[i][AA][4][3] = - tmp2 * fjac[i-1][4][3]
    40019468:	fd005c04 	str	d4, [x0, #184]
        lhs[i][AA][0][4] = - tmp2 * fjac[i-1][0][4]
    4001946c:	fc558084 	ldur	d4, [x4, #-168]
    40019470:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[i-1][0][4];
    40019474:	1e683884 	fsub	d4, d4, d8
          - tmp1 * njac[i-1][1][4];
    40019478:	fc580068 	ldur	d8, [x3, #-128]
    4001947c:	1e680808 	fmul	d8, d0, d8
        lhs[i][AA][0][4] = - tmp2 * fjac[i-1][0][4]
    40019480:	fd001004 	str	d4, [x0, #32]
        lhs[i][AA][1][4] = - tmp2 * fjac[i-1][1][4]
    40019484:	fc580084 	ldur	d4, [x4, #-128]
    40019488:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[i-1][1][4];
    4001948c:	1e683884 	fsub	d4, d4, d8
        lhs[i][AA][1][4] = - tmp2 * fjac[i-1][1][4]
    40019490:	fd002404 	str	d4, [x0, #72]
        lhs[i][AA][2][4] = - tmp2 * fjac[i-1][2][4]
    40019494:	fc5a8084 	ldur	d4, [x4, #-88]
          - tmp1 * njac[i-1][2][4];
    40019498:	fc5a8068 	ldur	d8, [x3, #-88]
        lhs[i][AA][2][4] = - tmp2 * fjac[i-1][2][4]
    4001949c:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[i-1][2][4];
    400194a0:	1e680808 	fmul	d8, d0, d8
    400194a4:	1e683884 	fsub	d4, d4, d8
          - tmp1 * njac[i-1][3][4];
    400194a8:	fc5d0068 	ldur	d8, [x3, #-48]
    400194ac:	1e680808 	fmul	d8, d0, d8
        lhs[i][AA][2][4] = - tmp2 * fjac[i-1][2][4]
    400194b0:	fd003804 	str	d4, [x0, #112]
        lhs[i][AA][3][4] = - tmp2 * fjac[i-1][3][4]
    400194b4:	fc5d0084 	ldur	d4, [x4, #-48]
    400194b8:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[i-1][3][4];
    400194bc:	1e683884 	fsub	d4, d4, d8
        lhs[i][AA][3][4] = - tmp2 * fjac[i-1][3][4]
    400194c0:	fd004c04 	str	d4, [x0, #152]
        lhs[i][AA][4][4] = - tmp2 * fjac[i-1][4][4]
    400194c4:	fc5f8084 	ldur	d4, [x4, #-8]
    400194c8:	1e640821 	fmul	d1, d1, d4
          - tmp1 * njac[i-1][4][4]
    400194cc:	fc5f8064 	ldur	d4, [x3, #-8]
    400194d0:	1e640804 	fmul	d4, d0, d4
    400194d4:	1e643821 	fsub	d1, d1, d4
          + tmp1 * 2.0 * njac[i][0][0]
    400194d8:	fd400064 	ldr	d4, [x3]
          - tmp1 * dx5;
    400194dc:	1e773821 	fsub	d1, d1, d23
        lhs[i][AA][4][4] = - tmp2 * fjac[i-1][4][4]
    400194e0:	fd006001 	str	d1, [x0, #192]
          + tmp1 * 2.0 * njac[i][0][0]
    400194e4:	1e602801 	fadd	d1, d0, d0
    400194e8:	1e640824 	fmul	d4, d1, d4
          + tmp1 * 2.0 * dx1;
    400194ec:	1e610a08 	fmul	d8, d16, d1
          + tmp1 * 2.0 * njac[i][0][0]
    400194f0:	1e662884 	fadd	d4, d4, d6
          + tmp1 * 2.0 * dx1;
    400194f4:	1e682884 	fadd	d4, d4, d8
          + tmp1 * 2.0 * dx2;
    400194f8:	1e610a28 	fmul	d8, d17, d1
        lhs[i][BB][0][0] = 1.0
    400194fc:	fd006404 	str	d4, [x0, #200]
        lhs[i][BB][1][0] = tmp1 * 2.0 * njac[i][1][0];
    40019500:	fd401464 	ldr	d4, [x3, #40]
    40019504:	1e610884 	fmul	d4, d4, d1
    40019508:	fd007804 	str	d4, [x0, #240]
        lhs[i][BB][2][0] = tmp1 * 2.0 * njac[i][2][0];
    4001950c:	fd402864 	ldr	d4, [x3, #80]
    40019510:	1e610884 	fmul	d4, d4, d1
    40019514:	fd008c04 	str	d4, [x0, #280]
        lhs[i][BB][3][0] = tmp1 * 2.0 * njac[i][3][0];
    40019518:	fd403c64 	ldr	d4, [x3, #120]
    4001951c:	1e610884 	fmul	d4, d4, d1
    40019520:	fd00a004 	str	d4, [x0, #320]
        lhs[i][BB][4][0] = tmp1 * 2.0 * njac[i][4][0];
    40019524:	fd405064 	ldr	d4, [x3, #160]
    40019528:	1e610884 	fmul	d4, d4, d1
    4001952c:	fd00b404 	str	d4, [x0, #360]
        lhs[i][BB][0][1] = tmp1 * 2.0 * njac[i][0][1];
    40019530:	fd400464 	ldr	d4, [x3, #8]
    40019534:	1e610884 	fmul	d4, d4, d1
    40019538:	fd006804 	str	d4, [x0, #208]
          + tmp1 * 2.0 * njac[i][1][1]
    4001953c:	fd401864 	ldr	d4, [x3, #48]
    40019540:	1e640824 	fmul	d4, d1, d4
    40019544:	1e662884 	fadd	d4, d4, d6
          + tmp1 * 2.0 * dx2;
    40019548:	1e682884 	fadd	d4, d4, d8
          + tmp1 * 2.0 * dx3;
    4001954c:	1e610a48 	fmul	d8, d18, d1
        lhs[i][BB][1][1] = 1.0
    40019550:	fd007c04 	str	d4, [x0, #248]
        lhs[i][BB][2][1] = tmp1 * 2.0 * njac[i][2][1];
    40019554:	fd402c64 	ldr	d4, [x3, #88]
    40019558:	1e610884 	fmul	d4, d4, d1
    4001955c:	fd009004 	str	d4, [x0, #288]
        lhs[i][BB][3][1] = tmp1 * 2.0 * njac[i][3][1];
    40019560:	fd404064 	ldr	d4, [x3, #128]
    40019564:	1e610884 	fmul	d4, d4, d1
    40019568:	fd00a404 	str	d4, [x0, #328]
        lhs[i][BB][4][1] = tmp1 * 2.0 * njac[i][4][1];
    4001956c:	fd405464 	ldr	d4, [x3, #168]
    40019570:	1e610884 	fmul	d4, d4, d1
    40019574:	fd00b804 	str	d4, [x0, #368]
        lhs[i][BB][0][2] = tmp1 * 2.0 * njac[i][0][2];
    40019578:	fd400864 	ldr	d4, [x3, #16]
    4001957c:	1e610884 	fmul	d4, d4, d1
    40019580:	fd006c04 	str	d4, [x0, #216]
        lhs[i][BB][1][2] = tmp1 * 2.0 * njac[i][1][2];
    40019584:	fd401c64 	ldr	d4, [x3, #56]
    40019588:	1e610884 	fmul	d4, d4, d1
    4001958c:	fd008004 	str	d4, [x0, #256]
          + tmp1 * 2.0 * njac[i][2][2]
    40019590:	fd403064 	ldr	d4, [x3, #96]
    40019594:	1e640824 	fmul	d4, d1, d4
    40019598:	1e662884 	fadd	d4, d4, d6
          + tmp1 * 2.0 * dx3;
    4001959c:	1e682884 	fadd	d4, d4, d8
          + tmp1 * 2.0 * dx4;
    400195a0:	1e610a68 	fmul	d8, d19, d1
        lhs[i][BB][2][2] = 1.0
    400195a4:	fd009404 	str	d4, [x0, #296]
        lhs[i][BB][3][2] = tmp1 * 2.0 * njac[i][3][2];
    400195a8:	fd404464 	ldr	d4, [x3, #136]
    400195ac:	1e610884 	fmul	d4, d4, d1
    400195b0:	fd00a804 	str	d4, [x0, #336]
        lhs[i][BB][4][2] = tmp1 * 2.0 * njac[i][4][2];
    400195b4:	fd405864 	ldr	d4, [x3, #176]
    400195b8:	1e610884 	fmul	d4, d4, d1
    400195bc:	fd00bc04 	str	d4, [x0, #376]
        lhs[i][BB][0][3] = tmp1 * 2.0 * njac[i][0][3];
    400195c0:	fd400c64 	ldr	d4, [x3, #24]
    400195c4:	1e610884 	fmul	d4, d4, d1
    400195c8:	fd007004 	str	d4, [x0, #224]
        lhs[i][BB][1][3] = tmp1 * 2.0 * njac[i][1][3];
    400195cc:	fd402064 	ldr	d4, [x3, #64]
    400195d0:	1e610884 	fmul	d4, d4, d1
    400195d4:	fd008404 	str	d4, [x0, #264]
        lhs[i][BB][2][3] = tmp1 * 2.0 * njac[i][2][3];
    400195d8:	fd403464 	ldr	d4, [x3, #104]
    400195dc:	1e610884 	fmul	d4, d4, d1
    400195e0:	fd009804 	str	d4, [x0, #304]
          + tmp1 * 2.0 * njac[i][3][3]
    400195e4:	fd404864 	ldr	d4, [x3, #144]
    400195e8:	1e640824 	fmul	d4, d1, d4
    400195ec:	1e662884 	fadd	d4, d4, d6
          + tmp1 * 2.0 * dx4;
    400195f0:	1e682884 	fadd	d4, d4, d8
        lhs[i][BB][3][3] = 1.0
    400195f4:	fd00ac04 	str	d4, [x0, #344]
        lhs[i][BB][4][3] = tmp1 * 2.0 * njac[i][4][3];
    400195f8:	fd405c64 	ldr	d4, [x3, #184]
    400195fc:	1e610884 	fmul	d4, d4, d1
    40019600:	fd00c004 	str	d4, [x0, #384]
        lhs[i][BB][0][4] = tmp1 * 2.0 * njac[i][0][4];
    40019604:	fd401064 	ldr	d4, [x3, #32]
    40019608:	1e610884 	fmul	d4, d4, d1
    4001960c:	fd007404 	str	d4, [x0, #232]
        lhs[i][BB][1][4] = tmp1 * 2.0 * njac[i][1][4];
    40019610:	fd402464 	ldr	d4, [x3, #72]
    40019614:	1e610884 	fmul	d4, d4, d1
    40019618:	fd008804 	str	d4, [x0, #272]
        lhs[i][BB][2][4] = tmp1 * 2.0 * njac[i][2][4];
    4001961c:	fd403864 	ldr	d4, [x3, #112]
    40019620:	1e610884 	fmul	d4, d4, d1
    40019624:	fd009c04 	str	d4, [x0, #312]
        lhs[i][BB][3][4] = tmp1 * 2.0 * njac[i][3][4];
    40019628:	fd404c64 	ldr	d4, [x3, #152]
    4001962c:	1e610884 	fmul	d4, d4, d1
    40019630:	fd00b004 	str	d4, [x0, #352]
          + tmp1 * 2.0 * njac[i][4][4]
    40019634:	fd406064 	ldr	d4, [x3, #192]
    40019638:	1e640824 	fmul	d4, d1, d4
          + tmp1 * 2.0 * dx5;
    4001963c:	1e610a81 	fmul	d1, d20, d1
          + tmp1 * 2.0 * njac[i][4][4]
    40019640:	1e662884 	fadd	d4, d4, d6
          + tmp1 * 2.0 * dx5;
    40019644:	1e612881 	fadd	d1, d4, d1
          - tmp1 * njac[i+1][0][0]
    40019648:	fd406464 	ldr	d4, [x3, #200]
    4001964c:	1e640804 	fmul	d4, d0, d4
        lhs[i][BB][4][4] = 1.0
    40019650:	fd00c401 	str	d1, [x0, #392]
        lhs[i][CC][0][0] =  tmp2 * fjac[i+1][0][0]
    40019654:	fd406481 	ldr	d1, [x4, #200]
    40019658:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[i+1][0][0]
    4001965c:	1e643821 	fsub	d1, d1, d4
          - tmp1 * njac[i+1][1][0];
    40019660:	fd407864 	ldr	d4, [x3, #240]
    40019664:	1e640804 	fmul	d4, d0, d4
          - tmp1 * dx1;
    40019668:	1e653821 	fsub	d1, d1, d5
        lhs[i][CC][0][0] =  tmp2 * fjac[i+1][0][0]
    4001966c:	fd00c801 	str	d1, [x0, #400]
        lhs[i][CC][1][0] =  tmp2 * fjac[i+1][1][0]
    40019670:	fd407881 	ldr	d1, [x4, #240]
    40019674:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[i+1][1][0];
    40019678:	1e643821 	fsub	d1, d1, d4
        lhs[i][CC][1][0] =  tmp2 * fjac[i+1][1][0]
    4001967c:	fd00dc01 	str	d1, [x0, #440]
        lhs[i][CC][2][0] =  tmp2 * fjac[i+1][2][0]
    40019680:	fd408c81 	ldr	d1, [x4, #280]
          - tmp1 * njac[i+1][2][0];
    40019684:	fd408c64 	ldr	d4, [x3, #280]
        lhs[i][CC][1][1] =  tmp2 * fjac[i+1][1][1]
    40019688:	fd407c85 	ldr	d5, [x4, #248]
        lhs[i][CC][2][0] =  tmp2 * fjac[i+1][2][0]
    4001968c:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[i+1][2][0];
    40019690:	1e640804 	fmul	d4, d0, d4
        lhs[i][CC][1][1] =  tmp2 * fjac[i+1][1][1]
    40019694:	1e650845 	fmul	d5, d2, d5
          - tmp1 * njac[i+1][2][0];
    40019698:	1e643821 	fsub	d1, d1, d4
          - tmp1 * njac[i+1][3][0];
    4001969c:	fd40a064 	ldr	d4, [x3, #320]
    400196a0:	1e640804 	fmul	d4, d0, d4
        lhs[i][CC][2][0] =  tmp2 * fjac[i+1][2][0]
    400196a4:	fd00f001 	str	d1, [x0, #480]
        lhs[i][CC][3][0] =  tmp2 * fjac[i+1][3][0]
    400196a8:	fd40a081 	ldr	d1, [x4, #320]
    400196ac:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[i+1][3][0];
    400196b0:	1e643821 	fsub	d1, d1, d4
          - tmp1 * njac[i+1][4][0];
    400196b4:	fd40b464 	ldr	d4, [x3, #360]
    400196b8:	1e640804 	fmul	d4, d0, d4
        lhs[i][CC][3][0] =  tmp2 * fjac[i+1][3][0]
    400196bc:	fd010401 	str	d1, [x0, #520]
        lhs[i][CC][4][0] =  tmp2 * fjac[i+1][4][0]
    400196c0:	fd40b481 	ldr	d1, [x4, #360]
    400196c4:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[i+1][4][0];
    400196c8:	1e643821 	fsub	d1, d1, d4
          - tmp1 * njac[i+1][0][1];
    400196cc:	fd406864 	ldr	d4, [x3, #208]
    400196d0:	1e640804 	fmul	d4, d0, d4
        lhs[i][CC][4][0] =  tmp2 * fjac[i+1][4][0]
    400196d4:	fd011801 	str	d1, [x0, #560]
        lhs[i][CC][0][1] =  tmp2 * fjac[i+1][0][1]
    400196d8:	fd406881 	ldr	d1, [x4, #208]
    400196dc:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[i+1][0][1];
    400196e0:	1e643821 	fsub	d1, d1, d4
          - tmp1 * njac[i+1][2][1];
    400196e4:	fd409064 	ldr	d4, [x3, #288]
    400196e8:	1e640804 	fmul	d4, d0, d4
        lhs[i][CC][0][1] =  tmp2 * fjac[i+1][0][1]
    400196ec:	fd00cc01 	str	d1, [x0, #408]
          - tmp1 * njac[i+1][1][1]
    400196f0:	fd407c61 	ldr	d1, [x3, #248]
    400196f4:	1e610801 	fmul	d1, d0, d1
    400196f8:	1e6138a5 	fsub	d5, d5, d1
        lhs[i][CC][2][1] =  tmp2 * fjac[i+1][2][1]
    400196fc:	fd409081 	ldr	d1, [x4, #288]
    40019700:	1e610841 	fmul	d1, d2, d1
          - tmp1 * dx2;
    40019704:	1e7938a5 	fsub	d5, d5, d25
          - tmp1 * njac[i+1][2][1];
    40019708:	1e643821 	fsub	d1, d1, d4
          - tmp1 * njac[i+1][3][1];
    4001970c:	fd40a464 	ldr	d4, [x3, #328]
        lhs[i][CC][1][1] =  tmp2 * fjac[i+1][1][1]
    40019710:	fd00e005 	str	d5, [x0, #448]
          - tmp1 * njac[i+1][3][1];
    40019714:	1e640804 	fmul	d4, d0, d4
        lhs[i][CC][2][1] =  tmp2 * fjac[i+1][2][1]
    40019718:	fd00f401 	str	d1, [x0, #488]
        lhs[i][CC][3][1] =  tmp2 * fjac[i+1][3][1]
    4001971c:	fd40a481 	ldr	d1, [x4, #328]
    40019720:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[i+1][3][1];
    40019724:	1e643821 	fsub	d1, d1, d4
          - tmp1 * njac[i+1][4][1];
    40019728:	fd40b864 	ldr	d4, [x3, #368]
    4001972c:	1e640804 	fmul	d4, d0, d4
        lhs[i][CC][3][1] =  tmp2 * fjac[i+1][3][1]
    40019730:	fd010801 	str	d1, [x0, #528]
        lhs[i][CC][4][1] =  tmp2 * fjac[i+1][4][1]
    40019734:	fd40b881 	ldr	d1, [x4, #368]
    40019738:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[i+1][4][1];
    4001973c:	1e643821 	fsub	d1, d1, d4
          - tmp1 * njac[i+1][0][2];
    40019740:	fd406c64 	ldr	d4, [x3, #216]
    40019744:	1e640804 	fmul	d4, d0, d4
        lhs[i][CC][4][1] =  tmp2 * fjac[i+1][4][1]
    40019748:	fd011c01 	str	d1, [x0, #568]
        lhs[i][CC][0][2] =  tmp2 * fjac[i+1][0][2]
    4001974c:	fd406c81 	ldr	d1, [x4, #216]
    40019750:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[i+1][0][2];
    40019754:	1e643821 	fsub	d1, d1, d4
          - tmp1 * njac[i+1][1][2];
    40019758:	fd408064 	ldr	d4, [x3, #256]
    4001975c:	1e640804 	fmul	d4, d0, d4
        lhs[i][CC][0][2] =  tmp2 * fjac[i+1][0][2]
    40019760:	fd00d001 	str	d1, [x0, #416]
        lhs[i][CC][1][2] =  tmp2 * fjac[i+1][1][2]
    40019764:	fd408081 	ldr	d1, [x4, #256]
    40019768:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[i+1][1][2];
    4001976c:	1e643821 	fsub	d1, d1, d4
        lhs[i][CC][2][2] =  tmp2 * fjac[i+1][2][2]
    40019770:	fd409484 	ldr	d4, [x4, #296]
    40019774:	1e640844 	fmul	d4, d2, d4
        lhs[i][CC][1][2] =  tmp2 * fjac[i+1][1][2]
    40019778:	fd00e401 	str	d1, [x0, #456]
          - tmp1 * njac[i+1][2][2]
    4001977c:	fd409461 	ldr	d1, [x3, #296]
    40019780:	1e610801 	fmul	d1, d0, d1
    40019784:	1e613884 	fsub	d4, d4, d1
          - tmp1 * dx3;
    40019788:	1e633884 	fsub	d4, d4, d3
        lhs[i][CC][2][2] =  tmp2 * fjac[i+1][2][2]
    4001978c:	fd00f804 	str	d4, [x0, #496]
        lhs[i][CC][3][2] =  tmp2 * fjac[i+1][3][2]
    40019790:	fd40a881 	ldr	d1, [x4, #336]
          - tmp1 * njac[i+1][3][2];
    40019794:	fd40a863 	ldr	d3, [x3, #336]
        lhs[i][CC][3][2] =  tmp2 * fjac[i+1][3][2]
    40019798:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[i+1][3][2];
    4001979c:	1e630803 	fmul	d3, d0, d3
    400197a0:	1e633821 	fsub	d1, d1, d3
          - tmp1 * njac[i+1][4][2];
    400197a4:	fd40bc63 	ldr	d3, [x3, #376]
    400197a8:	1e630803 	fmul	d3, d0, d3
        lhs[i][CC][3][2] =  tmp2 * fjac[i+1][3][2]
    400197ac:	fd010c01 	str	d1, [x0, #536]
        lhs[i][CC][4][2] =  tmp2 * fjac[i+1][4][2]
    400197b0:	fd40bc81 	ldr	d1, [x4, #376]
    400197b4:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[i+1][4][2];
    400197b8:	1e633821 	fsub	d1, d1, d3
          - tmp1 * njac[i+1][0][3];
    400197bc:	fd407063 	ldr	d3, [x3, #224]
    400197c0:	1e630803 	fmul	d3, d0, d3
        lhs[i][CC][4][2] =  tmp2 * fjac[i+1][4][2]
    400197c4:	fd012001 	str	d1, [x0, #576]
        lhs[i][CC][0][3] =  tmp2 * fjac[i+1][0][3]
    400197c8:	fd407081 	ldr	d1, [x4, #224]
    400197cc:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[i+1][0][3];
    400197d0:	1e633821 	fsub	d1, d1, d3
          - tmp1 * njac[i+1][1][3];
    400197d4:	fd408463 	ldr	d3, [x3, #264]
    400197d8:	1e630803 	fmul	d3, d0, d3
        lhs[i][CC][0][3] =  tmp2 * fjac[i+1][0][3]
    400197dc:	fd00d401 	str	d1, [x0, #424]
        lhs[i][CC][1][3] =  tmp2 * fjac[i+1][1][3]
    400197e0:	fd408481 	ldr	d1, [x4, #264]
    400197e4:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[i+1][1][3];
    400197e8:	1e633821 	fsub	d1, d1, d3
          - tmp1 * njac[i+1][2][3];
    400197ec:	fd409863 	ldr	d3, [x3, #304]
    400197f0:	1e630803 	fmul	d3, d0, d3
        lhs[i][CC][1][3] =  tmp2 * fjac[i+1][1][3]
    400197f4:	fd00e801 	str	d1, [x0, #464]
        lhs[i][CC][2][3] =  tmp2 * fjac[i+1][2][3]
    400197f8:	fd409881 	ldr	d1, [x4, #304]
    400197fc:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[i+1][2][3];
    40019800:	1e633821 	fsub	d1, d1, d3
        lhs[i][CC][3][3] =  tmp2 * fjac[i+1][3][3]
    40019804:	fd40ac83 	ldr	d3, [x4, #344]
    40019808:	1e630843 	fmul	d3, d2, d3
        lhs[i][CC][2][3] =  tmp2 * fjac[i+1][2][3]
    4001980c:	fd00fc01 	str	d1, [x0, #504]
          - tmp1 * njac[i+1][3][3]
    40019810:	fd40ac61 	ldr	d1, [x3, #344]
    40019814:	1e610801 	fmul	d1, d0, d1
    40019818:	1e613863 	fsub	d3, d3, d1
        lhs[i][CC][4][3] =  tmp2 * fjac[i+1][4][3]
    4001981c:	fd40c081 	ldr	d1, [x4, #384]
    40019820:	1e610841 	fmul	d1, d2, d1
          - tmp1 * dx4;
    40019824:	1e783863 	fsub	d3, d3, d24
        lhs[i][CC][3][3] =  tmp2 * fjac[i+1][3][3]
    40019828:	fd011003 	str	d3, [x0, #544]
          - tmp1 * njac[i+1][4][3];
    4001982c:	fd40c063 	ldr	d3, [x3, #384]
    40019830:	1e630803 	fmul	d3, d0, d3
    40019834:	1e633821 	fsub	d1, d1, d3
          - tmp1 * njac[i+1][0][4];
    40019838:	fd407463 	ldr	d3, [x3, #232]
    4001983c:	1e630803 	fmul	d3, d0, d3
        lhs[i][CC][4][3] =  tmp2 * fjac[i+1][4][3]
    40019840:	fd012401 	str	d1, [x0, #584]
        lhs[i][CC][0][4] =  tmp2 * fjac[i+1][0][4]
    40019844:	fd407481 	ldr	d1, [x4, #232]
    40019848:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[i+1][0][4];
    4001984c:	1e633821 	fsub	d1, d1, d3
          - tmp1 * njac[i+1][1][4];
    40019850:	fd408863 	ldr	d3, [x3, #272]
    40019854:	1e630803 	fmul	d3, d0, d3
        lhs[i][CC][0][4] =  tmp2 * fjac[i+1][0][4]
    40019858:	fd00d801 	str	d1, [x0, #432]
        lhs[i][CC][1][4] =  tmp2 * fjac[i+1][1][4]
    4001985c:	fd408881 	ldr	d1, [x4, #272]
    40019860:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[i+1][1][4];
    40019864:	1e633821 	fsub	d1, d1, d3
          - tmp1 * njac[i+1][2][4];
    40019868:	fd409c63 	ldr	d3, [x3, #312]
    4001986c:	1e630803 	fmul	d3, d0, d3
        lhs[i][CC][1][4] =  tmp2 * fjac[i+1][1][4]
    40019870:	fd00ec01 	str	d1, [x0, #472]
        lhs[i][CC][2][4] =  tmp2 * fjac[i+1][2][4]
    40019874:	fd409c81 	ldr	d1, [x4, #312]
    40019878:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[i+1][2][4];
    4001987c:	1e633821 	fsub	d1, d1, d3
          - tmp1 * njac[i+1][3][4];
    40019880:	fd40b063 	ldr	d3, [x3, #352]
    40019884:	1e630803 	fmul	d3, d0, d3
        lhs[i][CC][2][4] =  tmp2 * fjac[i+1][2][4]
    40019888:	fd010001 	str	d1, [x0, #512]
        lhs[i][CC][3][4] =  tmp2 * fjac[i+1][3][4]
    4001988c:	fd40b081 	ldr	d1, [x4, #352]
    40019890:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[i+1][3][4];
    40019894:	1e633821 	fsub	d1, d1, d3
        lhs[i][CC][3][4] =  tmp2 * fjac[i+1][3][4]
    40019898:	fd011401 	str	d1, [x0, #552]
        lhs[i][CC][4][4] =  tmp2 * fjac[i+1][4][4]
    4001989c:	fd40c481 	ldr	d1, [x4, #392]
          - tmp1 * njac[i+1][4][4]
    400198a0:	fd40c463 	ldr	d3, [x3, #392]
        lhs[i][CC][4][4] =  tmp2 * fjac[i+1][4][4]
    400198a4:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[i+1][4][4]
    400198a8:	1e630803 	fmul	d3, d0, d3
    400198ac:	1e633821 	fsub	d1, d1, d3
          - tmp1 * dx5;
    400198b0:	1e773821 	fsub	d1, d1, d23
        lhs[i][CC][4][4] =  tmp2 * fjac[i+1][4][4]
    400198b4:	fd012801 	str	d1, [x0, #592]
      for (i = 1; i <= isize-1; i++) {
    400198b8:	17fffe2d 	b	4001916c <x_solve+0x37c>
        matvec_sub(lhs[i][AA], rhs[k][j][i-1], rhs[k][j][i]);
    400198bc:	aa0603e2 	mov	x2, x6
    400198c0:	aa0803e0 	mov	x0, x8
    400198c4:	a90c0fe8 	stp	x8, x3, [sp, #192]
    400198c8:	f90073e6 	str	x6, [sp, #224]
    400198cc:	b900efe5 	str	w5, [sp, #236]
    400198d0:	97fff36d 	bl	40016684 <matvec_sub>
        matmul_sub(lhs[i][AA], lhs[i-1][CC], lhs[i][BB]);
    400198d4:	a94c0fe8 	ldp	x8, x3, [sp, #192]
    400198d8:	a90c8fe8 	stp	x8, x3, [sp, #200]
    400198dc:	910c8069 	add	x9, x3, #0x320
    400198e0:	aa0803e0 	mov	x0, x8
    400198e4:	aa0903e2 	mov	x2, x9
    400198e8:	91064061 	add	x1, x3, #0x190
    400198ec:	f9006fe9 	str	x9, [sp, #216]
    400198f0:	97fff3d0 	bl	40016830 <matmul_sub>
        binvcrhs( lhs[i][BB], lhs[i][CC], rhs[k][j][i] );
    400198f4:	a94d27e3 	ldp	x3, x9, [sp, #208]
    400198f8:	f94073e6 	ldr	x6, [sp, #224]
    400198fc:	f90063e6 	str	x6, [sp, #192]
    40019900:	aa0603e2 	mov	x2, x6
    40019904:	910fa061 	add	x1, x3, #0x3e8
    40019908:	aa0903e0 	mov	x0, x9
    4001990c:	97fff5f3 	bl	400170d8 <binvcrhs>
      for (i = 1; i <= isize-1; i++) {
    40019910:	a94c23e6 	ldp	x6, x8, [sp, #192]
    40019914:	b940efe5 	ldr	w5, [sp, #236]
    40019918:	110004a5 	add	w5, w5, #0x1
    4001991c:	aa0603e1 	mov	x1, x6
    40019920:	aa0803e3 	mov	x3, x8
    40019924:	17fffe26 	b	400191bc <x_solve+0x3cc>
        for (m = 0; m < BLOCK_SIZE; m++) {
          for (n = 0; n < BLOCK_SIZE; n++) {
            rhs[k][j][i][m] = rhs[k][j][i][m] 
              - lhs[i][CC][n][m]*rhs[k][j][i+1][n];
    40019928:	fc637821 	ldr	d1, [x1, x3, lsl #3]
          for (n = 0; n < BLOCK_SIZE; n++) {
    4001992c:	91000463 	add	x3, x3, #0x1
              - lhs[i][CC][n][m]*rhs[k][j][i+1][n];
    40019930:	fd40c8c0 	ldr	d0, [x6, #400]
          for (n = 0; n < BLOCK_SIZE; n++) {
    40019934:	f100147f 	cmp	x3, #0x5
    40019938:	9100a0c6 	add	x6, x6, #0x28
              - lhs[i][CC][n][m]*rhs[k][j][i+1][n];
    4001993c:	1e610801 	fmul	d1, d0, d1
    40019940:	fd400040 	ldr	d0, [x2]
    40019944:	1e613800 	fsub	d0, d0, d1
            rhs[k][j][i][m] = rhs[k][j][i][m] 
    40019948:	fd000040 	str	d0, [x2]
          for (n = 0; n < BLOCK_SIZE; n++) {
    4001994c:	54fffee1 	b.ne	40019928 <x_solve+0xb38>  // b.any
        for (m = 0; m < BLOCK_SIZE; m++) {
    40019950:	91002000 	add	x0, x0, #0x8
    40019954:	91002042 	add	x2, x2, #0x8
    40019958:	f100a01f 	cmp	x0, #0x28
    4001995c:	54000080 	b.eq	4001996c <x_solve+0xb7c>  // b.none
          for (n = 0; n < BLOCK_SIZE; n++) {
    40019960:	8b000106 	add	x6, x8, x0
      for (i = 1; i <= isize-1; i++) {
    40019964:	d2800003 	mov	x3, #0x0                   	// #0
    40019968:	17fffff0 	b	40019928 <x_solve+0xb38>
      for (i = isize-1; i >=0; i--) {
    4001996c:	510004a5 	sub	w5, w5, #0x1
    40019970:	d100a021 	sub	x1, x1, #0x28
    40019974:	d1012c84 	sub	x4, x4, #0x4b
    40019978:	17fffe2e 	b	40019230 <x_solve+0x440>
    for (j = 1; j <= grid_points[1]-2; j++) {
    4001997c:	110006d6 	add	w22, w22, #0x1
    40019980:	b9400740 	ldr	w0, [x26, #4]
    40019984:	51000800 	sub	w0, w0, #0x2
    40019988:	6b16001f 	cmp	w0, w22
    4001998c:	5400056b 	b.lt	40019a38 <x_solve+0xc48>  // b.tstop
          + c2 * qs[k][j][i];
    40019990:	f0000080 	adrp	x0, 4002c000 <z_idle_threads>
    40019994:	fd441407 	ldr	d7, [x0, #2088]
        fjac[i][0][4] = ( c2 * 2.0 * square[k][j][i] - c1 * u[k][j][i][4] )
    40019998:	f0000080 	adrp	x0, 4002c000 <z_idle_threads>
    4001999c:	fd440415 	ldr	d21, [x0, #2056]
        njac[i][0][1] = - con43 * c3c4 * tmp2 * u[k][j][i][1];
    400199a0:	f0000080 	adrp	x0, 4002c000 <z_idle_threads>
    400199a4:	fd456414 	ldr	d20, [x0, #2760]
    400199a8:	f0000080 	adrp	x0, 4002c000 <z_idle_threads>
    400199ac:	fd442c10 	ldr	d16, [x0, #2136]
    400199b0:	5280411b 	mov	w27, #0x208                 	// #520
            - c1345 ) * tmp3 * (u[k][j][i][1]*u[k][j][i][1])
    400199b4:	f0000080 	adrp	x0, 4002c000 <z_idle_threads>
    400199b8:	fd440811 	ldr	d17, [x0, #2064]
    400199bc:	52800d08 	mov	w8, #0x68                  	// #104
    400199c0:	f94057e0 	ldr	x0, [sp, #168]
    400199c4:	9b3b7edb 	smull	x27, w22, w27
    400199c8:	f0000084 	adrp	x4, 4002c000 <z_idle_threads>
    400199cc:	9132a084 	add	x4, x4, #0xca8
    400199d0:	8b1b02e2 	add	x2, x23, x27
    400199d4:	d0000246 	adrp	x6, 40063000 <square+0x37a8>
    400199d8:	912060c6 	add	x6, x6, #0x818
    400199dc:	d0000143 	adrp	x3, 40043000 <lhs+0x1c50>
    400199e0:	9108a063 	add	x3, x3, #0x228
    400199e4:	9b2802c8 	smaddl	x8, w22, w8, x0
    400199e8:	d0000249 	adrp	x9, 40063000 <square+0x37a8>
    400199ec:	fd43e120 	ldr	d0, [x9, #1984]
    400199f0:	d000024d 	adrp	x13, 40063000 <square+0x37a8>
    400199f4:	fd43e5b3 	ldr	d19, [x13, #1992]
          + c2 * qs[k][j][i];
    400199f8:	d000014a 	adrp	x10, 40043000 <lhs+0x1c50>
    400199fc:	9132e14a 	add	x10, x10, #0xcb8
        fjac[i][0][4] = ( c2 * 2.0 * square[k][j][i] - c1 * u[k][j][i][4] )
    40019a00:	d0000221 	adrp	x1, 4005f000 <rhs+0x13488>
    40019a04:	91216021 	add	x1, x1, #0x858
        fjac[i][2][1] = - c2 * ( u[k][j][i][2] * tmp1 );
    40019a08:	1e6140f2 	fneg	d18, d7
        njac[i][0][1] = - con43 * c3c4 * tmp2 * u[k][j][i][1];
    40019a0c:	1e614299 	fneg	d25, d20
        njac[i][0][2] = - c3c4 * tmp2 * u[k][j][i][2];
    40019a10:	1e614218 	fneg	d24, d16
    40019a14:	8b060046 	add	x6, x2, x6
            - c1345 ) * tmp3 * (u[k][j][i][1]*u[k][j][i][1])
    40019a18:	aa0303e5 	mov	x5, x3
    40019a1c:	aa0403e0 	mov	x0, x4
    40019a20:	5280000c 	mov	w12, #0x0                   	// #0
      for (i = 0; i <= isize; i++) {
    40019a24:	5280000b 	mov	w11, #0x0                   	// #0
        fjac[i][1][0] = 1.0;
    40019a28:	1e6e1017 	fmov	d23, #1.000000000000000000e+00
        fjac[i][1][1] = ( 2.0 - c2 ) * ( u[k][j][i][1] / u[k][j][i][0] );
    40019a2c:	1e601016 	fmov	d22, #2.000000000000000000e+00
    40019a30:	fd4002a1 	ldr	d1, [x21]
    40019a34:	17fffdaa 	b	400190dc <x_solve+0x2ec>
  for (k = 1; k <= grid_points[2]-2; k++) {
    40019a38:	11000718 	add	w24, w24, #0x1
    40019a3c:	17fffd1b 	b	40018ea8 <x_solve+0xb8>
          }
        }
      }
    }
  }
  if (timeron) timer_stop(t_xsolve);
    40019a40:	f9405be0 	ldr	x0, [sp, #176]
    40019a44:	b94a8c00 	ldr	w0, [x0, #2700]
    40019a48:	34000140 	cbz	w0, 40019a70 <x_solve+0xc80>
}
    40019a4c:	a94153f3 	ldp	x19, x20, [sp, #16]
  if (timeron) timer_stop(t_xsolve);
    40019a50:	528000c0 	mov	w0, #0x6                   	// #6
}
    40019a54:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40019a58:	a94363f7 	ldp	x23, x24, [sp, #48]
    40019a5c:	a9446bf9 	ldp	x25, x26, [sp, #64]
    40019a60:	a94573fb 	ldp	x27, x28, [sp, #80]
    40019a64:	fd4033e8 	ldr	d8, [sp, #96]
    40019a68:	a8cf7bfd 	ldp	x29, x30, [sp], #240
  if (timeron) timer_stop(t_xsolve);
    40019a6c:	17ffe374 	b	4001283c <timer_stop>
}
    40019a70:	a94153f3 	ldp	x19, x20, [sp, #16]
    40019a74:	a9425bf5 	ldp	x21, x22, [sp, #32]
    40019a78:	a94363f7 	ldp	x23, x24, [sp, #48]
    40019a7c:	a9446bf9 	ldp	x25, x26, [sp, #64]
    40019a80:	a94573fb 	ldp	x27, x28, [sp, #80]
    40019a84:	fd4033e8 	ldr	d8, [sp, #96]
    40019a88:	a8cf7bfd 	ldp	x29, x30, [sp], #240
    40019a8c:	d65f03c0 	ret

0000000040019a90 <y_solve>:
// 
// Make sure we treat elements zero to cell_size in the direction
// of the sweep.
//---------------------------------------------------------------------
void y_solve()
{
    40019a90:	a9b17bfd 	stp	x29, x30, [sp, #-240]!
    40019a94:	910003fd 	mov	x29, sp
  int i, j, k, m, n, jsize;

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------

  if (timeron) timer_start(t_ysolve);
    40019a98:	d0000340 	adrp	x0, 40083000 <ws+0x3a40>
    40019a9c:	b94a8c01 	ldr	w1, [x0, #2700]
{
    40019aa0:	a90153f3 	stp	x19, x20, [sp, #16]
    40019aa4:	a9025bf5 	stp	x21, x22, [sp, #32]
    40019aa8:	a90363f7 	stp	x23, x24, [sp, #48]
    40019aac:	a9046bf9 	stp	x25, x26, [sp, #64]
    40019ab0:	a90573fb 	stp	x27, x28, [sp, #80]
    40019ab4:	f9005be0 	str	x0, [sp, #176]
    40019ab8:	fd0033e8 	str	d8, [sp, #96]
  if (timeron) timer_start(t_ysolve);
    40019abc:	34000061 	cbz	w1, 40019ac8 <y_solve+0x38>
    40019ac0:	528000e0 	mov	w0, #0x7                   	// #7
    40019ac4:	97ffe351 	bl	40012808 <timer_start>

  //---------------------------------------------------------------------
  // This function computes the left hand side for the three y-factors   
  //---------------------------------------------------------------------

  jsize = grid_points[1]-1;
    40019ac8:	d0000359 	adrp	x25, 40083000 <ws+0x3a40>
    40019acc:	912a0339 	add	x25, x25, #0xa80
      }

      //---------------------------------------------------------------------
      // rhs(jsize) = rhs(jsize) - A*rhs(jsize-1)
      //---------------------------------------------------------------------
      matvec_sub(lhs[jsize][AA], rhs[k][jsize-1][i], rhs[k][jsize][i]);
    40019ad0:	90000147 	adrp	x7, 40041000 <forcing+0x13930>
    40019ad4:	910ec0fb 	add	x27, x7, #0x3b0
    40019ad8:	52804b00 	mov	w0, #0x258                 	// #600
    40019adc:	52804101 	mov	w1, #0x208                 	// #520
  jsize = grid_points[1]-1;
    40019ae0:	b9400733 	ldr	w19, [x25, #4]
  for (k = 1; k <= grid_points[2]-2; k++) {
    40019ae4:	52800037 	mov	w23, #0x1                   	// #1
  jsize = grid_points[1]-1;
    40019ae8:	51000678 	sub	w24, w19, #0x1
      for (j = 1; j <= jsize-1; j++) {
    40019aec:	51000a73 	sub	w19, w19, #0x2
    40019af0:	9b207f14 	smull	x20, w24, w0
      //---------------------------------------------------------------------
      // B(jsize) = B(jsize) - C(jsize-1)*A(jsize)
      // matmul_sub(AA,i,jsize,k,c,
      // $              CC,i,jsize-1,k,c,BB,i,jsize,k)
      //---------------------------------------------------------------------
      matmul_sub(lhs[jsize][AA], lhs[jsize-1][CC], lhs[jsize][BB]);
    40019af4:	9b206e60 	smaddl	x0, w19, w0, x27
    40019af8:	9b217e62 	smull	x2, w19, w1
      matvec_sub(lhs[jsize][AA], rhs[k][jsize-1][i], rhs[k][jsize][i]);
    40019afc:	8b1b029c 	add	x28, x20, x27
      matmul_sub(lhs[jsize][AA], lhs[jsize-1][CC], lhs[jsize][BB]);
    40019b00:	91064000 	add	x0, x0, #0x190
    40019b04:	a90803e2 	stp	x2, x0, [sp, #128]
    40019b08:	52800960 	mov	w0, #0x4b                  	// #75
    40019b0c:	9b217f01 	smull	x1, w24, w1
    40019b10:	91032294 	add	x20, x20, #0xc8
    40019b14:	9b207e60 	smull	x0, w19, w0
    40019b18:	f9004fe1 	str	x1, [sp, #152]
    40019b1c:	93407f01 	sxtw	x1, w24
    40019b20:	f90053e0 	str	x0, [sp, #160]
    40019b24:	928040e0 	mov	x0, #0xfffffffffffffdf8    	// #-520
    40019b28:	8b1b0294 	add	x20, x20, x27
    40019b2c:	9b000820 	madd	x0, x1, x0, x2
    40019b30:	f9004be0 	str	x0, [sp, #144]
        tmp1 = rho_i[k][j][i];
    40019b34:	d0000160 	adrp	x0, 40047000 <qs+0x3348>
    40019b38:	91306000 	add	x0, x0, #0xc18
    40019b3c:	f9005fe0 	str	x0, [sp, #184]
  for (k = 1; k <= grid_points[2]-2; k++) {
    40019b40:	b9400b20 	ldr	w0, [x25, #8]
    40019b44:	51000800 	sub	w0, w0, #0x2
    40019b48:	6b17001f 	cmp	w0, w23
    40019b4c:	54005d0b 	b.lt	4001a6ec <y_solve+0xc5c>  // b.tstop
    40019b50:	52834d00 	mov	w0, #0x1a68                	// #6760
    40019b54:	d0000255 	adrp	x21, 40063000 <square+0x37a8>
    40019b58:	911ee2b5 	add	x21, x21, #0x7b8
    for (i = 1; i <= grid_points[0]-2; i++) {
    40019b5c:	52800036 	mov	w22, #0x1                   	// #1
    40019b60:	9b207ee0 	smull	x0, w23, w0
    40019b64:	f9003fe0 	str	x0, [sp, #120]
    40019b68:	52801520 	mov	w0, #0xa9                  	// #169
    40019b6c:	9b207ee0 	smull	x0, w23, w0
    40019b70:	f90057e0 	str	x0, [sp, #168]
    40019b74:	140002ad 	b	4001a628 <y_solve+0xb98>
        tmp1 = rho_i[k][j][i];
    40019b78:	f9405fe7 	ldr	x7, [sp, #184]
        fjac[j][0][0] = 0.0;
    40019b7c:	f900001f 	str	xzr, [x0]
        fjac[j][0][1] = - ( u[k][j][i][1]*u[k][j][i][2] ) * tmp2;
    40019b80:	6d4088c4 	ldp	d4, d2, [x6, #8]
        fjac[j][1][0] = 0.0;
    40019b84:	f900141f 	str	xzr, [x0, #40]
        tmp1 = rho_i[k][j][i];
    40019b88:	fc676900 	ldr	d0, [x8, x7]
      for (j = 0; j <= jsize; j++) {
    40019b8c:	1100056b 	add	w11, w11, #0x1
          + c2 * qs[k][j][i];
    40019b90:	fc6a6905 	ldr	d5, [x8, x10]
    40019b94:	91032000 	add	x0, x0, #0xc8
        fjac[j][0][1] = - ( u[k][j][i][1]*u[k][j][i][2] ) * tmp2;
    40019b98:	1e648843 	fnmul	d3, d2, d4
        fjac[j][0][2] = - ( u[k][j][i][2]*u[k][j][i][2]*tmp2)
    40019b9c:	1e62085d 	fmul	d29, d2, d2
        tmp2 = tmp1 * tmp1;
    40019ba0:	1e600801 	fmul	d1, d0, d0
        fjac[j][1][2] = - c2 *  u[k][j][i][1] * tmp1;
    40019ba4:	1e74089e 	fmul	d30, d4, d20
        fjac[j][3][2] = - c2 * u[k][j][i][3] * tmp1;
    40019ba8:	fd400cc7 	ldr	d7, [x6, #24]
        fjac[j][1][1] = u[k][j][i][2] * tmp1;
    40019bac:	1e62081b 	fmul	d27, d0, d2
        fjac[j][0][4] = ( c2 * 2.0 * square[k][j][i] - c1 * u[k][j][i][4] )
    40019bb0:	fc616908 	ldr	d8, [x8, x1]
    40019bb4:	910320a5 	add	x5, x5, #0xc8
        fjac[j][1][3] = 0.0;
    40019bb8:	f817801f 	stur	xzr, [x0, #-136]
    40019bbc:	9101a108 	add	x8, x8, #0x68
        fjac[j][0][1] = - ( u[k][j][i][1]*u[k][j][i][2] ) * tmp2;
    40019bc0:	1e610863 	fmul	d3, d3, d1
        fjac[j][0][2] = - ( u[k][j][i][2]*u[k][j][i][2]*tmp2)
    40019bc4:	1e7d083f 	fmul	d31, d1, d29
        fjac[j][0][3] = - ( u[k][j][i][2]*u[k][j][i][3] ) * tmp2;
    40019bc8:	1e670846 	fmul	d6, d2, d7
        fjac[j][1][1] = u[k][j][i][2] * tmp1;
    40019bcc:	fc16801b 	stur	d27, [x0, #-152]
        fjac[j][3][3] = u[k][j][i][2] * tmp1;
    40019bd0:	fc1c801b 	stur	d27, [x0, #-56]
        tmp3 = tmp1 * tmp2;
    40019bd4:	1e610812 	fmul	d18, d0, d1
        fjac[j][0][4] = ( c2 * 2.0 * square[k][j][i] - c1 * u[k][j][i][4] )
    40019bd8:	fd4010db 	ldr	d27, [x6, #32]
    40019bdc:	910820c6 	add	x6, x6, #0x208
        fjac[j][0][1] = - ( u[k][j][i][1]*u[k][j][i][2] ) * tmp2;
    40019be0:	fc140003 	stur	d3, [x0, #-192]
        fjac[j][2][1] = u[k][j][i][1] * tmp1;
    40019be4:	1e640803 	fmul	d3, d0, d4
        fjac[j][3][0] = 0.0;
    40019be8:	f81b001f 	stur	xzr, [x0, #-80]
      for (j = 0; j <= jsize; j++) {
    40019bec:	5280002c 	mov	w12, #0x1                   	// #1
        fjac[j][0][4] = ( c2 * 2.0 * square[k][j][i] - c1 * u[k][j][i][4] )
    40019bf0:	1e760b7c 	fmul	d28, d27, d22
        fjac[j][3][1] = 0.0;
    40019bf4:	f81b801f 	stur	xzr, [x0, #-72]
        fjac[j][4][0] = 0.0;
    40019bf8:	f81d801f 	stur	xzr, [x0, #-40]
        fjac[j][2][1] = u[k][j][i][1] * tmp1;
    40019bfc:	fc190003 	stur	d3, [x0, #-112]
          + c2 * qs[k][j][i];
    40019c00:	1e7008a3 	fmul	d3, d5, d16
          - c2 * ( qs[k][j][i] + u[k][j][i][2]*u[k][j][i][2] * tmp2 );
    40019c04:	1e7f28a5 	fadd	d5, d5, d31
        fjac[j][4][1] = 0.0;
    40019c08:	f81e001f 	stur	xzr, [x0, #-32]
        fjac[j][4][3] = 0.0;
    40019c0c:	f81f001f 	stur	xzr, [x0, #-16]
        fjac[j][2][0] = 1.0;
    40019c10:	fc188018 	stur	d24, [x0, #-120]
          + c2 * qs[k][j][i];
    40019c14:	1e7f3863 	fsub	d3, d3, d31
        fjac[j][4][2] = c2;
    40019c18:	fc1e8010 	stur	d16, [x0, #-24]
          - c2 * ( qs[k][j][i] + u[k][j][i][2]*u[k][j][i][2] * tmp2 );
    40019c1c:	1e7008a5 	fmul	d5, d5, d16
        fjac[j][0][2] = - ( u[k][j][i][2]*u[k][j][i][2]*tmp2)
    40019c20:	fc148003 	stur	d3, [x0, #-184]
        fjac[j][1][2] = - c2 *  u[k][j][i][1] * tmp1;
    40019c24:	1e7e0803 	fmul	d3, d0, d30
        fjac[j][1][4] = - c2 * u[k][j][i][1]*u[k][j][i][2] * tmp2;
    40019c28:	1e7e085e 	fmul	d30, d2, d30
        fjac[j][1][2] = - c2 *  u[k][j][i][1] * tmp1;
    40019c2c:	fc170003 	stur	d3, [x0, #-144]
        fjac[j][2][2] = ( 2.0 - c2 ) *  u[k][j][i][2] * tmp1;
    40019c30:	1e703ae3 	fsub	d3, d23, d16
        fjac[j][1][4] = - c2 * u[k][j][i][1]*u[k][j][i][2] * tmp2;
    40019c34:	1e610bde 	fmul	d30, d30, d1
        fjac[j][2][2] = ( 2.0 - c2 ) *  u[k][j][i][2] * tmp1;
    40019c38:	1e620863 	fmul	d3, d3, d2
        fjac[j][1][4] = - c2 * u[k][j][i][1]*u[k][j][i][2] * tmp2;
    40019c3c:	fc18001e 	stur	d30, [x0, #-128]
        fjac[j][2][2] = ( 2.0 - c2 ) *  u[k][j][i][2] * tmp1;
    40019c40:	1e600863 	fmul	d3, d3, d0
    40019c44:	fc198003 	stur	d3, [x0, #-104]
        fjac[j][3][2] = - c2 * u[k][j][i][3] * tmp1;
    40019c48:	1e670a83 	fmul	d3, d20, d7
    40019c4c:	1e600863 	fmul	d3, d3, d0
    40019c50:	fc1c0003 	stur	d3, [x0, #-64]
        fjac[j][0][3] = - ( u[k][j][i][2]*u[k][j][i][3] ) * tmp2;
    40019c54:	1e6188c3 	fnmul	d3, d6, d1
        fjac[j][3][4] = - c2 * ( u[k][j][i][2]*u[k][j][i][3] ) * tmp2;
    40019c58:	1e660a86 	fmul	d6, d20, d6
        fjac[j][0][3] = - ( u[k][j][i][2]*u[k][j][i][3] ) * tmp2;
    40019c5c:	fc150003 	stur	d3, [x0, #-176]
        fjac[j][2][3] = u[k][j][i][3] * tmp1;
    40019c60:	1e670803 	fmul	d3, d0, d7
        fjac[j][3][4] = - c2 * ( u[k][j][i][2]*u[k][j][i][3] ) * tmp2;
    40019c64:	1e6108c6 	fmul	d6, d6, d1
        fjac[j][2][3] = u[k][j][i][3] * tmp1;
    40019c68:	fc1a0003 	stur	d3, [x0, #-96]
        fjac[j][0][4] = ( c2 * 2.0 * square[k][j][i] - c1 * u[k][j][i][4] )
    40019c6c:	1e702a03 	fadd	d3, d16, d16
        fjac[j][3][4] = - c2 * ( u[k][j][i][2]*u[k][j][i][3] ) * tmp2;
    40019c70:	fc1d0006 	stur	d6, [x0, #-48]
        njac[j][1][1] =   c3c4 * tmp1;
    40019c74:	1e710806 	fmul	d6, d0, d17
        fjac[j][0][4] = ( c2 * 2.0 * square[k][j][i] - c1 * u[k][j][i][4] )
    40019c78:	1e680863 	fmul	d3, d3, d8
    40019c7c:	1e7c3863 	fsub	d3, d3, d28
        fjac[j][2][4] = c1 * u[k][j][i][4] * tmp1 
    40019c80:	1e7c081c 	fmul	d28, d0, d28
          * u[k][j][i][2] * tmp2;
    40019c84:	1e620863 	fmul	d3, d3, d2
          - c2 * ( qs[k][j][i] + u[k][j][i][2]*u[k][j][i][2] * tmp2 );
    40019c88:	1e653b9c 	fsub	d28, d28, d5
        njac[j][0][1] = - c3c4 * tmp2 * u[k][j][i][1];
    40019c8c:	1e7a0825 	fmul	d5, d1, d26
          * u[k][j][i][2] * tmp2;
    40019c90:	1e610863 	fmul	d3, d3, d1
        fjac[j][2][4] = c1 * u[k][j][i][4] * tmp1 
    40019c94:	fc1a801c 	stur	d28, [x0, #-88]
        fjac[j][0][4] = ( c2 * 2.0 * square[k][j][i] - c1 * u[k][j][i][4] )
    40019c98:	fc158003 	stur	d3, [x0, #-168]
        fjac[j][4][4] = c1 * u[k][j][i][2] * tmp1;
    40019c9c:	1e760843 	fmul	d3, d2, d22
    40019ca0:	1e600863 	fmul	d3, d3, d0
    40019ca4:	fc1f8003 	stur	d3, [x0, #-8]
        njac[j][0][1] = - c3c4 * tmp2 * u[k][j][i][1];
    40019ca8:	1e650883 	fmul	d3, d4, d5
        njac[j][0][3] = - c3c4 * tmp2 * u[k][j][i][3];
    40019cac:	1e6508e5 	fmul	d5, d7, d5
        njac[j][1][1] =   c3c4 * tmp1;
    40019cb0:	fc1680a6 	stur	d6, [x5, #-152]
        njac[j][3][3] =   c3c4 * tmp1;
    40019cb4:	fc1c80a6 	stur	d6, [x5, #-56]
            - c1345 ) * tmp3 * (u[k][j][i][1]*u[k][j][i][1])
    40019cb8:	1e733a26 	fsub	d6, d17, d19
        njac[j][0][0] = 0.0;
    40019cbc:	f81380bf 	stur	xzr, [x5, #-200]
        njac[j][0][1] = - c3c4 * tmp2 * u[k][j][i][1];
    40019cc0:	fc1400a3 	stur	d3, [x5, #-192]
        njac[j][0][2] = - con43 * c3c4 * tmp2 * u[k][j][i][2];
    40019cc4:	1e790a23 	fmul	d3, d17, d25
        njac[j][0][3] = - c3c4 * tmp2 * u[k][j][i][3];
    40019cc8:	fc1500a5 	stur	d5, [x5, #-176]
            - c1345 ) * tmp3 * (u[k][j][i][1]*u[k][j][i][1])
    40019ccc:	1e7288c5 	fnmul	d5, d6, d18
        njac[j][1][0] = 0.0;
    40019cd0:	f81600bf 	stur	xzr, [x5, #-160]
        njac[j][1][2] =   0.0;
    40019cd4:	f81700bf 	stur	xzr, [x5, #-144]
        njac[j][0][2] = - con43 * c3c4 * tmp2 * u[k][j][i][2];
    40019cd8:	1e610863 	fmul	d3, d3, d1
        njac[j][1][3] =   0.0;
    40019cdc:	f81780bf 	stur	xzr, [x5, #-136]
        njac[j][2][0] = 0.0;
    40019ce0:	f81880bf 	stur	xzr, [x5, #-120]
        njac[j][2][1] =   0.0;
    40019ce4:	f81900bf 	stur	xzr, [x5, #-112]
        njac[j][2][3] =   0.0;
    40019ce8:	f81a00bf 	stur	xzr, [x5, #-96]
        njac[j][0][2] = - con43 * c3c4 * tmp2 * u[k][j][i][2];
    40019cec:	1e620863 	fmul	d3, d3, d2
        njac[j][3][0] = 0.0;
    40019cf0:	f81b00bf 	stur	xzr, [x5, #-80]
        njac[j][3][1] =   0.0;
    40019cf4:	f81b80bf 	stur	xzr, [x5, #-72]
        njac[j][3][2] =   0.0;
    40019cf8:	f81c00bf 	stur	xzr, [x5, #-64]
        njac[j][4][0] = 0.0;
    40019cfc:	f81d80bf 	stur	xzr, [x5, #-40]
        njac[j][0][2] = - con43 * c3c4 * tmp2 * u[k][j][i][2];
    40019d00:	fc1480a3 	stur	d3, [x5, #-184]
        njac[j][2][2] =   con43 * c3c4 * tmp1;
    40019d04:	1e750a23 	fmul	d3, d17, d21
        njac[j][4][1] =   0.0;
    40019d08:	f81e00bf 	stur	xzr, [x5, #-32]
        njac[j][4][2] =   0.0;
    40019d0c:	f81e80bf 	stur	xzr, [x5, #-24]
        njac[j][4][3] =   0.0;
    40019d10:	f81f00bf 	stur	xzr, [x5, #-16]
        njac[j][2][2] =   con43 * c3c4 * tmp1;
    40019d14:	1e63081c 	fmul	d28, d0, d3
              - c1345 ) * tmp3 * (u[k][j][i][2]*u[k][j][i][2])
    40019d18:	1e733863 	fsub	d3, d3, d19
        njac[j][2][2] =   con43 * c3c4 * tmp1;
    40019d1c:	fc1980bc 	stur	d28, [x5, #-104]
            - c1345 ) * tmp3 * (u[k][j][i][1]*u[k][j][i][1])
    40019d20:	1e64089c 	fmul	d28, d4, d4
    40019d24:	1e7c08a5 	fmul	d5, d5, d28
              - c1345 ) * tmp3 * (u[k][j][i][2]*u[k][j][i][2])
    40019d28:	1e630a5c 	fmul	d28, d18, d3
        njac[j][2][4] = ( con43 * c3c4 - c1345 ) * tmp2 * u[k][j][i][2];
    40019d2c:	1e630823 	fmul	d3, d1, d3
              - c1345 ) * tmp3 * (u[k][j][i][2]*u[k][j][i][2])
    40019d30:	1e7d0b9d 	fmul	d29, d28, d29
          - ( c3c4 - c1345 ) * tmp3 * (u[k][j][i][3]*u[k][j][i][3])
    40019d34:	1e660a5c 	fmul	d28, d18, d6
        njac[j][2][4] = ( con43 * c3c4 - c1345 ) * tmp2 * u[k][j][i][2];
    40019d38:	1e620862 	fmul	d2, d3, d2
        njac[j][1][4] = (  c3c4 - c1345 ) * tmp2 * u[k][j][i][1];
    40019d3c:	1e660826 	fmul	d6, d1, d6
          - ( con43 * c3c4
    40019d40:	1e7d38a5 	fsub	d5, d5, d29
          - ( c3c4 - c1345 ) * tmp3 * (u[k][j][i][3]*u[k][j][i][3])
    40019d44:	1e6708fd 	fmul	d29, d7, d7
        njac[j][2][4] = ( con43 * c3c4 - c1345 ) * tmp2 * u[k][j][i][2];
    40019d48:	fc1a80a2 	stur	d2, [x5, #-88]
        njac[j][3][4] = ( c3c4 - c1345 ) * tmp2 * u[k][j][i][3];
    40019d4c:	1e6608e2 	fmul	d2, d7, d6
        njac[j][1][4] = (  c3c4 - c1345 ) * tmp2 * u[k][j][i][1];
    40019d50:	1e660884 	fmul	d4, d4, d6
          - ( c3c4 - c1345 ) * tmp3 * (u[k][j][i][3]*u[k][j][i][3])
    40019d54:	1e7d0b9c 	fmul	d28, d28, d29
        njac[j][3][4] = ( c3c4 - c1345 ) * tmp2 * u[k][j][i][3];
    40019d58:	fc1d00a2 	stur	d2, [x5, #-48]
        njac[j][4][4] = ( c1345 ) * tmp1;
    40019d5c:	1e730802 	fmul	d2, d0, d19
        njac[j][1][4] = (  c3c4 - c1345 ) * tmp2 * u[k][j][i][1];
    40019d60:	fc1800a4 	stur	d4, [x5, #-128]
          - ( c3c4 - c1345 ) * tmp3 * (u[k][j][i][3]*u[k][j][i][3])
    40019d64:	1e7c38a5 	fsub	d5, d5, d28
          - c1345 * tmp2 * u[k][j][i][4];
    40019d68:	1e73083c 	fmul	d28, d1, d19
        njac[j][4][4] = ( c1345 ) * tmp1;
    40019d6c:	fc1f80a2 	stur	d2, [x5, #-8]
          - c1345 * tmp2 * u[k][j][i][4];
    40019d70:	1e7b0b9b 	fmul	d27, d28, d27
    40019d74:	1e7b38a5 	fsub	d5, d5, d27
        njac[j][0][4] = - (  c3c4
    40019d78:	fc1580a5 	stur	d5, [x5, #-168]
      for (j = 0; j <= jsize; j++) {
    40019d7c:	6b18017f 	cmp	w11, w24
    40019d80:	54ffefcd 	b.le	40019b78 <y_solve+0xe8>
    40019d84:	3400008c 	cbz	w12, 40019d94 <y_solve+0x304>
    40019d88:	fd03e121 	str	d1, [x9, #1984]
    40019d8c:	fd03e5b2 	str	d18, [x13, #1992]
    40019d90:	fd0002a0 	str	d0, [x21]
      lhsinit(lhs, jsize);
    40019d94:	2a1803e1 	mov	w1, w24
    40019d98:	aa1b03e0 	mov	x0, x27
    40019d9c:	a90c0fe4 	stp	x4, x3, [sp, #192]
    40019da0:	f9006be2 	str	x2, [sp, #208]
    40019da4:	97ffea2e 	bl	4001465c <lhsinit>
        tmp1 = dt * ty1;
    40019da8:	f0000080 	adrp	x0, 4002c000 <z_idle_threads>
    40019dac:	fd45b007 	ldr	d7, [x0, #2912]
    40019db0:	d0000240 	adrp	x0, 40063000 <square+0x37a8>
    40019db4:	fd43f415 	ldr	d21, [x0, #2024]
        tmp2 = dt * ty2;
    40019db8:	d0000240 	adrp	x0, 40063000 <square+0x37a8>
    40019dbc:	fd43f816 	ldr	d22, [x0, #2032]
          - tmp1 * dy1; 
    40019dc0:	f0000080 	adrp	x0, 4002c000 <z_idle_threads>
    40019dc4:	fd45fc10 	ldr	d16, [x0, #3064]
          - tmp1 * dy2;
    40019dc8:	f0000080 	adrp	x0, 4002c000 <z_idle_threads>
    40019dcc:	fd460411 	ldr	d17, [x0, #3080]
          - tmp1 * dy3;
    40019dd0:	f0000080 	adrp	x0, 4002c000 <z_idle_threads>
    40019dd4:	fd460c12 	ldr	d18, [x0, #3096]
      for (j = 1; j <= jsize-1; j++) {
    40019dd8:	a94c0fe4 	ldp	x4, x3, [sp, #192]
          - tmp1 * dy4;
    40019ddc:	f0000080 	adrp	x0, 4002c000 <z_idle_threads>
    40019de0:	fd461413 	ldr	d19, [x0, #3112]
          - tmp1 * dy5;
    40019de4:	f0000080 	adrp	x0, 4002c000 <z_idle_threads>
    40019de8:	fd461c14 	ldr	d20, [x0, #3128]
    40019dec:	d0000249 	adrp	x9, 40063000 <square+0x37a8>
    40019df0:	fd43e122 	ldr	d2, [x9, #1984]
      for (j = 1; j <= jsize-1; j++) {
    40019df4:	aa1b03e0 	mov	x0, x27
    40019df8:	f9406be2 	ldr	x2, [sp, #208]
    40019dfc:	52800005 	mov	w5, #0x0                   	// #0
    40019e00:	fd4002a0 	ldr	d0, [x21]
    40019e04:	52800021 	mov	w1, #0x1                   	// #1
          + tmp1 * 2.0 * njac[j][0][0]
    40019e08:	1e6e1006 	fmov	d6, #1.000000000000000000e+00
      for (j = 1; j <= jsize-1; j++) {
    40019e0c:	91032063 	add	x3, x3, #0xc8
    40019e10:	91096000 	add	x0, x0, #0x258
    40019e14:	6b01027f 	cmp	w19, w1
    40019e18:	540006ca 	b.ge	40019ef0 <y_solve+0x460>  // b.tcont
    40019e1c:	34000065 	cbz	w5, 40019e28 <y_solve+0x398>
    40019e20:	fd03e122 	str	d2, [x9, #1984]
    40019e24:	fd0002a0 	str	d0, [x21]
      binvcrhs( lhs[0][BB], lhs[0][CC], rhs[k][0][i] );
    40019e28:	d0000184 	adrp	x4, 4004b000 <rho_i+0x33e8>
    40019e2c:	912de084 	add	x4, x4, #0xb78
    40019e30:	8b040042 	add	x2, x2, x4
    40019e34:	90000141 	adrp	x1, 40041000 <forcing+0x13930>
    40019e38:	91150021 	add	x1, x1, #0x540
    40019e3c:	90000140 	adrp	x0, 40041000 <forcing+0x13930>
    40019e40:	9111e000 	add	x0, x0, #0x478
    40019e44:	f90063e2 	str	x2, [sp, #192]
    40019e48:	97fff4a4 	bl	400170d8 <binvcrhs>
      for (j = 1; j <= jsize-1; j++) {
    40019e4c:	f94063e2 	ldr	x2, [sp, #192]
    40019e50:	aa1b03e3 	mov	x3, x27
    40019e54:	52800025 	mov	w5, #0x1                   	// #1
    40019e58:	aa0203e1 	mov	x1, x2
    40019e5c:	d0000180 	adrp	x0, 4004b000 <rho_i+0x33e8>
    40019e60:	912de004 	add	x4, x0, #0xb78
    40019e64:	91096068 	add	x8, x3, #0x258
    40019e68:	91082026 	add	x6, x1, #0x208
    40019e6c:	6b05027f 	cmp	w19, w5
    40019e70:	540037aa 	b.ge	4001a564 <y_solve+0xad4>  // b.tcont
      matvec_sub(lhs[jsize][AA], rhs[k][jsize-1][i], rhs[k][jsize][i]);
    40019e74:	f9403fe0 	ldr	x0, [sp, #120]
    40019e78:	f9404fe1 	ldr	x1, [sp, #152]
    40019e7c:	8b010001 	add	x1, x0, x1
    40019e80:	8b1a0021 	add	x1, x1, x26
    40019e84:	8b010083 	add	x3, x4, x1
    40019e88:	f90063e3 	str	x3, [sp, #192]
    40019e8c:	f94043e1 	ldr	x1, [sp, #128]
    40019e90:	aa0303e2 	mov	x2, x3
    40019e94:	8b010001 	add	x1, x0, x1
    40019e98:	aa1c03e0 	mov	x0, x28
    40019e9c:	8b1a0021 	add	x1, x1, x26
    40019ea0:	8b010081 	add	x1, x4, x1
    40019ea4:	97fff1f8 	bl	40016684 <matvec_sub>
      matmul_sub(lhs[jsize][AA], lhs[jsize-1][CC], lhs[jsize][BB]);
    40019ea8:	f94047e1 	ldr	x1, [sp, #136]
    40019eac:	aa1403e2 	mov	x2, x20
    40019eb0:	aa1c03e0 	mov	x0, x28
    40019eb4:	97fff25f 	bl	40016830 <matmul_sub>

      //---------------------------------------------------------------------
      // multiply rhs(jsize) by b_inverse(jsize) and copy to rhs
      //---------------------------------------------------------------------
      binvrhs( lhs[jsize][BB], rhs[k][jsize][i] );
    40019eb8:	f94063e3 	ldr	x3, [sp, #192]
    40019ebc:	aa1403e0 	mov	x0, x20
    40019ec0:	aa0303e1 	mov	x1, x3
    40019ec4:	97fff844 	bl	40017fd4 <binvrhs>
      // back solve: if last cell, then generate U(jsize)=rhs(jsize)
      // else assume U(jsize) is loaded in un pack backsub_info
      // so just use it
      // after u(jstart) will be sent to next cell
      //---------------------------------------------------------------------
      for (j = jsize-1; j >= 0; j--) {
    40019ec8:	f94063e3 	ldr	x3, [sp, #192]
    40019ecc:	2a1303e5 	mov	w5, w19
    40019ed0:	f94053e4 	ldr	x4, [sp, #160]
    40019ed4:	aa0303e1 	mov	x1, x3
    40019ed8:	37f83a65 	tbnz	w5, #31, 4001a624 <y_solve+0xb94>
    40019edc:	f9404be0 	ldr	x0, [sp, #144]
    40019ee0:	8b040f68 	add	x8, x27, x4, lsl #3
    40019ee4:	8b010002 	add	x2, x0, x1
    40019ee8:	d2800000 	mov	x0, #0x0                   	// #0
    40019eec:	140001c7 	b	4001a608 <y_solve+0xb78>
        tmp2 = dt * ty2;
    40019ef0:	1e7608e2 	fmul	d2, d7, d22
        tmp1 = dt * ty1;
    40019ef4:	1e7508e0 	fmul	d0, d7, d21
          - tmp1 * njac[j-1][0][0]
    40019ef8:	fc538064 	ldur	d4, [x3, #-200]
        lhs[j][CC][0][0] =  tmp2 * fjac[j+1][0][0]
    40019efc:	11000421 	add	w1, w1, #0x1
        lhs[j][AA][0][0] = - tmp2 * fjac[j-1][0][0]
    40019f00:	fd400083 	ldr	d3, [x4]
        lhs[j][CC][4][4] =  tmp2 * fjac[j+1][4][4]
    40019f04:	52800025 	mov	w5, #0x1                   	// #1
    40019f08:	91032084 	add	x4, x4, #0xc8
        lhs[j][AA][0][0] = - tmp2 * fjac[j-1][0][0]
    40019f0c:	1e614041 	fneg	d1, d2
          - tmp1 * njac[j-1][0][0]
    40019f10:	1e640804 	fmul	d4, d0, d4
          - tmp1 * dy1; 
    40019f14:	1e700805 	fmul	d5, d0, d16
          - tmp1 * dy2;
    40019f18:	1e710819 	fmul	d25, d0, d17
          - tmp1 * dy4;
    40019f1c:	1e730818 	fmul	d24, d0, d19
        lhs[j][AA][0][0] = - tmp2 * fjac[j-1][0][0]
    40019f20:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[j-1][0][0]
    40019f24:	1e643863 	fsub	d3, d3, d4
          - tmp1 * njac[j-1][1][0];
    40019f28:	fc560064 	ldur	d4, [x3, #-160]
    40019f2c:	1e640804 	fmul	d4, d0, d4
          - tmp1 * dy1; 
    40019f30:	1e653863 	fsub	d3, d3, d5
        lhs[j][AA][0][0] = - tmp2 * fjac[j-1][0][0]
    40019f34:	fd000003 	str	d3, [x0]
        lhs[j][AA][1][0] = - tmp2 * fjac[j-1][1][0]
    40019f38:	fc560083 	ldur	d3, [x4, #-160]
    40019f3c:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[j-1][1][0];
    40019f40:	1e643863 	fsub	d3, d3, d4
          - tmp1 * njac[j-1][2][0];
    40019f44:	fc588064 	ldur	d4, [x3, #-120]
    40019f48:	1e640804 	fmul	d4, d0, d4
        lhs[j][AA][1][0] = - tmp2 * fjac[j-1][1][0]
    40019f4c:	fd001403 	str	d3, [x0, #40]
        lhs[j][AA][2][0] = - tmp2 * fjac[j-1][2][0]
    40019f50:	fc588083 	ldur	d3, [x4, #-120]
    40019f54:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[j-1][2][0];
    40019f58:	1e643863 	fsub	d3, d3, d4
          - tmp1 * njac[j-1][3][0];
    40019f5c:	fc5b0064 	ldur	d4, [x3, #-80]
    40019f60:	1e640804 	fmul	d4, d0, d4
        lhs[j][AA][2][0] = - tmp2 * fjac[j-1][2][0]
    40019f64:	fd002803 	str	d3, [x0, #80]
        lhs[j][AA][3][0] = - tmp2 * fjac[j-1][3][0]
    40019f68:	fc5b0083 	ldur	d3, [x4, #-80]
    40019f6c:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[j-1][3][0];
    40019f70:	1e643863 	fsub	d3, d3, d4
          - tmp1 * njac[j-1][4][0];
    40019f74:	fc5d8064 	ldur	d4, [x3, #-40]
    40019f78:	1e640804 	fmul	d4, d0, d4
        lhs[j][AA][3][0] = - tmp2 * fjac[j-1][3][0]
    40019f7c:	fd003c03 	str	d3, [x0, #120]
        lhs[j][AA][4][0] = - tmp2 * fjac[j-1][4][0]
    40019f80:	fc5d8083 	ldur	d3, [x4, #-40]
    40019f84:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[j-1][4][0];
    40019f88:	1e643863 	fsub	d3, d3, d4
          - tmp1 * njac[j-1][0][1];
    40019f8c:	fc540064 	ldur	d4, [x3, #-192]
    40019f90:	1e640804 	fmul	d4, d0, d4
        lhs[j][AA][4][0] = - tmp2 * fjac[j-1][4][0]
    40019f94:	fd005003 	str	d3, [x0, #160]
        lhs[j][AA][0][1] = - tmp2 * fjac[j-1][0][1]
    40019f98:	fc540083 	ldur	d3, [x4, #-192]
    40019f9c:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[j-1][0][1];
    40019fa0:	1e643863 	fsub	d3, d3, d4
          - tmp1 * njac[j-1][1][1]
    40019fa4:	fc568064 	ldur	d4, [x3, #-152]
    40019fa8:	1e640804 	fmul	d4, d0, d4
        lhs[j][AA][0][1] = - tmp2 * fjac[j-1][0][1]
    40019fac:	fd000403 	str	d3, [x0, #8]
        lhs[j][AA][1][1] = - tmp2 * fjac[j-1][1][1]
    40019fb0:	fc568083 	ldur	d3, [x4, #-152]
    40019fb4:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[j-1][1][1]
    40019fb8:	1e643863 	fsub	d3, d3, d4
          - tmp1 * njac[j-1][2][1];
    40019fbc:	fc590064 	ldur	d4, [x3, #-112]
    40019fc0:	1e640804 	fmul	d4, d0, d4
          - tmp1 * dy2;
    40019fc4:	1e793863 	fsub	d3, d3, d25
        lhs[j][AA][1][1] = - tmp2 * fjac[j-1][1][1]
    40019fc8:	fd001803 	str	d3, [x0, #48]
        lhs[j][AA][2][1] = - tmp2 * fjac[j-1][2][1]
    40019fcc:	fc590083 	ldur	d3, [x4, #-112]
    40019fd0:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[j-1][2][1];
    40019fd4:	1e643863 	fsub	d3, d3, d4
          - tmp1 * njac[j-1][3][1];
    40019fd8:	fc5b8064 	ldur	d4, [x3, #-72]
    40019fdc:	1e640804 	fmul	d4, d0, d4
        lhs[j][AA][2][1] = - tmp2 * fjac[j-1][2][1]
    40019fe0:	fd002c03 	str	d3, [x0, #88]
        lhs[j][AA][3][1] = - tmp2 * fjac[j-1][3][1]
    40019fe4:	fc5b8083 	ldur	d3, [x4, #-72]
    40019fe8:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[j-1][3][1];
    40019fec:	1e643863 	fsub	d3, d3, d4
          - tmp1 * njac[j-1][4][1];
    40019ff0:	fc5e0064 	ldur	d4, [x3, #-32]
    40019ff4:	1e640804 	fmul	d4, d0, d4
        lhs[j][AA][3][1] = - tmp2 * fjac[j-1][3][1]
    40019ff8:	fd004003 	str	d3, [x0, #128]
        lhs[j][AA][4][1] = - tmp2 * fjac[j-1][4][1]
    40019ffc:	fc5e0083 	ldur	d3, [x4, #-32]
    4001a000:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[j-1][4][1];
    4001a004:	1e643863 	fsub	d3, d3, d4
          - tmp1 * njac[j-1][0][2];
    4001a008:	fc548064 	ldur	d4, [x3, #-184]
    4001a00c:	1e640804 	fmul	d4, d0, d4
        lhs[j][AA][4][1] = - tmp2 * fjac[j-1][4][1]
    4001a010:	fd005403 	str	d3, [x0, #168]
        lhs[j][AA][0][2] = - tmp2 * fjac[j-1][0][2]
    4001a014:	fc548083 	ldur	d3, [x4, #-184]
    4001a018:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[j-1][0][2];
    4001a01c:	1e643863 	fsub	d3, d3, d4
        lhs[j][AA][0][2] = - tmp2 * fjac[j-1][0][2]
    4001a020:	fd000803 	str	d3, [x0, #16]
        lhs[j][AA][1][2] = - tmp2 * fjac[j-1][1][2]
    4001a024:	fc570083 	ldur	d3, [x4, #-144]
          - tmp1 * njac[j-1][1][2];
    4001a028:	fc570064 	ldur	d4, [x3, #-144]
          - tmp1 * njac[j-1][2][2]
    4001a02c:	fc598077 	ldur	d23, [x3, #-104]
        lhs[j][AA][1][2] = - tmp2 * fjac[j-1][1][2]
    4001a030:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[j-1][1][2];
    4001a034:	1e640804 	fmul	d4, d0, d4
          - tmp1 * njac[j-1][2][2]
    4001a038:	1e770817 	fmul	d23, d0, d23
          - tmp1 * njac[j-1][1][2];
    4001a03c:	1e643863 	fsub	d3, d3, d4
        lhs[j][AA][2][2] = - tmp2 * fjac[j-1][2][2]
    4001a040:	fc598084 	ldur	d4, [x4, #-104]
    4001a044:	1e640824 	fmul	d4, d1, d4
        lhs[j][AA][1][2] = - tmp2 * fjac[j-1][1][2]
    4001a048:	fd001c03 	str	d3, [x0, #56]
          - tmp1 * dy3;
    4001a04c:	1e720803 	fmul	d3, d0, d18
          - tmp1 * njac[j-1][2][2]
    4001a050:	1e773884 	fsub	d4, d4, d23
          - tmp1 * njac[j-1][3][2];
    4001a054:	fc5c0077 	ldur	d23, [x3, #-64]
    4001a058:	1e770817 	fmul	d23, d0, d23
          - tmp1 * dy3;
    4001a05c:	1e633884 	fsub	d4, d4, d3
        lhs[j][AA][2][2] = - tmp2 * fjac[j-1][2][2]
    4001a060:	fd003004 	str	d4, [x0, #96]
        lhs[j][AA][3][2] = - tmp2 * fjac[j-1][3][2]
    4001a064:	fc5c0084 	ldur	d4, [x4, #-64]
    4001a068:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[j-1][3][2];
    4001a06c:	1e773884 	fsub	d4, d4, d23
          - tmp1 * njac[j-1][4][2];
    4001a070:	fc5e8077 	ldur	d23, [x3, #-24]
    4001a074:	1e770817 	fmul	d23, d0, d23
        lhs[j][AA][3][2] = - tmp2 * fjac[j-1][3][2]
    4001a078:	fd004404 	str	d4, [x0, #136]
        lhs[j][AA][4][2] = - tmp2 * fjac[j-1][4][2]
    4001a07c:	fc5e8084 	ldur	d4, [x4, #-24]
    4001a080:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[j-1][4][2];
    4001a084:	1e773884 	fsub	d4, d4, d23
          - tmp1 * njac[j-1][0][3];
    4001a088:	fc550077 	ldur	d23, [x3, #-176]
    4001a08c:	1e770817 	fmul	d23, d0, d23
        lhs[j][AA][4][2] = - tmp2 * fjac[j-1][4][2]
    4001a090:	fd005804 	str	d4, [x0, #176]
        lhs[j][AA][0][3] = - tmp2 * fjac[j-1][0][3]
    4001a094:	fc550084 	ldur	d4, [x4, #-176]
    4001a098:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[j-1][0][3];
    4001a09c:	1e773884 	fsub	d4, d4, d23
          - tmp1 * njac[j-1][1][3];
    4001a0a0:	fc578077 	ldur	d23, [x3, #-136]
    4001a0a4:	1e770817 	fmul	d23, d0, d23
        lhs[j][AA][0][3] = - tmp2 * fjac[j-1][0][3]
    4001a0a8:	fd000c04 	str	d4, [x0, #24]
        lhs[j][AA][1][3] = - tmp2 * fjac[j-1][1][3]
    4001a0ac:	fc578084 	ldur	d4, [x4, #-136]
    4001a0b0:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[j-1][1][3];
    4001a0b4:	1e773884 	fsub	d4, d4, d23
          - tmp1 * njac[j-1][2][3];
    4001a0b8:	fc5a0077 	ldur	d23, [x3, #-96]
    4001a0bc:	1e770817 	fmul	d23, d0, d23
        lhs[j][AA][1][3] = - tmp2 * fjac[j-1][1][3]
    4001a0c0:	fd002004 	str	d4, [x0, #64]
        lhs[j][AA][2][3] = - tmp2 * fjac[j-1][2][3]
    4001a0c4:	fc5a0084 	ldur	d4, [x4, #-96]
    4001a0c8:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[j-1][2][3];
    4001a0cc:	1e773884 	fsub	d4, d4, d23
          - tmp1 * njac[j-1][3][3]
    4001a0d0:	fc5c8077 	ldur	d23, [x3, #-56]
    4001a0d4:	1e770817 	fmul	d23, d0, d23
        lhs[j][AA][2][3] = - tmp2 * fjac[j-1][2][3]
    4001a0d8:	fd003404 	str	d4, [x0, #104]
        lhs[j][AA][3][3] = - tmp2 * fjac[j-1][3][3]
    4001a0dc:	fc5c8084 	ldur	d4, [x4, #-56]
    4001a0e0:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[j-1][3][3]
    4001a0e4:	1e773884 	fsub	d4, d4, d23
          - tmp1 * njac[j-1][4][3];
    4001a0e8:	fc5f0077 	ldur	d23, [x3, #-16]
    4001a0ec:	1e770817 	fmul	d23, d0, d23
          - tmp1 * dy4;
    4001a0f0:	1e783884 	fsub	d4, d4, d24
        lhs[j][AA][3][3] = - tmp2 * fjac[j-1][3][3]
    4001a0f4:	fd004804 	str	d4, [x0, #144]
        lhs[j][AA][4][3] = - tmp2 * fjac[j-1][4][3]
    4001a0f8:	fc5f0084 	ldur	d4, [x4, #-16]
    4001a0fc:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[j-1][4][3];
    4001a100:	1e773884 	fsub	d4, d4, d23
          - tmp1 * njac[j-1][0][4];
    4001a104:	fc558077 	ldur	d23, [x3, #-168]
    4001a108:	1e770817 	fmul	d23, d0, d23
        lhs[j][AA][4][3] = - tmp2 * fjac[j-1][4][3]
    4001a10c:	fd005c04 	str	d4, [x0, #184]
        lhs[j][AA][0][4] = - tmp2 * fjac[j-1][0][4]
    4001a110:	fc558084 	ldur	d4, [x4, #-168]
    4001a114:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[j-1][0][4];
    4001a118:	1e773884 	fsub	d4, d4, d23
          - tmp1 * njac[j-1][1][4];
    4001a11c:	fc580077 	ldur	d23, [x3, #-128]
    4001a120:	1e770817 	fmul	d23, d0, d23
        lhs[j][AA][0][4] = - tmp2 * fjac[j-1][0][4]
    4001a124:	fd001004 	str	d4, [x0, #32]
        lhs[j][AA][1][4] = - tmp2 * fjac[j-1][1][4]
    4001a128:	fc580084 	ldur	d4, [x4, #-128]
    4001a12c:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[j-1][1][4];
    4001a130:	1e773884 	fsub	d4, d4, d23
        lhs[j][AA][1][4] = - tmp2 * fjac[j-1][1][4]
    4001a134:	fd002404 	str	d4, [x0, #72]
        lhs[j][AA][2][4] = - tmp2 * fjac[j-1][2][4]
    4001a138:	fc5a8084 	ldur	d4, [x4, #-88]
          - tmp1 * njac[j-1][2][4];
    4001a13c:	fc5a8077 	ldur	d23, [x3, #-88]
        lhs[j][AA][2][4] = - tmp2 * fjac[j-1][2][4]
    4001a140:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[j-1][2][4];
    4001a144:	1e770817 	fmul	d23, d0, d23
    4001a148:	1e773884 	fsub	d4, d4, d23
          - tmp1 * njac[j-1][3][4];
    4001a14c:	fc5d0077 	ldur	d23, [x3, #-48]
    4001a150:	1e770817 	fmul	d23, d0, d23
        lhs[j][AA][2][4] = - tmp2 * fjac[j-1][2][4]
    4001a154:	fd003804 	str	d4, [x0, #112]
        lhs[j][AA][3][4] = - tmp2 * fjac[j-1][3][4]
    4001a158:	fc5d0084 	ldur	d4, [x4, #-48]
    4001a15c:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[j-1][3][4];
    4001a160:	1e773884 	fsub	d4, d4, d23
          - tmp1 * dy5;
    4001a164:	1e740817 	fmul	d23, d0, d20
        lhs[j][AA][3][4] = - tmp2 * fjac[j-1][3][4]
    4001a168:	fd004c04 	str	d4, [x0, #152]
        lhs[j][AA][4][4] = - tmp2 * fjac[j-1][4][4]
    4001a16c:	fc5f8084 	ldur	d4, [x4, #-8]
    4001a170:	1e640821 	fmul	d1, d1, d4
          - tmp1 * njac[j-1][4][4]
    4001a174:	fc5f8064 	ldur	d4, [x3, #-8]
    4001a178:	1e640804 	fmul	d4, d0, d4
    4001a17c:	1e643821 	fsub	d1, d1, d4
          + tmp1 * 2.0 * njac[j][0][0]
    4001a180:	fd400064 	ldr	d4, [x3]
          - tmp1 * dy5;
    4001a184:	1e773821 	fsub	d1, d1, d23
        lhs[j][AA][4][4] = - tmp2 * fjac[j-1][4][4]
    4001a188:	fd006001 	str	d1, [x0, #192]
          + tmp1 * 2.0 * njac[j][0][0]
    4001a18c:	1e602801 	fadd	d1, d0, d0
    4001a190:	1e640824 	fmul	d4, d1, d4
          + tmp1 * 2.0 * dy1;
    4001a194:	1e610a1a 	fmul	d26, d16, d1
          + tmp1 * 2.0 * njac[j][0][0]
    4001a198:	1e662884 	fadd	d4, d4, d6
          + tmp1 * 2.0 * dy1;
    4001a19c:	1e7a2884 	fadd	d4, d4, d26
          + tmp1 * 2.0 * dy2;
    4001a1a0:	1e610a3a 	fmul	d26, d17, d1
        lhs[j][BB][0][0] = 1.0
    4001a1a4:	fd006404 	str	d4, [x0, #200]
        lhs[j][BB][1][0] = tmp1 * 2.0 * njac[j][1][0];
    4001a1a8:	fd401464 	ldr	d4, [x3, #40]
    4001a1ac:	1e610884 	fmul	d4, d4, d1
    4001a1b0:	fd007804 	str	d4, [x0, #240]
        lhs[j][BB][2][0] = tmp1 * 2.0 * njac[j][2][0];
    4001a1b4:	fd402864 	ldr	d4, [x3, #80]
    4001a1b8:	1e610884 	fmul	d4, d4, d1
    4001a1bc:	fd008c04 	str	d4, [x0, #280]
        lhs[j][BB][3][0] = tmp1 * 2.0 * njac[j][3][0];
    4001a1c0:	fd403c64 	ldr	d4, [x3, #120]
    4001a1c4:	1e610884 	fmul	d4, d4, d1
    4001a1c8:	fd00a004 	str	d4, [x0, #320]
        lhs[j][BB][4][0] = tmp1 * 2.0 * njac[j][4][0];
    4001a1cc:	fd405064 	ldr	d4, [x3, #160]
    4001a1d0:	1e610884 	fmul	d4, d4, d1
    4001a1d4:	fd00b404 	str	d4, [x0, #360]
        lhs[j][BB][0][1] = tmp1 * 2.0 * njac[j][0][1];
    4001a1d8:	fd400464 	ldr	d4, [x3, #8]
    4001a1dc:	1e610884 	fmul	d4, d4, d1
    4001a1e0:	fd006804 	str	d4, [x0, #208]
          + tmp1 * 2.0 * njac[j][1][1]
    4001a1e4:	fd401864 	ldr	d4, [x3, #48]
    4001a1e8:	1e640824 	fmul	d4, d1, d4
    4001a1ec:	1e662884 	fadd	d4, d4, d6
          + tmp1 * 2.0 * dy2;
    4001a1f0:	1e7a2884 	fadd	d4, d4, d26
          + tmp1 * 2.0 * dy3;
    4001a1f4:	1e610a5a 	fmul	d26, d18, d1
        lhs[j][BB][1][1] = 1.0
    4001a1f8:	fd007c04 	str	d4, [x0, #248]
        lhs[j][BB][2][1] = tmp1 * 2.0 * njac[j][2][1];
    4001a1fc:	fd402c64 	ldr	d4, [x3, #88]
    4001a200:	1e610884 	fmul	d4, d4, d1
    4001a204:	fd009004 	str	d4, [x0, #288]
        lhs[j][BB][3][1] = tmp1 * 2.0 * njac[j][3][1];
    4001a208:	fd404064 	ldr	d4, [x3, #128]
    4001a20c:	1e610884 	fmul	d4, d4, d1
    4001a210:	fd00a404 	str	d4, [x0, #328]
        lhs[j][BB][4][1] = tmp1 * 2.0 * njac[j][4][1];
    4001a214:	fd405464 	ldr	d4, [x3, #168]
    4001a218:	1e610884 	fmul	d4, d4, d1
    4001a21c:	fd00b804 	str	d4, [x0, #368]
        lhs[j][BB][0][2] = tmp1 * 2.0 * njac[j][0][2];
    4001a220:	fd400864 	ldr	d4, [x3, #16]
    4001a224:	1e610884 	fmul	d4, d4, d1
    4001a228:	fd006c04 	str	d4, [x0, #216]
        lhs[j][BB][1][2] = tmp1 * 2.0 * njac[j][1][2];
    4001a22c:	fd401c64 	ldr	d4, [x3, #56]
    4001a230:	1e610884 	fmul	d4, d4, d1
    4001a234:	fd008004 	str	d4, [x0, #256]
          + tmp1 * 2.0 * njac[j][2][2]
    4001a238:	fd403064 	ldr	d4, [x3, #96]
    4001a23c:	1e640824 	fmul	d4, d1, d4
    4001a240:	1e662884 	fadd	d4, d4, d6
          + tmp1 * 2.0 * dy3;
    4001a244:	1e7a2884 	fadd	d4, d4, d26
          + tmp1 * 2.0 * dy4;
    4001a248:	1e610a7a 	fmul	d26, d19, d1
        lhs[j][BB][2][2] = 1.0
    4001a24c:	fd009404 	str	d4, [x0, #296]
        lhs[j][BB][3][2] = tmp1 * 2.0 * njac[j][3][2];
    4001a250:	fd404464 	ldr	d4, [x3, #136]
    4001a254:	1e610884 	fmul	d4, d4, d1
    4001a258:	fd00a804 	str	d4, [x0, #336]
        lhs[j][BB][4][2] = tmp1 * 2.0 * njac[j][4][2];
    4001a25c:	fd405864 	ldr	d4, [x3, #176]
    4001a260:	1e610884 	fmul	d4, d4, d1
    4001a264:	fd00bc04 	str	d4, [x0, #376]
        lhs[j][BB][0][3] = tmp1 * 2.0 * njac[j][0][3];
    4001a268:	fd400c64 	ldr	d4, [x3, #24]
    4001a26c:	1e610884 	fmul	d4, d4, d1
    4001a270:	fd007004 	str	d4, [x0, #224]
        lhs[j][BB][1][3] = tmp1 * 2.0 * njac[j][1][3];
    4001a274:	fd402064 	ldr	d4, [x3, #64]
    4001a278:	1e610884 	fmul	d4, d4, d1
    4001a27c:	fd008404 	str	d4, [x0, #264]
        lhs[j][BB][2][3] = tmp1 * 2.0 * njac[j][2][3];
    4001a280:	fd403464 	ldr	d4, [x3, #104]
    4001a284:	1e610884 	fmul	d4, d4, d1
    4001a288:	fd009804 	str	d4, [x0, #304]
          + tmp1 * 2.0 * njac[j][3][3]
    4001a28c:	fd404864 	ldr	d4, [x3, #144]
    4001a290:	1e640824 	fmul	d4, d1, d4
    4001a294:	1e662884 	fadd	d4, d4, d6
          + tmp1 * 2.0 * dy4;
    4001a298:	1e7a2884 	fadd	d4, d4, d26
        lhs[j][BB][3][3] = 1.0
    4001a29c:	fd00ac04 	str	d4, [x0, #344]
        lhs[j][BB][4][3] = tmp1 * 2.0 * njac[j][4][3];
    4001a2a0:	fd405c64 	ldr	d4, [x3, #184]
    4001a2a4:	1e610884 	fmul	d4, d4, d1
    4001a2a8:	fd00c004 	str	d4, [x0, #384]
        lhs[j][BB][0][4] = tmp1 * 2.0 * njac[j][0][4];
    4001a2ac:	fd401064 	ldr	d4, [x3, #32]
    4001a2b0:	1e610884 	fmul	d4, d4, d1
    4001a2b4:	fd007404 	str	d4, [x0, #232]
        lhs[j][BB][1][4] = tmp1 * 2.0 * njac[j][1][4];
    4001a2b8:	fd402464 	ldr	d4, [x3, #72]
    4001a2bc:	1e610884 	fmul	d4, d4, d1
    4001a2c0:	fd008804 	str	d4, [x0, #272]
        lhs[j][BB][2][4] = tmp1 * 2.0 * njac[j][2][4];
    4001a2c4:	fd403864 	ldr	d4, [x3, #112]
    4001a2c8:	1e610884 	fmul	d4, d4, d1
    4001a2cc:	fd009c04 	str	d4, [x0, #312]
        lhs[j][BB][3][4] = tmp1 * 2.0 * njac[j][3][4];
    4001a2d0:	fd404c64 	ldr	d4, [x3, #152]
    4001a2d4:	1e610884 	fmul	d4, d4, d1
    4001a2d8:	fd00b004 	str	d4, [x0, #352]
          + tmp1 * 2.0 * njac[j][4][4] 
    4001a2dc:	fd406064 	ldr	d4, [x3, #192]
    4001a2e0:	1e640824 	fmul	d4, d1, d4
          + tmp1 * 2.0 * dy5;
    4001a2e4:	1e610a81 	fmul	d1, d20, d1
          + tmp1 * 2.0 * njac[j][4][4] 
    4001a2e8:	1e662884 	fadd	d4, d4, d6
          + tmp1 * 2.0 * dy5;
    4001a2ec:	1e612881 	fadd	d1, d4, d1
          - tmp1 * njac[j+1][0][0]
    4001a2f0:	fd406464 	ldr	d4, [x3, #200]
    4001a2f4:	1e640804 	fmul	d4, d0, d4
        lhs[j][BB][4][4] = 1.0
    4001a2f8:	fd00c401 	str	d1, [x0, #392]
        lhs[j][CC][0][0] =  tmp2 * fjac[j+1][0][0]
    4001a2fc:	fd406481 	ldr	d1, [x4, #200]
    4001a300:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[j+1][0][0]
    4001a304:	1e643821 	fsub	d1, d1, d4
          - tmp1 * njac[j+1][1][0];
    4001a308:	fd407864 	ldr	d4, [x3, #240]
    4001a30c:	1e640804 	fmul	d4, d0, d4
          - tmp1 * dy1;
    4001a310:	1e653821 	fsub	d1, d1, d5
        lhs[j][CC][0][0] =  tmp2 * fjac[j+1][0][0]
    4001a314:	fd00c801 	str	d1, [x0, #400]
        lhs[j][CC][1][0] =  tmp2 * fjac[j+1][1][0]
    4001a318:	fd407881 	ldr	d1, [x4, #240]
    4001a31c:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[j+1][1][0];
    4001a320:	1e643821 	fsub	d1, d1, d4
        lhs[j][CC][1][0] =  tmp2 * fjac[j+1][1][0]
    4001a324:	fd00dc01 	str	d1, [x0, #440]
        lhs[j][CC][2][0] =  tmp2 * fjac[j+1][2][0]
    4001a328:	fd408c81 	ldr	d1, [x4, #280]
          - tmp1 * njac[j+1][2][0];
    4001a32c:	fd408c64 	ldr	d4, [x3, #280]
        lhs[j][CC][1][1] =  tmp2 * fjac[j+1][1][1]
    4001a330:	fd407c85 	ldr	d5, [x4, #248]
        lhs[j][CC][2][0] =  tmp2 * fjac[j+1][2][0]
    4001a334:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[j+1][2][0];
    4001a338:	1e640804 	fmul	d4, d0, d4
        lhs[j][CC][1][1] =  tmp2 * fjac[j+1][1][1]
    4001a33c:	1e650845 	fmul	d5, d2, d5
          - tmp1 * njac[j+1][2][0];
    4001a340:	1e643821 	fsub	d1, d1, d4
          - tmp1 * njac[j+1][3][0];
    4001a344:	fd40a064 	ldr	d4, [x3, #320]
    4001a348:	1e640804 	fmul	d4, d0, d4
        lhs[j][CC][2][0] =  tmp2 * fjac[j+1][2][0]
    4001a34c:	fd00f001 	str	d1, [x0, #480]
        lhs[j][CC][3][0] =  tmp2 * fjac[j+1][3][0]
    4001a350:	fd40a081 	ldr	d1, [x4, #320]
    4001a354:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[j+1][3][0];
    4001a358:	1e643821 	fsub	d1, d1, d4
          - tmp1 * njac[j+1][4][0];
    4001a35c:	fd40b464 	ldr	d4, [x3, #360]
    4001a360:	1e640804 	fmul	d4, d0, d4
        lhs[j][CC][3][0] =  tmp2 * fjac[j+1][3][0]
    4001a364:	fd010401 	str	d1, [x0, #520]
        lhs[j][CC][4][0] =  tmp2 * fjac[j+1][4][0]
    4001a368:	fd40b481 	ldr	d1, [x4, #360]
    4001a36c:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[j+1][4][0];
    4001a370:	1e643821 	fsub	d1, d1, d4
          - tmp1 * njac[j+1][0][1];
    4001a374:	fd406864 	ldr	d4, [x3, #208]
    4001a378:	1e640804 	fmul	d4, d0, d4
        lhs[j][CC][4][0] =  tmp2 * fjac[j+1][4][0]
    4001a37c:	fd011801 	str	d1, [x0, #560]
        lhs[j][CC][0][1] =  tmp2 * fjac[j+1][0][1]
    4001a380:	fd406881 	ldr	d1, [x4, #208]
    4001a384:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[j+1][0][1];
    4001a388:	1e643821 	fsub	d1, d1, d4
          - tmp1 * njac[j+1][2][1];
    4001a38c:	fd409064 	ldr	d4, [x3, #288]
    4001a390:	1e640804 	fmul	d4, d0, d4
        lhs[j][CC][0][1] =  tmp2 * fjac[j+1][0][1]
    4001a394:	fd00cc01 	str	d1, [x0, #408]
          - tmp1 * njac[j+1][1][1]
    4001a398:	fd407c61 	ldr	d1, [x3, #248]
    4001a39c:	1e610801 	fmul	d1, d0, d1
    4001a3a0:	1e6138a5 	fsub	d5, d5, d1
        lhs[j][CC][2][1] =  tmp2 * fjac[j+1][2][1]
    4001a3a4:	fd409081 	ldr	d1, [x4, #288]
    4001a3a8:	1e610841 	fmul	d1, d2, d1
          - tmp1 * dy2;
    4001a3ac:	1e7938a5 	fsub	d5, d5, d25
          - tmp1 * njac[j+1][2][1];
    4001a3b0:	1e643821 	fsub	d1, d1, d4
          - tmp1 * njac[j+1][3][1];
    4001a3b4:	fd40a464 	ldr	d4, [x3, #328]
        lhs[j][CC][1][1] =  tmp2 * fjac[j+1][1][1]
    4001a3b8:	fd00e005 	str	d5, [x0, #448]
          - tmp1 * njac[j+1][3][1];
    4001a3bc:	1e640804 	fmul	d4, d0, d4
        lhs[j][CC][2][1] =  tmp2 * fjac[j+1][2][1]
    4001a3c0:	fd00f401 	str	d1, [x0, #488]
        lhs[j][CC][3][1] =  tmp2 * fjac[j+1][3][1]
    4001a3c4:	fd40a481 	ldr	d1, [x4, #328]
    4001a3c8:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[j+1][3][1];
    4001a3cc:	1e643821 	fsub	d1, d1, d4
          - tmp1 * njac[j+1][4][1];
    4001a3d0:	fd40b864 	ldr	d4, [x3, #368]
    4001a3d4:	1e640804 	fmul	d4, d0, d4
        lhs[j][CC][3][1] =  tmp2 * fjac[j+1][3][1]
    4001a3d8:	fd010801 	str	d1, [x0, #528]
        lhs[j][CC][4][1] =  tmp2 * fjac[j+1][4][1]
    4001a3dc:	fd40b881 	ldr	d1, [x4, #368]
    4001a3e0:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[j+1][4][1];
    4001a3e4:	1e643821 	fsub	d1, d1, d4
          - tmp1 * njac[j+1][0][2];
    4001a3e8:	fd406c64 	ldr	d4, [x3, #216]
    4001a3ec:	1e640804 	fmul	d4, d0, d4
        lhs[j][CC][4][1] =  tmp2 * fjac[j+1][4][1]
    4001a3f0:	fd011c01 	str	d1, [x0, #568]
        lhs[j][CC][0][2] =  tmp2 * fjac[j+1][0][2]
    4001a3f4:	fd406c81 	ldr	d1, [x4, #216]
    4001a3f8:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[j+1][0][2];
    4001a3fc:	1e643821 	fsub	d1, d1, d4
          - tmp1 * njac[j+1][1][2];
    4001a400:	fd408064 	ldr	d4, [x3, #256]
    4001a404:	1e640804 	fmul	d4, d0, d4
        lhs[j][CC][0][2] =  tmp2 * fjac[j+1][0][2]
    4001a408:	fd00d001 	str	d1, [x0, #416]
        lhs[j][CC][1][2] =  tmp2 * fjac[j+1][1][2]
    4001a40c:	fd408081 	ldr	d1, [x4, #256]
    4001a410:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[j+1][1][2];
    4001a414:	1e643821 	fsub	d1, d1, d4
        lhs[j][CC][2][2] =  tmp2 * fjac[j+1][2][2]
    4001a418:	fd409484 	ldr	d4, [x4, #296]
    4001a41c:	1e640844 	fmul	d4, d2, d4
        lhs[j][CC][1][2] =  tmp2 * fjac[j+1][1][2]
    4001a420:	fd00e401 	str	d1, [x0, #456]
          - tmp1 * njac[j+1][2][2]
    4001a424:	fd409461 	ldr	d1, [x3, #296]
    4001a428:	1e610801 	fmul	d1, d0, d1
    4001a42c:	1e613884 	fsub	d4, d4, d1
          - tmp1 * dy3;
    4001a430:	1e633884 	fsub	d4, d4, d3
        lhs[j][CC][2][2] =  tmp2 * fjac[j+1][2][2]
    4001a434:	fd00f804 	str	d4, [x0, #496]
        lhs[j][CC][3][2] =  tmp2 * fjac[j+1][3][2]
    4001a438:	fd40a881 	ldr	d1, [x4, #336]
          - tmp1 * njac[j+1][3][2];
    4001a43c:	fd40a863 	ldr	d3, [x3, #336]
        lhs[j][CC][3][2] =  tmp2 * fjac[j+1][3][2]
    4001a440:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[j+1][3][2];
    4001a444:	1e630803 	fmul	d3, d0, d3
    4001a448:	1e633821 	fsub	d1, d1, d3
          - tmp1 * njac[j+1][4][2];
    4001a44c:	fd40bc63 	ldr	d3, [x3, #376]
    4001a450:	1e630803 	fmul	d3, d0, d3
        lhs[j][CC][3][2] =  tmp2 * fjac[j+1][3][2]
    4001a454:	fd010c01 	str	d1, [x0, #536]
        lhs[j][CC][4][2] =  tmp2 * fjac[j+1][4][2]
    4001a458:	fd40bc81 	ldr	d1, [x4, #376]
    4001a45c:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[j+1][4][2];
    4001a460:	1e633821 	fsub	d1, d1, d3
          - tmp1 * njac[j+1][0][3];
    4001a464:	fd407063 	ldr	d3, [x3, #224]
    4001a468:	1e630803 	fmul	d3, d0, d3
        lhs[j][CC][4][2] =  tmp2 * fjac[j+1][4][2]
    4001a46c:	fd012001 	str	d1, [x0, #576]
        lhs[j][CC][0][3] =  tmp2 * fjac[j+1][0][3]
    4001a470:	fd407081 	ldr	d1, [x4, #224]
    4001a474:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[j+1][0][3];
    4001a478:	1e633821 	fsub	d1, d1, d3
          - tmp1 * njac[j+1][1][3];
    4001a47c:	fd408463 	ldr	d3, [x3, #264]
    4001a480:	1e630803 	fmul	d3, d0, d3
        lhs[j][CC][0][3] =  tmp2 * fjac[j+1][0][3]
    4001a484:	fd00d401 	str	d1, [x0, #424]
        lhs[j][CC][1][3] =  tmp2 * fjac[j+1][1][3]
    4001a488:	fd408481 	ldr	d1, [x4, #264]
    4001a48c:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[j+1][1][3];
    4001a490:	1e633821 	fsub	d1, d1, d3
          - tmp1 * njac[j+1][2][3];
    4001a494:	fd409863 	ldr	d3, [x3, #304]
    4001a498:	1e630803 	fmul	d3, d0, d3
        lhs[j][CC][1][3] =  tmp2 * fjac[j+1][1][3]
    4001a49c:	fd00e801 	str	d1, [x0, #464]
        lhs[j][CC][2][3] =  tmp2 * fjac[j+1][2][3]
    4001a4a0:	fd409881 	ldr	d1, [x4, #304]
    4001a4a4:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[j+1][2][3];
    4001a4a8:	1e633821 	fsub	d1, d1, d3
        lhs[j][CC][3][3] =  tmp2 * fjac[j+1][3][3]
    4001a4ac:	fd40ac83 	ldr	d3, [x4, #344]
    4001a4b0:	1e630843 	fmul	d3, d2, d3
        lhs[j][CC][2][3] =  tmp2 * fjac[j+1][2][3]
    4001a4b4:	fd00fc01 	str	d1, [x0, #504]
          - tmp1 * njac[j+1][3][3]
    4001a4b8:	fd40ac61 	ldr	d1, [x3, #344]
    4001a4bc:	1e610801 	fmul	d1, d0, d1
    4001a4c0:	1e613863 	fsub	d3, d3, d1
        lhs[j][CC][4][3] =  tmp2 * fjac[j+1][4][3]
    4001a4c4:	fd40c081 	ldr	d1, [x4, #384]
    4001a4c8:	1e610841 	fmul	d1, d2, d1
          - tmp1 * dy4;
    4001a4cc:	1e783863 	fsub	d3, d3, d24
        lhs[j][CC][3][3] =  tmp2 * fjac[j+1][3][3]
    4001a4d0:	fd011003 	str	d3, [x0, #544]
          - tmp1 * njac[j+1][4][3];
    4001a4d4:	fd40c063 	ldr	d3, [x3, #384]
    4001a4d8:	1e630803 	fmul	d3, d0, d3
    4001a4dc:	1e633821 	fsub	d1, d1, d3
          - tmp1 * njac[j+1][0][4];
    4001a4e0:	fd407463 	ldr	d3, [x3, #232]
    4001a4e4:	1e630803 	fmul	d3, d0, d3
        lhs[j][CC][4][3] =  tmp2 * fjac[j+1][4][3]
    4001a4e8:	fd012401 	str	d1, [x0, #584]
        lhs[j][CC][0][4] =  tmp2 * fjac[j+1][0][4]
    4001a4ec:	fd407481 	ldr	d1, [x4, #232]
    4001a4f0:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[j+1][0][4];
    4001a4f4:	1e633821 	fsub	d1, d1, d3
          - tmp1 * njac[j+1][1][4];
    4001a4f8:	fd408863 	ldr	d3, [x3, #272]
    4001a4fc:	1e630803 	fmul	d3, d0, d3
        lhs[j][CC][0][4] =  tmp2 * fjac[j+1][0][4]
    4001a500:	fd00d801 	str	d1, [x0, #432]
        lhs[j][CC][1][4] =  tmp2 * fjac[j+1][1][4]
    4001a504:	fd408881 	ldr	d1, [x4, #272]
    4001a508:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[j+1][1][4];
    4001a50c:	1e633821 	fsub	d1, d1, d3
          - tmp1 * njac[j+1][2][4];
    4001a510:	fd409c63 	ldr	d3, [x3, #312]
    4001a514:	1e630803 	fmul	d3, d0, d3
        lhs[j][CC][1][4] =  tmp2 * fjac[j+1][1][4]
    4001a518:	fd00ec01 	str	d1, [x0, #472]
        lhs[j][CC][2][4] =  tmp2 * fjac[j+1][2][4]
    4001a51c:	fd409c81 	ldr	d1, [x4, #312]
    4001a520:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[j+1][2][4];
    4001a524:	1e633821 	fsub	d1, d1, d3
          - tmp1 * njac[j+1][3][4];
    4001a528:	fd40b063 	ldr	d3, [x3, #352]
    4001a52c:	1e630803 	fmul	d3, d0, d3
        lhs[j][CC][2][4] =  tmp2 * fjac[j+1][2][4]
    4001a530:	fd010001 	str	d1, [x0, #512]
        lhs[j][CC][3][4] =  tmp2 * fjac[j+1][3][4]
    4001a534:	fd40b081 	ldr	d1, [x4, #352]
    4001a538:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[j+1][3][4];
    4001a53c:	1e633821 	fsub	d1, d1, d3
        lhs[j][CC][3][4] =  tmp2 * fjac[j+1][3][4]
    4001a540:	fd011401 	str	d1, [x0, #552]
        lhs[j][CC][4][4] =  tmp2 * fjac[j+1][4][4]
    4001a544:	fd40c481 	ldr	d1, [x4, #392]
          - tmp1 * njac[j+1][4][4]
    4001a548:	fd40c463 	ldr	d3, [x3, #392]
        lhs[j][CC][4][4] =  tmp2 * fjac[j+1][4][4]
    4001a54c:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[j+1][4][4]
    4001a550:	1e630803 	fmul	d3, d0, d3
    4001a554:	1e633821 	fsub	d1, d1, d3
          - tmp1 * dy5;
    4001a558:	1e773821 	fsub	d1, d1, d23
        lhs[j][CC][4][4] =  tmp2 * fjac[j+1][4][4]
    4001a55c:	fd012801 	str	d1, [x0, #592]
      for (j = 1; j <= jsize-1; j++) {
    4001a560:	17fffe2b 	b	40019e0c <y_solve+0x37c>
        matvec_sub(lhs[j][AA], rhs[k][j-1][i], rhs[k][j][i]);
    4001a564:	aa0603e2 	mov	x2, x6
    4001a568:	aa0803e0 	mov	x0, x8
    4001a56c:	a90c0fe8 	stp	x8, x3, [sp, #192]
    4001a570:	f90073e6 	str	x6, [sp, #224]
    4001a574:	b900efe5 	str	w5, [sp, #236]
    4001a578:	97fff043 	bl	40016684 <matvec_sub>
        matmul_sub(lhs[j][AA], lhs[j-1][CC], lhs[j][BB]);
    4001a57c:	a94c0fe8 	ldp	x8, x3, [sp, #192]
    4001a580:	a90c8fe8 	stp	x8, x3, [sp, #200]
    4001a584:	910c8069 	add	x9, x3, #0x320
    4001a588:	aa0803e0 	mov	x0, x8
    4001a58c:	aa0903e2 	mov	x2, x9
    4001a590:	91064061 	add	x1, x3, #0x190
    4001a594:	f9006fe9 	str	x9, [sp, #216]
    4001a598:	97fff0a6 	bl	40016830 <matmul_sub>
        binvcrhs( lhs[j][BB], lhs[j][CC], rhs[k][j][i] );
    4001a59c:	a94d27e3 	ldp	x3, x9, [sp, #208]
    4001a5a0:	f94073e6 	ldr	x6, [sp, #224]
    4001a5a4:	f90063e6 	str	x6, [sp, #192]
    4001a5a8:	aa0603e2 	mov	x2, x6
    4001a5ac:	910fa061 	add	x1, x3, #0x3e8
    4001a5b0:	aa0903e0 	mov	x0, x9
    4001a5b4:	97fff2c9 	bl	400170d8 <binvcrhs>
      for (j = 1; j <= jsize-1; j++) {
    4001a5b8:	a94c23e6 	ldp	x6, x8, [sp, #192]
    4001a5bc:	b940efe5 	ldr	w5, [sp, #236]
    4001a5c0:	110004a5 	add	w5, w5, #0x1
    4001a5c4:	aa0603e1 	mov	x1, x6
    4001a5c8:	aa0803e3 	mov	x3, x8
    4001a5cc:	17fffe24 	b	40019e5c <y_solve+0x3cc>
        for (m = 0; m < BLOCK_SIZE; m++) {
          for (n = 0; n < BLOCK_SIZE; n++) {
            rhs[k][j][i][m] = rhs[k][j][i][m] 
              - lhs[j][CC][n][m]*rhs[k][j+1][i][n];
    4001a5d0:	fc637821 	ldr	d1, [x1, x3, lsl #3]
          for (n = 0; n < BLOCK_SIZE; n++) {
    4001a5d4:	91000463 	add	x3, x3, #0x1
              - lhs[j][CC][n][m]*rhs[k][j+1][i][n];
    4001a5d8:	fd40c8c0 	ldr	d0, [x6, #400]
          for (n = 0; n < BLOCK_SIZE; n++) {
    4001a5dc:	f100147f 	cmp	x3, #0x5
    4001a5e0:	9100a0c6 	add	x6, x6, #0x28
              - lhs[j][CC][n][m]*rhs[k][j+1][i][n];
    4001a5e4:	1e610801 	fmul	d1, d0, d1
    4001a5e8:	fd400040 	ldr	d0, [x2]
    4001a5ec:	1e613800 	fsub	d0, d0, d1
            rhs[k][j][i][m] = rhs[k][j][i][m] 
    4001a5f0:	fd000040 	str	d0, [x2]
          for (n = 0; n < BLOCK_SIZE; n++) {
    4001a5f4:	54fffee1 	b.ne	4001a5d0 <y_solve+0xb40>  // b.any
        for (m = 0; m < BLOCK_SIZE; m++) {
    4001a5f8:	91002000 	add	x0, x0, #0x8
    4001a5fc:	91002042 	add	x2, x2, #0x8
    4001a600:	f100a01f 	cmp	x0, #0x28
    4001a604:	54000080 	b.eq	4001a614 <y_solve+0xb84>  // b.none
          for (n = 0; n < BLOCK_SIZE; n++) {
    4001a608:	8b000106 	add	x6, x8, x0
      for (j = 1; j <= jsize-1; j++) {
    4001a60c:	d2800003 	mov	x3, #0x0                   	// #0
    4001a610:	17fffff0 	b	4001a5d0 <y_solve+0xb40>
      for (j = jsize-1; j >= 0; j--) {
    4001a614:	510004a5 	sub	w5, w5, #0x1
    4001a618:	d1082021 	sub	x1, x1, #0x208
    4001a61c:	d1012c84 	sub	x4, x4, #0x4b
    4001a620:	17fffe2e 	b	40019ed8 <y_solve+0x448>
    for (i = 1; i <= grid_points[0]-2; i++) {
    4001a624:	110006d6 	add	w22, w22, #0x1
    4001a628:	b9400320 	ldr	w0, [x25]
    4001a62c:	51000800 	sub	w0, w0, #0x2
    4001a630:	6b16001f 	cmp	w0, w22
    4001a634:	5400058b 	b.lt	4001a6e4 <y_solve+0xc54>  // b.tstop
          + c2 * qs[k][j][i];
    4001a638:	d0000080 	adrp	x0, 4002c000 <z_idle_threads>
    4001a63c:	fd441410 	ldr	d16, [x0, #2088]
        fjac[j][0][4] = ( c2 * 2.0 * square[k][j][i] - c1 * u[k][j][i][4] )
    4001a640:	d0000080 	adrp	x0, 4002c000 <z_idle_threads>
    4001a644:	fd440416 	ldr	d22, [x0, #2056]
        njac[j][0][1] = - c3c4 * tmp2 * u[k][j][i][1];
    4001a648:	d0000080 	adrp	x0, 4002c000 <z_idle_threads>
    4001a64c:	fd442c11 	ldr	d17, [x0, #2136]
        njac[j][0][2] = - con43 * c3c4 * tmp2 * u[k][j][i][2];
    4001a650:	d0000080 	adrp	x0, 4002c000 <z_idle_threads>
    4001a654:	fd456415 	ldr	d21, [x0, #2760]
    4001a658:	5280051a 	mov	w26, #0x28                  	// #40
            - c1345 ) * tmp3 * (u[k][j][i][1]*u[k][j][i][1])
    4001a65c:	d0000080 	adrp	x0, 4002c000 <z_idle_threads>
    4001a660:	fd440813 	ldr	d19, [x0, #2064]
    4001a664:	d0000084 	adrp	x4, 4002c000 <z_idle_threads>
    4001a668:	9132a084 	add	x4, x4, #0xca8
    4001a66c:	9b3a7eda 	smull	x26, w22, w26
    4001a670:	f9403fe0 	ldr	x0, [sp, #120]
    4001a674:	b0000246 	adrp	x6, 40063000 <square+0x37a8>
    4001a678:	912060c6 	add	x6, x6, #0x818
    4001a67c:	b0000143 	adrp	x3, 40043000 <lhs+0x1c50>
    4001a680:	9108a063 	add	x3, x3, #0x228
    4001a684:	8b1a0002 	add	x2, x0, x26
    4001a688:	f94057e0 	ldr	x0, [sp, #168]
    4001a68c:	b0000249 	adrp	x9, 40063000 <square+0x37a8>
    4001a690:	fd43e121 	ldr	d1, [x9, #1984]
    4001a694:	b000024d 	adrp	x13, 40063000 <square+0x37a8>
    4001a698:	fd43e5b2 	ldr	d18, [x13, #1992]
          + c2 * qs[k][j][i];
    4001a69c:	b000014a 	adrp	x10, 40043000 <lhs+0x1c50>
    4001a6a0:	9132e14a 	add	x10, x10, #0xcb8
    4001a6a4:	8b36c008 	add	x8, x0, w22, sxtw
        fjac[j][0][4] = ( c2 * 2.0 * square[k][j][i] - c1 * u[k][j][i][4] )
    4001a6a8:	b0000221 	adrp	x1, 4005f000 <rhs+0x13488>
    4001a6ac:	91216021 	add	x1, x1, #0x858
        fjac[j][1][2] = - c2 *  u[k][j][i][1] * tmp1;
    4001a6b0:	1e614214 	fneg	d20, d16
        njac[j][0][1] = - c3c4 * tmp2 * u[k][j][i][1];
    4001a6b4:	1e61423a 	fneg	d26, d17
        njac[j][0][2] = - con43 * c3c4 * tmp2 * u[k][j][i][2];
    4001a6b8:	1e6142b9 	fneg	d25, d21
            - c1345 ) * tmp3 * (u[k][j][i][1]*u[k][j][i][1])
    4001a6bc:	aa0303e5 	mov	x5, x3
    4001a6c0:	8b060046 	add	x6, x2, x6
    4001a6c4:	d37df108 	lsl	x8, x8, #3
    4001a6c8:	aa0403e0 	mov	x0, x4
    4001a6cc:	5280000c 	mov	w12, #0x0                   	// #0
      for (j = 0; j <= jsize; j++) {
    4001a6d0:	5280000b 	mov	w11, #0x0                   	// #0
        fjac[j][2][0] = 1.0;
    4001a6d4:	1e6e1018 	fmov	d24, #1.000000000000000000e+00
        fjac[j][2][2] = ( 2.0 - c2 ) *  u[k][j][i][2] * tmp1;
    4001a6d8:	1e601017 	fmov	d23, #2.000000000000000000e+00
    4001a6dc:	fd4002a0 	ldr	d0, [x21]
    4001a6e0:	17fffda7 	b	40019d7c <y_solve+0x2ec>
  for (k = 1; k <= grid_points[2]-2; k++) {
    4001a6e4:	110006f7 	add	w23, w23, #0x1
    4001a6e8:	17fffd16 	b	40019b40 <y_solve+0xb0>
          }
        }
      }
    }
  }
  if (timeron) timer_stop(t_ysolve);
    4001a6ec:	f9405be0 	ldr	x0, [sp, #176]
    4001a6f0:	b94a8c00 	ldr	w0, [x0, #2700]
    4001a6f4:	34000140 	cbz	w0, 4001a71c <y_solve+0xc8c>
}
    4001a6f8:	a94153f3 	ldp	x19, x20, [sp, #16]
  if (timeron) timer_stop(t_ysolve);
    4001a6fc:	528000e0 	mov	w0, #0x7                   	// #7
}
    4001a700:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4001a704:	a94363f7 	ldp	x23, x24, [sp, #48]
    4001a708:	a9446bf9 	ldp	x25, x26, [sp, #64]
    4001a70c:	a94573fb 	ldp	x27, x28, [sp, #80]
    4001a710:	fd4033e8 	ldr	d8, [sp, #96]
    4001a714:	a8cf7bfd 	ldp	x29, x30, [sp], #240
  if (timeron) timer_stop(t_ysolve);
    4001a718:	17ffe049 	b	4001283c <timer_stop>
}
    4001a71c:	a94153f3 	ldp	x19, x20, [sp, #16]
    4001a720:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4001a724:	a94363f7 	ldp	x23, x24, [sp, #48]
    4001a728:	a9446bf9 	ldp	x25, x26, [sp, #64]
    4001a72c:	a94573fb 	ldp	x27, x28, [sp, #80]
    4001a730:	fd4033e8 	ldr	d8, [sp, #96]
    4001a734:	a8cf7bfd 	ldp	x29, x30, [sp], #240
    4001a738:	d65f03c0 	ret

000000004001a73c <z_solve>:
// 
// Make sure we treat elements zero to cell_size in the direction
// of the sweep.
//---------------------------------------------------------------------
void z_solve()
{
    4001a73c:	a9b07bfd 	stp	x29, x30, [sp, #-256]!
    4001a740:	910003fd 	mov	x29, sp
  int i, j, k, m, n, ksize;

  //---------------------------------------------------------------------
  //---------------------------------------------------------------------

  if (timeron) timer_start(t_zsolve);
    4001a744:	b0000340 	adrp	x0, 40083000 <ws+0x3a40>
    4001a748:	b94a8c01 	ldr	w1, [x0, #2700]
{
    4001a74c:	a90153f3 	stp	x19, x20, [sp, #16]
    4001a750:	a9025bf5 	stp	x21, x22, [sp, #32]
    4001a754:	a90363f7 	stp	x23, x24, [sp, #48]
    4001a758:	a9046bf9 	stp	x25, x26, [sp, #64]
    4001a75c:	a90573fb 	stp	x27, x28, [sp, #80]
    4001a760:	f90063e0 	str	x0, [sp, #192]
    4001a764:	6d0627e8 	stp	d8, d9, [sp, #96]
  if (timeron) timer_start(t_zsolve);
    4001a768:	34000061 	cbz	w1, 4001a774 <z_solve+0x38>
    4001a76c:	52800100 	mov	w0, #0x8                   	// #8
    4001a770:	97ffe026 	bl	40012808 <timer_start>

  //---------------------------------------------------------------------
  // This function computes the left hand side for the three z-factors   
  //---------------------------------------------------------------------

  ksize = grid_points[2]-1;
    4001a774:	b000035a 	adrp	x26, 40083000 <ws+0x3a40>
    4001a778:	912a035a 	add	x26, x26, #0xa80
      //---------------------------------------------------------------------

      //---------------------------------------------------------------------
      // rhs(ksize) = rhs(ksize) - A*rhs(ksize-1)
      //---------------------------------------------------------------------
      matvec_sub(lhs[ksize][AA], rhs[ksize-1][j][i], rhs[ksize][j][i]);
    4001a77c:	f0000125 	adrp	x5, 40041000 <forcing+0x13930>
    4001a780:	910ec0b6 	add	x22, x5, #0x3b0
    4001a784:	52804b00 	mov	w0, #0x258                 	// #600
  for (j = 1; j <= grid_points[1]-2; j++) {
    4001a788:	52800038 	mov	w24, #0x1                   	// #1
  ksize = grid_points[2]-1;
    4001a78c:	b9400b44 	ldr	w4, [x26, #8]
      for (k = 1; k <= ksize-1; k++) {
    4001a790:	5100089c 	sub	w28, w4, #0x2
  ksize = grid_points[2]-1;
    4001a794:	51000499 	sub	w25, w4, #0x1
  for (j = 1; j <= grid_points[1]-2; j++) {
    4001a798:	9b207f34 	smull	x20, w25, w0
      //---------------------------------------------------------------------
      // B(ksize) = B(ksize) - C(ksize-1)*A(ksize)
      // matmul_sub(AA,i,j,ksize,c,
      // $              CC,i,j,ksize-1,c,BB,i,j,ksize)
      //---------------------------------------------------------------------
      matmul_sub(lhs[ksize][AA], lhs[ksize-1][CC], lhs[ksize][BB]);
    4001a79c:	9b205b80 	smaddl	x0, w28, w0, x22
      matvec_sub(lhs[ksize][AA], rhs[ksize-1][j][i], rhs[ksize][j][i]);
    4001a7a0:	8b160281 	add	x1, x20, x22
    4001a7a4:	f9003fe1 	str	x1, [sp, #120]
      matmul_sub(lhs[ksize][AA], lhs[ksize-1][CC], lhs[ksize][BB]);
    4001a7a8:	91064000 	add	x0, x0, #0x190
    4001a7ac:	52834d01 	mov	w1, #0x1a68                	// #6760
    4001a7b0:	f9004fe0 	str	x0, [sp, #152]
    4001a7b4:	52800960 	mov	w0, #0x4b                  	// #75
    4001a7b8:	9b217f82 	smull	x2, w28, w1
    4001a7bc:	91032294 	add	x20, x20, #0xc8
    4001a7c0:	9b207f80 	smull	x0, w28, w0
    4001a7c4:	8b160294 	add	x20, x20, x22
    4001a7c8:	9b217f21 	smull	x1, w25, w1
    4001a7cc:	a90a83e2 	stp	x2, x0, [sp, #168]
    4001a7d0:	93407f80 	sxtw	x0, w28
    4001a7d4:	cb39c000 	sub	x0, x0, w25, sxtw
    4001a7d8:	f90047e1 	str	x1, [sp, #136]
    4001a7dc:	d2834d01 	mov	x1, #0x1a68                	// #6760
    4001a7e0:	9b017c00 	mul	x0, x0, x1
    4001a7e4:	f90053e0 	str	x0, [sp, #160]
          + c2 * qs[k][j][i];
    4001a7e8:	b0000140 	adrp	x0, 40043000 <lhs+0x1c50>
    4001a7ec:	9132e000 	add	x0, x0, #0xcb8
    4001a7f0:	f90067e0 	str	x0, [sp, #200]
  for (j = 1; j <= grid_points[1]-2; j++) {
    4001a7f4:	b9400740 	ldr	w0, [x26, #4]
    4001a7f8:	51000800 	sub	w0, w0, #0x2
    4001a7fc:	6b18001f 	cmp	w0, w24
    4001a800:	54005d8b 	b.lt	4001b3b0 <z_solve+0xc74>  // b.tstop
    4001a804:	52804100 	mov	w0, #0x208                 	// #520
    4001a808:	b0000255 	adrp	x21, 40063000 <square+0x37a8>
    4001a80c:	911ee2b5 	add	x21, x21, #0x7b8
    for (i = 1; i <= grid_points[0]-2; i++) {
    4001a810:	52800037 	mov	w23, #0x1                   	// #1
    4001a814:	9b207f00 	smull	x0, w24, w0
    4001a818:	f90043e0 	str	x0, [sp, #128]
    4001a81c:	528001a0 	mov	w0, #0xd                   	// #13
    4001a820:	9b207f00 	smull	x0, w24, w0
    4001a824:	f9005fe0 	str	x0, [sp, #184]
    4001a828:	140002ac 	b	4001b2d8 <z_solve+0xb9c>
        fjac[k][0][1] = - ( u[k][j][i][1]*u[k][j][i][3] ) * tmp2;
    4001a82c:	6d401460 	ldp	d0, d5, [x3]
        fjac[k][0][0] = 0.0;
    4001a830:	f900001f 	str	xzr, [x0]
        fjac[k][0][4] = ( c2 * 2.0 * square[k][j][i] - c1 * u[k][j][i][4] )
    4001a834:	6d41f463 	ldp	d3, d29, [x3, #24]
        fjac[k][1][0] = 0.0;
    4001a838:	f900141f 	str	xzr, [x0, #40]
        tmp1 = 1.0 / u[k][j][i][0];
    4001a83c:	1e601ac0 	fdiv	d0, d22, d0
        fjac[k][0][4] = ( c2 * 2.0 * square[k][j][i] - c1 * u[k][j][i][4] )
    4001a840:	fc6868c9 	ldr	d9, [x6, x8]
          + c2 * qs[k][j][i];
    4001a844:	f94067e4 	ldr	x4, [sp, #200]
        fjac[k][0][1] = - ( u[k][j][i][1]*u[k][j][i][3] ) * tmp2;
    4001a848:	1e6308bf 	fmul	d31, d5, d3
        fjac[k][0][3] = - (u[k][j][i][3]*u[k][j][i][3] * tmp2 ) 
    4001a84c:	1e63087e 	fmul	d30, d3, d3
        fjac[k][1][2] = 0.0;
    4001a850:	f9001c1f 	str	xzr, [x0, #56]
        fjac[k][2][0] = 0.0;
    4001a854:	f900281f 	str	xzr, [x0, #80]
      for (k = 0; k <= ksize; k++) {
    4001a858:	11000529 	add	w9, w9, #0x1
        fjac[k][2][1] = 0.0;
    4001a85c:	f9002c1f 	str	xzr, [x0, #88]
      for (k = 0; k <= ksize; k++) {
    4001a860:	5280002a 	mov	w10, #0x1                   	// #1
        fjac[k][4][0] = 0.0;
    4001a864:	f900501f 	str	xzr, [x0, #160]
        fjac[k][4][1] = 0.0;
    4001a868:	f900541f 	str	xzr, [x0, #168]
        fjac[k][4][2] = 0.0;
    4001a86c:	f900581f 	str	xzr, [x0, #176]
        fjac[k][4][3] = c2;
    4001a870:	fd005c07 	str	d7, [x0, #184]
        fjac[k][3][1] = u[k][j][i][1] * tmp1;
    4001a874:	1e650804 	fmul	d4, d0, d5
        tmp2 = tmp1 * tmp1;
    4001a878:	1e600801 	fmul	d1, d0, d0
        fjac[k][3][1] = u[k][j][i][1] * tmp1;
    4001a87c:	6d079016 	stp	d22, d4, [x0, #120]
        fjac[k][0][1] = - ( u[k][j][i][1]*u[k][j][i][3] ) * tmp2;
    4001a880:	1e618be2 	fnmul	d2, d31, d1
        fjac[k][0][2] = - ( u[k][j][i][2]*u[k][j][i][3] ) * tmp2;
    4001a884:	fd400864 	ldr	d4, [x3, #16]
        fjac[k][0][3] = - (u[k][j][i][3]*u[k][j][i][3] * tmp2 ) 
    4001a888:	1e7e0828 	fmul	d8, d1, d30
        fjac[k][1][4] = - c2 * ( u[k][j][i][1]*u[k][j][i][3] ) * tmp2;
    4001a88c:	1e730bff 	fmul	d31, d31, d19
        tmp3 = tmp1 * tmp2;
    4001a890:	1e610811 	fmul	d17, d0, d1
        fjac[k][3][0] = 1.0;
    4001a894:	8b0c0063 	add	x3, x3, x12
        fjac[k][0][2] = - ( u[k][j][i][2]*u[k][j][i][3] ) * tmp2;
    4001a898:	1e64087c 	fmul	d28, d3, d4
        fjac[k][0][1] = - ( u[k][j][i][1]*u[k][j][i][3] ) * tmp2;
    4001a89c:	fd000402 	str	d2, [x0, #8]
        fjac[k][1][1] = u[k][j][i][3] * tmp1;
    4001a8a0:	1e630802 	fmul	d2, d0, d3
    4001a8a4:	91032000 	add	x0, x0, #0xc8
        fjac[k][1][4] = - c2 * ( u[k][j][i][1]*u[k][j][i][3] ) * tmp2;
    4001a8a8:	1e610bff 	fmul	d31, d31, d1
        fjac[k][0][2] = - ( u[k][j][i][2]*u[k][j][i][3] ) * tmp2;
    4001a8ac:	1e618b86 	fnmul	d6, d28, d1
        fjac[k][2][4] = - c2 * ( u[k][j][i][2]*u[k][j][i][3] ) * tmp2;
    4001a8b0:	1e730b9c 	fmul	d28, d28, d19
        fjac[k][1][1] = u[k][j][i][3] * tmp1;
    4001a8b4:	fc168002 	stur	d2, [x0, #-152]
        fjac[k][2][2] = u[k][j][i][3] * tmp1;
    4001a8b8:	fc198002 	stur	d2, [x0, #-104]
        fjac[k][3][2] = u[k][j][i][2] * tmp1;
    4001a8bc:	1e640802 	fmul	d2, d0, d4
        fjac[k][1][4] = - c2 * ( u[k][j][i][1]*u[k][j][i][3] ) * tmp2;
    4001a8c0:	fc18001f 	stur	d31, [x0, #-128]
          - ( c3c4 - c1345 ) * tmp3 * (u[k][j][i][2]*u[k][j][i][2])
    4001a8c4:	1e64089f 	fmul	d31, d4, d4
        fjac[k][0][2] = - ( u[k][j][i][2]*u[k][j][i][3] ) * tmp2;
    4001a8c8:	fc148006 	stur	d6, [x0, #-184]
        fjac[k][2][4] = - c2 * ( u[k][j][i][2]*u[k][j][i][3] ) * tmp2;
    4001a8cc:	1e610b9c 	fmul	d28, d28, d1
          + c2 * qs[k][j][i];
    4001a8d0:	fc6468c6 	ldr	d6, [x6, x4]
    4001a8d4:	911520c6 	add	x6, x6, #0x548
        fjac[k][3][2] = u[k][j][i][2] * tmp1;
    4001a8d8:	fc1c0002 	stur	d2, [x0, #-64]
          + c2 * qs[k][j][i];
    4001a8dc:	1e6708c2 	fmul	d2, d6, d7
          - c2 * ( qs[k][j][i] + u[k][j][i][3]*u[k][j][i][3] * tmp2 );
    4001a8e0:	1e6828c6 	fadd	d6, d6, d8
        fjac[k][2][4] = - c2 * ( u[k][j][i][2]*u[k][j][i][3] ) * tmp2;
    4001a8e4:	fc1a801c 	stur	d28, [x0, #-88]
            - c1345 ) * tmp3 * (u[k][j][i][1]*u[k][j][i][1])
    4001a8e8:	1e723a1c 	fsub	d28, d16, d18
          + c2 * qs[k][j][i];
    4001a8ec:	1e683842 	fsub	d2, d2, d8
          - c2 * ( qs[k][j][i] + u[k][j][i][3]*u[k][j][i][3] * tmp2 );
    4001a8f0:	1e6708c6 	fmul	d6, d6, d7
            - c1345 ) * tmp3 * (u[k][j][i][1]*u[k][j][i][1])
    4001a8f4:	1e6508a8 	fmul	d8, d5, d5
        fjac[k][0][3] = - (u[k][j][i][3]*u[k][j][i][3] * tmp2 ) 
    4001a8f8:	fc150002 	stur	d2, [x0, #-176]
        fjac[k][1][3] = - c2 *  u[k][j][i][1] * tmp1;
    4001a8fc:	1e7308a2 	fmul	d2, d5, d19
    4001a900:	1e600842 	fmul	d2, d2, d0
    4001a904:	fc178002 	stur	d2, [x0, #-136]
        fjac[k][2][3] = - c2 *  u[k][j][i][2] * tmp1;
    4001a908:	1e730882 	fmul	d2, d4, d19
    4001a90c:	1e600842 	fmul	d2, d2, d0
    4001a910:	fc1a0002 	stur	d2, [x0, #-96]
        fjac[k][3][3] = ( 2.0 - c2 ) *  u[k][j][i][3] * tmp1;
    4001a914:	1e673ae2 	fsub	d2, d23, d7
    4001a918:	1e630842 	fmul	d2, d2, d3
    4001a91c:	1e600842 	fmul	d2, d2, d0
    4001a920:	fc1c8002 	stur	d2, [x0, #-56]
        fjac[k][0][4] = ( c2 * 2.0 * square[k][j][i] - c1 * u[k][j][i][4] )
    4001a924:	1e6728e2 	fadd	d2, d7, d7
    4001a928:	1e690842 	fmul	d2, d2, d9
    4001a92c:	1e750ba9 	fmul	d9, d29, d21
    4001a930:	1e693842 	fsub	d2, d2, d9
          * u[k][j][i][3] * tmp2;
    4001a934:	1e630842 	fmul	d2, d2, d3
    4001a938:	1e610842 	fmul	d2, d2, d1
        fjac[k][0][4] = ( c2 * 2.0 * square[k][j][i] - c1 * u[k][j][i][4] )
    4001a93c:	fc158002 	stur	d2, [x0, #-168]
        fjac[k][3][4] = c1 * ( u[k][j][i][4] * tmp1 )
    4001a940:	1e7d0802 	fmul	d2, d0, d29
    4001a944:	1e750842 	fmul	d2, d2, d21
          - c2 * ( qs[k][j][i] + u[k][j][i][3]*u[k][j][i][3] * tmp2 );
    4001a948:	1e663846 	fsub	d6, d2, d6
        fjac[k][4][4] = c1 * u[k][j][i][3] * tmp1;
    4001a94c:	1e750862 	fmul	d2, d3, d21
    4001a950:	1e600842 	fmul	d2, d2, d0
        fjac[k][3][4] = c1 * ( u[k][j][i][4] * tmp1 )
    4001a954:	fc1d0006 	stur	d6, [x0, #-48]
        fjac[k][4][4] = c1 * u[k][j][i][3] * tmp1;
    4001a958:	fc1f8002 	stur	d2, [x0, #-8]
        njac[k][0][1] = - c3c4 * tmp2 * u[k][j][i][1];
    4001a95c:	1e7b0822 	fmul	d2, d1, d27
        njac[k][0][0] = 0.0;
    4001a960:	f900003f 	str	xzr, [x1]
        njac[k][1][0] = 0.0;
    4001a964:	f900143f 	str	xzr, [x1, #40]
        njac[k][1][2] =   0.0;
    4001a968:	f9001c3f 	str	xzr, [x1, #56]
        njac[k][0][1] = - c3c4 * tmp2 * u[k][j][i][1];
    4001a96c:	1e6208a6 	fmul	d6, d5, d2
        njac[k][0][2] = - c3c4 * tmp2 * u[k][j][i][2];
    4001a970:	1e620882 	fmul	d2, d4, d2
        njac[k][1][3] =   0.0;
    4001a974:	f900203f 	str	xzr, [x1, #64]
        njac[k][2][0] = 0.0;
    4001a978:	f900283f 	str	xzr, [x1, #80]
        njac[k][2][1] =   0.0;
    4001a97c:	f9002c3f 	str	xzr, [x1, #88]
        njac[k][0][2] = - c3c4 * tmp2 * u[k][j][i][2];
    4001a980:	6d008826 	stp	d6, d2, [x1, #8]
        njac[k][0][3] = - con43 * c3c4 * tmp2 * u[k][j][i][3];
    4001a984:	1e7a0a02 	fmul	d2, d16, d26
        njac[k][1][1] =   c3c4 * tmp1;
    4001a988:	1e700806 	fmul	d6, d0, d16
    4001a98c:	91032021 	add	x1, x1, #0xc8
        njac[k][2][3] =   0.0;
    4001a990:	f81a003f 	stur	xzr, [x1, #-96]
        njac[k][3][0] = 0.0;
    4001a994:	f81b003f 	stur	xzr, [x1, #-80]
        njac[k][0][3] = - con43 * c3c4 * tmp2 * u[k][j][i][3];
    4001a998:	1e610842 	fmul	d2, d2, d1
        njac[k][3][1] =   0.0;
    4001a99c:	f81b803f 	stur	xzr, [x1, #-72]
        njac[k][1][1] =   c3c4 * tmp1;
    4001a9a0:	fc168026 	stur	d6, [x1, #-152]
        njac[k][2][2] =   c3c4 * tmp1;
    4001a9a4:	fc198026 	stur	d6, [x1, #-104]
          - ( con43 * c3c4
    4001a9a8:	1e740a06 	fmul	d6, d16, d20
        njac[k][3][2] =   0.0;
    4001a9ac:	f81c003f 	stur	xzr, [x1, #-64]
        njac[k][0][3] = - con43 * c3c4 * tmp2 * u[k][j][i][3];
    4001a9b0:	1e630842 	fmul	d2, d2, d3
        njac[k][4][0] = 0.0;
    4001a9b4:	f81d803f 	stur	xzr, [x1, #-40]
        njac[k][4][1] =   0.0;
    4001a9b8:	f81e003f 	stur	xzr, [x1, #-32]
              - c1345 ) * tmp3 * (u[k][j][i][3]*u[k][j][i][3])
    4001a9bc:	1e7238c6 	fsub	d6, d6, d18
        njac[k][4][2] =   0.0;
    4001a9c0:	f81e803f 	stur	xzr, [x1, #-24]
        njac[k][4][3] =   0.0;
    4001a9c4:	f81f003f 	stur	xzr, [x1, #-16]
        njac[k][0][3] = - con43 * c3c4 * tmp2 * u[k][j][i][3];
    4001a9c8:	fc150022 	stur	d2, [x1, #-176]
        njac[k][3][3] =   con43 * c3 * c4 * tmp1;
    4001a9cc:	1e790a82 	fmul	d2, d20, d25
    4001a9d0:	1e780842 	fmul	d2, d2, d24
    4001a9d4:	1e600842 	fmul	d2, d2, d0
    4001a9d8:	fc1c8022 	stur	d2, [x1, #-56]
            - c1345 ) * tmp3 * (u[k][j][i][1]*u[k][j][i][1])
    4001a9dc:	1e718b82 	fnmul	d2, d28, d17
    4001a9e0:	1e680842 	fmul	d2, d2, d8
          - ( c3c4 - c1345 ) * tmp3 * (u[k][j][i][2]*u[k][j][i][2])
    4001a9e4:	1e7c0a28 	fmul	d8, d17, d28
        njac[k][1][4] = (  c3c4 - c1345 ) * tmp2 * u[k][j][i][1];
    4001a9e8:	1e7c083c 	fmul	d28, d1, d28
          - ( c3c4 - c1345 ) * tmp3 * (u[k][j][i][2]*u[k][j][i][2])
    4001a9ec:	1e7f0908 	fmul	d8, d8, d31
        njac[k][1][4] = (  c3c4 - c1345 ) * tmp2 * u[k][j][i][1];
    4001a9f0:	1e7c08a5 	fmul	d5, d5, d28
        njac[k][2][4] = (  c3c4 - c1345 ) * tmp2 * u[k][j][i][2];
    4001a9f4:	1e7c0884 	fmul	d4, d4, d28
          - ( c3c4 - c1345 ) * tmp3 * (u[k][j][i][2]*u[k][j][i][2])
    4001a9f8:	1e683842 	fsub	d2, d2, d8
              - c1345 ) * tmp3 * (u[k][j][i][3]*u[k][j][i][3])
    4001a9fc:	1e660a28 	fmul	d8, d17, d6
            - c1345 ) * tmp2 * u[k][j][i][3];
    4001aa00:	1e660826 	fmul	d6, d1, d6
        njac[k][1][4] = (  c3c4 - c1345 ) * tmp2 * u[k][j][i][1];
    4001aa04:	fc180025 	stur	d5, [x1, #-128]
        njac[k][2][4] = (  c3c4 - c1345 ) * tmp2 * u[k][j][i][2];
    4001aa08:	fc1a8024 	stur	d4, [x1, #-88]
              - c1345 ) * tmp3 * (u[k][j][i][3]*u[k][j][i][3])
    4001aa0c:	1e7e091e 	fmul	d30, d8, d30
          - c1345 * tmp2 * u[k][j][i][4];
    4001aa10:	1e720828 	fmul	d8, d1, d18
            - c1345 ) * tmp2 * u[k][j][i][3];
    4001aa14:	1e6308c3 	fmul	d3, d6, d3
          - ( con43 * c3c4
    4001aa18:	1e7e3842 	fsub	d2, d2, d30
          - c1345 * tmp2 * u[k][j][i][4];
    4001aa1c:	1e7d091d 	fmul	d29, d8, d29
        njac[k][3][4] = ( con43 * c3c4
    4001aa20:	fc1d0023 	stur	d3, [x1, #-48]
          - c1345 * tmp2 * u[k][j][i][4];
    4001aa24:	1e7d3842 	fsub	d2, d2, d29
        njac[k][0][4] = - (  c3c4
    4001aa28:	fc158022 	stur	d2, [x1, #-168]
        njac[k][4][4] = ( c1345 )* tmp1;
    4001aa2c:	1e720802 	fmul	d2, d0, d18
    4001aa30:	fc1f8022 	stur	d2, [x1, #-8]
      for (k = 0; k <= ksize; k++) {
    4001aa34:	6b19013f 	cmp	w9, w25
    4001aa38:	54ffefad 	b.le	4001a82c <z_solve+0xf0>
    4001aa3c:	3400008a 	cbz	w10, 4001aa4c <z_solve+0x310>
    4001aa40:	fd03e0e1 	str	d1, [x7, #1984]
    4001aa44:	fd03e571 	str	d17, [x11, #1992]
    4001aa48:	fd0002a0 	str	d0, [x21]
      lhsinit(lhs, ksize);
    4001aa4c:	2a1903e1 	mov	w1, w25
    4001aa50:	aa1603e0 	mov	x0, x22
    4001aa54:	f9006be2 	str	x2, [sp, #208]
    4001aa58:	97ffe701 	bl	4001465c <lhsinit>
        tmp1 = dt * tz1;
    4001aa5c:	d0000080 	adrp	x0, 4002c000 <z_idle_threads>
    4001aa60:	fd45b007 	ldr	d7, [x0, #2912]
    4001aa64:	b0000240 	adrp	x0, 40063000 <square+0x37a8>
    4001aa68:	fd440015 	ldr	d21, [x0, #2048]
        tmp2 = dt * tz2;
    4001aa6c:	b0000240 	adrp	x0, 40063000 <square+0x37a8>
    4001aa70:	fd440416 	ldr	d22, [x0, #2056]
          - tmp1 * dz1; 
    4001aa74:	d0000080 	adrp	x0, 4002c000 <z_idle_threads>
    4001aa78:	fd462810 	ldr	d16, [x0, #3152]
          - tmp1 * dz2;
    4001aa7c:	d0000080 	adrp	x0, 4002c000 <z_idle_threads>
    4001aa80:	fd463011 	ldr	d17, [x0, #3168]
          - tmp1 * dz3;
    4001aa84:	d0000080 	adrp	x0, 4002c000 <z_idle_threads>
    4001aa88:	fd463812 	ldr	d18, [x0, #3184]
          - tmp1 * dz4;
    4001aa8c:	d0000080 	adrp	x0, 4002c000 <z_idle_threads>
    4001aa90:	fd464013 	ldr	d19, [x0, #3200]
          - tmp1 * dz5;
    4001aa94:	d0000080 	adrp	x0, 4002c000 <z_idle_threads>
    4001aa98:	fd464814 	ldr	d20, [x0, #3216]
      for (k = 1; k <= ksize-1; k++) {
    4001aa9c:	f9406be2 	ldr	x2, [sp, #208]
    4001aaa0:	b0000247 	adrp	x7, 40063000 <square+0x37a8>
    4001aaa4:	fd43e0e2 	ldr	d2, [x7, #1984]
    4001aaa8:	aa1603e0 	mov	x0, x22
    4001aaac:	fd4002a0 	ldr	d0, [x21]
    4001aab0:	52800003 	mov	w3, #0x0                   	// #0
    4001aab4:	52800021 	mov	w1, #0x1                   	// #1
          + tmp1 * 2.0 * njac[k][0][0]
    4001aab8:	1e6e1006 	fmov	d6, #1.000000000000000000e+00
      for (k = 1; k <= ksize-1; k++) {
    4001aabc:	91032273 	add	x19, x19, #0xc8
    4001aac0:	91096000 	add	x0, x0, #0x258
    4001aac4:	6b01039f 	cmp	w28, w1
    4001aac8:	540006ca 	b.ge	4001aba0 <z_solve+0x464>  // b.tcont
    4001aacc:	34000063 	cbz	w3, 4001aad8 <z_solve+0x39c>
    4001aad0:	fd03e0e2 	str	d2, [x7, #1984]
    4001aad4:	fd0002a0 	str	d0, [x21]
      binvcrhs( lhs[0][BB], lhs[0][CC], rhs[0][j][i] );
    4001aad8:	b0000193 	adrp	x19, 4004b000 <rho_i+0x33e8>
    4001aadc:	912de273 	add	x19, x19, #0xb78
    4001aae0:	8b130362 	add	x2, x27, x19
    4001aae4:	f0000121 	adrp	x1, 40041000 <forcing+0x13930>
    4001aae8:	91150021 	add	x1, x1, #0x540
    4001aaec:	f0000120 	adrp	x0, 40041000 <forcing+0x13930>
    4001aaf0:	9111e000 	add	x0, x0, #0x478
    4001aaf4:	f9006be2 	str	x2, [sp, #208]
    4001aaf8:	97fff178 	bl	400170d8 <binvcrhs>
      for (k = 1; k <= ksize-1; k++) {
    4001aafc:	f9406be2 	ldr	x2, [sp, #208]
    4001ab00:	aa1603e3 	mov	x3, x22
    4001ab04:	52800026 	mov	w6, #0x1                   	// #1
    4001ab08:	aa0203e1 	mov	x1, x2
    4001ab0c:	d2834d0a 	mov	x10, #0x1a68                	// #6760
    4001ab10:	91096068 	add	x8, x3, #0x258
    4001ab14:	8b0a0027 	add	x7, x1, x10
    4001ab18:	6b06039f 	cmp	w28, w6
    4001ab1c:	540037ca 	b.ge	4001b214 <z_solve+0xad8>  // b.tcont
      matvec_sub(lhs[ksize][AA], rhs[ksize-1][j][i], rhs[ksize][j][i]);
    4001ab20:	f94047e0 	ldr	x0, [sp, #136]
    4001ab24:	8b1b0003 	add	x3, x0, x27
    4001ab28:	f94057e0 	ldr	x0, [sp, #168]
    4001ab2c:	8b030263 	add	x3, x19, x3
    4001ab30:	aa0303e2 	mov	x2, x3
    4001ab34:	f9006be3 	str	x3, [sp, #208]
    4001ab38:	8b1b0001 	add	x1, x0, x27
    4001ab3c:	f9403fe0 	ldr	x0, [sp, #120]
    4001ab40:	8b010261 	add	x1, x19, x1
    4001ab44:	97ffeed0 	bl	40016684 <matvec_sub>
      matmul_sub(lhs[ksize][AA], lhs[ksize-1][CC], lhs[ksize][BB]);
    4001ab48:	f9403fe0 	ldr	x0, [sp, #120]
    4001ab4c:	aa1403e2 	mov	x2, x20
    4001ab50:	f9404fe1 	ldr	x1, [sp, #152]
    4001ab54:	97ffef37 	bl	40016830 <matmul_sub>

      //---------------------------------------------------------------------
      // multiply rhs(ksize) by b_inverse(ksize) and copy to rhs
      //---------------------------------------------------------------------
      binvrhs( lhs[ksize][BB], rhs[ksize][j][i] );
    4001ab58:	f9406be3 	ldr	x3, [sp, #208]
    4001ab5c:	aa1403e0 	mov	x0, x20
    4001ab60:	aa0303e1 	mov	x1, x3
    4001ab64:	97fff51c 	bl	40017fd4 <binvrhs>
      // else assume U(ksize) is loaded in un pack backsub_info
      // so just use it
      // after u(kstart) will be sent to next cell
      //---------------------------------------------------------------------

      for (k = ksize-1; k >= 0; k--) {
    4001ab68:	a94807e0 	ldp	x0, x1, [sp, #128]
    4001ab6c:	2a1c03e6 	mov	w6, w28
    4001ab70:	f9405be3 	ldr	x3, [sp, #176]
    4001ab74:	92834ce9 	mov	x9, #0xffffffffffffe598    	// #-6760
    4001ab78:	8b010000 	add	x0, x0, x1
    4001ab7c:	f9404be1 	ldr	x1, [sp, #144]
    4001ab80:	8b01001b 	add	x27, x0, x1
    4001ab84:	8b1b0273 	add	x19, x19, x27
    4001ab88:	37f83a66 	tbnz	w6, #31, 4001b2d4 <z_solve+0xb98>
    4001ab8c:	f94053e0 	ldr	x0, [sp, #160]
    4001ab90:	8b030ec8 	add	x8, x22, x3, lsl #3
    4001ab94:	8b130001 	add	x1, x0, x19
    4001ab98:	d2800000 	mov	x0, #0x0                   	// #0
    4001ab9c:	140001c7 	b	4001b2b8 <z_solve+0xb7c>
        tmp2 = dt * tz2;
    4001aba0:	1e7608e2 	fmul	d2, d7, d22
        tmp1 = dt * tz1;
    4001aba4:	1e7508e0 	fmul	d0, d7, d21
          - tmp1 * njac[k-1][0][0]
    4001aba8:	fc538264 	ldur	d4, [x19, #-200]
        lhs[k][CC][0][0] =  tmp2 * fjac[k+1][0][0]
    4001abac:	11000421 	add	w1, w1, #0x1
        lhs[k][AA][0][0] = - tmp2 * fjac[k-1][0][0]
    4001abb0:	fd400043 	ldr	d3, [x2]
        lhs[k][CC][4][4] =  tmp2 * fjac[k+1][4][4]
    4001abb4:	52800023 	mov	w3, #0x1                   	// #1
    4001abb8:	91032042 	add	x2, x2, #0xc8
        lhs[k][AA][0][0] = - tmp2 * fjac[k-1][0][0]
    4001abbc:	1e614041 	fneg	d1, d2
          - tmp1 * njac[k-1][0][0]
    4001abc0:	1e640804 	fmul	d4, d0, d4
          - tmp1 * dz1; 
    4001abc4:	1e700805 	fmul	d5, d0, d16
          - tmp1 * dz2;
    4001abc8:	1e710819 	fmul	d25, d0, d17
          - tmp1 * dz4;
    4001abcc:	1e730818 	fmul	d24, d0, d19
          - tmp1 * dz5;
    4001abd0:	1e740817 	fmul	d23, d0, d20
        lhs[k][AA][0][0] = - tmp2 * fjac[k-1][0][0]
    4001abd4:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[k-1][0][0]
    4001abd8:	1e643863 	fsub	d3, d3, d4
          - tmp1 * njac[k-1][1][0];
    4001abdc:	fc560264 	ldur	d4, [x19, #-160]
    4001abe0:	1e640804 	fmul	d4, d0, d4
          - tmp1 * dz1; 
    4001abe4:	1e653863 	fsub	d3, d3, d5
        lhs[k][AA][0][0] = - tmp2 * fjac[k-1][0][0]
    4001abe8:	fd000003 	str	d3, [x0]
        lhs[k][AA][1][0] = - tmp2 * fjac[k-1][1][0]
    4001abec:	fc560043 	ldur	d3, [x2, #-160]
    4001abf0:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[k-1][1][0];
    4001abf4:	1e643863 	fsub	d3, d3, d4
          - tmp1 * njac[k-1][2][0];
    4001abf8:	fc588264 	ldur	d4, [x19, #-120]
    4001abfc:	1e640804 	fmul	d4, d0, d4
        lhs[k][AA][1][0] = - tmp2 * fjac[k-1][1][0]
    4001ac00:	fd001403 	str	d3, [x0, #40]
        lhs[k][AA][2][0] = - tmp2 * fjac[k-1][2][0]
    4001ac04:	fc588043 	ldur	d3, [x2, #-120]
    4001ac08:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[k-1][2][0];
    4001ac0c:	1e643863 	fsub	d3, d3, d4
          - tmp1 * njac[k-1][3][0];
    4001ac10:	fc5b0264 	ldur	d4, [x19, #-80]
    4001ac14:	1e640804 	fmul	d4, d0, d4
        lhs[k][AA][2][0] = - tmp2 * fjac[k-1][2][0]
    4001ac18:	fd002803 	str	d3, [x0, #80]
        lhs[k][AA][3][0] = - tmp2 * fjac[k-1][3][0]
    4001ac1c:	fc5b0043 	ldur	d3, [x2, #-80]
    4001ac20:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[k-1][3][0];
    4001ac24:	1e643863 	fsub	d3, d3, d4
          - tmp1 * njac[k-1][4][0];
    4001ac28:	fc5d8264 	ldur	d4, [x19, #-40]
    4001ac2c:	1e640804 	fmul	d4, d0, d4
        lhs[k][AA][3][0] = - tmp2 * fjac[k-1][3][0]
    4001ac30:	fd003c03 	str	d3, [x0, #120]
        lhs[k][AA][4][0] = - tmp2 * fjac[k-1][4][0]
    4001ac34:	fc5d8043 	ldur	d3, [x2, #-40]
    4001ac38:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[k-1][4][0];
    4001ac3c:	1e643863 	fsub	d3, d3, d4
          - tmp1 * njac[k-1][0][1];
    4001ac40:	fc540264 	ldur	d4, [x19, #-192]
    4001ac44:	1e640804 	fmul	d4, d0, d4
        lhs[k][AA][4][0] = - tmp2 * fjac[k-1][4][0]
    4001ac48:	fd005003 	str	d3, [x0, #160]
        lhs[k][AA][0][1] = - tmp2 * fjac[k-1][0][1]
    4001ac4c:	fc540043 	ldur	d3, [x2, #-192]
    4001ac50:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[k-1][0][1];
    4001ac54:	1e643863 	fsub	d3, d3, d4
          - tmp1 * njac[k-1][1][1]
    4001ac58:	fc568264 	ldur	d4, [x19, #-152]
    4001ac5c:	1e640804 	fmul	d4, d0, d4
        lhs[k][AA][0][1] = - tmp2 * fjac[k-1][0][1]
    4001ac60:	fd000403 	str	d3, [x0, #8]
        lhs[k][AA][1][1] = - tmp2 * fjac[k-1][1][1]
    4001ac64:	fc568043 	ldur	d3, [x2, #-152]
    4001ac68:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[k-1][1][1]
    4001ac6c:	1e643863 	fsub	d3, d3, d4
          - tmp1 * njac[k-1][2][1];
    4001ac70:	fc590264 	ldur	d4, [x19, #-112]
    4001ac74:	1e640804 	fmul	d4, d0, d4
          - tmp1 * dz2;
    4001ac78:	1e793863 	fsub	d3, d3, d25
        lhs[k][AA][1][1] = - tmp2 * fjac[k-1][1][1]
    4001ac7c:	fd001803 	str	d3, [x0, #48]
        lhs[k][AA][2][1] = - tmp2 * fjac[k-1][2][1]
    4001ac80:	fc590043 	ldur	d3, [x2, #-112]
    4001ac84:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[k-1][2][1];
    4001ac88:	1e643863 	fsub	d3, d3, d4
          - tmp1 * njac[k-1][3][1];
    4001ac8c:	fc5b8264 	ldur	d4, [x19, #-72]
    4001ac90:	1e640804 	fmul	d4, d0, d4
        lhs[k][AA][2][1] = - tmp2 * fjac[k-1][2][1]
    4001ac94:	fd002c03 	str	d3, [x0, #88]
        lhs[k][AA][3][1] = - tmp2 * fjac[k-1][3][1]
    4001ac98:	fc5b8043 	ldur	d3, [x2, #-72]
    4001ac9c:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[k-1][3][1];
    4001aca0:	1e643863 	fsub	d3, d3, d4
          - tmp1 * njac[k-1][4][1];
    4001aca4:	fc5e0264 	ldur	d4, [x19, #-32]
    4001aca8:	1e640804 	fmul	d4, d0, d4
        lhs[k][AA][3][1] = - tmp2 * fjac[k-1][3][1]
    4001acac:	fd004003 	str	d3, [x0, #128]
        lhs[k][AA][4][1] = - tmp2 * fjac[k-1][4][1]
    4001acb0:	fc5e0043 	ldur	d3, [x2, #-32]
    4001acb4:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[k-1][4][1];
    4001acb8:	1e643863 	fsub	d3, d3, d4
          - tmp1 * njac[k-1][0][2];
    4001acbc:	fc548264 	ldur	d4, [x19, #-184]
    4001acc0:	1e640804 	fmul	d4, d0, d4
        lhs[k][AA][4][1] = - tmp2 * fjac[k-1][4][1]
    4001acc4:	fd005403 	str	d3, [x0, #168]
        lhs[k][AA][0][2] = - tmp2 * fjac[k-1][0][2]
    4001acc8:	fc548043 	ldur	d3, [x2, #-184]
    4001accc:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[k-1][0][2];
    4001acd0:	1e643863 	fsub	d3, d3, d4
        lhs[k][AA][0][2] = - tmp2 * fjac[k-1][0][2]
    4001acd4:	fd000803 	str	d3, [x0, #16]
        lhs[k][AA][1][2] = - tmp2 * fjac[k-1][1][2]
    4001acd8:	fc570043 	ldur	d3, [x2, #-144]
          - tmp1 * njac[k-1][1][2];
    4001acdc:	fc570264 	ldur	d4, [x19, #-144]
          - tmp1 * njac[k-1][2][2]
    4001ace0:	fc598268 	ldur	d8, [x19, #-104]
        lhs[k][AA][1][2] = - tmp2 * fjac[k-1][1][2]
    4001ace4:	1e630823 	fmul	d3, d1, d3
          - tmp1 * njac[k-1][1][2];
    4001ace8:	1e640804 	fmul	d4, d0, d4
          - tmp1 * njac[k-1][2][2]
    4001acec:	1e680808 	fmul	d8, d0, d8
          - tmp1 * njac[k-1][1][2];
    4001acf0:	1e643863 	fsub	d3, d3, d4
        lhs[k][AA][2][2] = - tmp2 * fjac[k-1][2][2]
    4001acf4:	fc598044 	ldur	d4, [x2, #-104]
    4001acf8:	1e640824 	fmul	d4, d1, d4
        lhs[k][AA][1][2] = - tmp2 * fjac[k-1][1][2]
    4001acfc:	fd001c03 	str	d3, [x0, #56]
          - tmp1 * dz3;
    4001ad00:	1e720803 	fmul	d3, d0, d18
          - tmp1 * njac[k-1][2][2]
    4001ad04:	1e683884 	fsub	d4, d4, d8
          - tmp1 * njac[k-1][3][2];
    4001ad08:	fc5c0268 	ldur	d8, [x19, #-64]
    4001ad0c:	1e680808 	fmul	d8, d0, d8
          - tmp1 * dz3;
    4001ad10:	1e633884 	fsub	d4, d4, d3
        lhs[k][AA][2][2] = - tmp2 * fjac[k-1][2][2]
    4001ad14:	fd003004 	str	d4, [x0, #96]
        lhs[k][AA][3][2] = - tmp2 * fjac[k-1][3][2]
    4001ad18:	fc5c0044 	ldur	d4, [x2, #-64]
    4001ad1c:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[k-1][3][2];
    4001ad20:	1e683884 	fsub	d4, d4, d8
          - tmp1 * njac[k-1][4][2];
    4001ad24:	fc5e8268 	ldur	d8, [x19, #-24]
    4001ad28:	1e680808 	fmul	d8, d0, d8
        lhs[k][AA][3][2] = - tmp2 * fjac[k-1][3][2]
    4001ad2c:	fd004404 	str	d4, [x0, #136]
        lhs[k][AA][4][2] = - tmp2 * fjac[k-1][4][2]
    4001ad30:	fc5e8044 	ldur	d4, [x2, #-24]
    4001ad34:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[k-1][4][2];
    4001ad38:	1e683884 	fsub	d4, d4, d8
          - tmp1 * njac[k-1][0][3];
    4001ad3c:	fc550268 	ldur	d8, [x19, #-176]
    4001ad40:	1e680808 	fmul	d8, d0, d8
        lhs[k][AA][4][2] = - tmp2 * fjac[k-1][4][2]
    4001ad44:	fd005804 	str	d4, [x0, #176]
        lhs[k][AA][0][3] = - tmp2 * fjac[k-1][0][3]
    4001ad48:	fc550044 	ldur	d4, [x2, #-176]
    4001ad4c:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[k-1][0][3];
    4001ad50:	1e683884 	fsub	d4, d4, d8
          - tmp1 * njac[k-1][1][3];
    4001ad54:	fc578268 	ldur	d8, [x19, #-136]
    4001ad58:	1e680808 	fmul	d8, d0, d8
        lhs[k][AA][0][3] = - tmp2 * fjac[k-1][0][3]
    4001ad5c:	fd000c04 	str	d4, [x0, #24]
        lhs[k][AA][1][3] = - tmp2 * fjac[k-1][1][3]
    4001ad60:	fc578044 	ldur	d4, [x2, #-136]
    4001ad64:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[k-1][1][3];
    4001ad68:	1e683884 	fsub	d4, d4, d8
          - tmp1 * njac[k-1][2][3];
    4001ad6c:	fc5a0268 	ldur	d8, [x19, #-96]
    4001ad70:	1e680808 	fmul	d8, d0, d8
        lhs[k][AA][1][3] = - tmp2 * fjac[k-1][1][3]
    4001ad74:	fd002004 	str	d4, [x0, #64]
        lhs[k][AA][2][3] = - tmp2 * fjac[k-1][2][3]
    4001ad78:	fc5a0044 	ldur	d4, [x2, #-96]
    4001ad7c:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[k-1][2][3];
    4001ad80:	1e683884 	fsub	d4, d4, d8
          - tmp1 * njac[k-1][3][3]
    4001ad84:	fc5c8268 	ldur	d8, [x19, #-56]
    4001ad88:	1e680808 	fmul	d8, d0, d8
        lhs[k][AA][2][3] = - tmp2 * fjac[k-1][2][3]
    4001ad8c:	fd003404 	str	d4, [x0, #104]
        lhs[k][AA][3][3] = - tmp2 * fjac[k-1][3][3]
    4001ad90:	fc5c8044 	ldur	d4, [x2, #-56]
    4001ad94:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[k-1][3][3]
    4001ad98:	1e683884 	fsub	d4, d4, d8
          - tmp1 * njac[k-1][4][3];
    4001ad9c:	fc5f0268 	ldur	d8, [x19, #-16]
    4001ada0:	1e680808 	fmul	d8, d0, d8
          - tmp1 * dz4;
    4001ada4:	1e783884 	fsub	d4, d4, d24
        lhs[k][AA][3][3] = - tmp2 * fjac[k-1][3][3]
    4001ada8:	fd004804 	str	d4, [x0, #144]
        lhs[k][AA][4][3] = - tmp2 * fjac[k-1][4][3]
    4001adac:	fc5f0044 	ldur	d4, [x2, #-16]
    4001adb0:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[k-1][4][3];
    4001adb4:	1e683884 	fsub	d4, d4, d8
          - tmp1 * njac[k-1][0][4];
    4001adb8:	fc558268 	ldur	d8, [x19, #-168]
    4001adbc:	1e680808 	fmul	d8, d0, d8
        lhs[k][AA][4][3] = - tmp2 * fjac[k-1][4][3]
    4001adc0:	fd005c04 	str	d4, [x0, #184]
        lhs[k][AA][0][4] = - tmp2 * fjac[k-1][0][4]
    4001adc4:	fc558044 	ldur	d4, [x2, #-168]
    4001adc8:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[k-1][0][4];
    4001adcc:	1e683884 	fsub	d4, d4, d8
          - tmp1 * njac[k-1][1][4];
    4001add0:	fc580268 	ldur	d8, [x19, #-128]
    4001add4:	1e680808 	fmul	d8, d0, d8
        lhs[k][AA][0][4] = - tmp2 * fjac[k-1][0][4]
    4001add8:	fd001004 	str	d4, [x0, #32]
        lhs[k][AA][1][4] = - tmp2 * fjac[k-1][1][4]
    4001addc:	fc580044 	ldur	d4, [x2, #-128]
    4001ade0:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[k-1][1][4];
    4001ade4:	1e683884 	fsub	d4, d4, d8
        lhs[k][AA][1][4] = - tmp2 * fjac[k-1][1][4]
    4001ade8:	fd002404 	str	d4, [x0, #72]
        lhs[k][AA][2][4] = - tmp2 * fjac[k-1][2][4]
    4001adec:	fc5a8044 	ldur	d4, [x2, #-88]
          - tmp1 * njac[k-1][2][4];
    4001adf0:	fc5a8268 	ldur	d8, [x19, #-88]
        lhs[k][AA][2][4] = - tmp2 * fjac[k-1][2][4]
    4001adf4:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[k-1][2][4];
    4001adf8:	1e680808 	fmul	d8, d0, d8
    4001adfc:	1e683884 	fsub	d4, d4, d8
          - tmp1 * njac[k-1][3][4];
    4001ae00:	fc5d0268 	ldur	d8, [x19, #-48]
    4001ae04:	1e680808 	fmul	d8, d0, d8
        lhs[k][AA][2][4] = - tmp2 * fjac[k-1][2][4]
    4001ae08:	fd003804 	str	d4, [x0, #112]
        lhs[k][AA][3][4] = - tmp2 * fjac[k-1][3][4]
    4001ae0c:	fc5d0044 	ldur	d4, [x2, #-48]
    4001ae10:	1e640824 	fmul	d4, d1, d4
          - tmp1 * njac[k-1][3][4];
    4001ae14:	1e683884 	fsub	d4, d4, d8
        lhs[k][AA][3][4] = - tmp2 * fjac[k-1][3][4]
    4001ae18:	fd004c04 	str	d4, [x0, #152]
        lhs[k][AA][4][4] = - tmp2 * fjac[k-1][4][4]
    4001ae1c:	fc5f8044 	ldur	d4, [x2, #-8]
    4001ae20:	1e640821 	fmul	d1, d1, d4
          - tmp1 * njac[k-1][4][4]
    4001ae24:	fc5f8264 	ldur	d4, [x19, #-8]
    4001ae28:	1e640804 	fmul	d4, d0, d4
    4001ae2c:	1e643821 	fsub	d1, d1, d4
          + tmp1 * 2.0 * njac[k][0][0]
    4001ae30:	fd400264 	ldr	d4, [x19]
          - tmp1 * dz5;
    4001ae34:	1e773821 	fsub	d1, d1, d23
        lhs[k][AA][4][4] = - tmp2 * fjac[k-1][4][4]
    4001ae38:	fd006001 	str	d1, [x0, #192]
          + tmp1 * 2.0 * njac[k][0][0]
    4001ae3c:	1e602801 	fadd	d1, d0, d0
    4001ae40:	1e640824 	fmul	d4, d1, d4
          + tmp1 * 2.0 * dz1;
    4001ae44:	1e610a08 	fmul	d8, d16, d1
          + tmp1 * 2.0 * njac[k][0][0]
    4001ae48:	1e662884 	fadd	d4, d4, d6
          + tmp1 * 2.0 * dz1;
    4001ae4c:	1e682884 	fadd	d4, d4, d8
          + tmp1 * 2.0 * dz2;
    4001ae50:	1e610a28 	fmul	d8, d17, d1
        lhs[k][BB][0][0] = 1.0
    4001ae54:	fd006404 	str	d4, [x0, #200]
        lhs[k][BB][1][0] = tmp1 * 2.0 * njac[k][1][0];
    4001ae58:	fd401664 	ldr	d4, [x19, #40]
    4001ae5c:	1e610884 	fmul	d4, d4, d1
    4001ae60:	fd007804 	str	d4, [x0, #240]
        lhs[k][BB][2][0] = tmp1 * 2.0 * njac[k][2][0];
    4001ae64:	fd402a64 	ldr	d4, [x19, #80]
    4001ae68:	1e610884 	fmul	d4, d4, d1
    4001ae6c:	fd008c04 	str	d4, [x0, #280]
        lhs[k][BB][3][0] = tmp1 * 2.0 * njac[k][3][0];
    4001ae70:	fd403e64 	ldr	d4, [x19, #120]
    4001ae74:	1e610884 	fmul	d4, d4, d1
    4001ae78:	fd00a004 	str	d4, [x0, #320]
        lhs[k][BB][4][0] = tmp1 * 2.0 * njac[k][4][0];
    4001ae7c:	fd405264 	ldr	d4, [x19, #160]
    4001ae80:	1e610884 	fmul	d4, d4, d1
    4001ae84:	fd00b404 	str	d4, [x0, #360]
        lhs[k][BB][0][1] = tmp1 * 2.0 * njac[k][0][1];
    4001ae88:	fd400664 	ldr	d4, [x19, #8]
    4001ae8c:	1e610884 	fmul	d4, d4, d1
    4001ae90:	fd006804 	str	d4, [x0, #208]
          + tmp1 * 2.0 * njac[k][1][1]
    4001ae94:	fd401a64 	ldr	d4, [x19, #48]
    4001ae98:	1e640824 	fmul	d4, d1, d4
    4001ae9c:	1e662884 	fadd	d4, d4, d6
          + tmp1 * 2.0 * dz2;
    4001aea0:	1e682884 	fadd	d4, d4, d8
          + tmp1 * 2.0 * dz3;
    4001aea4:	1e610a48 	fmul	d8, d18, d1
        lhs[k][BB][1][1] = 1.0
    4001aea8:	fd007c04 	str	d4, [x0, #248]
        lhs[k][BB][2][1] = tmp1 * 2.0 * njac[k][2][1];
    4001aeac:	fd402e64 	ldr	d4, [x19, #88]
    4001aeb0:	1e610884 	fmul	d4, d4, d1
    4001aeb4:	fd009004 	str	d4, [x0, #288]
        lhs[k][BB][3][1] = tmp1 * 2.0 * njac[k][3][1];
    4001aeb8:	fd404264 	ldr	d4, [x19, #128]
    4001aebc:	1e610884 	fmul	d4, d4, d1
    4001aec0:	fd00a404 	str	d4, [x0, #328]
        lhs[k][BB][4][1] = tmp1 * 2.0 * njac[k][4][1];
    4001aec4:	fd405664 	ldr	d4, [x19, #168]
    4001aec8:	1e610884 	fmul	d4, d4, d1
    4001aecc:	fd00b804 	str	d4, [x0, #368]
        lhs[k][BB][0][2] = tmp1 * 2.0 * njac[k][0][2];
    4001aed0:	fd400a64 	ldr	d4, [x19, #16]
    4001aed4:	1e610884 	fmul	d4, d4, d1
    4001aed8:	fd006c04 	str	d4, [x0, #216]
        lhs[k][BB][1][2] = tmp1 * 2.0 * njac[k][1][2];
    4001aedc:	fd401e64 	ldr	d4, [x19, #56]
    4001aee0:	1e610884 	fmul	d4, d4, d1
    4001aee4:	fd008004 	str	d4, [x0, #256]
          + tmp1 * 2.0 * njac[k][2][2]
    4001aee8:	fd403264 	ldr	d4, [x19, #96]
    4001aeec:	1e640824 	fmul	d4, d1, d4
    4001aef0:	1e662884 	fadd	d4, d4, d6
          + tmp1 * 2.0 * dz3;
    4001aef4:	1e682884 	fadd	d4, d4, d8
          + tmp1 * 2.0 * dz4;
    4001aef8:	1e610a68 	fmul	d8, d19, d1
        lhs[k][BB][2][2] = 1.0
    4001aefc:	fd009404 	str	d4, [x0, #296]
        lhs[k][BB][3][2] = tmp1 * 2.0 * njac[k][3][2];
    4001af00:	fd404664 	ldr	d4, [x19, #136]
    4001af04:	1e610884 	fmul	d4, d4, d1
    4001af08:	fd00a804 	str	d4, [x0, #336]
        lhs[k][BB][4][2] = tmp1 * 2.0 * njac[k][4][2];
    4001af0c:	fd405a64 	ldr	d4, [x19, #176]
    4001af10:	1e610884 	fmul	d4, d4, d1
    4001af14:	fd00bc04 	str	d4, [x0, #376]
        lhs[k][BB][0][3] = tmp1 * 2.0 * njac[k][0][3];
    4001af18:	fd400e64 	ldr	d4, [x19, #24]
    4001af1c:	1e610884 	fmul	d4, d4, d1
    4001af20:	fd007004 	str	d4, [x0, #224]
        lhs[k][BB][1][3] = tmp1 * 2.0 * njac[k][1][3];
    4001af24:	fd402264 	ldr	d4, [x19, #64]
    4001af28:	1e610884 	fmul	d4, d4, d1
    4001af2c:	fd008404 	str	d4, [x0, #264]
        lhs[k][BB][2][3] = tmp1 * 2.0 * njac[k][2][3];
    4001af30:	fd403664 	ldr	d4, [x19, #104]
    4001af34:	1e610884 	fmul	d4, d4, d1
    4001af38:	fd009804 	str	d4, [x0, #304]
          + tmp1 * 2.0 * njac[k][3][3]
    4001af3c:	fd404a64 	ldr	d4, [x19, #144]
    4001af40:	1e640824 	fmul	d4, d1, d4
    4001af44:	1e662884 	fadd	d4, d4, d6
          + tmp1 * 2.0 * dz4;
    4001af48:	1e682884 	fadd	d4, d4, d8
        lhs[k][BB][3][3] = 1.0
    4001af4c:	fd00ac04 	str	d4, [x0, #344]
        lhs[k][BB][4][3] = tmp1 * 2.0 * njac[k][4][3];
    4001af50:	fd405e64 	ldr	d4, [x19, #184]
    4001af54:	1e610884 	fmul	d4, d4, d1
    4001af58:	fd00c004 	str	d4, [x0, #384]
        lhs[k][BB][0][4] = tmp1 * 2.0 * njac[k][0][4];
    4001af5c:	fd401264 	ldr	d4, [x19, #32]
    4001af60:	1e610884 	fmul	d4, d4, d1
    4001af64:	fd007404 	str	d4, [x0, #232]
        lhs[k][BB][1][4] = tmp1 * 2.0 * njac[k][1][4];
    4001af68:	fd402664 	ldr	d4, [x19, #72]
    4001af6c:	1e610884 	fmul	d4, d4, d1
    4001af70:	fd008804 	str	d4, [x0, #272]
        lhs[k][BB][2][4] = tmp1 * 2.0 * njac[k][2][4];
    4001af74:	fd403a64 	ldr	d4, [x19, #112]
    4001af78:	1e610884 	fmul	d4, d4, d1
    4001af7c:	fd009c04 	str	d4, [x0, #312]
        lhs[k][BB][3][4] = tmp1 * 2.0 * njac[k][3][4];
    4001af80:	fd404e64 	ldr	d4, [x19, #152]
    4001af84:	1e610884 	fmul	d4, d4, d1
    4001af88:	fd00b004 	str	d4, [x0, #352]
          + tmp1 * 2.0 * njac[k][4][4] 
    4001af8c:	fd406264 	ldr	d4, [x19, #192]
    4001af90:	1e640824 	fmul	d4, d1, d4
          + tmp1 * 2.0 * dz5;
    4001af94:	1e610a81 	fmul	d1, d20, d1
          + tmp1 * 2.0 * njac[k][4][4] 
    4001af98:	1e662884 	fadd	d4, d4, d6
          + tmp1 * 2.0 * dz5;
    4001af9c:	1e612881 	fadd	d1, d4, d1
          - tmp1 * njac[k+1][0][0]
    4001afa0:	fd406664 	ldr	d4, [x19, #200]
    4001afa4:	1e640804 	fmul	d4, d0, d4
        lhs[k][BB][4][4] = 1.0
    4001afa8:	fd00c401 	str	d1, [x0, #392]
        lhs[k][CC][0][0] =  tmp2 * fjac[k+1][0][0]
    4001afac:	fd406441 	ldr	d1, [x2, #200]
    4001afb0:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[k+1][0][0]
    4001afb4:	1e643821 	fsub	d1, d1, d4
          - tmp1 * njac[k+1][1][0];
    4001afb8:	fd407a64 	ldr	d4, [x19, #240]
    4001afbc:	1e640804 	fmul	d4, d0, d4
          - tmp1 * dz1;
    4001afc0:	1e653821 	fsub	d1, d1, d5
        lhs[k][CC][0][0] =  tmp2 * fjac[k+1][0][0]
    4001afc4:	fd00c801 	str	d1, [x0, #400]
        lhs[k][CC][1][0] =  tmp2 * fjac[k+1][1][0]
    4001afc8:	fd407841 	ldr	d1, [x2, #240]
    4001afcc:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[k+1][1][0];
    4001afd0:	1e643821 	fsub	d1, d1, d4
        lhs[k][CC][1][0] =  tmp2 * fjac[k+1][1][0]
    4001afd4:	fd00dc01 	str	d1, [x0, #440]
        lhs[k][CC][2][0] =  tmp2 * fjac[k+1][2][0]
    4001afd8:	fd408c41 	ldr	d1, [x2, #280]
          - tmp1 * njac[k+1][2][0];
    4001afdc:	fd408e64 	ldr	d4, [x19, #280]
        lhs[k][CC][1][1] =  tmp2 * fjac[k+1][1][1]
    4001afe0:	fd407c45 	ldr	d5, [x2, #248]
        lhs[k][CC][2][0] =  tmp2 * fjac[k+1][2][0]
    4001afe4:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[k+1][2][0];
    4001afe8:	1e640804 	fmul	d4, d0, d4
        lhs[k][CC][1][1] =  tmp2 * fjac[k+1][1][1]
    4001afec:	1e650845 	fmul	d5, d2, d5
          - tmp1 * njac[k+1][2][0];
    4001aff0:	1e643821 	fsub	d1, d1, d4
          - tmp1 * njac[k+1][3][0];
    4001aff4:	fd40a264 	ldr	d4, [x19, #320]
    4001aff8:	1e640804 	fmul	d4, d0, d4
        lhs[k][CC][2][0] =  tmp2 * fjac[k+1][2][0]
    4001affc:	fd00f001 	str	d1, [x0, #480]
        lhs[k][CC][3][0] =  tmp2 * fjac[k+1][3][0]
    4001b000:	fd40a041 	ldr	d1, [x2, #320]
    4001b004:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[k+1][3][0];
    4001b008:	1e643821 	fsub	d1, d1, d4
          - tmp1 * njac[k+1][4][0];
    4001b00c:	fd40b664 	ldr	d4, [x19, #360]
    4001b010:	1e640804 	fmul	d4, d0, d4
        lhs[k][CC][3][0] =  tmp2 * fjac[k+1][3][0]
    4001b014:	fd010401 	str	d1, [x0, #520]
        lhs[k][CC][4][0] =  tmp2 * fjac[k+1][4][0]
    4001b018:	fd40b441 	ldr	d1, [x2, #360]
    4001b01c:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[k+1][4][0];
    4001b020:	1e643821 	fsub	d1, d1, d4
          - tmp1 * njac[k+1][0][1];
    4001b024:	fd406a64 	ldr	d4, [x19, #208]
    4001b028:	1e640804 	fmul	d4, d0, d4
        lhs[k][CC][4][0] =  tmp2 * fjac[k+1][4][0]
    4001b02c:	fd011801 	str	d1, [x0, #560]
        lhs[k][CC][0][1] =  tmp2 * fjac[k+1][0][1]
    4001b030:	fd406841 	ldr	d1, [x2, #208]
    4001b034:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[k+1][0][1];
    4001b038:	1e643821 	fsub	d1, d1, d4
          - tmp1 * njac[k+1][2][1];
    4001b03c:	fd409264 	ldr	d4, [x19, #288]
    4001b040:	1e640804 	fmul	d4, d0, d4
        lhs[k][CC][0][1] =  tmp2 * fjac[k+1][0][1]
    4001b044:	fd00cc01 	str	d1, [x0, #408]
          - tmp1 * njac[k+1][1][1]
    4001b048:	fd407e61 	ldr	d1, [x19, #248]
    4001b04c:	1e610801 	fmul	d1, d0, d1
    4001b050:	1e6138a5 	fsub	d5, d5, d1
        lhs[k][CC][2][1] =  tmp2 * fjac[k+1][2][1]
    4001b054:	fd409041 	ldr	d1, [x2, #288]
    4001b058:	1e610841 	fmul	d1, d2, d1
          - tmp1 * dz2;
    4001b05c:	1e7938a5 	fsub	d5, d5, d25
          - tmp1 * njac[k+1][2][1];
    4001b060:	1e643821 	fsub	d1, d1, d4
          - tmp1 * njac[k+1][3][1];
    4001b064:	fd40a664 	ldr	d4, [x19, #328]
        lhs[k][CC][1][1] =  tmp2 * fjac[k+1][1][1]
    4001b068:	fd00e005 	str	d5, [x0, #448]
          - tmp1 * njac[k+1][3][1];
    4001b06c:	1e640804 	fmul	d4, d0, d4
        lhs[k][CC][2][1] =  tmp2 * fjac[k+1][2][1]
    4001b070:	fd00f401 	str	d1, [x0, #488]
        lhs[k][CC][3][1] =  tmp2 * fjac[k+1][3][1]
    4001b074:	fd40a441 	ldr	d1, [x2, #328]
    4001b078:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[k+1][3][1];
    4001b07c:	1e643821 	fsub	d1, d1, d4
          - tmp1 * njac[k+1][4][1];
    4001b080:	fd40ba64 	ldr	d4, [x19, #368]
    4001b084:	1e640804 	fmul	d4, d0, d4
        lhs[k][CC][3][1] =  tmp2 * fjac[k+1][3][1]
    4001b088:	fd010801 	str	d1, [x0, #528]
        lhs[k][CC][4][1] =  tmp2 * fjac[k+1][4][1]
    4001b08c:	fd40b841 	ldr	d1, [x2, #368]
    4001b090:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[k+1][4][1];
    4001b094:	1e643821 	fsub	d1, d1, d4
          - tmp1 * njac[k+1][0][2];
    4001b098:	fd406e64 	ldr	d4, [x19, #216]
    4001b09c:	1e640804 	fmul	d4, d0, d4
        lhs[k][CC][4][1] =  tmp2 * fjac[k+1][4][1]
    4001b0a0:	fd011c01 	str	d1, [x0, #568]
        lhs[k][CC][0][2] =  tmp2 * fjac[k+1][0][2]
    4001b0a4:	fd406c41 	ldr	d1, [x2, #216]
    4001b0a8:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[k+1][0][2];
    4001b0ac:	1e643821 	fsub	d1, d1, d4
          - tmp1 * njac[k+1][1][2];
    4001b0b0:	fd408264 	ldr	d4, [x19, #256]
    4001b0b4:	1e640804 	fmul	d4, d0, d4
        lhs[k][CC][0][2] =  tmp2 * fjac[k+1][0][2]
    4001b0b8:	fd00d001 	str	d1, [x0, #416]
        lhs[k][CC][1][2] =  tmp2 * fjac[k+1][1][2]
    4001b0bc:	fd408041 	ldr	d1, [x2, #256]
    4001b0c0:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[k+1][1][2];
    4001b0c4:	1e643821 	fsub	d1, d1, d4
        lhs[k][CC][2][2] =  tmp2 * fjac[k+1][2][2]
    4001b0c8:	fd409444 	ldr	d4, [x2, #296]
    4001b0cc:	1e640844 	fmul	d4, d2, d4
        lhs[k][CC][1][2] =  tmp2 * fjac[k+1][1][2]
    4001b0d0:	fd00e401 	str	d1, [x0, #456]
          - tmp1 * njac[k+1][2][2]
    4001b0d4:	fd409661 	ldr	d1, [x19, #296]
    4001b0d8:	1e610801 	fmul	d1, d0, d1
    4001b0dc:	1e613884 	fsub	d4, d4, d1
          - tmp1 * dz3;
    4001b0e0:	1e633884 	fsub	d4, d4, d3
        lhs[k][CC][2][2] =  tmp2 * fjac[k+1][2][2]
    4001b0e4:	fd00f804 	str	d4, [x0, #496]
        lhs[k][CC][3][2] =  tmp2 * fjac[k+1][3][2]
    4001b0e8:	fd40a841 	ldr	d1, [x2, #336]
          - tmp1 * njac[k+1][3][2];
    4001b0ec:	fd40aa63 	ldr	d3, [x19, #336]
        lhs[k][CC][3][2] =  tmp2 * fjac[k+1][3][2]
    4001b0f0:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[k+1][3][2];
    4001b0f4:	1e630803 	fmul	d3, d0, d3
    4001b0f8:	1e633821 	fsub	d1, d1, d3
          - tmp1 * njac[k+1][4][2];
    4001b0fc:	fd40be63 	ldr	d3, [x19, #376]
    4001b100:	1e630803 	fmul	d3, d0, d3
        lhs[k][CC][3][2] =  tmp2 * fjac[k+1][3][2]
    4001b104:	fd010c01 	str	d1, [x0, #536]
        lhs[k][CC][4][2] =  tmp2 * fjac[k+1][4][2]
    4001b108:	fd40bc41 	ldr	d1, [x2, #376]
    4001b10c:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[k+1][4][2];
    4001b110:	1e633821 	fsub	d1, d1, d3
          - tmp1 * njac[k+1][0][3];
    4001b114:	fd407263 	ldr	d3, [x19, #224]
    4001b118:	1e630803 	fmul	d3, d0, d3
        lhs[k][CC][4][2] =  tmp2 * fjac[k+1][4][2]
    4001b11c:	fd012001 	str	d1, [x0, #576]
        lhs[k][CC][0][3] =  tmp2 * fjac[k+1][0][3]
    4001b120:	fd407041 	ldr	d1, [x2, #224]
    4001b124:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[k+1][0][3];
    4001b128:	1e633821 	fsub	d1, d1, d3
          - tmp1 * njac[k+1][1][3];
    4001b12c:	fd408663 	ldr	d3, [x19, #264]
    4001b130:	1e630803 	fmul	d3, d0, d3
        lhs[k][CC][0][3] =  tmp2 * fjac[k+1][0][3]
    4001b134:	fd00d401 	str	d1, [x0, #424]
        lhs[k][CC][1][3] =  tmp2 * fjac[k+1][1][3]
    4001b138:	fd408441 	ldr	d1, [x2, #264]
    4001b13c:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[k+1][1][3];
    4001b140:	1e633821 	fsub	d1, d1, d3
          - tmp1 * njac[k+1][2][3];
    4001b144:	fd409a63 	ldr	d3, [x19, #304]
    4001b148:	1e630803 	fmul	d3, d0, d3
        lhs[k][CC][1][3] =  tmp2 * fjac[k+1][1][3]
    4001b14c:	fd00e801 	str	d1, [x0, #464]
        lhs[k][CC][2][3] =  tmp2 * fjac[k+1][2][3]
    4001b150:	fd409841 	ldr	d1, [x2, #304]
    4001b154:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[k+1][2][3];
    4001b158:	1e633821 	fsub	d1, d1, d3
        lhs[k][CC][3][3] =  tmp2 * fjac[k+1][3][3]
    4001b15c:	fd40ac43 	ldr	d3, [x2, #344]
    4001b160:	1e630843 	fmul	d3, d2, d3
        lhs[k][CC][2][3] =  tmp2 * fjac[k+1][2][3]
    4001b164:	fd00fc01 	str	d1, [x0, #504]
          - tmp1 * njac[k+1][3][3]
    4001b168:	fd40ae61 	ldr	d1, [x19, #344]
    4001b16c:	1e610801 	fmul	d1, d0, d1
    4001b170:	1e613863 	fsub	d3, d3, d1
        lhs[k][CC][4][3] =  tmp2 * fjac[k+1][4][3]
    4001b174:	fd40c041 	ldr	d1, [x2, #384]
    4001b178:	1e610841 	fmul	d1, d2, d1
          - tmp1 * dz4;
    4001b17c:	1e783863 	fsub	d3, d3, d24
        lhs[k][CC][3][3] =  tmp2 * fjac[k+1][3][3]
    4001b180:	fd011003 	str	d3, [x0, #544]
          - tmp1 * njac[k+1][4][3];
    4001b184:	fd40c263 	ldr	d3, [x19, #384]
    4001b188:	1e630803 	fmul	d3, d0, d3
    4001b18c:	1e633821 	fsub	d1, d1, d3
          - tmp1 * njac[k+1][0][4];
    4001b190:	fd407663 	ldr	d3, [x19, #232]
    4001b194:	1e630803 	fmul	d3, d0, d3
        lhs[k][CC][4][3] =  tmp2 * fjac[k+1][4][3]
    4001b198:	fd012401 	str	d1, [x0, #584]
        lhs[k][CC][0][4] =  tmp2 * fjac[k+1][0][4]
    4001b19c:	fd407441 	ldr	d1, [x2, #232]
    4001b1a0:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[k+1][0][4];
    4001b1a4:	1e633821 	fsub	d1, d1, d3
          - tmp1 * njac[k+1][1][4];
    4001b1a8:	fd408a63 	ldr	d3, [x19, #272]
    4001b1ac:	1e630803 	fmul	d3, d0, d3
        lhs[k][CC][0][4] =  tmp2 * fjac[k+1][0][4]
    4001b1b0:	fd00d801 	str	d1, [x0, #432]
        lhs[k][CC][1][4] =  tmp2 * fjac[k+1][1][4]
    4001b1b4:	fd408841 	ldr	d1, [x2, #272]
    4001b1b8:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[k+1][1][4];
    4001b1bc:	1e633821 	fsub	d1, d1, d3
          - tmp1 * njac[k+1][2][4];
    4001b1c0:	fd409e63 	ldr	d3, [x19, #312]
    4001b1c4:	1e630803 	fmul	d3, d0, d3
        lhs[k][CC][1][4] =  tmp2 * fjac[k+1][1][4]
    4001b1c8:	fd00ec01 	str	d1, [x0, #472]
        lhs[k][CC][2][4] =  tmp2 * fjac[k+1][2][4]
    4001b1cc:	fd409c41 	ldr	d1, [x2, #312]
    4001b1d0:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[k+1][2][4];
    4001b1d4:	1e633821 	fsub	d1, d1, d3
          - tmp1 * njac[k+1][3][4];
    4001b1d8:	fd40b263 	ldr	d3, [x19, #352]
    4001b1dc:	1e630803 	fmul	d3, d0, d3
        lhs[k][CC][2][4] =  tmp2 * fjac[k+1][2][4]
    4001b1e0:	fd010001 	str	d1, [x0, #512]
        lhs[k][CC][3][4] =  tmp2 * fjac[k+1][3][4]
    4001b1e4:	fd40b041 	ldr	d1, [x2, #352]
    4001b1e8:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[k+1][3][4];
    4001b1ec:	1e633821 	fsub	d1, d1, d3
        lhs[k][CC][3][4] =  tmp2 * fjac[k+1][3][4]
    4001b1f0:	fd011401 	str	d1, [x0, #552]
        lhs[k][CC][4][4] =  tmp2 * fjac[k+1][4][4]
    4001b1f4:	fd40c441 	ldr	d1, [x2, #392]
          - tmp1 * njac[k+1][4][4]
    4001b1f8:	fd40c663 	ldr	d3, [x19, #392]
        lhs[k][CC][4][4] =  tmp2 * fjac[k+1][4][4]
    4001b1fc:	1e610841 	fmul	d1, d2, d1
          - tmp1 * njac[k+1][4][4]
    4001b200:	1e630803 	fmul	d3, d0, d3
    4001b204:	1e633821 	fsub	d1, d1, d3
          - tmp1 * dz5;
    4001b208:	1e773821 	fsub	d1, d1, d23
        lhs[k][CC][4][4] =  tmp2 * fjac[k+1][4][4]
    4001b20c:	fd012801 	str	d1, [x0, #592]
      for (k = 1; k <= ksize-1; k++) {
    4001b210:	17fffe2b 	b	4001aabc <z_solve+0x380>
        matvec_sub(lhs[k][AA], rhs[k-1][j][i], rhs[k][j][i]);
    4001b214:	aa0703e2 	mov	x2, x7
    4001b218:	aa0803e0 	mov	x0, x8
    4001b21c:	a90d0fe8 	stp	x8, x3, [sp, #208]
    4001b220:	f9007be7 	str	x7, [sp, #240]
    4001b224:	b900ffe6 	str	w6, [sp, #252]
    4001b228:	97ffed17 	bl	40016684 <matvec_sub>
        matmul_sub(lhs[k][AA], lhs[k-1][CC], lhs[k][BB]);
    4001b22c:	a94d0fe8 	ldp	x8, x3, [sp, #208]
    4001b230:	a90d8fe8 	stp	x8, x3, [sp, #216]
    4001b234:	910c8069 	add	x9, x3, #0x320
    4001b238:	aa0803e0 	mov	x0, x8
    4001b23c:	aa0903e2 	mov	x2, x9
    4001b240:	91064061 	add	x1, x3, #0x190
    4001b244:	f90077e9 	str	x9, [sp, #232]
    4001b248:	97ffed7a 	bl	40016830 <matmul_sub>
        binvcrhs( lhs[k][BB], lhs[k][CC], rhs[k][j][i] );
    4001b24c:	a94e27e3 	ldp	x3, x9, [sp, #224]
    4001b250:	f9407be7 	ldr	x7, [sp, #240]
    4001b254:	f9006be7 	str	x7, [sp, #208]
    4001b258:	aa0703e2 	mov	x2, x7
    4001b25c:	910fa061 	add	x1, x3, #0x3e8
    4001b260:	aa0903e0 	mov	x0, x9
    4001b264:	97ffef9d 	bl	400170d8 <binvcrhs>
      for (k = 1; k <= ksize-1; k++) {
    4001b268:	a94d23e7 	ldp	x7, x8, [sp, #208]
    4001b26c:	b940ffe6 	ldr	w6, [sp, #252]
    4001b270:	110004c6 	add	w6, w6, #0x1
    4001b274:	aa0703e1 	mov	x1, x7
    4001b278:	aa0803e3 	mov	x3, x8
    4001b27c:	17fffe24 	b	4001ab0c <z_solve+0x3d0>
        for (m = 0; m < BLOCK_SIZE; m++) {
          for (n = 0; n < BLOCK_SIZE; n++) {
            rhs[k][j][i][m] = rhs[k][j][i][m] 
              - lhs[k][CC][n][m]*rhs[k+1][j][i][n];
    4001b280:	fc627a61 	ldr	d1, [x19, x2, lsl #3]
          for (n = 0; n < BLOCK_SIZE; n++) {
    4001b284:	91000442 	add	x2, x2, #0x1
              - lhs[k][CC][n][m]*rhs[k+1][j][i][n];
    4001b288:	fd40c8e0 	ldr	d0, [x7, #400]
          for (n = 0; n < BLOCK_SIZE; n++) {
    4001b28c:	f100145f 	cmp	x2, #0x5
    4001b290:	9100a0e7 	add	x7, x7, #0x28
              - lhs[k][CC][n][m]*rhs[k+1][j][i][n];
    4001b294:	1e610801 	fmul	d1, d0, d1
    4001b298:	fd400020 	ldr	d0, [x1]
    4001b29c:	1e613800 	fsub	d0, d0, d1
            rhs[k][j][i][m] = rhs[k][j][i][m] 
    4001b2a0:	fd000020 	str	d0, [x1]
          for (n = 0; n < BLOCK_SIZE; n++) {
    4001b2a4:	54fffee1 	b.ne	4001b280 <z_solve+0xb44>  // b.any
        for (m = 0; m < BLOCK_SIZE; m++) {
    4001b2a8:	91002000 	add	x0, x0, #0x8
    4001b2ac:	91002021 	add	x1, x1, #0x8
    4001b2b0:	f100a01f 	cmp	x0, #0x28
    4001b2b4:	54000080 	b.eq	4001b2c4 <z_solve+0xb88>  // b.none
          for (n = 0; n < BLOCK_SIZE; n++) {
    4001b2b8:	8b000107 	add	x7, x8, x0
      for (k = 1; k <= ksize-1; k++) {
    4001b2bc:	d2800002 	mov	x2, #0x0                   	// #0
    4001b2c0:	17fffff0 	b	4001b280 <z_solve+0xb44>
      for (k = ksize-1; k >= 0; k--) {
    4001b2c4:	510004c6 	sub	w6, w6, #0x1
    4001b2c8:	8b090273 	add	x19, x19, x9
    4001b2cc:	d1012c63 	sub	x3, x3, #0x4b
    4001b2d0:	17fffe2e 	b	4001ab88 <z_solve+0x44c>
    for (i = 1; i <= grid_points[0]-2; i++) {
    4001b2d4:	110006f7 	add	w23, w23, #0x1
    4001b2d8:	b9400340 	ldr	w0, [x26]
    4001b2dc:	51000800 	sub	w0, w0, #0x2
    4001b2e0:	6b17001f 	cmp	w0, w23
    4001b2e4:	5400062b 	b.lt	4001b3a8 <z_solve+0xc6c>  // b.tstop
          + c2 * qs[k][j][i];
    4001b2e8:	b0000080 	adrp	x0, 4002c000 <z_idle_threads>
    4001b2ec:	fd441407 	ldr	d7, [x0, #2088]
        fjac[k][0][4] = ( c2 * 2.0 * square[k][j][i] - c1 * u[k][j][i][4] )
    4001b2f0:	b0000080 	adrp	x0, 4002c000 <z_idle_threads>
    4001b2f4:	fd440415 	ldr	d21, [x0, #2056]
        njac[k][0][1] = - c3c4 * tmp2 * u[k][j][i][1];
    4001b2f8:	b0000080 	adrp	x0, 4002c000 <z_idle_threads>
    4001b2fc:	fd442c10 	ldr	d16, [x0, #2136]
        njac[k][0][3] = - con43 * c3c4 * tmp2 * u[k][j][i][3];
    4001b300:	b0000080 	adrp	x0, 4002c000 <z_idle_threads>
    4001b304:	fd456414 	ldr	d20, [x0, #2760]
        njac[k][3][3] =   con43 * c3 * c4 * tmp1;
    4001b308:	b0000080 	adrp	x0, 4002c000 <z_idle_threads>
    4001b30c:	fd442819 	ldr	d25, [x0, #2128]
    4001b310:	5280051b 	mov	w27, #0x28                  	// #40
    4001b314:	b0000080 	adrp	x0, 4002c000 <z_idle_threads>
    4001b318:	fd443c18 	ldr	d24, [x0, #2168]
            - c1345 ) * tmp3 * (u[k][j][i][1]*u[k][j][i][1])
    4001b31c:	b0000080 	adrp	x0, 4002c000 <z_idle_threads>
    4001b320:	fd440812 	ldr	d18, [x0, #2064]
    4001b324:	9b3b7ee0 	smull	x0, w23, w27
    4001b328:	f9004be0 	str	x0, [sp, #144]
    4001b32c:	90000243 	adrp	x3, 40063000 <square+0x37a8>
    4001b330:	91206063 	add	x3, x3, #0x818
    4001b334:	b0000082 	adrp	x2, 4002c000 <z_idle_threads>
    4001b338:	9132a042 	add	x2, x2, #0xca8
    4001b33c:	90000153 	adrp	x19, 40043000 <lhs+0x1c50>
    4001b340:	9108a273 	add	x19, x19, #0x228
    4001b344:	90000247 	adrp	x7, 40063000 <square+0x37a8>
    4001b348:	fd43e0e1 	ldr	d1, [x7, #1984]
    4001b34c:	9000024b 	adrp	x11, 40063000 <square+0x37a8>
    4001b350:	fd43e571 	ldr	d17, [x11, #1992]
        fjac[k][0][4] = ( c2 * 2.0 * square[k][j][i] - c1 * u[k][j][i][4] )
    4001b354:	90000228 	adrp	x8, 4005f000 <rhs+0x13488>
    4001b358:	91216108 	add	x8, x8, #0x858
        fjac[k][1][3] = - c2 *  u[k][j][i][1] * tmp1;
    4001b35c:	1e6140f3 	fneg	d19, d7
    4001b360:	f94043e0 	ldr	x0, [sp, #128]
        njac[k][0][1] = - c3c4 * tmp2 * u[k][j][i][1];
    4001b364:	1e61421b 	fneg	d27, d16
    4001b368:	f9404be1 	ldr	x1, [sp, #144]
        njac[k][0][3] = - con43 * c3c4 * tmp2 * u[k][j][i][3];
    4001b36c:	1e61429a 	fneg	d26, d20
            - c1345 ) * tmp3 * (u[k][j][i][1]*u[k][j][i][1])
    4001b370:	5280000a 	mov	w10, #0x0                   	// #0
      for (k = 0; k <= ksize; k++) {
    4001b374:	52800009 	mov	w9, #0x0                   	// #0
    4001b378:	8b01001b 	add	x27, x0, x1
        tmp1 = 1.0 / u[k][j][i][0];
    4001b37c:	1e6e1016 	fmov	d22, #1.000000000000000000e+00
    4001b380:	f9405fe0 	ldr	x0, [sp, #184]
    4001b384:	8b030363 	add	x3, x27, x3
            - c1345 ) * tmp3 * (u[k][j][i][1]*u[k][j][i][1])
    4001b388:	aa1303e1 	mov	x1, x19
        fjac[k][3][3] = ( 2.0 - c2 ) *  u[k][j][i][3] * tmp1;
    4001b38c:	1e601017 	fmov	d23, #2.000000000000000000e+00
    4001b390:	d2834d0c 	mov	x12, #0x1a68                	// #6760
    4001b394:	fd4002a0 	ldr	d0, [x21]
    4001b398:	8b37c006 	add	x6, x0, w23, sxtw
            - c1345 ) * tmp3 * (u[k][j][i][1]*u[k][j][i][1])
    4001b39c:	aa0203e0 	mov	x0, x2
    4001b3a0:	d37df0c6 	lsl	x6, x6, #3
    4001b3a4:	17fffda4 	b	4001aa34 <z_solve+0x2f8>
  for (j = 1; j <= grid_points[1]-2; j++) {
    4001b3a8:	11000718 	add	w24, w24, #0x1
    4001b3ac:	17fffd12 	b	4001a7f4 <z_solve+0xb8>
          }
        }
      }
    }
  }
  if (timeron) timer_stop(t_zsolve);
    4001b3b0:	f94063e0 	ldr	x0, [sp, #192]
    4001b3b4:	b94a8c00 	ldr	w0, [x0, #2700]
    4001b3b8:	34000140 	cbz	w0, 4001b3e0 <z_solve+0xca4>
}
    4001b3bc:	a94153f3 	ldp	x19, x20, [sp, #16]
  if (timeron) timer_stop(t_zsolve);
    4001b3c0:	52800100 	mov	w0, #0x8                   	// #8
}
    4001b3c4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4001b3c8:	a94363f7 	ldp	x23, x24, [sp, #48]
    4001b3cc:	a9446bf9 	ldp	x25, x26, [sp, #64]
    4001b3d0:	a94573fb 	ldp	x27, x28, [sp, #80]
    4001b3d4:	6d4627e8 	ldp	d8, d9, [sp, #96]
    4001b3d8:	a8d07bfd 	ldp	x29, x30, [sp], #256
  if (timeron) timer_stop(t_zsolve);
    4001b3dc:	17ffdd18 	b	4001283c <timer_stop>
}
    4001b3e0:	a94153f3 	ldp	x19, x20, [sp, #16]
    4001b3e4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4001b3e8:	a94363f7 	ldp	x23, x24, [sp, #48]
    4001b3ec:	a9446bf9 	ldp	x25, x26, [sp, #64]
    4001b3f0:	a94573fb 	ldp	x27, x28, [sp, #80]
    4001b3f4:	6d4627e8 	ldp	d8, d9, [sp, #96]
    4001b3f8:	a8d07bfd 	ldp	x29, x30, [sp], #256
    4001b3fc:	d65f03c0 	ret

000000004001b400 <arch_printk_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    4001b400:	52800000 	mov	w0, #0x0                   	// #0
    4001b404:	d65f03c0 	ret

000000004001b408 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    4001b408:	b9400022 	ldr	w2, [x1]
    4001b40c:	11000442 	add	w2, w2, #0x1
    4001b410:	b9000022 	str	w2, [x1]
	return _char_out(c);
    4001b414:	f0000581 	adrp	x1, 400ce000 <z_interrupt_stacks+0x440>
    4001b418:	f945e021 	ldr	x1, [x1, #3008]
    4001b41c:	aa0103f0 	mov	x16, x1
    4001b420:	d61f0200 	br	x16

000000004001b424 <__printk_hook_install>:
	_char_out = fn;
    4001b424:	f0000581 	adrp	x1, 400ce000 <z_interrupt_stacks+0x440>
    4001b428:	f905e020 	str	x0, [x1, #3008]
}
    4001b42c:	d65f03c0 	ret

000000004001b430 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    4001b430:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    4001b434:	910003fd 	mov	x29, sp
	struct out_context ctx = { 0 };
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    4001b438:	a9400c22 	ldp	x2, x3, [x1]
    4001b43c:	a9010fe2 	stp	x2, x3, [sp, #16]
    4001b440:	a9410c22 	ldp	x2, x3, [x1, #16]
    4001b444:	9100e3e1 	add	x1, sp, #0x38
    4001b448:	a9020fe2 	stp	x2, x3, [sp, #32]
    4001b44c:	910043e3 	add	x3, sp, #0x10
    4001b450:	aa0003e2 	mov	x2, x0
    4001b454:	90000000 	adrp	x0, 4001b000 <z_solve+0x8c4>
    4001b458:	91102000 	add	x0, x0, #0x408
	struct out_context ctx = { 0 };
    4001b45c:	b9003bff 	str	wzr, [sp, #56]
	cbvprintf(char_out, &ctx, fmt, ap);
    4001b460:	940001d4 	bl	4001bbb0 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    4001b464:	a8c47bfd 	ldp	x29, x30, [sp], #64
    4001b468:	d65f03c0 	ret

000000004001b46c <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    4001b46c:	a9af7bfd 	stp	x29, x30, [sp, #-272]!
    4001b470:	910003fd 	mov	x29, sp
    4001b474:	a90d8be1 	stp	x1, x2, [sp, #216]
	va_list ap;

	va_start(ap, fmt);
    4001b478:	910443e1 	add	x1, sp, #0x110
    4001b47c:	a90307e1 	stp	x1, x1, [sp, #48]
    4001b480:	910343e1 	add	x1, sp, #0xd0
    4001b484:	f90023e1 	str	x1, [sp, #64]
    4001b488:	128006e1 	mov	w1, #0xffffffc8            	// #-56
    4001b48c:	b9004be1 	str	w1, [sp, #72]
    4001b490:	12800fe1 	mov	w1, #0xffffff80            	// #-128
    4001b494:	b9004fe1 	str	w1, [sp, #76]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    4001b498:	910043e1 	add	x1, sp, #0x10
{
    4001b49c:	a90e93e3 	stp	x3, x4, [sp, #232]
		vprintk(fmt, ap);
    4001b4a0:	a9430fe2 	ldp	x2, x3, [sp, #48]
    4001b4a4:	a9010fe2 	stp	x2, x3, [sp, #16]
    4001b4a8:	a9440fe2 	ldp	x2, x3, [sp, #64]
    4001b4ac:	a9020fe2 	stp	x2, x3, [sp, #32]
{
    4001b4b0:	3d8017e0 	str	q0, [sp, #80]
    4001b4b4:	3d801be1 	str	q1, [sp, #96]
    4001b4b8:	3d801fe2 	str	q2, [sp, #112]
    4001b4bc:	3d8023e3 	str	q3, [sp, #128]
    4001b4c0:	3d8027e4 	str	q4, [sp, #144]
    4001b4c4:	3d802be5 	str	q5, [sp, #160]
    4001b4c8:	3d802fe6 	str	q6, [sp, #176]
    4001b4cc:	3d8033e7 	str	q7, [sp, #192]
    4001b4d0:	a90f9be5 	stp	x5, x6, [sp, #248]
    4001b4d4:	f90087e7 	str	x7, [sp, #264]
		vprintk(fmt, ap);
    4001b4d8:	97ffffd6 	bl	4001b430 <vprintk>
	}
	va_end(ap);
}
    4001b4dc:	a8d17bfd 	ldp	x29, x30, [sp], #272
    4001b4e0:	d65f03c0 	ret

000000004001b4e4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    4001b4e4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    4001b4e8:	aa0003e4 	mov	x4, x0
    4001b4ec:	aa0103e0 	mov	x0, x1
    4001b4f0:	910003fd 	mov	x29, sp
    4001b4f4:	aa0203e1 	mov	x1, x2
    4001b4f8:	aa0303e2 	mov	x2, x3
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    4001b4fc:	d63f0080 	blr	x4
		/* coverity[OVERRUN] */
		return (k_tid_t) arch_syscall_invoke0(K_SYSCALL_Z_CURRENT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_z_current_get();
    4001b500:	94001028 	bl	4001f5a0 <z_impl_z_current_get>
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_ABORT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_abort(thread);
    4001b504:	94001065 	bl	4001f698 <z_impl_k_thread_abort>

000000004001b508 <setup_bundle_data.constprop.0>:
			      size_t offset, size_t num_bits)
{
	bd->sidx = offset / bundle_bitness(bitarray);
	bd->soff = offset % bundle_bitness(bitarray);

	bd->eidx = (offset + num_bits - 1) / bundle_bitness(bitarray);
    4001b508:	d1000442 	sub	x2, x2, #0x1
	bd->sidx = offset / bundle_bitness(bitarray);
    4001b50c:	d345fc25 	lsr	x5, x1, #5
	bd->soff = offset % bundle_bitness(bitarray);
    4001b510:	92401023 	and	x3, x1, #0x1f
	bd->eidx = (offset + num_bits - 1) / bundle_bitness(bitarray);
    4001b514:	8b010041 	add	x1, x2, x1
	bd->eoff = (offset + num_bits - 1) % bundle_bitness(bitarray);

	bd->smask = ~(BIT(bd->soff) - 1);
    4001b518:	d2800022 	mov	x2, #0x1                   	// #1
	bd->eidx = (offset + num_bits - 1) / bundle_bitness(bitarray);
    4001b51c:	d345fc24 	lsr	x4, x1, #5
	bd->eoff = (offset + num_bits - 1) % bundle_bitness(bitarray);
    4001b520:	92401021 	and	x1, x1, #0x1f
    4001b524:	a9010403 	stp	x3, x1, [x0, #16]
	bd->smask = ~(BIT(bd->soff) - 1);
    4001b528:	9ac32043 	lsl	x3, x2, x3
	bd->emask = (BIT(bd->eoff) - 1) | BIT(bd->eoff);
    4001b52c:	9ac12042 	lsl	x2, x2, x1
    4001b530:	51000441 	sub	w1, w2, #0x1
	bd->smask = ~(BIT(bd->soff) - 1);
    4001b534:	4b0303e3 	neg	w3, w3
	bd->emask = (BIT(bd->eoff) - 1) | BIT(bd->eoff);
    4001b538:	2a020021 	orr	w1, w1, w2

	if (bd->sidx == bd->eidx) {
		/* The region lies within the same bundle. So combine the masks. */
		bd->smask &= bd->emask;
    4001b53c:	eb0400bf 	cmp	x5, x4
	bd->emask = (BIT(bd->eoff) - 1) | BIT(bd->eoff);
    4001b540:	b9002401 	str	w1, [x0, #36]
		bd->smask &= bd->emask;
    4001b544:	0a010061 	and	w1, w3, w1
    4001b548:	1a830021 	csel	w1, w1, w3, eq  // eq = none
	bd->eidx = (offset + num_bits - 1) / bundle_bitness(bitarray);
    4001b54c:	a9001005 	stp	x5, x4, [x0]
		bd->smask &= bd->emask;
    4001b550:	b9002001 	str	w1, [x0, #32]
	}
}
    4001b554:	d65f03c0 	ret

000000004001b558 <set_region>:
 *                 prior call to match_region().
 */
static void set_region(sys_bitarray_t *bitarray, size_t offset,
		       size_t num_bits, bool to_set,
		       struct bundle_data *bd)
{
    4001b558:	aa0003e7 	mov	x7, x0
    4001b55c:	12001c69 	and	w9, w3, #0xff
	int idx;
	struct bundle_data bdata;

	if (bd == NULL) {
    4001b560:	b50005e4 	cbnz	x4, 4001b61c <set_region+0xc4>
{
    4001b564:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
		bd = &bdata;
		setup_bundle_data(bitarray, bd, offset, num_bits);
    4001b568:	910063e0 	add	x0, sp, #0x18
{
    4001b56c:	910003fd 	mov	x29, sp
		setup_bundle_data(bitarray, bd, offset, num_bits);
    4001b570:	97ffffe6 	bl	4001b508 <setup_bundle_data.constprop.0>
	}

	if (bd->sidx == bd->eidx) {
		/* Start/end at same bundle */
		if (to_set) {
			bitarray->bundles[bd->sidx] |= bd->smask;
    4001b574:	f94004e2 	ldr	x2, [x7, #8]
	if (bd->sidx == bd->eidx) {
    4001b578:	a9401801 	ldp	x1, x6, [x0]
			bitarray->bundles[bd->sidx] |= bd->smask;
    4001b57c:	b9402004 	ldr	w4, [x0, #32]
    4001b580:	d37ef428 	lsl	x8, x1, #2
	if (bd->sidx == bd->eidx) {
    4001b584:	eb06003f 	cmp	x1, x6
			bitarray->bundles[bd->sidx] |= bd->smask;
    4001b588:	b8686845 	ldr	w5, [x2, x8]
	if (bd->sidx == bd->eidx) {
    4001b58c:	54000101 	b.ne	4001b5ac <set_region+0x54>  // b.any
			bitarray->bundles[bd->sidx] |= bd->smask;
    4001b590:	0a2400a0 	bic	w0, w5, w4
    4001b594:	7100013f 	cmp	w9, #0x0
    4001b598:	2a0400a5 	orr	w5, w5, w4
    4001b59c:	1a8010a5 	csel	w5, w5, w0, ne  // ne = any
    4001b5a0:	b8286845 	str	w5, [x2, x8]
			for (idx = bd->sidx + 1; idx < bd->eidx; idx++) {
				bitarray->bundles[idx] = 0U;
			}
		}
	}
}
    4001b5a4:	a8c47bfd 	ldp	x29, x30, [sp], #64
    4001b5a8:	d65f03c0 	ret
			bitarray->bundles[bd->eidx] |= bd->emask;
    4001b5ac:	d37ef4c7 	lsl	x7, x6, #2
			for (idx = bd->sidx + 1; idx < bd->eidx; idx++) {
    4001b5b0:	11000421 	add	w1, w1, #0x1
		if (to_set) {
    4001b5b4:	340001c9 	cbz	w9, 4001b5ec <set_region+0x94>
			bitarray->bundles[bd->sidx] |= bd->smask;
    4001b5b8:	2a0400a5 	orr	w5, w5, w4
    4001b5bc:	b8286845 	str	w5, [x2, x8]
			bitarray->bundles[bd->eidx] |= bd->emask;
    4001b5c0:	b8676843 	ldr	w3, [x2, x7]
    4001b5c4:	b9402400 	ldr	w0, [x0, #36]
    4001b5c8:	2a000063 	orr	w3, w3, w0
    4001b5cc:	b8276843 	str	w3, [x2, x7]
				bitarray->bundles[idx] = ~0U;
    4001b5d0:	12800003 	mov	w3, #0xffffffff            	// #-1
			for (idx = bd->sidx + 1; idx < bd->eidx; idx++) {
    4001b5d4:	93407c20 	sxtw	x0, w1
    4001b5d8:	eb21c0df 	cmp	x6, w1, sxtw
    4001b5dc:	54fffe49 	b.ls	4001b5a4 <set_region+0x4c>  // b.plast
    4001b5e0:	11000421 	add	w1, w1, #0x1
				bitarray->bundles[idx] = ~0U;
    4001b5e4:	b8207843 	str	w3, [x2, x0, lsl #2]
			for (idx = bd->sidx + 1; idx < bd->eidx; idx++) {
    4001b5e8:	17fffffb 	b	4001b5d4 <set_region+0x7c>
			bitarray->bundles[bd->sidx] &= ~bd->smask;
    4001b5ec:	0a2400a5 	bic	w5, w5, w4
    4001b5f0:	b8286845 	str	w5, [x2, x8]
			bitarray->bundles[bd->eidx] &= ~bd->emask;
    4001b5f4:	b8676843 	ldr	w3, [x2, x7]
    4001b5f8:	b9402400 	ldr	w0, [x0, #36]
    4001b5fc:	0a200060 	bic	w0, w3, w0
    4001b600:	b8276840 	str	w0, [x2, x7]
			for (idx = bd->sidx + 1; idx < bd->eidx; idx++) {
    4001b604:	93407c20 	sxtw	x0, w1
    4001b608:	eb21c0df 	cmp	x6, w1, sxtw
    4001b60c:	54fffcc9 	b.ls	4001b5a4 <set_region+0x4c>  // b.plast
    4001b610:	11000421 	add	w1, w1, #0x1
				bitarray->bundles[idx] = 0U;
    4001b614:	b820785f 	str	wzr, [x2, x0, lsl #2]
			for (idx = bd->sidx + 1; idx < bd->eidx; idx++) {
    4001b618:	17fffffb 	b	4001b604 <set_region+0xac>
    4001b61c:	aa0403e0 	mov	x0, x4
			bitarray->bundles[bd->sidx] |= bd->smask;
    4001b620:	b9402084 	ldr	w4, [x4, #32]
    4001b624:	f94004e2 	ldr	x2, [x7, #8]
	if (bd->sidx == bd->eidx) {
    4001b628:	a9401801 	ldp	x1, x6, [x0]
			bitarray->bundles[bd->sidx] |= bd->smask;
    4001b62c:	d37ef428 	lsl	x8, x1, #2
	if (bd->sidx == bd->eidx) {
    4001b630:	eb06003f 	cmp	x1, x6
			bitarray->bundles[bd->sidx] |= bd->smask;
    4001b634:	b8686845 	ldr	w5, [x2, x8]
	if (bd->sidx == bd->eidx) {
    4001b638:	540000e1 	b.ne	4001b654 <set_region+0xfc>  // b.any
			bitarray->bundles[bd->sidx] |= bd->smask;
    4001b63c:	0a2400a0 	bic	w0, w5, w4
    4001b640:	7100013f 	cmp	w9, #0x0
    4001b644:	2a0400a5 	orr	w5, w5, w4
    4001b648:	1a8010a5 	csel	w5, w5, w0, ne  // ne = any
    4001b64c:	b8286845 	str	w5, [x2, x8]
    4001b650:	d65f03c0 	ret
			bitarray->bundles[bd->eidx] |= bd->emask;
    4001b654:	d37ef4c7 	lsl	x7, x6, #2
			for (idx = bd->sidx + 1; idx < bd->eidx; idx++) {
    4001b658:	11000421 	add	w1, w1, #0x1
		if (to_set) {
    4001b65c:	340001e9 	cbz	w9, 4001b698 <set_region+0x140>
			bitarray->bundles[bd->sidx] |= bd->smask;
    4001b660:	2a0400a5 	orr	w5, w5, w4
    4001b664:	b8286845 	str	w5, [x2, x8]
			bitarray->bundles[bd->eidx] |= bd->emask;
    4001b668:	b8676843 	ldr	w3, [x2, x7]
    4001b66c:	b9402400 	ldr	w0, [x0, #36]
    4001b670:	2a000063 	orr	w3, w3, w0
    4001b674:	b8276843 	str	w3, [x2, x7]
				bitarray->bundles[idx] = ~0U;
    4001b678:	12800003 	mov	w3, #0xffffffff            	// #-1
			for (idx = bd->sidx + 1; idx < bd->eidx; idx++) {
    4001b67c:	93407c20 	sxtw	x0, w1
    4001b680:	eb21c0df 	cmp	x6, w1, sxtw
    4001b684:	54000048 	b.hi	4001b68c <set_region+0x134>  // b.pmore
    4001b688:	d65f03c0 	ret
    4001b68c:	11000421 	add	w1, w1, #0x1
				bitarray->bundles[idx] = ~0U;
    4001b690:	b8207843 	str	w3, [x2, x0, lsl #2]
			for (idx = bd->sidx + 1; idx < bd->eidx; idx++) {
    4001b694:	17fffffa 	b	4001b67c <set_region+0x124>
			bitarray->bundles[bd->sidx] &= ~bd->smask;
    4001b698:	0a2400a5 	bic	w5, w5, w4
    4001b69c:	b8286845 	str	w5, [x2, x8]
			bitarray->bundles[bd->eidx] &= ~bd->emask;
    4001b6a0:	b8676843 	ldr	w3, [x2, x7]
    4001b6a4:	b9402400 	ldr	w0, [x0, #36]
    4001b6a8:	0a200060 	bic	w0, w3, w0
    4001b6ac:	b8276840 	str	w0, [x2, x7]
			for (idx = bd->sidx + 1; idx < bd->eidx; idx++) {
    4001b6b0:	93407c20 	sxtw	x0, w1
    4001b6b4:	eb21c0df 	cmp	x6, w1, sxtw
    4001b6b8:	54000048 	b.hi	4001b6c0 <set_region+0x168>  // b.pmore
    4001b6bc:	d65f03c0 	ret
    4001b6c0:	11000421 	add	w1, w1, #0x1
				bitarray->bundles[idx] = 0U;
    4001b6c4:	b820785f 	str	wzr, [x2, x0, lsl #2]
			for (idx = bd->sidx + 1; idx < bd->eidx; idx++) {
    4001b6c8:	17fffffa 	b	4001b6b0 <set_region+0x158>

000000004001b6cc <set_clear_region>:
	return is_region_set_clear(bitarray, num_bits, offset, false);
}

static int set_clear_region(sys_bitarray_t *bitarray, size_t num_bits,
			    size_t offset, bool to_set)
{
    4001b6cc:	aa0103e5 	mov	x5, x1
    4001b6d0:	aa0203e1 	mov	x1, x2
	int ret;
	size_t off_end = offset + num_bits - 1;
    4001b6d4:	d10004a2 	sub	x2, x5, #0x1
    4001b6d8:	8b010042 	add	x2, x2, x1
MAKE_REG_HELPER(cntv_ctl_el0)
MAKE_REG_HELPER(cntv_cval_el0)
MAKE_REG_HELPER(cntvct_el0);
MAKE_REG_HELPER(cntvoff_el2);
MAKE_REG_HELPER(currentel);
MAKE_REG_HELPER(daif)
    4001b6dc:	d53b422a 	mrs	x10, daif
			  :: "i" (DAIFCLR_IRQ_BIT) : "memory");
}

static ALWAYS_INLINE void disable_irq(void)
{
	__asm__ volatile ("msr DAIFSet, %0"
    4001b6e0:	d50342df 	msr	daifset, #0x2
	k_spinlock_key_t key = k_spin_lock(&bitarray->lock);

	__ASSERT_NO_MSG(bitarray->num_bits > 0);

	if ((num_bits == 0)
    4001b6e4:	b4000265 	cbz	x5, 4001b730 <set_clear_region+0x64>
	    || (num_bits > bitarray->num_bits)
    4001b6e8:	b9400004 	ldr	w4, [x0]
    4001b6ec:	eb05009f 	cmp	x4, x5
    4001b6f0:	54000203 	b.cc	4001b730 <set_clear_region+0x64>  // b.lo, b.ul, b.last
	    || (offset >= bitarray->num_bits)
    4001b6f4:	eb01009f 	cmp	x4, x1
    4001b6f8:	540001c9 	b.ls	4001b730 <set_clear_region+0x64>  // b.plast
	    || (off_end >= bitarray->num_bits)) {
    4001b6fc:	eb02009f 	cmp	x4, x2
    4001b700:	54000189 	b.ls	4001b730 <set_clear_region+0x64>  // b.plast
{
    4001b704:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    4001b708:	12001c63 	and	w3, w3, #0xff
		ret = -EINVAL;
		goto out;
	}

	set_region(bitarray, offset, num_bits, to_set, NULL);
    4001b70c:	aa0503e2 	mov	x2, x5
{
    4001b710:	910003fd 	mov	x29, sp
	set_region(bitarray, offset, num_bits, to_set, NULL);
    4001b714:	d2800004 	mov	x4, #0x0                   	// #0
    4001b718:	97ffff90 	bl	4001b558 <set_region>
	ret = 0;
    4001b71c:	52800000 	mov	w0, #0x0                   	// #0
MAKE_REG_HELPER(daif)
    4001b720:	92407d4a 	and	x10, x10, #0xffffffff
    4001b724:	d51b422a 	msr	daif, x10

out:
	k_spin_unlock(&bitarray->lock, key);
	return ret;
}
    4001b728:	a8c17bfd 	ldp	x29, x30, [sp], #16
    4001b72c:	d65f03c0 	ret
		ret = -EINVAL;
    4001b730:	128002a0 	mov	w0, #0xffffffea            	// #-22
    4001b734:	92407d4a 	and	x10, x10, #0xffffffff
    4001b738:	d51b422a 	msr	daif, x10
}
    4001b73c:	d65f03c0 	ret

000000004001b740 <match_region>:
{
    4001b740:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    4001b744:	aa0003e8 	mov	x8, x0
    4001b748:	aa0403e0 	mov	x0, x4
    4001b74c:	910003fd 	mov	x29, sp
    4001b750:	12001c67 	and	w7, w3, #0xff
    4001b754:	aa0503e6 	mov	x6, x5
	setup_bundle_data(bitarray, bd, offset, num_bits);
    4001b758:	97ffff6c 	bl	4001b508 <setup_bundle_data.constprop.0>
	if (bd->sidx == bd->eidx) {
    4001b75c:	a9401002 	ldp	x2, x4, [x0]
    4001b760:	b9402001 	ldr	w1, [x0, #32]
    4001b764:	f9400503 	ldr	x3, [x8, #8]
    4001b768:	eb04005f 	cmp	x2, x4
    4001b76c:	54000221 	b.ne	4001b7b0 <match_region+0x70>  // b.any
		bundle = bitarray->bundles[bd->sidx];
    4001b770:	b8627860 	ldr	w0, [x3, x2, lsl #2]
		if (!match_set) {
    4001b774:	35000047 	cbnz	w7, 4001b77c <match_region+0x3c>
			bundle = ~bundle;
    4001b778:	2a2003e0 	mvn	w0, w0
		if ((bundle & bd->smask) != bd->smask) {
    4001b77c:	6a20003f 	bics	wzr, w1, w0
    4001b780:	54000400 	b.eq	4001b800 <match_region+0xc0>  // b.none
			mismatch_bundle = ~bundle & bd->smask;
    4001b784:	0a200020 	bic	w0, w1, w0
	if (mismatch != NULL) {
    4001b788:	b4000106 	cbz	x6, 4001b7a8 <match_region+0x68>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
    4001b78c:	7100001f 	cmp	w0, #0x0
    4001b790:	5ac00000 	rbit	w0, w0
    4001b794:	5ac01000 	clz	w0, w0
    4001b798:	1a8007e0 	csinc	w0, wzr, w0, eq  // eq = none
		mismatch_bit_off = find_lsb_set(mismatch_bundle) - 1;
    4001b79c:	51000400 	sub	w0, w0, #0x1
		*mismatch = (uint32_t)mismatch_bit_off;
    4001b7a0:	0b021400 	add	w0, w0, w2, lsl #5
    4001b7a4:	f90000c0 	str	x0, [x6]
	return false;
    4001b7a8:	52800000 	mov	w0, #0x0                   	// #0
    4001b7ac:	14000016 	b	4001b804 <match_region+0xc4>
	bundle = bitarray->bundles[bd->sidx];
    4001b7b0:	b8627865 	ldr	w5, [x3, x2, lsl #2]
	if (!match_set) {
    4001b7b4:	35000047 	cbnz	w7, 4001b7bc <match_region+0x7c>
		bundle = ~bundle;
    4001b7b8:	2a2503e5 	mvn	w5, w5
	if ((bundle & bd->smask) != bd->smask) {
    4001b7bc:	6a25003f 	bics	wzr, w1, w5
    4001b7c0:	54000060 	b.eq	4001b7cc <match_region+0x8c>  // b.none
		mismatch_bundle = ~bundle & bd->smask;
    4001b7c4:	0a250020 	bic	w0, w1, w5
		goto mismatch;
    4001b7c8:	17fffff0 	b	4001b788 <match_region+0x48>
	bundle = bitarray->bundles[bd->eidx];
    4001b7cc:	b8647861 	ldr	w1, [x3, x4, lsl #2]
	if (!match_set) {
    4001b7d0:	35000047 	cbnz	w7, 4001b7d8 <match_region+0x98>
		bundle = ~bundle;
    4001b7d4:	2a2103e1 	mvn	w1, w1
	if ((bundle & bd->emask) != bd->emask) {
    4001b7d8:	b9402400 	ldr	w0, [x0, #36]
    4001b7dc:	6a21001f 	bics	wzr, w0, w1
    4001b7e0:	54000080 	b.eq	4001b7f0 <match_region+0xb0>  // b.none
		mismatch_bundle = ~bundle & bd->emask;
    4001b7e4:	0a210000 	bic	w0, w0, w1
		goto mismatch;
    4001b7e8:	aa0403e2 	mov	x2, x4
    4001b7ec:	17ffffe7 	b	4001b788 <match_region+0x48>
	for (idx = bd->sidx + 1; idx < bd->eidx; idx++) {
    4001b7f0:	11000441 	add	w1, w2, #0x1
    4001b7f4:	93407c22 	sxtw	x2, w1
    4001b7f8:	eb21c09f 	cmp	x4, w1, sxtw
    4001b7fc:	54000088 	b.hi	4001b80c <match_region+0xcc>  // b.pmore
	return true;
    4001b800:	52800020 	mov	w0, #0x1                   	// #1
}
    4001b804:	a8c17bfd 	ldp	x29, x30, [sp], #16
    4001b808:	d65f03c0 	ret
		bundle = bitarray->bundles[idx];
    4001b80c:	b8627860 	ldr	w0, [x3, x2, lsl #2]
		if (match_set) {
    4001b810:	34000047 	cbz	w7, 4001b818 <match_region+0xd8>
			bundle = ~bundle;
    4001b814:	2a2003e0 	mvn	w0, w0
		if (bundle != 0U) {
    4001b818:	34000060 	cbz	w0, 4001b824 <match_region+0xe4>
			mismatch_bundle = ~bundle;
    4001b81c:	2a2003e0 	mvn	w0, w0
			goto mismatch;
    4001b820:	17ffffda 	b	4001b788 <match_region+0x48>
	for (idx = bd->sidx + 1; idx < bd->eidx; idx++) {
    4001b824:	11000421 	add	w1, w1, #0x1
    4001b828:	17fffff3 	b	4001b7f4 <match_region+0xb4>

000000004001b82c <sys_bitarray_alloc>:
    4001b82c:	d53b422d 	mrs	x13, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001b830:	d50342df 	msr	daifset, #0x2
	CHECKIF(offset == NULL) {
    4001b834:	b4000502 	cbz	x2, 4001b8d4 <sys_bitarray_alloc+0xa8>
    4001b838:	aa0103ea 	mov	x10, x1
	if ((num_bits == 0) || (num_bits > bitarray->num_bits)) {
    4001b83c:	b40004c1 	cbz	x1, 4001b8d4 <sys_bitarray_alloc+0xa8>
    4001b840:	b9400001 	ldr	w1, [x0]
    4001b844:	aa0003e9 	mov	x9, x0
    4001b848:	eb0a003f 	cmp	x1, x10
    4001b84c:	54000443 	b.cc	4001b8d4 <sys_bitarray_alloc+0xa8>  // b.lo, b.ul, b.last
    4001b850:	aa0203ec 	mov	x12, x2
    4001b854:	b9400522 	ldr	w2, [x9, #4]
	for (ret = 0; ret < bitarray->num_bundles; ret++) {
    4001b858:	52800000 	mov	w0, #0x0                   	// #0
    4001b85c:	531b6804 	lsl	w4, w0, #5
    4001b860:	6b02001f 	cmp	w0, w2
    4001b864:	540001e0 	b.eq	4001b8a0 <sys_bitarray_alloc+0x74>  // b.none
		if (~bitarray->bundles[ret] == 0U) {
    4001b868:	f9400523 	ldr	x3, [x9, #8]
    4001b86c:	b860d863 	ldr	w3, [x3, w0, sxtw #2]
    4001b870:	3100047f 	cmn	w3, #0x1
    4001b874:	54000061 	b.ne	4001b880 <sys_bitarray_alloc+0x54>  // b.any
	for (ret = 0; ret < bitarray->num_bundles; ret++) {
    4001b878:	11000400 	add	w0, w0, #0x1
    4001b87c:	17fffff8 	b	4001b85c <sys_bitarray_alloc+0x30>
		if (bitarray->bundles[ret] != 0U) {
    4001b880:	34000103 	cbz	w3, 4001b8a0 <sys_bitarray_alloc+0x74>
			off_start = find_lsb_set(~bitarray->bundles[ret]) - 1;
    4001b884:	2a2303e3 	mvn	w3, w3
			bit_idx += off_start;
    4001b888:	51000484 	sub	w4, w4, #0x1
    4001b88c:	7100007f 	cmp	w3, #0x0
    4001b890:	5ac00063 	rbit	w3, w3
    4001b894:	5ac01063 	clz	w3, w3
    4001b898:	1a8307e3 	csinc	w3, wzr, w3, eq  // eq = none
    4001b89c:	0b030084 	add	w4, w4, w3
	off_end = bitarray->num_bits - num_bits;
    4001b8a0:	cb0a002b 	sub	x11, x1, x10
	while (bit_idx <= off_end) {
    4001b8a4:	2a0403ee 	mov	w14, w4
    4001b8a8:	eb24417f 	cmp	x11, w4, uxtw
    4001b8ac:	540001c2 	b.cs	4001b8e4 <sys_bitarray_alloc+0xb8>  // b.hs, b.nlast
	ret = -ENOSPC;
    4001b8b0:	12800360 	mov	w0, #0xffffffe4            	// #-28
    4001b8b4:	14000009 	b	4001b8d8 <sys_bitarray_alloc+0xac>
		bit_idx = mismatch + 1;
    4001b8b8:	f9400be4 	ldr	x4, [sp, #16]
    4001b8bc:	11000484 	add	w4, w4, #0x1
	while (bit_idx <= off_end) {
    4001b8c0:	2a0403ee 	mov	w14, w4
    4001b8c4:	eb24417f 	cmp	x11, w4, uxtw
    4001b8c8:	54000122 	b.cs	4001b8ec <sys_bitarray_alloc+0xc0>  // b.hs, b.nlast
	ret = -ENOSPC;
    4001b8cc:	12800360 	mov	w0, #0xffffffe4            	// #-28
out:
    4001b8d0:	14000018 	b	4001b930 <sys_bitarray_alloc+0x104>
		ret = -EINVAL;
    4001b8d4:	128002a0 	mov	w0, #0xffffffea            	// #-22
MAKE_REG_HELPER(daif)
    4001b8d8:	92407dad 	and	x13, x13, #0xffffffff
    4001b8dc:	d51b422d 	msr	daif, x13
}
    4001b8e0:	d65f03c0 	ret
{
    4001b8e4:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    4001b8e8:	910003fd 	mov	x29, sp
		if (match_region(bitarray, bit_idx, num_bits, false,
    4001b8ec:	910043e5 	add	x5, sp, #0x10
    4001b8f0:	910063e4 	add	x4, sp, #0x18
    4001b8f4:	aa0a03e2 	mov	x2, x10
    4001b8f8:	aa0e03e1 	mov	x1, x14
    4001b8fc:	aa0903e0 	mov	x0, x9
    4001b900:	52800003 	mov	w3, #0x0                   	// #0
    4001b904:	97ffff8f 	bl	4001b740 <match_region>
    4001b908:	72001c1f 	tst	w0, #0xff
    4001b90c:	54fffd60 	b.eq	4001b8b8 <sys_bitarray_alloc+0x8c>  // b.none
			set_region(bitarray, bit_idx, num_bits, true, &bd);
    4001b910:	aa0903e0 	mov	x0, x9
    4001b914:	910063e4 	add	x4, sp, #0x18
    4001b918:	aa0a03e2 	mov	x2, x10
    4001b91c:	aa0e03e1 	mov	x1, x14
    4001b920:	52800023 	mov	w3, #0x1                   	// #1
    4001b924:	97ffff0d 	bl	4001b558 <set_region>
			ret = 0;
    4001b928:	52800000 	mov	w0, #0x0                   	// #0
			*offset = bit_idx;
    4001b92c:	f900018e 	str	x14, [x12]
    4001b930:	92407dad 	and	x13, x13, #0xffffffff
    4001b934:	d51b422d 	msr	daif, x13
}
    4001b938:	a8c47bfd 	ldp	x29, x30, [sp], #64
    4001b93c:	d65f03c0 	ret

000000004001b940 <sys_bitarray_free>:
{
    4001b940:	aa0103e9 	mov	x9, x1
	size_t off_end = offset + num_bits - 1;
    4001b944:	d1000421 	sub	x1, x1, #0x1
    4001b948:	8b020021 	add	x1, x1, x2
    4001b94c:	d53b422c 	mrs	x12, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001b950:	d50342df 	msr	daifset, #0x2
	if ((num_bits == 0)
    4001b954:	b40003e9 	cbz	x9, 4001b9d0 <sys_bitarray_free+0x90>
    4001b958:	aa0203ea 	mov	x10, x2
	    || (num_bits > bitarray->num_bits)
    4001b95c:	b9400002 	ldr	w2, [x0]
    4001b960:	aa0003eb 	mov	x11, x0
    4001b964:	eb09005f 	cmp	x2, x9
    4001b968:	54000343 	b.cc	4001b9d0 <sys_bitarray_free+0x90>  // b.lo, b.ul, b.last
	    || (offset >= bitarray->num_bits)
    4001b96c:	eb0a005f 	cmp	x2, x10
    4001b970:	54000309 	b.ls	4001b9d0 <sys_bitarray_free+0x90>  // b.plast
	    || (off_end >= bitarray->num_bits)) {
    4001b974:	eb01005f 	cmp	x2, x1
    4001b978:	540002c9 	b.ls	4001b9d0 <sys_bitarray_free+0x90>  // b.plast
{
    4001b97c:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
	if (match_region(bitarray, offset, num_bits, true, &bd, NULL)) {
    4001b980:	aa0903e2 	mov	x2, x9
    4001b984:	aa0a03e1 	mov	x1, x10
{
    4001b988:	910003fd 	mov	x29, sp
	if (match_region(bitarray, offset, num_bits, true, &bd, NULL)) {
    4001b98c:	910063e4 	add	x4, sp, #0x18
    4001b990:	d2800005 	mov	x5, #0x0                   	// #0
    4001b994:	52800023 	mov	w3, #0x1                   	// #1
    4001b998:	97ffff6a 	bl	4001b740 <match_region>
    4001b99c:	72001c1f 	tst	w0, #0xff
    4001b9a0:	54000200 	b.eq	4001b9e0 <sys_bitarray_free+0xa0>  // b.none
		set_region(bitarray, offset, num_bits, false, &bd);
    4001b9a4:	aa0b03e0 	mov	x0, x11
    4001b9a8:	910063e4 	add	x4, sp, #0x18
    4001b9ac:	aa0903e2 	mov	x2, x9
    4001b9b0:	aa0a03e1 	mov	x1, x10
    4001b9b4:	52800003 	mov	w3, #0x0                   	// #0
    4001b9b8:	97fffee8 	bl	4001b558 <set_region>
		ret = 0;
    4001b9bc:	52800000 	mov	w0, #0x0                   	// #0
MAKE_REG_HELPER(daif)
    4001b9c0:	92407d8c 	and	x12, x12, #0xffffffff
    4001b9c4:	d51b422c 	msr	daif, x12
}
    4001b9c8:	a8c47bfd 	ldp	x29, x30, [sp], #64
    4001b9cc:	d65f03c0 	ret
		ret = -EINVAL;
    4001b9d0:	128002a0 	mov	w0, #0xffffffea            	// #-22
    4001b9d4:	92407d8c 	and	x12, x12, #0xffffffff
    4001b9d8:	d51b422c 	msr	daif, x12
}
    4001b9dc:	d65f03c0 	ret
		ret = -EFAULT;
    4001b9e0:	128001a0 	mov	w0, #0xfffffff2            	// #-14
    4001b9e4:	17fffff7 	b	4001b9c0 <sys_bitarray_free+0x80>

000000004001b9e8 <sys_bitarray_set_region>:

int sys_bitarray_set_region(sys_bitarray_t *bitarray, size_t num_bits,
			    size_t offset)
{
	return set_clear_region(bitarray, num_bits, offset, true);
    4001b9e8:	52800023 	mov	w3, #0x1                   	// #1
    4001b9ec:	17ffff38 	b	4001b6cc <set_clear_region>

000000004001b9f0 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    4001b9f0:	aa0003e1 	mov	x1, x0
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
    4001b9f4:	f0000023 	adrp	x3, 40022000 <__pow_log_data+0xcc8>
    4001b9f8:	912fc463 	add	x3, x3, #0xbf1
	size_t val = 0;
    4001b9fc:	d2800000 	mov	x0, #0x0                   	// #0
		val = 10U * val + *sp++ - '0';
    4001ba00:	d2800146 	mov	x6, #0xa                   	// #10
	const char *sp = *str;
    4001ba04:	f9400022 	ldr	x2, [x1]
	while (isdigit((int)(unsigned char)*sp)) {
    4001ba08:	39400044 	ldrb	w4, [x2]
    4001ba0c:	38636885 	ldrb	w5, [x4, x3]
    4001ba10:	37100065 	tbnz	w5, #2, 4001ba1c <extract_decimal+0x2c>
	}
	*str = sp;
    4001ba14:	f9000022 	str	x2, [x1]
	return val;
}
    4001ba18:	d65f03c0 	ret
		val = 10U * val + *sp++ - '0';
    4001ba1c:	9b061000 	madd	x0, x0, x6, x4
    4001ba20:	91000442 	add	x2, x2, #0x1
    4001ba24:	d100c000 	sub	x0, x0, #0x30
    4001ba28:	17fffff8 	b	4001ba08 <extract_decimal+0x18>

000000004001ba2c <_get_digit>:

/* Extract the next decimal character in the converted representation of a
 * fractional component.
 */
static char _get_digit(uint64_t *fr, int *digit_count)
{
    4001ba2c:	aa0003e3 	mov	x3, x0
	char rval;

	if (*digit_count > 0) {
    4001ba30:	b9400020 	ldr	w0, [x1]
    4001ba34:	7100001f 	cmp	w0, #0x0
    4001ba38:	5400016d 	b.le	4001ba64 <_get_digit+0x38>
		--*digit_count;
    4001ba3c:	51000400 	sub	w0, w0, #0x1
    4001ba40:	b9000020 	str	w0, [x1]
		*fr *= 10U;
    4001ba44:	f9400061 	ldr	x1, [x3]
    4001ba48:	d2800140 	mov	x0, #0xa                   	// #10
    4001ba4c:	9b007c21 	mul	x1, x1, x0
		rval = ((*fr >> 60) & 0xF) + '0';
    4001ba50:	d37cfc22 	lsr	x2, x1, #60
		*fr &= (BIT64(60) - 1U);
    4001ba54:	9240ec21 	and	x1, x1, #0xfffffffffffffff
		rval = ((*fr >> 60) & 0xF) + '0';
    4001ba58:	1100c040 	add	w0, w2, #0x30
		*fr &= (BIT64(60) - 1U);
    4001ba5c:	f9000061 	str	x1, [x3]
	} else {
		rval = '0';
	}

	return rval;
}
    4001ba60:	d65f03c0 	ret
		rval = '0';
    4001ba64:	52800600 	mov	w0, #0x30                  	// #48
    4001ba68:	17fffffe 	b	4001ba60 <_get_digit+0x34>

000000004001ba6c <encode_uint>:
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
	bool upcase = isupper((int)conv->specifier);
    4001ba6c:	39400c26 	ldrb	w6, [x1, #3]
    4001ba70:	f0000024 	adrp	x4, 40022000 <__pow_log_data+0xcc8>
    4001ba74:	912fc484 	add	x4, x4, #0xbf1
{
    4001ba78:	aa0003e5 	mov	x5, x0
    4001ba7c:	aa0303e0 	mov	x0, x3
	bool upcase = isupper((int)conv->specifier);
    4001ba80:	39400c23 	ldrb	w3, [x1, #3]
    4001ba84:	386468c6 	ldrb	w6, [x6, x4]
	switch (specifier) {
    4001ba88:	7101bc7f 	cmp	w3, #0x6f
    4001ba8c:	120004c6 	and	w6, w6, #0x3
    4001ba90:	54000380 	b.eq	4001bb00 <encode_uint+0x94>  // b.none
    4001ba94:	54000308 	b.hi	4001baf4 <encode_uint+0x88>  // b.pmore
		return 16;
    4001ba98:	7101607f 	cmp	w3, #0x58
    4001ba9c:	d2800144 	mov	x4, #0xa                   	// #10
    4001baa0:	d2800203 	mov	x3, #0x10                  	// #16
    4001baa4:	9a831084 	csel	x4, x4, x3, ne  // ne = any
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    4001baa8:	9ac408a8 	udiv	x8, x5, x4
    4001baac:	9b049507 	msub	x7, x8, x4, x5

		*--bp = (lsv <= 9) ? ('0' + lsv)
    4001bab0:	12001ce3 	and	w3, w7, #0xff
    4001bab4:	f10024ff 	cmp	x7, #0x9
    4001bab8:	540002c8 	b.hi	4001bb10 <encode_uint+0xa4>  // b.pmore
    4001babc:	1100c063 	add	w3, w3, #0x30
    4001bac0:	12001c63 	and	w3, w3, #0xff
    4001bac4:	381ffc03 	strb	w3, [x0, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    4001bac8:	eb0400bf 	cmp	x5, x4
    4001bacc:	fa422000 	ccmp	x0, x2, #0x0, cs  // cs = hs, nlast
    4001bad0:	540001c8 	b.hi	4001bb08 <encode_uint+0x9c>  // b.pmore

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    4001bad4:	79400022 	ldrh	w2, [x1]
    4001bad8:	362800c2 	tbz	w2, #5, 4001baf0 <encode_uint+0x84>
		if (radix == 8) {
    4001badc:	f100209f 	cmp	x4, #0x8
    4001bae0:	54000261 	b.ne	4001bb2c <encode_uint+0xc0>  // b.any
			conv->altform_0 = true;
    4001bae4:	39400822 	ldrb	w2, [x1, #2]
    4001bae8:	321d0042 	orr	w2, w2, #0x8
		} else if (radix == 16) {
			conv->altform_0c = true;
    4001baec:	39000822 	strb	w2, [x1, #2]
			;
		}
	}

	return bp;
}
    4001baf0:	d65f03c0 	ret
	switch (specifier) {
    4001baf4:	121c7863 	and	w3, w3, #0xfffffff7
		return 16;
    4001baf8:	7101c07f 	cmp	w3, #0x70
    4001bafc:	17ffffe8 	b	4001ba9c <encode_uint+0x30>
	switch (specifier) {
    4001bb00:	d2800104 	mov	x4, #0x8                   	// #8
	char *bp = bps + (bpe - bps);
    4001bb04:	17ffffe9 	b	4001baa8 <encode_uint+0x3c>
		value /= radix;
    4001bb08:	aa0803e5 	mov	x5, x8
    4001bb0c:	17ffffe7 	b	4001baa8 <encode_uint+0x3c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4001bb10:	1100dc67 	add	w7, w3, #0x37
    4001bb14:	11015c63 	add	w3, w3, #0x57
    4001bb18:	12001ce7 	and	w7, w7, #0xff
    4001bb1c:	12001c63 	and	w3, w3, #0xff
    4001bb20:	710004df 	cmp	w6, #0x1
    4001bb24:	1a871063 	csel	w3, w3, w7, ne  // ne = any
    4001bb28:	17ffffe7 	b	4001bac4 <encode_uint+0x58>
		} else if (radix == 16) {
    4001bb2c:	f100409f 	cmp	x4, #0x10
    4001bb30:	54fffe01 	b.ne	4001baf0 <encode_uint+0x84>  // b.any
			conv->altform_0c = true;
    4001bb34:	39400822 	ldrb	w2, [x1, #2]
    4001bb38:	321c0042 	orr	w2, w2, #0x10
    4001bb3c:	17ffffec 	b	4001baec <encode_uint+0x80>

000000004001bb40 <outs>:
/* Outline function to emit all characters in [sp, ep). */
static int outs(cbprintf_cb out,
		void *ctx,
		const char *sp,
		const char *ep)
{
    4001bb40:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    4001bb44:	910003fd 	mov	x29, sp
    4001bb48:	a90153f3 	stp	x19, x20, [sp, #16]
    4001bb4c:	aa0203f4 	mov	x20, x2
	size_t count = 0;
    4001bb50:	d2800013 	mov	x19, #0x0                   	// #0
{
    4001bb54:	a9025bf5 	stp	x21, x22, [sp, #32]
    4001bb58:	aa0003f6 	mov	x22, x0
    4001bb5c:	aa0303f5 	mov	x21, x3
    4001bb60:	f9001bf7 	str	x23, [sp, #48]
    4001bb64:	aa0103f7 	mov	x23, x1

	while ((sp < ep) || ((ep == NULL) && *sp)) {
    4001bb68:	8b130280 	add	x0, x20, x19
    4001bb6c:	eb0002bf 	cmp	x21, x0
    4001bb70:	54000148 	b.hi	4001bb98 <outs+0x58>  // b.pmore
    4001bb74:	b40000f5 	cbz	x21, 4001bb90 <outs+0x50>
			return rc;
		}
		++count;
	}

	return (int)count;
    4001bb78:	2a1303e0 	mov	w0, w19
}
    4001bb7c:	a94153f3 	ldp	x19, x20, [sp, #16]
    4001bb80:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4001bb84:	f9401bf7 	ldr	x23, [sp, #48]
    4001bb88:	a8c47bfd 	ldp	x29, x30, [sp], #64
    4001bb8c:	d65f03c0 	ret
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    4001bb90:	38736a80 	ldrb	w0, [x20, x19]
    4001bb94:	34ffff20 	cbz	w0, 4001bb78 <outs+0x38>
		int rc = out((int)*sp++, ctx);
    4001bb98:	38736a80 	ldrb	w0, [x20, x19]
    4001bb9c:	aa1703e1 	mov	x1, x23
    4001bba0:	d63f02c0 	blr	x22
		if (rc < 0) {
    4001bba4:	37fffec0 	tbnz	w0, #31, 4001bb7c <outs+0x3c>
		++count;
    4001bba8:	91000673 	add	x19, x19, #0x1
    4001bbac:	17ffffef 	b	4001bb68 <outs+0x28>

000000004001bbb0 <cbvprintf>:

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    4001bbb0:	a9b27bfd 	stp	x29, x30, [sp, #-224]!
    4001bbb4:	aa0203e7 	mov	x7, x2
    4001bbb8:	910003fd 	mov	x29, sp
    4001bbbc:	a9025bf5 	stp	x21, x22, [sp, #32]
    4001bbc0:	aa0003f5 	mov	x21, x0
    4001bbc4:	aa0103f6 	mov	x22, x1
    4001bbc8:	a90363f7 	stp	x23, x24, [sp, #48]
    4001bbcc:	a90573fb 	stp	x27, x28, [sp, #80]
    4001bbd0:	b940187b 	ldr	w27, [x3, #24]
    4001bbd4:	a940607c 	ldp	x28, x24, [x3]
    4001bbd8:	a90153f3 	stp	x19, x20, [sp, #16]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    4001bbdc:	d2800013 	mov	x19, #0x0                   	// #0
    4001bbe0:	f9400860 	ldr	x0, [x3, #16]
    4001bbe4:	f90037e0 	str	x0, [sp, #104]
    4001bbe8:	b9401c60 	ldr	w0, [x3, #28]
    4001bbec:	b9008be0 	str	w0, [sp, #136]
	switch (conv->specifier) {
    4001bbf0:	90000040 	adrp	x0, 40023000 <fpi.1>
    4001bbf4:	91099000 	add	x0, x0, #0x264
{
    4001bbf8:	a9046bf9 	stp	x25, x26, [sp, #64]
	switch (conv->specifier) {
    4001bbfc:	f9003fe0 	str	x0, [sp, #120]
				/* Only padding is pre_exp */
				while (*cp != 'p') {
					OUTC(*cp++);
				}
			} else {
				while (isdigit((int)*cp)) {
    4001bc00:	f000003a 	adrp	x26, 40022000 <__pow_log_data+0xcc8>
    4001bc04:	912fc740 	add	x0, x26, #0xbf1
    4001bc08:	f9003be0 	str	x0, [sp, #112]
	while (*fp != 0) {
    4001bc0c:	394000e0 	ldrb	w0, [x7]
    4001bc10:	35000060 	cbnz	w0, 4001bc1c <cbvprintf+0x6c>
			OUTC(' ');
			--width;
		}
	}

	return count;
    4001bc14:	2a1303e0 	mov	w0, w19
    4001bc18:	1400040d 	b	4001cc4c <cbvprintf+0x109c>
			OUTC(*fp++);
    4001bc1c:	910004f4 	add	x20, x7, #0x1
		if (*fp != '%') {
    4001bc20:	7100941f 	cmp	w0, #0x25
    4001bc24:	540000c0 	b.eq	4001bc3c <cbvprintf+0x8c>  // b.none
			OUTC(*fp++);
    4001bc28:	aa1603e1 	mov	x1, x22
			OUTC('%');
    4001bc2c:	d63f02a0 	blr	x21
    4001bc30:	37f880e0 	tbnz	w0, #31, 4001cc4c <cbvprintf+0x109c>
    4001bc34:	91000673 	add	x19, x19, #0x1
		if (bps == NULL) {
    4001bc38:	14000177 	b	4001c214 <cbvprintf+0x664>
		} state = {
    4001bc3c:	a90c7fff 	stp	xzr, xzr, [sp, #192]
    4001bc40:	a90d7fff 	stp	xzr, xzr, [sp, #208]
	if (*sp == '%') {
    4001bc44:	394004e0 	ldrb	w0, [x7, #1]
    4001bc48:	7100941f 	cmp	w0, #0x25
    4001bc4c:	540007c1 	b.ne	4001bd44 <cbvprintf+0x194>  // b.any
		conv->specifier = *sp++;
    4001bc50:	910008f4 	add	x20, x7, #0x2
    4001bc54:	39034fe0 	strb	w0, [sp, #211]
		if (conv->width_star) {
    4001bc58:	7941a3e0 	ldrh	w0, [sp, #208]
    4001bc5c:	36402520 	tbz	w0, #8, 4001c100 <cbvprintf+0x550>
			width = va_arg(ap, int);
    4001bc60:	37f823bb 	tbnz	w27, #31, 4001c0d4 <cbvprintf+0x524>
    4001bc64:	91002f81 	add	x1, x28, #0xb
    4001bc68:	aa1c03e0 	mov	x0, x28
    4001bc6c:	927df03c 	and	x28, x1, #0xfffffffffffffff8
    4001bc70:	b9400017 	ldr	w23, [x0]
			if (width < 0) {
    4001bc74:	36f800b7 	tbz	w23, #31, 4001bc88 <cbvprintf+0xd8>
				conv->flag_dash = true;
    4001bc78:	7941a3e0 	ldrh	w0, [sp, #208]
				width = -width;
    4001bc7c:	4b1703f7 	neg	w23, w23
				conv->flag_dash = true;
    4001bc80:	321e0000 	orr	w0, w0, #0x4
    4001bc84:	7901a3e0 	strh	w0, [sp, #208]
		if (conv->prec_star) {
    4001bc88:	7941a3e0 	ldrh	w0, [sp, #208]
    4001bc8c:	36502580 	tbz	w0, #10, 4001c13c <cbvprintf+0x58c>
			int arg = va_arg(ap, int);
    4001bc90:	37f8241b 	tbnz	w27, #31, 4001c110 <cbvprintf+0x560>
    4001bc94:	91002f81 	add	x1, x28, #0xb
    4001bc98:	aa1c03e0 	mov	x0, x28
    4001bc9c:	927df03c 	and	x28, x1, #0xfffffffffffffff8
    4001bca0:	b9400009 	ldr	w9, [x0]
			if (arg < 0) {
    4001bca4:	36f800a9 	tbz	w9, #31, 4001bcb8 <cbvprintf+0x108>
				conv->prec_present = false;
    4001bca8:	7941a3e0 	ldrh	w0, [sp, #208]
		int precision = -1;
    4001bcac:	12800009 	mov	w9, #0xffffffff            	// #-1
				conv->prec_present = false;
    4001bcb0:	12167800 	and	w0, w0, #0xfffffdff
    4001bcb4:	7901a3e0 	strh	w0, [sp, #208]
		    && (conv->specifier_cat == SPECIFIER_FP)
    4001bcb8:	39434be0 	ldrb	w0, [sp, #210]
		conv->pad0_value = 0;
    4001bcbc:	f80d43ff 	stur	xzr, [sp, #212]
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    4001bcc0:	12000800 	and	w0, w0, #0x7
    4001bcc4:	7100101f 	cmp	w0, #0x4
    4001bcc8:	f9406be1 	ldr	x1, [sp, #208]
    4001bccc:	54000101 	b.ne	4001bcec <cbvprintf+0x13c>  // b.any
		    && !conv->prec_present) {
    4001bcd0:	7217003f 	tst	w1, #0x200
    4001bcd4:	540000c1 	b.ne	4001bcec <cbvprintf+0x13c>  // b.any
			if (conv->specifier_a) {
    4001bcd8:	79c1a3e0 	ldrsh	w0, [sp, #208]
				precision = 6;
    4001bcdc:	528001a9 	mov	w9, #0xd                   	// #13
    4001bce0:	7100001f 	cmp	w0, #0x0
    4001bce4:	528000c0 	mov	w0, #0x6                   	// #6
    4001bce8:	1a80b129 	csel	w9, w9, w0, lt  // lt = tstop
		enum specifier_cat_enum specifier_cat
    4001bcec:	53104820 	ubfx	w0, w1, #16, #3
			= (enum length_mod_enum)conv->length_mod;
    4001bcf0:	530b3822 	ubfx	w2, w1, #11, #4
		if (specifier_cat == SPECIFIER_SINT) {
    4001bcf4:	7100041f 	cmp	w0, #0x1
    4001bcf8:	54002921 	b.ne	4001c21c <cbvprintf+0x66c>  // b.any
			switch (length_mod) {
    4001bcfc:	51000c43 	sub	w3, w2, #0x3
    4001bd00:	7100107f 	cmp	w3, #0x4
    4001bd04:	54002248 	b.hi	4001c14c <cbvprintf+0x59c>  // b.pmore
    4001bd08:	90000040 	adrp	x0, 40023000 <fpi.1>
    4001bd0c:	91096000 	add	x0, x0, #0x258
    4001bd10:	78635800 	ldrh	w0, [x0, w3, uxtw #1]
    4001bd14:	10000063 	adr	x3, 4001bd20 <cbvprintf+0x170>
    4001bd18:	8b20a860 	add	x0, x3, w0, sxth #2
    4001bd1c:	d61f0000 	br	x0
		switch (*sp) {
    4001bd20:	7100b43f 	cmp	w1, #0x2d
    4001bd24:	540000a0 	b.eq	4001bd38 <cbvprintf+0x188>  // b.none
    4001bd28:	7100c03f 	cmp	w1, #0x30
    4001bd2c:	540001e1 	b.ne	4001bd68 <cbvprintf+0x1b8>  // b.any
			conv->flag_zero = true;
    4001bd30:	321a0000 	orr	w0, w0, #0x40
    4001bd34:	14000002 	b	4001bd3c <cbvprintf+0x18c>
			conv->flag_dash = true;
    4001bd38:	321e0000 	orr	w0, w0, #0x4
			++sp;
    4001bd3c:	91000694 	add	x20, x20, #0x1
			conv->flag_zero = true;
    4001bd40:	7901a3e0 	strh	w0, [sp, #208]
		switch (*sp) {
    4001bd44:	39400281 	ldrb	w1, [x20]
    4001bd48:	7941a3e0 	ldrh	w0, [sp, #208]
    4001bd4c:	7100ac3f 	cmp	w1, #0x2b
    4001bd50:	540006e0 	b.eq	4001be2c <cbvprintf+0x27c>  // b.none
    4001bd54:	54fffe68 	b.hi	4001bd20 <cbvprintf+0x170>  // b.pmore
    4001bd58:	7100803f 	cmp	w1, #0x20
    4001bd5c:	540006c0 	b.eq	4001be34 <cbvprintf+0x284>  // b.none
    4001bd60:	71008c3f 	cmp	w1, #0x23
    4001bd64:	540006c0 	b.eq	4001be3c <cbvprintf+0x28c>  // b.none
	if (conv->flag_zero && conv->flag_dash) {
    4001bd68:	b940d3e1 	ldr	w1, [sp, #208]
    4001bd6c:	52800882 	mov	w2, #0x44                  	// #68
    4001bd70:	0a020021 	and	w1, w1, w2
    4001bd74:	6b02003f 	cmp	w1, w2
    4001bd78:	54000061 	b.ne	4001bd84 <cbvprintf+0x1d4>  // b.any
		conv->flag_zero = false;
    4001bd7c:	12197800 	and	w0, w0, #0xffffffbf
    4001bd80:	7901a3e0 	strh	w0, [sp, #208]
	conv->width_present = true;
    4001bd84:	7941a3e0 	ldrh	w0, [sp, #208]
    4001bd88:	f9004ff4 	str	x20, [sp, #152]
    4001bd8c:	32190001 	orr	w1, w0, #0x80
    4001bd90:	7901a3e1 	strh	w1, [sp, #208]
	if (*sp == '*') {
    4001bd94:	39400281 	ldrb	w1, [x20]
    4001bd98:	7100a83f 	cmp	w1, #0x2a
    4001bd9c:	54000541 	b.ne	4001be44 <cbvprintf+0x294>  // b.any
		return ++sp;
    4001bda0:	91000694 	add	x20, x20, #0x1
		conv->width_star = true;
    4001bda4:	32190400 	orr	w0, w0, #0x180
    4001bda8:	7901a3e0 	strh	w0, [sp, #208]
	sp = extract_prec(conv, sp);
    4001bdac:	f9004ff4 	str	x20, [sp, #152]
	conv->prec_present = (*sp == '.');
    4001bdb0:	39400280 	ldrb	w0, [x20]
    4001bdb4:	7100b81f 	cmp	w0, #0x2e
    4001bdb8:	7941a3e0 	ldrh	w0, [sp, #208]
    4001bdbc:	1a9f17e1 	cset	w1, eq  // eq = none
    4001bdc0:	33170020 	bfi	w0, w1, #9, #1
    4001bdc4:	7901a3e0 	strh	w0, [sp, #208]
	if (!conv->prec_present) {
    4001bdc8:	54000121 	b.ne	4001bdec <cbvprintf+0x23c>  // b.any
	++sp;
    4001bdcc:	91000681 	add	x1, x20, #0x1
    4001bdd0:	f9004fe1 	str	x1, [sp, #152]
	if (*sp == '*') {
    4001bdd4:	39400681 	ldrb	w1, [x20, #1]
    4001bdd8:	7100a83f 	cmp	w1, #0x2a
    4001bddc:	54000601 	b.ne	4001be9c <cbvprintf+0x2ec>  // b.any
		return ++sp;
    4001bde0:	91000a94 	add	x20, x20, #0x2
		conv->prec_star = true;
    4001bde4:	32160000 	orr	w0, w0, #0x400
    4001bde8:	7901a3e0 	strh	w0, [sp, #208]
	switch (*sp) {
    4001bdec:	aa1403e1 	mov	x1, x20
    4001bdf0:	38401422 	ldrb	w2, [x1], #1
    4001bdf4:	7101b05f 	cmp	w2, #0x6c
    4001bdf8:	54000d80 	b.eq	4001bfa8 <cbvprintf+0x3f8>  // b.none
    4001bdfc:	54000708 	b.hi	4001bedc <cbvprintf+0x32c>  // b.pmore
    4001be00:	7101a05f 	cmp	w2, #0x68
    4001be04:	540007a0 	b.eq	4001bef8 <cbvprintf+0x348>  // b.none
    4001be08:	7101a85f 	cmp	w2, #0x6a
    4001be0c:	54000de0 	b.eq	4001bfc8 <cbvprintf+0x418>  // b.none
    4001be10:	7101305f 	cmp	w2, #0x4c
    4001be14:	54000e40 	b.eq	4001bfdc <cbvprintf+0x42c>  // b.none
		conv->length_mod = LENGTH_NONE;
    4001be18:	7941a3e0 	ldrh	w0, [sp, #208]
		break;
    4001be1c:	aa1403e1 	mov	x1, x20
		conv->length_mod = LENGTH_NONE;
    4001be20:	12116c00 	and	w0, w0, #0xffff87ff
    4001be24:	7901a3e0 	strh	w0, [sp, #208]
		break;
    4001be28:	1400003c 	b	4001bf18 <cbvprintf+0x368>
			conv->flag_plus = true;
    4001be2c:	321d0000 	orr	w0, w0, #0x8
    4001be30:	17ffffc3 	b	4001bd3c <cbvprintf+0x18c>
			conv->flag_space = true;
    4001be34:	321c0000 	orr	w0, w0, #0x10
    4001be38:	17ffffc1 	b	4001bd3c <cbvprintf+0x18c>
			conv->flag_hash = true;
    4001be3c:	321b0000 	orr	w0, w0, #0x20
    4001be40:	17ffffbf 	b	4001bd3c <cbvprintf+0x18c>
	size_t width = extract_decimal(&sp);
    4001be44:	910263e0 	add	x0, sp, #0x98
    4001be48:	97fffeea 	bl	4001b9f0 <extract_decimal>
	if (sp != wp) {
    4001be4c:	f9404fe2 	ldr	x2, [sp, #152]
    4001be50:	eb14005f 	cmp	x2, x20
    4001be54:	54fffac0 	b.eq	4001bdac <cbvprintf+0x1fc>  // b.none
		conv->width_present = true;
    4001be58:	7941a3e1 	ldrh	w1, [sp, #208]
		conv->width_value = width;
    4001be5c:	b900d7e0 	str	w0, [sp, #212]
		conv->width_present = true;
    4001be60:	32190021 	orr	w1, w1, #0x80
    4001be64:	7901a3e1 	strh	w1, [sp, #208]
		conv->unsupported |= ((conv->width_value < 0)
    4001be68:	f9406be1 	ldr	x1, [sp, #208]
    4001be6c:	53010421 	ubfx	w1, w1, #1, #1
				      || (width != (size_t)conv->width_value));
    4001be70:	37f80120 	tbnz	w0, #31, 4001be94 <cbvprintf+0x2e4>
    4001be74:	eb20c01f 	cmp	x0, w0, sxtw
    4001be78:	1a9f07e0 	cset	w0, ne  // ne = any
		conv->unsupported |= ((conv->width_value < 0)
    4001be7c:	2a000020 	orr	w0, w1, w0
    4001be80:	7941a3e1 	ldrh	w1, [sp, #208]
    4001be84:	aa0203f4 	mov	x20, x2
    4001be88:	331f0001 	bfi	w1, w0, #1, #1
    4001be8c:	7901a3e1 	strh	w1, [sp, #208]
    4001be90:	17ffffc7 	b	4001bdac <cbvprintf+0x1fc>
				      || (width != (size_t)conv->width_value));
    4001be94:	52800020 	mov	w0, #0x1                   	// #1
    4001be98:	17fffff9 	b	4001be7c <cbvprintf+0x2cc>
	size_t prec = extract_decimal(&sp);
    4001be9c:	910263e0 	add	x0, sp, #0x98
    4001bea0:	97fffed4 	bl	4001b9f0 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    4001bea4:	f9406be1 	ldr	x1, [sp, #208]
	conv->prec_value = prec;
    4001bea8:	b900dbe0 	str	w0, [sp, #216]
	conv->unsupported |= ((conv->prec_value < 0)
    4001beac:	53010421 	ubfx	w1, w1, #1, #1
			      || (prec != (size_t)conv->prec_value));
    4001beb0:	37f80120 	tbnz	w0, #31, 4001bed4 <cbvprintf+0x324>
    4001beb4:	eb20c01f 	cmp	x0, w0, sxtw
    4001beb8:	1a9f07e0 	cset	w0, ne  // ne = any
	conv->unsupported |= ((conv->prec_value < 0)
    4001bebc:	2a000020 	orr	w0, w1, w0
    4001bec0:	7941a3e1 	ldrh	w1, [sp, #208]
	return sp;
    4001bec4:	f9404ff4 	ldr	x20, [sp, #152]
	conv->unsupported |= ((conv->prec_value < 0)
    4001bec8:	331f0001 	bfi	w1, w0, #1, #1
    4001becc:	7901a3e1 	strh	w1, [sp, #208]
	return sp;
    4001bed0:	17ffffc7 	b	4001bdec <cbvprintf+0x23c>
			      || (prec != (size_t)conv->prec_value));
    4001bed4:	52800020 	mov	w0, #0x1                   	// #1
    4001bed8:	17fffff9 	b	4001bebc <cbvprintf+0x30c>
    4001bedc:	7941a3e0 	ldrh	w0, [sp, #208]
	switch (*sp) {
    4001bee0:	7101d05f 	cmp	w2, #0x74
    4001bee4:	54000780 	b.eq	4001bfd4 <cbvprintf+0x424>  // b.none
    4001bee8:	7101e85f 	cmp	w2, #0x7a
    4001beec:	54fff961 	b.ne	4001be18 <cbvprintf+0x268>  // b.any
		conv->length_mod = LENGTH_Z;
    4001bef0:	528000c2 	mov	w2, #0x6                   	// #6
    4001bef4:	1400002a 	b	4001bf9c <cbvprintf+0x3ec>
		if (*++sp == 'h') {
    4001bef8:	39400680 	ldrb	w0, [x20, #1]
    4001befc:	7101a01f 	cmp	w0, #0x68
    4001bf00:	7941a3e0 	ldrh	w0, [sp, #208]
    4001bf04:	540004a1 	b.ne	4001bf98 <cbvprintf+0x3e8>  // b.any
			conv->length_mod = LENGTH_HH;
    4001bf08:	52800021 	mov	w1, #0x1                   	// #1
			conv->length_mod = LENGTH_LL;
    4001bf0c:	33150c20 	bfi	w0, w1, #11, #4
			++sp;
    4001bf10:	91000a81 	add	x1, x20, #0x2
			conv->length_mod = LENGTH_LL;
    4001bf14:	7901a3e0 	strh	w0, [sp, #208]
	conv->specifier = *sp++;
    4001bf18:	aa0103f4 	mov	x20, x1
    4001bf1c:	38401680 	ldrb	w0, [x20], #1
    4001bf20:	39034fe0 	strb	w0, [sp, #211]
	switch (conv->specifier) {
    4001bf24:	7101e01f 	cmp	w0, #0x78
    4001bf28:	54000ce8 	b.hi	4001c0c4 <cbvprintf+0x514>  // b.pmore
    4001bf2c:	71015c1f 	cmp	w0, #0x57
    4001bf30:	54000628 	b.hi	4001bff4 <cbvprintf+0x444>  // b.pmore
    4001bf34:	7101041f 	cmp	w0, #0x41
    4001bf38:	540000a0 	b.eq	4001bf4c <cbvprintf+0x39c>  // b.none
    4001bf3c:	51011401 	sub	w1, w0, #0x45
    4001bf40:	12001c21 	and	w1, w1, #0xff
    4001bf44:	7100083f 	cmp	w1, #0x2
    4001bf48:	54000be8 	b.hi	4001c0c4 <cbvprintf+0x514>  // b.pmore
			|| (conv->specifier == 'A');
    4001bf4c:	121a7800 	and	w0, w0, #0xffffffdf
		conv->specifier_a = (conv->specifier == 'a')
    4001bf50:	784d13e1 	ldurh	w1, [sp, #209]
			|| (conv->specifier == 'A');
    4001bf54:	7101041f 	cmp	w0, #0x41
    4001bf58:	1a9f17e0 	cset	w0, eq  // eq = none
		conv->specifier_a = (conv->specifier == 'a')
    4001bf5c:	12156c21 	and	w1, w1, #0xfffff87f
    4001bf60:	53196000 	lsl	w0, w0, #7
    4001bf64:	32160000 	orr	w0, w0, #0x400
    4001bf68:	2a010000 	orr	w0, w0, w1
    4001bf6c:	780d13e0 	sturh	w0, [sp, #209]
		if (conv->specifier_a
    4001bf70:	79c1a3e1 	ldrsh	w1, [sp, #208]
    4001bf74:	7941a3e0 	ldrh	w0, [sp, #208]
    4001bf78:	37f80aa1 	tbnz	w1, #31, 4001c0cc <cbvprintf+0x51c>
		if (conv->length_mod == LENGTH_L) {
    4001bf7c:	12150c02 	and	w2, w0, #0x7800
    4001bf80:	52830001 	mov	w1, #0x1800                	// #6144
    4001bf84:	6b01005f 	cmp	w2, w1
    4001bf88:	54000741 	b.ne	4001c070 <cbvprintf+0x4c0>  // b.any
			conv->length_mod = LENGTH_NONE;
    4001bf8c:	12116c00 	and	w0, w0, #0xffff87ff
    4001bf90:	7901a3e0 	strh	w0, [sp, #208]
    4001bf94:	1400002c 	b	4001c044 <cbvprintf+0x494>
			conv->length_mod = LENGTH_H;
    4001bf98:	52800042 	mov	w2, #0x2                   	// #2
		conv->length_mod = LENGTH_T;
    4001bf9c:	33150c40 	bfi	w0, w2, #11, #4
		conv->unsupported = true;
    4001bfa0:	7901a3e0 	strh	w0, [sp, #208]
		break;
    4001bfa4:	17ffffdd 	b	4001bf18 <cbvprintf+0x368>
		if (*++sp == 'l') {
    4001bfa8:	39400680 	ldrb	w0, [x20, #1]
    4001bfac:	7101b01f 	cmp	w0, #0x6c
    4001bfb0:	7941a3e0 	ldrh	w0, [sp, #208]
    4001bfb4:	54000061 	b.ne	4001bfc0 <cbvprintf+0x410>  // b.any
			conv->length_mod = LENGTH_LL;
    4001bfb8:	52800081 	mov	w1, #0x4                   	// #4
    4001bfbc:	17ffffd4 	b	4001bf0c <cbvprintf+0x35c>
			conv->length_mod = LENGTH_L;
    4001bfc0:	52800062 	mov	w2, #0x3                   	// #3
    4001bfc4:	17fffff6 	b	4001bf9c <cbvprintf+0x3ec>
		conv->length_mod = LENGTH_J;
    4001bfc8:	7941a3e0 	ldrh	w0, [sp, #208]
    4001bfcc:	528000a2 	mov	w2, #0x5                   	// #5
    4001bfd0:	17fffff3 	b	4001bf9c <cbvprintf+0x3ec>
		conv->length_mod = LENGTH_T;
    4001bfd4:	528000e2 	mov	w2, #0x7                   	// #7
    4001bfd8:	17fffff1 	b	4001bf9c <cbvprintf+0x3ec>
		conv->unsupported = true;
    4001bfdc:	7941a3e0 	ldrh	w0, [sp, #208]
    4001bfe0:	128f0042 	mov	w2, #0xffff87fd            	// #-30723
    4001bfe4:	0a020000 	and	w0, w0, w2
    4001bfe8:	52880042 	mov	w2, #0x4002                	// #16386
    4001bfec:	2a020000 	orr	w0, w0, w2
    4001bff0:	17ffffec 	b	4001bfa0 <cbvprintf+0x3f0>
	switch (conv->specifier) {
    4001bff4:	51016001 	sub	w1, w0, #0x58
    4001bff8:	7100803f 	cmp	w1, #0x20
    4001bffc:	54000648 	b.hi	4001c0c4 <cbvprintf+0x514>  // b.pmore
    4001c000:	f9403fe2 	ldr	x2, [sp, #120]
    4001c004:	38614841 	ldrb	w1, [x2, w1, uxtw]
    4001c008:	10000062 	adr	x2, 4001c014 <cbvprintf+0x464>
    4001c00c:	8b218841 	add	x1, x2, w1, sxtb #2
    4001c010:	d61f0020 	br	x1
		conv->specifier_cat = SPECIFIER_SINT;
    4001c014:	39434be1 	ldrb	w1, [sp, #210]
    4001c018:	52800022 	mov	w2, #0x1                   	// #1
		conv->specifier_cat = SPECIFIER_UINT;
    4001c01c:	33000841 	bfxil	w1, w2, #0, #3
    4001c020:	39034be1 	strb	w1, [sp, #210]
		if (conv->length_mod == LENGTH_UPPER_L) {
    4001c024:	7941a3e1 	ldrh	w1, [sp, #208]
    4001c028:	12150c22 	and	w2, w1, #0x7800
    4001c02c:	7140105f 	cmp	w2, #0x4, lsl #12
    4001c030:	54000061 	b.ne	4001c03c <cbvprintf+0x48c>  // b.any
			conv->invalid = true;
    4001c034:	32000021 	orr	w1, w1, #0x1
    4001c038:	7901a3e1 	strh	w1, [sp, #208]
		if (conv->specifier == 'c') {
    4001c03c:	71018c1f 	cmp	w0, #0x63
    4001c040:	540003a0 	b.eq	4001c0b4 <cbvprintf+0x504>  // b.none
	bool unsupported = false;
    4001c044:	52800000 	mov	w0, #0x0                   	// #0
	conv->unsupported |= unsupported;
    4001c048:	f9406be1 	ldr	x1, [sp, #208]
    4001c04c:	d3410421 	ubfx	x1, x1, #1, #1
    4001c050:	2a010000 	orr	w0, w0, w1
    4001c054:	7941a3e1 	ldrh	w1, [sp, #208]
    4001c058:	331f0001 	bfi	w1, w0, #1, #1
    4001c05c:	7901a3e1 	strh	w1, [sp, #208]
	return sp;
    4001c060:	17fffefe 	b	4001bc58 <cbvprintf+0xa8>
		conv->specifier_cat = SPECIFIER_UINT;
    4001c064:	39434be1 	ldrb	w1, [sp, #210]
    4001c068:	52800042 	mov	w2, #0x2                   	// #2
    4001c06c:	17ffffec 	b	4001c01c <cbvprintf+0x46c>
		} else if ((conv->length_mod != LENGTH_NONE)
    4001c070:	7215081f 	tst	w0, #0x3800
    4001c074:	54fffe80 	b.eq	4001c044 <cbvprintf+0x494>  // b.none
		conv->invalid = true;
    4001c078:	32000000 	orr	w0, w0, #0x1
    4001c07c:	17ffffc5 	b	4001bf90 <cbvprintf+0x3e0>
		conv->specifier_cat = SPECIFIER_PTR;
    4001c080:	39434be0 	ldrb	w0, [sp, #210]
    4001c084:	52800061 	mov	w1, #0x3                   	// #3
    4001c088:	33000820 	bfxil	w0, w1, #0, #3
    4001c08c:	39034be0 	strb	w0, [sp, #210]
		if (conv->length_mod == LENGTH_UPPER_L) {
    4001c090:	7941a3e0 	ldrh	w0, [sp, #208]
    4001c094:	12150c00 	and	w0, w0, #0x7800
    4001c098:	7140101f 	cmp	w0, #0x4, lsl #12
    4001c09c:	1a9f17e0 	cset	w0, eq  // eq = none
    4001c0a0:	17ffffea 	b	4001c048 <cbvprintf+0x498>
		conv->specifier_cat = SPECIFIER_PTR;
    4001c0a4:	39434be0 	ldrb	w0, [sp, #210]
    4001c0a8:	52800061 	mov	w1, #0x3                   	// #3
    4001c0ac:	33000820 	bfxil	w0, w1, #0, #3
    4001c0b0:	39034be0 	strb	w0, [sp, #210]
		if (conv->length_mod != LENGTH_NONE) {
    4001c0b4:	7941a3e0 	ldrh	w0, [sp, #208]
    4001c0b8:	72150c1f 	tst	w0, #0x7800
    4001c0bc:	1a9f07e0 	cset	w0, ne  // ne = any
    4001c0c0:	17ffffe2 	b	4001c048 <cbvprintf+0x498>
		conv->invalid = true;
    4001c0c4:	7941a3e0 	ldrh	w0, [sp, #208]
    4001c0c8:	17ffffec 	b	4001c078 <cbvprintf+0x4c8>
			unsupported = true;
    4001c0cc:	52800020 	mov	w0, #0x1                   	// #1
    4001c0d0:	17ffffde 	b	4001c048 <cbvprintf+0x498>
			width = va_arg(ap, int);
    4001c0d4:	11002361 	add	w1, w27, #0x8
    4001c0d8:	7100003f 	cmp	w1, #0x0
    4001c0dc:	540000cd 	b.le	4001c0f4 <cbvprintf+0x544>
    4001c0e0:	91002f82 	add	x2, x28, #0xb
    4001c0e4:	aa1c03e0 	mov	x0, x28
    4001c0e8:	2a0103fb 	mov	w27, w1
    4001c0ec:	927df05c 	and	x28, x2, #0xfffffffffffffff8
    4001c0f0:	17fffee0 	b	4001bc70 <cbvprintf+0xc0>
    4001c0f4:	8b3bc300 	add	x0, x24, w27, sxtw
    4001c0f8:	2a0103fb 	mov	w27, w1
    4001c0fc:	17fffedd 	b	4001bc70 <cbvprintf+0xc0>
			width = conv->width_value;
    4001c100:	b940d7f7 	ldr	w23, [sp, #212]
    4001c104:	f279001f 	tst	x0, #0x80
    4001c108:	5a9f12f7 	csinv	w23, w23, wzr, ne  // ne = any
    4001c10c:	17fffedf 	b	4001bc88 <cbvprintf+0xd8>
			int arg = va_arg(ap, int);
    4001c110:	11002361 	add	w1, w27, #0x8
    4001c114:	7100003f 	cmp	w1, #0x0
    4001c118:	540000cd 	b.le	4001c130 <cbvprintf+0x580>
    4001c11c:	91002f82 	add	x2, x28, #0xb
    4001c120:	aa1c03e0 	mov	x0, x28
    4001c124:	2a0103fb 	mov	w27, w1
    4001c128:	927df05c 	and	x28, x2, #0xfffffffffffffff8
    4001c12c:	17fffedd 	b	4001bca0 <cbvprintf+0xf0>
    4001c130:	8b3bc300 	add	x0, x24, w27, sxtw
    4001c134:	2a0103fb 	mov	w27, w1
    4001c138:	17fffeda 	b	4001bca0 <cbvprintf+0xf0>
			precision = conv->prec_value;
    4001c13c:	b940dbe9 	ldr	w9, [sp, #216]
    4001c140:	f277001f 	tst	x0, #0x200
    4001c144:	5a9f1129 	csinv	w9, w9, wzr, ne  // ne = any
    4001c148:	17fffedc 	b	4001bcb8 <cbvprintf+0x108>
				value->sint = va_arg(ap, int);
    4001c14c:	37f8019b 	tbnz	w27, #31, 4001c17c <cbvprintf+0x5cc>
    4001c150:	91002f80 	add	x0, x28, #0xb
    4001c154:	2a1b03e3 	mov	w3, w27
    4001c158:	927df000 	and	x0, x0, #0xfffffffffffffff8
    4001c15c:	b9800384 	ldrsw	x4, [x28]
				value->sint =
    4001c160:	f90063e4 	str	x4, [sp, #192]
				break;
    4001c164:	2a0303fb 	mov	w27, w3
    4001c168:	aa0003fc 	mov	x28, x0
			if (length_mod == LENGTH_HH) {
    4001c16c:	7100045f 	cmp	w2, #0x1
    4001c170:	54000361 	b.ne	4001c1dc <cbvprintf+0x62c>  // b.any
				value->uint = (unsigned char)value->uint;
    4001c174:	394303e0 	ldrb	w0, [sp, #192]
    4001c178:	1400001c 	b	4001c1e8 <cbvprintf+0x638>
				value->sint = va_arg(ap, int);
    4001c17c:	11002363 	add	w3, w27, #0x8
    4001c180:	7100007f 	cmp	w3, #0x0
    4001c184:	5400008d 	b.le	4001c194 <cbvprintf+0x5e4>
    4001c188:	91002f80 	add	x0, x28, #0xb
    4001c18c:	927df000 	and	x0, x0, #0xfffffffffffffff8
    4001c190:	17fffff3 	b	4001c15c <cbvprintf+0x5ac>
    4001c194:	aa1c03e0 	mov	x0, x28
    4001c198:	8b3bc31c 	add	x28, x24, w27, sxtw
    4001c19c:	17fffff0 	b	4001c15c <cbvprintf+0x5ac>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    4001c1a0:	37f800db 	tbnz	w27, #31, 4001c1b8 <cbvprintf+0x608>
    4001c1a4:	91003f80 	add	x0, x28, #0xf
    4001c1a8:	2a1b03e3 	mov	w3, w27
    4001c1ac:	927df000 	and	x0, x0, #0xfffffffffffffff8
				value->sint =
    4001c1b0:	f9400384 	ldr	x4, [x28]
    4001c1b4:	17ffffeb 	b	4001c160 <cbvprintf+0x5b0>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    4001c1b8:	11002363 	add	w3, w27, #0x8
    4001c1bc:	7100007f 	cmp	w3, #0x0
    4001c1c0:	5400008d 	b.le	4001c1d0 <cbvprintf+0x620>
    4001c1c4:	91003f80 	add	x0, x28, #0xf
    4001c1c8:	927df000 	and	x0, x0, #0xfffffffffffffff8
    4001c1cc:	17fffff9 	b	4001c1b0 <cbvprintf+0x600>
    4001c1d0:	aa1c03e0 	mov	x0, x28
    4001c1d4:	8b3bc31c 	add	x28, x24, w27, sxtw
    4001c1d8:	17fffff6 	b	4001c1b0 <cbvprintf+0x600>
			} else if (length_mod == LENGTH_H) {
    4001c1dc:	7100085f 	cmp	w2, #0x2
    4001c1e0:	54000061 	b.ne	4001c1ec <cbvprintf+0x63c>  // b.any
				value->sint = (short)value->sint;
    4001c1e4:	798183e0 	ldrsh	x0, [sp, #192]
				value->uint = (unsigned short)value->uint;
    4001c1e8:	f90063e0 	str	x0, [sp, #192]
		if (conv->invalid || conv->unsupported) {
    4001c1ec:	b940d3e0 	ldr	w0, [sp, #208]
    4001c1f0:	f240041f 	tst	x0, #0x3
    4001c1f4:	540011e0 	b.eq	4001c430 <cbvprintf+0x880>  // b.none
			OUTS(sp, fp);
    4001c1f8:	aa1403e3 	mov	x3, x20
    4001c1fc:	aa0703e2 	mov	x2, x7
    4001c200:	aa1603e1 	mov	x1, x22
    4001c204:	aa1503e0 	mov	x0, x21
    4001c208:	97fffe4e 	bl	4001bb40 <outs>
    4001c20c:	37f85200 	tbnz	w0, #31, 4001cc4c <cbvprintf+0x109c>
    4001c210:	8b20c273 	add	x19, x19, w0, sxtw
			while (pad_len-- > 0) {
    4001c214:	aa1403e7 	mov	x7, x20
    4001c218:	17fffe7d 	b	4001bc0c <cbvprintf+0x5c>
		} else if (specifier_cat == SPECIFIER_UINT) {
    4001c21c:	7100081f 	cmp	w0, #0x2
    4001c220:	54000881 	b.ne	4001c330 <cbvprintf+0x780>  // b.any
			switch (length_mod) {
    4001c224:	51000c43 	sub	w3, w2, #0x3
    4001c228:	7100107f 	cmp	w3, #0x4
    4001c22c:	540000e8 	b.hi	4001c248 <cbvprintf+0x698>  // b.pmore
    4001c230:	f0000020 	adrp	x0, 40023000 <fpi.1>
    4001c234:	910a2000 	add	x0, x0, #0x288
    4001c238:	38634800 	ldrb	w0, [x0, w3, uxtw]
    4001c23c:	10000063 	adr	x3, 4001c248 <cbvprintf+0x698>
    4001c240:	8b208860 	add	x0, x3, w0, sxtb #2
    4001c244:	d61f0000 	br	x0
				value->uint = va_arg(ap, unsigned int);
    4001c248:	37f801db 	tbnz	w27, #31, 4001c280 <cbvprintf+0x6d0>
    4001c24c:	91002f80 	add	x0, x28, #0xb
    4001c250:	2a1b03e3 	mov	w3, w27
    4001c254:	927df000 	and	x0, x0, #0xfffffffffffffff8
    4001c258:	b9400384 	ldr	w4, [x28]
				value->uint =
    4001c25c:	f90063e4 	str	x4, [sp, #192]
				break;
    4001c260:	2a0303fb 	mov	w27, w3
    4001c264:	aa0003fc 	mov	x28, x0
			if (length_mod == LENGTH_HH) {
    4001c268:	7100045f 	cmp	w2, #0x1
    4001c26c:	54fff840 	b.eq	4001c174 <cbvprintf+0x5c4>  // b.none
			} else if (length_mod == LENGTH_H) {
    4001c270:	7100085f 	cmp	w2, #0x2
    4001c274:	54fffbc1 	b.ne	4001c1ec <cbvprintf+0x63c>  // b.any
				value->uint = (unsigned short)value->uint;
    4001c278:	794183e0 	ldrh	w0, [sp, #192]
    4001c27c:	17ffffdb 	b	4001c1e8 <cbvprintf+0x638>
				value->uint = va_arg(ap, unsigned int);
    4001c280:	11002363 	add	w3, w27, #0x8
    4001c284:	7100007f 	cmp	w3, #0x0
    4001c288:	5400008d 	b.le	4001c298 <cbvprintf+0x6e8>
    4001c28c:	91002f80 	add	x0, x28, #0xb
    4001c290:	927df000 	and	x0, x0, #0xfffffffffffffff8
    4001c294:	17fffff1 	b	4001c258 <cbvprintf+0x6a8>
    4001c298:	aa1c03e0 	mov	x0, x28
    4001c29c:	8b3bc31c 	add	x28, x24, w27, sxtw
    4001c2a0:	17ffffee 	b	4001c258 <cbvprintf+0x6a8>
				if ((!WCHAR_IS_SIGNED)
    4001c2a4:	39434fe0 	ldrb	w0, [sp, #211]
    4001c2a8:	71018c1f 	cmp	w0, #0x63
    4001c2ac:	54000a41 	b.ne	4001c3f4 <cbvprintf+0x844>  // b.any
					value->uint = (wchar_t)va_arg(ap,
    4001c2b0:	37f8011b 	tbnz	w27, #31, 4001c2d0 <cbvprintf+0x720>
    4001c2b4:	91002f80 	add	x0, x28, #0xb
    4001c2b8:	2a1b03e3 	mov	w3, w27
    4001c2bc:	927df000 	and	x0, x0, #0xfffffffffffffff8
    4001c2c0:	b9400384 	ldr	w4, [x28]
			value->ptr = va_arg(ap, void *);
    4001c2c4:	2a0303fb 	mov	w27, w3
    4001c2c8:	f90063e4 	str	x4, [sp, #192]
    4001c2cc:	1400003a 	b	4001c3b4 <cbvprintf+0x804>
					value->uint = (wchar_t)va_arg(ap,
    4001c2d0:	11002363 	add	w3, w27, #0x8
    4001c2d4:	7100007f 	cmp	w3, #0x0
    4001c2d8:	5400008d 	b.le	4001c2e8 <cbvprintf+0x738>
    4001c2dc:	91002f80 	add	x0, x28, #0xb
    4001c2e0:	927df000 	and	x0, x0, #0xfffffffffffffff8
    4001c2e4:	17fffff7 	b	4001c2c0 <cbvprintf+0x710>
    4001c2e8:	aa1c03e0 	mov	x0, x28
    4001c2ec:	8b3bc31c 	add	x28, x24, w27, sxtw
    4001c2f0:	17fffff4 	b	4001c2c0 <cbvprintf+0x710>
					(uint_value_type)va_arg(ap, size_t);
    4001c2f4:	37f800db 	tbnz	w27, #31, 4001c30c <cbvprintf+0x75c>
    4001c2f8:	91003f80 	add	x0, x28, #0xf
    4001c2fc:	2a1b03e3 	mov	w3, w27
    4001c300:	927df000 	and	x0, x0, #0xfffffffffffffff8
				value->uint =
    4001c304:	f9400384 	ldr	x4, [x28]
    4001c308:	17ffffd5 	b	4001c25c <cbvprintf+0x6ac>
					(uint_value_type)va_arg(ap, size_t);
    4001c30c:	11002363 	add	w3, w27, #0x8
    4001c310:	7100007f 	cmp	w3, #0x0
    4001c314:	5400008d 	b.le	4001c324 <cbvprintf+0x774>
    4001c318:	91003f80 	add	x0, x28, #0xf
    4001c31c:	927df000 	and	x0, x0, #0xfffffffffffffff8
    4001c320:	17fffff9 	b	4001c304 <cbvprintf+0x754>
    4001c324:	aa1c03e0 	mov	x0, x28
    4001c328:	8b3bc31c 	add	x28, x24, w27, sxtw
    4001c32c:	17fffff6 	b	4001c304 <cbvprintf+0x754>
		} else if (specifier_cat == SPECIFIER_FP) {
    4001c330:	7100101f 	cmp	w0, #0x4
    4001c334:	540005c1 	b.ne	4001c3ec <cbvprintf+0x83c>  // b.any
				value->ldbl = va_arg(ap, long double);
    4001c338:	b9408be0 	ldr	w0, [sp, #136]
			if (length_mod == LENGTH_UPPER_L) {
    4001c33c:	7100205f 	cmp	w2, #0x8
    4001c340:	540002c1 	b.ne	4001c398 <cbvprintf+0x7e8>  // b.any
				value->ldbl = va_arg(ap, long double);
    4001c344:	37f80120 	tbnz	w0, #31, 4001c368 <cbvprintf+0x7b8>
    4001c348:	91003f80 	add	x0, x28, #0xf
    4001c34c:	b9408be3 	ldr	w3, [sp, #136]
    4001c350:	927cec00 	and	x0, x0, #0xfffffffffffffff0
    4001c354:	9100401c 	add	x28, x0, #0x10
    4001c358:	3dc00000 	ldr	q0, [x0]
    4001c35c:	b9008be3 	str	w3, [sp, #136]
    4001c360:	3d8033e0 	str	q0, [sp, #192]
    4001c364:	17ffffa2 	b	4001c1ec <cbvprintf+0x63c>
    4001c368:	b9408be0 	ldr	w0, [sp, #136]
    4001c36c:	11004003 	add	w3, w0, #0x10
    4001c370:	7100007f 	cmp	w3, #0x0
    4001c374:	540000ad 	b.le	4001c388 <cbvprintf+0x7d8>
    4001c378:	91003f80 	add	x0, x28, #0xf
    4001c37c:	927cec00 	and	x0, x0, #0xfffffffffffffff0
    4001c380:	9100401c 	add	x28, x0, #0x10
    4001c384:	17fffff5 	b	4001c358 <cbvprintf+0x7a8>
    4001c388:	f94037e4 	ldr	x4, [sp, #104]
    4001c38c:	b9408be0 	ldr	w0, [sp, #136]
    4001c390:	8b20c080 	add	x0, x4, w0, sxtw
    4001c394:	17fffff1 	b	4001c358 <cbvprintf+0x7a8>
				value->dbl = va_arg(ap, double);
    4001c398:	37f80120 	tbnz	w0, #31, 4001c3bc <cbvprintf+0x80c>
    4001c39c:	91003f80 	add	x0, x28, #0xf
    4001c3a0:	b9408be3 	ldr	w3, [sp, #136]
    4001c3a4:	927df000 	and	x0, x0, #0xfffffffffffffff8
    4001c3a8:	fd400380 	ldr	d0, [x28]
    4001c3ac:	b9008be3 	str	w3, [sp, #136]
    4001c3b0:	fd0063e0 	str	d0, [sp, #192]
			value->ptr = va_arg(ap, void *);
    4001c3b4:	aa0003fc 	mov	x28, x0
    4001c3b8:	17ffff8d 	b	4001c1ec <cbvprintf+0x63c>
				value->dbl = va_arg(ap, double);
    4001c3bc:	b9408be0 	ldr	w0, [sp, #136]
    4001c3c0:	11004003 	add	w3, w0, #0x10
    4001c3c4:	7100007f 	cmp	w3, #0x0
    4001c3c8:	5400008d 	b.le	4001c3d8 <cbvprintf+0x828>
    4001c3cc:	91003f80 	add	x0, x28, #0xf
    4001c3d0:	927df000 	and	x0, x0, #0xfffffffffffffff8
    4001c3d4:	17fffff5 	b	4001c3a8 <cbvprintf+0x7f8>
    4001c3d8:	f94037e5 	ldr	x5, [sp, #104]
    4001c3dc:	aa1c03e0 	mov	x0, x28
    4001c3e0:	b9408be4 	ldr	w4, [sp, #136]
    4001c3e4:	8b24c0bc 	add	x28, x5, w4, sxtw
    4001c3e8:	17fffff0 	b	4001c3a8 <cbvprintf+0x7f8>
		} else if (specifier_cat == SPECIFIER_PTR) {
    4001c3ec:	71000c1f 	cmp	w0, #0x3
    4001c3f0:	54ffefe1 	b.ne	4001c1ec <cbvprintf+0x63c>  // b.any
			value->ptr = va_arg(ap, void *);
    4001c3f4:	37f800db 	tbnz	w27, #31, 4001c40c <cbvprintf+0x85c>
    4001c3f8:	91003f80 	add	x0, x28, #0xf
    4001c3fc:	2a1b03e3 	mov	w3, w27
    4001c400:	927df000 	and	x0, x0, #0xfffffffffffffff8
    4001c404:	f9400384 	ldr	x4, [x28]
    4001c408:	17ffffaf 	b	4001c2c4 <cbvprintf+0x714>
    4001c40c:	11002363 	add	w3, w27, #0x8
    4001c410:	7100007f 	cmp	w3, #0x0
    4001c414:	5400008d 	b.le	4001c424 <cbvprintf+0x874>
    4001c418:	91003f80 	add	x0, x28, #0xf
    4001c41c:	927df000 	and	x0, x0, #0xfffffffffffffff8
    4001c420:	17fffff9 	b	4001c404 <cbvprintf+0x854>
    4001c424:	aa1c03e0 	mov	x0, x28
    4001c428:	8b3bc31c 	add	x28, x24, w27, sxtw
    4001c42c:	17fffff6 	b	4001c404 <cbvprintf+0x854>
		switch (conv->specifier) {
    4001c430:	39434fe7 	ldrb	w7, [sp, #211]
    4001c434:	7101e0ff 	cmp	w7, #0x78
    4001c438:	54ffeee8 	b.hi	4001c214 <cbvprintf+0x664>  // b.pmore
    4001c43c:	71015cff 	cmp	w7, #0x57
    4001c440:	54000508 	b.hi	4001c4e0 <cbvprintf+0x930>  // b.pmore
    4001c444:	710094ff 	cmp	w7, #0x25
    4001c448:	540005e0 	b.eq	4001c504 <cbvprintf+0x954>  // b.none
    4001c44c:	710090ff 	cmp	w7, #0x24
    4001c450:	54ffee29 	b.ls	4001c214 <cbvprintf+0x664>  // b.plast
    4001c454:	710104ff 	cmp	w7, #0x41
    4001c458:	540000a0 	b.eq	4001c46c <cbvprintf+0x8bc>  // b.none
    4001c45c:	510114e0 	sub	w0, w7, #0x45
    4001c460:	12001c00 	and	w0, w0, #0xff
    4001c464:	7100081f 	cmp	w0, #0x2
    4001c468:	54ffed68 	b.hi	4001c214 <cbvprintf+0x664>  // b.pmore
	} u = {
    4001c46c:	f94063e2 	ldr	x2, [sp, #192]
	if ((u.u64 & SIGN_MASK) != 0U) {
    4001c470:	b7f812e2 	tbnz	x2, #63, 4001c6cc <cbvprintf+0xb1c>
	} else if (conv->flag_plus) {
    4001c474:	7941a3e6 	ldrh	w6, [sp, #208]
    4001c478:	371812e6 	tbnz	w6, #3, 4001c6d4 <cbvprintf+0xb24>
		*sign = ' ';
    4001c47c:	d34410c6 	ubfx	x6, x6, #4, #1
    4001c480:	531b68c6 	lsl	w6, w6, #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    4001c484:	d374f840 	ubfx	x0, x2, #52, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    4001c488:	9240cc42 	and	x2, x2, #0xfffffffffffff
    4001c48c:	f9004fe2 	str	x2, [sp, #152]
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    4001c490:	711ffc1f 	cmp	w0, #0x7ff
    4001c494:	540013e1 	b.ne	4001c710 <cbvprintf+0xb60>  // b.any
			if (isupper((int)c)) {
    4001c498:	110004e7 	add	w7, w7, #0x1
    4001c49c:	d0000020 	adrp	x0, 40022000 <__pow_log_data+0xcc8>
    4001c4a0:	912fc000 	add	x0, x0, #0xbf0
    4001c4a4:	92401ce7 	and	x7, x7, #0xff
    4001c4a8:	386068e0 	ldrb	w0, [x7, x0]
    4001c4ac:	12000400 	and	w0, w0, #0x3
    4001c4b0:	7100041f 	cmp	w0, #0x1
		if (fract == 0) {
    4001c4b4:	b50011c2 	cbnz	x2, 4001c6ec <cbvprintf+0xb3c>
			if (isupper((int)c)) {
    4001c4b8:	54001121 	b.ne	4001c6dc <cbvprintf+0xb2c>  // b.any
				*buf++ = 'I';
    4001c4bc:	5289c920 	mov	w0, #0x4e49                	// #20041
    4001c4c0:	790143e0 	strh	w0, [sp, #160]
				*buf++ = 'F';
    4001c4c4:	528008c0 	mov	w0, #0x46                  	// #70
				*buf++ = 'n';
    4001c4c8:	39028be0 	strb	w0, [sp, #162]
		*bpe = buf;
    4001c4cc:	91028ff9 	add	x25, sp, #0xa3
		conv->flag_zero = false;
    4001c4d0:	7941a3e0 	ldrh	w0, [sp, #208]
    4001c4d4:	12197800 	and	w0, w0, #0xffffffbf
    4001c4d8:	7901a3e0 	strh	w0, [sp, #208]
		return bps;
    4001c4dc:	1400001d 	b	4001c550 <cbvprintf+0x9a0>
		switch (conv->specifier) {
    4001c4e0:	510160e3 	sub	w3, w7, #0x58
    4001c4e4:	7100807f 	cmp	w3, #0x20
    4001c4e8:	54ffe968 	b.hi	4001c214 <cbvprintf+0x664>  // b.pmore
    4001c4ec:	f0000020 	adrp	x0, 40023000 <fpi.1>
    4001c4f0:	910a4000 	add	x0, x0, #0x290
    4001c4f4:	78635800 	ldrh	w0, [x0, w3, uxtw #1]
    4001c4f8:	10000063 	adr	x3, 4001c504 <cbvprintf+0x954>
    4001c4fc:	8b20a860 	add	x0, x3, w0, sxth #2
    4001c500:	d61f0000 	br	x0
			OUTC('%');
    4001c504:	aa1603e1 	mov	x1, x22
    4001c508:	2a0703e0 	mov	w0, w7
    4001c50c:	17fffdc8 	b	4001bc2c <cbvprintf+0x7c>
			bps = (const char *)value->ptr;
    4001c510:	f94063fa 	ldr	x26, [sp, #192]
			if (precision >= 0) {
    4001c514:	37f80109 	tbnz	w9, #31, 4001c534 <cbvprintf+0x984>
				len = strnlen(bps, precision);
    4001c518:	93407d21 	sxtw	x1, w9
    4001c51c:	aa1a03e0 	mov	x0, x26
    4001c520:	97ff93e1 	bl	400014a4 <strnlen>
			bpe = bps + len;
    4001c524:	8b000359 	add	x25, x26, x0
		char sign = 0;
    4001c528:	52800006 	mov	w6, #0x0                   	// #0
		if (bps == NULL) {
    4001c52c:	b500015a 	cbnz	x26, 4001c554 <cbvprintf+0x9a4>
    4001c530:	17ffff39 	b	4001c214 <cbvprintf+0x664>
				len = strlen(bps);
    4001c534:	aa1a03e0 	mov	x0, x26
    4001c538:	97ff9382 	bl	40001340 <strlen>
    4001c53c:	17fffffa 	b	4001c524 <cbvprintf+0x974>
			bpe = buf + 1;
    4001c540:	910287f9 	add	x25, sp, #0xa1
		char sign = 0;
    4001c544:	52800006 	mov	w6, #0x0                   	// #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    4001c548:	f94063e0 	ldr	x0, [sp, #192]
    4001c54c:	390283e0 	strb	w0, [sp, #160]
				bps = encode_float(value->dbl, conv, precision,
    4001c550:	910283fa 	add	x26, sp, #0xa0
		size_t nj_len = (bpe - bps);
    4001c554:	cb1a0320 	sub	x0, x25, x26
		if (sign != 0) {
    4001c558:	34000046 	cbz	w6, 4001c560 <cbvprintf+0x9b0>
			nj_len += 1U;
    4001c55c:	91000400 	add	x0, x0, #0x1
		if (conv->altform_0c) {
    4001c560:	39434be7 	ldrb	w7, [sp, #210]
    4001c564:	36202b87 	tbz	w7, #4, 4001cad4 <cbvprintf+0xf24>
			nj_len += 2U;
    4001c568:	91000800 	add	x0, x0, #0x2
		nj_len += conv->pad0_value;
    4001c56c:	b980d7e1 	ldrsw	x1, [sp, #212]
    4001c570:	8b000020 	add	x0, x1, x0
		if (conv->pad_fp) {
    4001c574:	36300067 	tbz	w7, #6, 4001c580 <cbvprintf+0x9d0>
			nj_len += conv->pad0_pre_exp;
    4001c578:	b980dbe1 	ldrsw	x1, [sp, #216]
    4001c57c:	8b010000 	add	x0, x0, x1
		if (width > 0) {
    4001c580:	710002ff 	cmp	w23, #0x0
    4001c584:	54002c8d 	b.le	4001cb14 <cbvprintf+0xf64>
			width -= (int)nj_len;
    4001c588:	4b0002f7 	sub	w23, w23, w0
			if (!conv->flag_dash) {
    4001c58c:	f9406be0 	ldr	x0, [sp, #208]
    4001c590:	721e001f 	tst	w0, #0x4
    4001c594:	54002c01 	b.ne	4001cb14 <cbvprintf+0xf64>  // b.any
				if (conv->flag_zero) {
    4001c598:	7941a3e0 	ldrh	w0, [sp, #208]
    4001c59c:	363030a0 	tbz	w0, #6, 4001cbb0 <cbvprintf+0x1000>
					if (sign != 0) {
    4001c5a0:	340000e6 	cbz	w6, 4001c5bc <cbvprintf+0xa0c>
						OUTC(sign);
    4001c5a4:	aa1603e1 	mov	x1, x22
    4001c5a8:	2a0603e0 	mov	w0, w6
    4001c5ac:	d63f02a0 	blr	x21
    4001c5b0:	37f834e0 	tbnz	w0, #31, 4001cc4c <cbvprintf+0x109c>
    4001c5b4:	91000673 	add	x19, x19, #0x1
						sign = 0;
    4001c5b8:	52800006 	mov	w6, #0x0                   	// #0
					pad = '0';
    4001c5bc:	52800607 	mov	w7, #0x30                  	// #48
    4001c5c0:	1400017d 	b	4001cbb4 <cbvprintf+0x1004>
			if (conv->flag_plus) {
    4001c5c4:	7941a3e6 	ldrh	w6, [sp, #208]
    4001c5c8:	37180386 	tbnz	w6, #3, 4001c638 <cbvprintf+0xa88>
				sign = ' ';
    4001c5cc:	d34410c6 	ubfx	x6, x6, #4, #1
    4001c5d0:	531b68c6 	lsl	w6, w6, #5
			sint = value->sint;
    4001c5d4:	f94063e0 	ldr	x0, [sp, #192]
			if (sint < 0) {
    4001c5d8:	b6f80080 	tbz	x0, #63, 4001c5e8 <cbvprintf+0xa38>
				value->uint = (uint_value_type)-sint;
    4001c5dc:	cb0003e0 	neg	x0, x0
				sign = '-';
    4001c5e0:	528005a6 	mov	w6, #0x2d                  	// #45
				value->uint = (uint_value_type)-sint;
    4001c5e4:	f90063e0 	str	x0, [sp, #192]
			bps = encode_uint(value->uint, conv, buf, bpe);
    4001c5e8:	f94063e0 	ldr	x0, [sp, #192]
    4001c5ec:	9102e7e3 	add	x3, sp, #0xb9
    4001c5f0:	910283e2 	add	x2, sp, #0xa0
    4001c5f4:	910343e1 	add	x1, sp, #0xd0
    4001c5f8:	b90083e6 	str	w6, [sp, #128]
    4001c5fc:	97fffd1c 	bl	4001ba6c <encode_uint>
    4001c600:	aa0003fa 	mov	x26, x0
    4001c604:	b94083e6 	ldr	w6, [sp, #128]
			if (precision >= 0) {
    4001c608:	9102e7e3 	add	x3, sp, #0xb9
    4001c60c:	37f80129 	tbnz	w9, #31, 4001c630 <cbvprintf+0xa80>
				conv->flag_zero = false;
    4001c610:	7941a3e1 	ldrh	w1, [sp, #208]
				size_t len = bpe - bps;
    4001c614:	cb1a0060 	sub	x0, x3, x26
				if (len < (size_t)precision) {
    4001c618:	eb29c01f 	cmp	x0, w9, sxtw
				conv->flag_zero = false;
    4001c61c:	12197821 	and	w1, w1, #0xffffffbf
    4001c620:	7901a3e1 	strh	w1, [sp, #208]
				if (len < (size_t)precision) {
    4001c624:	54000062 	b.cs	4001c630 <cbvprintf+0xa80>  // b.hs, b.nlast
					conv->pad0_value = precision - (int)len;
    4001c628:	4b000120 	sub	w0, w9, w0
    4001c62c:	b900d7e0 	str	w0, [sp, #212]
		const char *bpe = buf + sizeof(buf);
    4001c630:	aa0303f9 	mov	x25, x3
    4001c634:	17ffffbe 	b	4001c52c <cbvprintf+0x97c>
				sign = '+';
    4001c638:	52800566 	mov	w6, #0x2b                  	// #43
    4001c63c:	17ffffe6 	b	4001c5d4 <cbvprintf+0xa24>
		switch (conv->specifier) {
    4001c640:	52800006 	mov	w6, #0x0                   	// #0
    4001c644:	17ffffe9 	b	4001c5e8 <cbvprintf+0xa38>
			if (value->ptr != NULL) {
    4001c648:	f94063e0 	ldr	x0, [sp, #192]
    4001c64c:	b4002380 	cbz	x0, 4001cabc <cbvprintf+0xf0c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    4001c650:	910343e1 	add	x1, sp, #0xd0
    4001c654:	9102e7e3 	add	x3, sp, #0xb9
    4001c658:	910283e2 	add	x2, sp, #0xa0
    4001c65c:	97fffd04 	bl	4001ba6c <encode_uint>
    4001c660:	aa0003fa 	mov	x26, x0
				conv->altform_0c = true;
    4001c664:	7941a7e0 	ldrh	w0, [sp, #210]
    4001c668:	52801de1 	mov	w1, #0xef                  	// #239
		char sign = 0;
    4001c66c:	52800006 	mov	w6, #0x0                   	// #0
				conv->altform_0c = true;
    4001c670:	0a010000 	and	w0, w0, w1
    4001c674:	528f0201 	mov	w1, #0x7810                	// #30736
    4001c678:	2a010000 	orr	w0, w0, w1
    4001c67c:	7901a7e0 	strh	w0, [sp, #210]
				goto prec_int_pad0;
    4001c680:	17ffffe2 	b	4001c608 <cbvprintf+0xa58>
				store_count(conv, value->ptr, count);
    4001c684:	93407e60 	sxtw	x0, w19
	switch ((enum length_mod_enum)conv->length_mod) {
    4001c688:	71001c5f 	cmp	w2, #0x7
				store_count(conv, value->ptr, count);
    4001c68c:	f94063e1 	ldr	x1, [sp, #192]
	switch ((enum length_mod_enum)conv->length_mod) {
    4001c690:	54ffdc28 	b.hi	4001c214 <cbvprintf+0x664>  // b.pmore
    4001c694:	f0000023 	adrp	x3, 40023000 <fpi.1>
    4001c698:	910b5063 	add	x3, x3, #0x2d4
    4001c69c:	38624862 	ldrb	w2, [x3, w2, uxtw]
    4001c6a0:	10000063 	adr	x3, 4001c6ac <cbvprintf+0xafc>
    4001c6a4:	8b228862 	add	x2, x3, w2, sxtb #2
    4001c6a8:	d61f0040 	br	x2
		*(int *)dp = count;
    4001c6ac:	b9000020 	str	w0, [x1]
		break;
    4001c6b0:	17fffed9 	b	4001c214 <cbvprintf+0x664>
		*(signed char *)dp = (signed char)count;
    4001c6b4:	39000033 	strb	w19, [x1]
		break;
    4001c6b8:	17fffed7 	b	4001c214 <cbvprintf+0x664>
		*(short *)dp = (short)count;
    4001c6bc:	79000033 	strh	w19, [x1]
		break;
    4001c6c0:	17fffed5 	b	4001c214 <cbvprintf+0x664>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    4001c6c4:	f9000020 	str	x0, [x1]
		break;
    4001c6c8:	17fffed3 	b	4001c214 <cbvprintf+0x664>
		*sign = '-';
    4001c6cc:	528005a6 	mov	w6, #0x2d                  	// #45
    4001c6d0:	17ffff6d 	b	4001c484 <cbvprintf+0x8d4>
		*sign = '+';
    4001c6d4:	52800566 	mov	w6, #0x2b                  	// #43
    4001c6d8:	17ffff6b 	b	4001c484 <cbvprintf+0x8d4>
				*buf++ = 'i';
    4001c6dc:	528dcd20 	mov	w0, #0x6e69                	// #28265
    4001c6e0:	790143e0 	strh	w0, [sp, #160]
				*buf++ = 'f';
    4001c6e4:	52800cc0 	mov	w0, #0x66                  	// #102
    4001c6e8:	17ffff78 	b	4001c4c8 <cbvprintf+0x918>
			if (isupper((int)c)) {
    4001c6ec:	540000a1 	b.ne	4001c700 <cbvprintf+0xb50>  // b.any
				*buf++ = 'N';
    4001c6f0:	528829c0 	mov	w0, #0x414e                	// #16718
    4001c6f4:	790143e0 	strh	w0, [sp, #160]
				*buf++ = 'N';
    4001c6f8:	528009c0 	mov	w0, #0x4e                  	// #78
    4001c6fc:	17ffff73 	b	4001c4c8 <cbvprintf+0x918>
				*buf++ = 'n';
    4001c700:	528c2dc0 	mov	w0, #0x616e                	// #24942
    4001c704:	790143e0 	strh	w0, [sp, #160]
				*buf++ = 'n';
    4001c708:	52800dc0 	mov	w0, #0x6e                  	// #110
    4001c70c:	17ffff6f 	b	4001c4c8 <cbvprintf+0x918>
		c = 'f';
    4001c710:	52800cc3 	mov	w3, #0x66                  	// #102
    4001c714:	710118ff 	cmp	w7, #0x46
    4001c718:	1a8310e7 	csel	w7, w7, w3, ne  // ne = any
	fract <<= EXPONENT_BITS;
    4001c71c:	d375d043 	lsl	x3, x2, #11
	fract &= ~SIGN_MASK;
    4001c720:	f9004fe3 	str	x3, [sp, #152]
	if ((expo | fract) != 0) {
    4001c724:	93407c08 	sxtw	x8, w0
    4001c728:	aa030108 	orr	x8, x8, x3
    4001c72c:	b4000f68 	cbz	x8, 4001c918 <cbvprintf+0xd68>
	bool is_subnormal = (expo == 0) && (fract != 0);
    4001c730:	7100001f 	cmp	w0, #0x0
		if (is_subnormal) {
    4001c734:	fa400844 	ccmp	x2, #0x0, #0x4, eq  // eq = none
    4001c738:	54000c61 	b.ne	4001c8c4 <cbvprintf+0xd14>  // b.any
		fract |= BIT_63;
    4001c73c:	f9404fe2 	ldr	x2, [sp, #152]
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    4001c740:	510ff800 	sub	w0, w0, #0x3fe
		fract |= BIT_63;
    4001c744:	52800003 	mov	w3, #0x0                   	// #0
    4001c748:	52800008 	mov	w8, #0x0                   	// #0
    4001c74c:	b2410042 	orr	x2, x2, #0x8000000000000000
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    4001c750:	3200e7ea 	mov	w10, #0x33333333            	// #858993459
		fract |= BIT_63;
    4001c754:	f9004fe2 	str	x2, [sp, #152]
	while (expo < -2) {
    4001c758:	3100081f 	cmn	w0, #0x2
    4001c75c:	54000b8b 	b.lt	4001c8cc <cbvprintf+0xd1c>  // b.tstop
    4001c760:	34000043 	cbz	w3, 4001c768 <cbvprintf+0xbb8>
    4001c764:	f9004fe2 	str	x2, [sp, #152]
    4001c768:	f9404fe2 	ldr	x2, [sp, #152]
		decexp--;
    4001c76c:	52800003 	mov	w3, #0x0                   	// #0
	*v /= 5U;
    4001c770:	d28000aa 	mov	x10, #0x5                   	// #5
	while (expo > 0) {
    4001c774:	7100001f 	cmp	w0, #0x0
    4001c778:	54000bec 	b.gt	4001c8f4 <cbvprintf+0xd44>
    4001c77c:	34000043 	cbz	w3, 4001c784 <cbvprintf+0xbd4>
    4001c780:	f9004fe2 	str	x2, [sp, #152]
	fract >>= (4 - expo);
    4001c784:	52800082 	mov	w2, #0x4                   	// #4
    4001c788:	4b000042 	sub	w2, w2, w0
    4001c78c:	f9404fe0 	ldr	x0, [sp, #152]
    4001c790:	9ac22400 	lsr	x0, x0, x2
	if ((c == 'g') || (c == 'G')) {
    4001c794:	121a78e2 	and	w2, w7, #0xffffffdf
    4001c798:	12001c42 	and	w2, w2, #0xff
    4001c79c:	71011c5f 	cmp	w2, #0x47
    4001c7a0:	54000c81 	b.ne	4001c930 <cbvprintf+0xd80>  // b.any
		if (decexp < (-4 + 1) || decexp > precision) {
    4001c7a4:	6b08013f 	cmp	w9, w8
    4001c7a8:	3a43a901 	ccmn	w8, #0x3, #0x1, ge  // ge = tcont
    4001c7ac:	54000bca 	b.ge	4001c924 <cbvprintf+0xd74>  // b.tcont
				precision--;
    4001c7b0:	7100013f 	cmp	w9, #0x0
			c += 'e' - 'g';  /* e or E */
    4001c7b4:	510008e7 	sub	w7, w7, #0x2
				precision--;
    4001c7b8:	1a9fd7e2 	cset	w2, gt
			c += 'e' - 'g';  /* e or E */
    4001c7bc:	12001ce7 	and	w7, w7, #0xff
				precision--;
    4001c7c0:	4b020129 	sub	w9, w9, w2
		if (!conv->flag_hash && (precision > 0)) {
    4001c7c4:	721b003f 	tst	w1, #0x20
    4001c7c8:	54000b41 	b.ne	4001c930 <cbvprintf+0xd80>  // b.any
    4001c7cc:	7100013f 	cmp	w9, #0x0
    4001c7d0:	1a9fd7ea 	cset	w10, gt
	if (c == 'f') {
    4001c7d4:	710198ff 	cmp	w7, #0x66
    4001c7d8:	54000b01 	b.ne	4001c938 <cbvprintf+0xd88>  // b.any
		if (decimals < 0) {
    4001c7dc:	2b080121 	adds	w1, w9, w8
    4001c7e0:	54000ae5 	b.pl	4001c93c <cbvprintf+0xd8c>  // b.nfrst
			decimals = 0;
    4001c7e4:	52800001 	mov	w1, #0x0                   	// #0
    4001c7e8:	52800202 	mov	w2, #0x10                  	// #16
	*v /= 5U;
    4001c7ec:	d28000a3 	mov	x3, #0x5                   	// #5
    4001c7f0:	b90097e2 	str	w2, [sp, #148]
			decimals = 0;
    4001c7f4:	d2e10002 	mov	x2, #0x800000000000000     	// #576460752303423488
	while (decimals--) {
    4001c7f8:	51000421 	sub	w1, w1, #0x1
    4001c7fc:	3100043f 	cmn	w1, #0x1
    4001c800:	54000a61 	b.ne	4001c94c <cbvprintf+0xd9c>  // b.any
	fract += round;
    4001c804:	8b020000 	add	x0, x0, x2
	if (fract >= BIT64(60)) {
    4001c808:	92fe0001 	mov	x1, #0xfffffffffffffff     	// #1152921504606846975
    4001c80c:	eb01001f 	cmp	x0, x1
    4001c810:	54000a48 	b.hi	4001c958 <cbvprintf+0xda8>  // b.pmore
	fract += round;
    4001c814:	f9004fe0 	str	x0, [sp, #152]
	if (c == 'f') {
    4001c818:	710198ff 	cmp	w7, #0x66
    4001c81c:	54000b21 	b.ne	4001c980 <cbvprintf+0xdd0>  // b.any
		if (decexp > 0) {
    4001c820:	7100011f 	cmp	w8, #0x0
    4001c824:	54000a6d 	b.le	4001c970 <cbvprintf+0xdc0>
	char *buf = bps;
    4001c828:	910283f9 	add	x25, sp, #0xa0
				*buf++ = _get_digit(&fract, &digit_count);
    4001c82c:	910253e1 	add	x1, sp, #0x94
    4001c830:	910263e0 	add	x0, sp, #0x98
    4001c834:	97fffc7e 	bl	4001ba2c <_get_digit>
    4001c838:	38001720 	strb	w0, [x25], #1
			while (decexp > 0 && digit_count > 0) {
    4001c83c:	b94097e0 	ldr	w0, [sp, #148]
				decexp--;
    4001c840:	51000508 	sub	w8, w8, #0x1
			while (decexp > 0 && digit_count > 0) {
    4001c844:	7100001f 	cmp	w0, #0x0
    4001c848:	7a40c904 	ccmp	w8, #0x0, #0x4, gt
    4001c84c:	54ffff0c 	b.gt	4001c82c <cbvprintf+0xc7c>
			conv->pad0_value = decexp;
    4001c850:	b900d7e8 	str	w8, [sp, #212]
			decexp = 0;
    4001c854:	52800008 	mov	w8, #0x0                   	// #0
		if (conv->flag_hash || (precision > 0)) {
    4001c858:	7941a3e0 	ldrh	w0, [sp, #208]
    4001c85c:	37280060 	tbnz	w0, #5, 4001c868 <cbvprintf+0xcb8>
    4001c860:	7100013f 	cmp	w9, #0x0
    4001c864:	54000c2d 	b.le	4001c9e8 <cbvprintf+0xe38>
			*buf++ = '.';
    4001c868:	aa1903e3 	mov	x3, x25
    4001c86c:	528005c0 	mov	w0, #0x2e                  	// #46
		if (decexp < 0 && precision > 0) {
    4001c870:	7100011f 	cmp	w8, #0x0
    4001c874:	7a40b924 	ccmp	w9, #0x0, #0x4, lt  // lt = tstop
			*buf++ = '.';
    4001c878:	38001460 	strb	w0, [x3], #1
		if (decexp < 0 && precision > 0) {
    4001c87c:	5400016d 	b.le	4001c8a8 <cbvprintf+0xcf8>
			conv->pad0_value = -decexp;
    4001c880:	4b0803e1 	neg	w1, w8
			conv->pad_postdp = (conv->pad0_value > 0);
    4001c884:	39434be0 	ldrb	w0, [sp, #210]
			conv->pad0_value = -decexp;
    4001c888:	6b01013f 	cmp	w9, w1
    4001c88c:	1a81b121 	csel	w1, w9, w1, lt  // lt = tstop
    4001c890:	b900d7e1 	str	w1, [sp, #212]
			conv->pad_postdp = (conv->pad0_value > 0);
    4001c894:	7100003f 	cmp	w1, #0x0
			precision -= conv->pad0_value;
    4001c898:	4b010129 	sub	w9, w9, w1
			conv->pad_postdp = (conv->pad0_value > 0);
    4001c89c:	1a9fd7e1 	cset	w1, gt
    4001c8a0:	331b0020 	bfi	w0, w1, #5, #1
    4001c8a4:	39034be0 	strb	w0, [sp, #210]
			*buf++ = '.';
    4001c8a8:	aa0303f9 	mov	x25, x3
    4001c8ac:	1400004a 	b	4001c9d4 <cbvprintf+0xe24>
				expo--;
    4001c8b0:	51000400 	sub	w0, w0, #0x1
			while (((fract <<= 1) & BIT_63) == 0) {
    4001c8b4:	d37ff863 	lsl	x3, x3, #1
    4001c8b8:	b6ffffc3 	tbz	x3, #63, 4001c8b0 <cbvprintf+0xd00>
    4001c8bc:	f9004fe3 	str	x3, [sp, #152]
    4001c8c0:	17ffff9f 	b	4001c73c <cbvprintf+0xb8c>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    4001c8c4:	52800000 	mov	w0, #0x0                   	// #0
    4001c8c8:	17fffffb 	b	4001c8b4 <cbvprintf+0xd04>
			expo++;
    4001c8cc:	2a0003eb 	mov	w11, w0
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    4001c8d0:	eb42855f 	cmp	x10, x2, lsr #33
			expo++;
    4001c8d4:	11000400 	add	w0, w0, #0x1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    4001c8d8:	d341fc42 	lsr	x2, x2, #1
    4001c8dc:	54ffff89 	b.ls	4001c8cc <cbvprintf+0xd1c>  // b.plast
		fract *= 5U;
    4001c8e0:	8b020842 	add	x2, x2, x2, lsl #2
		expo++;
    4001c8e4:	11000960 	add	w0, w11, #0x2
		decexp--;
    4001c8e8:	51000508 	sub	w8, w8, #0x1
    4001c8ec:	52800023 	mov	w3, #0x1                   	// #1
    4001c8f0:	17ffff9a 	b	4001c758 <cbvprintf+0xba8>
		fract += 2;
    4001c8f4:	91000842 	add	x2, x2, #0x2
		expo--;
    4001c8f8:	51000400 	sub	w0, w0, #0x1
		decexp++;
    4001c8fc:	11000508 	add	w8, w8, #0x1
    4001c900:	52800023 	mov	w3, #0x1                   	// #1
	*v /= 5U;
    4001c904:	9aca0842 	udiv	x2, x2, x10
			fract <<= 1;
    4001c908:	d37ff842 	lsl	x2, x2, #1
			expo--;
    4001c90c:	51000400 	sub	w0, w0, #0x1
		} while (!(fract & BIT_63));
    4001c910:	b6ffffc2 	tbz	x2, #63, 4001c908 <cbvprintf+0xd58>
    4001c914:	17ffff98 	b	4001c774 <cbvprintf+0xbc4>
    4001c918:	52800008 	mov	w8, #0x0                   	// #0
    4001c91c:	52800000 	mov	w0, #0x0                   	// #0
    4001c920:	17ffff99 	b	4001c784 <cbvprintf+0xbd4>
			precision -= decexp;
    4001c924:	4b080129 	sub	w9, w9, w8
			c = 'f';
    4001c928:	52800cc7 	mov	w7, #0x66                  	// #102
    4001c92c:	17ffffa6 	b	4001c7c4 <cbvprintf+0xc14>
	bool prune_zero = false;
    4001c930:	5280000a 	mov	w10, #0x0                   	// #0
    4001c934:	17ffffa8 	b	4001c7d4 <cbvprintf+0xc24>
		decimals = precision + 1;
    4001c938:	11000521 	add	w1, w9, #0x1
	if (decimals > 16) {
    4001c93c:	7100403f 	cmp	w1, #0x10
    4001c940:	52800202 	mov	w2, #0x10                  	// #16
    4001c944:	1a82d021 	csel	w1, w1, w2, le
    4001c948:	17ffffa8 	b	4001c7e8 <cbvprintf+0xc38>
	*v >>= 1;
    4001c94c:	d341fc42 	lsr	x2, x2, #1
	*v /= 5U;
    4001c950:	9ac30842 	udiv	x2, x2, x3
}
    4001c954:	17ffffa9 	b	4001c7f8 <cbvprintf+0xc48>
	*v >>= 1;
    4001c958:	d341fc00 	lsr	x0, x0, #1
	*v /= 5U;
    4001c95c:	d28000a1 	mov	x1, #0x5                   	// #5
		decexp++;
    4001c960:	11000508 	add	w8, w8, #0x1
	*v /= 5U;
    4001c964:	9ac10800 	udiv	x0, x0, x1
    4001c968:	f9004fe0 	str	x0, [sp, #152]
		decexp++;
    4001c96c:	17ffffab 	b	4001c818 <cbvprintf+0xc68>
			*buf++ = '0';
    4001c970:	52800600 	mov	w0, #0x30                  	// #48
    4001c974:	910287f9 	add	x25, sp, #0xa1
    4001c978:	390283e0 	strb	w0, [sp, #160]
    4001c97c:	17ffffb7 	b	4001c858 <cbvprintf+0xca8>
		*buf = _get_digit(&fract, &digit_count);
    4001c980:	910253e1 	add	x1, sp, #0x94
    4001c984:	910263e0 	add	x0, sp, #0x98
    4001c988:	97fffc29 	bl	4001ba2c <_get_digit>
    4001c98c:	12001c01 	and	w1, w0, #0xff
			decexp--;
    4001c990:	7100c03f 	cmp	w1, #0x30
		*buf = _get_digit(&fract, &digit_count);
    4001c994:	390283e0 	strb	w0, [sp, #160]
			decexp--;
    4001c998:	1a9f07e0 	cset	w0, ne  // ne = any
    4001c99c:	4b000108 	sub	w8, w8, w0
		if (conv->flag_hash || (precision > 0)) {
    4001c9a0:	7941a3e0 	ldrh	w0, [sp, #208]
    4001c9a4:	37280060 	tbnz	w0, #5, 4001c9b0 <cbvprintf+0xe00>
    4001c9a8:	7100013f 	cmp	w9, #0x0
    4001c9ac:	540006cd 	b.le	4001ca84 <cbvprintf+0xed4>
			*buf++ = '.';
    4001c9b0:	528005c0 	mov	w0, #0x2e                  	// #46
    4001c9b4:	91028be3 	add	x3, sp, #0xa2
    4001c9b8:	390287e0 	strb	w0, [sp, #161]
    4001c9bc:	17ffffbb 	b	4001c8a8 <cbvprintf+0xcf8>
		precision--;
    4001c9c0:	51000529 	sub	w9, w9, #0x1
		*buf++ = _get_digit(&fract, &digit_count);
    4001c9c4:	910253e1 	add	x1, sp, #0x94
    4001c9c8:	910263e0 	add	x0, sp, #0x98
    4001c9cc:	97fffc18 	bl	4001ba2c <_get_digit>
    4001c9d0:	38001720 	strb	w0, [x25], #1
	while (precision > 0 && digit_count > 0) {
    4001c9d4:	7100013f 	cmp	w9, #0x0
    4001c9d8:	5400008d 	b.le	4001c9e8 <cbvprintf+0xe38>
    4001c9dc:	b94097e0 	ldr	w0, [sp, #148]
    4001c9e0:	7100001f 	cmp	w0, #0x0
    4001c9e4:	54fffeec 	b.gt	4001c9c0 <cbvprintf+0xe10>
	if (prune_zero) {
    4001c9e8:	3500052a 	cbnz	w10, 4001ca8c <cbvprintf+0xedc>
	conv->pad0_pre_exp = precision;
    4001c9ec:	b900dbe9 	str	w9, [sp, #216]
	if ((c == 'e') || (c == 'E')) {
    4001c9f0:	121a78e0 	and	w0, w7, #0xffffffdf
    4001c9f4:	12001c00 	and	w0, w0, #0xff
    4001c9f8:	7101141f 	cmp	w0, #0x45
    4001c9fc:	540002e1 	b.ne	4001ca58 <cbvprintf+0xea8>  // b.any
		*buf++ = c;
    4001ca00:	aa1903e1 	mov	x1, x25
    4001ca04:	38002427 	strb	w7, [x1], #2
		if (decexp < 0) {
    4001ca08:	36f80528 	tbz	w8, #31, 4001caac <cbvprintf+0xefc>
			decexp = -decexp;
    4001ca0c:	4b0803e8 	neg	w8, w8
			*buf++ = '-';
    4001ca10:	528005a0 	mov	w0, #0x2d                  	// #45
    4001ca14:	39000720 	strb	w0, [x25, #1]
		if (decexp >= 100) {
    4001ca18:	71018d1f 	cmp	w8, #0x63
    4001ca1c:	540000ed 	b.le	4001ca38 <cbvprintf+0xe88>
			*buf++ = (decexp / 100) + '0';
    4001ca20:	52800c80 	mov	w0, #0x64                  	// #100
    4001ca24:	91000f21 	add	x1, x25, #0x3
    4001ca28:	1ac00d02 	sdiv	w2, w8, w0
			decexp %= 100;
    4001ca2c:	1b00a048 	msub	w8, w2, w0, w8
			*buf++ = (decexp / 100) + '0';
    4001ca30:	1100c047 	add	w7, w2, #0x30
    4001ca34:	39000b27 	strb	w7, [x25, #2]
		*buf++ = (decexp / 10) + '0';
    4001ca38:	52800142 	mov	w2, #0xa                   	// #10
    4001ca3c:	aa0103f9 	mov	x25, x1
    4001ca40:	1ac20d00 	sdiv	w0, w8, w2
    4001ca44:	1100c007 	add	w7, w0, #0x30
		*buf++ = (decexp % 10) + '0';
    4001ca48:	1b02a000 	msub	w0, w0, w2, w8
		*buf++ = (decexp / 10) + '0';
    4001ca4c:	38002727 	strb	w7, [x25], #2
		*buf++ = (decexp % 10) + '0';
    4001ca50:	1100c000 	add	w0, w0, #0x30
    4001ca54:	39000420 	strb	w0, [x1, #1]
		|| (conv->pad0_pre_exp > 0);
    4001ca58:	b940d7e0 	ldr	w0, [sp, #212]
    4001ca5c:	7100001f 	cmp	w0, #0x0
    4001ca60:	540002ac 	b.gt	4001cab4 <cbvprintf+0xf04>
    4001ca64:	b940dbe0 	ldr	w0, [sp, #216]
    4001ca68:	7100001f 	cmp	w0, #0x0
    4001ca6c:	1a9fd7e1 	cset	w1, gt
	conv->pad_fp = (conv->pad0_value > 0)
    4001ca70:	39434be0 	ldrb	w0, [sp, #210]
    4001ca74:	331a0020 	bfi	w0, w1, #6, #1
    4001ca78:	39034be0 	strb	w0, [sp, #210]
	*buf = 0;
    4001ca7c:	3900033f 	strb	wzr, [x25]
	return bps;
    4001ca80:	17fffeb4 	b	4001c550 <cbvprintf+0x9a0>
		if (*buf++ != '0') {
    4001ca84:	910287f9 	add	x25, sp, #0xa1
    4001ca88:	17ffffd8 	b	4001c9e8 <cbvprintf+0xe38>
		conv->pad0_pre_exp = 0;
    4001ca8c:	b900dbff 	str	wzr, [sp, #216]
		while (*--buf == '0') {
    4001ca90:	aa1903e1 	mov	x1, x25
    4001ca94:	385fff20 	ldrb	w0, [x25, #-1]!
    4001ca98:	7100c01f 	cmp	w0, #0x30
    4001ca9c:	54ffffa0 	b.eq	4001ca90 <cbvprintf+0xee0>  // b.none
		if (*buf != '.') {
    4001caa0:	7100b81f 	cmp	w0, #0x2e
    4001caa4:	9a810339 	csel	x25, x25, x1, eq  // eq = none
    4001caa8:	17ffffd2 	b	4001c9f0 <cbvprintf+0xe40>
			*buf++ = '+';
    4001caac:	52800560 	mov	w0, #0x2b                  	// #43
    4001cab0:	17ffffd9 	b	4001ca14 <cbvprintf+0xe64>
		|| (conv->pad0_pre_exp > 0);
    4001cab4:	52800021 	mov	w1, #0x1                   	// #1
    4001cab8:	17ffffee 	b	4001ca70 <cbvprintf+0xec0>
			bpe = bps + 5;
    4001cabc:	f0000023 	adrp	x3, 40023000 <fpi.1>
    4001cac0:	91357879 	add	x25, x3, #0xd5e
			bps = "(nil)";
    4001cac4:	f0000022 	adrp	x2, 40023000 <fpi.1>
    4001cac8:	9135645a 	add	x26, x2, #0xd59
		char sign = 0;
    4001cacc:	52800006 	mov	w6, #0x0                   	// #0
    4001cad0:	17fffea1 	b	4001c554 <cbvprintf+0x9a4>
		} else if (conv->altform_0) {
    4001cad4:	361fd4c7 	tbz	w7, #3, 4001c56c <cbvprintf+0x9bc>
			nj_len += 1U;
    4001cad8:	91000400 	add	x0, x0, #0x1
    4001cadc:	17fffea4 	b	4001c56c <cbvprintf+0x9bc>
					OUTC(pad);
    4001cae0:	b90083e7 	str	w7, [sp, #128]
    4001cae4:	aa1603e1 	mov	x1, x22
    4001cae8:	b9008fe6 	str	w6, [sp, #140]
    4001caec:	2a0703e0 	mov	w0, w7
    4001caf0:	d63f02a0 	blr	x21
    4001caf4:	37f80ac0 	tbnz	w0, #31, 4001cc4c <cbvprintf+0x109c>
    4001caf8:	b94083e7 	ldr	w7, [sp, #128]
    4001cafc:	91000673 	add	x19, x19, #0x1
    4001cb00:	b9408fe6 	ldr	w6, [sp, #140]
				while (width-- > 0) {
    4001cb04:	2a1703e0 	mov	w0, w23
    4001cb08:	510006f7 	sub	w23, w23, #0x1
    4001cb0c:	7100001f 	cmp	w0, #0x0
    4001cb10:	54fffe8c 	b.gt	4001cae0 <cbvprintf+0xf30>
		if (sign != 0) {
    4001cb14:	340000c6 	cbz	w6, 4001cb2c <cbvprintf+0xf7c>
			OUTC(sign);
    4001cb18:	aa1603e1 	mov	x1, x22
    4001cb1c:	2a0603e0 	mov	w0, w6
    4001cb20:	d63f02a0 	blr	x21
    4001cb24:	37f80940 	tbnz	w0, #31, 4001cc4c <cbvprintf+0x109c>
    4001cb28:	91000673 	add	x19, x19, #0x1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    4001cb2c:	39434be0 	ldrb	w0, [sp, #210]
    4001cb30:	36300e40 	tbz	w0, #6, 4001ccf8 <cbvprintf+0x1148>
			if (conv->specifier_a) {
    4001cb34:	79c1a3e0 	ldrsh	w0, [sp, #208]
    4001cb38:	cb1a0273 	sub	x19, x19, x26
    4001cb3c:	37f80480 	tbnz	w0, #31, 4001cbcc <cbvprintf+0x101c>
				while (isdigit((int)*cp)) {
    4001cb40:	39400341 	ldrb	w1, [x26]
    4001cb44:	8b130346 	add	x6, x26, x19
    4001cb48:	f9403be2 	ldr	x2, [sp, #112]
    4001cb4c:	39400340 	ldrb	w0, [x26]
    4001cb50:	38626821 	ldrb	w1, [x1, x2]
    4001cb54:	37100741 	tbnz	w1, #2, 4001cc3c <cbvprintf+0x108c>
				if (!conv->pad_postdp) {
    4001cb58:	f9406be0 	ldr	x0, [sp, #208]
				pad_len = conv->pad0_value;
    4001cb5c:	b940d7f3 	ldr	w19, [sp, #212]
				if (!conv->pad_postdp) {
    4001cb60:	720b001f 	tst	w0, #0x200000
    4001cb64:	540000a1 	b.ne	4001cb78 <cbvprintf+0xfc8>  // b.any
					while (pad_len-- > 0) {
    4001cb68:	51000667 	sub	w7, w19, #0x1
    4001cb6c:	7100027f 	cmp	w19, #0x0
    4001cb70:	540007cc 	b.gt	4001cc68 <cbvprintf+0x10b8>
    4001cb74:	2a0703f3 	mov	w19, w7
				if (*cp == '.') {
    4001cb78:	39400340 	ldrb	w0, [x26]
    4001cb7c:	7100b81f 	cmp	w0, #0x2e
    4001cb80:	54000141 	b.ne	4001cba8 <cbvprintf+0xff8>  // b.any
    4001cb84:	f90043e6 	str	x6, [sp, #128]
					OUTC(*cp++);
    4001cb88:	aa1603e1 	mov	x1, x22
    4001cb8c:	d63f02a0 	blr	x21
						OUTC('0');
    4001cb90:	37f805e0 	tbnz	w0, #31, 4001cc4c <cbvprintf+0x109c>
    4001cb94:	f94043e6 	ldr	x6, [sp, #128]
					while (pad_len-- > 0) {
    4001cb98:	7100027f 	cmp	w19, #0x0
						OUTC('0');
    4001cb9c:	910004c6 	add	x6, x6, #0x1
					while (pad_len-- > 0) {
    4001cba0:	540007ac 	b.gt	4001cc94 <cbvprintf+0x10e4>
					OUTC(*cp++);
    4001cba4:	9100075a 	add	x26, x26, #0x1
    4001cba8:	cb1a00d3 	sub	x19, x6, x26
    4001cbac:	14000044 	b	4001ccbc <cbvprintf+0x110c>
				char pad = ' ';
    4001cbb0:	52800407 	mov	w7, #0x20                  	// #32
					pad = '0';
    4001cbb4:	2a1703e0 	mov	w0, w23
    4001cbb8:	17ffffd4 	b	4001cb08 <cbvprintf+0xf58>
					OUTC(*cp++);
    4001cbbc:	9100075a 	add	x26, x26, #0x1
    4001cbc0:	aa1603e1 	mov	x1, x22
    4001cbc4:	d63f02a0 	blr	x21
    4001cbc8:	37f80420 	tbnz	w0, #31, 4001cc4c <cbvprintf+0x109c>
				while (*cp != 'p') {
    4001cbcc:	39400340 	ldrb	w0, [x26]
    4001cbd0:	8b130341 	add	x1, x26, x19
    4001cbd4:	7101c01f 	cmp	w0, #0x70
    4001cbd8:	54ffff21 	b.ne	4001cbbc <cbvprintf+0x100c>  // b.any
			while (pad_len-- > 0) {
    4001cbdc:	b940dbe6 	ldr	w6, [sp, #216]
    4001cbe0:	aa0103f3 	mov	x19, x1
    4001cbe4:	0b0100c6 	add	w6, w6, w1
    4001cbe8:	4b1300c0 	sub	w0, w6, w19
    4001cbec:	7100001f 	cmp	w0, #0x0
    4001cbf0:	5400074c 	b.gt	4001ccd8 <cbvprintf+0x1128>
			OUTS(bps, bpe);
    4001cbf4:	aa1903e3 	mov	x3, x25
    4001cbf8:	aa1a03e2 	mov	x2, x26
    4001cbfc:	aa1603e1 	mov	x1, x22
    4001cc00:	aa1503e0 	mov	x0, x21
    4001cc04:	97fffbcf 	bl	4001bb40 <outs>
    4001cc08:	37f80220 	tbnz	w0, #31, 4001cc4c <cbvprintf+0x109c>
    4001cc0c:	8b20c260 	add	x0, x19, w0, sxtw
			while (pad_len-- > 0) {
    4001cc10:	aa0003f3 	mov	x19, x0
    4001cc14:	0b0002f7 	add	w23, w23, w0
		while (width > 0) {
    4001cc18:	4b1302e0 	sub	w0, w23, w19
    4001cc1c:	7100001f 	cmp	w0, #0x0
    4001cc20:	54ffafad 	b.le	4001c214 <cbvprintf+0x664>
			OUTC(' ');
    4001cc24:	aa1603e1 	mov	x1, x22
    4001cc28:	52800400 	mov	w0, #0x20                  	// #32
    4001cc2c:	d63f02a0 	blr	x21
    4001cc30:	37f800e0 	tbnz	w0, #31, 4001cc4c <cbvprintf+0x109c>
    4001cc34:	91000673 	add	x19, x19, #0x1
			--width;
    4001cc38:	17fffff8 	b	4001cc18 <cbvprintf+0x1068>
					OUTC(*cp++);
    4001cc3c:	9100075a 	add	x26, x26, #0x1
    4001cc40:	aa1603e1 	mov	x1, x22
    4001cc44:	d63f02a0 	blr	x21
    4001cc48:	36fff7c0 	tbz	w0, #31, 4001cb40 <cbvprintf+0xf90>
#undef OUTS
#undef OUTC
}
    4001cc4c:	a94153f3 	ldp	x19, x20, [sp, #16]
    4001cc50:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4001cc54:	a94363f7 	ldp	x23, x24, [sp, #48]
    4001cc58:	a9446bf9 	ldp	x25, x26, [sp, #64]
    4001cc5c:	a94573fb 	ldp	x27, x28, [sp, #80]
    4001cc60:	a8ce7bfd 	ldp	x29, x30, [sp], #224
    4001cc64:	d65f03c0 	ret
    4001cc68:	f90043e6 	str	x6, [sp, #128]
						OUTC('0');
    4001cc6c:	aa1603e1 	mov	x1, x22
    4001cc70:	b9008fe7 	str	w7, [sp, #140]
    4001cc74:	52800600 	mov	w0, #0x30                  	// #48
    4001cc78:	d63f02a0 	blr	x21
    4001cc7c:	37fffe80 	tbnz	w0, #31, 4001cc4c <cbvprintf+0x109c>
    4001cc80:	f94043e6 	ldr	x6, [sp, #128]
					while (pad_len-- > 0) {
    4001cc84:	b9408fe7 	ldr	w7, [sp, #140]
						OUTC('0');
    4001cc88:	910004c6 	add	x6, x6, #0x1
					while (pad_len-- > 0) {
    4001cc8c:	2a0703f3 	mov	w19, w7
    4001cc90:	17ffffb6 	b	4001cb68 <cbvprintf+0xfb8>
    4001cc94:	f90043e6 	str	x6, [sp, #128]
						OUTC('0');
    4001cc98:	aa1603e1 	mov	x1, x22
    4001cc9c:	51000673 	sub	w19, w19, #0x1
    4001cca0:	52800600 	mov	w0, #0x30                  	// #48
    4001cca4:	d63f02a0 	blr	x21
    4001cca8:	17ffffba 	b	4001cb90 <cbvprintf+0xfe0>
					OUTC(*cp++);
    4001ccac:	9100075a 	add	x26, x26, #0x1
    4001ccb0:	aa1603e1 	mov	x1, x22
    4001ccb4:	d63f02a0 	blr	x21
    4001ccb8:	37fffca0 	tbnz	w0, #31, 4001cc4c <cbvprintf+0x109c>
				while (isdigit((int)*cp)) {
    4001ccbc:	39400346 	ldrb	w6, [x26]
    4001ccc0:	8b130341 	add	x1, x26, x19
    4001ccc4:	f9403be2 	ldr	x2, [sp, #112]
    4001ccc8:	39400340 	ldrb	w0, [x26]
    4001cccc:	38666846 	ldrb	w6, [x2, x6]
    4001ccd0:	3717fee6 	tbnz	w6, #2, 4001ccac <cbvprintf+0x10fc>
    4001ccd4:	17ffffc2 	b	4001cbdc <cbvprintf+0x102c>
    4001ccd8:	b90083e6 	str	w6, [sp, #128]
				OUTC('0');
    4001ccdc:	aa1603e1 	mov	x1, x22
    4001cce0:	52800600 	mov	w0, #0x30                  	// #48
    4001cce4:	d63f02a0 	blr	x21
    4001cce8:	37fffb20 	tbnz	w0, #31, 4001cc4c <cbvprintf+0x109c>
    4001ccec:	b94083e6 	ldr	w6, [sp, #128]
    4001ccf0:	91000673 	add	x19, x19, #0x1
    4001ccf4:	17ffffbd 	b	4001cbe8 <cbvprintf+0x1038>
			if (conv->altform_0c | conv->altform_0) {
    4001ccf8:	f9406be0 	ldr	x0, [sp, #208]
    4001ccfc:	d3545001 	ubfx	x1, x0, #20, #1
    4001cd00:	d3534c00 	ubfx	x0, x0, #19, #1
    4001cd04:	2a000020 	orr	w0, w1, w0
    4001cd08:	360000c0 	tbz	w0, #0, 4001cd20 <cbvprintf+0x1170>
				OUTC('0');
    4001cd0c:	aa1603e1 	mov	x1, x22
    4001cd10:	52800600 	mov	w0, #0x30                  	// #48
    4001cd14:	d63f02a0 	blr	x21
    4001cd18:	37fff9a0 	tbnz	w0, #31, 4001cc4c <cbvprintf+0x109c>
    4001cd1c:	91000673 	add	x19, x19, #0x1
			if (conv->altform_0c) {
    4001cd20:	39434be0 	ldrb	w0, [sp, #210]
    4001cd24:	362000c0 	tbz	w0, #4, 4001cd3c <cbvprintf+0x118c>
				OUTC(conv->specifier);
    4001cd28:	39434fe0 	ldrb	w0, [sp, #211]
    4001cd2c:	aa1603e1 	mov	x1, x22
    4001cd30:	d63f02a0 	blr	x21
    4001cd34:	37fff8c0 	tbnz	w0, #31, 4001cc4c <cbvprintf+0x109c>
    4001cd38:	91000673 	add	x19, x19, #0x1
			while (pad_len-- > 0) {
    4001cd3c:	b940d7e6 	ldr	w6, [sp, #212]
    4001cd40:	0b1300c6 	add	w6, w6, w19
    4001cd44:	4b1300c0 	sub	w0, w6, w19
    4001cd48:	7100001f 	cmp	w0, #0x0
    4001cd4c:	54fff54d 	b.le	4001cbf4 <cbvprintf+0x1044>
    4001cd50:	b90083e6 	str	w6, [sp, #128]
				OUTC('0');
    4001cd54:	aa1603e1 	mov	x1, x22
    4001cd58:	52800600 	mov	w0, #0x30                  	// #48
    4001cd5c:	d63f02a0 	blr	x21
    4001cd60:	37fff760 	tbnz	w0, #31, 4001cc4c <cbvprintf+0x109c>
    4001cd64:	b94083e6 	ldr	w6, [sp, #128]
    4001cd68:	91000673 	add	x19, x19, #0x1
    4001cd6c:	17fffff6 	b	4001cd44 <cbvprintf+0x1194>

000000004001cd70 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_STAT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    4001cd70:	d65f03c0 	ret

000000004001cd74 <z_arm64_el3_plat_init>:
	uint64_t reg = 0;

	reg = (ICC_SRE_ELx_DFB_BIT | ICC_SRE_ELx_DIB_BIT |
	       ICC_SRE_ELx_SRE_BIT | ICC_SRE_EL3_EN_BIT);

	write_sysreg(reg, ICC_SRE_EL3);
    4001cd74:	d28001e0 	mov	x0, #0xf                   	// #15
    4001cd78:	d51ecca0 	msr	s3_6_c12_c12_5, x0
}
    4001cd7c:	d65f03c0 	ret

000000004001cd80 <arch_cpu_idle>:
#ifdef CONFIG_TRACING
	stp	xzr, x30, [sp, #-16]!
	bl	sys_trace_idle
	ldp	xzr, x30, [sp], #16
#endif
	dsb	sy
    4001cd80:	d5033f9f 	dsb	sy
	wfi
    4001cd84:	d503207f 	wfi
	msr	daifclr, #(DAIFCLR_IRQ_BIT)
    4001cd88:	d50342ff 	msr	daifclr, #0x2
	ret
    4001cd8c:	d65f03c0 	ret

000000004001cd90 <z_arm64_fatal_error>:

	return false;
}

void z_arm64_fatal_error(unsigned int reason, z_arch_esf_t *esf)
{
    4001cd90:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	uint64_t esr = 0;
	uint64_t elr = 0;
	uint64_t far = 0;
	uint64_t el;

	if (reason != K_ERR_SPURIOUS_IRQ) {
    4001cd94:	7100041f 	cmp	w0, #0x1
{
    4001cd98:	910003fd 	mov	x29, sp
	if (reason != K_ERR_SPURIOUS_IRQ) {
    4001cd9c:	540000e0 	b.eq	4001cdb8 <z_arm64_fatal_error+0x28>  // b.none
MAKE_REG_HELPER(currentel);
    4001cda0:	d5384242 	mrs	x2, currentel
		el = read_currentel();

		switch (GET_EL(el)) {
    4001cda4:	d3420c42 	ubfx	x2, x2, #2, #2
    4001cda8:	f100045f 	cmp	x2, #0x1
    4001cdac:	54000080 	b.eq	4001cdbc <z_arm64_fatal_error+0x2c>  // b.none
    4001cdb0:	f1000c5f 	cmp	x2, #0x3
    4001cdb4:	540000c0 	b.eq	4001cdcc <z_arm64_fatal_error+0x3c>  // b.none
	if (esf != NULL) {
		esf_dump(esf);
	}
#endif /* CONFIG_EXCEPTION_DEBUG */

	z_fatal_error(reason, esf);
    4001cdb8:	94000632 	bl	4001e680 <z_fatal_error>
MAKE_REG_HELPER_EL123(esr)
    4001cdbc:	d5385202 	mrs	x2, esr_el1
MAKE_REG_HELPER_EL123(far)
    4001cdc0:	d5386002 	mrs	x2, far_el1
MAKE_REG_HELPER_EL123(elr)
    4001cdc4:	d5384022 	mrs	x2, elr_el1
			break;
    4001cdc8:	17fffffc 	b	4001cdb8 <z_arm64_fatal_error+0x28>
MAKE_REG_HELPER_EL123(esr)
    4001cdcc:	d53e5202 	mrs	x2, esr_el3
MAKE_REG_HELPER_EL123(far)
    4001cdd0:	d53e6002 	mrs	x2, far_el3
MAKE_REG_HELPER_EL123(elr)
    4001cdd4:	d53e4022 	mrs	x2, elr_el3
			break;
    4001cdd8:	17fffff8 	b	4001cdb8 <z_arm64_fatal_error+0x28>

000000004001cddc <z_arm64_do_kernel_oops>:
 * (e.g. kernel oops, panic, etc.).
 *
 * @param esf exception frame
 */
void z_arm64_do_kernel_oops(z_arch_esf_t *esf)
{
    4001cddc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    4001cde0:	aa0003e1 	mov	x1, x0
    4001cde4:	910003fd 	mov	x29, sp
		reason != K_ERR_STACK_CHK_FAIL) {
		reason = K_ERR_KERNEL_OOPS;
	}
#endif

	z_arm64_fatal_error(reason, esf);
    4001cde8:	b9404000 	ldr	w0, [x0, #64]
    4001cdec:	97ffffe9 	bl	4001cd90 <z_arm64_fatal_error>

000000004001cdf0 <z_arm64_interrupt_init>:
{
#ifdef CONFIG_ARM_CUSTOM_INTERRUPT_CONTROLLER
	/* Invoke SoC-specific interrupt controller initialisation */
	z_soc_irq_init();
#endif
}
    4001cdf0:	d65f03c0 	ret

000000004001cdf4 <arch_irq_enable>:
 * `include/arch/arm64/irq.h`.
 */

void arch_irq_enable(unsigned int irq)
{
	arm_gic_irq_enable(irq);
    4001cdf4:	1400043e 	b	4001deec <arm_gic_irq_enable>

000000004001cdf8 <z_arm64_irq_priority_set>:
	return arm_gic_irq_is_enabled(irq);
}

void z_arm64_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
	arm_gic_irq_set_priority(irq, prio, flags);
    4001cdf8:	1400040e 	b	4001de30 <arm_gic_irq_set_priority>

000000004001cdfc <z_irq_spurious>:

void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm64_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    4001cdfc:	d2800001 	mov	x1, #0x0                   	// #0
    4001ce00:	52800020 	mov	w0, #0x1                   	// #1
    4001ce04:	17ffffe3 	b	4001cd90 <z_arm64_fatal_error>

000000004001ce08 <z_arm64_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm64_prep_c(void)
{
    4001ce08:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
MAKE_REG_HELPER(tpidrro_el0);
    4001ce0c:	f0000320 	adrp	x0, 40083000 <ws+0x3a40>
    4001ce10:	91274000 	add	x0, x0, #0x9d0
    4001ce14:	910003fd 	mov	x29, sp
    4001ce18:	d51bd060 	msr	tpidrro_el0, x0
	uint64_t *p = (uint64_t *)__bss_start;
    4001ce1c:	90000040 	adrp	x0, 40024000 <xlat_tables>
    4001ce20:	91000000 	add	x0, x0, #0x0
	while (p < end) {
    4001ce24:	f0000561 	adrp	x1, 400cb000 <z_page_frames+0x4744e>
    4001ce28:	912ed021 	add	x1, x1, #0xbb4
    4001ce2c:	eb01001f 	cmp	x0, x1
    4001ce30:	540000a3 	b.cc	4001ce44 <z_arm64_prep_c+0x3c>  // b.lo, b.ul, b.last

	z_arm64_bss_zero();
#ifdef CONFIG_XIP
	z_data_copy();
#endif
	z_arm64_mm_init(true);
    4001ce34:	52800020 	mov	w0, #0x1                   	// #1
    4001ce38:	9400020e 	bl	4001d670 <z_arm64_mm_init>
	z_arm64_interrupt_init();
    4001ce3c:	97ffffed 	bl	4001cdf0 <z_arm64_interrupt_init>
	z_cstart();
    4001ce40:	9400065d 	bl	4001e7b4 <z_cstart>
		*p++ = 0U;
    4001ce44:	f800841f 	str	xzr, [x0], #8
    4001ce48:	17fffff9 	b	4001ce2c <z_arm64_prep_c+0x24>

000000004001ce4c <z_arm64_el3_plat_prep_c>:
	ret
    4001ce4c:	d65f03c0 	ret

000000004001ce50 <z_arm64_el2_plat_prep_c>:
	ret
    4001ce50:	d65f03c0 	ret

000000004001ce54 <z_arm64_el1_plat_prep_c>:
	ret
    4001ce54:	d65f03c0 	ret

000000004001ce58 <z_arm64_el_highest_plat_init>:
void z_arm64_el2_init(void);

void __weak z_arm64_el_highest_plat_init(void)
{
	/* do nothing */
}
    4001ce58:	d65f03c0 	ret

000000004001ce5c <z_arm64_el2_plat_init>:
    4001ce5c:	d65f03c0 	ret

000000004001ce60 <z_arm64_el1_plat_init>:
    4001ce60:	d65f03c0 	ret

000000004001ce64 <z_arm64_el_highest_init>:
{
	/* do nothing */
}

void z_arm64_el_highest_init(void)
{
    4001ce64:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    4001ce68:	910003fd 	mov	x29, sp
MAKE_REG_HELPER(id_aa64pfr0_el1);
    4001ce6c:	d5380400 	mrs	x0, id_aa64pfr0_el1
static inline bool is_el_highest_implemented(void)
{
	uint32_t el_highest;
	uint32_t curr_el;

	el_highest = read_id_aa64pfr0_el1() & 0xFFFF;
    4001ce70:	12003c00 	and	w0, w0, #0xffff
	el_highest = (31U - __builtin_clz(el_highest)) / 4;
    4001ce74:	5ac01000 	clz	w0, w0
MAKE_REG_HELPER(currentel);
    4001ce78:	d5384241 	mrs	x1, currentel
	el_highest = (31U - __builtin_clz(el_highest)) / 4;
    4001ce7c:	528003e2 	mov	w2, #0x1f                  	// #31
    4001ce80:	4b000040 	sub	w0, w2, w0

	curr_el = GET_EL(read_currentel());
    4001ce84:	53020c21 	ubfx	w1, w1, #2, #2

	if (curr_el < el_highest)
    4001ce88:	6b40083f 	cmp	w1, w0, lsr #2
    4001ce8c:	54000083 	b.cc	4001ce9c <z_arm64_el_highest_init+0x38>  // b.lo, b.ul, b.last
MAKE_REG_HELPER(cntfrq_el0);
    4001ce90:	d2959400 	mov	x0, #0xaca0                	// #44192
    4001ce94:	f2a07720 	movk	x0, #0x3b9, lsl #16
    4001ce98:	d51be000 	msr	cntfrq_el0, x0
	if (is_el_highest_implemented()) {
		write_cntfrq_el0(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
	}

	z_arm64_el_highest_plat_init();
    4001ce9c:	97ffffef 	bl	4001ce58 <z_arm64_el_highest_plat_init>

	isb();
    4001cea0:	d5033fdf 	isb
}
    4001cea4:	a8c17bfd 	ldp	x29, x30, [sp], #16
    4001cea8:	d65f03c0 	ret

000000004001ceac <z_arm64_el2_init>:
		z_arm64_el2_init();
	}
}

void z_arm64_el2_init(void)
{
    4001ceac:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    4001ceb0:	910003fd 	mov	x29, sp
MAKE_REG_HELPER_EL123(sctlr)
    4001ceb4:	d53c1000 	mrs	x0, sctlr_el2
	uint64_t reg;

	reg = read_sctlr_el2();
	reg |= (SCTLR_EL2_RES1 |	/* RES1 */
    4001ceb8:	d2830701 	mov	x1, #0x1838                	// #6200
    4001cebc:	f2a618a1 	movk	x1, #0x30c5, lsl #16
    4001cec0:	aa010000 	orr	x0, x0, x1
    4001cec4:	d51c1000 	msr	sctlr_el2, x0
MAKE_REG_HELPER(hcr_el2);
    4001cec8:	d53c1100 	mrs	x0, hcr_el2
		SCTLR_I_BIT |		/* Enable i-cache */
		SCTLR_SA_BIT);		/* Enable SP alignment check */
	write_sctlr_el2(reg);

	reg = read_hcr_el2();
	reg |= HCR_RW_BIT;		/* EL1 Execution state is AArch64 */
    4001cecc:	b2610000 	orr	x0, x0, #0x80000000
    4001ced0:	d51c1100 	msr	hcr_el2, x0
MAKE_REG_HELPER_EL123(cptr)
    4001ced4:	d2865fe0 	mov	x0, #0x32ff                	// #13055
    4001ced8:	d51c1140 	msr	cptr_el2, x0
MAKE_REG_HELPER(cntvoff_el2);
    4001cedc:	d51ce07f 	msr	cntvoff_el2, xzr
MAKE_REG_HELPER(cnthctl_el2);
    4001cee0:	d51ce11f 	msr	cnthctl_el2, xzr
MAKE_REG_HELPER(cnthp_ctl_el2);
    4001cee4:	d51ce23f 	msr	cnthp_ctl_el2, xzr
	/*
	 * Enable this if/when we use the hypervisor timer.
	 * write_cnthp_cval_el2(~(uint64_t)0);
	 */

	z_arm64_el2_plat_init();
    4001cee8:	97ffffdd 	bl	4001ce5c <z_arm64_el2_plat_init>

	isb();
    4001ceec:	d5033fdf 	isb
}
    4001cef0:	a8c17bfd 	ldp	x29, x30, [sp], #16
    4001cef4:	d65f03c0 	ret

000000004001cef8 <z_arm64_el3_init>:
{
    4001cef8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
MAKE_REG_HELPER_EL123(vbar)
    4001cefc:	90ffff20 	adrp	x0, 40000000 <__text_region_start>
    4001cf00:	91200000 	add	x0, x0, #0x800
    4001cf04:	910003fd 	mov	x29, sp
    4001cf08:	d51ec000 	msr	vbar_el3, x0
	isb();
    4001cf0c:	d5033fdf 	isb
MAKE_REG_HELPER_EL123(cptr)
    4001cf10:	d2800000 	mov	x0, #0x0                   	// #0
    4001cf14:	d51e1140 	msr	cptr_el3, x0
MAKE_REG_HELPER(scr_el3);
    4001cf18:	d281b620 	mov	x0, #0xdb1                 	// #3505
    4001cf1c:	d51e1100 	msr	scr_el3, x0
	reg = read_sysreg(ICC_SRE_EL3);
    4001cf20:	d53ecca0 	mrs	x0, s3_6_c12_c12_5
	write_sysreg(reg, ICC_SRE_EL3);
    4001cf24:	d2800120 	mov	x0, #0x9                   	// #9
    4001cf28:	d51ecca0 	msr	s3_6_c12_c12_5, x0
	z_arm64_el3_plat_init();
    4001cf2c:	97ffff92 	bl	4001cd74 <z_arm64_el3_plat_init>
	isb();
    4001cf30:	d5033fdf 	isb
MAKE_REG_HELPER(id_aa64pfr0_el1);
    4001cf34:	d5380400 	mrs	x0, id_aa64pfr0_el1
}
    4001cf38:	a8c17bfd 	ldp	x29, x30, [sp], #16
    4001cf3c:	d65f03c0 	ret

000000004001cf40 <z_arm64_el1_init>:

void z_arm64_el1_init(void)
{
    4001cf40:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
MAKE_REG_HELPER_EL123(vbar)
    4001cf44:	90ffff20 	adrp	x0, 40000000 <__text_region_start>
    4001cf48:	91200000 	add	x0, x0, #0x800
    4001cf4c:	910003fd 	mov	x29, sp
    4001cf50:	d518c000 	msr	vbar_el1, x0
	uint64_t reg;

	/* Setup vector table */
	write_vbar_el1((uint64_t)_vector_table);
	isb();
    4001cf54:	d5033fdf 	isb
MAKE_REG_HELPER_EL123(cpacr)
    4001cf58:	d2a00600 	mov	x0, #0x300000              	// #3145728
    4001cf5c:	d5181040 	msr	cpacr_el1, x0
MAKE_REG_HELPER_EL123(sctlr)
    4001cf60:	d5381000 	mrs	x0, sctlr_el1
	reg |= CPACR_EL1_FPEN_NOTRAP;	/* Do not trap NEON/SIMD/FP initially */
					/* TODO: CONFIG_FLOAT_*_FORBIDDEN */
	write_cpacr_el1(reg);

	reg = read_sctlr_el1();
	reg |= (SCTLR_EL1_RES1 |	/* RES1 */
    4001cf64:	d2830101 	mov	x1, #0x1808                	// #6152
    4001cf68:	f2a61a01 	movk	x1, #0x30d0, lsl #16
    4001cf6c:	aa010000 	orr	x0, x0, x1
    4001cf70:	d5181000 	msr	sctlr_el1, x0
MAKE_REG_HELPER(cntv_cval_el0)
    4001cf74:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
    4001cf78:	d51be340 	msr	cntv_cval_el0, x0
	 * Enable these if/when we use the corresponding timers.
	 * write_cntp_cval_el0(~(uint64_t)0);
	 * write_cntps_cval_el1(~(uint64_t)0);
	 */

	z_arm64_el1_plat_init();
    4001cf7c:	97ffffb9 	bl	4001ce60 <z_arm64_el1_plat_init>

	isb();
    4001cf80:	d5033fdf 	isb
}
    4001cf84:	a8c17bfd 	ldp	x29, x30, [sp], #16
    4001cf88:	d65f03c0 	ret

000000004001cf8c <z_arm64_el3_get_next_el>:
MAKE_REG_HELPER_EL123(elr)
    4001cf8c:	d51e4020 	msr	elr_el3, x0
MAKE_REG_HELPER(id_aa64pfr0_el1);
    4001cf90:	d5380400 	mrs	x0, id_aa64pfr0_el1
	/* Mask the DAIF */
	spsr = SPSR_DAIF_MASK;

	if (el3_get_next_el() == EL3_TO_EL2) {
		/* Dropping into EL2 */
		spsr |= SPSR_MODE_EL2T;
    4001cf94:	f2780c1f 	tst	x0, #0xf00
    4001cf98:	d2807901 	mov	x1, #0x3c8                 	// #968
    4001cf9c:	d2807880 	mov	x0, #0x3c4                 	// #964
    4001cfa0:	9a810000 	csel	x0, x0, x1, eq  // eq = none
MAKE_REG_HELPER_EL123(spsr)
    4001cfa4:	d51e4000 	msr	spsr_el3, x0
		/* Dropping into EL1 */
		spsr |= SPSR_MODE_EL1T;
	}

	write_spsr_el3(spsr);
}
    4001cfa8:	d65f03c0 	ret

000000004001cfac <z_arm64_context_switch>:

GTEXT(z_arm64_context_switch)
SECTION_FUNC(TEXT, z_arm64_context_switch)

	/* Save the current SP_EL0 */
	mrs	x4, sp_el0
    4001cfac:	d5384104 	mrs	x4, sp_el0

	stp	x19, x20, [x1, #_thread_offset_to_callee_saved_x19_x20]
    4001cfb0:	a904d033 	stp	x19, x20, [x1, #72]
	stp	x21, x22, [x1, #_thread_offset_to_callee_saved_x21_x22]
    4001cfb4:	a905d835 	stp	x21, x22, [x1, #88]
	stp	x23, x24, [x1, #_thread_offset_to_callee_saved_x23_x24]
    4001cfb8:	a906e037 	stp	x23, x24, [x1, #104]
	stp	x25, x26, [x1, #_thread_offset_to_callee_saved_x25_x26]
    4001cfbc:	a907e839 	stp	x25, x26, [x1, #120]
	stp	x27, x28, [x1, #_thread_offset_to_callee_saved_x27_x28]
    4001cfc0:	a908f03b 	stp	x27, x28, [x1, #136]
	stp	x29, x4,  [x1, #_thread_offset_to_callee_saved_x29_sp_el0]
    4001cfc4:	a909903d 	stp	x29, x4, [x1, #152]

	/* Save the current SP_ELx */
	mov	x4, sp
    4001cfc8:	910003e4 	mov	x4, sp
	str	x4, [x1, #_thread_offset_to_callee_saved_sp_elx]
    4001cfcc:	f9005424 	str	x4, [x1, #168]

	/* save current thread's exception depth */
	mrs	x4, tpidrro_el0
    4001cfd0:	d53bd064 	mrs	x4, tpidrro_el0
	lsr	x2, x4, #TPIDRROEL0_EXC_SHIFT
    4001cfd4:	d378fc82 	lsr	x2, x4, #56
	strb	w2, [x1, #_thread_offset_to_exception_depth]
    4001cfd8:	390bc022 	strb	w2, [x1, #752]

	/* retrieve next thread's exception depth */
	ldrb	w2, [x0, #_thread_offset_to_exception_depth]
    4001cfdc:	394bc002 	ldrb	w2, [x0, #752]
	bic	x4, x4, #TPIDRROEL0_EXC_DEPTH
    4001cfe0:	9240dc84 	and	x4, x4, #0xffffffffffffff
	orr	x4, x4, x2, lsl #TPIDRROEL0_EXC_SHIFT
    4001cfe4:	aa02e084 	orr	x4, x4, x2, lsl #56
	msr	tpidrro_el0, x4
    4001cfe8:	d51bd064 	msr	tpidrro_el0, x4
	 * thread variables with offsets added by toolchain.
	 */
	msr	tpidr_el0, x2
#endif

	ldp	x19, x20, [x0, #_thread_offset_to_callee_saved_x19_x20]
    4001cfec:	a944d013 	ldp	x19, x20, [x0, #72]
	ldp	x21, x22, [x0, #_thread_offset_to_callee_saved_x21_x22]
    4001cff0:	a945d815 	ldp	x21, x22, [x0, #88]
	ldp	x23, x24, [x0, #_thread_offset_to_callee_saved_x23_x24]
    4001cff4:	a946e017 	ldp	x23, x24, [x0, #104]
	ldp	x25, x26, [x0, #_thread_offset_to_callee_saved_x25_x26]
    4001cff8:	a947e819 	ldp	x25, x26, [x0, #120]
	ldp	x27, x28, [x0, #_thread_offset_to_callee_saved_x27_x28]
    4001cffc:	a948f01b 	ldp	x27, x28, [x0, #136]
	ldp	x29, x4,  [x0, #_thread_offset_to_callee_saved_x29_sp_el0]
    4001d000:	a949901d 	ldp	x29, x4, [x0, #152]

	/* Restore SP_EL0 */
	msr	sp_el0, x4
    4001d004:	d5184104 	msr	sp_el0, x4

	/* Restore SP_EL1 */
	ldr	x4, [x0, #_thread_offset_to_callee_saved_sp_elx]
    4001d008:	f9405404 	ldr	x4, [x0, #168]
	mov	sp, x4
    4001d00c:	9100009f 	mov	sp, x4
	bl	z_thread_mark_switched_in
	ldp	xzr, x30, [sp], #16
#endif

	/* Return to z_arm64_sync_exc() or _isr_wrapper() */
	ret
    4001d010:	d65f03c0 	ret

000000004001d014 <z_arm64_sync_exc>:
 */

GTEXT(z_arm64_sync_exc)
SECTION_FUNC(TEXT, z_arm64_sync_exc)

	mrs	x0, esr_el1
    4001d014:	d5385200 	mrs	x0, esr_el1
	lsr	x1, x0, #26
    4001d018:	d35afc01 	lsr	x1, x0, #26

#ifdef CONFIG_FPU_SHARING
	cmp	x1, #0x07 /*Access to SIMD or floating-point */
    4001d01c:	f1001c3f 	cmp	x1, #0x7
	bne	1f
    4001d020:	54000081 	b.ne	4001d030 <z_arm64_sync_exc+0x1c>  // b.any
	mov	x0, sp
    4001d024:	910003e0 	mov	x0, sp
	bl	z_arm64_fpu_trap
    4001d028:	94000048 	bl	4001d148 <z_arm64_fpu_trap>
	b	z_arm64_exit_exc_fpu_done
    4001d02c:	1400002c 	b	4001d0dc <z_arm64_exit_exc_fpu_done>
1:
#endif

	cmp	x1, #0x15 /* 0x15 = SVC */
    4001d030:	f100543f 	cmp	x1, #0x15
	bne	inv
    4001d034:	540001a1 	b.ne	4001d068 <inv>  // b.any

	/* Demux the SVC call */
	and	x1, x0, #0xff
    4001d038:	92401c01 	and	x1, x0, #0xff

	cmp	x1, #_SVC_CALL_CONTEXT_SWITCH
    4001d03c:	f100003f 	cmp	x1, #0x0
	beq	context_switch
    4001d040:	540000c0 	b.eq	4001d058 <context_switch>  // b.none

	cmp	x1, #_SVC_CALL_RUNTIME_EXCEPT
    4001d044:	f100083f 	cmp	x1, #0x2
	beq	oops
    4001d048:	54000040 	b.eq	4001d050 <oops>  // b.none

	/* --(_kernel->nested) */
	dec_nest_counter x0, x1
	b	z_arm64_exit_exc
#endif
	b	inv
    4001d04c:	14000007 	b	4001d068 <inv>

000000004001d050 <oops>:

oops:
	mov	x0, sp
    4001d050:	910003e0 	mov	x0, sp
	b	z_arm64_do_kernel_oops
    4001d054:	17ffff62 	b	4001cddc <z_arm64_do_kernel_oops>

000000004001d058 <context_switch>:
	 * Retrieve x0 and x1 from the stack:
	 *
	 *  - x0 = new_thread->switch_handle = switch_to thread
	 *  - x1 = &old_thread->switch_handle = current thread
	 */
	ldp	x0, x1, [sp, ___esf_t_x0_x1_OFFSET]
    4001d058:	a94007e0 	ldp	x0, x1, [sp]

	/* Get old thread from x1 */
	sub	x1, x1, ___thread_t_switch_handle_OFFSET
    4001d05c:	d1034021 	sub	x1, x1, #0xd0

	/* Switch thread */
	bl	z_arm64_context_switch
    4001d060:	97ffffd3 	bl	4001cfac <z_arm64_context_switch>
	b	z_arm64_exit_exc
    4001d064:	1400001d 	b	4001d0d8 <z_arm64_exit_exc>

000000004001d068 <inv>:

inv:
	mov	x0, #0 /* K_ERR_CPU_EXCEPTION */
    4001d068:	d2800000 	mov	x0, #0x0                   	// #0
	mov	x1, sp
    4001d06c:	910003e1 	mov	x1, sp
	bl	z_arm64_fatal_error
    4001d070:	97ffff48 	bl	4001cd90 <z_arm64_fatal_error>

	/* Return here only in case of recoverable error */
	b	z_arm64_exit_exc
    4001d074:	14000019 	b	4001d0d8 <z_arm64_exit_exc>

000000004001d078 <z_arm64_call_svc>:

GTEXT(z_arm64_call_svc)
SECTION_FUNC(TEXT, z_arm64_call_svc)
	svc	#_SVC_CALL_CONTEXT_SWITCH
    4001d078:	d4000001 	svc	#0x0
	ret
    4001d07c:	d65f03c0 	ret

000000004001d080 <arch_new_thread>:
	 * dropping into EL0.
	 */

	pInitCtx = Z_STACK_PTR_TO_FRAME(struct __esf, stack_ptr);

	pInitCtx->x0 = (uint64_t)entry;
    4001d080:	d102c041 	sub	x1, x2, #0xb0
	pInitCtx->x1 = (uint64_t)p1;
    4001d084:	a9351043 	stp	x3, x4, [x2, #-176]
	pInitCtx->x2 = (uint64_t)p2;
	pInitCtx->x3 = (uint64_t)p3;
    4001d088:	a9361845 	stp	x5, x6, [x2, #-160]
		pInitCtx->elr = (uint64_t)arch_user_mode_enter;
	} else {
		pInitCtx->elr = (uint64_t)z_thread_entry;
	}
#else
	pInitCtx->elr = (uint64_t)z_thread_entry;
    4001d08c:	d0ffffe2 	adrp	x2, 4001b000 <z_solve+0x8c4>
    4001d090:	91139042 	add	x2, x2, #0x4e4
    4001d094:	f9005422 	str	x2, [x1, #168]
#endif
	/* Keep using SP_EL1 */
	pInitCtx->spsr = SPSR_MODE_EL1H | DAIF_FIQ_BIT;
    4001d098:	d28008a2 	mov	x2, #0x45                  	// #69
    4001d09c:	f9005022 	str	x2, [x1, #160]

	/* thread birth happens through the exception return path */
	thread->arch.exception_depth = 1;
    4001d0a0:	52800022 	mov	w2, #0x1                   	// #1
	 * We are saving SP_EL1 to pop out entry and parameters when going
	 * through z_arm64_exit_exc(). For user threads the definitive location
	 * of SP_EL1 will be set implicitly when going through
	 * z_arm64_userspace_enter() (see comments there)
	 */
	thread->callee_saved.sp_elx = (uint64_t)pInitCtx;
    4001d0a4:	f9005401 	str	x1, [x0, #168]

	thread->switch_handle = thread;
    4001d0a8:	f9006800 	str	x0, [x0, #208]
	thread->arch.exception_depth = 1;
    4001d0ac:	390bc002 	strb	w2, [x0, #752]
}
    4001d0b0:	d65f03c0 	ret

000000004001d0b4 <z_arch_get_next_switch_handle>:

void *z_arch_get_next_switch_handle(struct k_thread **old_thread)
{
    4001d0b4:	aa0003e1 	mov	x1, x0
	*old_thread =  _current;
    4001d0b8:	d0000320 	adrp	x0, 40083000 <ws+0x3a40>
    4001d0bc:	f944f000 	ldr	x0, [x0, #2528]
    4001d0c0:	f9000020 	str	x0, [x1]

	return z_get_next_switch_handle(*old_thread);
    4001d0c4:	14000790 	b	4001ef04 <z_get_next_switch_handle>

000000004001d0c8 <z_arm64_serror>:

GTEXT(z_arm64_serror)
SECTION_FUNC(TEXT, z_arm64_serror)

	mov	x1, sp
    4001d0c8:	910003e1 	mov	x1, sp
	mov	x0, #0 /* K_ERR_CPU_EXCEPTION */
    4001d0cc:	d2800000 	mov	x0, #0x0                   	// #0

	bl	z_arm64_fatal_error
    4001d0d0:	97ffff30 	bl	4001cd90 <z_arm64_fatal_error>
	/* Return here only in case of recoverable error */
	b	z_arm64_exit_exc
    4001d0d4:	14000001 	b	4001d0d8 <z_arm64_exit_exc>

000000004001d0d8 <z_arm64_exit_exc>:

GTEXT(z_arm64_exit_exc)
SECTION_FUNC(TEXT, z_arm64_exit_exc)

#ifdef CONFIG_FPU_SHARING
	bl	z_arm64_fpu_exit_exc
    4001d0d8:	94000055 	bl	4001d22c <z_arm64_fpu_exit_exc>

000000004001d0dc <z_arm64_exit_exc_fpu_done>:

 GTEXT(z_arm64_exit_exc_fpu_done)
 z_arm64_exit_exc_fpu_done:
#endif

	ldp	x0, x1, [sp, ___esf_t_spsr_elr_OFFSET]
    4001d0dc:	a94a07e0 	ldp	x0, x1, [sp, #160]
	msr	spsr_el1, x0
    4001d0e0:	d5184000 	msr	spsr_el1, x0
	msr	elr_el1, x1
    4001d0e4:	d5184021 	msr	elr_el1, x1

	/* Restore the kernel/user mode flag and decrement exception depth */
	tst	x0, #SPSR_MODE_MASK	/* EL0 == 0 */
    4001d0e8:	f2400c1f 	tst	x0, #0xf
	mrs	x0, tpidrro_el0
    4001d0ec:	d53bd060 	mrs	x0, tpidrro_el0
	mov	x1, #TPIDRROEL0_EXC_UNIT
    4001d0f0:	d2e02001 	mov	x1, #0x100000000000000     	// #72057594037927936
	orr	x2, x0, #TPIDRROEL0_IN_EL0
    4001d0f4:	b2400002 	orr	x2, x0, #0x1
	csel	x0, x2, x0, eq
    4001d0f8:	9a800040 	csel	x0, x2, x0, eq  // eq = none
	sub	x0, x0, x1
    4001d0fc:	cb010000 	sub	x0, x0, x1
	msr	tpidrro_el0, x0
    4001d100:	d51bd060 	msr	tpidrro_el0, x0

	ldp	x0, x1, [sp, ___esf_t_x0_x1_OFFSET]
    4001d104:	a94007e0 	ldp	x0, x1, [sp]
	ldp	x2, x3, [sp, ___esf_t_x2_x3_OFFSET]
    4001d108:	a9410fe2 	ldp	x2, x3, [sp, #16]
	ldp	x4, x5, [sp, ___esf_t_x4_x5_OFFSET]
    4001d10c:	a94217e4 	ldp	x4, x5, [sp, #32]
	ldp	x6, x7, [sp, ___esf_t_x6_x7_OFFSET]
    4001d110:	a9431fe6 	ldp	x6, x7, [sp, #48]
	ldp	x8, x9, [sp, ___esf_t_x8_x9_OFFSET]
    4001d114:	a94427e8 	ldp	x8, x9, [sp, #64]
	ldp	x10, x11, [sp, ___esf_t_x10_x11_OFFSET]
    4001d118:	a9452fea 	ldp	x10, x11, [sp, #80]
	ldp	x12, x13, [sp, ___esf_t_x12_x13_OFFSET]
    4001d11c:	a94637ec 	ldp	x12, x13, [sp, #96]
	ldp	x14, x15, [sp, ___esf_t_x14_x15_OFFSET]
    4001d120:	a9473fee 	ldp	x14, x15, [sp, #112]
	ldp	x16, x17, [sp, ___esf_t_x16_x17_OFFSET]
    4001d124:	a94847f0 	ldp	x16, x17, [sp, #128]
	ldp	x18, x30, [sp, ___esf_t_x18_x30_OFFSET]
    4001d128:	a9497bf2 	ldp	x18, x30, [sp, #144]

	add	sp, sp, ___esf_t_SIZEOF
    4001d12c:	9102c3ff 	add	sp, sp, #0xb0
	 * - The address of ret in z_arm64_call_svc()
	 * - The address of the next instruction at the time of the IRQ when the
	 *   thread was switched out.
	 * - The address of z_thread_entry() for new threads (see thread.c).
	 */
	eret
    4001d130:	d69f03e0 	eret

000000004001d134 <z_arm64_fpu_enter_exc>:
MAKE_REG_HELPER_EL123(cpacr)
    4001d134:	d5381040 	mrs	x0, cpacr_el1
void z_arm64_fpu_enter_exc(void)
{
	__ASSERT(read_daif() & DAIF_IRQ_BIT, "must be called with IRQs disabled");

	/* always deny FPU access whenever an exception is entered */
	write_cpacr_el1(read_cpacr_el1() & ~CPACR_EL1_FPEN_NOTRAP);
    4001d138:	926af400 	and	x0, x0, #0xffffffffffcfffff
    4001d13c:	d5181040 	msr	cpacr_el1, x0
	isb();
    4001d140:	d5033fdf 	isb
}
    4001d144:	d65f03c0 	ret

000000004001d148 <z_arm64_fpu_trap>:
 * there is nothing to save/restore for that context... as long as we
 * don't get interrupted that is. To ensure that we mask interrupts to
 * the triggering exception context.
 */
void z_arm64_fpu_trap(z_arch_esf_t *esf)
{
    4001d148:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    4001d14c:	910003fd 	mov	x29, sp
    4001d150:	a90153f3 	stp	x19, x20, [sp, #16]
    4001d154:	aa0003f3 	mov	x19, x0
MAKE_REG_HELPER(tpidrro_el0);
    4001d158:	d53bd060 	mrs	x0, tpidrro_el0
	return (_cpu_t *)(read_tpidrro_el0() & TPIDRROEL0_CURR_CPU);
}

static ALWAYS_INLINE int arch_exception_depth(void)
{
	return (read_tpidrro_el0() & TPIDRROEL0_EXC_DEPTH) / TPIDRROEL0_EXC_UNIT;
    4001d15c:	d378fc00 	lsr	x0, x0, #56
	if (arch_exception_depth() <= 1) {
    4001d160:	f100041f 	cmp	x0, #0x1
    4001d164:	54000309 	b.ls	4001d1c4 <z_arm64_fpu_trap+0x7c>  // b.plast
	uint32_t *pc = (uint32_t *)esf->elr;
    4001d168:	f9405662 	ldr	x2, [x19, #168]
	uintptr_t sp = (uintptr_t)esf + sizeof(*esf);
    4001d16c:	9102c263 	add	x3, x19, #0xb0
		if ((insn & 0xffc003f8) != 0x3d8003e0)
    4001d170:	52807f04 	mov	w4, #0x3f8                 	// #1016
    4001d174:	72bff804 	movk	w4, #0xffc0, lsl #16
	uint32_t *pc = (uint32_t *)esf->elr;
    4001d178:	aa0203e0 	mov	x0, x2
		if ((insn & 0xffc003f8) != 0x3d8003e0)
    4001d17c:	52807c05 	mov	w5, #0x3e0                 	// #992
    4001d180:	72a7b005 	movk	w5, #0x3d80, lsl #16
		uint32_t insn = *pc;
    4001d184:	b9400001 	ldr	w1, [x0]
		if ((insn & 0xffc003f8) != 0x3d8003e0)
    4001d188:	0a040026 	and	w6, w1, w4
    4001d18c:	6b0500df 	cmp	w6, w5
    4001d190:	540000e1 	b.ne	4001d1ac <z_arm64_fpu_trap+0x64>  // b.any
		uint32_t pimm = (insn >> 10) & 0xfff;
    4001d194:	d34a5421 	ubfx	x1, x1, #10, #12
		pc++;
    4001d198:	91001000 	add	x0, x0, #0x4
		*(__int128 *)(sp + pimm * 16) = 0;
    4001d19c:	d37c2c21 	ubfiz	x1, x1, #4, #12
    4001d1a0:	8b030021 	add	x1, x1, x3
    4001d1a4:	a9007c3f 	stp	xzr, xzr, [x1]
	for (;;) {
    4001d1a8:	17fffff7 	b	4001d184 <z_arm64_fpu_trap+0x3c>
	if (pc != (uint32_t *)esf->elr) {
    4001d1ac:	eb00005f 	cmp	x2, x0
    4001d1b0:	540000a0 	b.eq	4001d1c4 <z_arm64_fpu_trap+0x7c>  // b.none
		esf->elr = (uintptr_t)pc;
    4001d1b4:	f9005660 	str	x0, [x19, #168]
	_current_cpu->arch.fpu_owner = _current;

	/* restore our content */
	z_arm64_fpu_restore(&_current->arch.saved_fp_context);
	DBG("restore", _current);
}
    4001d1b8:	a94153f3 	ldp	x19, x20, [sp, #16]
    4001d1bc:	a8c27bfd 	ldp	x29, x30, [sp], #32
    4001d1c0:	d65f03c0 	ret
MAKE_REG_HELPER_EL123(cpacr)
    4001d1c4:	d5381040 	mrs	x0, cpacr_el1
	write_cpacr_el1(read_cpacr_el1() | CPACR_EL1_FPEN_NOTRAP);
    4001d1c8:	b26c0400 	orr	x0, x0, #0x300000
    4001d1cc:	d5181040 	msr	cpacr_el1, x0
	isb();
    4001d1d0:	d5033fdf 	isb
	struct k_thread *owner = _current_cpu->arch.fpu_owner;
    4001d1d4:	d0000334 	adrp	x20, 40083000 <ws+0x3a40>
    4001d1d8:	91274294 	add	x20, x20, #0x9d0
    4001d1dc:	f9401680 	ldr	x0, [x20, #40]
	if (owner) {
    4001d1e0:	b40000a0 	cbz	x0, 4001d1f4 <z_arm64_fpu_trap+0xac>
		z_arm64_fpu_save(&owner->arch.saved_fp_context);
    4001d1e4:	91038000 	add	x0, x0, #0xe0
    4001d1e8:	94000021 	bl	4001d26c <z_arm64_fpu_save>
		dsb();
    4001d1ec:	d5033f9f 	dsb	sy
		_current_cpu->arch.fpu_owner = NULL;
    4001d1f0:	f900169f 	str	xzr, [x20, #40]
MAKE_REG_HELPER(tpidrro_el0);
    4001d1f4:	d53bd060 	mrs	x0, tpidrro_el0
    4001d1f8:	d378fc00 	lsr	x0, x0, #56
	if (arch_exception_depth() > 1) {
    4001d1fc:	f100041f 	cmp	x0, #0x1
    4001d200:	540000a9 	b.ls	4001d214 <z_arm64_fpu_trap+0xcc>  // b.plast
		esf->spsr |= DAIF_IRQ_BIT;
    4001d204:	f9405260 	ldr	x0, [x19, #160]
    4001d208:	b2790000 	orr	x0, x0, #0x80
    4001d20c:	f9005260 	str	x0, [x19, #160]
		return;
    4001d210:	17ffffea 	b	4001d1b8 <z_arm64_fpu_trap+0x70>
	_current_cpu->arch.fpu_owner = _current;
    4001d214:	f9400a80 	ldr	x0, [x20, #16]
    4001d218:	f9001680 	str	x0, [x20, #40]
}
    4001d21c:	a94153f3 	ldp	x19, x20, [sp, #16]
	z_arm64_fpu_restore(&_current->arch.saved_fp_context);
    4001d220:	91038000 	add	x0, x0, #0xe0
}
    4001d224:	a8c27bfd 	ldp	x29, x30, [sp], #32
	z_arm64_fpu_restore(&_current->arch.saved_fp_context);
    4001d228:	14000026 	b	4001d2c0 <z_arm64_fpu_restore>

000000004001d22c <z_arm64_fpu_exit_exc>:
MAKE_REG_HELPER_EL123(cpacr)
    4001d22c:	d5381040 	mrs	x0, cpacr_el1
MAKE_REG_HELPER(tpidrro_el0);
    4001d230:	d53bd061 	mrs	x1, tpidrro_el0
    4001d234:	d378fc21 	lsr	x1, x1, #56
{
	__ASSERT(read_daif() & DAIF_IRQ_BIT, "must be called with IRQs disabled");

	uint64_t cpacr = read_cpacr_el1();

	if (arch_exception_depth() == 1) {
    4001d238:	f100043f 	cmp	x1, #0x1
    4001d23c:	54000141 	b.ne	4001d264 <z_arm64_fpu_exit_exc+0x38>  // b.any
		/* We're about to leave exception mode */
		if (_current_cpu->arch.fpu_owner == _current) {
    4001d240:	d0000321 	adrp	x1, 40083000 <ws+0x3a40>
    4001d244:	91274021 	add	x1, x1, #0x9d0
    4001d248:	f9401422 	ldr	x2, [x1, #40]
    4001d24c:	f9400821 	ldr	x1, [x1, #16]
    4001d250:	eb01005f 	cmp	x2, x1
    4001d254:	54000081 	b.ne	4001d264 <z_arm64_fpu_exit_exc+0x38>  // b.any
			/* turn on FPU access */
			write_cpacr_el1(cpacr | CPACR_EL1_FPEN_NOTRAP);
    4001d258:	b26c0400 	orr	x0, x0, #0x300000
MAKE_REG_HELPER_EL123(cpacr)
    4001d25c:	d5181040 	msr	cpacr_el1, x0
		 * access as we want to make sure IRQs are disabled before
		 * granting them access.
		 */
		write_cpacr_el1(cpacr & ~CPACR_EL1_FPEN_NOTRAP);
	}
}
    4001d260:	d65f03c0 	ret
		write_cpacr_el1(cpacr & ~CPACR_EL1_FPEN_NOTRAP);
    4001d264:	926af400 	and	x0, x0, #0xffffffffffcfffff
    4001d268:	17fffffd 	b	4001d25c <z_arm64_fpu_exit_exc+0x30>

000000004001d26c <z_arm64_fpu_save>:
_ASM_FILE_PROLOGUE

GTEXT(z_arm64_fpu_save)
SECTION_FUNC(TEXT, z_arm64_fpu_save)

	stp	q0,  q1,  [x0, #(16 *  0)]
    4001d26c:	ad000400 	stp	q0, q1, [x0]
	stp	q2,  q3,  [x0, #(16 *  2)]
    4001d270:	ad010c02 	stp	q2, q3, [x0, #32]
	stp	q4,  q5,  [x0, #(16 *  4)]
    4001d274:	ad021404 	stp	q4, q5, [x0, #64]
	stp	q6,  q7,  [x0, #(16 *  6)]
    4001d278:	ad031c06 	stp	q6, q7, [x0, #96]
	stp	q8,  q9,  [x0, #(16 *  8)]
    4001d27c:	ad042408 	stp	q8, q9, [x0, #128]
	stp	q10, q11, [x0, #(16 * 10)]
    4001d280:	ad052c0a 	stp	q10, q11, [x0, #160]
	stp	q12, q13, [x0, #(16 * 12)]
    4001d284:	ad06340c 	stp	q12, q13, [x0, #192]
	stp	q14, q15, [x0, #(16 * 14)]
    4001d288:	ad073c0e 	stp	q14, q15, [x0, #224]
	stp	q16, q17, [x0, #(16 * 16)]
    4001d28c:	ad084410 	stp	q16, q17, [x0, #256]
	stp	q18, q19, [x0, #(16 * 18)]
    4001d290:	ad094c12 	stp	q18, q19, [x0, #288]
	stp	q20, q21, [x0, #(16 * 20)]
    4001d294:	ad0a5414 	stp	q20, q21, [x0, #320]
	stp	q22, q23, [x0, #(16 * 22)]
    4001d298:	ad0b5c16 	stp	q22, q23, [x0, #352]
	stp	q24, q25, [x0, #(16 * 24)]
    4001d29c:	ad0c6418 	stp	q24, q25, [x0, #384]
	stp	q26, q27, [x0, #(16 * 26)]
    4001d2a0:	ad0d6c1a 	stp	q26, q27, [x0, #416]
	stp	q28, q29, [x0, #(16 * 28)]
    4001d2a4:	ad0e741c 	stp	q28, q29, [x0, #448]
	stp	q30, q31, [x0, #(16 * 30)]
    4001d2a8:	ad0f7c1e 	stp	q30, q31, [x0, #480]

	mrs	x1, fpsr
    4001d2ac:	d53b4421 	mrs	x1, fpsr
	mrs	x2, fpcr
    4001d2b0:	d53b4402 	mrs	x2, fpcr
	str	w1, [x0, #(16 * 32 + 0)]
    4001d2b4:	b9020001 	str	w1, [x0, #512]
	str	w2, [x0, #(16 * 32 + 4)]
    4001d2b8:	b9020402 	str	w2, [x0, #516]

	ret
    4001d2bc:	d65f03c0 	ret

000000004001d2c0 <z_arm64_fpu_restore>:

GTEXT(z_arm64_fpu_restore)
SECTION_FUNC(TEXT, z_arm64_fpu_restore)

	ldp	q0,  q1,  [x0, #(16 *  0)]
    4001d2c0:	ad400400 	ldp	q0, q1, [x0]
	ldp	q2,  q3,  [x0, #(16 *  2)]
    4001d2c4:	ad410c02 	ldp	q2, q3, [x0, #32]
	ldp	q4,  q5,  [x0, #(16 *  4)]
    4001d2c8:	ad421404 	ldp	q4, q5, [x0, #64]
	ldp	q6,  q7,  [x0, #(16 *  6)]
    4001d2cc:	ad431c06 	ldp	q6, q7, [x0, #96]
	ldp	q8,  q9,  [x0, #(16 *  8)]
    4001d2d0:	ad442408 	ldp	q8, q9, [x0, #128]
	ldp	q10, q11, [x0, #(16 * 10)]
    4001d2d4:	ad452c0a 	ldp	q10, q11, [x0, #160]
	ldp	q12, q13, [x0, #(16 * 12)]
    4001d2d8:	ad46340c 	ldp	q12, q13, [x0, #192]
	ldp	q14, q15, [x0, #(16 * 14)]
    4001d2dc:	ad473c0e 	ldp	q14, q15, [x0, #224]
	ldp	q16, q17, [x0, #(16 * 16)]
    4001d2e0:	ad484410 	ldp	q16, q17, [x0, #256]
	ldp	q18, q19, [x0, #(16 * 18)]
    4001d2e4:	ad494c12 	ldp	q18, q19, [x0, #288]
	ldp	q20, q21, [x0, #(16 * 20)]
    4001d2e8:	ad4a5414 	ldp	q20, q21, [x0, #320]
	ldp	q22, q23, [x0, #(16 * 22)]
    4001d2ec:	ad4b5c16 	ldp	q22, q23, [x0, #352]
	ldp	q24, q25, [x0, #(16 * 24)]
    4001d2f0:	ad4c6418 	ldp	q24, q25, [x0, #384]
	ldp	q26, q27, [x0, #(16 * 26)]
    4001d2f4:	ad4d6c1a 	ldp	q26, q27, [x0, #416]
	ldp	q28, q29, [x0, #(16 * 28)]
    4001d2f8:	ad4e741c 	ldp	q28, q29, [x0, #448]
	ldp	q30, q31, [x0, #(16 * 30)]
    4001d2fc:	ad4f7c1e 	ldp	q30, q31, [x0, #480]

	ldr	w1, [x0, #(16 * 32 + 0)]
    4001d300:	b9420001 	ldr	w1, [x0, #512]
	ldr	w2, [x0, #(16 * 32 + 4)]
    4001d304:	b9420402 	ldr	w2, [x0, #516]
	msr	fpsr, x1
    4001d308:	d51b4421 	msr	fpsr, x1
	msr	fpcr, x2
    4001d30c:	d51b4402 	msr	fpcr, x2

	ret
    4001d310:	d65f03c0 	ret

000000004001d314 <new_table>:
{
	unsigned int i;

	/* Look for a free table. */
	for (i = 0U; i < CONFIG_MAX_XLAT_TABLES; i++) {
		if (xlat_use_count[i] == 0U) {
    4001d314:	d0000322 	adrp	x2, 40083000 <ws+0x3a40>
    4001d318:	912e8042 	add	x2, x2, #0xba0
{
    4001d31c:	d2800001 	mov	x1, #0x0                   	// #0
		if (xlat_use_count[i] == 0U) {
    4001d320:	78617843 	ldrh	w3, [x2, x1, lsl #1]
    4001d324:	2a0103e0 	mov	w0, w1
    4001d328:	35000103 	cbnz	w3, 4001d348 <new_table+0x34>
			xlat_use_count[i] = 1U;
    4001d32c:	52800021 	mov	w1, #0x1                   	// #1
    4001d330:	78205841 	strh	w1, [x2, w0, uxtw #1]
			return &xlat_tables[i * Ln_XLAT_NUM_ENTRIES];
    4001d334:	d3745800 	ubfiz	x0, x0, #12, #23
    4001d338:	f0000021 	adrp	x1, 40024000 <xlat_tables>
    4001d33c:	91000021 	add	x1, x1, #0x0
    4001d340:	8b010000 	add	x0, x0, x1
		}
	}

	LOG_ERR("CONFIG_MAX_XLAT_TABLES, too small");
	return NULL;
}
    4001d344:	d65f03c0 	ret
	for (i = 0U; i < CONFIG_MAX_XLAT_TABLES; i++) {
    4001d348:	91000421 	add	x1, x1, #0x1
    4001d34c:	f100203f 	cmp	x1, #0x8
    4001d350:	54fffe81 	b.ne	4001d320 <new_table+0xc>  // b.any
	return NULL;
    4001d354:	d2800000 	mov	x0, #0x0                   	// #0
    4001d358:	17fffffb 	b	4001d344 <new_table+0x30>

000000004001d35c <table_usage>:

static inline unsigned int table_index(uint64_t *pte)
{
	unsigned int i = (pte - xlat_tables) / Ln_XLAT_NUM_ENTRIES;
    4001d35c:	f0000022 	adrp	x2, 40024000 <xlat_tables>
    4001d360:	91000042 	add	x2, x2, #0x0
    4001d364:	cb020002 	sub	x2, x0, x2
    4001d368:	d2804000 	mov	x0, #0x200                 	// #512
/* Adjusts usage count and returns current count. */
static int table_usage(uint64_t *table, int adjustment)
{
	unsigned int i = table_index(table);

	xlat_use_count[i] += adjustment;
    4001d36c:	d0000323 	adrp	x3, 40083000 <ws+0x3a40>
    4001d370:	912e8063 	add	x3, x3, #0xba0
	unsigned int i = (pte - xlat_tables) / Ln_XLAT_NUM_ENTRIES;
    4001d374:	9343fc42 	asr	x2, x2, #3
    4001d378:	9ac00c42 	sdiv	x2, x2, x0
	xlat_use_count[i] += adjustment;
    4001d37c:	2a0203e2 	mov	w2, w2
    4001d380:	78627860 	ldrh	w0, [x3, x2, lsl #1]
    4001d384:	0b000020 	add	w0, w1, w0
    4001d388:	12003c00 	and	w0, w0, #0xffff
    4001d38c:	78227860 	strh	w0, [x3, x2, lsl #1]
	__ASSERT(xlat_use_count[i] > 0, "usage count underflow");
	return xlat_use_count[i];
}
    4001d390:	d65f03c0 	ret

000000004001d394 <set_mapping.constprop.0>:
}

static inline bool is_desc_superset(uint64_t desc1, uint64_t desc2,
				    unsigned int level)
{
	uint64_t mask = DESC_ATTRS_MASK | GENMASK(47, LEVEL_TO_VA_SIZE_SHIFT(level));
    4001d394:	1281ff8e 	mov	w14, #0xfffff003            	// #-4093
    4001d398:	d281ff8f 	mov	x15, #0xffc                 	// #4092
		       uintptr_t virt, size_t size,
		       uint64_t desc, bool may_overwrite)
{
	uint64_t *pte, *ptes[XLAT_LAST_LEVEL + 1];
	uint64_t level_size;
	uint64_t *table = ptables->base_xlat_table;
    4001d39c:	d000032b 	adrp	x11, 40083000 <ws+0x3a40>
    4001d3a0:	f944cd65 	ldr	x5, [x11, #2456]
	xlat_use_count[i] = 0U;
    4001d3a4:	d000032c 	adrp	x12, 40083000 <ws+0x3a40>
    4001d3a8:	912e818c 	add	x12, x12, #0xba0
static int set_mapping(struct arm_mmu_ptables *ptables,
    4001d3ac:	aa0003ea 	mov	x10, x0
    4001d3b0:	aa0103e9 	mov	x9, x1
    4001d3b4:	aa0203e8 	mov	x8, x2
    4001d3b8:	12001c6d 	and	w13, w3, #0xff
	unsigned int level = BASE_XLAT_LEVEL;
    4001d3bc:	52800032 	mov	w18, #0x1                   	// #1
	uint64_t mask = DESC_ATTRS_MASK | GENMASK(47, LEVEL_TO_VA_SIZE_SHIFT(level));
    4001d3c0:	f2dfffee 	movk	x14, #0xffff, lsl #32
    4001d3c4:	f2ffff0f 	movk	x15, #0xfff8, lsl #48
	int ret = 0;

	while (size) {
    4001d3c8:	b5000ca1 	cbnz	x1, 4001d55c <set_mapping.constprop.0+0x1c8>
	int ret = 0;
    4001d3cc:	52800000 	mov	w0, #0x0                   	// #0
		table = ptables->base_xlat_table;
		level = BASE_XLAT_LEVEL;
	}

	return ret;
}
    4001d3d0:	d65f03c0 	ret
		if (!may_overwrite && !is_free_desc(*pte)) {
    4001d3d4:	3500006d 	cbnz	w13, 4001d3e0 <set_mapping.constprop.0+0x4c>
    4001d3d8:	f24004bf 	tst	x5, #0x3
    4001d3dc:	54000ae1 	b.ne	4001d538 <set_mapping.constprop.0+0x1a4>  // b.any
		level_size = 1ULL << LEVEL_TO_VA_SIZE_SHIFT(level);
    4001d3e0:	d2800021 	mov	x1, #0x1                   	// #1
	return (desc1 & mask) == (desc2 & mask);
    4001d3e4:	ca0800a2 	eor	x2, x5, x8
		level_size = 1ULL << LEVEL_TO_VA_SIZE_SHIFT(level);
    4001d3e8:	9ac62026 	lsl	x6, x1, x6
	uint64_t mask = DESC_ATTRS_MASK | GENMASK(47, LEVEL_TO_VA_SIZE_SHIFT(level));
    4001d3ec:	cb0603e0 	neg	x0, x6
    4001d3f0:	8a0e0000 	and	x0, x0, x14
    4001d3f4:	aa0f0000 	orr	x0, x0, x15
		if (is_desc_superset(*pte, desc, level)) {
    4001d3f8:	ea02001f 	tst	x0, x2
    4001d3fc:	540001c1 	b.ne	4001d434 <set_mapping.constprop.0+0xa0>  // b.any
			level_size -= (virt & (level_size - 1));
    4001d400:	d10004c3 	sub	x3, x6, #0x1
    4001d404:	8a0a0063 	and	x3, x3, x10
    4001d408:	cb0300c6 	sub	x6, x6, x3
			if (level_size > size) {
    4001d40c:	eb0900df 	cmp	x6, x9
    4001d410:	9a8990c6 	csel	x6, x6, x9, ls  // ls = plast
		desc += desc ? level_size : 0;
    4001d414:	f100011f 	cmp	x8, #0x0
		virt += level_size;
    4001d418:	8b06014a 	add	x10, x10, x6
		desc += desc ? level_size : 0;
    4001d41c:	9a9f10c0 	csel	x0, x6, xzr, ne  // ne = any
		size -= level_size;
    4001d420:	cb060129 	sub	x9, x9, x6
		table = ptables->base_xlat_table;
    4001d424:	f944cd65 	ldr	x5, [x11, #2456]
		desc += desc ? level_size : 0;
    4001d428:	8b000108 	add	x8, x8, x0
		level = BASE_XLAT_LEVEL;
    4001d42c:	52800032 	mov	w18, #0x1                   	// #1
    4001d430:	1400005e 	b	4001d5a8 <set_mapping.constprop.0+0x214>
		if ((size < level_size) || (virt & (level_size - 1))) {
    4001d434:	eb0900df 	cmp	x6, x9
    4001d438:	54000088 	b.hi	4001d448 <set_mapping.constprop.0+0xb4>  // b.pmore
    4001d43c:	d10004c0 	sub	x0, x6, #0x1
    4001d440:	ea0a001f 	tst	x0, x10
    4001d444:	540003c0 	b.eq	4001d4bc <set_mapping.constprop.0+0x128>  // b.none
	table = new_table();
    4001d448:	97ffffb3 	bl	4001d314 <new_table>
    4001d44c:	aa0003e5 	mov	x5, x0
	if (!table) {
    4001d450:	b4000780 	cbz	x0, 4001d540 <set_mapping.constprop.0+0x1ac>
	if (!is_free_desc(*pte)) {
    4001d454:	f9400080 	ldr	x0, [x4]
    4001d458:	f240041f 	tst	x0, #0x3
    4001d45c:	540002a0 	b.eq	4001d4b0 <set_mapping.constprop.0+0x11c>  // b.none
		if (level + 1 == XLAT_LAST_LEVEL) {
    4001d460:	71000a5f 	cmp	w18, #0x2
    4001d464:	54000041 	b.ne	4001d46c <set_mapping.constprop.0+0xd8>  // b.any
			desc |= PTE_PAGE_DESC;
    4001d468:	b2400400 	orr	x0, x0, #0x3
		stride_shift = LEVEL_TO_VA_SIZE_SHIFT(level + 1);
    4001d46c:	110078e7 	add	w7, w7, #0x1e
    4001d470:	d2800001 	mov	x1, #0x0                   	// #0
			table[i] = desc | (i << stride_shift);
    4001d474:	1ac72022 	lsl	w2, w1, w7
    4001d478:	aa000042 	orr	x2, x2, x0
    4001d47c:	f82178a2 	str	x2, [x5, x1, lsl #3]
		for (i = 0U; i < Ln_XLAT_NUM_ENTRIES; i++) {
    4001d480:	91000421 	add	x1, x1, #0x1
    4001d484:	f108003f 	cmp	x1, #0x200
    4001d488:	54ffff61 	b.ne	4001d474 <set_mapping.constprop.0+0xe0>  // b.any
		table_usage(table, Ln_XLAT_NUM_ENTRIES);
    4001d48c:	aa0503e0 	mov	x0, x5
		table_usage(pte, 1);
    4001d490:	97ffffb3 	bl	4001d35c <table_usage>
	table_usage(table, 1);
    4001d494:	52800021 	mov	w1, #0x1                   	// #1
	*pte = PTE_TABLE_DESC | (uint64_t)table;
    4001d498:	b24004a0 	orr	x0, x5, #0x3
    4001d49c:	f9000080 	str	x0, [x4]
			level++;
    4001d4a0:	0b010252 	add	w18, w18, w1
	table_usage(table, 1);
    4001d4a4:	aa0503e0 	mov	x0, x5
    4001d4a8:	97ffffad 	bl	4001d35c <table_usage>
			continue;
    4001d4ac:	1400003f 	b	4001d5a8 <set_mapping.constprop.0+0x214>
		table_usage(pte, 1);
    4001d4b0:	aa0403e0 	mov	x0, x4
    4001d4b4:	52800021 	mov	w1, #0x1                   	// #1
    4001d4b8:	17fffff6 	b	4001d490 <set_mapping.constprop.0+0xfc>
		if (is_free_desc(*pte)) {
    4001d4bc:	f24004bf 	tst	x5, #0x3
    4001d4c0:	54000061 	b.ne	4001d4cc <set_mapping.constprop.0+0x138>  // b.any
			table_usage(pte, 1);
    4001d4c4:	aa0403e0 	mov	x0, x4
    4001d4c8:	97ffffa5 	bl	4001d35c <table_usage>
		if (!desc) {
    4001d4cc:	b50003e8 	cbnz	x8, 4001d548 <set_mapping.constprop.0+0x1b4>
			table_usage(pte, -1);
    4001d4d0:	aa0403e0 	mov	x0, x4
    4001d4d4:	12800001 	mov	w1, #0xffffffff            	// #-1
    4001d4d8:	97ffffa1 	bl	4001d35c <table_usage>
    4001d4dc:	d2800003 	mov	x3, #0x0                   	// #0
	unsigned int i = (pte - xlat_tables) / Ln_XLAT_NUM_ENTRIES;
    4001d4e0:	f0000025 	adrp	x5, 40024000 <xlat_tables>
    4001d4e4:	910000a5 	add	x5, x5, #0x0
    4001d4e8:	d2804007 	mov	x7, #0x200                 	// #512
	*pte = desc;
    4001d4ec:	f9000083 	str	x3, [x4]
		while (level != BASE_XLAT_LEVEL &&
    4001d4f0:	7100065f 	cmp	w18, #0x1
    4001d4f4:	54fff900 	b.eq	4001d414 <set_mapping.constprop.0+0x80>  // b.none
	return table_usage(table, 0) == 1;
    4001d4f8:	aa0403e0 	mov	x0, x4
    4001d4fc:	52800001 	mov	w1, #0x0                   	// #0
    4001d500:	97ffff97 	bl	4001d35c <table_usage>
		while (level != BASE_XLAT_LEVEL &&
    4001d504:	7100041f 	cmp	w0, #0x1
    4001d508:	54fff861 	b.ne	4001d414 <set_mapping.constprop.0+0x80>  // b.any
	unsigned int i = (pte - xlat_tables) / Ln_XLAT_NUM_ENTRIES;
    4001d50c:	cb050084 	sub	x4, x4, x5
			pte = ptes[--level];
    4001d510:	51000652 	sub	w18, w18, #0x1
			table_usage(pte, -1);
    4001d514:	12800001 	mov	w1, #0xffffffff            	// #-1
	unsigned int i = (pte - xlat_tables) / Ln_XLAT_NUM_ENTRIES;
    4001d518:	9343fc84 	asr	x4, x4, #3
    4001d51c:	9ac70c84 	sdiv	x4, x4, x7
	xlat_use_count[i] = 0U;
    4001d520:	7824599f 	strh	wzr, [x12, w4, uxtw #1]
			pte = ptes[--level];
    4001d524:	f8725a64 	ldr	x4, [x19, w18, uxtw #3]
			table_usage(pte, -1);
    4001d528:	aa0403e0 	mov	x0, x4
	*pte = desc;
    4001d52c:	f900009f 	str	xzr, [x4]
			table_usage(pte, -1);
    4001d530:	97ffff8b 	bl	4001d35c <table_usage>
    4001d534:	17ffffef 	b	4001d4f0 <set_mapping.constprop.0+0x15c>
			ret = -EBUSY;
    4001d538:	128001e0 	mov	w0, #0xfffffff0            	// #-16
    4001d53c:	1400001d 	b	4001d5b0 <set_mapping.constprop.0+0x21c>
				ret = -ENOMEM;
    4001d540:	12800160 	mov	w0, #0xfffffff4            	// #-12
	return ret;
    4001d544:	1400001b 	b	4001d5b0 <set_mapping.constprop.0+0x21c>
		desc |= (level == XLAT_LAST_LEVEL) ? PTE_PAGE_DESC : PTE_BLOCK_DESC;
    4001d548:	71000e5f 	cmp	w18, #0x3
    4001d54c:	d2800063 	mov	x3, #0x3                   	// #3
    4001d550:	9a9f0463 	csinc	x3, x3, xzr, eq  // eq = none
    4001d554:	aa030103 	orr	x3, x8, x3
    4001d558:	17ffffe2 	b	4001d4e0 <set_mapping.constprop.0+0x14c>
static int set_mapping(struct arm_mmu_ptables *ptables,
    4001d55c:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    4001d560:	910003fd 	mov	x29, sp
    4001d564:	f9000bf3 	str	x19, [sp, #16]
		pte = &table[XLAT_TABLE_VA_IDX(virt, level)];
    4001d568:	12800107 	mov	w7, #0xfffffff7            	// #-9
		ptes[level] = pte;
    4001d56c:	910083f3 	add	x19, sp, #0x20
	return level != XLAT_LAST_LEVEL &&
    4001d570:	71000e5f 	cmp	w18, #0x3
		pte = &table[XLAT_TABLE_VA_IDX(virt, level)];
    4001d574:	1b077e47 	mul	w7, w18, w7
    4001d578:	11009ce6 	add	w6, w7, #0x27
    4001d57c:	9ac62540 	lsr	x0, x10, x6
    4001d580:	d37d2000 	ubfiz	x0, x0, #3, #9
    4001d584:	8b0000a4 	add	x4, x5, x0
		ptes[level] = pte;
    4001d588:	f8325a64 	str	x4, [x19, w18, uxtw #3]
		if (is_table_desc(*pte, level)) {
    4001d58c:	f86068a5 	ldr	x5, [x5, x0]
	return level != XLAT_LAST_LEVEL &&
    4001d590:	54fff220 	b.eq	4001d3d4 <set_mapping.constprop.0+0x40>  // b.none
	       (desc & PTE_DESC_TYPE_MASK) == PTE_TABLE_DESC;
    4001d594:	924004a0 	and	x0, x5, #0x3
		if (is_table_desc(*pte, level)) {
    4001d598:	f1000c1f 	cmp	x0, #0x3
    4001d59c:	54fff1c1 	b.ne	4001d3d4 <set_mapping.constprop.0+0x40>  // b.any
			level++;
    4001d5a0:	11000652 	add	w18, w18, #0x1
	uint64_t address = desc & GENMASK(47, PAGE_SIZE_SHIFT);
    4001d5a4:	92748ca5 	and	x5, x5, #0xfffffffff000
	while (size) {
    4001d5a8:	b5fffe09 	cbnz	x9, 4001d568 <set_mapping.constprop.0+0x1d4>
	int ret = 0;
    4001d5ac:	52800000 	mov	w0, #0x0                   	// #0
}
    4001d5b0:	f9400bf3 	ldr	x19, [sp, #16]
    4001d5b4:	a8c47bfd 	ldp	x29, x30, [sp], #64
    4001d5b8:	d65f03c0 	ret

000000004001d5bc <__add_map.constprop.0>:
{
	unsigned int mem_type;
	uint64_t desc = 0U;

	/* NS bit for security memory access from secure state */
	desc |= (attrs & MT_NS) ? PTE_BLOCK_DESC_NS : 0;
    4001d5bc:	d37f7c65 	ubfiz	x5, x3, #1, #32
	 *     10      RO   NA
	 *     11      RO   RO
	 */

	/* AP bits for Data access permission */
	desc |= (attrs & MT_RW) ? PTE_BLOCK_DESC_AP_RW : PTE_BLOCK_DESC_AP_RO;
    4001d5c0:	f27d007f 	tst	x3, #0x8
	desc |= (attrs & MT_NS) ? PTE_BLOCK_DESC_NS : 0;
    4001d5c4:	927b00a7 	and	x7, x5, #0x20

	/* Mirror permissions to EL0 */
	desc |= (attrs & MT_RW_AP_ELx) ?
		 PTE_BLOCK_DESC_AP_ELx : PTE_BLOCK_DESC_AP_EL_HIGHER;
    4001d5c8:	53017c65 	lsr	w5, w3, #1
	desc |= (attrs & MT_RW) ? PTE_BLOCK_DESC_AP_RW : PTE_BLOCK_DESC_AP_RO;
    4001d5cc:	9a9f17e4 	cset	x4, eq  // eq = none
		 PTE_BLOCK_DESC_AP_ELx : PTE_BLOCK_DESC_AP_EL_HIGHER;
    4001d5d0:	927a00a5 	and	x5, x5, #0x40
    4001d5d4:	aa0700a5 	orr	x5, x5, x7
	/* the access flag */
	desc |= PTE_BLOCK_DESC_AF;

	/* memory attribute index field */
	mem_type = MT_TYPE(attrs);
	desc |= PTE_BLOCK_DESC_MEMTYPE(mem_type);
    4001d5d8:	d37e0867 	ubfiz	x7, x3, #2, #3
    4001d5dc:	aa041ce4 	orr	x4, x7, x4, lsl #7
	}

	return desc;
}

static int __add_map(struct arm_mmu_ptables *ptables, const char *name,
    4001d5e0:	aa0003e6 	mov	x6, x0
    4001d5e4:	aa0400a5 	orr	x5, x5, x4
    4001d5e8:	aa0103e0 	mov	x0, x1
    4001d5ec:	aa0203e1 	mov	x1, x2
	mem_type = MT_TYPE(attrs);
    4001d5f0:	12000862 	and	w2, w3, #0x7
	desc |= PTE_BLOCK_DESC_MEMTYPE(mem_type);
    4001d5f4:	b27600a4 	orr	x4, x5, #0x400
	switch (mem_type) {
    4001d5f8:	7100085f 	cmp	w2, #0x2
    4001d5fc:	54000109 	b.ls	4001d61c <__add_map.constprop.0+0x60>  // b.plast
    4001d600:	51000c47 	sub	w7, w2, #0x3
    4001d604:	710004ff 	cmp	w7, #0x1
    4001d608:	54000129 	b.ls	4001d62c <__add_map.constprop.0+0x70>  // b.plast
		     uintptr_t phys, uintptr_t virt, size_t size, uint32_t attrs)
{
	uint64_t desc = get_region_desc(attrs);
	bool may_overwrite = !(attrs & MT_NO_OVERWRITE);
    4001d60c:	d2780063 	eor	x3, x3, #0x100
	MMU_DEBUG("mmap [%s]: virt %lx phys %lx size %lx attr %llx\n",
		  name, virt, phys, size, desc);
	__ASSERT(((virt | phys | size) & (CONFIG_MMU_PAGE_SIZE - 1)) == 0,
		 "address/size are not page aligned\n");
	desc |= phys;
	return set_mapping(ptables, virt, size, desc, may_overwrite);
    4001d610:	aa0400c2 	orr	x2, x6, x4
    4001d614:	53082063 	ubfx	w3, w3, #8, #1
    4001d618:	17ffff5f 	b	4001d394 <set_mapping.constprop.0>
		desc |= PTE_BLOCK_DESC_UXN;
    4001d61c:	d280c004 	mov	x4, #0x600                 	// #1536
    4001d620:	f2e00c04 	movk	x4, #0x60, lsl #48
    4001d624:	aa0400a4 	orr	x4, x5, x4
		break;
    4001d628:	17fffff9 	b	4001d60c <__add_map.constprop.0+0x50>
		if ((attrs & MT_RW) || (attrs & MT_P_EXECUTE_NEVER))
    4001d62c:	52800507 	mov	w7, #0x28                  	// #40
    4001d630:	6a07007f 	tst	w3, w7
    4001d634:	54000080 	b.eq	4001d644 <__add_map.constprop.0+0x88>  // b.none
			desc |= PTE_BLOCK_DESC_PXN;
    4001d638:	d2808004 	mov	x4, #0x400                 	// #1024
    4001d63c:	f2e00404 	movk	x4, #0x20, lsl #48
    4001d640:	aa0400a4 	orr	x4, x5, x4
		if (((attrs & MT_RW) && (attrs & MT_RW_AP_ELx)) ||
    4001d644:	52801105 	mov	w5, #0x88                  	// #136
    4001d648:	0a050065 	and	w5, w3, w5
    4001d64c:	710220bf 	cmp	w5, #0x88
    4001d650:	54000040 	b.eq	4001d658 <__add_map.constprop.0+0x9c>  // b.none
    4001d654:	36300043 	tbz	w3, #6, 4001d65c <__add_map.constprop.0+0xa0>
			desc |= PTE_BLOCK_DESC_UXN;
    4001d658:	b24a0084 	orr	x4, x4, #0x40000000000000
			desc |= PTE_BLOCK_DESC_INNER_SHARE;
    4001d65c:	b2780485 	orr	x5, x4, #0x300
    4001d660:	7100105f 	cmp	w2, #0x4
    4001d664:	b2770084 	orr	x4, x4, #0x200
    4001d668:	9a851084 	csel	x4, x4, x5, ne  // ne = any
    4001d66c:	17ffffe8 	b	4001d60c <__add_map.constprop.0+0x50>

000000004001d670 <z_arm64_mm_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Management Unit (MMU).
 */
void z_arm64_mm_init(bool is_primary_core)
{
    4001d670:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
	__ASSERT((read_sctlr_el1() & SCTLR_M_BIT) == 0, "MMU is already enabled\n");

	/*
	 * Only booting core setup up the page tables.
	 */
	if (is_primary_core) {
    4001d674:	72001c1f 	tst	w0, #0xff
{
    4001d678:	910003fd 	mov	x29, sp
    4001d67c:	a90153f3 	stp	x19, x20, [sp, #16]
    4001d680:	a9025bf5 	stp	x21, x22, [sp, #32]
    4001d684:	d0000335 	adrp	x21, 40083000 <ws+0x3a40>
    4001d688:	f9001bf7 	str	x23, [sp, #48]
	if (is_primary_core) {
    4001d68c:	54000360 	b.eq	4001d6f8 <z_arm64_mm_init+0x88>  // b.none
		kernel_ptables.base_xlat_table = new_table();
    4001d690:	97ffff21 	bl	4001d314 <new_table>
    4001d694:	f904cea0 	str	x0, [x21, #2456]
	for (index = 0U; index < mmu_config.num_regions; index++) {
    4001d698:	90000020 	adrp	x0, 40021000 <__device_handles_end+0x17e>
    4001d69c:	b9419001 	ldr	w1, [x0, #400]
    4001d6a0:	90000033 	adrp	x19, 40021000 <__device_handles_end+0x17e>
    4001d6a4:	91086273 	add	x19, x19, #0x218
    4001d6a8:	2a0103f7 	mov	w23, w1
    4001d6ac:	aa0003f4 	mov	x20, x0
    4001d6b0:	52800076 	mov	w22, #0x3                   	// #3
	size_t size = (uintptr_t)range->end - address;
    4001d6b4:	a9408a61 	ldp	x1, x2, [x19, #8]
	if (size) {
    4001d6b8:	eb010042 	subs	x2, x2, x1
    4001d6bc:	54000080 	b.eq	4001d6cc <z_arm64_mm_init+0x5c>  // b.none
		__add_map(ptables, range->name, address, address,
    4001d6c0:	b9401a63 	ldr	w3, [x19, #24]
    4001d6c4:	aa0103e0 	mov	x0, x1
    4001d6c8:	97ffffbd 	bl	4001d5bc <__add_map.constprop.0>
	for (index = 0U; index < ARRAY_SIZE(mmu_zephyr_ranges); index++) {
    4001d6cc:	91008273 	add	x19, x19, #0x20
    4001d6d0:	710006d6 	subs	w22, w22, #0x1
    4001d6d4:	54ffff01 	b.ne	4001d6b4 <z_arm64_mm_init+0x44>  // b.any
		region = &mmu_config.mmu_regions[index];
    4001d6d8:	91064294 	add	x20, x20, #0x190
    4001d6dc:	d2800013 	mov	x19, #0x0                   	// #0
    4001d6e0:	d2800516 	mov	x22, #0x28                  	// #40
	for (index = 0U; index < mmu_config.num_regions; index++) {
    4001d6e4:	6b1302ff 	cmp	w23, w19
    4001d6e8:	54000348 	b.hi	4001d750 <z_arm64_mm_init+0xe0>  // b.pmore
	__asm__ volatile (
    4001d6ec:	d508871f 	tlbi	vmalle1
    4001d6f0:	d5033f9f 	dsb	sy
    4001d6f4:	d5033fdf 	isb
MAKE_REG_HELPER_EL123(mair)
    4001d6f8:	d2808000 	mov	x0, #0x400                 	// #1024
    4001d6fc:	f2a88180 	movk	x0, #0x440c, lsl #16
    4001d700:	f2d77fe0 	movk	x0, #0xbbff, lsl #32
    4001d704:	d518a200 	msr	mair_el1, x0
MAKE_REG_HELPER_EL123(tcr)
    4001d708:	d286a400 	mov	x0, #0x3520                	// #13600
    4001d70c:	f2a01000 	movk	x0, #0x80, lsl #16
    4001d710:	d5182040 	msr	tcr_el1, x0
MAKE_REG_HELPER_EL123(ttbr0)
    4001d714:	f944cea0 	ldr	x0, [x21, #2456]
    4001d718:	d5182000 	msr	ttbr0_el1, x0
	isb();
    4001d71c:	d5033fdf 	isb

__syscall int sys_cache_data_all(int op);
static inline int z_impl_sys_cache_data_all(int op)
{
#if defined(CONFIG_CACHE_MANAGEMENT)
	return cache_data_all(op);
    4001d720:	52800040 	mov	w0, #0x2                   	// #2
    4001d724:	9400004d 	bl	4001d858 <arch_dcache_all>
MAKE_REG_HELPER_EL123(sctlr)
    4001d728:	d5381000 	mrs	x0, sctlr_el1
	write_sctlr_el1(val | SCTLR_M_BIT | SCTLR_C_BIT);
    4001d72c:	d28000a1 	mov	x1, #0x5                   	// #5
    4001d730:	aa010000 	orr	x0, x0, x1
    4001d734:	d5181000 	msr	sctlr_el1, x0
	isb();
    4001d738:	d5033fdf 	isb
		setup_page_tables(&kernel_ptables);
	}

	/* currently only EL1 is supported */
	enable_mmu_el1(&kernel_ptables, flags);
}
    4001d73c:	a94153f3 	ldp	x19, x20, [sp, #16]
    4001d740:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4001d744:	f9401bf7 	ldr	x23, [sp, #48]
    4001d748:	a8c47bfd 	ldp	x29, x30, [sp], #64
    4001d74c:	d65f03c0 	ret
		region = &mmu_config.mmu_regions[index];
    4001d750:	f9400685 	ldr	x5, [x20, #8]
    4001d754:	9b167e64 	mul	x4, x19, x22
    4001d758:	8b0400a0 	add	x0, x5, x4
	if (region->size || region->attrs) {
    4001d75c:	f9400802 	ldr	x2, [x0, #16]
    4001d760:	b9402003 	ldr	w3, [x0, #32]
    4001d764:	b5000042 	cbnz	x2, 4001d76c <z_arm64_mm_init+0xfc>
    4001d768:	340000a3 	cbz	w3, 4001d77c <z_arm64_mm_init+0x10c>
		__add_map(ptables, region->name, region->base_pa, region->base_va,
    4001d76c:	f9400401 	ldr	x1, [x0, #8]
    4001d770:	32180063 	orr	w3, w3, #0x100
    4001d774:	f86468a0 	ldr	x0, [x5, x4]
    4001d778:	97ffff91 	bl	4001d5bc <__add_map.constprop.0>
	for (index = 0U; index < mmu_config.num_regions; index++) {
    4001d77c:	91000673 	add	x19, x19, #0x1
    4001d780:	17ffffd9 	b	4001d6e4 <z_arm64_mm_init+0x74>

000000004001d784 <arch_mem_map>:

	return add_map(ptables, "generic", phys, (uintptr_t)virt, size, entry_flags);
}

void arch_mem_map(void *virt, uintptr_t phys, size_t size, uint32_t flags)
{
    4001d784:	2a0303e4 	mov	w4, w3
	switch (flags & K_MEM_CACHE_MASK) {
    4001d788:	12000863 	and	w3, w3, #0x7
    4001d78c:	7100087f 	cmp	w3, #0x2
    4001d790:	54000129 	b.ls	4001d7b4 <arch_mem_map+0x30>  // b.plast
	int ret = __arch_mem_map(virt, phys, size, flags);

	if (ret) {
		LOG_ERR("__arch_mem_map() returned %d", ret);
		k_panic();
    4001d794:	d2800088 	mov	x8, #0x4                   	// #4
    4001d798:	d4000041 	svc	#0x2
    4001d79c:	d65f03c0 	ret
    4001d7a0:	d2800088 	mov	x8, #0x4                   	// #4
    4001d7a4:	d4000041 	svc	#0x2
	} else {
		sync_domains((uintptr_t)virt, size);
		invalidate_tlb_all();
	}
}
    4001d7a8:	f9400bf3 	ldr	x19, [sp, #16]
    4001d7ac:	a8c27bfd 	ldp	x29, x30, [sp], #32
    4001d7b0:	d65f03c0 	ret
    4001d7b4:	aa0003e5 	mov	x5, x0
    4001d7b8:	aa0103e0 	mov	x0, x1
    4001d7bc:	d0000021 	adrp	x1, 40023000 <fpi.1>
    4001d7c0:	91363821 	add	x1, x1, #0xd8e
    4001d7c4:	38636823 	ldrb	w3, [x1, x3]
	if ((flags & K_MEM_PERM_RW) != 0U) {
    4001d7c8:	36180044 	tbz	w4, #3, 4001d7d0 <arch_mem_map+0x4c>
		entry_flags |= MT_RW;
    4001d7cc:	321d0063 	orr	w3, w3, #0x8
	if ((flags & K_MEM_PERM_EXEC) == 0U) {
    4001d7d0:	37200044 	tbnz	w4, #4, 4001d7d8 <arch_mem_map+0x54>
		entry_flags |= MT_P_EXECUTE_NEVER;
    4001d7d4:	321b0063 	orr	w3, w3, #0x20
	if ((flags & K_MEM_PERM_USER) != 0U) {
    4001d7d8:	372ffde4 	tbnz	w4, #5, 4001d794 <arch_mem_map+0x10>
{
    4001d7dc:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    4001d7e0:	910003fd 	mov	x29, sp
    4001d7e4:	f9000bf3 	str	x19, [sp, #16]
MAKE_REG_HELPER(daif)
    4001d7e8:	d53b4233 	mrs	x19, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001d7ec:	d50342df 	msr	daifset, #0x2
	ret = __add_map(ptables, name, phys, virt, size, attrs);
    4001d7f0:	aa0503e1 	mov	x1, x5
MAKE_REG_HELPER(daif)
    4001d7f4:	92407e73 	and	x19, x19, #0xffffffff
    4001d7f8:	97ffff71 	bl	4001d5bc <__add_map.constprop.0>
    4001d7fc:	d51b4233 	msr	daif, x19
	if (ret) {
    4001d800:	35fffd00 	cbnz	w0, 4001d7a0 <arch_mem_map+0x1c>
	__asm__ volatile (
    4001d804:	d508871f 	tlbi	vmalle1
    4001d808:	d5033f9f 	dsb	sy
    4001d80c:	d5033fdf 	isb
}
    4001d810:	17ffffe6 	b	4001d7a8 <arch_mem_map+0x24>

000000004001d814 <arch_mem_unmap>:

void arch_mem_unmap(void *addr, size_t size)
{
    4001d814:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    4001d818:	910003fd 	mov	x29, sp
    4001d81c:	f9000bf3 	str	x19, [sp, #16]
    4001d820:	d53b4233 	mrs	x19, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001d824:	d50342df 	msr	daifset, #0x2
	ret = set_mapping(ptables, virt, size, 0, true);
    4001d828:	52800023 	mov	w3, #0x1                   	// #1
    4001d82c:	d2800002 	mov	x2, #0x0                   	// #0
MAKE_REG_HELPER(daif)
    4001d830:	92407e73 	and	x19, x19, #0xffffffff
    4001d834:	97fffed8 	bl	4001d394 <set_mapping.constprop.0>
    4001d838:	d51b4233 	msr	daif, x19
	int ret = remove_map(&kernel_ptables, "generic", (uintptr_t)addr, size);

	if (ret) {
    4001d83c:	35000080 	cbnz	w0, 4001d84c <arch_mem_unmap+0x38>
	__asm__ volatile (
    4001d840:	d508871f 	tlbi	vmalle1
    4001d844:	d5033f9f 	dsb	sy
    4001d848:	d5033fdf 	isb
		LOG_ERR("remove_map() returned %d", ret);
	} else {
		sync_domains((uintptr_t)addr, size);
		invalidate_tlb_all();
	}
}
    4001d84c:	f9400bf3 	ldr	x19, [sp, #16]
    4001d850:	a8c27bfd 	ldp	x29, x30, [sp], #32
    4001d854:	d65f03c0 	ret

000000004001d858 <arch_dcache_all>:
{
	uint32_t clidr_el1, csselr_el1, ccsidr_el1;
	uint8_t loc, ctype, cache_level, line_size, way_pos;
	uint32_t max_ways, max_sets, dc_val, set, way;

	if (op != K_CACHE_INVD && op != K_CACHE_WB && op != K_CACHE_WB_INVD)
    4001d858:	51000401 	sub	w1, w0, #0x1
    4001d85c:	7100083f 	cmp	w1, #0x2
    4001d860:	540006a8 	b.hi	4001d934 <arch_dcache_all+0xdc>  // b.pmore
		return -ENOTSUP;

	/* Data barrier before start */
	dsb();
    4001d864:	d5033f9f 	dsb	sy
MAKE_REG_HELPER(clidr_el1);
    4001d868:	d5390021 	mrs	x1, clidr_el1

	clidr_el1 = read_clidr_el1();
    4001d86c:	2a0103ea 	mov	w10, w1

	loc = (clidr_el1 >> CLIDR_EL1_LOC_SHIFT) & CLIDR_EL1_LOC_MASK;
    4001d870:	53186829 	ubfx	w9, w1, #24, #3
	if (!loc)
    4001d874:	7208083f 	tst	w1, #0x7000000
    4001d878:	54000620 	b.eq	4001d93c <arch_dcache_all+0xe4>  // b.none
    4001d87c:	d2800001 	mov	x1, #0x0                   	// #0
		return 0;

	for (cache_level = 0; cache_level < loc; cache_level++) {
		ctype = (clidr_el1 >> CLIDR_EL1_CTYPE_SHIFT(cache_level))
    4001d880:	0b010422 	add	w2, w1, w1, lsl #1
    4001d884:	531f782b 	lsl	w11, w1, #1
    4001d888:	1ac22542 	lsr	w2, w10, w2
				& CLIDR_EL1_CTYPE_MASK;
		/* No data cache, continue */
		if (ctype < 2)
    4001d88c:	721f045f 	tst	w2, #0x6
    4001d890:	54000320 	b.eq	4001d8f4 <arch_dcache_all+0x9c>  // b.none
MAKE_REG_HELPER(csselr_el1);
    4001d894:	d37ff822 	lsl	x2, x1, #1
    4001d898:	d51a0002 	msr	csselr_el1, x2
			continue;

		/* select cache level */
		csselr_el1 = cache_level << 1;
		write_csselr_el1(csselr_el1);
		isb();
    4001d89c:	d5033fdf 	isb
MAKE_REG_HELPER(ccsidr_el1);
    4001d8a0:	d5390002 	mrs	x2, ccsidr_el1

		ccsidr_el1 = read_ccsidr_el1();
		line_size = (ccsidr_el1 >> CCSIDR_EL1_LN_SZ_SHIFT
				& CCSIDR_EL1_LN_SZ_MASK) + 4;
    4001d8a4:	12000847 	and	w7, w2, #0x7
		max_ways = (ccsidr_el1 >> CCSIDR_EL1_WAYS_SHIFT)
    4001d8a8:	53033048 	ubfx	w8, w2, #3, #10
		line_size = (ccsidr_el1 >> CCSIDR_EL1_LN_SZ_SHIFT
    4001d8ac:	110010e7 	add	w7, w7, #0x4
				& CCSIDR_EL1_WAYS_MASK;
		max_sets = (ccsidr_el1 >> CCSIDR_EL1_SETS_SHIFT)
    4001d8b0:	530d6c42 	ubfx	w2, w2, #13, #15
				& CCSIDR_EL1_SETS_MASK;
		/* 32-log2(ways), bit position of way in DC operand */
		way_pos = __builtin_clz(max_ways);
    4001d8b4:	5ac0110c 	clz	w12, w8

		for (set = 0; set <= max_sets; set++) {
    4001d8b8:	52800005 	mov	w5, #0x0                   	// #0
				/* way number, aligned to pos in DC operand */
				dc_val = way << way_pos;
				/* cache level, aligned to pos in DC operand */
				dc_val |= csselr_el1;
				/* set number, aligned to pos in DC operand */
				dc_val |= set << line_size;
    4001d8bc:	1ac720a6 	lsl	w6, w5, w7
    4001d8c0:	2a0b00c6 	orr	w6, w6, w11
			for (way = 0; way <= max_ways; way++) {
    4001d8c4:	52800004 	mov	w4, #0x0                   	// #0
				dc_val = way << way_pos;
    4001d8c8:	1acc2083 	lsl	w3, w4, w12

				if (op == K_CACHE_INVD) {
    4001d8cc:	7100081f 	cmp	w0, #0x2
				dc_val |= set << line_size;
    4001d8d0:	2a060063 	orr	w3, w3, w6
				if (op == K_CACHE_INVD) {
    4001d8d4:	54000201 	b.ne	4001d914 <arch_dcache_all+0xbc>  // b.any
					dc_ops("isw", dc_val);
    4001d8d8:	d5087643 	dc	isw, x3
			for (way = 0; way <= max_ways; way++) {
    4001d8dc:	11000484 	add	w4, w4, #0x1
    4001d8e0:	6b04011f 	cmp	w8, w4
    4001d8e4:	54ffff22 	b.cs	4001d8c8 <arch_dcache_all+0x70>  // b.hs, b.nlast
		for (set = 0; set <= max_sets; set++) {
    4001d8e8:	110004a5 	add	w5, w5, #0x1
    4001d8ec:	6b05005f 	cmp	w2, w5
    4001d8f0:	54fffe62 	b.cs	4001d8bc <arch_dcache_all+0x64>  // b.hs, b.nlast
	for (cache_level = 0; cache_level < loc; cache_level++) {
    4001d8f4:	91000421 	add	x1, x1, #0x1
    4001d8f8:	6b21013f 	cmp	w9, w1, uxtb
    4001d8fc:	54fffc28 	b.hi	4001d880 <arch_dcache_all+0x28>  // b.pmore
MAKE_REG_HELPER(csselr_el1);
    4001d900:	d2800000 	mov	x0, #0x0                   	// #0
    4001d904:	d51a0000 	msr	csselr_el1, x0
		}
	}

	/* Restore csselr_el1 to level 0 */
	write_csselr_el1(0);
	dsb();
    4001d908:	d5033f9f 	dsb	sy
	isb();
    4001d90c:	d5033fdf 	isb

	return 0;
}
    4001d910:	d65f03c0 	ret
				} else if (op == K_CACHE_WB_INVD) {
    4001d914:	71000c1f 	cmp	w0, #0x3
    4001d918:	54000061 	b.ne	4001d924 <arch_dcache_all+0xcc>  // b.any
					dc_ops("cisw", dc_val);
    4001d91c:	d5087e43 	dc	cisw, x3
    4001d920:	17ffffef 	b	4001d8dc <arch_dcache_all+0x84>
				} else if (op == K_CACHE_WB) {
    4001d924:	7100041f 	cmp	w0, #0x1
    4001d928:	54fffda1 	b.ne	4001d8dc <arch_dcache_all+0x84>  // b.any
					dc_ops("csw", dc_val);
    4001d92c:	d5087a43 	dc	csw, x3
    4001d930:	17ffffeb 	b	4001d8dc <arch_dcache_all+0x84>
		return -ENOTSUP;
    4001d934:	128010a0 	mov	w0, #0xffffff7a            	// #-134
    4001d938:	17fffff6 	b	4001d910 <arch_dcache_all+0xb8>
		return 0;
    4001d93c:	52800000 	mov	w0, #0x0                   	// #0
    4001d940:	17fffff4 	b	4001d910 <arch_dcache_all+0xb8>

000000004001d944 <_stdout_hook_default>:
static int _stdout_hook_default(int c)
{
	(void)(c);  /* Prevent warning about unused argument */

	return EOF;
}
    4001d944:	12800000 	mov	w0, #0xffffffff            	// #-1
    4001d948:	d65f03c0 	ret

000000004001d94c <_stdin_hook_default>:
}

static unsigned char _stdin_hook_default(void)
{
	return 0;
}
    4001d94c:	52800000 	mov	w0, #0x0                   	// #0
    4001d950:	d65f03c0 	ret

000000004001d954 <malloc_prepare>:
{
    4001d954:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    4001d958:	910003fd 	mov	x29, sp
    4001d95c:	f9000bf3 	str	x19, [sp, #16]
	max_heap_size = MIN(CONFIG_NEWLIB_LIBC_MAX_MAPPED_REGION_SIZE,
    4001d960:	940008b5 	bl	4001fc34 <k_mem_free_get>
    4001d964:	d0000333 	adrp	x19, 40083000 <ws+0x3a40>
    4001d968:	f144001f 	cmp	x0, #0x100, lsl #12
    4001d96c:	54000109 	b.ls	4001d98c <malloc_prepare+0x38>  // b.plast
    4001d970:	d2a00200 	mov	x0, #0x100000              	// #1048576
    4001d974:	f904da60 	str	x0, [x19, #2480]
		heap_base = k_mem_map(max_heap_size, K_MEM_PERM_RW);
    4001d978:	52800101 	mov	w1, #0x8                   	// #8
    4001d97c:	9400085a 	bl	4001fae4 <k_mem_map>
    4001d980:	d0000321 	adrp	x1, 40083000 <ws+0x3a40>
    4001d984:	f904d020 	str	x0, [x1, #2464]
    4001d988:	14000004 	b	4001d998 <malloc_prepare+0x44>
	max_heap_size = MIN(CONFIG_NEWLIB_LIBC_MAX_MAPPED_REGION_SIZE,
    4001d98c:	940008aa 	bl	4001fc34 <k_mem_free_get>
    4001d990:	f904da60 	str	x0, [x19, #2480]
	if (max_heap_size != 0) {
    4001d994:	b5ffff20 	cbnz	x0, 4001d978 <malloc_prepare+0x24>
}
    4001d998:	52800000 	mov	w0, #0x0                   	// #0
    4001d99c:	f9400bf3 	ldr	x19, [sp, #16]
    4001d9a0:	a8c27bfd 	ldp	x29, x30, [sp], #32
    4001d9a4:	d65f03c0 	ret

000000004001d9a8 <__stdout_hook_install>:
	_stdout_hook = hook;
    4001d9a8:	b0000581 	adrp	x1, 400ce000 <z_interrupt_stacks+0x440>
    4001d9ac:	f905e820 	str	x0, [x1, #3024]
}
    4001d9b0:	d65f03c0 	ret

000000004001d9b4 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    4001d9b4:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    4001d9b8:	910003fd 	mov	x29, sp
    4001d9bc:	a90153f3 	stp	x19, x20, [sp, #16]
    4001d9c0:	2a0103f4 	mov	w20, w1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
    4001d9c4:	d2800013 	mov	x19, #0x0                   	// #0
{
    4001d9c8:	a9025bf5 	stp	x21, x22, [sp, #32]
    4001d9cc:	aa0003f5 	mov	x21, x0
		*(buf + i) = _stdin_hook();
    4001d9d0:	b0000596 	adrp	x22, 400ce000 <z_interrupt_stacks+0x440>
    4001d9d4:	2a1303e0 	mov	w0, w19
	for (i = 0; i < nbytes; i++) {
    4001d9d8:	6b13029f 	cmp	w20, w19
    4001d9dc:	5400014d 	b.le	4001da04 <z_impl_zephyr_read_stdin+0x50>
		*(buf + i) = _stdin_hook();
    4001d9e0:	f945e6c0 	ldr	x0, [x22, #3016]
    4001d9e4:	d63f0000 	blr	x0
    4001d9e8:	12001c01 	and	w1, w0, #0xff
    4001d9ec:	38336aa0 	strb	w0, [x21, x19]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    4001d9f0:	7100283f 	cmp	w1, #0xa
    4001d9f4:	11000660 	add	w0, w19, #0x1
    4001d9f8:	7a4d1824 	ccmp	w1, #0xd, #0x4, ne  // ne = any
    4001d9fc:	91000673 	add	x19, x19, #0x1
    4001da00:	54fffea1 	b.ne	4001d9d4 <z_impl_zephyr_read_stdin+0x20>  // b.any
			i++;
			break;
		}
	}
	return i;
}
    4001da04:	a94153f3 	ldp	x19, x20, [sp, #16]
    4001da08:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4001da0c:	a8c37bfd 	ldp	x29, x30, [sp], #48
    4001da10:	d65f03c0 	ret

000000004001da14 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    4001da14:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    4001da18:	910003fd 	mov	x29, sp
    4001da1c:	a90153f3 	stp	x19, x20, [sp, #16]
    4001da20:	2a0103f4 	mov	w20, w1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    4001da24:	d2800013 	mov	x19, #0x0                   	// #0
{
    4001da28:	a9025bf5 	stp	x21, x22, [sp, #32]
    4001da2c:	aa0003f5 	mov	x21, x0
	for (i = 0; i < nbytes; i++) {
    4001da30:	b0000596 	adrp	x22, 400ce000 <z_interrupt_stacks+0x440>
    4001da34:	6b13029f 	cmp	w20, w19
    4001da38:	540000cc 	b.gt	4001da50 <z_impl_zephyr_write_stdout+0x3c>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    4001da3c:	2a1403e0 	mov	w0, w20
    4001da40:	a94153f3 	ldp	x19, x20, [sp, #16]
    4001da44:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4001da48:	a8c37bfd 	ldp	x29, x30, [sp], #48
    4001da4c:	d65f03c0 	ret
		if (*(buf + i) == '\n') {
    4001da50:	38736aa0 	ldrb	w0, [x21, x19]
    4001da54:	7100281f 	cmp	w0, #0xa
    4001da58:	54000081 	b.ne	4001da68 <z_impl_zephyr_write_stdout+0x54>  // b.any
			_stdout_hook('\r');
    4001da5c:	f945eac1 	ldr	x1, [x22, #3024]
    4001da60:	528001a0 	mov	w0, #0xd                   	// #13
    4001da64:	d63f0020 	blr	x1
		_stdout_hook(*(buf + i));
    4001da68:	38736aa0 	ldrb	w0, [x21, x19]
    4001da6c:	91000673 	add	x19, x19, #0x1
    4001da70:	f945eac1 	ldr	x1, [x22, #3024]
    4001da74:	d63f0020 	blr	x1
	for (i = 0; i < nbytes; i++) {
    4001da78:	17ffffef 	b	4001da34 <z_impl_zephyr_write_stdout+0x20>

000000004001da7c <_read>:
#include <syscalls/zephyr_write_stdout_mrsh.c>
#endif

#ifndef CONFIG_POSIX_API
int _read(int fd, char *buf, int nbytes)
{
    4001da7c:	aa0103e0 	mov	x0, x1
    4001da80:	2a0203e1 	mov	w1, w2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
    4001da84:	17ffffcc 	b	4001d9b4 <z_impl_zephyr_read_stdin>

000000004001da88 <_write>:
	return zephyr_read_stdin(buf, nbytes);
}
__weak FUNC_ALIAS(_read, read, int);

int _write(int fd, const void *buf, int nbytes)
{
    4001da88:	aa0103e0 	mov	x0, x1
    4001da8c:	2a0203e1 	mov	w1, w2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    4001da90:	17ffffe1 	b	4001da14 <z_impl_zephyr_write_stdout>

000000004001da94 <_open>:
__weak FUNC_ALIAS(_write, write, int);

int _open(const char *name, int mode)
{
	return -1;
}
    4001da94:	12800000 	mov	w0, #0xffffffff            	// #-1
    4001da98:	d65f03c0 	ret

000000004001da9c <_close>:
    4001da9c:	12800000 	mov	w0, #0xffffffff            	// #-1
    4001daa0:	d65f03c0 	ret

000000004001daa4 <_lseek>:
__weak FUNC_ALIAS(_close, close, int);

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    4001daa4:	52800000 	mov	w0, #0x0                   	// #0
    4001daa8:	d65f03c0 	ret

000000004001daac <_isatty>:
#define _write	write
#endif

int _isatty(int file)
{
	return file <= 2;
    4001daac:	7100081f 	cmp	w0, #0x2
}
    4001dab0:	1a9fc7e0 	cset	w0, le
    4001dab4:	d65f03c0 	ret

000000004001dab8 <_kill>:
__weak FUNC_ALIAS(_isatty, isatty, int);

int _kill(int i, int j)
{
	return 0;
}
    4001dab8:	52800000 	mov	w0, #0x0                   	// #0
    4001dabc:	d65f03c0 	ret

000000004001dac0 <_getpid>:
__weak FUNC_ALIAS(_kill, kill, int);

int _getpid(void)
{
	return 0;
}
    4001dac0:	52800000 	mov	w0, #0x0                   	// #0
    4001dac4:	d65f03c0 	ret

000000004001dac8 <_fstat>:
__weak FUNC_ALIAS(_getpid, getpid, int);

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    4001dac8:	52840000 	mov	w0, #0x2000                	// #8192
    4001dacc:	b9000420 	str	w0, [x1, #4]
	return 0;
}
    4001dad0:	52800000 	mov	w0, #0x0                   	// #0
    4001dad4:	d65f03c0 	ret

000000004001dad8 <_exit>:
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    4001dad8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    4001dadc:	910003fd 	mov	x29, sp
    4001dae0:	d0000020 	adrp	x0, 40023000 <fpi.1>
    4001dae4:	91364400 	add	x0, x0, #0xd91
    4001dae8:	528000a1 	mov	w1, #0x5                   	// #5
    4001daec:	97ffffca 	bl	4001da14 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
    4001daf0:	14000000 	b	4001daf0 <_exit+0x18>

000000004001daf4 <_sbrk>:

void *_sbrk(intptr_t count)
{
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    4001daf4:	d0000322 	adrp	x2, 40083000 <ws+0x3a40>
    4001daf8:	f944d443 	ldr	x3, [x2, #2472]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    4001dafc:	8b030001 	add	x1, x0, x3
    4001db00:	d0000320 	adrp	x0, 40083000 <ws+0x3a40>
    4001db04:	f944d800 	ldr	x0, [x0, #2480]
    4001db08:	eb00003f 	cmp	x1, x0
    4001db0c:	540000c2 	b.cs	4001db24 <_sbrk+0x30>  // b.hs, b.nlast
	ptr = ((char *)HEAP_BASE) + heap_sz;
    4001db10:	d0000320 	adrp	x0, 40083000 <ws+0x3a40>
    4001db14:	f944d000 	ldr	x0, [x0, #2464]
		heap_sz += count;
    4001db18:	f904d441 	str	x1, [x2, #2472]
	ptr = ((char *)HEAP_BASE) + heap_sz;
    4001db1c:	8b030000 	add	x0, x0, x3
	} else {
		ret = (void *)-1;
	}

	return ret;
}
    4001db20:	d65f03c0 	ret
		ret = (void *)-1;
    4001db24:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
	return ret;
    4001db28:	17fffffe 	b	4001db20 <_sbrk+0x2c>

000000004001db2c <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
    4001db2c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    4001db30:	910003fd 	mov	x29, sp
    4001db34:	f9000bf3 	str	x19, [sp, #16]
    4001db38:	aa0003f3 	mov	x19, x0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
    4001db3c:	d2800400 	mov	x0, #0x20                  	// #32
    4001db40:	97ff9710 	bl	40003780 <malloc>
    4001db44:	f9000260 	str	x0, [x19]
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
    4001db48:	f9400bf3 	ldr	x19, [sp, #16]
    4001db4c:	a8c27bfd 	ldp	x29, x30, [sp], #32
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_init(mutex);
    4001db50:	140003bc 	b	4001ea40 <z_impl_k_mutex_init>

000000004001db54 <__retarget_lock_close_recursive>:
    4001db54:	17ff970f 	b	40003790 <free>

000000004001db58 <__retarget_lock_acquire_recursive>:
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&mutex, *(uintptr_t *)&timeout, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    4001db58:	92800001 	mov	x1, #0xffffffffffffffff    	// #-1
    4001db5c:	140003be 	b	4001ea54 <z_impl_k_mutex_lock>

000000004001db60 <__retarget_lock_release_recursive>:
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    4001db60:	14000412 	b	4001eba8 <z_impl_k_mutex_unlock>

000000004001db64 <__errno>:
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    4001db64:	140002bd 	b	4001e658 <z_impl_z_errno>

000000004001db68 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
    4001db68:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    4001db6c:	910003fd 	mov	x29, sp
    4001db70:	528003a1 	mov	w1, #0x1d                  	// #29
    4001db74:	d0000020 	adrp	x0, 40023000 <fpi.1>
    4001db78:	91365c00 	add	x0, x0, #0xd97
    4001db7c:	97ffffa6 	bl	4001da14 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
    4001db80:	d2800068 	mov	x8, #0x3                   	// #3
    4001db84:	d4000041 	svc	#0x2

000000004001db88 <_gettimeofday>:
}
#endif /* CONFIG_XTENSA */

int _gettimeofday(struct timeval *__tp, void *__tzp)
{
	return gettimeofday(__tp, __tzp);
    4001db88:	17ff99fe 	b	40004380 <gettimeofday>

000000004001db8c <gic_get_rdist>:
MAKE_REG_HELPER(tpidrro_el0);
    4001db8c:	d53bd060 	mrs	x0, tpidrro_el0
	return (_cpu_t *)(read_tpidrro_el0() & TPIDRROEL0_CURR_CPU);
    4001db90:	927db000 	and	x0, x0, #0xfffffffffff8
#define IGROUPR_VAL	0x0U
#endif

static inline mem_addr_t gic_get_rdist(void)
{
	return gic_rdists[arch_curr_cpu()->id];
    4001db94:	39409001 	ldrb	w1, [x0, #36]
}
    4001db98:	d0000320 	adrp	x0, 40083000 <ws+0x3a40>
    4001db9c:	9126e000 	add	x0, x0, #0x9b8
    4001dba0:	f8617800 	ldr	x0, [x0, x1, lsl #3]
    4001dba4:	d65f03c0 	ret

000000004001dba8 <gic_wait_rwp.isra.0>:
static int gic_wait_rwp(uint32_t intid)
{
	uint32_t rwp_mask;
	mem_addr_t base;

	if (intid < GIC_SPI_INT_BASE) {
    4001dba8:	71007c1f 	cmp	w0, #0x1f
    4001dbac:	54000168 	b.hi	4001dbd8 <gic_wait_rwp.isra.0+0x30>  // b.pmore
static int gic_wait_rwp(uint32_t intid)
    4001dbb0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    4001dbb4:	910003fd 	mov	x29, sp
		base = (gic_get_rdist() + GICR_CTLR);
    4001dbb8:	97fffff5 	bl	4001db8c <gic_get_rdist>
		rwp_mask = BIT(GICR_CTLR_RWP);
    4001dbbc:	52800101 	mov	w1, #0x8                   	// #8

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	uint32_t val;

	__asm__ volatile("ldr %w0, [%1]" : "=r" (val) : "r" (addr));
    4001dbc0:	b9400002 	ldr	w2, [x0]

	__DMB();
    4001dbc4:	d5033fbf 	dmb	sy
	} else {
		base = GICD_CTLR;
		rwp_mask = BIT(GICD_CTLR_RWP);
	}

	while (sys_read32(base) & rwp_mask)
    4001dbc8:	6a01005f 	tst	w2, w1
    4001dbcc:	54ffffa1 	b.ne	4001dbc0 <gic_wait_rwp.isra.0+0x18>  // b.any
		;

	return 0;
}
    4001dbd0:	a8c17bfd 	ldp	x29, x30, [sp], #16
    4001dbd4:	d65f03c0 	ret
		base = GICD_CTLR;
    4001dbd8:	d2a10000 	mov	x0, #0x8000000             	// #134217728
		rwp_mask = BIT(GICD_CTLR_RWP);
    4001dbdc:	52b00001 	mov	w1, #0x80000000            	// #-2147483648
	__asm__ volatile("ldr %w0, [%1]" : "=r" (val) : "r" (addr));
    4001dbe0:	b9400002 	ldr	w2, [x0]
	__DMB();
    4001dbe4:	d5033fbf 	dmb	sy
	while (sys_read32(base) & rwp_mask)
    4001dbe8:	6a01005f 	tst	w2, w1
    4001dbec:	54ffffa1 	b.ne	4001dbe0 <gic_wait_rwp.isra.0+0x38>  // b.any
    4001dbf0:	d65f03c0 	ret

000000004001dbf4 <arm_gic_init>:

	gicv3_cpuif_init();
}

int arm_gic_init(const struct device *unused)
{
    4001dbf4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	__asm__ volatile("ldr %w0, [%1]" : "=r" (val) : "r" (addr));
    4001dbf8:	d2800083 	mov	x3, #0x4                   	// #4
    4001dbfc:	f2a10003 	movk	x3, #0x800, lsl #16
    4001dc00:	910003fd 	mov	x29, sp
    4001dc04:	b9400063 	ldr	w3, [x3]
	__DMB();
    4001dc08:	d5033fbf 	dmb	sy
	num_ints = (num_ints + 1) << 5;
    4001dc0c:	531b1063 	ubfiz	w3, w3, #5, #5
    4001dc10:	11008063 	add	w3, w3, #0x20
	return val;
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	__DMB();
    4001dc14:	d5033fbf 	dmb	sy
	__asm__ volatile("str %w0, [%1]" : : "r" (data), "r" (addr));
    4001dc18:	52800000 	mov	w0, #0x0                   	// #0
    4001dc1c:	d2a10001 	mov	x1, #0x8000000             	// #134217728
    4001dc20:	b9000020 	str	w0, [x1]
	gic_wait_rwp(GIC_SPI_INT_BASE);
    4001dc24:	52800400 	mov	w0, #0x20                  	// #32
    4001dc28:	97ffffe0 	bl	4001dba8 <gic_wait_rwp.isra.0>
		sys_write32(BIT_MASK(GIC_NUM_INTR_PER_REG),
    4001dc2c:	52803005 	mov	w5, #0x180                 	// #384
    4001dc30:	72a10005 	movk	w5, #0x800, lsl #16
		sys_write32(BIT_MASK(GIC_NUM_INTR_PER_REG),
    4001dc34:	52805006 	mov	w6, #0x280                 	// #640
    4001dc38:	72a10006 	movk	w6, #0x800, lsl #16
		sys_write32(IGROUPR_VAL, IGROUPR(base, idx));
    4001dc3c:	52801007 	mov	w7, #0x80                  	// #128
    4001dc40:	72a10007 	movk	w7, #0x800, lsl #16
		sys_write32(BIT_MASK(GIC_NUM_INTR_PER_REG),
    4001dc44:	5281a008 	mov	w8, #0xd00                 	// #3328
    4001dc48:	72a10008 	movk	w8, #0x800, lsl #16
	for (intid = GIC_SPI_INT_BASE; intid < num_ints;
    4001dc4c:	52800401 	mov	w1, #0x20                  	// #32
    4001dc50:	12800002 	mov	w2, #0xffffffff            	// #-1
    4001dc54:	6b01007f 	cmp	w3, w1
    4001dc58:	54000b88 	b.hi	4001ddc8 <arm_gic_init+0x1d4>  // b.pmore
	gic_wait_rwp(GIC_SPI_INT_BASE);
    4001dc5c:	52800400 	mov	w0, #0x20                  	// #32
    4001dc60:	97ffffd2 	bl	4001dba8 <gic_wait_rwp.isra.0>
	for (intid = GIC_SPI_INT_BASE; intid < num_ints;
    4001dc64:	d2808400 	mov	x0, #0x420                 	// #1056
    4001dc68:	f2a10000 	movk	x0, #0x800, lsl #16
    4001dc6c:	529f8002 	mov	w2, #0xfc00                	// #64512
    4001dc70:	72beffe2 	movk	w2, #0xf7ff, lsl #16
    4001dc74:	52941404 	mov	w4, #0xa0a0                	// #41120
    4001dc78:	72b41404 	movk	w4, #0xa0a0, lsl #16
    4001dc7c:	0b020001 	add	w1, w0, w2
    4001dc80:	6b01007f 	cmp	w3, w1
    4001dc84:	54000c28 	b.hi	4001de08 <arm_gic_init+0x214>  // b.pmore
		sys_write32(0, ICFGR(base, idx));
    4001dc88:	52818004 	mov	w4, #0xc00                 	// #3072
    4001dc8c:	72a10004 	movk	w4, #0x800, lsl #16
	for (intid = GIC_SPI_INT_BASE; intid < num_ints;
    4001dc90:	52800401 	mov	w1, #0x20                  	// #32
    4001dc94:	52800002 	mov	w2, #0x0                   	// #0
    4001dc98:	6b01007f 	cmp	w3, w1
    4001dc9c:	54000be8 	b.hi	4001de18 <arm_gic_init+0x224>  // b.pmore
	__DMB();
    4001dca0:	d5033fbf 	dmb	sy
	__asm__ volatile("str %w0, [%1]" : : "r" (data), "r" (addr));
    4001dca4:	52800440 	mov	w0, #0x22                  	// #34
    4001dca8:	d2a10001 	mov	x1, #0x8000000             	// #134217728
    4001dcac:	b9000020 	str	w0, [x1]
    4001dcb0:	d53bd060 	mrs	x0, tpidrro_el0
    4001dcb4:	927db000 	and	x0, x0, #0xfffffffffff8
	cpu = arch_curr_cpu()->id;
    4001dcb8:	39409002 	ldrb	w2, [x0, #36]
	gic_rdists[cpu] = GIC_RDIST_BASE + MPIDR_TO_CORE(GET_MPIDR()) * 0x20000;
    4001dcbc:	d53800a0 	mrs	x0, mpidr_el1
    4001dcc0:	92401c00 	and	x0, x0, #0xff
    4001dcc4:	d0000321 	adrp	x1, 40083000 <ws+0x3a40>
    4001dcc8:	9126e021 	add	x1, x1, #0x9b8
    4001dccc:	91101400 	add	x0, x0, #0x405
    4001dcd0:	d36fb800 	lsl	x0, x0, #17
    4001dcd4:	f822d820 	str	x0, [x1, w2, sxtw #3]
	gicv3_rdist_enable(gic_get_rdist());
    4001dcd8:	97ffffad 	bl	4001db8c <gic_get_rdist>
	if (!(sys_read32(rdist + GICR_WAKER) & BIT(GICR_WAKER_CA)))
    4001dcdc:	91005002 	add	x2, x0, #0x14
	__asm__ volatile("ldr %w0, [%1]" : "=r" (val) : "r" (addr));
    4001dce0:	b9400041 	ldr	w1, [x2]
	__DMB();
    4001dce4:	d5033fbf 	dmb	sy
    4001dce8:	361000e1 	tbz	w1, #2, 4001dd04 <arm_gic_init+0x110>
	*(volatile uint32_t *)addr = temp | (1 << bit);
}

static ALWAYS_INLINE void sys_clear_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;
    4001dcec:	b9401401 	ldr	w1, [x0, #20]

	*(volatile uint32_t *)addr = temp & ~(1 << bit);
    4001dcf0:	121e7821 	and	w1, w1, #0xfffffffd
    4001dcf4:	b9001401 	str	w1, [x0, #20]
	__asm__ volatile("ldr %w0, [%1]" : "=r" (val) : "r" (addr));
    4001dcf8:	b9400040 	ldr	w0, [x2]
	__DMB();
    4001dcfc:	d5033fbf 	dmb	sy
	while (sys_read32(rdist + GICR_WAKER) & BIT(GICR_WAKER_CA))
    4001dd00:	3717ffc0 	tbnz	w0, #2, 4001dcf8 <arm_gic_init+0x104>
	mem_addr_t base = gic_get_rdist() + GICR_SGI_BASE_OFF;
    4001dd04:	97ffffa2 	bl	4001db8c <gic_get_rdist>
    4001dd08:	aa0003e3 	mov	x3, x0
	__DMB();
    4001dd0c:	d5033fbf 	dmb	sy
	sys_write32(BIT_MASK(GIC_NUM_INTR_PER_REG), ICENABLER(base, 0));
    4001dd10:	91404000 	add	x0, x0, #0x10, lsl #12
	__asm__ volatile("str %w0, [%1]" : : "r" (data), "r" (addr));
    4001dd14:	12800004 	mov	w4, #0xffffffff            	// #-1
    4001dd18:	91060000 	add	x0, x0, #0x180
    4001dd1c:	b9000004 	str	w4, [x0]
	gic_wait_rwp(0);
    4001dd20:	52800000 	mov	w0, #0x0                   	// #0
    4001dd24:	97ffffa1 	bl	4001dba8 <gic_wait_rwp.isra.0>
	__DMB();
    4001dd28:	d5033fbf 	dmb	sy
	sys_write32(BIT_MASK(GIC_NUM_INTR_PER_REG), ICPENDR(base, 0));
    4001dd2c:	91404060 	add	x0, x3, #0x10, lsl #12
    4001dd30:	910a0000 	add	x0, x0, #0x280
	__asm__ volatile("str %w0, [%1]" : : "r" (data), "r" (addr));
    4001dd34:	b9000004 	str	w4, [x0]
	__DMB();
    4001dd38:	d5033fbf 	dmb	sy
	sys_write32(IGROUPR_VAL, IGROUPR(base, 0));
    4001dd3c:	91404060 	add	x0, x3, #0x10, lsl #12
    4001dd40:	91020000 	add	x0, x0, #0x80
	__asm__ volatile("str %w0, [%1]" : : "r" (data), "r" (addr));
    4001dd44:	b9000004 	str	w4, [x0]
	__DMB();
    4001dd48:	d5033fbf 	dmb	sy
	sys_write32(BIT_MASK(GIC_NUM_INTR_PER_REG), IGROUPMODR(base, 0));
    4001dd4c:	91404060 	add	x0, x3, #0x10, lsl #12
    4001dd50:	91340000 	add	x0, x0, #0xd00
	__asm__ volatile("str %w0, [%1]" : : "r" (data), "r" (addr));
    4001dd54:	b9000004 	str	w4, [x0]
	for (intid = 0; intid < GIC_SPI_INT_BASE;
    4001dd58:	91404060 	add	x0, x3, #0x10, lsl #12
    4001dd5c:	91404061 	add	x1, x3, #0x10, lsl #12
    4001dd60:	91100000 	add	x0, x0, #0x400
    4001dd64:	91108021 	add	x1, x1, #0x420
    4001dd68:	52941402 	mov	w2, #0xa0a0                	// #41120
    4001dd6c:	72b41402 	movk	w2, #0xa0a0, lsl #16
	__DMB();
    4001dd70:	d5033fbf 	dmb	sy
	__asm__ volatile("str %w0, [%1]" : : "r" (data), "r" (addr));
    4001dd74:	b9000002 	str	w2, [x0]
    4001dd78:	91001000 	add	x0, x0, #0x4
    4001dd7c:	eb01001f 	cmp	x0, x1
    4001dd80:	54ffff81 	b.ne	4001dd70 <arm_gic_init+0x17c>  // b.any
	__DMB();
    4001dd84:	d5033fbf 	dmb	sy
	sys_write32(0, ICFGR(base, 1));
    4001dd88:	91404063 	add	x3, x3, #0x10, lsl #12
	__asm__ volatile("str %w0, [%1]" : : "r" (data), "r" (addr));
    4001dd8c:	52800000 	mov	w0, #0x0                   	// #0
    4001dd90:	91301063 	add	x3, x3, #0xc04
    4001dd94:	b9000060 	str	w0, [x3]
	icc_sre = read_sysreg(ICC_SRE_EL1);
    4001dd98:	d538cca0 	mrs	x0, s3_0_c12_c12_5
	if (!(icc_sre & ICC_SRE_ELx_SRE_BIT)) {
    4001dd9c:	37000080 	tbnz	w0, #0, 4001ddac <arm_gic_init+0x1b8>
		icc_sre = (icc_sre | ICC_SRE_ELx_SRE_BIT |
    4001dda0:	32000800 	orr	w0, w0, #0x7
		write_sysreg(icc_sre, ICC_SRE_EL1);
    4001dda4:	d518cca0 	msr	s3_0_c12_c12_5, x0
		icc_sre = read_sysreg(ICC_SRE_EL1);
    4001dda8:	d538cca0 	mrs	x0, s3_0_c12_c12_5
	write_sysreg(GIC_IDLE_PRIO, ICC_PMR_EL1);
    4001ddac:	52801fe0 	mov	w0, #0xff                  	// #255
    4001ddb0:	d5184600 	msr	s3_0_c4_c6_0, x0
	write_sysreg(1, ICC_IGRPEN1_EL1);
    4001ddb4:	52800020 	mov	w0, #0x1                   	// #1
    4001ddb8:	d518cce0 	msr	s3_0_c12_c12_7, x0
	gicv3_dist_init();

	__arm_gic_init();

	return 0;
}
    4001ddbc:	52800000 	mov	w0, #0x0                   	// #0
    4001ddc0:	a8c17bfd 	ldp	x29, x30, [sp], #16
    4001ddc4:	d65f03c0 	ret
		idx = intid / GIC_NUM_INTR_PER_REG;
    4001ddc8:	53057c20 	lsr	w0, w1, #5
			    ICENABLER(base, idx));
    4001ddcc:	531e7400 	lsl	w0, w0, #2
	__DMB();
    4001ddd0:	d5033fbf 	dmb	sy
		sys_write32(BIT_MASK(GIC_NUM_INTR_PER_REG),
    4001ddd4:	0b050004 	add	w4, w0, w5
	__asm__ volatile("str %w0, [%1]" : : "r" (data), "r" (addr));
    4001ddd8:	b9000082 	str	w2, [x4]
	__DMB();
    4001dddc:	d5033fbf 	dmb	sy
		sys_write32(BIT_MASK(GIC_NUM_INTR_PER_REG),
    4001dde0:	0b060004 	add	w4, w0, w6
	__asm__ volatile("str %w0, [%1]" : : "r" (data), "r" (addr));
    4001dde4:	b9000082 	str	w2, [x4]
	__DMB();
    4001dde8:	d5033fbf 	dmb	sy
		sys_write32(IGROUPR_VAL, IGROUPR(base, idx));
    4001ddec:	0b070004 	add	w4, w0, w7
	__asm__ volatile("str %w0, [%1]" : : "r" (data), "r" (addr));
    4001ddf0:	b9000082 	str	w2, [x4]
	__DMB();
    4001ddf4:	d5033fbf 	dmb	sy
		sys_write32(BIT_MASK(GIC_NUM_INTR_PER_REG),
    4001ddf8:	0b080000 	add	w0, w0, w8
	__asm__ volatile("str %w0, [%1]" : : "r" (data), "r" (addr));
    4001ddfc:	b9000002 	str	w2, [x0]
	     intid += GIC_NUM_INTR_PER_REG) {
    4001de00:	11008021 	add	w1, w1, #0x20
    4001de04:	17ffff94 	b	4001dc54 <arm_gic_init+0x60>
	__DMB();
    4001de08:	d5033fbf 	dmb	sy
	__asm__ volatile("str %w0, [%1]" : : "r" (data), "r" (addr));
    4001de0c:	b9000004 	str	w4, [x0]
	     intid += GIC_NUM_PRI_PER_REG) {
    4001de10:	91001000 	add	x0, x0, #0x4
    4001de14:	17ffff9a 	b	4001dc7c <arm_gic_init+0x88>
	__DMB();
    4001de18:	d5033fbf 	dmb	sy
		idx = intid / GIC_NUM_CFG_PER_REG;
    4001de1c:	53047c20 	lsr	w0, w1, #4
		sys_write32(0, ICFGR(base, idx));
    4001de20:	0b000880 	add	w0, w4, w0, lsl #2
	__asm__ volatile("str %w0, [%1]" : : "r" (data), "r" (addr));
    4001de24:	b9000002 	str	w2, [x0]
	     intid += GIC_NUM_CFG_PER_REG) {
    4001de28:	11004021 	add	w1, w1, #0x10
    4001de2c:	17ffff9b 	b	4001dc98 <arm_gic_init+0xa4>

000000004001de30 <arm_gic_irq_set_priority>:
{
    4001de30:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    4001de34:	2a0003e3 	mov	w3, w0
	uint32_t mask = BIT(intid & (GIC_NUM_INTR_PER_REG - 1));
    4001de38:	12001000 	and	w0, w0, #0x1f
{
    4001de3c:	910003fd 	mov	x29, sp
    4001de40:	2a0203e6 	mov	w6, w2
	uint32_t mask = BIT(intid & (GIC_NUM_INTR_PER_REG - 1));
    4001de44:	d2800022 	mov	x2, #0x1                   	// #1
{
    4001de48:	2a0103e7 	mov	w7, w1
	uint32_t idx = intid / GIC_NUM_INTR_PER_REG;
    4001de4c:	53057c64 	lsr	w4, w3, #5
	mem_addr_t base = GET_DIST_BASE(intid);
    4001de50:	71007c7f 	cmp	w3, #0x1f
	uint32_t mask = BIT(intid & (GIC_NUM_INTR_PER_REG - 1));
    4001de54:	9ac02042 	lsl	x2, x2, x0
	mem_addr_t base = GET_DIST_BASE(intid);
    4001de58:	54000468 	b.hi	4001dee4 <arm_gic_irq_set_priority+0xb4>  // b.pmore
    4001de5c:	97ffff4c 	bl	4001db8c <gic_get_rdist>
    4001de60:	91404005 	add	x5, x0, #0x10, lsl #12
	__DMB();
    4001de64:	d5033fbf 	dmb	sy
	sys_write32(mask, ICENABLER(base, idx));
    4001de68:	531e7484 	lsl	w4, w4, #2
    4001de6c:	11060084 	add	w4, w4, #0x180
    4001de70:	8b2440a4 	add	x4, x5, w4, uxtw
	__asm__ volatile("str %w0, [%1]" : : "r" (data), "r" (addr));
    4001de74:	b9000082 	str	w2, [x4]
	gic_wait_rwp(intid);
    4001de78:	2a0303e0 	mov	w0, w3
    4001de7c:	97ffff4b 	bl	4001dba8 <gic_wait_rwp.isra.0>
	__DMB();
    4001de80:	d5033fbf 	dmb	sy
	sys_write8(prio & GIC_PRI_MASK, IPRIORITYR(base, intid));
    4001de84:	2a0303e0 	mov	w0, w3
    4001de88:	91100000 	add	x0, x0, #0x400
    4001de8c:	8b050000 	add	x0, x0, x5
	__asm__ volatile("strb %w0, [%1]" : : "r" (data), "r" (addr));
    4001de90:	39000007 	strb	w7, [x0]
	if (!GIC_IS_SGI(intid)) {
    4001de94:	71003c7f 	cmp	w3, #0xf
    4001de98:	54000229 	b.ls	4001dedc <arm_gic_irq_set_priority+0xac>  // b.plast
		idx = intid / GIC_NUM_CFG_PER_REG;
    4001de9c:	53047c60 	lsr	w0, w3, #4
		shift = (intid & (GIC_NUM_CFG_PER_REG - 1)) * 2;
    4001dea0:	531f0c64 	ubfiz	w4, w3, #1, #4
		val = sys_read32(ICFGR(base, idx));
    4001dea4:	531e7400 	lsl	w0, w0, #2
    4001dea8:	11300000 	add	w0, w0, #0xc00
    4001deac:	8b2040a0 	add	x0, x5, w0, uxtw
	__asm__ volatile("ldr %w0, [%1]" : "=r" (val) : "r" (addr));
    4001deb0:	b9400002 	ldr	w2, [x0]
	__DMB();
    4001deb4:	d5033fbf 	dmb	sy
		val &= ~(GICD_ICFGR_MASK << shift);
    4001deb8:	d2800061 	mov	x1, #0x3                   	// #3
    4001debc:	9ac42021 	lsl	x1, x1, x4
    4001dec0:	0a210041 	bic	w1, w2, w1
		if (flags & IRQ_TYPE_EDGE) {
    4001dec4:	36100086 	tbz	w6, #2, 4001ded4 <arm_gic_irq_set_priority+0xa4>
			val |= (GICD_ICFGR_TYPE << shift);
    4001dec8:	d2800042 	mov	x2, #0x2                   	// #2
    4001decc:	9ac42042 	lsl	x2, x2, x4
    4001ded0:	2a020021 	orr	w1, w1, w2
	__DMB();
    4001ded4:	d5033fbf 	dmb	sy
	__asm__ volatile("str %w0, [%1]" : : "r" (data), "r" (addr));
    4001ded8:	b9000001 	str	w1, [x0]
}
    4001dedc:	a8c17bfd 	ldp	x29, x30, [sp], #16
    4001dee0:	d65f03c0 	ret
	mem_addr_t base = GET_DIST_BASE(intid);
    4001dee4:	d2a10005 	mov	x5, #0x8000000             	// #134217728
    4001dee8:	17ffffdf 	b	4001de64 <arm_gic_irq_set_priority+0x34>

000000004001deec <arm_gic_irq_enable>:
{
    4001deec:	2a0003e2 	mov	w2, w0
	uint32_t mask = BIT(intid & (GIC_NUM_INTR_PER_REG - 1));
    4001def0:	12001000 	and	w0, w0, #0x1f
    4001def4:	d2800024 	mov	x4, #0x1                   	// #1
	sys_write32(mask, ISENABLER(GET_DIST_BASE(intid), idx));
    4001def8:	71007c5f 	cmp	w2, #0x1f
	uint32_t idx = intid / GIC_NUM_INTR_PER_REG;
    4001defc:	53057c43 	lsr	w3, w2, #5
	uint32_t mask = BIT(intid & (GIC_NUM_INTR_PER_REG - 1));
    4001df00:	9ac02084 	lsl	x4, x4, x0
	sys_write32(mask, ISENABLER(GET_DIST_BASE(intid), idx));
    4001df04:	540002c8 	b.hi	4001df5c <arm_gic_irq_enable+0x70>  // b.pmore
{
    4001df08:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    4001df0c:	910003fd 	mov	x29, sp
	sys_write32(mask, ISENABLER(GET_DIST_BASE(intid), idx));
    4001df10:	97ffff1f 	bl	4001db8c <gic_get_rdist>
    4001df14:	91404000 	add	x0, x0, #0x10, lsl #12
    4001df18:	91040000 	add	x0, x0, #0x100
	__DMB();
    4001df1c:	d5033fbf 	dmb	sy
    4001df20:	d37e6863 	ubfiz	x3, x3, #2, #27
    4001df24:	8b000063 	add	x3, x3, x0
	__asm__ volatile("str %w0, [%1]" : : "r" (data), "r" (addr));
    4001df28:	b9000064 	str	w4, [x3]
	if (GIC_IS_SPI(intid))
    4001df2c:	51008040 	sub	w0, w2, #0x20
    4001df30:	710f6c1f 	cmp	w0, #0x3db
    4001df34:	54000108 	b.hi	4001df54 <arm_gic_irq_enable+0x68>  // b.pmore
		sys_write64(MPIDR_TO_CORE(GET_MPIDR()),
    4001df38:	d53800a1 	mrs	x1, mpidr_el1
	return val;
}

static ALWAYS_INLINE void sys_write64(uint64_t data, mem_addr_t addr)
{
	__DMB();
    4001df3c:	d5033fbf 	dmb	sy
    4001df40:	528c0000 	mov	w0, #0x6000                	// #24576
    4001df44:	72a10000 	movk	w0, #0x800, lsl #16
    4001df48:	92401c21 	and	x1, x1, #0xff
    4001df4c:	0b020c02 	add	w2, w0, w2, lsl #3
	__asm__ volatile("str %x0, [%1]" : : "r" (data), "r" (addr));
    4001df50:	f9000041 	str	x1, [x2]
}
    4001df54:	a8c17bfd 	ldp	x29, x30, [sp], #16
    4001df58:	d65f03c0 	ret
	sys_write32(mask, ISENABLER(GET_DIST_BASE(intid), idx));
    4001df5c:	d2802000 	mov	x0, #0x100                 	// #256
    4001df60:	f2a10000 	movk	x0, #0x800, lsl #16
	__DMB();
    4001df64:	d5033fbf 	dmb	sy
    4001df68:	d37e6863 	ubfiz	x3, x3, #2, #27
    4001df6c:	8b000063 	add	x3, x3, x0
	__asm__ volatile("str %w0, [%1]" : : "r" (data), "r" (addr));
    4001df70:	b9000064 	str	w4, [x3]
	if (GIC_IS_SPI(intid))
    4001df74:	51008040 	sub	w0, w2, #0x20
    4001df78:	710f6c1f 	cmp	w0, #0x3db
    4001df7c:	54000128 	b.hi	4001dfa0 <arm_gic_irq_enable+0xb4>  // b.pmore
		sys_write64(MPIDR_TO_CORE(GET_MPIDR()),
    4001df80:	d53800a1 	mrs	x1, mpidr_el1
	__DMB();
    4001df84:	d5033fbf 	dmb	sy
    4001df88:	528c0000 	mov	w0, #0x6000                	// #24576
    4001df8c:	72a10000 	movk	w0, #0x800, lsl #16
    4001df90:	92401c21 	and	x1, x1, #0xff
    4001df94:	0b020c02 	add	w2, w0, w2, lsl #3
	__asm__ volatile("str %x0, [%1]" : : "r" (data), "r" (addr));
    4001df98:	f9000041 	str	x1, [x2]
    4001df9c:	d65f03c0 	ret
    4001dfa0:	d65f03c0 	ret

000000004001dfa4 <arm_gic_get_active>:
	intid = read_sysreg(ICC_IAR1_EL1);
    4001dfa4:	d538cc00 	mrs	x0, s3_0_c12_c12_0
}
    4001dfa8:	d65f03c0 	ret

000000004001dfac <arm_gic_eoi>:
	__DSB();
    4001dfac:	d5033f9f 	dsb	sy
	write_sysreg(intid, ICC_EOIR1_EL1);
    4001dfb0:	d518cc20 	msr	s3_0_c12_c12_1, x0
}
    4001dfb4:	d65f03c0 	ret

000000004001dfb8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    4001dfb8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    4001dfbc:	d0000321 	adrp	x1, 40083000 <ws+0x3a40>
    4001dfc0:	f0000000 	adrp	x0, 40020000 <__rodata_region_start>
    4001dfc4:	91014000 	add	x0, x0, #0x50
{
    4001dfc8:	910003fd 	mov	x29, sp
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    4001dfcc:	f904e020 	str	x0, [x1, #2496]
{
    4001dfd0:	f9000bf3 	str	x19, [sp, #16]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    4001dfd4:	94000198 	bl	4001e634 <z_device_ready>
    4001dfd8:	72001c1f 	tst	w0, #0xff
    4001dfdc:	54000160 	b.eq	4001e008 <uart_console_init+0x50>  // b.none
	__stdout_hook_install(console_out);
    4001dfe0:	b0000013 	adrp	x19, 4001e000 <uart_console_init+0x48>
    4001dfe4:	91004273 	add	x19, x19, #0x10
    4001dfe8:	aa1303e0 	mov	x0, x19
    4001dfec:	97fffe6f 	bl	4001d9a8 <__stdout_hook_install>
	__printk_hook_install(console_out);
    4001dff0:	aa1303e0 	mov	x0, x19
    4001dff4:	97fff50c 	bl	4001b424 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    4001dff8:	52800000 	mov	w0, #0x0                   	// #0
}
    4001dffc:	f9400bf3 	ldr	x19, [sp, #16]
    4001e000:	a8c27bfd 	ldp	x29, x30, [sp], #32
    4001e004:	d65f03c0 	ret
		return -ENODEV;
    4001e008:	12800240 	mov	w0, #0xffffffed            	// #-19
    4001e00c:	17fffffc 	b	4001dffc <uart_console_init+0x44>

000000004001e010 <console_out>:
{
    4001e010:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	if ('\n' == c) {
    4001e014:	7100281f 	cmp	w0, #0xa
{
    4001e018:	910003fd 	mov	x29, sp
    4001e01c:	a90153f3 	stp	x19, x20, [sp, #16]
    4001e020:	2a0003f3 	mov	w19, w0
    4001e024:	b0000334 	adrp	x20, 40083000 <ws+0x3a40>
	if ('\n' == c) {
    4001e028:	540000c1 	b.ne	4001e040 <console_out+0x30>  // b.any
		uart_poll_out(uart_console_dev, '\r');
    4001e02c:	f944e280 	ldr	x0, [x20, #2496]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    4001e030:	f9400801 	ldr	x1, [x0, #16]
    4001e034:	f9400422 	ldr	x2, [x1, #8]
    4001e038:	528001a1 	mov	w1, #0xd                   	// #13
    4001e03c:	d63f0040 	blr	x2
	uart_poll_out(uart_console_dev, c);
    4001e040:	f944e280 	ldr	x0, [x20, #2496]
    4001e044:	f9400801 	ldr	x1, [x0, #16]
    4001e048:	f9400422 	ldr	x2, [x1, #8]
    4001e04c:	2a1303e1 	mov	w1, w19
    4001e050:	d63f0040 	blr	x2
}
    4001e054:	2a1303e0 	mov	w0, w19
    4001e058:	a94153f3 	ldp	x19, x20, [sp, #16]
    4001e05c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    4001e060:	d65f03c0 	ret

000000004001e064 <pl011_poll_in>:
	return 0;
}

static bool pl011_is_readable(const struct device *dev)
{
	if (!DEV_DATA(dev)->sbsa &&
    4001e064:	f9401003 	ldr	x3, [x0, #32]
	    (!(PL011_REGS(dev)->cr & PL011_CR_UARTEN) ||
    4001e068:	f9400402 	ldr	x2, [x0, #8]
	if (!DEV_DATA(dev)->sbsa &&
    4001e06c:	39401063 	ldrb	w3, [x3, #4]
	    (!(PL011_REGS(dev)->cr & PL011_CR_UARTEN) ||
    4001e070:	f9400042 	ldr	x2, [x2]
	if (!DEV_DATA(dev)->sbsa &&
    4001e074:	350000a3 	cbnz	w3, 4001e088 <pl011_poll_in+0x24>
	    (!(PL011_REGS(dev)->cr & PL011_CR_UARTEN) ||
    4001e078:	b9403043 	ldr	w3, [x2, #48]
	if (!DEV_DATA(dev)->sbsa &&
    4001e07c:	36000183 	tbz	w3, #0, 4001e0ac <pl011_poll_in+0x48>
	     !(PL011_REGS(dev)->cr & PL011_CR_RXE)))
    4001e080:	b9403043 	ldr	w3, [x2, #48]
	    (!(PL011_REGS(dev)->cr & PL011_CR_UARTEN) ||
    4001e084:	36480143 	tbz	w3, #9, 4001e0ac <pl011_poll_in+0x48>
		return false;

	return (PL011_REGS(dev)->fr & PL011_FR_RXFE) == 0U;
    4001e088:	b9401843 	ldr	w3, [x2, #24]
}

static int pl011_poll_in(const struct device *dev, unsigned char *c)
{
	if (!pl011_is_readable(dev)) {
    4001e08c:	37200103 	tbnz	w3, #4, 4001e0ac <pl011_poll_in+0x48>
		return -1;
	}

	/* got a character */
	*c = (unsigned char)PL011_REGS(dev)->dr;
    4001e090:	b9400042 	ldr	w2, [x2]
    4001e094:	39000022 	strb	w2, [x1]

	return PL011_REGS(dev)->rsr & PL011_RSR_ERROR_MASK;
    4001e098:	f9400400 	ldr	x0, [x0, #8]
    4001e09c:	f9400000 	ldr	x0, [x0]
    4001e0a0:	b9400400 	ldr	w0, [x0, #4]
    4001e0a4:	12000c00 	and	w0, w0, #0xf
}
    4001e0a8:	d65f03c0 	ret
		return -1;
    4001e0ac:	12800000 	mov	w0, #0xffffffff            	// #-1
    4001e0b0:	17fffffe 	b	4001e0a8 <pl011_poll_in+0x44>

000000004001e0b4 <pl011_poll_out>:

static void pl011_poll_out(const struct device *dev,
					     unsigned char c)
{
	/* Wait for space in FIFO */
	while (PL011_REGS(dev)->fr & PL011_FR_TXFF) {
    4001e0b4:	f9400400 	ldr	x0, [x0, #8]
{
    4001e0b8:	12001c21 	and	w1, w1, #0xff
	while (PL011_REGS(dev)->fr & PL011_FR_TXFF) {
    4001e0bc:	f9400000 	ldr	x0, [x0]
    4001e0c0:	b9401802 	ldr	w2, [x0, #24]
    4001e0c4:	372fffe2 	tbnz	w2, #5, 4001e0c0 <pl011_poll_out+0xc>
		; /* Wait */
	}

	/* Send a character */
	PL011_REGS(dev)->dr = (uint32_t)c;
    4001e0c8:	b9000001 	str	w1, [x0]
}
    4001e0cc:	d65f03c0 	ret

000000004001e0d0 <pl011_fifo_fill>:
static int pl011_fifo_fill(const struct device *dev,
				    const uint8_t *tx_data, int len)
{
	uint8_t num_tx = 0U;

	while (!(PL011_REGS(dev)->fr & PL011_FR_TXFF) &&
    4001e0d0:	f9400400 	ldr	x0, [x0, #8]
    4001e0d4:	f9400003 	ldr	x3, [x0]
	uint8_t num_tx = 0U;
    4001e0d8:	52800000 	mov	w0, #0x0                   	// #0
	while (!(PL011_REGS(dev)->fr & PL011_FR_TXFF) &&
    4001e0dc:	b9401864 	ldr	w4, [x3, #24]
    4001e0e0:	37280084 	tbnz	w4, #5, 4001e0f0 <pl011_fifo_fill+0x20>
	       (len - num_tx > 0)) {
    4001e0e4:	4b000044 	sub	w4, w2, w0
	while (!(PL011_REGS(dev)->fr & PL011_FR_TXFF) &&
    4001e0e8:	7100009f 	cmp	w4, #0x0
    4001e0ec:	5400004c 	b.gt	4001e0f4 <pl011_fifo_fill+0x24>
		PL011_REGS(dev)->dr = tx_data[num_tx++];
	}
	return num_tx;
}
    4001e0f0:	d65f03c0 	ret
		PL011_REGS(dev)->dr = tx_data[num_tx++];
    4001e0f4:	11000404 	add	w4, w0, #0x1
    4001e0f8:	92401c00 	and	x0, x0, #0xff
    4001e0fc:	38606820 	ldrb	w0, [x1, x0]
    4001e100:	b9000060 	str	w0, [x3]
    4001e104:	12001c80 	and	w0, w4, #0xff
    4001e108:	17fffff5 	b	4001e0dc <pl011_fifo_fill+0xc>

000000004001e10c <pl011_fifo_read>:

static int pl011_fifo_read(const struct device *dev,
				    uint8_t *rx_data, const int len)
{
    4001e10c:	aa0003e4 	mov	x4, x0
	uint8_t num_rx = 0U;
    4001e110:	52800000 	mov	w0, #0x0                   	// #0

	while ((len - num_rx > 0) &&
    4001e114:	4b000043 	sub	w3, w2, w0
    4001e118:	7100007f 	cmp	w3, #0x0
    4001e11c:	540000ad 	b.le	4001e130 <pl011_fifo_read+0x24>
	       !(PL011_REGS(dev)->fr & PL011_FR_RXFE)) {
    4001e120:	f9400483 	ldr	x3, [x4, #8]
    4001e124:	f9400063 	ldr	x3, [x3]
    4001e128:	b9401865 	ldr	w5, [x3, #24]
	while ((len - num_rx > 0) &&
    4001e12c:	36200045 	tbz	w5, #4, 4001e134 <pl011_fifo_read+0x28>
		rx_data[num_rx++] = PL011_REGS(dev)->dr;
	}

	return num_rx;
}
    4001e130:	d65f03c0 	ret
		rx_data[num_rx++] = PL011_REGS(dev)->dr;
    4001e134:	b9400066 	ldr	w6, [x3]
    4001e138:	92401c03 	and	x3, x0, #0xff
    4001e13c:	11000405 	add	w5, w0, #0x1
    4001e140:	12001ca0 	and	w0, w5, #0xff
    4001e144:	38236826 	strb	w6, [x1, x3]
    4001e148:	17fffff3 	b	4001e114 <pl011_fifo_read+0x8>

000000004001e14c <pl011_irq_tx_enable>:

static void pl011_irq_tx_enable(const struct device *dev)
{
	PL011_REGS(dev)->imsc |= PL011_IMSC_TXIM;
    4001e14c:	f9400400 	ldr	x0, [x0, #8]
    4001e150:	f9400001 	ldr	x1, [x0]
    4001e154:	b9403820 	ldr	w0, [x1, #56]
    4001e158:	321b0000 	orr	w0, w0, #0x20
    4001e15c:	b9003820 	str	w0, [x1, #56]
}
    4001e160:	d65f03c0 	ret

000000004001e164 <pl011_irq_tx_disable>:

static void pl011_irq_tx_disable(const struct device *dev)
{
	PL011_REGS(dev)->imsc &= ~PL011_IMSC_TXIM;
    4001e164:	f9400400 	ldr	x0, [x0, #8]
    4001e168:	f9400001 	ldr	x1, [x0]
    4001e16c:	b9403820 	ldr	w0, [x1, #56]
    4001e170:	121a7800 	and	w0, w0, #0xffffffdf
    4001e174:	b9003820 	str	w0, [x1, #56]
}
    4001e178:	d65f03c0 	ret

000000004001e17c <pl011_irq_tx_complete>:

static int pl011_irq_tx_complete(const struct device *dev)
{
	/* check for TX FIFO empty */
	return PL011_REGS(dev)->fr & PL011_FR_TXFE;
    4001e17c:	f9400400 	ldr	x0, [x0, #8]
    4001e180:	f9400000 	ldr	x0, [x0]
    4001e184:	b9401800 	ldr	w0, [x0, #24]
}
    4001e188:	12190000 	and	w0, w0, #0x80
    4001e18c:	d65f03c0 	ret

000000004001e190 <pl011_irq_rx_enable>:
		pl011_irq_tx_complete(dev));
}

static void pl011_irq_rx_enable(const struct device *dev)
{
	PL011_REGS(dev)->imsc |= PL011_IMSC_RXIM |
    4001e190:	f9400400 	ldr	x0, [x0, #8]
    4001e194:	52800a02 	mov	w2, #0x50                  	// #80
    4001e198:	f9400001 	ldr	x1, [x0]
    4001e19c:	b9403820 	ldr	w0, [x1, #56]
    4001e1a0:	2a020000 	orr	w0, w0, w2
    4001e1a4:	b9003820 	str	w0, [x1, #56]
				 PL011_IMSC_RTIM;
}
    4001e1a8:	d65f03c0 	ret

000000004001e1ac <pl011_irq_rx_disable>:

static void pl011_irq_rx_disable(const struct device *dev)
{
	PL011_REGS(dev)->imsc &= ~(PL011_IMSC_RXIM |
    4001e1ac:	f9400400 	ldr	x0, [x0, #8]
    4001e1b0:	12800a02 	mov	w2, #0xffffffaf            	// #-81
    4001e1b4:	f9400001 	ldr	x1, [x0]
    4001e1b8:	b9403820 	ldr	w0, [x1, #56]
    4001e1bc:	0a020000 	and	w0, w0, w2
    4001e1c0:	b9003820 	str	w0, [x1, #56]
				   PL011_IMSC_RTIM);
}
    4001e1c4:	d65f03c0 	ret

000000004001e1c8 <pl011_irq_rx_ready>:

static int pl011_irq_rx_ready(const struct device *dev)
{
	if (!DEV_DATA(dev)->sbsa && !(PL011_REGS(dev)->cr & PL011_CR_RXE))
    4001e1c8:	f9400401 	ldr	x1, [x0, #8]
    4001e1cc:	f9401000 	ldr	x0, [x0, #32]
    4001e1d0:	f9400021 	ldr	x1, [x1]
    4001e1d4:	39401000 	ldrb	w0, [x0, #4]
    4001e1d8:	35000060 	cbnz	w0, 4001e1e4 <pl011_irq_rx_ready+0x1c>
    4001e1dc:	b9403020 	ldr	w0, [x1, #48]
    4001e1e0:	364800e0 	tbz	w0, #9, 4001e1fc <pl011_irq_rx_ready+0x34>
		return false;

	return ((PL011_REGS(dev)->imsc & PL011_IMSC_RXIM) &&
    4001e1e4:	b9403820 	ldr	w0, [x1, #56]
    4001e1e8:	362000a0 	tbz	w0, #4, 4001e1fc <pl011_irq_rx_ready+0x34>
		(!(PL011_REGS(dev)->fr & PL011_FR_RXFE)));
    4001e1ec:	b9401820 	ldr	w0, [x1, #24]
	return ((PL011_REGS(dev)->imsc & PL011_IMSC_RXIM) &&
    4001e1f0:	d27c0000 	eor	x0, x0, #0x10
    4001e1f4:	d3441000 	ubfx	x0, x0, #4, #1
}
    4001e1f8:	d65f03c0 	ret
	return ((PL011_REGS(dev)->imsc & PL011_IMSC_RXIM) &&
    4001e1fc:	52800000 	mov	w0, #0x0                   	// #0
    4001e200:	17fffffe 	b	4001e1f8 <pl011_irq_rx_ready+0x30>

000000004001e204 <pl011_irq_err_enable>:

static void pl011_irq_err_enable(const struct device *dev)
{
	/* enable framing, parity, break, and overrun */
	PL011_REGS(dev)->imsc |= PL011_IMSC_ERROR_MASK;
    4001e204:	f9400400 	ldr	x0, [x0, #8]
    4001e208:	f9400001 	ldr	x1, [x0]
    4001e20c:	b9403820 	ldr	w0, [x1, #56]
    4001e210:	32190c00 	orr	w0, w0, #0x780
    4001e214:	b9003820 	str	w0, [x1, #56]
}
    4001e218:	d65f03c0 	ret

000000004001e21c <pl011_irq_err_disable>:

static void pl011_irq_err_disable(const struct device *dev)
{
	PL011_REGS(dev)->imsc &= ~PL011_IMSC_ERROR_MASK;
    4001e21c:	f9400400 	ldr	x0, [x0, #8]
    4001e220:	f9400001 	ldr	x1, [x0]
    4001e224:	b9403820 	ldr	w0, [x1, #56]
    4001e228:	12156c00 	and	w0, w0, #0xfffff87f
    4001e22c:	b9003820 	str	w0, [x1, #56]
}
    4001e230:	d65f03c0 	ret

000000004001e234 <pl011_irq_update>:
}

static int pl011_irq_update(const struct device *dev)
{
	return 1;
}
    4001e234:	52800020 	mov	w0, #0x1                   	// #1
    4001e238:	d65f03c0 	ret

000000004001e23c <pl011_irq_callback_set>:

static void pl011_irq_callback_set(const struct device *dev,
					    uart_irq_callback_user_data_t cb,
					    void *cb_data)
{
	DEV_DATA(dev)->irq_cb = cb;
    4001e23c:	f9401000 	ldr	x0, [x0, #32]
	DEV_DATA(dev)->irq_cb_data = cb_data;
    4001e240:	a9008801 	stp	x1, x2, [x0, #8]
}
    4001e244:	d65f03c0 	ret

000000004001e248 <pl011_isr>:
}

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
void pl011_isr(const struct device *dev)
{
	struct pl011_data *data = DEV_DATA(dev);
    4001e248:	f9401001 	ldr	x1, [x0, #32]

	/* Verify if the callback has been registered */
	if (data->irq_cb) {
    4001e24c:	f9400422 	ldr	x2, [x1, #8]
    4001e250:	b4000082 	cbz	x2, 4001e260 <pl011_isr+0x18>
		data->irq_cb(dev, data->irq_cb_data);
    4001e254:	f9400821 	ldr	x1, [x1, #16]
    4001e258:	aa0203f0 	mov	x16, x2
    4001e25c:	d61f0200 	br	x16
	}
}
    4001e260:	d65f03c0 	ret

000000004001e264 <pl011_irq_config_func_0>:
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &pl011_driver_api);

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
static void pl011_irq_config_func_0(const struct device *dev)
{
    4001e264:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
#if DT_NUM_IRQS(DT_INST(0, arm_pl011)) == 1
	IRQ_CONNECT(DT_INST_IRQN(0),
    4001e268:	52800002 	mov	w2, #0x0                   	// #0
    4001e26c:	52800001 	mov	w1, #0x0                   	// #0
{
    4001e270:	910003fd 	mov	x29, sp
	IRQ_CONNECT(DT_INST_IRQN(0),
    4001e274:	52800420 	mov	w0, #0x21                  	// #33
    4001e278:	97fffae0 	bl	4001cdf8 <z_arm64_irq_priority_set>
		    pl011_isr,
		    DEVICE_DT_INST_GET(0),
		    0);
	irq_enable(DT_INST_IRQ_BY_NAME(0, rxtim, irq));
#endif
}
    4001e27c:	a8c17bfd 	ldp	x29, x30, [sp], #16
	irq_enable(DT_INST_IRQN(0));
    4001e280:	52800420 	mov	w0, #0x21                  	// #33
    4001e284:	17fffadc 	b	4001cdf4 <arch_irq_enable>

000000004001e288 <pl011_irq_tx_ready>:
	if (!DEV_DATA(dev)->sbsa && !(PL011_REGS(dev)->cr & PL011_CR_TXE))
    4001e288:	f9401002 	ldr	x2, [x0, #32]
    4001e28c:	f9400401 	ldr	x1, [x0, #8]
    4001e290:	39401042 	ldrb	w2, [x2, #4]
    4001e294:	f9400021 	ldr	x1, [x1]
    4001e298:	35000062 	cbnz	w2, 4001e2a4 <pl011_irq_tx_ready+0x1c>
    4001e29c:	b9403022 	ldr	w2, [x1, #48]
    4001e2a0:	36400142 	tbz	w2, #8, 4001e2c8 <pl011_irq_tx_ready+0x40>
	return ((PL011_REGS(dev)->imsc & PL011_IMSC_TXIM) &&
    4001e2a4:	b9403821 	ldr	w1, [x1, #56]
    4001e2a8:	36280101 	tbz	w1, #5, 4001e2c8 <pl011_irq_tx_ready+0x40>
{
    4001e2ac:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    4001e2b0:	910003fd 	mov	x29, sp
		pl011_irq_tx_complete(dev));
    4001e2b4:	97ffffb2 	bl	4001e17c <pl011_irq_tx_complete>
	return ((PL011_REGS(dev)->imsc & PL011_IMSC_TXIM) &&
    4001e2b8:	7100001f 	cmp	w0, #0x0
    4001e2bc:	1a9f07e0 	cset	w0, ne  // ne = any
}
    4001e2c0:	a8c17bfd 	ldp	x29, x30, [sp], #16
    4001e2c4:	d65f03c0 	ret
		return false;
    4001e2c8:	52800000 	mov	w0, #0x0                   	// #0
}
    4001e2cc:	d65f03c0 	ret

000000004001e2d0 <pl011_irq_is_pending>:
{
    4001e2d0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    4001e2d4:	aa0003e2 	mov	x2, x0
    4001e2d8:	910003fd 	mov	x29, sp
	return pl011_irq_rx_ready(dev) || pl011_irq_tx_ready(dev);
    4001e2dc:	97ffffbb 	bl	4001e1c8 <pl011_irq_rx_ready>
    4001e2e0:	350000e0 	cbnz	w0, 4001e2fc <pl011_irq_is_pending+0x2c>
    4001e2e4:	aa0203e0 	mov	x0, x2
    4001e2e8:	97ffffe8 	bl	4001e288 <pl011_irq_tx_ready>
    4001e2ec:	7100001f 	cmp	w0, #0x0
    4001e2f0:	1a9f07e0 	cset	w0, ne  // ne = any
}
    4001e2f4:	a8c17bfd 	ldp	x29, x30, [sp], #16
    4001e2f8:	d65f03c0 	ret
	return pl011_irq_rx_ready(dev) || pl011_irq_tx_ready(dev);
    4001e2fc:	52800020 	mov	w0, #0x1                   	// #1
    4001e300:	17fffffd 	b	4001e2f4 <pl011_irq_is_pending+0x24>

000000004001e304 <pl011_init>:
{
    4001e304:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    4001e308:	910003fd 	mov	x29, sp
	if (!DEV_DATA(dev)->sbsa) {
    4001e30c:	f9401002 	ldr	x2, [x0, #32]
{
    4001e310:	f9000bf3 	str	x19, [sp, #16]
    4001e314:	aa0003f3 	mov	x19, x0
	if (!DEV_DATA(dev)->sbsa) {
    4001e318:	39401040 	ldrb	w0, [x2, #4]
    4001e31c:	35000460 	cbnz	w0, 4001e3a8 <pl011_init+0xa4>
    4001e320:	f9400663 	ldr	x3, [x19, #8]
				/ (baudrate * 16U);
    4001e324:	b9400042 	ldr	w2, [x2]
	PL011_REGS(dev)->cr &= ~PL011_CR_UARTEN;
    4001e328:	f9400061 	ldr	x1, [x3]
				/ (baudrate * 16U);
    4001e32c:	531c6c42 	lsl	w2, w2, #4
	PL011_REGS(dev)->cr &= ~PL011_CR_UARTEN;
    4001e330:	b9403020 	ldr	w0, [x1, #48]
    4001e334:	121f7800 	and	w0, w0, #0xfffffffe
    4001e338:	b9003020 	str	w0, [x1, #48]
	PL011_REGS(dev)->lcr_h &= ~PL011_LCRH_FEN;
    4001e33c:	b9402c20 	ldr	w0, [x1, #44]
    4001e340:	121b7800 	and	w0, w0, #0xffffffef
    4001e344:	b9002c20 	str	w0, [x1, #44]
	uint64_t bauddiv = (((uint64_t)clk) << PL011_FBRD_WIDTH)
    4001e348:	b9400860 	ldr	w0, [x3, #8]
    4001e34c:	d37ae400 	lsl	x0, x0, #6
    4001e350:	9ac20800 	udiv	x0, x0, x2
	if ((bauddiv < (1u << PL011_FBRD_WIDTH))
    4001e354:	b2793be2 	mov	x2, #0x3fff80              	// #4194176
		|| (bauddiv > (65535u << PL011_FBRD_WIDTH))) {
    4001e358:	d1010003 	sub	x3, x0, #0x40
	if ((bauddiv < (1u << PL011_FBRD_WIDTH))
    4001e35c:	eb02007f 	cmp	x3, x2
    4001e360:	54000688 	b.hi	4001e430 <pl011_init+0x12c>  // b.pmore
	PL011_REGS(dev)->ibrd = bauddiv >> PL011_FBRD_WIDTH;
    4001e364:	d346fc02 	lsr	x2, x0, #6
    4001e368:	b9002422 	str	w2, [x1, #36]
	PL011_REGS(dev)->fbrd = bauddiv & ((1u << PL011_FBRD_WIDTH) - 1u);
    4001e36c:	12001400 	and	w0, w0, #0x3f
    4001e370:	b9002820 	str	w0, [x1, #40]
	__DMB();
    4001e374:	d5033fbf 	dmb	sy
	PL011_REGS(dev)->lcr_h = PL011_REGS(dev)->lcr_h;
    4001e378:	f9400660 	ldr	x0, [x19, #8]
		lcrh &= ~(BIT(0) | BIT(7));
    4001e37c:	12801ce2 	mov	w2, #0xffffff18            	// #-232
	PL011_REGS(dev)->lcr_h = PL011_REGS(dev)->lcr_h;
    4001e380:	f9400000 	ldr	x0, [x0]
    4001e384:	b9402c01 	ldr	w1, [x0, #44]
    4001e388:	b9002c01 	str	w1, [x0, #44]
		lcrh = PL011_REGS(dev)->lcr_h & ~(PL011_LCRH_FORMAT_MASK);
    4001e38c:	b9402c01 	ldr	w1, [x0, #44]
		lcrh &= ~(BIT(0) | BIT(7));
    4001e390:	0a020021 	and	w1, w1, w2
		lcrh |= PL011_LCRH_WLEN_SIZE(8) << PL011_LCRH_WLEN_SHIFT;
    4001e394:	321b0421 	orr	w1, w1, #0x60
		PL011_REGS(dev)->lcr_h = lcrh;
    4001e398:	b9002c01 	str	w1, [x0, #44]
	PL011_REGS(dev)->lcr_h |= PL011_LCRH_FEN;
    4001e39c:	b9402c01 	ldr	w1, [x0, #44]
    4001e3a0:	321c0021 	orr	w1, w1, #0x10
    4001e3a4:	b9002c01 	str	w1, [x0, #44]
	PL011_REGS(dev)->imsc = 0U;
    4001e3a8:	f9400660 	ldr	x0, [x19, #8]
	PL011_REGS(dev)->icr = PL011_IMSC_MASK_ALL;
    4001e3ac:	5280ffe1 	mov	w1, #0x7ff                 	// #2047
	PL011_REGS(dev)->imsc = 0U;
    4001e3b0:	f9400000 	ldr	x0, [x0]
    4001e3b4:	b900381f 	str	wzr, [x0, #56]
	PL011_REGS(dev)->icr = PL011_IMSC_MASK_ALL;
    4001e3b8:	b9004401 	str	w1, [x0, #68]
	if (!DEV_DATA(dev)->sbsa) {
    4001e3bc:	f9401261 	ldr	x1, [x19, #32]
    4001e3c0:	39401021 	ldrb	w1, [x1, #4]
    4001e3c4:	350001a1 	cbnz	w1, 4001e3f8 <pl011_init+0xf4>
		PL011_REGS(dev)->dmacr = 0U;
    4001e3c8:	b900481f 	str	wzr, [x0, #72]
		__ISB();
    4001e3cc:	d5033fdf 	isb
		PL011_REGS(dev)->cr &= ~(BIT(14) | BIT(15) | BIT(1));
    4001e3d0:	f9400660 	ldr	x0, [x19, #8]
    4001e3d4:	12980042 	mov	w2, #0xffff3ffd            	// #-49155
    4001e3d8:	f9400000 	ldr	x0, [x0]
    4001e3dc:	b9403001 	ldr	w1, [x0, #48]
    4001e3e0:	0a020021 	and	w1, w1, w2
    4001e3e4:	b9003001 	str	w1, [x0, #48]
		PL011_REGS(dev)->cr |= PL011_CR_RXE | PL011_CR_TXE;
    4001e3e8:	b9403001 	ldr	w1, [x0, #48]
    4001e3ec:	32180421 	orr	w1, w1, #0x300
    4001e3f0:	b9003001 	str	w1, [x0, #48]
		__ISB();
    4001e3f4:	d5033fdf 	isb
	DEV_CFG(dev)->irq_config_func(dev);
    4001e3f8:	f9400660 	ldr	x0, [x19, #8]
    4001e3fc:	f9400801 	ldr	x1, [x0, #16]
    4001e400:	aa1303e0 	mov	x0, x19
    4001e404:	d63f0020 	blr	x1
	if (!DEV_DATA(dev)->sbsa)
    4001e408:	f9401260 	ldr	x0, [x19, #32]
    4001e40c:	39401000 	ldrb	w0, [x0, #4]
    4001e410:	350000c0 	cbnz	w0, 4001e428 <pl011_init+0x124>
	PL011_REGS(dev)->cr |=  PL011_CR_UARTEN;
    4001e414:	f9400660 	ldr	x0, [x19, #8]
    4001e418:	f9400001 	ldr	x1, [x0]
    4001e41c:	b9403020 	ldr	w0, [x1, #48]
    4001e420:	32000000 	orr	w0, w0, #0x1
    4001e424:	b9003020 	str	w0, [x1, #48]
	return 0;
    4001e428:	52800000 	mov	w0, #0x0                   	// #0
    4001e42c:	14000002 	b	4001e434 <pl011_init+0x130>
		return -EINVAL;
    4001e430:	128002a0 	mov	w0, #0xffffffea            	// #-22
}
    4001e434:	f9400bf3 	ldr	x19, [sp, #16]
    4001e438:	a8c27bfd 	ldp	x29, x30, [sp], #32
    4001e43c:	d65f03c0 	ret

000000004001e440 <arm_arch_timer_compare_isr>:
MAKE_REG_HELPER(daif)
    4001e440:	d53b4221 	mrs	x1, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001e444:	d50342df 	msr	daifset, #0x2
MAKE_REG_HELPER(cntvct_el0);
    4001e448:	d53be040 	mrs	x0, cntvct_el0
	ARG_UNUSED(arg);

	k_spinlock_key_t key = k_spin_lock(&lock);

	uint64_t curr_cycle = arm_arch_timer_count();
	uint32_t delta_ticks = (uint32_t)((curr_cycle - last_cycle) / CYC_PER_TICK);
    4001e44c:	b0000322 	adrp	x2, 40083000 <ws+0x3a40>
    4001e450:	f944e443 	ldr	x3, [x2, #2504]
    4001e454:	d2912d04 	mov	x4, #0x8968                	// #35176
    4001e458:	f2a00124 	movk	x4, #0x9, lsl #16
    4001e45c:	cb030000 	sub	x0, x0, x3

	last_cycle += delta_ticks * CYC_PER_TICK;
    4001e460:	f944e445 	ldr	x5, [x2, #2504]
	uint32_t delta_ticks = (uint32_t)((curr_cycle - last_cycle) / CYC_PER_TICK);
    4001e464:	9ac40800 	udiv	x0, x0, x4
	last_cycle += delta_ticks * CYC_PER_TICK;
    4001e468:	92407c03 	and	x3, x0, #0xffffffff
    4001e46c:	9b041463 	madd	x3, x3, x4, x5
    4001e470:	f904e443 	str	x3, [x2, #2504]
MAKE_REG_HELPER(cntv_ctl_el0)
    4001e474:	d53be322 	mrs	x2, cntv_ctl_el0
	uint64_t cntv_ctl;

	cntv_ctl = read_cntv_ctl_el0();

	if (mask) {
		cntv_ctl |= CNTV_CTL_IMASK_BIT;
    4001e478:	b27f0042 	orr	x2, x2, #0x2
    4001e47c:	d51be322 	msr	cntv_ctl_el0, x2
MAKE_REG_HELPER(daif)
    4001e480:	92407c21 	and	x1, x1, #0xffffffff
    4001e484:	d51b4221 	msr	daif, x1
		arm_arch_timer_set_irq_mask(true);
	}

	k_spin_unlock(&lock, key);

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? delta_ticks : 1);
    4001e488:	14000526 	b	4001f920 <sys_clock_announce>

000000004001e48c <sys_clock_driver_init>:
}

int sys_clock_driver_init(const struct device *dev)
{
    4001e48c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	ARG_UNUSED(dev);

	IRQ_CONNECT(ARM_ARCH_TIMER_IRQ, ARM_ARCH_TIMER_PRIO,
    4001e490:	52800042 	mov	w2, #0x2                   	// #2
    4001e494:	52801401 	mov	w1, #0xa0                  	// #160
{
    4001e498:	910003fd 	mov	x29, sp
	IRQ_CONNECT(ARM_ARCH_TIMER_IRQ, ARM_ARCH_TIMER_PRIO,
    4001e49c:	52800360 	mov	w0, #0x1b                  	// #27
    4001e4a0:	97fffa56 	bl	4001cdf8 <z_arm64_irq_priority_set>
MAKE_REG_HELPER(cntvct_el0);
    4001e4a4:	d53be040 	mrs	x0, cntvct_el0
		    arm_arch_timer_compare_isr, NULL, ARM_ARCH_TIMER_FLAGS);
	arm_arch_timer_init();
	arm_arch_timer_set_compare(arm_arch_timer_count() + CYC_PER_TICK);
    4001e4a8:	91426000 	add	x0, x0, #0x98, lsl #12
    4001e4ac:	9125a000 	add	x0, x0, #0x968
MAKE_REG_HELPER(cntv_cval_el0)
    4001e4b0:	d51be340 	msr	cntv_cval_el0, x0
MAKE_REG_HELPER(cntv_ctl_el0)
    4001e4b4:	d53be320 	mrs	x0, cntv_ctl_el0
		cntv_ctl |= CNTV_CTL_ENABLE_BIT;
    4001e4b8:	b2400000 	orr	x0, x0, #0x1
    4001e4bc:	d51be320 	msr	cntv_ctl_el0, x0
	arm_arch_timer_enable(true);
	irq_enable(ARM_ARCH_TIMER_IRQ);
    4001e4c0:	52800360 	mov	w0, #0x1b                  	// #27
    4001e4c4:	97fffa4c 	bl	4001cdf4 <arch_irq_enable>
    4001e4c8:	d53be320 	mrs	x0, cntv_ctl_el0
	} else {
		cntv_ctl &= ~CNTV_CTL_IMASK_BIT;
    4001e4cc:	927ef800 	and	x0, x0, #0xfffffffffffffffd
    4001e4d0:	d51be320 	msr	cntv_ctl_el0, x0
	arm_arch_timer_set_irq_mask(false);

	return 0;
}
    4001e4d4:	52800000 	mov	w0, #0x0                   	// #0
    4001e4d8:	a8c17bfd 	ldp	x29, x30, [sp], #16
    4001e4dc:	d65f03c0 	ret

000000004001e4e0 <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
#if defined(CONFIG_TICKLESS_KERNEL)

	if (ticks == K_TICKS_FOREVER && idle) {
    4001e4e0:	72001c3f 	tst	w1, #0xff
    4001e4e4:	3a411800 	ccmn	w0, #0x1, #0x0, ne  // ne = any
    4001e4e8:	54000460 	b.eq	4001e574 <sys_clock_set_timeout+0x94>  // b.none
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : \
    4001e4ec:	3100041f 	cmn	w0, #0x1
    4001e4f0:	54000440 	b.eq	4001e578 <sys_clock_set_timeout+0x98>  // b.none
    4001e4f4:	71000400 	subs	w0, w0, #0x1
    4001e4f8:	1a9f5000 	csel	w0, w0, wzr, pl  // pl = nfrst
MAKE_REG_HELPER(daif)
    4001e4fc:	d53b4223 	mrs	x3, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001e500:	d50342df 	msr	daifset, #0x2
MAKE_REG_HELPER(cntvct_el0);
    4001e504:	d53be045 	mrs	x5, cntvct_el0
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint64_t curr_cycle = arm_arch_timer_count();
	uint64_t req_cycle = ticks * CYC_PER_TICK;

	/* Round up to next tick boundary */
	req_cycle += (curr_cycle - last_cycle) + (CYC_PER_TICK - 1);
    4001e508:	b0000322 	adrp	x2, 40083000 <ws+0x3a40>
    4001e50c:	f944e444 	ldr	x4, [x2, #2504]
    4001e510:	d2912ce1 	mov	x1, #0x8967                	// #35175
    4001e514:	f2a00121 	movk	x1, #0x9, lsl #16
    4001e518:	cb040021 	sub	x1, x1, x4
    4001e51c:	52912d04 	mov	w4, #0x8968                	// #35176
    4001e520:	72a00124 	movk	w4, #0x9, lsl #16
    4001e524:	9b241400 	smaddl	x0, w0, w4, x5

	req_cycle = (req_cycle / CYC_PER_TICK) * CYC_PER_TICK;
    4001e528:	d2912d04 	mov	x4, #0x8968                	// #35176
    4001e52c:	f2a00124 	movk	x4, #0x9, lsl #16
	req_cycle += (curr_cycle - last_cycle) + (CYC_PER_TICK - 1);
    4001e530:	8b000020 	add	x0, x1, x0

	if ((req_cycle + last_cycle - curr_cycle) < MIN_DELAY) {
    4001e534:	f944e441 	ldr	x1, [x2, #2504]
	req_cycle = (req_cycle / CYC_PER_TICK) * CYC_PER_TICK;
    4001e538:	9ac40800 	udiv	x0, x0, x4
	if ((req_cycle + last_cycle - curr_cycle) < MIN_DELAY) {
    4001e53c:	cb050021 	sub	x1, x1, x5
	req_cycle = (req_cycle / CYC_PER_TICK) * CYC_PER_TICK;
    4001e540:	9b047c00 	mul	x0, x0, x4
	if ((req_cycle + last_cycle - curr_cycle) < MIN_DELAY) {
    4001e544:	8b000021 	add	x1, x1, x0
    4001e548:	f10f9c3f 	cmp	x1, #0x3e7
    4001e54c:	54000048 	b.hi	4001e554 <sys_clock_set_timeout+0x74>  // b.pmore
		req_cycle += CYC_PER_TICK;
    4001e550:	8b040000 	add	x0, x0, x4
	}

	arm_arch_timer_set_compare(req_cycle + last_cycle);
    4001e554:	f944e441 	ldr	x1, [x2, #2504]
    4001e558:	8b000020 	add	x0, x1, x0
MAKE_REG_HELPER(cntv_cval_el0)
    4001e55c:	d51be340 	msr	cntv_cval_el0, x0
MAKE_REG_HELPER(cntv_ctl_el0)
    4001e560:	d53be320 	mrs	x0, cntv_ctl_el0
    4001e564:	927ef800 	and	x0, x0, #0xfffffffffffffffd
    4001e568:	d51be320 	msr	cntv_ctl_el0, x0
MAKE_REG_HELPER(daif)
    4001e56c:	92407c60 	and	x0, x3, #0xffffffff
    4001e570:	d51b4220 	msr	daif, x0

#else  /* CONFIG_TICKLESS_KERNEL */
	ARG_UNUSED(ticks);
	ARG_UNUSED(idle);
#endif
}
    4001e574:	d65f03c0 	ret
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : \
    4001e578:	12b00000 	mov	w0, #0x7fffffff            	// #2147483647
    4001e57c:	17ffffe0 	b	4001e4fc <sys_clock_set_timeout+0x1c>

000000004001e580 <sys_clock_elapsed>:
    4001e580:	d53b4221 	mrs	x1, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001e584:	d50342df 	msr	daifset, #0x2
MAKE_REG_HELPER(cntvct_el0);
    4001e588:	d53be040 	mrs	x0, cntvct_el0
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = (uint32_t)((arm_arch_timer_count() - last_cycle)
    4001e58c:	b0000322 	adrp	x2, 40083000 <ws+0x3a40>
    4001e590:	f944e442 	ldr	x2, [x2, #2504]
MAKE_REG_HELPER(daif)
    4001e594:	92407c21 	and	x1, x1, #0xffffffff
    4001e598:	d51b4221 	msr	daif, x1
    4001e59c:	cb020000 	sub	x0, x0, x2
		    / CYC_PER_TICK);

	k_spin_unlock(&lock, key);
	return ret;
}
    4001e5a0:	d2912d01 	mov	x1, #0x8968                	// #35176
    4001e5a4:	f2a00121 	movk	x1, #0x9, lsl #16
    4001e5a8:	9ac10800 	udiv	x0, x0, x1
    4001e5ac:	d65f03c0 	ret

000000004001e5b0 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    4001e5b0:	d65f03c0 	ret

000000004001e5b4 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    4001e5b4:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4001e5b8:	f0000001 	adrp	x1, 40021000 <__device_handles_end+0x17e>
    4001e5bc:	910c4021 	add	x1, x1, #0x310
{
    4001e5c0:	910003fd 	mov	x29, sp
    4001e5c4:	a90153f3 	stp	x19, x20, [sp, #16]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4001e5c8:	f860d833 	ldr	x19, [x1, w0, sxtw #3]
    4001e5cc:	11000400 	add	w0, w0, #0x1
{
    4001e5d0:	a9025bf5 	stp	x21, x22, [sp, #32]
					rc = -rc;
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    4001e5d4:	52801ff6 	mov	w22, #0xff                  	// #255
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4001e5d8:	f860d835 	ldr	x21, [x1, w0, sxtw #3]
    4001e5dc:	eb1302bf 	cmp	x21, x19
    4001e5e0:	540000a8 	b.hi	4001e5f4 <z_sys_init_run_level+0x40>  // b.pmore
			}
			dev->state->initialized = true;
		}
	}
}
    4001e5e4:	a94153f3 	ldp	x19, x20, [sp, #16]
    4001e5e8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4001e5ec:	a8c37bfd 	ldp	x29, x30, [sp], #48
    4001e5f0:	d65f03c0 	ret
		const struct device *dev = entry->dev;
    4001e5f4:	a9405261 	ldp	x1, x20, [x19]
		int rc = entry->init(dev);
    4001e5f8:	aa1403e0 	mov	x0, x20
    4001e5fc:	d63f0020 	blr	x1
		if (dev != NULL) {
    4001e600:	b4000174 	cbz	x20, 4001e62c <z_sys_init_run_level+0x78>
			if (rc != 0) {
    4001e604:	7100001f 	cmp	w0, #0x0
				dev->state->init_res = rc;
    4001e608:	f9400e81 	ldr	x1, [x20, #24]
			if (rc != 0) {
    4001e60c:	340000a0 	cbz	w0, 4001e620 <z_sys_init_run_level+0x6c>
				if (rc < 0) {
    4001e610:	5a80a400 	cneg	w0, w0, lt  // lt = tstop
				dev->state->init_res = rc;
    4001e614:	7103fc1f 	cmp	w0, #0xff
    4001e618:	1a96d000 	csel	w0, w0, w22, le
    4001e61c:	39000020 	strb	w0, [x1]
			dev->state->initialized = true;
    4001e620:	79400020 	ldrh	w0, [x1]
    4001e624:	32180000 	orr	w0, w0, #0x100
    4001e628:	79000020 	strh	w0, [x1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4001e62c:	91004273 	add	x19, x19, #0x10
    4001e630:	17ffffeb 	b	4001e5dc <z_sys_init_run_level+0x28>

000000004001e634 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    4001e634:	b40000e0 	cbz	x0, 4001e650 <z_device_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    4001e638:	f9400c00 	ldr	x0, [x0, #24]
    4001e63c:	b9400000 	ldr	w0, [x0]
    4001e640:	12002000 	and	w0, w0, #0x1ff
    4001e644:	7104001f 	cmp	w0, #0x100
    4001e648:	1a9f17e0 	cset	w0, eq  // eq = none
}
    4001e64c:	d65f03c0 	ret
		return false;
    4001e650:	52800000 	mov	w0, #0x0                   	// #0
    4001e654:	17fffffe 	b	4001e64c <z_device_ready+0x18>

000000004001e658 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    4001e658:	b0000320 	adrp	x0, 40083000 <ws+0x3a40>
    4001e65c:	f944f000 	ldr	x0, [x0, #2528]
}
    4001e660:	91032000 	add	x0, x0, #0xc8
    4001e664:	d65f03c0 	ret

000000004001e668 <arch_system_halt>:
    4001e668:	d53b4220 	mrs	x0, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001e66c:	d50342df 	msr	daifset, #0x2
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    4001e670:	14000000 	b	4001e670 <arch_system_halt+0x8>

000000004001e674 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    4001e674:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    4001e678:	910003fd 	mov	x29, sp
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    4001e67c:	97fffffb 	bl	4001e668 <arch_system_halt>

000000004001e680 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4001e680:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    4001e684:	910003fd 	mov	x29, sp
    4001e688:	a90153f3 	stp	x19, x20, [sp, #16]
    4001e68c:	a9025bf5 	stp	x21, x22, [sp, #32]
    4001e690:	2a0003f5 	mov	w21, w0
    4001e694:	aa0103f6 	mov	x22, x1
MAKE_REG_HELPER(daif)
    4001e698:	d53b4234 	mrs	x20, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001e69c:	d50342df 	msr	daifset, #0x2
	return z_impl_z_current_get();
    4001e6a0:	940003c0 	bl	4001f5a0 <z_impl_z_current_get>
MAKE_REG_HELPER(daif)
    4001e6a4:	92407e94 	and	x20, x20, #0xffffffff
    4001e6a8:	aa0003f3 	mov	x19, x0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    4001e6ac:	aa1603e1 	mov	x1, x22
    4001e6b0:	2a1503e0 	mov	w0, w21
    4001e6b4:	97fffff0 	bl	4001e674 <k_sys_fatal_error_handler>
    4001e6b8:	d51b4234 	msr	daif, x20
	z_impl_k_thread_abort(thread);
    4001e6bc:	aa1303e0 	mov	x0, x19
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4001e6c0:	a94153f3 	ldp	x19, x20, [sp, #16]
    4001e6c4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4001e6c8:	a8c37bfd 	ldp	x29, x30, [sp], #48
    4001e6cc:	140003f3 	b	4001f698 <z_impl_k_thread_abort>

000000004001e6d0 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    4001e6d0:	d100c3ff 	sub	sp, sp, #0x30
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    4001e6d4:	52800021 	mov	w1, #0x1                   	// #1
	k_thread_stack_t *stack = z_idle_stacks[i];
    4001e6d8:	93747c08 	sbfiz	x8, x0, #12, #32
	z_setup_new_thread(thread, stack,
    4001e6dc:	b0000322 	adrp	x2, 40083000 <ws+0x3a40>
    4001e6e0:	91274042 	add	x2, x2, #0x9d0
    4001e6e4:	52800604 	mov	w4, #0x30                  	// #48
{
    4001e6e8:	a9017bfd 	stp	x29, x30, [sp, #16]
    4001e6ec:	910043fd 	add	x29, sp, #0x10
	z_setup_new_thread(thread, stack,
    4001e6f0:	528001e7 	mov	w7, #0xf                   	// #15
    4001e6f4:	9b240804 	smaddl	x4, w0, w4, x2
    4001e6f8:	b90003e1 	str	w1, [sp]
    4001e6fc:	d0000561 	adrp	x1, 400cc000 <z_main_stack+0x440>
    4001e700:	912f0021 	add	x1, x1, #0xbc0
{
    4001e704:	a90253f3 	stp	x19, x20, [sp, #32]
	struct k_thread *thread = &z_idle_threads[i];
    4001e708:	d0000074 	adrp	x20, 4002c000 <z_idle_threads>
    4001e70c:	91000294 	add	x20, x20, #0x0
	z_setup_new_thread(thread, stack,
    4001e710:	8b080021 	add	x1, x1, x8
    4001e714:	52806008 	mov	w8, #0x300                 	// #768
	k_thread_stack_t *stack = z_idle_stacks[i];
    4001e718:	93407c13 	sxtw	x19, w0
	z_setup_new_thread(thread, stack,
    4001e71c:	f90007ff 	str	xzr, [sp, #8]
    4001e720:	d2800006 	mov	x6, #0x0                   	// #0
    4001e724:	9b285000 	smaddl	x0, w0, w8, x20
    4001e728:	d2800005 	mov	x5, #0x0                   	// #0
    4001e72c:	d2820002 	mov	x2, #0x1000                	// #4096
    4001e730:	90000003 	adrp	x3, 4001e000 <uart_console_init+0x48>
    4001e734:	91284063 	add	x3, x3, #0xa10
    4001e738:	94000063 	bl	4001e8c4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4001e73c:	d2806000 	mov	x0, #0x300                 	// #768
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    4001e740:	a9417bfd 	ldp	x29, x30, [sp, #16]
    4001e744:	9b005260 	madd	x0, x19, x0, x20
    4001e748:	a94253f3 	ldp	x19, x20, [sp, #32]
    4001e74c:	9100c3ff 	add	sp, sp, #0x30
    4001e750:	39406401 	ldrb	w1, [x0, #25]
    4001e754:	121d7821 	and	w1, w1, #0xfffffffb
    4001e758:	39006401 	strb	w1, [x0, #25]
    4001e75c:	d65f03c0 	ret

000000004001e760 <bg_thread_main>:
{
    4001e760:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    4001e764:	910003fd 	mov	x29, sp
	z_mem_manage_init();
    4001e768:	9400053b 	bl	4001fc54 <z_mem_manage_init>
	z_sys_post_kernel = true;
    4001e76c:	b0000320 	adrp	x0, 40083000 <ws+0x3a40>
    4001e770:	52800021 	mov	w1, #0x1                   	// #1
    4001e774:	392ec001 	strb	w1, [x0, #2992]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4001e778:	52800040 	mov	w0, #0x2                   	// #2
    4001e77c:	97ffff8e 	bl	4001e5b4 <z_sys_init_run_level>
	boot_banner();
    4001e780:	9400056a 	bl	4001fd28 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    4001e784:	52800060 	mov	w0, #0x3                   	// #3
    4001e788:	97ffff8b 	bl	4001e5b4 <z_sys_init_run_level>
	z_init_static_threads();
    4001e78c:	9400006a 	bl	4001e934 <z_init_static_threads>
	z_mem_manage_boot_finish();
    4001e790:	94000565 	bl	4001fd24 <z_mem_manage_boot_finish>
	main();
    4001e794:	97ffceba 	bl	4001227c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4001e798:	d0000060 	adrp	x0, 4002c000 <z_idle_threads>
    4001e79c:	910c0000 	add	x0, x0, #0x300
    4001e7a0:	39406001 	ldrb	w1, [x0, #24]
    4001e7a4:	121f7821 	and	w1, w1, #0xfffffffe
    4001e7a8:	39006001 	strb	w1, [x0, #24]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4001e7ac:	a8c17bfd 	ldp	x29, x30, [sp], #16
    4001e7b0:	d65f03c0 	ret

000000004001e7b4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    4001e7b4:	d10d03ff 	sub	sp, sp, #0x340
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    4001e7b8:	52802020 	mov	w0, #0x101                 	// #257
    4001e7bc:	a9017bfd 	stp	x29, x30, [sp, #16]
    4001e7c0:	910043fd 	add	x29, sp, #0x10
    4001e7c4:	a90253f3 	stp	x19, x20, [sp, #32]
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    4001e7c8:	b0000333 	adrp	x19, 40083000 <ws+0x3a40>
    4001e7cc:	91274273 	add	x19, x19, #0x9d0
	dummy_thread->base.user_options = K_ESSENTIAL;
    4001e7d0:	7900b3e0 	strh	w0, [sp, #88]
	_current_cpu->current = dummy_thread;
    4001e7d4:	910103e0 	add	x0, sp, #0x40
    4001e7d8:	a9035bf5 	stp	x21, x22, [sp, #48]
	_kernel.ready_q.cache = &z_main_thread;
    4001e7dc:	d0000074 	adrp	x20, 4002c000 <z_idle_threads>
    4001e7e0:	910c0294 	add	x20, x20, #0x300
    4001e7e4:	f9000a60 	str	x0, [x19, #16]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4001e7e8:	97ffff72 	bl	4001e5b0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    4001e7ec:	52800000 	mov	w0, #0x0                   	// #0
    4001e7f0:	97ffff71 	bl	4001e5b4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4001e7f4:	52800020 	mov	w0, #0x1                   	// #1
    4001e7f8:	97ffff6f 	bl	4001e5b4 <z_sys_init_run_level>
	z_sched_init();
    4001e7fc:	94000361 	bl	4001f580 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    4001e800:	f9001a74 	str	x20, [x19, #48]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4001e804:	b0000020 	adrp	x0, 40023000 <fpi.1>
    4001e808:	91371800 	add	x0, x0, #0xdc6
    4001e80c:	f90007e0 	str	x0, [sp, #8]
    4001e810:	52800020 	mov	w0, #0x1                   	// #1
    4001e814:	b90003e0 	str	w0, [sp]
    4001e818:	52800007 	mov	w7, #0x0                   	// #0
    4001e81c:	d2800006 	mov	x6, #0x0                   	// #0
    4001e820:	d2800005 	mov	x5, #0x0                   	// #0
    4001e824:	d2800004 	mov	x4, #0x0                   	// #0
    4001e828:	d2820002 	mov	x2, #0x1000                	// #4096
    4001e82c:	aa1403e0 	mov	x0, x20
    4001e830:	90000003 	adrp	x3, 4001e000 <uart_console_init+0x48>
    4001e834:	911d8063 	add	x3, x3, #0x760
    4001e838:	b0000561 	adrp	x1, 400cb000 <z_page_frames+0x4744e>
    4001e83c:	912f0021 	add	x1, x1, #0xbc0
    4001e840:	94000021 	bl	4001e8c4 <z_setup_new_thread>
    4001e844:	39406680 	ldrb	w0, [x20, #25]
    4001e848:	121d7800 	and	w0, w0, #0xfffffffb
    4001e84c:	39006680 	strb	w0, [x20, #25]
	z_ready_thread(&z_main_thread);
    4001e850:	aa1403e0 	mov	x0, x20
    4001e854:	94000253 	bl	4001f1a0 <z_ready_thread>
		init_idle_thread(i);
    4001e858:	52800000 	mov	w0, #0x0                   	// #0
    4001e85c:	97ffff9d 	bl	4001e6d0 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    4001e860:	d0000060 	adrp	x0, 4002c000 <z_idle_threads>
    4001e864:	91000000 	add	x0, x0, #0x0
    4001e868:	f9000e60 	str	x0, [x19, #24]
		_kernel.cpus[i].irq_stack =
    4001e86c:	90000580 	adrp	x0, 400ce000 <z_interrupt_stacks+0x440>
    4001e870:	912f0000 	add	x0, x0, #0xbc0
    4001e874:	f9000660 	str	x0, [x19, #8]
		_kernel.cpus[i].id = i;
    4001e878:	3900927f 	strb	wzr, [x19, #36]
    4001e87c:	d53b4235 	mrs	x21, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001e880:	d50342df 	msr	daifset, #0x2
	old_thread = _current;
    4001e884:	f9400a76 	ldr	x22, [x19, #16]
MAKE_REG_HELPER(daif)
    4001e888:	d53b4220 	mrs	x0, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001e88c:	d50342df 	msr	daifset, #0x2
	new_thread = z_swap_next_thread();
    4001e890:	9400019a 	bl	4001eef8 <z_swap_next_thread>
	if (new_thread != old_thread) {
    4001e894:	eb0002df 	cmp	x22, x0
    4001e898:	54000120 	b.eq	4001e8bc <z_cstart+0x108>  // b.none
    4001e89c:	aa0003f4 	mov	x20, x0
		z_reset_time_slice();
    4001e8a0:	94000102 	bl	4001eca8 <z_reset_time_slice>
		old_thread->swap_retval = -EAGAIN;
    4001e8a4:	12800140 	mov	w0, #0xfffffff5            	// #-11
    4001e8a8:	b900cec0 	str	w0, [x22, #204]
{
}

static inline void arch_switch(void *switch_to, void **switched_from)
{
	z_arm64_call_svc(switch_to, switched_from);
    4001e8ac:	910342c1 	add	x1, x22, #0xd0
		_current_cpu->current = new_thread;
    4001e8b0:	f9000a74 	str	x20, [x19, #16]
    4001e8b4:	f9406a80 	ldr	x0, [x20, #208]
    4001e8b8:	97fff9f0 	bl	4001d078 <z_arm64_call_svc>
MAKE_REG_HELPER(daif)
    4001e8bc:	92407eb5 	and	x21, x21, #0xffffffff
    4001e8c0:	d51b4235 	msr	daif, x21

000000004001e8c4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    4001e8c4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    4001e8c8:	9102e008 	add	x8, x0, #0xb8
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4001e8cc:	91003c42 	add	x2, x2, #0xf
{
    4001e8d0:	910003fd 	mov	x29, sp
    4001e8d4:	a90153f3 	stp	x19, x20, [sp, #16]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4001e8d8:	927cec42 	and	x2, x2, #0xfffffffffffffff0
	stack_ptr = (char *)stack + stack_obj_size;
    4001e8dc:	8b020034 	add	x20, x1, x2
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    4001e8e0:	a90ba008 	stp	x8, x8, [x0, #184]
{
    4001e8e4:	aa0003f3 	mov	x19, x0
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    4001e8e8:	b94023e8 	ldr	w8, [sp, #32]
	thread_base->pended_on = NULL;
    4001e8ec:	f900081f 	str	xzr, [x0, #16]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4001e8f0:	aa1403e2 	mov	x2, x20
	thread_base->user_options = (uint8_t)options;
    4001e8f4:	39006008 	strb	w8, [x0, #24]
	thread_base->thread_state = (uint8_t)initial_state;
    4001e8f8:	52800088 	mov	w8, #0x4                   	// #4
    4001e8fc:	39006408 	strb	w8, [x0, #25]

	thread_base->prio = priority;
    4001e900:	39006807 	strb	w7, [x0, #26]

	thread_base->sched_locked = 0U;
    4001e904:	39006c1f 	strb	wzr, [x0, #27]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    4001e908:	a902fc1f 	stp	xzr, xzr, [x0, #40]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4001e90c:	97fff9dd 	bl	4001d080 <arch_new_thread>
	new_thread->resource_pool = _current->resource_pool;
    4001e910:	b0000320 	adrp	x0, 40083000 <ws+0x3a40>
    4001e914:	f944f000 	ldr	x0, [x0, #2528]
    4001e918:	f9406c00 	ldr	x0, [x0, #216]
	new_thread->init_data = NULL;
    4001e91c:	f9005a7f 	str	xzr, [x19, #176]
	new_thread->resource_pool = _current->resource_pool;
    4001e920:	f9006e60 	str	x0, [x19, #216]
}
    4001e924:	aa1403e0 	mov	x0, x20
    4001e928:	a94153f3 	ldp	x19, x20, [sp, #16]
    4001e92c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    4001e930:	d65f03c0 	ret

000000004001e934 <z_init_static_threads>:
{
    4001e934:	d10103ff 	sub	sp, sp, #0x40
    4001e938:	a9017bfd 	stp	x29, x30, [sp, #16]
    4001e93c:	910043fd 	add	x29, sp, #0x10
    4001e940:	a90253f3 	stp	x19, x20, [sp, #32]
	_FOREACH_STATIC_THREAD(thread_data) {
    4001e944:	b0000593 	adrp	x19, 400cf000 <impure_data+0x3d0>
    4001e948:	91293273 	add	x19, x19, #0xa4c
    4001e94c:	aa1303f4 	mov	x20, x19
{
    4001e950:	a9035bf5 	stp	x21, x22, [sp, #48]
	_FOREACH_STATIC_THREAD(thread_data) {
    4001e954:	b0000595 	adrp	x21, 400cf000 <impure_data+0x3d0>
    4001e958:	912932b5 	add	x21, x21, #0xa4c
    4001e95c:	eb15027f 	cmp	x19, x21
    4001e960:	540001a3 	b.cc	4001e994 <z_init_static_threads+0x60>  // b.lo, b.ul, b.last
	_FOREACH_STATIC_THREAD(thread_data) {
    4001e964:	aa1403f3 	mov	x19, x20

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4001e968:	b0000014 	adrp	x20, 4001f000 <move_thread_to_end_of_prio_q+0x54>
    4001e96c:	91088294 	add	x20, x20, #0x220
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / ((uint64_t)from_hz / to_hz);
    4001e970:	d2800156 	mov	x22, #0xa                   	// #10
	k_sched_lock();
    4001e974:	94000157 	bl	4001eed0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    4001e978:	eb15027f 	cmp	x19, x21
    4001e97c:	54000283 	b.cc	4001e9cc <z_init_static_threads+0x98>  // b.lo, b.ul, b.last
}
    4001e980:	a9417bfd 	ldp	x29, x30, [sp, #16]
    4001e984:	a94253f3 	ldp	x19, x20, [sp, #32]
    4001e988:	a9435bf5 	ldp	x21, x22, [sp, #48]
    4001e98c:	910103ff 	add	sp, sp, #0x40
	k_sched_unlock();
    4001e990:	140002da 	b	4001f4f8 <k_sched_unlock>
		z_setup_new_thread(
    4001e994:	f9402a60 	ldr	x0, [x19, #80]
    4001e998:	f90007e0 	str	x0, [sp, #8]
    4001e99c:	b9403e60 	ldr	w0, [x19, #60]
    4001e9a0:	b90003e0 	str	w0, [sp]
    4001e9a4:	a9400660 	ldp	x0, x1, [x19]
    4001e9a8:	a9419263 	ldp	x3, x4, [x19, #24]
    4001e9ac:	a9429a65 	ldp	x5, x6, [x19, #40]
    4001e9b0:	b9401262 	ldr	w2, [x19, #16]
    4001e9b4:	b9403a67 	ldr	w7, [x19, #56]
    4001e9b8:	97ffffc3 	bl	4001e8c4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    4001e9bc:	f9400260 	ldr	x0, [x19]
    4001e9c0:	f9005813 	str	x19, [x0, #176]
	_FOREACH_STATIC_THREAD(thread_data) {
    4001e9c4:	91016273 	add	x19, x19, #0x58
    4001e9c8:	17ffffe5 	b	4001e95c <z_init_static_threads+0x28>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    4001e9cc:	b9404262 	ldr	w2, [x19, #64]
    4001e9d0:	3100045f 	cmn	w2, #0x1
    4001e9d4:	54000100 	b.eq	4001e9f4 <z_init_static_threads+0xc0>  // b.none
					    K_MSEC(thread_data->init_delay));
    4001e9d8:	7100005f 	cmp	w2, #0x0
    4001e9dc:	1a9fa042 	csel	w2, w2, wzr, ge  // ge = tcont
			schedule_new_thread(thread_data->init_thread,
    4001e9e0:	f9400260 	ldr	x0, [x19]
					    K_MSEC(thread_data->init_delay));
    4001e9e4:	93407c43 	sxtw	x3, w2
		t += off;
    4001e9e8:	91002462 	add	x2, x3, #0x9
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4001e9ec:	b5000083 	cbnz	x3, 4001e9fc <z_init_static_threads+0xc8>
	z_sched_start(thread);
    4001e9f0:	940001f7 	bl	4001f1cc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    4001e9f4:	91016273 	add	x19, x19, #0x58
    4001e9f8:	17ffffe0 	b	4001e978 <z_init_static_threads+0x44>
    4001e9fc:	9ad60842 	udiv	x2, x2, x22
    4001ea00:	aa1403e1 	mov	x1, x20
    4001ea04:	9100a000 	add	x0, x0, #0x28
    4001ea08:	94000358 	bl	4001f768 <z_add_timeout>
    4001ea0c:	17fffffa 	b	4001e9f4 <z_init_static_threads+0xc0>

000000004001ea10 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    4001ea10:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    4001ea14:	910003fd 	mov	x29, sp
    4001ea18:	d53b4220 	mrs	x0, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001ea1c:	d50342df 	msr	daifset, #0x2
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    4001ea20:	97fff8d8 	bl	4001cd80 <arch_cpu_idle>
    4001ea24:	17fffffd 	b	4001ea18 <idle+0x8>

000000004001ea28 <adjust_owner_prio.isra.0>:
	return new_prio;
}

static bool adjust_owner_prio(struct k_mutex *mutex, int32_t new_prio)
{
	if (mutex->owner->base.prio != new_prio) {
    4001ea28:	39c06802 	ldrsb	w2, [x0, #26]
    4001ea2c:	6b01005f 	cmp	w2, w1
    4001ea30:	54000040 	b.eq	4001ea38 <adjust_owner_prio.isra.0+0x10>  // b.none
		LOG_DBG("%p (ready (y/n): %c) prio changed to %d (was %d)",
			mutex->owner, z_is_thread_ready(mutex->owner) ?
			'y' : 'n',
			new_prio, mutex->owner->base.prio);

		return z_set_prio(mutex->owner, new_prio);
    4001ea34:	14000277 	b	4001f410 <z_set_prio>
	}
	return false;
}
    4001ea38:	52800000 	mov	w0, #0x0                   	// #0
    4001ea3c:	d65f03c0 	ret

000000004001ea40 <z_impl_k_mutex_init>:
	list->tail = (sys_dnode_t *)list;
    4001ea40:	a9000000 	stp	x0, x0, [x0]
	mutex->owner = NULL;
    4001ea44:	f900081f 	str	xzr, [x0, #16]
	mutex->lock_count = 0U;
    4001ea48:	b900181f 	str	wzr, [x0, #24]
}
    4001ea4c:	52800000 	mov	w0, #0x0                   	// #0
    4001ea50:	d65f03c0 	ret

000000004001ea54 <z_impl_k_mutex_lock>:

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    4001ea54:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    4001ea58:	910003fd 	mov	x29, sp
    4001ea5c:	a90153f3 	stp	x19, x20, [sp, #16]
    4001ea60:	aa0003f3 	mov	x19, x0
    4001ea64:	a9025bf5 	stp	x21, x22, [sp, #32]
    4001ea68:	f9001bf7 	str	x23, [sp, #48]
    4001ea6c:	aa0103f7 	mov	x23, x1
MAKE_REG_HELPER(daif)
    4001ea70:	d53b4234 	mrs	x20, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001ea74:	d50342df 	msr	daifset, #0x2

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4001ea78:	b9401801 	ldr	w1, [x0, #24]
    4001ea7c:	b0000322 	adrp	x2, 40083000 <ws+0x3a40>
    4001ea80:	91274042 	add	x2, x2, #0x9d0
    4001ea84:	34000141 	cbz	w1, 4001eaac <z_impl_k_mutex_lock+0x58>
    4001ea88:	f9400844 	ldr	x4, [x2, #16]
    4001ea8c:	f9400800 	ldr	x0, [x0, #16]
    4001ea90:	eb04001f 	cmp	x0, x4
    4001ea94:	54000280 	b.eq	4001eae4 <z_impl_k_mutex_lock+0x90>  // b.none
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    4001ea98:	b50002b7 	cbnz	x23, 4001eaec <z_impl_k_mutex_lock+0x98>
MAKE_REG_HELPER(daif)
    4001ea9c:	92407e94 	and	x20, x20, #0xffffffff
    4001eaa0:	d51b4234 	msr	daif, x20
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    4001eaa4:	128001e0 	mov	w0, #0xfffffff0            	// #-16
    4001eaa8:	1400000a 	b	4001ead0 <z_impl_k_mutex_lock+0x7c>
					_current->base.prio :
    4001eaac:	f9400840 	ldr	x0, [x2, #16]
    4001eab0:	39c06800 	ldrsb	w0, [x0, #26]
		mutex->lock_count++;
    4001eab4:	11000421 	add	w1, w1, #0x1
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    4001eab8:	29030261 	stp	w1, w0, [x19, #24]
		mutex->owner = _current;
    4001eabc:	f9400840 	ldr	x0, [x2, #16]
    4001eac0:	92407e94 	and	x20, x20, #0xffffffff
    4001eac4:	f9000a60 	str	x0, [x19, #16]
    4001eac8:	d51b4234 	msr	daif, x20
		return 0;
    4001eacc:	52800000 	mov	w0, #0x0                   	// #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    4001ead0:	a94153f3 	ldp	x19, x20, [sp, #16]
    4001ead4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4001ead8:	f9401bf7 	ldr	x23, [sp, #48]
    4001eadc:	a8c47bfd 	ldp	x29, x30, [sp], #64
    4001eae0:	d65f03c0 	ret
					_current->base.prio :
    4001eae4:	b9401e60 	ldr	w0, [x19, #28]
    4001eae8:	17fffff3 	b	4001eab4 <z_impl_k_mutex_lock+0x60>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    4001eaec:	39c06803 	ldrsb	w3, [x0, #26]
    4001eaf0:	39c06882 	ldrsb	w2, [x4, #26]
    4001eaf4:	6b03005f 	cmp	w2, w3
    4001eaf8:	1a83d041 	csel	w1, w2, w3, le
    4001eafc:	12800fc2 	mov	w2, #0xffffff81            	// #-127
    4001eb00:	3101fc3f 	cmn	w1, #0x7f
    4001eb04:	1a82a021 	csel	w1, w1, w2, ge  // ge = tcont
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    4001eb08:	6b01007f 	cmp	w3, w1
    4001eb0c:	5400044d 	b.le	4001eb94 <z_impl_k_mutex_lock+0x140>
		resched = adjust_owner_prio(mutex, new_prio);
    4001eb10:	97ffffc6 	bl	4001ea28 <adjust_owner_prio.isra.0>
    4001eb14:	12001c16 	and	w22, w0, #0xff
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    4001eb18:	b0000335 	adrp	x21, 40083000 <ws+0x3a40>
    4001eb1c:	912ec6b5 	add	x21, x21, #0xbb1
    4001eb20:	aa1703e3 	mov	x3, x23
    4001eb24:	aa1303e2 	mov	x2, x19
    4001eb28:	2a1403e1 	mov	w1, w20
    4001eb2c:	aa1503e0 	mov	x0, x21
    4001eb30:	94000229 	bl	4001f3d4 <z_pend_curr>
	if (got_mutex == 0) {
    4001eb34:	34fffce0 	cbz	w0, 4001ead0 <z_impl_k_mutex_lock+0x7c>
    4001eb38:	d53b4234 	mrs	x20, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001eb3c:	d50342df 	msr	daifset, #0x2
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4001eb40:	f9400260 	ldr	x0, [x19]
    4001eb44:	b9401e61 	ldr	w1, [x19, #28]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4001eb48:	eb00027f 	cmp	x19, x0
    4001eb4c:	54000100 	b.eq	4001eb6c <z_impl_k_mutex_lock+0x118>  // b.none
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    4001eb50:	b40000e0 	cbz	x0, 4001eb6c <z_impl_k_mutex_lock+0x118>
    4001eb54:	39c06800 	ldrsb	w0, [x0, #26]
    4001eb58:	6b01001f 	cmp	w0, w1
    4001eb5c:	1a81d001 	csel	w1, w0, w1, le
    4001eb60:	12800fc0 	mov	w0, #0xffffff81            	// #-127
    4001eb64:	3101fc3f 	cmn	w1, #0x7f
    4001eb68:	1a80a021 	csel	w1, w1, w0, ge  // ge = tcont
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4001eb6c:	f9400a60 	ldr	x0, [x19, #16]
    4001eb70:	97ffffae 	bl	4001ea28 <adjust_owner_prio.isra.0>
    4001eb74:	72001c1f 	tst	w0, #0xff
    4001eb78:	54000041 	b.ne	4001eb80 <z_impl_k_mutex_lock+0x12c>  // b.any
	if (resched) {
    4001eb7c:	34000116 	cbz	w22, 4001eb9c <z_impl_k_mutex_lock+0x148>
		z_reschedule(&lock, key);
    4001eb80:	2a1403e1 	mov	w1, w20
    4001eb84:	aa1503e0 	mov	x0, x21
    4001eb88:	940000b7 	bl	4001ee64 <z_reschedule>
	return -EAGAIN;
    4001eb8c:	12800140 	mov	w0, #0xfffffff5            	// #-11
    4001eb90:	17ffffd0 	b	4001ead0 <z_impl_k_mutex_lock+0x7c>
	bool resched = false;
    4001eb94:	52800016 	mov	w22, #0x0                   	// #0
    4001eb98:	17ffffe0 	b	4001eb18 <z_impl_k_mutex_lock+0xc4>
MAKE_REG_HELPER(daif)
    4001eb9c:	92407e94 	and	x20, x20, #0xffffffff
    4001eba0:	d51b4234 	msr	daif, x20
    4001eba4:	17fffffa 	b	4001eb8c <z_impl_k_mutex_lock+0x138>

000000004001eba8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    4001eba8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    4001ebac:	910003fd 	mov	x29, sp
    4001ebb0:	a90153f3 	stp	x19, x20, [sp, #16]
    4001ebb4:	aa0003f3 	mov	x19, x0

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    4001ebb8:	f9400800 	ldr	x0, [x0, #16]
    4001ebbc:	b4000500 	cbz	x0, 4001ec5c <z_impl_k_mutex_unlock+0xb4>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    4001ebc0:	b0000321 	adrp	x1, 40083000 <ws+0x3a40>
    4001ebc4:	f944f021 	ldr	x1, [x1, #2528]
    4001ebc8:	eb01001f 	cmp	x0, x1
    4001ebcc:	540004c1 	b.ne	4001ec64 <z_impl_k_mutex_unlock+0xbc>  // b.any
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    4001ebd0:	39406c01 	ldrb	w1, [x0, #27]
    4001ebd4:	51000421 	sub	w1, w1, #0x1
    4001ebd8:	39006c01 	strb	w1, [x0, #27]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    4001ebdc:	b9401a60 	ldr	w0, [x19, #24]
    4001ebe0:	7100041f 	cmp	w0, #0x1
    4001ebe4:	54000109 	b.ls	4001ec04 <z_impl_k_mutex_unlock+0x5c>  // b.plast
		mutex->lock_count--;
    4001ebe8:	51000400 	sub	w0, w0, #0x1
    4001ebec:	b9001a60 	str	w0, [x19, #24]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    4001ebf0:	94000242 	bl	4001f4f8 <k_sched_unlock>

	return 0;
    4001ebf4:	52800000 	mov	w0, #0x0                   	// #0
}
    4001ebf8:	a94153f3 	ldp	x19, x20, [sp, #16]
    4001ebfc:	a8c27bfd 	ldp	x29, x30, [sp], #32
    4001ec00:	d65f03c0 	ret
    4001ec04:	d53b4234 	mrs	x20, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001ec08:	d50342df 	msr	daifset, #0x2
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    4001ec0c:	b9401e61 	ldr	w1, [x19, #28]
    4001ec10:	f9400a60 	ldr	x0, [x19, #16]
    4001ec14:	97ffff85 	bl	4001ea28 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    4001ec18:	aa1303e0 	mov	x0, x19
    4001ec1c:	94000248 	bl	4001f53c <z_unpend_first_thread>
	mutex->owner = new_owner;
    4001ec20:	f9000a60 	str	x0, [x19, #16]
	if (new_owner != NULL) {
    4001ec24:	b4000140 	cbz	x0, 4001ec4c <z_impl_k_mutex_unlock+0xa4>
		mutex->owner_orig_prio = new_owner->base.prio;
    4001ec28:	39c06801 	ldrsb	w1, [x0, #26]
    4001ec2c:	b9001e61 	str	w1, [x19, #28]
 * z_swap() is in use it's a simple inline provided by the kernel.
 */
static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->swap_retval = value;
    4001ec30:	b900cc1f 	str	wzr, [x0, #204]
		z_ready_thread(new_owner);
    4001ec34:	9400015b 	bl	4001f1a0 <z_ready_thread>
		z_reschedule(&lock, key);
    4001ec38:	2a1403e1 	mov	w1, w20
    4001ec3c:	b0000320 	adrp	x0, 40083000 <ws+0x3a40>
    4001ec40:	912ec400 	add	x0, x0, #0xbb1
    4001ec44:	94000088 	bl	4001ee64 <z_reschedule>
    4001ec48:	17ffffea 	b	4001ebf0 <z_impl_k_mutex_unlock+0x48>
MAKE_REG_HELPER(daif)
    4001ec4c:	92407e94 	and	x20, x20, #0xffffffff
		mutex->lock_count = 0U;
    4001ec50:	b9001a7f 	str	wzr, [x19, #24]
    4001ec54:	d51b4234 	msr	daif, x20
    4001ec58:	17ffffe6 	b	4001ebf0 <z_impl_k_mutex_unlock+0x48>
		return -EINVAL;
    4001ec5c:	128002a0 	mov	w0, #0xffffffea            	// #-22
    4001ec60:	17ffffe6 	b	4001ebf8 <z_impl_k_mutex_unlock+0x50>
		return -EPERM;
    4001ec64:	12800000 	mov	w0, #0xffffffff            	// #-1
    4001ec68:	17ffffe4 	b	4001ebf8 <z_impl_k_mutex_unlock+0x50>

000000004001ec6c <sys_dlist_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    4001ec6c:	a9400801 	ldp	x1, x2, [x0]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    4001ec70:	f9000041 	str	x1, [x2]
	next->prev = prev;
    4001ec74:	f9000422 	str	x2, [x1, #8]
	node->prev = NULL;
    4001ec78:	a9007c1f 	stp	xzr, xzr, [x0]
	sys_dnode_init(node);
}
    4001ec7c:	d65f03c0 	ret

000000004001ec80 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread == _current || is_thread_dummy(thread));
	pend(thread, wait_q, timeout);
}

static inline void unpend_thread_no_timeout(struct k_thread *thread)
{
    4001ec80:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    4001ec84:	aa0003e3 	mov	x3, x0
    4001ec88:	910003fd 	mov	x29, sp

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    4001ec8c:	97fffff8 	bl	4001ec6c <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4001ec90:	39406400 	ldrb	w0, [x0, #25]
    4001ec94:	121e7800 	and	w0, w0, #0xfffffffd
    4001ec98:	39006460 	strb	w0, [x3, #25]
}
    4001ec9c:	a8c17bfd 	ldp	x29, x30, [sp], #16
	thread->base.pended_on = NULL;
    4001eca0:	f900087f 	str	xzr, [x3, #16]
}
    4001eca4:	d65f03c0 	ret

000000004001eca8 <z_reset_time_slice>:
{
    4001eca8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    4001ecac:	910003fd 	mov	x29, sp
    4001ecb0:	f9000bf3 	str	x19, [sp, #16]
	if (slice_time != 0) {
    4001ecb4:	b0000333 	adrp	x19, 40083000 <ws+0x3a40>
    4001ecb8:	b94a9660 	ldr	w0, [x19, #2708]
    4001ecbc:	34000160 	cbz	w0, 4001ece8 <z_reset_time_slice+0x40>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    4001ecc0:	97fffe30 	bl	4001e580 <sys_clock_elapsed>
    4001ecc4:	2a0003e1 	mov	w1, w0
    4001ecc8:	b94a9660 	ldr	w0, [x19, #2708]
    4001eccc:	b0000322 	adrp	x2, 40083000 <ws+0x3a40>
}
    4001ecd0:	f9400bf3 	ldr	x19, [sp, #16]
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    4001ecd4:	0b010001 	add	w1, w0, w1
}
    4001ecd8:	a8c27bfd 	ldp	x29, x30, [sp], #32
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    4001ecdc:	b909f041 	str	w1, [x2, #2544]
		z_set_timeout_expiry(slice_time, false);
    4001ece0:	52800001 	mov	w1, #0x0                   	// #0
    4001ece4:	140002f8 	b	4001f8c4 <z_set_timeout_expiry>
}
    4001ece8:	f9400bf3 	ldr	x19, [sp, #16]
    4001ecec:	a8c27bfd 	ldp	x29, x30, [sp], #32
    4001ecf0:	d65f03c0 	ret

000000004001ecf4 <z_swap_irqlock>:
{
    4001ecf4:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    4001ecf8:	910003fd 	mov	x29, sp
    4001ecfc:	a90153f3 	stp	x19, x20, [sp, #16]
	old_thread = _current;
    4001ed00:	b0000333 	adrp	x19, 40083000 <ws+0x3a40>
    4001ed04:	91274273 	add	x19, x19, #0x9d0
{
    4001ed08:	2a0003f4 	mov	w20, w0
    4001ed0c:	a9025bf5 	stp	x21, x22, [sp, #32]
	old_thread = _current;
    4001ed10:	f9400a76 	ldr	x22, [x19, #16]
    4001ed14:	d53b4220 	mrs	x0, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001ed18:	d50342df 	msr	daifset, #0x2
	return _kernel.ready_q.cache;
    4001ed1c:	f9401a75 	ldr	x21, [x19, #48]
	if (new_thread != old_thread) {
    4001ed20:	eb1502df 	cmp	x22, x21
    4001ed24:	54000100 	b.eq	4001ed44 <z_swap_irqlock+0x50>  // b.none
		z_reset_time_slice();
    4001ed28:	97ffffe0 	bl	4001eca8 <z_reset_time_slice>
		_current_cpu->current = new_thread;
    4001ed2c:	f9000a75 	str	x21, [x19, #16]
		old_thread->swap_retval = -EAGAIN;
    4001ed30:	12800140 	mov	w0, #0xfffffff5            	// #-11
    4001ed34:	b900cec0 	str	w0, [x22, #204]
    4001ed38:	f9406aa0 	ldr	x0, [x21, #208]
    4001ed3c:	910342c1 	add	x1, x22, #0xd0
    4001ed40:	97fff8ce 	bl	4001d078 <z_arm64_call_svc>
MAKE_REG_HELPER(daif)
    4001ed44:	d51b4234 	msr	daif, x20
	return _current->swap_retval;
    4001ed48:	f9400a60 	ldr	x0, [x19, #16]
}
    4001ed4c:	a94153f3 	ldp	x19, x20, [sp, #16]
    4001ed50:	b940cc00 	ldr	w0, [x0, #204]
    4001ed54:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4001ed58:	a8c37bfd 	ldp	x29, x30, [sp], #48
    4001ed5c:	d65f03c0 	ret

000000004001ed60 <z_swap>:
{
    4001ed60:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    4001ed64:	910003fd 	mov	x29, sp
    4001ed68:	a90153f3 	stp	x19, x20, [sp, #16]
	old_thread = _current;
    4001ed6c:	b0000333 	adrp	x19, 40083000 <ws+0x3a40>
    4001ed70:	91274273 	add	x19, x19, #0x9d0
{
    4001ed74:	a9025bf5 	stp	x21, x22, [sp, #32]
    4001ed78:	2a0103f4 	mov	w20, w1
	if (!is_spinlock || lock != &sched_spinlock) {
    4001ed7c:	b0000321 	adrp	x1, 40083000 <ws+0x3a40>
    4001ed80:	912ec421 	add	x1, x1, #0xbb1
    4001ed84:	eb00003f 	cmp	x1, x0
	old_thread = _current;
    4001ed88:	f9400a76 	ldr	x22, [x19, #16]
	if (!is_spinlock || lock != &sched_spinlock) {
    4001ed8c:	54000060 	b.eq	4001ed98 <z_swap+0x38>  // b.none
    4001ed90:	d53b4220 	mrs	x0, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001ed94:	d50342df 	msr	daifset, #0x2
    4001ed98:	f9401a75 	ldr	x21, [x19, #48]
	if (new_thread != old_thread) {
    4001ed9c:	eb1502df 	cmp	x22, x21
    4001eda0:	54000100 	b.eq	4001edc0 <z_swap+0x60>  // b.none
		z_reset_time_slice();
    4001eda4:	97ffffc1 	bl	4001eca8 <z_reset_time_slice>
		_current_cpu->current = new_thread;
    4001eda8:	f9000a75 	str	x21, [x19, #16]
		old_thread->swap_retval = -EAGAIN;
    4001edac:	12800140 	mov	w0, #0xfffffff5            	// #-11
    4001edb0:	b900cec0 	str	w0, [x22, #204]
    4001edb4:	f9406aa0 	ldr	x0, [x21, #208]
    4001edb8:	910342c1 	add	x1, x22, #0xd0
    4001edbc:	97fff8af 	bl	4001d078 <z_arm64_call_svc>
MAKE_REG_HELPER(daif)
    4001edc0:	d51b4234 	msr	daif, x20
	return _current->swap_retval;
    4001edc4:	f9400a60 	ldr	x0, [x19, #16]
}
    4001edc8:	a94153f3 	ldp	x19, x20, [sp, #16]
    4001edcc:	b940cc00 	ldr	w0, [x0, #204]
    4001edd0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4001edd4:	a8c37bfd 	ldp	x29, x30, [sp], #48
    4001edd8:	d65f03c0 	ret

000000004001eddc <k_sched_time_slice_set>:
{
    4001eddc:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    4001ede0:	910003fd 	mov	x29, sp
    4001ede4:	f9000bf3 	str	x19, [sp, #16]
    4001ede8:	d53b4233 	mrs	x19, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001edec:	d50342df 	msr	daifset, #0x2
		_current_cpu->slice_ticks = 0;
    4001edf0:	b0000322 	adrp	x2, 40083000 <ws+0x3a40>
		if (result32 && (t < BIT64(32))) {
    4001edf4:	b2407fe3 	mov	x3, #0xffffffff            	// #4294967295
    4001edf8:	b909f05f 	str	wzr, [x2, #2544]
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint32_t k_ms_to_ticks_ceil32(uint32_t t)
{
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_ms, Z_HZ_ticks, true, true, true, false);
    4001edfc:	2a0003e2 	mov	w2, w0
		t += off;
    4001ee00:	91002442 	add	x2, x2, #0x9
		if (result32 && (t < BIT64(32))) {
    4001ee04:	eb03005f 	cmp	x2, x3
    4001ee08:	54000208 	b.hi	4001ee48 <k_sched_time_slice_set+0x6c>  // b.pmore
			return ((uint32_t)t) / (from_hz / to_hz);
    4001ee0c:	11002402 	add	w2, w0, #0x9
    4001ee10:	52800143 	mov	w3, #0xa                   	// #10
    4001ee14:	1ac30842 	udiv	w2, w2, w3
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    4001ee18:	7100001f 	cmp	w0, #0x0
    4001ee1c:	b0000320 	adrp	x0, 40083000 <ws+0x3a40>
    4001ee20:	540001ac 	b.gt	4001ee54 <k_sched_time_slice_set+0x78>
			slice_time = MAX(2, slice_time);
    4001ee24:	b90a9402 	str	w2, [x0, #2708]
		slice_max_prio = prio;
    4001ee28:	b0000320 	adrp	x0, 40083000 <ws+0x3a40>
MAKE_REG_HELPER(daif)
    4001ee2c:	92407e73 	and	x19, x19, #0xffffffff
    4001ee30:	b90a9001 	str	w1, [x0, #2704]
		z_reset_time_slice();
    4001ee34:	97ffff9d 	bl	4001eca8 <z_reset_time_slice>
    4001ee38:	d51b4233 	msr	daif, x19
}
    4001ee3c:	f9400bf3 	ldr	x19, [sp, #16]
    4001ee40:	a8c27bfd 	ldp	x29, x30, [sp], #32
    4001ee44:	d65f03c0 	ret
			return t / ((uint64_t)from_hz / to_hz);
    4001ee48:	d2800143 	mov	x3, #0xa                   	// #10
    4001ee4c:	9ac30842 	udiv	x2, x2, x3
    4001ee50:	17fffff2 	b	4001ee18 <k_sched_time_slice_set+0x3c>
			slice_time = MAX(2, slice_time);
    4001ee54:	7100085f 	cmp	w2, #0x2
    4001ee58:	52800043 	mov	w3, #0x2                   	// #2
    4001ee5c:	1a83a042 	csel	w2, w2, w3, ge  // ge = tcont
    4001ee60:	17fffff1 	b	4001ee24 <k_sched_time_slice_set+0x48>

000000004001ee64 <z_reschedule>:
{
    4001ee64:	2a0103e2 	mov	w2, w1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4001ee68:	36380062 	tbz	w2, #7, 4001ee74 <z_reschedule+0x10>
    4001ee6c:	d51b4222 	msr	daif, x2
}
    4001ee70:	d65f03c0 	ret
MAKE_REG_HELPER(tpidrro_el0);
    4001ee74:	d53bd063 	mrs	x3, tpidrro_el0
    4001ee78:	927db063 	and	x3, x3, #0xfffffffffff8
	if (resched(key.key) && need_swap()) {
    4001ee7c:	b9400063 	ldr	w3, [x3]
    4001ee80:	35ffff63 	cbnz	w3, 4001ee6c <z_reschedule+0x8>
	new_thread = _kernel.ready_q.cache;
    4001ee84:	b0000323 	adrp	x3, 40083000 <ws+0x3a40>
    4001ee88:	91274063 	add	x3, x3, #0x9d0
	if (resched(key.key) && need_swap()) {
    4001ee8c:	f9401864 	ldr	x4, [x3, #48]
    4001ee90:	f9400863 	ldr	x3, [x3, #16]
    4001ee94:	eb03009f 	cmp	x4, x3
    4001ee98:	54fffea0 	b.eq	4001ee6c <z_reschedule+0x8>  // b.none
		z_swap(lock, key);
    4001ee9c:	17ffffb1 	b	4001ed60 <z_swap>

000000004001eea0 <z_reschedule_irqlock>:
{
    4001eea0:	2a0003e1 	mov	w1, w0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4001eea4:	36380061 	tbz	w1, #7, 4001eeb0 <z_reschedule_irqlock+0x10>
MAKE_REG_HELPER(daif)
    4001eea8:	d51b4221 	msr	daif, x1
}
    4001eeac:	d65f03c0 	ret
MAKE_REG_HELPER(tpidrro_el0);
    4001eeb0:	d53bd062 	mrs	x2, tpidrro_el0
    4001eeb4:	927db042 	and	x2, x2, #0xfffffffffff8
	if (resched(key)) {
    4001eeb8:	b9400042 	ldr	w2, [x2]
    4001eebc:	35ffff62 	cbnz	w2, 4001eea8 <z_reschedule_irqlock+0x8>
		z_swap_irqlock(key);
    4001eec0:	17ffff8d 	b	4001ecf4 <z_swap_irqlock>

000000004001eec4 <z_reschedule_unlocked>:
MAKE_REG_HELPER(daif)
    4001eec4:	d53b4220 	mrs	x0, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001eec8:	d50342df 	msr	daifset, #0x2
	(void) z_reschedule_irqlock(arch_irq_lock());
    4001eecc:	17fffff5 	b	4001eea0 <z_reschedule_irqlock>

000000004001eed0 <k_sched_lock>:
MAKE_REG_HELPER(daif)
    4001eed0:	d53b4220 	mrs	x0, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001eed4:	d50342df 	msr	daifset, #0x2
	--_current->base.sched_locked;
    4001eed8:	b0000321 	adrp	x1, 40083000 <ws+0x3a40>
    4001eedc:	f944f022 	ldr	x2, [x1, #2528]
    4001eee0:	39406c41 	ldrb	w1, [x2, #27]
    4001eee4:	51000421 	sub	w1, w1, #0x1
    4001eee8:	39006c41 	strb	w1, [x2, #27]
MAKE_REG_HELPER(daif)
    4001eeec:	92407c00 	and	x0, x0, #0xffffffff
    4001eef0:	d51b4220 	msr	daif, x0
}
    4001eef4:	d65f03c0 	ret

000000004001eef8 <z_swap_next_thread>:
}
    4001eef8:	b0000320 	adrp	x0, 40083000 <ws+0x3a40>
    4001eefc:	f9450000 	ldr	x0, [x0, #2560]
    4001ef00:	d65f03c0 	ret

000000004001ef04 <z_get_next_switch_handle>:
	_current->switch_handle = interrupted;
    4001ef04:	b0000321 	adrp	x1, 40083000 <ws+0x3a40>
    4001ef08:	91274021 	add	x1, x1, #0x9d0
    4001ef0c:	f9400822 	ldr	x2, [x1, #16]
    4001ef10:	f9006840 	str	x0, [x2, #208]
	set_current(_kernel.ready_q.cache);
    4001ef14:	f9401820 	ldr	x0, [x1, #48]
	_current_cpu->current = new_thread;
    4001ef18:	f9000820 	str	x0, [x1, #16]
}
    4001ef1c:	f9406800 	ldr	x0, [x0, #208]
    4001ef20:	d65f03c0 	ret

000000004001ef24 <z_priq_dumb_best>:
	return list->head == list;
    4001ef24:	f9400001 	ldr	x1, [x0]
}

struct k_thread *z_priq_dumb_best(sys_dlist_t *pq)
{
	struct k_thread *thread = NULL;
    4001ef28:	eb01001f 	cmp	x0, x1

	if (n != NULL) {
		thread = CONTAINER_OF(n, struct k_thread, base.qnode_dlist);
	}
	return thread;
}
    4001ef2c:	9a9f1020 	csel	x0, x1, xzr, ne  // ne = any
    4001ef30:	d65f03c0 	ret

000000004001ef34 <update_cache>:
{
    4001ef34:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    4001ef38:	2a0003e2 	mov	w2, w0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    4001ef3c:	b0000320 	adrp	x0, 40083000 <ws+0x3a40>
    4001ef40:	91282000 	add	x0, x0, #0xa08
{
    4001ef44:	910003fd 	mov	x29, sp
    4001ef48:	a90153f3 	stp	x19, x20, [sp, #16]
    4001ef4c:	b0000333 	adrp	x19, 40083000 <ws+0x3a40>
    4001ef50:	91274273 	add	x19, x19, #0x9d0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    4001ef54:	97fffff4 	bl	4001ef24 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4001ef58:	b50001c0 	cbnz	x0, 4001ef90 <update_cache+0x5c>
    4001ef5c:	f9400e74 	ldr	x20, [x19, #24]
	if (z_is_thread_prevented_from_running(_current)) {
    4001ef60:	f9400a61 	ldr	x1, [x19, #16]
	if (preempt_ok != 0) {
    4001ef64:	350001a2 	cbnz	w2, 4001ef98 <update_cache+0x64>
	if (z_is_thread_prevented_from_running(_current)) {
    4001ef68:	39406420 	ldrb	w0, [x1, #25]
    4001ef6c:	f240101f 	tst	x0, #0x1f
    4001ef70:	54000141 	b.ne	4001ef98 <update_cache+0x64>  // b.any
	if (is_preempt(_current) || is_metairq(thread)) {
    4001ef74:	79403420 	ldrh	w0, [x1, #26]
    4001ef78:	7101fc1f 	cmp	w0, #0x7f
    4001ef7c:	540000e9 	b.ls	4001ef98 <update_cache+0x64>  // b.plast
		_kernel.ready_q.cache = _current;
    4001ef80:	f9001a61 	str	x1, [x19, #48]
}
    4001ef84:	a94153f3 	ldp	x19, x20, [sp, #16]
    4001ef88:	a8c27bfd 	ldp	x29, x30, [sp], #32
    4001ef8c:	d65f03c0 	ret
    4001ef90:	aa0003f4 	mov	x20, x0
    4001ef94:	17fffff3 	b	4001ef60 <update_cache+0x2c>
		if (thread != _current) {
    4001ef98:	eb01029f 	cmp	x20, x1
    4001ef9c:	54000040 	b.eq	4001efa4 <update_cache+0x70>  // b.none
			z_reset_time_slice();
    4001efa0:	97ffff42 	bl	4001eca8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    4001efa4:	f9001a74 	str	x20, [x19, #48]
}
    4001efa8:	17fffff7 	b	4001ef84 <update_cache+0x50>

000000004001efac <move_thread_to_end_of_prio_q>:
{
    4001efac:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    4001efb0:	aa0003e3 	mov	x3, x0
    4001efb4:	910003fd 	mov	x29, sp
	if (z_is_thread_queued(thread)) {
    4001efb8:	39c06402 	ldrsb	w2, [x0, #25]
	return (thread->base.thread_state & state) != 0U;
    4001efbc:	39406401 	ldrb	w1, [x0, #25]
    4001efc0:	36f80082 	tbz	w2, #31, 4001efd0 <move_thread_to_end_of_prio_q+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4001efc4:	12001821 	and	w1, w1, #0x7f
    4001efc8:	39006401 	strb	w1, [x0, #25]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4001efcc:	97ffff28 	bl	4001ec6c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    4001efd0:	39406460 	ldrb	w0, [x3, #25]
    4001efd4:	b0000321 	adrp	x1, 40083000 <ws+0x3a40>
    4001efd8:	91274021 	add	x1, x1, #0x9d0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4001efdc:	b0000322 	adrp	x2, 40083000 <ws+0x3a40>
    4001efe0:	91282042 	add	x2, x2, #0xa08
    4001efe4:	32196000 	orr	w0, w0, #0xffffff80
    4001efe8:	39006460 	strb	w0, [x3, #25]
	return (node == list->tail) ? NULL : node->next;
    4001efec:	a9439420 	ldp	x0, x5, [x1, #56]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4001eff0:	eb02001f 	cmp	x0, x2
    4001eff4:	540002c0 	b.eq	4001f04c <move_thread_to_end_of_prio_q+0xa0>  // b.none
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4001eff8:	b40002a0 	cbz	x0, 4001f04c <move_thread_to_end_of_prio_q+0xa0>
	int32_t b1 = thread_1->base.prio;
    4001effc:	39c06866 	ldrsb	w6, [x3, #26]
	int32_t b2 = thread_2->base.prio;
    4001f000:	39c06804 	ldrsb	w4, [x0, #26]
	if (b1 != b2) {
    4001f004:	6b0400df 	cmp	w6, w4
    4001f008:	540001a0 	b.eq	4001f03c <move_thread_to_end_of_prio_q+0x90>  // b.none
		return b2 - b1;
    4001f00c:	4b060084 	sub	w4, w4, w6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4001f010:	7100009f 	cmp	w4, #0x0
    4001f014:	5400014d 	b.le	4001f03c <move_thread_to_end_of_prio_q+0x90>
	sys_dnode_t *const prev = successor->prev;
    4001f018:	f9400402 	ldr	x2, [x0, #8]
	node->prev = prev;
    4001f01c:	a9000860 	stp	x0, x2, [x3]
	prev->next = node;
    4001f020:	f9000043 	str	x3, [x2]
	successor->prev = node;
    4001f024:	f9000403 	str	x3, [x0, #8]
}
    4001f028:	a8c17bfd 	ldp	x29, x30, [sp], #16
	update_cache(thread == _current);
    4001f02c:	f9400820 	ldr	x0, [x1, #16]
    4001f030:	eb03001f 	cmp	x0, x3
    4001f034:	1a9f17e0 	cset	w0, eq  // eq = none
    4001f038:	17ffffbf 	b	4001ef34 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4001f03c:	eb05001f 	cmp	x0, x5
    4001f040:	54000060 	b.eq	4001f04c <move_thread_to_end_of_prio_q+0xa0>  // b.none
    4001f044:	f9400000 	ldr	x0, [x0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4001f048:	b5fffdc0 	cbnz	x0, 4001f000 <move_thread_to_end_of_prio_q+0x54>
	node->prev = tail;
    4001f04c:	a9001462 	stp	x2, x5, [x3]
	tail->next = node;
    4001f050:	f90000a3 	str	x3, [x5]
	list->tail = node;
    4001f054:	f9002023 	str	x3, [x1, #64]
}
    4001f058:	17fffff4 	b	4001f028 <move_thread_to_end_of_prio_q+0x7c>

000000004001f05c <z_time_slice>:
{
    4001f05c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    4001f060:	2a0003e3 	mov	w3, w0
    4001f064:	910003fd 	mov	x29, sp
    4001f068:	f9000bf3 	str	x19, [sp, #16]
    4001f06c:	d53b4233 	mrs	x19, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001f070:	d50342df 	msr	daifset, #0x2
	if (slice_time && sliceable(_current)) {
    4001f074:	90000320 	adrp	x0, 40083000 <ws+0x3a40>
    4001f078:	b94a9400 	ldr	w0, [x0, #2708]
    4001f07c:	90000321 	adrp	x1, 40083000 <ws+0x3a40>
    4001f080:	91274021 	add	x1, x1, #0x9d0
    4001f084:	340003c0 	cbz	w0, 4001f0fc <z_time_slice+0xa0>
    4001f088:	f9400820 	ldr	x0, [x1, #16]
		&& !z_is_idle_thread_object(thread);
    4001f08c:	79403402 	ldrh	w2, [x0, #26]
    4001f090:	7101fc5f 	cmp	w2, #0x7f
    4001f094:	54000348 	b.hi	4001f0fc <z_time_slice+0xa0>  // b.pmore
		&& !z_is_thread_prevented_from_running(thread)
    4001f098:	39406402 	ldrb	w2, [x0, #25]
    4001f09c:	f240105f 	tst	x2, #0x1f
    4001f0a0:	540002e1 	b.ne	4001f0fc <z_time_slice+0xa0>  // b.any
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    4001f0a4:	39c06804 	ldrsb	w4, [x0, #26]
    4001f0a8:	90000322 	adrp	x2, 40083000 <ws+0x3a40>
    4001f0ac:	b94a9042 	ldr	w2, [x2, #2704]
    4001f0b0:	6b02009f 	cmp	w4, w2
    4001f0b4:	5400024b 	b.lt	4001f0fc <z_time_slice+0xa0>  // b.tstop
		&& !z_is_idle_thread_object(thread);
    4001f0b8:	b0000062 	adrp	x2, 4002c000 <z_idle_threads>
    4001f0bc:	91000042 	add	x2, x2, #0x0
    4001f0c0:	eb02001f 	cmp	x0, x2
    4001f0c4:	540001c0 	b.eq	4001f0fc <z_time_slice+0xa0>  // b.none
		if (ticks >= _current_cpu->slice_ticks) {
    4001f0c8:	b9402022 	ldr	w2, [x1, #32]
    4001f0cc:	6b03005f 	cmp	w2, w3
    4001f0d0:	5400010c 	b.gt	4001f0f0 <z_time_slice+0x94>
			move_thread_to_end_of_prio_q(_current);
    4001f0d4:	97ffffb6 	bl	4001efac <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    4001f0d8:	97fffef4 	bl	4001eca8 <z_reset_time_slice>
MAKE_REG_HELPER(daif)
    4001f0dc:	92407e73 	and	x19, x19, #0xffffffff
    4001f0e0:	d51b4233 	msr	daif, x19
}
    4001f0e4:	f9400bf3 	ldr	x19, [sp, #16]
    4001f0e8:	a8c27bfd 	ldp	x29, x30, [sp], #32
    4001f0ec:	d65f03c0 	ret
			_current_cpu->slice_ticks -= ticks;
    4001f0f0:	4b030042 	sub	w2, w2, w3
    4001f0f4:	b9002022 	str	w2, [x1, #32]
    4001f0f8:	17fffff9 	b	4001f0dc <z_time_slice+0x80>
		_current_cpu->slice_ticks = 0;
    4001f0fc:	b900203f 	str	wzr, [x1, #32]
    4001f100:	17fffff7 	b	4001f0dc <z_time_slice+0x80>

000000004001f104 <ready_thread>:
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    4001f104:	39c06402 	ldrsb	w2, [x0, #25]
    4001f108:	39406401 	ldrb	w1, [x0, #25]
    4001f10c:	37f80482 	tbnz	w2, #31, 4001f19c <ready_thread+0x98>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4001f110:	f240103f 	tst	x1, #0x1f
    4001f114:	54000441 	b.ne	4001f19c <ready_thread+0x98>  // b.any
    4001f118:	f9401402 	ldr	x2, [x0, #40]
    4001f11c:	b5000402 	cbnz	x2, 4001f19c <ready_thread+0x98>
	return list->head == list;
    4001f120:	90000322 	adrp	x2, 40083000 <ws+0x3a40>
    4001f124:	91274042 	add	x2, x2, #0x9d0
	thread->base.thread_state |= _THREAD_QUEUED;
    4001f128:	32196021 	orr	w1, w1, #0xffffff80
    4001f12c:	39006401 	strb	w1, [x0, #25]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4001f130:	90000323 	adrp	x3, 40083000 <ws+0x3a40>
    4001f134:	91282063 	add	x3, x3, #0xa08
	return (node == list->tail) ? NULL : node->next;
    4001f138:	a9439441 	ldp	x1, x5, [x2, #56]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4001f13c:	eb03003f 	cmp	x1, x3
    4001f140:	54000260 	b.eq	4001f18c <ready_thread+0x88>  // b.none
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4001f144:	b4000241 	cbz	x1, 4001f18c <ready_thread+0x88>
	int32_t b1 = thread_1->base.prio;
    4001f148:	39c06806 	ldrsb	w6, [x0, #26]
	int32_t b2 = thread_2->base.prio;
    4001f14c:	39c06824 	ldrsb	w4, [x1, #26]
	if (b1 != b2) {
    4001f150:	6b0400df 	cmp	w6, w4
    4001f154:	54000140 	b.eq	4001f17c <ready_thread+0x78>  // b.none
		return b2 - b1;
    4001f158:	4b060084 	sub	w4, w4, w6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4001f15c:	7100009f 	cmp	w4, #0x0
    4001f160:	540000ed 	b.le	4001f17c <ready_thread+0x78>
	sys_dnode_t *const prev = successor->prev;
    4001f164:	f9400422 	ldr	x2, [x1, #8]
	node->prev = prev;
    4001f168:	a9000801 	stp	x1, x2, [x0]
	prev->next = node;
    4001f16c:	f9000040 	str	x0, [x2]
	successor->prev = node;
    4001f170:	f9000420 	str	x0, [x1, #8]
		update_cache(0);
    4001f174:	52800000 	mov	w0, #0x0                   	// #0
    4001f178:	17ffff6f 	b	4001ef34 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4001f17c:	eb05003f 	cmp	x1, x5
    4001f180:	54000060 	b.eq	4001f18c <ready_thread+0x88>  // b.none
    4001f184:	f9400021 	ldr	x1, [x1]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4001f188:	b5fffe21 	cbnz	x1, 4001f14c <ready_thread+0x48>
	node->prev = tail;
    4001f18c:	a9001403 	stp	x3, x5, [x0]
	tail->next = node;
    4001f190:	f90000a0 	str	x0, [x5]
	list->tail = node;
    4001f194:	f9002040 	str	x0, [x2, #64]
}
    4001f198:	17fffff7 	b	4001f174 <ready_thread+0x70>
}
    4001f19c:	d65f03c0 	ret

000000004001f1a0 <z_ready_thread>:
{
    4001f1a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    4001f1a4:	910003fd 	mov	x29, sp
    4001f1a8:	f9000bf3 	str	x19, [sp, #16]
    4001f1ac:	d53b4233 	mrs	x19, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001f1b0:	d50342df 	msr	daifset, #0x2
			ready_thread(thread);
    4001f1b4:	97ffffd4 	bl	4001f104 <ready_thread>
MAKE_REG_HELPER(daif)
    4001f1b8:	92407e73 	and	x19, x19, #0xffffffff
    4001f1bc:	d51b4233 	msr	daif, x19
}
    4001f1c0:	f9400bf3 	ldr	x19, [sp, #16]
    4001f1c4:	a8c27bfd 	ldp	x29, x30, [sp], #32
    4001f1c8:	d65f03c0 	ret

000000004001f1cc <z_sched_start>:
{
    4001f1cc:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    4001f1d0:	910003fd 	mov	x29, sp
    4001f1d4:	f9000bf3 	str	x19, [sp, #16]
    4001f1d8:	d53b4233 	mrs	x19, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001f1dc:	d50342df 	msr	daifset, #0x2
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    4001f1e0:	39406402 	ldrb	w2, [x0, #25]
	if (z_has_thread_started(thread)) {
    4001f1e4:	371000c2 	tbnz	w2, #2, 4001f1fc <z_sched_start+0x30>
MAKE_REG_HELPER(daif)
    4001f1e8:	92407e73 	and	x19, x19, #0xffffffff
    4001f1ec:	d51b4233 	msr	daif, x19
}
    4001f1f0:	f9400bf3 	ldr	x19, [sp, #16]
    4001f1f4:	a8c27bfd 	ldp	x29, x30, [sp], #32
    4001f1f8:	d65f03c0 	ret
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4001f1fc:	121d7842 	and	w2, w2, #0xfffffffb
    4001f200:	39006402 	strb	w2, [x0, #25]
	ready_thread(thread);
    4001f204:	97ffffc0 	bl	4001f104 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    4001f208:	2a1303e1 	mov	w1, w19
    4001f20c:	90000320 	adrp	x0, 40083000 <ws+0x3a40>
    4001f210:	912ec400 	add	x0, x0, #0xbb1
}
    4001f214:	f9400bf3 	ldr	x19, [sp, #16]
    4001f218:	a8c27bfd 	ldp	x29, x30, [sp], #32
	z_reschedule(&sched_spinlock, key);
    4001f21c:	17ffff12 	b	4001ee64 <z_reschedule>

000000004001f220 <z_thread_timeout>:
{
    4001f220:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    4001f224:	910003fd 	mov	x29, sp
    4001f228:	f9000bf3 	str	x19, [sp, #16]
    4001f22c:	d53b4233 	mrs	x19, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001f230:	d50342df 	msr	daifset, #0x2
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    4001f234:	d100a004 	sub	x4, x0, #0x28
		if (!killed) {
    4001f238:	52800501 	mov	w1, #0x28                  	// #40
    4001f23c:	39406480 	ldrb	w0, [x4, #25]
    4001f240:	6a00003f 	tst	w1, w0
    4001f244:	54000161 	b.ne	4001f270 <z_thread_timeout+0x50>  // b.any
			if (thread->base.pended_on != NULL) {
    4001f248:	f9400880 	ldr	x0, [x4, #16]
    4001f24c:	b4000060 	cbz	x0, 4001f258 <z_thread_timeout+0x38>
				unpend_thread_no_timeout(thread);
    4001f250:	aa0403e0 	mov	x0, x4
    4001f254:	97fffe8b 	bl	4001ec80 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    4001f258:	39406480 	ldrb	w0, [x4, #25]
    4001f25c:	12800281 	mov	w1, #0xffffffeb            	// #-21
    4001f260:	0a010000 	and	w0, w0, w1
    4001f264:	39006480 	strb	w0, [x4, #25]
			ready_thread(thread);
    4001f268:	aa0403e0 	mov	x0, x4
    4001f26c:	97ffffa6 	bl	4001f104 <ready_thread>
MAKE_REG_HELPER(daif)
    4001f270:	92407e73 	and	x19, x19, #0xffffffff
    4001f274:	d51b4233 	msr	daif, x19
}
    4001f278:	f9400bf3 	ldr	x19, [sp, #16]
    4001f27c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    4001f280:	d65f03c0 	ret

000000004001f284 <unready_thread>:
	if (z_is_thread_queued(thread)) {
    4001f284:	39c06402 	ldrsb	w2, [x0, #25]
{
    4001f288:	aa0003e3 	mov	x3, x0
	return (thread->base.thread_state & state) != 0U;
    4001f28c:	39406401 	ldrb	w1, [x0, #25]
	if (z_is_thread_queued(thread)) {
    4001f290:	36f80182 	tbz	w2, #31, 4001f2c0 <unready_thread+0x3c>
{
    4001f294:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4001f298:	12001821 	and	w1, w1, #0x7f
{
    4001f29c:	910003fd 	mov	x29, sp
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4001f2a0:	39006401 	strb	w1, [x0, #25]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4001f2a4:	97fffe72 	bl	4001ec6c <sys_dlist_remove>
	update_cache(thread == _current);
    4001f2a8:	90000320 	adrp	x0, 40083000 <ws+0x3a40>
    4001f2ac:	f944f000 	ldr	x0, [x0, #2528]
}
    4001f2b0:	a8c17bfd 	ldp	x29, x30, [sp], #16
	update_cache(thread == _current);
    4001f2b4:	eb03001f 	cmp	x0, x3
    4001f2b8:	1a9f17e0 	cset	w0, eq  // eq = none
    4001f2bc:	17ffff1e 	b	4001ef34 <update_cache>
    4001f2c0:	90000320 	adrp	x0, 40083000 <ws+0x3a40>
    4001f2c4:	f944f000 	ldr	x0, [x0, #2528]
    4001f2c8:	eb03001f 	cmp	x0, x3
    4001f2cc:	1a9f17e0 	cset	w0, eq  // eq = none
    4001f2d0:	17fffffb 	b	4001f2bc <unready_thread+0x38>

000000004001f2d4 <add_to_waitq_locked>:
{
    4001f2d4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    4001f2d8:	910003fd 	mov	x29, sp
    4001f2dc:	a90153f3 	stp	x19, x20, [sp, #16]
    4001f2e0:	aa0003f3 	mov	x19, x0
    4001f2e4:	aa0103f4 	mov	x20, x1
	unready_thread(thread);
    4001f2e8:	97ffffe7 	bl	4001f284 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    4001f2ec:	39406660 	ldrb	w0, [x19, #25]
    4001f2f0:	321f0000 	orr	w0, w0, #0x2
    4001f2f4:	39006660 	strb	w0, [x19, #25]
	if (wait_q != NULL) {
    4001f2f8:	b4000234 	cbz	x20, 4001f33c <add_to_waitq_locked+0x68>
	return list->head == list;
    4001f2fc:	f9400280 	ldr	x0, [x20]
		thread->base.pended_on = wait_q;
    4001f300:	f9000a74 	str	x20, [x19, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4001f304:	eb00029f 	cmp	x20, x0
    4001f308:	540002a0 	b.eq	4001f35c <add_to_waitq_locked+0x88>  // b.none
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4001f30c:	b4000280 	cbz	x0, 4001f35c <add_to_waitq_locked+0x88>
	int32_t b1 = thread_1->base.prio;
    4001f310:	39c06a62 	ldrsb	w2, [x19, #26]
	int32_t b2 = thread_2->base.prio;
    4001f314:	39c06801 	ldrsb	w1, [x0, #26]
	if (b1 != b2) {
    4001f318:	6b01005f 	cmp	w2, w1
    4001f31c:	54000160 	b.eq	4001f348 <add_to_waitq_locked+0x74>  // b.none
		return b2 - b1;
    4001f320:	4b020021 	sub	w1, w1, w2
		if (z_sched_prio_cmp(thread, t) > 0) {
    4001f324:	7100003f 	cmp	w1, #0x0
    4001f328:	5400010d 	b.le	4001f348 <add_to_waitq_locked+0x74>
	sys_dnode_t *const prev = successor->prev;
    4001f32c:	f9400401 	ldr	x1, [x0, #8]
	node->prev = prev;
    4001f330:	a9000660 	stp	x0, x1, [x19]
	prev->next = node;
    4001f334:	f9000033 	str	x19, [x1]
	successor->prev = node;
    4001f338:	f9000413 	str	x19, [x0, #8]
}
    4001f33c:	a94153f3 	ldp	x19, x20, [sp, #16]
    4001f340:	a8c27bfd 	ldp	x29, x30, [sp], #32
    4001f344:	d65f03c0 	ret
	return (node == list->tail) ? NULL : node->next;
    4001f348:	f9400681 	ldr	x1, [x20, #8]
    4001f34c:	eb01001f 	cmp	x0, x1
    4001f350:	54000060 	b.eq	4001f35c <add_to_waitq_locked+0x88>  // b.none
    4001f354:	f9400000 	ldr	x0, [x0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4001f358:	b5fffde0 	cbnz	x0, 4001f314 <add_to_waitq_locked+0x40>
	sys_dnode_t *const tail = list->tail;
    4001f35c:	f9400680 	ldr	x0, [x20, #8]
	node->prev = tail;
    4001f360:	a9000274 	stp	x20, x0, [x19]
	tail->next = node;
    4001f364:	f9000013 	str	x19, [x0]
	list->tail = node;
    4001f368:	f9000693 	str	x19, [x20, #8]
}
    4001f36c:	17fffff4 	b	4001f33c <add_to_waitq_locked+0x68>

000000004001f370 <pend>:
{
    4001f370:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    4001f374:	910003fd 	mov	x29, sp
    4001f378:	a90153f3 	stp	x19, x20, [sp, #16]
    4001f37c:	aa0003f4 	mov	x20, x0
    4001f380:	aa0203f3 	mov	x19, x2
    4001f384:	f90013f5 	str	x21, [sp, #32]
    4001f388:	d53b4235 	mrs	x21, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001f38c:	d50342df 	msr	daifset, #0x2
MAKE_REG_HELPER(daif)
    4001f390:	92407eb5 	and	x21, x21, #0xffffffff
		add_to_waitq_locked(thread, wait_q);
    4001f394:	97ffffd0 	bl	4001f2d4 <add_to_waitq_locked>
    4001f398:	d51b4235 	msr	daif, x21
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4001f39c:	b100067f 	cmn	x19, #0x1
    4001f3a0:	54000120 	b.eq	4001f3c4 <pend+0x54>  // b.none
    4001f3a4:	aa1303e2 	mov	x2, x19
    4001f3a8:	9100a280 	add	x0, x20, #0x28
}
    4001f3ac:	a94153f3 	ldp	x19, x20, [sp, #16]
    4001f3b0:	90000001 	adrp	x1, 4001f000 <move_thread_to_end_of_prio_q+0x54>
    4001f3b4:	91088021 	add	x1, x1, #0x220
    4001f3b8:	f94013f5 	ldr	x21, [sp, #32]
    4001f3bc:	a8c37bfd 	ldp	x29, x30, [sp], #48
    4001f3c0:	140000ea 	b	4001f768 <z_add_timeout>
    4001f3c4:	a94153f3 	ldp	x19, x20, [sp, #16]
    4001f3c8:	f94013f5 	ldr	x21, [sp, #32]
    4001f3cc:	a8c37bfd 	ldp	x29, x30, [sp], #48
    4001f3d0:	d65f03c0 	ret

000000004001f3d4 <z_pend_curr>:
{
    4001f3d4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    4001f3d8:	910003fd 	mov	x29, sp
    4001f3dc:	a90153f3 	stp	x19, x20, [sp, #16]
    4001f3e0:	aa0003f3 	mov	x19, x0
	pend(_current, wait_q, timeout);
    4001f3e4:	90000320 	adrp	x0, 40083000 <ws+0x3a40>
    4001f3e8:	f944f000 	ldr	x0, [x0, #2528]
{
    4001f3ec:	2a0103f4 	mov	w20, w1
    4001f3f0:	aa0203e1 	mov	x1, x2
    4001f3f4:	aa0303e2 	mov	x2, x3
	pend(_current, wait_q, timeout);
    4001f3f8:	97ffffde 	bl	4001f370 <pend>
	return z_swap(lock, key);
    4001f3fc:	2a1403e1 	mov	w1, w20
    4001f400:	aa1303e0 	mov	x0, x19
}
    4001f404:	a94153f3 	ldp	x19, x20, [sp, #16]
    4001f408:	a8c27bfd 	ldp	x29, x30, [sp], #32
	return z_swap(lock, key);
    4001f40c:	17fffe55 	b	4001ed60 <z_swap>

000000004001f410 <z_set_prio>:
{
    4001f410:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    4001f414:	aa0003e3 	mov	x3, x0
    4001f418:	910003fd 	mov	x29, sp
    4001f41c:	f9000bf3 	str	x19, [sp, #16]
    4001f420:	d53b4233 	mrs	x19, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001f424:	d50342df 	msr	daifset, #0x2
	uint8_t state = thread->base.thread_state;
    4001f428:	39406402 	ldrb	w2, [x0, #25]
				thread->base.prio = prio;
    4001f42c:	13001c24 	sxtb	w4, w1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4001f430:	f240105f 	tst	x2, #0x1f
    4001f434:	540005c1 	b.ne	4001f4ec <z_set_prio+0xdc>  // b.any
		if (need_sched) {
    4001f438:	f9401401 	ldr	x1, [x0, #40]
    4001f43c:	b5000581 	cbnz	x1, 4001f4ec <z_set_prio+0xdc>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4001f440:	12001842 	and	w2, w2, #0x7f
    4001f444:	39006402 	strb	w2, [x0, #25]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4001f448:	97fffe09 	bl	4001ec6c <sys_dlist_remove>
				thread->base.prio = prio;
    4001f44c:	39006804 	strb	w4, [x0, #26]
	thread->base.thread_state |= _THREAD_QUEUED;
    4001f450:	39406400 	ldrb	w0, [x0, #25]
	return list->head == list;
    4001f454:	90000321 	adrp	x1, 40083000 <ws+0x3a40>
    4001f458:	91274021 	add	x1, x1, #0x9d0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4001f45c:	90000322 	adrp	x2, 40083000 <ws+0x3a40>
    4001f460:	91282042 	add	x2, x2, #0xa08
    4001f464:	32196000 	orr	w0, w0, #0xffffff80
    4001f468:	39006460 	strb	w0, [x3, #25]
	return list->head == list;
    4001f46c:	f9401c20 	ldr	x0, [x1, #56]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4001f470:	eb02001f 	cmp	x0, x2
    4001f474:	54000320 	b.eq	4001f4d8 <z_set_prio+0xc8>  // b.none
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4001f478:	b4000300 	cbz	x0, 4001f4d8 <z_set_prio+0xc8>
	return (node == list->tail) ? NULL : node->next;
    4001f47c:	f9402026 	ldr	x6, [x1, #64]
	int32_t b2 = thread_2->base.prio;
    4001f480:	39c06805 	ldrsb	w5, [x0, #26]
	if (b1 != b2) {
    4001f484:	6b05009f 	cmp	w4, w5
    4001f488:	54000200 	b.eq	4001f4c8 <z_set_prio+0xb8>  // b.none
		return b2 - b1;
    4001f48c:	4b0400a5 	sub	w5, w5, w4
		if (z_sched_prio_cmp(thread, t) > 0) {
    4001f490:	710000bf 	cmp	w5, #0x0
    4001f494:	540001ad 	b.le	4001f4c8 <z_set_prio+0xb8>
	sys_dnode_t *const prev = successor->prev;
    4001f498:	f9400401 	ldr	x1, [x0, #8]
	node->prev = prev;
    4001f49c:	a9000460 	stp	x0, x1, [x3]
	prev->next = node;
    4001f4a0:	f9000023 	str	x3, [x1]
	successor->prev = node;
    4001f4a4:	f9000403 	str	x3, [x0, #8]
			update_cache(1);
    4001f4a8:	52800020 	mov	w0, #0x1                   	// #1
    4001f4ac:	97fffea2 	bl	4001ef34 <update_cache>
    4001f4b0:	52800020 	mov	w0, #0x1                   	// #1
MAKE_REG_HELPER(daif)
    4001f4b4:	92407e73 	and	x19, x19, #0xffffffff
    4001f4b8:	d51b4233 	msr	daif, x19
}
    4001f4bc:	f9400bf3 	ldr	x19, [sp, #16]
    4001f4c0:	a8c27bfd 	ldp	x29, x30, [sp], #32
    4001f4c4:	d65f03c0 	ret
	return (node == list->tail) ? NULL : node->next;
    4001f4c8:	eb06001f 	cmp	x0, x6
    4001f4cc:	54000060 	b.eq	4001f4d8 <z_set_prio+0xc8>  // b.none
    4001f4d0:	f9400000 	ldr	x0, [x0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4001f4d4:	b5fffd60 	cbnz	x0, 4001f480 <z_set_prio+0x70>
	sys_dnode_t *const tail = list->tail;
    4001f4d8:	f9402020 	ldr	x0, [x1, #64]
	node->prev = tail;
    4001f4dc:	a9000062 	stp	x2, x0, [x3]
	tail->next = node;
    4001f4e0:	f9000003 	str	x3, [x0]
	list->tail = node;
    4001f4e4:	f9002023 	str	x3, [x1, #64]
}
    4001f4e8:	17fffff0 	b	4001f4a8 <z_set_prio+0x98>
			thread->base.prio = prio;
    4001f4ec:	52800000 	mov	w0, #0x0                   	// #0
    4001f4f0:	39006864 	strb	w4, [x3, #26]
    4001f4f4:	17fffff0 	b	4001f4b4 <z_set_prio+0xa4>

000000004001f4f8 <k_sched_unlock>:
{
    4001f4f8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    4001f4fc:	910003fd 	mov	x29, sp
    4001f500:	f9000bf3 	str	x19, [sp, #16]
    4001f504:	d53b4233 	mrs	x19, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001f508:	d50342df 	msr	daifset, #0x2
		++_current->base.sched_locked;
    4001f50c:	90000320 	adrp	x0, 40083000 <ws+0x3a40>
    4001f510:	f944f001 	ldr	x1, [x0, #2528]
MAKE_REG_HELPER(daif)
    4001f514:	92407e73 	and	x19, x19, #0xffffffff
    4001f518:	39406c20 	ldrb	w0, [x1, #27]
    4001f51c:	11000400 	add	w0, w0, #0x1
    4001f520:	39006c20 	strb	w0, [x1, #27]
		update_cache(0);
    4001f524:	52800000 	mov	w0, #0x0                   	// #0
    4001f528:	97fffe83 	bl	4001ef34 <update_cache>
    4001f52c:	d51b4233 	msr	daif, x19
}
    4001f530:	f9400bf3 	ldr	x19, [sp, #16]
    4001f534:	a8c27bfd 	ldp	x29, x30, [sp], #32
	z_reschedule_unlocked();
    4001f538:	17fffe63 	b	4001eec4 <z_reschedule_unlocked>

000000004001f53c <z_unpend_first_thread>:
{
    4001f53c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    4001f540:	910003fd 	mov	x29, sp
    4001f544:	a90153f3 	stp	x19, x20, [sp, #16]
    4001f548:	d53b4234 	mrs	x20, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001f54c:	d50342df 	msr	daifset, #0x2
		thread = _priq_wait_best(&wait_q->waitq);
    4001f550:	97fffe75 	bl	4001ef24 <z_priq_dumb_best>
    4001f554:	aa0003f3 	mov	x19, x0
		if (thread != NULL) {
    4001f558:	b4000080 	cbz	x0, 4001f568 <z_unpend_first_thread+0x2c>
			unpend_thread_no_timeout(thread);
    4001f55c:	97fffdc9 	bl	4001ec80 <unpend_thread_no_timeout>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    4001f560:	9100a260 	add	x0, x19, #0x28
    4001f564:	940000c8 	bl	4001f884 <z_abort_timeout>
MAKE_REG_HELPER(daif)
    4001f568:	92407e94 	and	x20, x20, #0xffffffff
    4001f56c:	d51b4234 	msr	daif, x20
}
    4001f570:	aa1303e0 	mov	x0, x19
    4001f574:	a94153f3 	ldp	x19, x20, [sp, #16]
    4001f578:	a8c27bfd 	ldp	x29, x30, [sp], #32
    4001f57c:	d65f03c0 	ret

000000004001f580 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    4001f580:	90000320 	adrp	x0, 40083000 <ws+0x3a40>
    4001f584:	91274000 	add	x0, x0, #0x9d0
    4001f588:	90000321 	adrp	x1, 40083000 <ws+0x3a40>
    4001f58c:	91282021 	add	x1, x1, #0xa08
	list->tail = (sys_dnode_t *)list;
    4001f590:	a9038401 	stp	x1, x1, [x0, #56]
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    4001f594:	52800001 	mov	w1, #0x0                   	// #0
    4001f598:	52800000 	mov	w0, #0x0                   	// #0
    4001f59c:	17fffe10 	b	4001eddc <k_sched_time_slice_set>

000000004001f5a0 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    4001f5a0:	90000320 	adrp	x0, 40083000 <ws+0x3a40>
    4001f5a4:	f944f000 	ldr	x0, [x0, #2528]
    4001f5a8:	d65f03c0 	ret

000000004001f5ac <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    4001f5ac:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    4001f5b0:	910003fd 	mov	x29, sp
    4001f5b4:	a90153f3 	stp	x19, x20, [sp, #16]
    4001f5b8:	a9025bf5 	stp	x21, x22, [sp, #32]
    4001f5bc:	d53b4234 	mrs	x20, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001f5c0:	d50342df 	msr	daifset, #0x2
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    4001f5c4:	39406401 	ldrb	w1, [x0, #25]
    4001f5c8:	361800e1 	tbz	w1, #3, 4001f5e4 <z_thread_abort+0x38>
MAKE_REG_HELPER(daif)
    4001f5cc:	92407e94 	and	x20, x20, #0xffffffff
    4001f5d0:	d51b4234 	msr	daif, x20
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    4001f5d4:	a94153f3 	ldp	x19, x20, [sp, #16]
    4001f5d8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4001f5dc:	a8c37bfd 	ldp	x29, x30, [sp], #48
    4001f5e0:	d65f03c0 	ret
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4001f5e4:	121a7822 	and	w2, w1, #0xffffffdf
    4001f5e8:	aa0003f3 	mov	x19, x0
    4001f5ec:	321d0043 	orr	w3, w2, #0x8
		if (z_is_thread_queued(thread)) {
    4001f5f0:	37380382 	tbnz	w2, #7, 4001f660 <z_thread_abort+0xb4>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4001f5f4:	39006403 	strb	w3, [x0, #25]
		if (thread->base.pended_on != NULL) {
    4001f5f8:	f9400a60 	ldr	x0, [x19, #16]
    4001f5fc:	b4000060 	cbz	x0, 4001f608 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    4001f600:	aa1303e0 	mov	x0, x19
    4001f604:	97fffd9f 	bl	4001ec80 <unpend_thread_no_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    4001f608:	9102e276 	add	x22, x19, #0xb8
    4001f60c:	9100a260 	add	x0, x19, #0x28
    4001f610:	9400009d 	bl	4001f884 <z_abort_timeout>
	return list->head == list;
    4001f614:	f9405e75 	ldr	x21, [x19, #184]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4001f618:	eb1602bf 	cmp	x21, x22
    4001f61c:	54000040 	b.eq	4001f624 <z_thread_abort+0x78>  // b.none
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    4001f620:	b50002d5 	cbnz	x21, 4001f678 <z_thread_abort+0xcc>
		update_cache(1);
    4001f624:	52800020 	mov	w0, #0x1                   	// #1
    4001f628:	97fffe43 	bl	4001ef34 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    4001f62c:	90000320 	adrp	x0, 40083000 <ws+0x3a40>
    4001f630:	f944f000 	ldr	x0, [x0, #2528]
    4001f634:	eb13001f 	cmp	x0, x19
    4001f638:	54fffca1 	b.ne	4001f5cc <z_thread_abort+0x20>  // b.any
MAKE_REG_HELPER(tpidrro_el0);
    4001f63c:	d53bd060 	mrs	x0, tpidrro_el0
    4001f640:	927db000 	and	x0, x0, #0xfffffffffff8
    4001f644:	b9400000 	ldr	w0, [x0]
    4001f648:	35fffc20 	cbnz	w0, 4001f5cc <z_thread_abort+0x20>
		z_swap(&sched_spinlock, key);
    4001f64c:	2a1403e1 	mov	w1, w20
    4001f650:	90000320 	adrp	x0, 40083000 <ws+0x3a40>
    4001f654:	912ec400 	add	x0, x0, #0xbb1
    4001f658:	97fffdc2 	bl	4001ed60 <z_swap>
    4001f65c:	17ffffdc 	b	4001f5cc <z_thread_abort+0x20>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4001f660:	52800be2 	mov	w2, #0x5f                  	// #95
    4001f664:	0a020021 	and	w1, w1, w2
    4001f668:	321d0021 	orr	w1, w1, #0x8
    4001f66c:	39006401 	strb	w1, [x0, #25]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4001f670:	97fffd7f 	bl	4001ec6c <sys_dlist_remove>
}
    4001f674:	17ffffe1 	b	4001f5f8 <z_thread_abort+0x4c>
		unpend_thread_no_timeout(thread);
    4001f678:	aa1503e0 	mov	x0, x21
    4001f67c:	97fffd81 	bl	4001ec80 <unpend_thread_no_timeout>
    4001f680:	9100a2a0 	add	x0, x21, #0x28
    4001f684:	94000080 	bl	4001f884 <z_abort_timeout>
    4001f688:	b900cebf 	str	wzr, [x21, #204]
		ready_thread(thread);
    4001f68c:	aa1503e0 	mov	x0, x21
    4001f690:	97fffe9d 	bl	4001f104 <ready_thread>
    4001f694:	17ffffe0 	b	4001f614 <z_thread_abort+0x68>

000000004001f698 <z_impl_k_thread_abort>:
#if !defined(CONFIG_ARCH_HAS_THREAD_ABORT)
void z_impl_k_thread_abort(struct k_thread *thread)
{
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_thread, abort, thread);

	z_thread_abort(thread);
    4001f698:	17ffffc5 	b	4001f5ac <z_thread_abort>

000000004001f69c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4001f69c:	90000320 	adrp	x0, 40083000 <ws+0x3a40>
    4001f6a0:	b94a9800 	ldr	w0, [x0, #2712]
    4001f6a4:	35000040 	cbnz	w0, 4001f6ac <elapsed+0x10>
    4001f6a8:	17fffbb6 	b	4001e580 <sys_clock_elapsed>
}
    4001f6ac:	52800000 	mov	w0, #0x0                   	// #0
    4001f6b0:	d65f03c0 	ret

000000004001f6b4 <next_timeout>:

static int32_t next_timeout(void)
{
    4001f6b4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	return list->head == list;
    4001f6b8:	f0000560 	adrp	x0, 400ce000 <z_interrupt_stacks+0x440>
    4001f6bc:	91302001 	add	x1, x0, #0xc08
    4001f6c0:	910003fd 	mov	x29, sp
    4001f6c4:	f9000bf3 	str	x19, [sp, #16]
    4001f6c8:	f9460413 	ldr	x19, [x0, #3080]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4001f6cc:	eb01027f 	cmp	x19, x1
    4001f6d0:	9a9f1273 	csel	x19, x19, xzr, ne  // ne = any
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    4001f6d4:	97fffff2 	bl	4001f69c <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    4001f6d8:	b4000213 	cbz	x19, 4001f718 <next_timeout+0x64>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    4001f6dc:	f9400e61 	ldr	x1, [x19, #24]
    4001f6e0:	cb20c020 	sub	x0, x1, w0, sxtw
	int32_t ret = to == NULL ? MAX_WAIT
    4001f6e4:	f100001f 	cmp	x0, #0x0
    4001f6e8:	540001cd 	b.le	4001f720 <next_timeout+0x6c>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    4001f6ec:	b2407be1 	mov	x1, #0x7fffffff            	// #2147483647
    4001f6f0:	eb01001f 	cmp	x0, x1
	int32_t ret = to == NULL ? MAX_WAIT
    4001f6f4:	9a81d000 	csel	x0, x0, x1, le

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    4001f6f8:	90000321 	adrp	x1, 40083000 <ws+0x3a40>
    4001f6fc:	b949f021 	ldr	w1, [x1, #2544]
    4001f700:	34000061 	cbz	w1, 4001f70c <next_timeout+0x58>
    4001f704:	6b01001f 	cmp	w0, w1
    4001f708:	1a81d000 	csel	w0, w0, w1, le
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    4001f70c:	f9400bf3 	ldr	x19, [sp, #16]
    4001f710:	a8c27bfd 	ldp	x29, x30, [sp], #32
    4001f714:	d65f03c0 	ret
	int32_t ret = to == NULL ? MAX_WAIT
    4001f718:	12b00000 	mov	w0, #0x7fffffff            	// #2147483647
    4001f71c:	17fffff7 	b	4001f6f8 <next_timeout+0x44>
    4001f720:	52800000 	mov	w0, #0x0                   	// #0
    4001f724:	17fffff5 	b	4001f6f8 <next_timeout+0x44>

000000004001f728 <remove_timeout>:
	return (node == list->tail) ? NULL : node->next;
    4001f728:	f9400001 	ldr	x1, [x0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4001f72c:	b4000140 	cbz	x0, 4001f754 <remove_timeout+0x2c>
	return (node == list->tail) ? NULL : node->next;
    4001f730:	f0000562 	adrp	x2, 400ce000 <z_interrupt_stacks+0x440>
    4001f734:	f9460842 	ldr	x2, [x2, #3088]
    4001f738:	eb02001f 	cmp	x0, x2
    4001f73c:	540000c0 	b.eq	4001f754 <remove_timeout+0x2c>  // b.none
	if (next(t) != NULL) {
    4001f740:	b40000a1 	cbz	x1, 4001f754 <remove_timeout+0x2c>
		next(t)->dticks += t->dticks;
    4001f744:	f9400c03 	ldr	x3, [x0, #24]
    4001f748:	f9400c22 	ldr	x2, [x1, #24]
    4001f74c:	8b030042 	add	x2, x2, x3
    4001f750:	f9000c22 	str	x2, [x1, #24]
	sys_dnode_t *const prev = node->prev;
    4001f754:	f9400402 	ldr	x2, [x0, #8]
	prev->next = next;
    4001f758:	f9000041 	str	x1, [x2]
	next->prev = prev;
    4001f75c:	f9000422 	str	x2, [x1, #8]
	node->prev = NULL;
    4001f760:	a9007c1f 	stp	xzr, xzr, [x0]
}
    4001f764:	d65f03c0 	ret

000000004001f768 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4001f768:	b100045f 	cmn	x2, #0x1
    4001f76c:	540008a0 	b.eq	4001f880 <z_add_timeout+0x118>  // b.none
{
    4001f770:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    4001f774:	910003fd 	mov	x29, sp
    4001f778:	a90153f3 	stp	x19, x20, [sp, #16]
    4001f77c:	aa0003f3 	mov	x19, x0
    4001f780:	aa0203f4 	mov	x20, x2
    4001f784:	f90013f5 	str	x21, [sp, #32]
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    4001f788:	f9000801 	str	x1, [x0, #16]
MAKE_REG_HELPER(daif)
    4001f78c:	d53b4235 	mrs	x21, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001f790:	d50342df 	msr	daifset, #0x2

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    4001f794:	92800020 	mov	x0, #0xfffffffffffffffe    	// #-2
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    4001f798:	eb02001f 	cmp	x0, x2
    4001f79c:	54000244 	b.mi	4001f7e4 <z_add_timeout+0x7c>  // b.first
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    4001f7a0:	90000321 	adrp	x1, 40083000 <ws+0x3a40>
    4001f7a4:	f9451022 	ldr	x2, [x1, #2592]
    4001f7a8:	cb020000 	sub	x0, x0, x2
    4001f7ac:	cb140002 	sub	x2, x0, x20

			to->dticks = MAX(1, ticks);
    4001f7b0:	f100005f 	cmp	x2, #0x0
    4001f7b4:	9a9fc442 	csinc	x2, x2, xzr, gt
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    4001f7b8:	f9000e62 	str	x2, [x19, #24]
	return list->head == list;
    4001f7bc:	f0000562 	adrp	x2, 400ce000 <z_interrupt_stacks+0x440>
    4001f7c0:	91302041 	add	x1, x2, #0xc08
    4001f7c4:	f9460440 	ldr	x0, [x2, #3080]
	sys_dnode_t *const tail = list->tail;
    4001f7c8:	f9400425 	ldr	x5, [x1, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4001f7cc:	eb01001f 	cmp	x0, x1
    4001f7d0:	540001c1 	b.ne	4001f808 <z_add_timeout+0xa0>  // b.any
	node->prev = tail;
    4001f7d4:	a9001661 	stp	x1, x5, [x19]
	tail->next = node;
    4001f7d8:	f90000b3 	str	x19, [x5]
	list->tail = node;
    4001f7dc:	f9000433 	str	x19, [x1, #8]
}
    4001f7e0:	14000015 	b	4001f834 <z_add_timeout+0xcc>
    4001f7e4:	97ffffae 	bl	4001f69c <elapsed>
    4001f7e8:	91000682 	add	x2, x20, #0x1
    4001f7ec:	8b20c042 	add	x2, x2, w0, sxtw
    4001f7f0:	17fffff2 	b	4001f7b8 <z_add_timeout+0x50>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    4001f7f4:	cb040063 	sub	x3, x3, x4
    4001f7f8:	f9000e63 	str	x3, [x19, #24]
	return (node == list->tail) ? NULL : node->next;
    4001f7fc:	eb0000bf 	cmp	x5, x0
    4001f800:	54fffea0 	b.eq	4001f7d4 <z_add_timeout+0x6c>  // b.none
    4001f804:	f9400000 	ldr	x0, [x0]
		for (t = first(); t != NULL; t = next(t)) {
    4001f808:	b4fffe60 	cbz	x0, 4001f7d4 <z_add_timeout+0x6c>
			if (t->dticks > to->dticks) {
    4001f80c:	f9400c04 	ldr	x4, [x0, #24]
    4001f810:	f9400e63 	ldr	x3, [x19, #24]
    4001f814:	eb03009f 	cmp	x4, x3
    4001f818:	54fffeed 	b.le	4001f7f4 <z_add_timeout+0x8c>
				t->dticks -= to->dticks;
    4001f81c:	cb030083 	sub	x3, x4, x3
    4001f820:	f9000c03 	str	x3, [x0, #24]
	sys_dnode_t *const prev = successor->prev;
    4001f824:	f9400403 	ldr	x3, [x0, #8]
	node->prev = prev;
    4001f828:	a9000e60 	stp	x0, x3, [x19]
	prev->next = node;
    4001f82c:	f9000073 	str	x19, [x3]
	successor->prev = node;
    4001f830:	f9000413 	str	x19, [x0, #8]
	return list->head == list;
    4001f834:	f9460440 	ldr	x0, [x2, #3080]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4001f838:	eb01001f 	cmp	x0, x1
    4001f83c:	54000160 	b.eq	4001f868 <z_add_timeout+0x100>  // b.none

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    4001f840:	eb00027f 	cmp	x19, x0
    4001f844:	54000121 	b.ne	4001f868 <z_add_timeout+0x100>  // b.any
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    4001f848:	97ffff9b 	bl	4001f6b4 <next_timeout>

			if (next_time == 0 ||
    4001f84c:	340000a0 	cbz	w0, 4001f860 <z_add_timeout+0xf8>
			    _current_cpu->slice_ticks != next_time) {
    4001f850:	90000321 	adrp	x1, 40083000 <ws+0x3a40>
			if (next_time == 0 ||
    4001f854:	b949f021 	ldr	w1, [x1, #2544]
    4001f858:	6b00003f 	cmp	w1, w0
    4001f85c:	54000060 	b.eq	4001f868 <z_add_timeout+0x100>  // b.none
				sys_clock_set_timeout(next_time, false);
    4001f860:	52800001 	mov	w1, #0x0                   	// #0
    4001f864:	97fffb1f 	bl	4001e4e0 <sys_clock_set_timeout>
MAKE_REG_HELPER(daif)
    4001f868:	92407eb5 	and	x21, x21, #0xffffffff
    4001f86c:	d51b4235 	msr	daif, x21
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    4001f870:	a94153f3 	ldp	x19, x20, [sp, #16]
    4001f874:	f94013f5 	ldr	x21, [sp, #32]
    4001f878:	a8c37bfd 	ldp	x29, x30, [sp], #48
    4001f87c:	d65f03c0 	ret
    4001f880:	d65f03c0 	ret

000000004001f884 <z_abort_timeout>:
    4001f884:	d53b4224 	mrs	x4, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001f888:	d50342df 	msr	daifset, #0x2
int z_abort_timeout(struct _timeout *to)
{
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    4001f88c:	f9400001 	ldr	x1, [x0]
    4001f890:	b4000121 	cbz	x1, 4001f8b4 <z_abort_timeout+0x30>
{
    4001f894:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
MAKE_REG_HELPER(daif)
    4001f898:	92407c84 	and	x4, x4, #0xffffffff
    4001f89c:	910003fd 	mov	x29, sp
			remove_timeout(to);
    4001f8a0:	97ffffa2 	bl	4001f728 <remove_timeout>
			ret = 0;
    4001f8a4:	52800000 	mov	w0, #0x0                   	// #0
    4001f8a8:	d51b4224 	msr	daif, x4
		}
	}

	return ret;
}
    4001f8ac:	a8c17bfd 	ldp	x29, x30, [sp], #16
    4001f8b0:	d65f03c0 	ret
	int ret = -EINVAL;
    4001f8b4:	128002a0 	mov	w0, #0xffffffea            	// #-22
    4001f8b8:	92407c84 	and	x4, x4, #0xffffffff
    4001f8bc:	d51b4224 	msr	daif, x4
}
    4001f8c0:	d65f03c0 	ret

000000004001f8c4 <z_set_timeout_expiry>:
	}
	return ret;
}

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    4001f8c4:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    4001f8c8:	910003fd 	mov	x29, sp
    4001f8cc:	a90153f3 	stp	x19, x20, [sp, #16]
    4001f8d0:	2a0003f3 	mov	w19, w0
    4001f8d4:	f90013f5 	str	x21, [sp, #32]
    4001f8d8:	12001c35 	and	w21, w1, #0xff
    4001f8dc:	d53b4234 	mrs	x20, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001f8e0:	d50342df 	msr	daifset, #0x2
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    4001f8e4:	97ffff74 	bl	4001f6b4 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    4001f8e8:	6b13001f 	cmp	w0, w19
    4001f8ec:	3a41b804 	ccmn	w0, #0x1, #0x4, lt  // lt = tstop
    4001f8f0:	7a410804 	ccmp	w0, #0x1, #0x4, eq  // eq = none
    4001f8f4:	540000ad 	b.le	4001f908 <z_set_timeout_expiry+0x44>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    4001f8f8:	6b13001f 	cmp	w0, w19
    4001f8fc:	2a1503e1 	mov	w1, w21
    4001f900:	1a93d000 	csel	w0, w0, w19, le
    4001f904:	97fffaf7 	bl	4001e4e0 <sys_clock_set_timeout>
MAKE_REG_HELPER(daif)
    4001f908:	92407e94 	and	x20, x20, #0xffffffff
    4001f90c:	d51b4234 	msr	daif, x20
		}
	}
}
    4001f910:	a94153f3 	ldp	x19, x20, [sp, #16]
    4001f914:	f94013f5 	ldr	x21, [sp, #32]
    4001f918:	a8c37bfd 	ldp	x29, x30, [sp], #48
    4001f91c:	d65f03c0 	ret

000000004001f920 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    4001f920:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    4001f924:	910003fd 	mov	x29, sp
    4001f928:	a90153f3 	stp	x19, x20, [sp, #16]
    4001f92c:	a9025bf5 	stp	x21, x22, [sp, #32]
    4001f930:	2a0003f5 	mov	w21, w0
    4001f934:	a90363f7 	stp	x23, x24, [sp, #48]
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    4001f938:	97fffdc9 	bl	4001f05c <z_time_slice>
    4001f93c:	d53b4233 	mrs	x19, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001f940:	d50342df 	msr	daifset, #0x2
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    4001f944:	90000334 	adrp	x20, 40083000 <ws+0x3a40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    4001f948:	90000336 	adrp	x22, 40083000 <ws+0x3a40>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    4001f94c:	912a6297 	add	x23, x20, #0xa98
    4001f950:	aa1603f8 	mov	x24, x22
	announce_remaining = ticks;
    4001f954:	b90a9a95 	str	w21, [x20, #2712]
	return list->head == list;
    4001f958:	f0000575 	adrp	x21, 400ce000 <z_interrupt_stacks+0x440>
    4001f95c:	913022b5 	add	x21, x21, #0xc08
	while (first() != NULL && first()->dticks <= announce_remaining) {
    4001f960:	b94002e4 	ldr	w4, [x23]
	return key;
}

static ALWAYS_INLINE void arch_irq_unlock(unsigned int key)
{
	write_daif(key);
    4001f964:	2a1303f3 	mov	w19, w19
    4001f968:	f94002a0 	ldr	x0, [x21]
		curr_tick += dt;
    4001f96c:	f94512c3 	ldr	x3, [x22, #2592]
    4001f970:	93407c82 	sxtw	x2, w4
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4001f974:	eb15001f 	cmp	x0, x21
    4001f978:	540000e0 	b.eq	4001f994 <sys_clock_announce+0x74>  // b.none
	while (first() != NULL && first()->dticks <= announce_remaining) {
    4001f97c:	b40000c0 	cbz	x0, 4001f994 <sys_clock_announce+0x74>
    4001f980:	f9400c01 	ldr	x1, [x0, #24]
    4001f984:	eb02003f 	cmp	x1, x2
    4001f988:	540001ed 	b.le	4001f9c4 <sys_clock_announce+0xa4>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    4001f98c:	cb020021 	sub	x1, x1, x2
    4001f990:	f9000c01 	str	x1, [x0, #24]
	}

	curr_tick += announce_remaining;
    4001f994:	8b030042 	add	x2, x2, x3
	announce_remaining = 0;
    4001f998:	b90a9a9f 	str	wzr, [x20, #2712]
	curr_tick += announce_remaining;
    4001f99c:	f9051302 	str	x2, [x24, #2592]

	sys_clock_set_timeout(next_timeout(), false);
    4001f9a0:	97ffff45 	bl	4001f6b4 <next_timeout>
    4001f9a4:	52800001 	mov	w1, #0x0                   	// #0
    4001f9a8:	97ffface 	bl	4001e4e0 <sys_clock_set_timeout>
MAKE_REG_HELPER(daif)
    4001f9ac:	d51b4233 	msr	daif, x19

	k_spin_unlock(&timeout_lock, key);
}
    4001f9b0:	a94153f3 	ldp	x19, x20, [sp, #16]
    4001f9b4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4001f9b8:	a94363f7 	ldp	x23, x24, [sp, #48]
    4001f9bc:	a8c47bfd 	ldp	x29, x30, [sp], #64
    4001f9c0:	d65f03c0 	ret
		curr_tick += dt;
    4001f9c4:	8b21c062 	add	x2, x3, w1, sxtw
		announce_remaining -= dt;
    4001f9c8:	4b010081 	sub	w1, w4, w1
		t->dticks = 0;
    4001f9cc:	f9000c1f 	str	xzr, [x0, #24]
		curr_tick += dt;
    4001f9d0:	f90512c2 	str	x2, [x22, #2592]
		announce_remaining -= dt;
    4001f9d4:	b90002e1 	str	w1, [x23]
		remove_timeout(t);
    4001f9d8:	97ffff54 	bl	4001f728 <remove_timeout>
    4001f9dc:	d51b4233 	msr	daif, x19
		t->fn(t);
    4001f9e0:	f9400801 	ldr	x1, [x0, #16]
    4001f9e4:	d63f0020 	blr	x1
    4001f9e8:	d53b4233 	mrs	x19, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001f9ec:	d50342df 	msr	daifset, #0x2
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    4001f9f0:	17ffffdc 	b	4001f960 <sys_clock_announce+0x40>

000000004001f9f4 <virt_region_alloc>:

	virt_region_inited = true;
}

static void *virt_region_alloc(size_t size)
{
    4001f9f4:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    4001f9f8:	910003fd 	mov	x29, sp
    4001f9fc:	a90153f3 	stp	x19, x20, [sp, #16]
    4001fa00:	aa0003f4 	mov	x20, x0
    4001fa04:	f0000573 	adrp	x19, 400ce000 <z_interrupt_stacks+0x440>
    4001fa08:	91306273 	add	x19, x19, #0xc18
    4001fa0c:	f90013f5 	str	x21, [sp, #32]
	uintptr_t dest_addr;
	size_t offset;
	size_t num_bits;
	int ret;

	if (unlikely(!virt_region_inited)) {
    4001fa10:	90000335 	adrp	x21, 40083000 <ws+0x3a40>
    4001fa14:	396ec6a0 	ldrb	w0, [x21, #2993]
    4001fa18:	350001a0 	cbnz	w0, 4001fa4c <virt_region_alloc+0x58>
	num_bits = POINTER_TO_UINT(Z_FREE_VM_START)
    4001fa1c:	b0000582 	adrp	x2, 400d0000 <_end>
    4001fa20:	91000042 	add	x2, x2, #0x0
		- POINTER_TO_UINT(vaddr) - size) / CONFIG_MMU_PAGE_SIZE;
    4001fa24:	d2a81000 	mov	x0, #0x40800000            	// #1082130432
	num_bits = POINTER_TO_UINT(Z_FREE_VM_START)
    4001fa28:	b26287e1 	mov	x1, #0xffffffffc0000000    	// #-1073741824
    4001fa2c:	8b010041 	add	x1, x2, x1
		- POINTER_TO_UINT(vaddr) - size) / CONFIG_MMU_PAGE_SIZE;
    4001fa30:	cb020002 	sub	x2, x0, x2
	(void)sys_bitarray_set_region(&virt_region_bitmap,
    4001fa34:	aa1303e0 	mov	x0, x19
    4001fa38:	d34cfc42 	lsr	x2, x2, #12
    4001fa3c:	d34cfc21 	lsr	x1, x1, #12
    4001fa40:	97ffefea 	bl	4001b9e8 <sys_bitarray_set_region>
	virt_region_inited = true;
    4001fa44:	52800020 	mov	w0, #0x1                   	// #1
    4001fa48:	392ec6a0 	strb	w0, [x21, #2993]
		virt_region_init();
	}

	num_bits = size / CONFIG_MMU_PAGE_SIZE;
	ret = sys_bitarray_alloc(&virt_region_bitmap, num_bits, &offset);
    4001fa4c:	9100e3e2 	add	x2, sp, #0x38
    4001fa50:	d34cfe81 	lsr	x1, x20, #12
    4001fa54:	aa1303e0 	mov	x0, x19
    4001fa58:	97ffef75 	bl	4001b82c <sys_bitarray_alloc>
	if (ret != 0) {
    4001fa5c:	350001c0 	cbnz	w0, 4001fa94 <virt_region_alloc+0xa0>

	/* Remember that bit #0 in bitmap corresponds to the highest
	 * virtual address. So here we need to go downwards (backwards?)
	 * to get the starting address of the allocated region.
	 */
	dest_addr = virt_from_bitmap_offset(offset, size);
    4001fa60:	f9401fe2 	ldr	x2, [sp, #56]
	       - (offset * CONFIG_MMU_PAGE_SIZE) - size;
    4001fa64:	d2810003 	mov	x3, #0x800                 	// #2048
    4001fa68:	f2a00083 	movk	x3, #0x4, lsl #16

	/* Need to make sure this does not step into kernel memory */
	if (dest_addr < POINTER_TO_UINT(Z_VIRT_REGION_START_ADDR)) {
    4001fa6c:	b0000581 	adrp	x1, 400d0000 <_end>
    4001fa70:	91000021 	add	x1, x1, #0x0
	       - (offset * CONFIG_MMU_PAGE_SIZE) - size;
    4001fa74:	cb020063 	sub	x3, x3, x2
    4001fa78:	d374cc63 	lsl	x3, x3, #12
		(void)sys_bitarray_free(&virt_region_bitmap, size, offset);
		return NULL;
	}

	return UINT_TO_POINTER(dest_addr);
    4001fa7c:	cb140060 	sub	x0, x3, x20
	if (dest_addr < POINTER_TO_UINT(Z_VIRT_REGION_START_ADDR)) {
    4001fa80:	eb01001f 	cmp	x0, x1
    4001fa84:	540000a2 	b.cs	4001fa98 <virt_region_alloc+0xa4>  // b.hs, b.nlast
		(void)sys_bitarray_free(&virt_region_bitmap, size, offset);
    4001fa88:	aa1403e1 	mov	x1, x20
    4001fa8c:	aa1303e0 	mov	x0, x19
    4001fa90:	97ffefac 	bl	4001b940 <sys_bitarray_free>
		return NULL;
    4001fa94:	d2800000 	mov	x0, #0x0                   	// #0
}
    4001fa98:	a94153f3 	ldp	x19, x20, [sp, #16]
    4001fa9c:	f94013f5 	ldr	x21, [sp, #32]
    4001faa0:	a8c47bfd 	ldp	x29, x30, [sp], #64
    4001faa4:	d65f03c0 	ret

000000004001faa8 <free_page_frame_list_put>:
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    4001faa8:	90000323 	adrp	x3, 40083000 <ws+0x3a40>
    4001faac:	9128a061 	add	x1, x3, #0xa28
    4001fab0:	f9400422 	ldr	x2, [x1, #8]
	parent->next = child;
    4001fab4:	f900001f 	str	xzr, [x0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    4001fab8:	b5000102 	cbnz	x2, 4001fad8 <free_page_frame_list_put+0x30>
	list->head = node;
    4001fabc:	f9051460 	str	x0, [x3, #2600]
	list->tail = node;
    4001fac0:	f9000420 	str	x0, [x1, #8]
static void free_page_frame_list_put(struct z_page_frame *pf)
{
	PF_ASSERT(pf, z_page_frame_is_available(pf),
		 "unavailable page put on free list");
	sys_slist_append(&free_page_frame_list, &pf->node);
	z_free_page_count++;
    4001fac4:	90000321 	adrp	x1, 40083000 <ws+0x3a40>
    4001fac8:	f9451c20 	ldr	x0, [x1, #2616]
    4001facc:	91000400 	add	x0, x0, #0x1
    4001fad0:	f9051c20 	str	x0, [x1, #2616]
}
    4001fad4:	d65f03c0 	ret
	parent->next = child;
    4001fad8:	f9000040 	str	x0, [x2]
	list->tail = node;
    4001fadc:	f9000420 	str	x0, [x1, #8]
}
    4001fae0:	17fffff9 	b	4001fac4 <free_page_frame_list_put+0x1c>

000000004001fae4 <k_mem_map>:

	return 0;
}

void *k_mem_map(size_t size, uint32_t flags)
{
    4001fae4:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
    4001fae8:	910003fd 	mov	x29, sp
    4001faec:	a90153f3 	stp	x19, x20, [sp, #16]
    4001faf0:	aa0003f4 	mov	x20, x0
    4001faf4:	a9025bf5 	stp	x21, x22, [sp, #32]
    4001faf8:	a90363f7 	stp	x23, x24, [sp, #48]
    4001fafc:	2a0103f7 	mov	w23, w1
    4001fb00:	a9046bf9 	stp	x25, x26, [sp, #64]
    4001fb04:	a90573fb 	stp	x27, x28, [sp, #80]
MAKE_REG_HELPER(daif)
    4001fb08:	d53b4238 	mrs	x24, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001fb0c:	d50342df 	msr	daifset, #0x2
	/* Need extra for the guard pages (before and after) which we
	 * won't map.
	 */
	total_size = size + CONFIG_MMU_PAGE_SIZE * 2;

	dst = virt_region_alloc(total_size);
    4001fb10:	91400800 	add	x0, x0, #0x2, lsl #12
    4001fb14:	97ffffb8 	bl	4001f9f4 <virt_region_alloc>
	if (dst == NULL) {
    4001fb18:	b5000180 	cbnz	x0, 4001fb48 <k_mem_map+0x64>
	dst = virt_region_alloc(total_size);
    4001fb1c:	d2800013 	mov	x19, #0x0                   	// #0
MAKE_REG_HELPER(daif)
    4001fb20:	92407f18 	and	x24, x24, #0xffffffff
    4001fb24:	d51b4238 	msr	daif, x24
		}
	}
out:
	k_spin_unlock(&z_mm_lock, key);
	return dst;
}
    4001fb28:	aa1303e0 	mov	x0, x19
    4001fb2c:	a94153f3 	ldp	x19, x20, [sp, #16]
    4001fb30:	a9425bf5 	ldp	x21, x22, [sp, #32]
    4001fb34:	a94363f7 	ldp	x23, x24, [sp, #48]
    4001fb38:	a9446bf9 	ldp	x25, x26, [sp, #64]
    4001fb3c:	a94573fb 	ldp	x27, x28, [sp, #80]
    4001fb40:	a8c77bfd 	ldp	x29, x30, [sp], #112
    4001fb44:	d65f03c0 	ret
    4001fb48:	aa0003f3 	mov	x19, x0
	arch_mem_unmap(dst + CONFIG_MMU_PAGE_SIZE + size,
    4001fb4c:	91400694 	add	x20, x20, #0x1, lsl #12
    4001fb50:	8b140279 	add	x25, x19, x20
	dst += CONFIG_MMU_PAGE_SIZE;
    4001fb54:	91400673 	add	x19, x19, #0x1, lsl #12
	return list->head;
    4001fb58:	90000336 	adrp	x22, 40083000 <ws+0x3a40>
    4001fb5c:	9128a2d6 	add	x22, x22, #0xa28

extern struct z_page_frame z_page_frames[Z_NUM_PAGE_FRAMES];

static inline uintptr_t z_page_frame_to_phys(struct z_page_frame *pf)
{
	return (uintptr_t)((pf - z_page_frames) * CONFIG_MMU_PAGE_SIZE) +
    4001fb60:	9000033a 	adrp	x26, 40083000 <ws+0x3a40>
    4001fb64:	912ecb5a 	add	x26, x26, #0xbb2
    4001fb68:	d291c73b 	mov	x27, #0x8e39                	// #36409
    4001fb6c:	f2a71c7b 	movk	x27, #0x38e3, lsl #16
	VIRT_FOREACH(dst, size, pos) {
    4001fb70:	aa1303f5 	mov	x21, x19
    4001fb74:	f2dc71db 	movk	x27, #0xe38e, lsl #32
    4001fb78:	f2f1c71b 	movk	x27, #0x8e38, lsl #48
	arch_mem_unmap(dst, CONFIG_MMU_PAGE_SIZE);
    4001fb7c:	d2820001 	mov	x1, #0x1000                	// #4096
    4001fb80:	97fff725 	bl	4001d814 <arch_mem_unmap>
	arch_mem_unmap(dst + CONFIG_MMU_PAGE_SIZE + size,
    4001fb84:	aa1903e0 	mov	x0, x25
    4001fb88:	d2820001 	mov	x1, #0x1000                	// #4096
    4001fb8c:	97fff722 	bl	4001d814 <arch_mem_unmap>
	VIRT_FOREACH(dst, size, pos) {
    4001fb90:	eb15033f 	cmp	x25, x21
    4001fb94:	54fffc69 	b.ls	4001fb20 <k_mem_map+0x3c>  // b.plast
    4001fb98:	f94002d4 	ldr	x20, [x22]
    4001fb9c:	120f02e4 	and	w4, w23, #0x20000
	bool uninit = (flags & K_MEM_MAP_UNINIT) != 0U;
    4001fba0:	121002fc 	and	w28, w23, #0x10000
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    4001fba4:	b4fffbd4 	cbz	x20, 4001fb1c <k_mem_map+0x38>
	return node->next;
    4001fba8:	f9400280 	ldr	x0, [x20]
	list->head = node;
    4001fbac:	f90002c0 	str	x0, [x22]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4001fbb0:	f94006c1 	ldr	x1, [x22, #8]
    4001fbb4:	eb01029f 	cmp	x20, x1
    4001fbb8:	54000041 	b.ne	4001fbc0 <k_mem_map+0xdc>  // b.any
	list->tail = node;
    4001fbbc:	f90006c0 	str	x0, [x22, #8]
		z_free_page_count--;
    4001fbc0:	90000321 	adrp	x1, 40083000 <ws+0x3a40>
    4001fbc4:	f9451c20 	ldr	x0, [x1, #2616]
	arch_mem_map(addr, phys, CONFIG_MMU_PAGE_SIZE, flags | K_MEM_CACHE_WB);
    4001fbc8:	2a1703e3 	mov	w3, w23
    4001fbcc:	d2820002 	mov	x2, #0x1000                	// #4096
    4001fbd0:	b9006fe4 	str	w4, [sp, #108]
		z_free_page_count--;
    4001fbd4:	d1000400 	sub	x0, x0, #0x1
    4001fbd8:	f9051c20 	str	x0, [x1, #2616]
    4001fbdc:	cb1a0280 	sub	x0, x20, x26
	arch_mem_map(addr, phys, CONFIG_MMU_PAGE_SIZE, flags | K_MEM_CACHE_WB);
    4001fbe0:	d2a80001 	mov	x1, #0x40000000            	// #1073741824
    4001fbe4:	9b1b7c00 	mul	x0, x0, x27
    4001fbe8:	8b003021 	add	x1, x1, x0, lsl #12
    4001fbec:	aa1503e0 	mov	x0, x21
    4001fbf0:	97fff6e5 	bl	4001d784 <arch_mem_map>
	if (lock) {
    4001fbf4:	b9406fe4 	ldr	w4, [sp, #108]
    4001fbf8:	34000084 	cbz	w4, 4001fc08 <k_mem_map+0x124>
		pf->flags |= Z_PAGE_FRAME_PINNED;
    4001fbfc:	39402280 	ldrb	w0, [x20, #8]
    4001fc00:	32000000 	orr	w0, w0, #0x1
    4001fc04:	39002280 	strb	w0, [x20, #8]
	pf->flags |= Z_PAGE_FRAME_MAPPED;
    4001fc08:	39402280 	ldrb	w0, [x20, #8]
	pf->addr = addr;
    4001fc0c:	f9000295 	str	x21, [x20]
	pf->flags |= Z_PAGE_FRAME_MAPPED;
    4001fc10:	321e0000 	orr	w0, w0, #0x4
    4001fc14:	39002280 	strb	w0, [x20, #8]
	if (!uninit) {
    4001fc18:	350000bc 	cbnz	w28, 4001fc2c <k_mem_map+0x148>

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    4001fc1c:	aa1503e0 	mov	x0, x21
    4001fc20:	d2820002 	mov	x2, #0x1000                	// #4096
    4001fc24:	52800001 	mov	w1, #0x0                   	// #0
    4001fc28:	97ff8546 	bl	40001140 <memset>
	VIRT_FOREACH(dst, size, pos) {
    4001fc2c:	914006b5 	add	x21, x21, #0x1, lsl #12
    4001fc30:	17ffffd8 	b	4001fb90 <k_mem_map+0xac>

000000004001fc34 <k_mem_free_get>:
    4001fc34:	d53b4221 	mrs	x1, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001fc38:	d50342df 	msr	daifset, #0x2
		ret = z_free_page_count - CONFIG_DEMAND_PAGING_PAGE_FRAMES_RESERVE;
	} else {
		ret = 0;
	}
#else
	ret = z_free_page_count;
    4001fc3c:	90000320 	adrp	x0, 40083000 <ws+0x3a40>
    4001fc40:	f9451c00 	ldr	x0, [x0, #2616]
MAKE_REG_HELPER(daif)
    4001fc44:	92407c21 	and	x1, x1, #0xffffffff
    4001fc48:	d51b4221 	msr	daif, x1
#endif
	k_spin_unlock(&z_mm_lock, key);

	return ret * (size_t)CONFIG_MMU_PAGE_SIZE;
}
    4001fc4c:	d374cc00 	lsl	x0, x0, #12
    4001fc50:	d65f03c0 	ret

000000004001fc54 <z_mem_manage_init>:
    4001fc54:	d53b4225 	mrs	x5, daif
	__asm__ volatile ("msr DAIFSet, %0"
    4001fc58:	d50342df 	msr	daifset, #0x2
	list->head = NULL;
    4001fc5c:	90000320 	adrp	x0, 40083000 <ws+0x3a40>
    4001fc60:	9128a001 	add	x1, x0, #0xa28

#ifdef CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT
	/* All pages composing the Zephyr image are mapped at boot in a
	 * predictable way. This can change at runtime.
	 */
	VIRT_FOREACH(Z_KERNEL_VIRT_START, Z_KERNEL_VIRT_SIZE, addr)
    4001fc64:	b0000582 	adrp	x2, 400d0000 <_end>
    4001fc68:	91000042 	add	x2, x2, #0x0
    4001fc6c:	f905141f 	str	xzr, [x0, #2600]
	list->tail = NULL;
    4001fc70:	90000324 	adrp	x4, 40083000 <ws+0x3a40>
    4001fc74:	912ec884 	add	x4, x4, #0xbb2
    4001fc78:	b0ffff00 	adrp	x0, 40000000 <__text_region_start>
    4001fc7c:	91000000 	add	x0, x0, #0x0
static inline struct z_page_frame *z_phys_to_page_frame(uintptr_t phys)
{
	__ASSERT(z_is_page_frame(phys),
		 "0x%lx not an SRAM physical address", phys);

	return &z_page_frames[(phys - Z_PHYS_RAM_START) /
    4001fc80:	b26287e7 	mov	x7, #0xffffffffc0000000    	// #-1073741824
		 * code/data pages which are pinned in memory and
		 * may not be evicted. This will contain critical CPU data
		 * structures, and any code used to perform page fault
		 * handling, page-ins, etc.
		 */
		pf->flags |= Z_PAGE_FRAME_PINNED;
    4001fc84:	528000a8 	mov	w8, #0x5                   	// #5
    4001fc88:	f900043f 	str	xzr, [x1, #8]
	VIRT_FOREACH(Z_KERNEL_VIRT_START, Z_KERNEL_VIRT_SIZE, addr)
    4001fc8c:	eb02001f 	cmp	x0, x2
    4001fc90:	54000183 	b.cc	4001fcc0 <z_mem_manage_init+0x6c>  // b.lo, b.ul, b.last
#endif

	/* Any remaining pages that aren't mapped, reserved, or pinned get
	 * added to the free pages list
	 */
	Z_PAGE_FRAME_FOREACH(phys, pf) {
    4001fc94:	d2a80006 	mov	x6, #0x40000000            	// #1073741824
    4001fc98:	d2a90007 	mov	x7, #0x48000000            	// #1207959552
		if (z_page_frame_is_available(pf)) {
    4001fc9c:	39402080 	ldrb	w0, [x4, #8]
    4001fca0:	340003c0 	cbz	w0, 4001fd18 <z_mem_manage_init+0xc4>
	Z_PAGE_FRAME_FOREACH(phys, pf) {
    4001fca4:	914004c6 	add	x6, x6, #0x1, lsl #12
    4001fca8:	91002484 	add	x4, x4, #0x9
    4001fcac:	eb0700df 	cmp	x6, x7
    4001fcb0:	54ffff61 	b.ne	4001fc9c <z_mem_manage_init+0x48>  // b.any
MAKE_REG_HELPER(daif)
    4001fcb4:	92407ca5 	and	x5, x5, #0xffffffff
    4001fcb8:	d51b4225 	msr	daif, x5
    4001fcbc:	d65f03c0 	ret
    4001fcc0:	8b070001 	add	x1, x0, x7
    4001fcc4:	d34cfc21 	lsr	x1, x1, #12
	pf->flags |= Z_PAGE_FRAME_MAPPED;
    4001fcc8:	8b010c21 	add	x1, x1, x1, lsl #3
    4001fccc:	8b010086 	add	x6, x4, x1
	pf->addr = addr;
    4001fcd0:	f8216880 	str	x0, [x4, x1]
	VIRT_FOREACH(Z_KERNEL_VIRT_START, Z_KERNEL_VIRT_SIZE, addr)
    4001fcd4:	91400400 	add	x0, x0, #0x1, lsl #12
	pf->flags |= Z_PAGE_FRAME_MAPPED;
    4001fcd8:	394020c3 	ldrb	w3, [x6, #8]
		pf->flags |= Z_PAGE_FRAME_PINNED;
    4001fcdc:	2a080061 	orr	w1, w3, w8
    4001fce0:	390020c1 	strb	w1, [x6, #8]
	VIRT_FOREACH(Z_KERNEL_VIRT_START, Z_KERNEL_VIRT_SIZE, addr)
    4001fce4:	17ffffea 	b	4001fc8c <z_mem_manage_init+0x38>
		if (z_page_frame_is_available(pf)) {
    4001fce8:	39402080 	ldrb	w0, [x4, #8]
    4001fcec:	35000060 	cbnz	w0, 4001fcf8 <z_mem_manage_init+0xa4>
			free_page_frame_list_put(pf);
    4001fcf0:	aa0403e0 	mov	x0, x4
    4001fcf4:	97ffff6d 	bl	4001faa8 <free_page_frame_list_put>
	Z_PAGE_FRAME_FOREACH(phys, pf) {
    4001fcf8:	914004c6 	add	x6, x6, #0x1, lsl #12
    4001fcfc:	91002484 	add	x4, x4, #0x9
    4001fd00:	eb0700df 	cmp	x6, x7
    4001fd04:	54ffff21 	b.ne	4001fce8 <z_mem_manage_init+0x94>  // b.any
    4001fd08:	92407ca5 	and	x5, x5, #0xffffffff
    4001fd0c:	d51b4225 	msr	daif, x5
	 * and the BSS pages can be brought into physical
	 * memory to be cleared.
	 */
	z_bss_zero();
#endif
}
    4001fd10:	a8c17bfd 	ldp	x29, x30, [sp], #16
    4001fd14:	d65f03c0 	ret
{
    4001fd18:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    4001fd1c:	910003fd 	mov	x29, sp
    4001fd20:	17fffff4 	b	4001fcf0 <z_mem_manage_init+0x9c>

000000004001fd24 <z_mem_manage_boot_finish>:
	/* At the end of boot process, unpin the boot sections
	 * as they don't need to be in memory all the time anymore.
	 */
	mark_linker_section_pinned(lnkr_boot_start, lnkr_boot_end, false);
#endif
}
    4001fd24:	d65f03c0 	ret

000000004001fd28 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    4001fd28:	90000022 	adrp	x2, 40023000 <fpi.1>
    4001fd2c:	912e9842 	add	x2, x2, #0xba6
    4001fd30:	90000021 	adrp	x1, 40023000 <fpi.1>
    4001fd34:	91372c21 	add	x1, x1, #0xdcb
    4001fd38:	90000020 	adrp	x0, 40023000 <fpi.1>
    4001fd3c:	91379800 	add	x0, x0, #0xde6
    4001fd40:	17ffedcb 	b	4001b46c <printk>
	...
